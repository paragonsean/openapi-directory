# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation_entity import RelationEntity
from openapi_server import util


class Relation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_score: float=None, entities: List[RelationEntity]=None, extra: str=None, relation_type: str=None, type: str=None):
        """Relation - a model defined in OpenAPI

        :param confidence_score: The confidence_score of this Relation.
        :param entities: The entities of this Relation.
        :param extra: The extra of this Relation.
        :param relation_type: The relation_type of this Relation.
        :param type: The type of this Relation.
        """
        self.openapi_types = {
            'confidence_score': float,
            'entities': List[RelationEntity],
            'extra': str,
            'relation_type': str,
            'type': str
        }

        self.attribute_map = {
            'confidence_score': 'confidence_score',
            'entities': 'entities',
            'extra': 'extra',
            'relation_type': 'relation_type',
            'type': 'type'
        }

        self._confidence_score = confidence_score
        self._entities = entities
        self._extra = extra
        self._relation_type = relation_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relation of this Relation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_score(self):
        """Gets the confidence_score of this Relation.

        A measure of confidence in the relationship extraction

        :return: The confidence_score of this Relation.
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this Relation.

        A measure of confidence in the relationship extraction

        :param confidence_score: The confidence_score of this Relation.
        :type confidence_score: float
        """
        if confidence_score is None:
            raise ValueError("Invalid value for `confidence_score`, must not be `None`")

        self._confidence_score = confidence_score

    @property
    def entities(self):
        """Gets the entities of this Relation.

        Returns entities which presents parent relationship

        :return: The entities of this Relation.
        :rtype: List[RelationEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this Relation.

        Returns entities which presents parent relationship

        :param entities: The entities of this Relation.
        :type entities: List[RelationEntity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def extra(self):
        """Gets the extra of this Relation.

        Extra information that has been extracted about the relationship

        :return: The extra of this Relation.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Relation.

        Extra information that has been extracted about the relationship

        :param extra: The extra of this Relation.
        :type extra: str
        """
        if extra is None:
            raise ValueError("Invalid value for `extra`, must not be `None`")

        self._extra = extra

    @property
    def relation_type(self):
        """Gets the relation_type of this Relation.

        A label describing the nature of the relationship

        :return: The relation_type of this Relation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this Relation.

        A label describing the nature of the relationship

        :param relation_type: The relation_type of this Relation.
        :type relation_type: str
        """
        if relation_type is None:
            raise ValueError("Invalid value for `relation_type`, must not be `None`")

        self._relation_type = relation_type

    @property
    def type(self):
        """Gets the type of this Relation.

        Type of relation according to extracted entities

        :return: The type of this Relation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Relation.

        Type of relation according to extracted entities

        :param type: The type of this Relation.
        :type type: str
        """
        allowed_values = ["named", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
