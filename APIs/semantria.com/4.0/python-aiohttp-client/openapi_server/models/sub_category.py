# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, strength_score: float=None, title: str=None, type: str=None):
        """SubCategory - a model defined in OpenAPI

        :param strength_score: The strength_score of this SubCategory.
        :param title: The title of this SubCategory.
        :param type: The type of this SubCategory.
        """
        self.openapi_types = {
            'strength_score': float,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'strength_score': 'strength_score',
            'title': 'title',
            'type': 'type'
        }

        self._strength_score = strength_score
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubCategory of this SubCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def strength_score(self):
        """Gets the strength_score of this SubCategory.

        Strength of the category matches with the document content

        :return: The strength_score of this SubCategory.
        :rtype: float
        """
        return self._strength_score

    @strength_score.setter
    def strength_score(self, strength_score):
        """Sets the strength_score of this SubCategory.

        Strength of the category matches with the document content

        :param strength_score: The strength_score of this SubCategory.
        :type strength_score: float
        """
        if strength_score is None:
            raise ValueError("Invalid value for `strength_score`, must not be `None`")

        self._strength_score = strength_score

    @property
    def title(self):
        """Gets the title of this SubCategory.

        The category title, which is its label in the text

        :return: The title of this SubCategory.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubCategory.

        The category title, which is its label in the text

        :param title: The title of this SubCategory.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this SubCategory.

        Type of category; can be either \"node\" (root level) or \"leaf\" (nested) value

        :return: The type of this SubCategory.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubCategory.

        Type of category; can be either \"node\" (root level) or \"leaf\" (nested) value

        :param type: The type of this SubCategory.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
