# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.statistic_configuration import StatisticConfiguration
from openapi_server import util


class Statistic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls_data: int=None, calls_polling: int=None, calls_settings: int=None, colls_documents: int=None, colls_failed: int=None, colls_processed: int=None, colls_responded: int=None, configurations: List[StatisticConfiguration]=None, docs_failed: int=None, docs_processed: int=None, docs_responded: int=None, latest_used_app: str=None, name: str=None, overall_batches: int=None, overall_calls: int=None, overall_docs: int=None, overall_exceeded: int=None, overall_texts: int=None, overcall_colls: int=None, status: str=None, used_apps: str=None):
        """Statistic - a model defined in OpenAPI

        :param calls_data: The calls_data of this Statistic.
        :param calls_polling: The calls_polling of this Statistic.
        :param calls_settings: The calls_settings of this Statistic.
        :param colls_documents: The colls_documents of this Statistic.
        :param colls_failed: The colls_failed of this Statistic.
        :param colls_processed: The colls_processed of this Statistic.
        :param colls_responded: The colls_responded of this Statistic.
        :param configurations: The configurations of this Statistic.
        :param docs_failed: The docs_failed of this Statistic.
        :param docs_processed: The docs_processed of this Statistic.
        :param docs_responded: The docs_responded of this Statistic.
        :param latest_used_app: The latest_used_app of this Statistic.
        :param name: The name of this Statistic.
        :param overall_batches: The overall_batches of this Statistic.
        :param overall_calls: The overall_calls of this Statistic.
        :param overall_docs: The overall_docs of this Statistic.
        :param overall_exceeded: The overall_exceeded of this Statistic.
        :param overall_texts: The overall_texts of this Statistic.
        :param overcall_colls: The overcall_colls of this Statistic.
        :param status: The status of this Statistic.
        :param used_apps: The used_apps of this Statistic.
        """
        self.openapi_types = {
            'calls_data': int,
            'calls_polling': int,
            'calls_settings': int,
            'colls_documents': int,
            'colls_failed': int,
            'colls_processed': int,
            'colls_responded': int,
            'configurations': List[StatisticConfiguration],
            'docs_failed': int,
            'docs_processed': int,
            'docs_responded': int,
            'latest_used_app': str,
            'name': str,
            'overall_batches': int,
            'overall_calls': int,
            'overall_docs': int,
            'overall_exceeded': int,
            'overall_texts': int,
            'overcall_colls': int,
            'status': str,
            'used_apps': str
        }

        self.attribute_map = {
            'calls_data': 'calls_data',
            'calls_polling': 'calls_polling',
            'calls_settings': 'calls_settings',
            'colls_documents': 'colls_documents',
            'colls_failed': 'colls_failed',
            'colls_processed': 'colls_processed',
            'colls_responded': 'colls_responded',
            'configurations': 'configurations',
            'docs_failed': 'docs_failed',
            'docs_processed': 'docs_processed',
            'docs_responded': 'docs_responded',
            'latest_used_app': 'latest_used_app',
            'name': 'name',
            'overall_batches': 'overall_batches',
            'overall_calls': 'overall_calls',
            'overall_docs': 'overall_docs',
            'overall_exceeded': 'overall_exceeded',
            'overall_texts': 'overall_texts',
            'overcall_colls': 'overcall_colls',
            'status': 'status',
            'used_apps': 'used_apps'
        }

        self._calls_data = calls_data
        self._calls_polling = calls_polling
        self._calls_settings = calls_settings
        self._colls_documents = colls_documents
        self._colls_failed = colls_failed
        self._colls_processed = colls_processed
        self._colls_responded = colls_responded
        self._configurations = configurations
        self._docs_failed = docs_failed
        self._docs_processed = docs_processed
        self._docs_responded = docs_responded
        self._latest_used_app = latest_used_app
        self._name = name
        self._overall_batches = overall_batches
        self._overall_calls = overall_calls
        self._overall_docs = overall_docs
        self._overall_exceeded = overall_exceeded
        self._overall_texts = overall_texts
        self._overcall_colls = overcall_colls
        self._status = status
        self._used_apps = used_apps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statistic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statistic of this Statistic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls_data(self):
        """Gets the calls_data of this Statistic.

        Total number of data API calls made. These affect you API balance

        :return: The calls_data of this Statistic.
        :rtype: int
        """
        return self._calls_data

    @calls_data.setter
    def calls_data(self, calls_data):
        """Sets the calls_data of this Statistic.

        Total number of data API calls made. These affect you API balance

        :param calls_data: The calls_data of this Statistic.
        :type calls_data: int
        """
        if calls_data is None:
            raise ValueError("Invalid value for `calls_data`, must not be `None`")
        if calls_data is not None and calls_data < 0:
            raise ValueError("Invalid value for `calls_data`, must be a value greater than or equal to `0`")

        self._calls_data = calls_data

    @property
    def calls_polling(self):
        """Gets the calls_polling of this Statistic.

        Total number of polling API calls made. These do not affect API balance

        :return: The calls_polling of this Statistic.
        :rtype: int
        """
        return self._calls_polling

    @calls_polling.setter
    def calls_polling(self, calls_polling):
        """Sets the calls_polling of this Statistic.

        Total number of polling API calls made. These do not affect API balance

        :param calls_polling: The calls_polling of this Statistic.
        :type calls_polling: int
        """
        if calls_polling is None:
            raise ValueError("Invalid value for `calls_polling`, must not be `None`")
        if calls_polling is not None and calls_polling < 0:
            raise ValueError("Invalid value for `calls_polling`, must be a value greater than or equal to `0`")

        self._calls_polling = calls_polling

    @property
    def calls_settings(self):
        """Gets the calls_settings of this Statistic.

        Total number of settings API calls made. These do not affect API balance

        :return: The calls_settings of this Statistic.
        :rtype: int
        """
        return self._calls_settings

    @calls_settings.setter
    def calls_settings(self, calls_settings):
        """Sets the calls_settings of this Statistic.

        Total number of settings API calls made. These do not affect API balance

        :param calls_settings: The calls_settings of this Statistic.
        :type calls_settings: int
        """
        if calls_settings is None:
            raise ValueError("Invalid value for `calls_settings`, must not be `None`")
        if calls_settings is not None and calls_settings < 0:
            raise ValueError("Invalid value for `calls_settings`, must be a value greater than or equal to `0`")

        self._calls_settings = calls_settings

    @property
    def colls_documents(self):
        """Gets the colls_documents of this Statistic.

        Total number of documents that have been queued into collections

        :return: The colls_documents of this Statistic.
        :rtype: int
        """
        return self._colls_documents

    @colls_documents.setter
    def colls_documents(self, colls_documents):
        """Sets the colls_documents of this Statistic.

        Total number of documents that have been queued into collections

        :param colls_documents: The colls_documents of this Statistic.
        :type colls_documents: int
        """
        if colls_documents is None:
            raise ValueError("Invalid value for `colls_documents`, must not be `None`")
        if colls_documents is not None and colls_documents < 0:
            raise ValueError("Invalid value for `colls_documents`, must be a value greater than or equal to `0`")

        self._colls_documents = colls_documents

    @property
    def colls_failed(self):
        """Gets the colls_failed of this Statistic.

        Total number of collections that have failed to be processed

        :return: The colls_failed of this Statistic.
        :rtype: int
        """
        return self._colls_failed

    @colls_failed.setter
    def colls_failed(self, colls_failed):
        """Sets the colls_failed of this Statistic.

        Total number of collections that have failed to be processed

        :param colls_failed: The colls_failed of this Statistic.
        :type colls_failed: int
        """
        if colls_failed is None:
            raise ValueError("Invalid value for `colls_failed`, must not be `None`")
        if colls_failed is not None and colls_failed < 0:
            raise ValueError("Invalid value for `colls_failed`, must be a value greater than or equal to `0`")

        self._colls_failed = colls_failed

    @property
    def colls_processed(self):
        """Gets the colls_processed of this Statistic.

        Total numbers of collections that have been successfully processed

        :return: The colls_processed of this Statistic.
        :rtype: int
        """
        return self._colls_processed

    @colls_processed.setter
    def colls_processed(self, colls_processed):
        """Sets the colls_processed of this Statistic.

        Total numbers of collections that have been successfully processed

        :param colls_processed: The colls_processed of this Statistic.
        :type colls_processed: int
        """
        if colls_processed is None:
            raise ValueError("Invalid value for `colls_processed`, must not be `None`")
        if colls_processed is not None and colls_processed < 0:
            raise ValueError("Invalid value for `colls_processed`, must be a value greater than or equal to `0`")

        self._colls_processed = colls_processed

    @property
    def colls_responded(self):
        """Gets the colls_responded of this Statistic.

        Total number of successfully processed collections that have been returned

        :return: The colls_responded of this Statistic.
        :rtype: int
        """
        return self._colls_responded

    @colls_responded.setter
    def colls_responded(self, colls_responded):
        """Sets the colls_responded of this Statistic.

        Total number of successfully processed collections that have been returned

        :param colls_responded: The colls_responded of this Statistic.
        :type colls_responded: int
        """
        if colls_responded is None:
            raise ValueError("Invalid value for `colls_responded`, must not be `None`")
        if colls_responded is not None and colls_responded < 0:
            raise ValueError("Invalid value for `colls_responded`, must be a value greater than or equal to `0`")

        self._colls_responded = colls_responded

    @property
    def configurations(self):
        """Gets the configurations of this Statistic.

        Includes statistics per specific configuration

        :return: The configurations of this Statistic.
        :rtype: List[StatisticConfiguration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this Statistic.

        Includes statistics per specific configuration

        :param configurations: The configurations of this Statistic.
        :type configurations: List[StatisticConfiguration]
        """
        if configurations is None:
            raise ValueError("Invalid value for `configurations`, must not be `None`")

        self._configurations = configurations

    @property
    def docs_failed(self):
        """Gets the docs_failed of this Statistic.

        Total number of documents that have failed to be processed

        :return: The docs_failed of this Statistic.
        :rtype: int
        """
        return self._docs_failed

    @docs_failed.setter
    def docs_failed(self, docs_failed):
        """Sets the docs_failed of this Statistic.

        Total number of documents that have failed to be processed

        :param docs_failed: The docs_failed of this Statistic.
        :type docs_failed: int
        """
        if docs_failed is None:
            raise ValueError("Invalid value for `docs_failed`, must not be `None`")
        if docs_failed is not None and docs_failed < 0:
            raise ValueError("Invalid value for `docs_failed`, must be a value greater than or equal to `0`")

        self._docs_failed = docs_failed

    @property
    def docs_processed(self):
        """Gets the docs_processed of this Statistic.

        Total number of documents that have been successfully processed

        :return: The docs_processed of this Statistic.
        :rtype: int
        """
        return self._docs_processed

    @docs_processed.setter
    def docs_processed(self, docs_processed):
        """Sets the docs_processed of this Statistic.

        Total number of documents that have been successfully processed

        :param docs_processed: The docs_processed of this Statistic.
        :type docs_processed: int
        """
        if docs_processed is None:
            raise ValueError("Invalid value for `docs_processed`, must not be `None`")
        if docs_processed is not None and docs_processed < 0:
            raise ValueError("Invalid value for `docs_processed`, must be a value greater than or equal to `0`")

        self._docs_processed = docs_processed

    @property
    def docs_responded(self):
        """Gets the docs_responded of this Statistic.

        Total number of successfully processed documents that have been returned

        :return: The docs_responded of this Statistic.
        :rtype: int
        """
        return self._docs_responded

    @docs_responded.setter
    def docs_responded(self, docs_responded):
        """Sets the docs_responded of this Statistic.

        Total number of successfully processed documents that have been returned

        :param docs_responded: The docs_responded of this Statistic.
        :type docs_responded: int
        """
        if docs_responded is None:
            raise ValueError("Invalid value for `docs_responded`, must not be `None`")
        if docs_responded is not None and docs_responded < 0:
            raise ValueError("Invalid value for `docs_responded`, must be a value greater than or equal to `0`")

        self._docs_responded = docs_responded

    @property
    def latest_used_app(self):
        """Gets the latest_used_app of this Statistic.

        The latest application that used the API on this account

        :return: The latest_used_app of this Statistic.
        :rtype: str
        """
        return self._latest_used_app

    @latest_used_app.setter
    def latest_used_app(self, latest_used_app):
        """Sets the latest_used_app of this Statistic.

        The latest application that used the API on this account

        :param latest_used_app: The latest_used_app of this Statistic.
        :type latest_used_app: str
        """
        if latest_used_app is None:
            raise ValueError("Invalid value for `latest_used_app`, must not be `None`")

        self._latest_used_app = latest_used_app

    @property
    def name(self):
        """Gets the name of this Statistic.

        Semantria subscriber name. Usually email

        :return: The name of this Statistic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Statistic.

        Semantria subscriber name. Usually email

        :param name: The name of this Statistic.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def overall_batches(self):
        """Gets the overall_batches of this Statistic.

        Total number of queued batches of texts processed

        :return: The overall_batches of this Statistic.
        :rtype: int
        """
        return self._overall_batches

    @overall_batches.setter
    def overall_batches(self, overall_batches):
        """Sets the overall_batches of this Statistic.

        Total number of queued batches of texts processed

        :param overall_batches: The overall_batches of this Statistic.
        :type overall_batches: int
        """
        if overall_batches is None:
            raise ValueError("Invalid value for `overall_batches`, must not be `None`")
        if overall_batches is not None and overall_batches < 0:
            raise ValueError("Invalid value for `overall_batches`, must be a value greater than or equal to `0`")

        self._overall_batches = overall_batches

    @property
    def overall_calls(self):
        """Gets the overall_calls of this Statistic.

        Total number of API calls made

        :return: The overall_calls of this Statistic.
        :rtype: int
        """
        return self._overall_calls

    @overall_calls.setter
    def overall_calls(self, overall_calls):
        """Sets the overall_calls of this Statistic.

        Total number of API calls made

        :param overall_calls: The overall_calls of this Statistic.
        :type overall_calls: int
        """
        if overall_calls is None:
            raise ValueError("Invalid value for `overall_calls`, must not be `None`")
        if overall_calls is not None and overall_calls < 0:
            raise ValueError("Invalid value for `overall_calls`, must be a value greater than or equal to `0`")

        self._overall_calls = overall_calls

    @property
    def overall_docs(self):
        """Gets the overall_docs of this Statistic.

        Total number of documents that have been queued

        :return: The overall_docs of this Statistic.
        :rtype: int
        """
        return self._overall_docs

    @overall_docs.setter
    def overall_docs(self, overall_docs):
        """Sets the overall_docs of this Statistic.

        Total number of documents that have been queued

        :param overall_docs: The overall_docs of this Statistic.
        :type overall_docs: int
        """
        if overall_docs is None:
            raise ValueError("Invalid value for `overall_docs`, must not be `None`")
        if overall_docs is not None and overall_docs < 0:
            raise ValueError("Invalid value for `overall_docs`, must be a value greater than or equal to `0`")

        self._overall_docs = overall_docs

    @property
    def overall_exceeded(self):
        """Gets the overall_exceeded of this Statistic.

        Total number of documents that have exceeded the favorable (suggested) limit

        :return: The overall_exceeded of this Statistic.
        :rtype: int
        """
        return self._overall_exceeded

    @overall_exceeded.setter
    def overall_exceeded(self, overall_exceeded):
        """Sets the overall_exceeded of this Statistic.

        Total number of documents that have exceeded the favorable (suggested) limit

        :param overall_exceeded: The overall_exceeded of this Statistic.
        :type overall_exceeded: int
        """
        if overall_exceeded is None:
            raise ValueError("Invalid value for `overall_exceeded`, must not be `None`")
        if overall_exceeded is not None and overall_exceeded < 0:
            raise ValueError("Invalid value for `overall_exceeded`, must be a value greater than or equal to `0`")

        self._overall_exceeded = overall_exceeded

    @property
    def overall_texts(self):
        """Gets the overall_texts of this Statistic.

        Total number of texts processed

        :return: The overall_texts of this Statistic.
        :rtype: int
        """
        return self._overall_texts

    @overall_texts.setter
    def overall_texts(self, overall_texts):
        """Sets the overall_texts of this Statistic.

        Total number of texts processed

        :param overall_texts: The overall_texts of this Statistic.
        :type overall_texts: int
        """
        if overall_texts is None:
            raise ValueError("Invalid value for `overall_texts`, must not be `None`")
        if overall_texts is not None and overall_texts < 0:
            raise ValueError("Invalid value for `overall_texts`, must be a value greater than or equal to `0`")

        self._overall_texts = overall_texts

    @property
    def overcall_colls(self):
        """Gets the overcall_colls of this Statistic.

        Total numbers of collections that have been queued

        :return: The overcall_colls of this Statistic.
        :rtype: int
        """
        return self._overcall_colls

    @overcall_colls.setter
    def overcall_colls(self, overcall_colls):
        """Sets the overcall_colls of this Statistic.

        Total numbers of collections that have been queued

        :param overcall_colls: The overcall_colls of this Statistic.
        :type overcall_colls: int
        """
        if overcall_colls is None:
            raise ValueError("Invalid value for `overcall_colls`, must not be `None`")
        if overcall_colls is not None and overcall_colls < 0:
            raise ValueError("Invalid value for `overcall_colls`, must be a value greater than or equal to `0`")

        self._overcall_colls = overcall_colls

    @property
    def status(self):
        """Gets the status of this Statistic.

        Semantria subscriber status. Can be active, expired, disabled, etc

        :return: The status of this Statistic.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Statistic.

        Semantria subscriber status. Can be active, expired, disabled, etc

        :param status: The status of this Statistic.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def used_apps(self):
        """Gets the used_apps of this Statistic.

        A list of all the applications that have used the API on this account

        :return: The used_apps of this Statistic.
        :rtype: str
        """
        return self._used_apps

    @used_apps.setter
    def used_apps(self, used_apps):
        """Sets the used_apps of this Statistic.

        A list of all the applications that have used the API on this account

        :param used_apps: The used_apps of this Statistic.
        :type used_apps: str
        """
        if used_apps is None:
            raise ValueError("Invalid value for `used_apps`, must not be `None`")

        self._used_apps = used_apps
