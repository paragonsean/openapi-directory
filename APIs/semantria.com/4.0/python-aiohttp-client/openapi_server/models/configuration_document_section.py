# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigurationDocumentSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_categories_limit: int=None, concept_topics_limit: int=None, detect_language: bool=None, entity_themes_limit: int=None, intentions: bool=None, model_sentiment: bool=None, named_entities_limit: int=None, named_mentions_limit: int=None, named_opinions_limit: int=None, named_relations_limit: int=None, phrases_limit: int=None, pos_types: str=None, possible_phrases_limit: int=None, query_topics_limit: int=None, summary_limit: int=None, theme_mentions_limit: int=None, themes_limit: int=None, user_entities_limit: int=None, user_mentions_limit: int=None, user_opinions_limit: int=None, user_relations_limit: int=None):
        """ConfigurationDocumentSection - a model defined in OpenAPI

        :param auto_categories_limit: The auto_categories_limit of this ConfigurationDocumentSection.
        :param concept_topics_limit: The concept_topics_limit of this ConfigurationDocumentSection.
        :param detect_language: The detect_language of this ConfigurationDocumentSection.
        :param entity_themes_limit: The entity_themes_limit of this ConfigurationDocumentSection.
        :param intentions: The intentions of this ConfigurationDocumentSection.
        :param model_sentiment: The model_sentiment of this ConfigurationDocumentSection.
        :param named_entities_limit: The named_entities_limit of this ConfigurationDocumentSection.
        :param named_mentions_limit: The named_mentions_limit of this ConfigurationDocumentSection.
        :param named_opinions_limit: The named_opinions_limit of this ConfigurationDocumentSection.
        :param named_relations_limit: The named_relations_limit of this ConfigurationDocumentSection.
        :param phrases_limit: The phrases_limit of this ConfigurationDocumentSection.
        :param pos_types: The pos_types of this ConfigurationDocumentSection.
        :param possible_phrases_limit: The possible_phrases_limit of this ConfigurationDocumentSection.
        :param query_topics_limit: The query_topics_limit of this ConfigurationDocumentSection.
        :param summary_limit: The summary_limit of this ConfigurationDocumentSection.
        :param theme_mentions_limit: The theme_mentions_limit of this ConfigurationDocumentSection.
        :param themes_limit: The themes_limit of this ConfigurationDocumentSection.
        :param user_entities_limit: The user_entities_limit of this ConfigurationDocumentSection.
        :param user_mentions_limit: The user_mentions_limit of this ConfigurationDocumentSection.
        :param user_opinions_limit: The user_opinions_limit of this ConfigurationDocumentSection.
        :param user_relations_limit: The user_relations_limit of this ConfigurationDocumentSection.
        """
        self.openapi_types = {
            'auto_categories_limit': int,
            'concept_topics_limit': int,
            'detect_language': bool,
            'entity_themes_limit': int,
            'intentions': bool,
            'model_sentiment': bool,
            'named_entities_limit': int,
            'named_mentions_limit': int,
            'named_opinions_limit': int,
            'named_relations_limit': int,
            'phrases_limit': int,
            'pos_types': str,
            'possible_phrases_limit': int,
            'query_topics_limit': int,
            'summary_limit': int,
            'theme_mentions_limit': int,
            'themes_limit': int,
            'user_entities_limit': int,
            'user_mentions_limit': int,
            'user_opinions_limit': int,
            'user_relations_limit': int
        }

        self.attribute_map = {
            'auto_categories_limit': 'auto_categories_limit',
            'concept_topics_limit': 'concept_topics_limit',
            'detect_language': 'detect_language',
            'entity_themes_limit': 'entity_themes_limit',
            'intentions': 'intentions',
            'model_sentiment': 'model_sentiment',
            'named_entities_limit': 'named_entities_limit',
            'named_mentions_limit': 'named_mentions_limit',
            'named_opinions_limit': 'named_opinions_limit',
            'named_relations_limit': 'named_relations_limit',
            'phrases_limit': 'phrases_limit',
            'pos_types': 'pos_types',
            'possible_phrases_limit': 'possible_phrases_limit',
            'query_topics_limit': 'query_topics_limit',
            'summary_limit': 'summary_limit',
            'theme_mentions_limit': 'theme_mentions_limit',
            'themes_limit': 'themes_limit',
            'user_entities_limit': 'user_entities_limit',
            'user_mentions_limit': 'user_mentions_limit',
            'user_opinions_limit': 'user_opinions_limit',
            'user_relations_limit': 'user_relations_limit'
        }

        self._auto_categories_limit = auto_categories_limit
        self._concept_topics_limit = concept_topics_limit
        self._detect_language = detect_language
        self._entity_themes_limit = entity_themes_limit
        self._intentions = intentions
        self._model_sentiment = model_sentiment
        self._named_entities_limit = named_entities_limit
        self._named_mentions_limit = named_mentions_limit
        self._named_opinions_limit = named_opinions_limit
        self._named_relations_limit = named_relations_limit
        self._phrases_limit = phrases_limit
        self._pos_types = pos_types
        self._possible_phrases_limit = possible_phrases_limit
        self._query_topics_limit = query_topics_limit
        self._summary_limit = summary_limit
        self._theme_mentions_limit = theme_mentions_limit
        self._themes_limit = themes_limit
        self._user_entities_limit = user_entities_limit
        self._user_mentions_limit = user_mentions_limit
        self._user_opinions_limit = user_opinions_limit
        self._user_relations_limit = user_relations_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationDocumentSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationDocumentSection of this ConfigurationDocumentSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_categories_limit(self):
        """Gets the auto_categories_limit of this ConfigurationDocumentSection.

        Limits the number of auto categories the service responds. Default: 5

        :return: The auto_categories_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._auto_categories_limit

    @auto_categories_limit.setter
    def auto_categories_limit(self, auto_categories_limit):
        """Sets the auto_categories_limit of this ConfigurationDocumentSection.

        Limits the number of auto categories the service responds. Default: 5

        :param auto_categories_limit: The auto_categories_limit of this ConfigurationDocumentSection.
        :type auto_categories_limit: int
        """
        if auto_categories_limit is None:
            raise ValueError("Invalid value for `auto_categories_limit`, must not be `None`")
        if auto_categories_limit is not None and auto_categories_limit > 20:
            raise ValueError("Invalid value for `auto_categories_limit`, must be a value less than or equal to `20`")
        if auto_categories_limit is not None and auto_categories_limit < 0:
            raise ValueError("Invalid value for `auto_categories_limit`, must be a value greater than or equal to `0`")

        self._auto_categories_limit = auto_categories_limit

    @property
    def concept_topics_limit(self):
        """Gets the concept_topics_limit of this ConfigurationDocumentSection.

        Limits the number of concept topics the service responds. Default: 5

        :return: The concept_topics_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._concept_topics_limit

    @concept_topics_limit.setter
    def concept_topics_limit(self, concept_topics_limit):
        """Sets the concept_topics_limit of this ConfigurationDocumentSection.

        Limits the number of concept topics the service responds. Default: 5

        :param concept_topics_limit: The concept_topics_limit of this ConfigurationDocumentSection.
        :type concept_topics_limit: int
        """
        if concept_topics_limit is None:
            raise ValueError("Invalid value for `concept_topics_limit`, must not be `None`")
        if concept_topics_limit is not None and concept_topics_limit > 20:
            raise ValueError("Invalid value for `concept_topics_limit`, must be a value less than or equal to `20`")
        if concept_topics_limit is not None and concept_topics_limit < 0:
            raise ValueError("Invalid value for `concept_topics_limit`, must be a value greater than or equal to `0`")

        self._concept_topics_limit = concept_topics_limit

    @property
    def detect_language(self):
        """Gets the detect_language of this ConfigurationDocumentSection.

        Switches on language detection feature. Default: true

        :return: The detect_language of this ConfigurationDocumentSection.
        :rtype: bool
        """
        return self._detect_language

    @detect_language.setter
    def detect_language(self, detect_language):
        """Sets the detect_language of this ConfigurationDocumentSection.

        Switches on language detection feature. Default: true

        :param detect_language: The detect_language of this ConfigurationDocumentSection.
        :type detect_language: bool
        """
        if detect_language is None:
            raise ValueError("Invalid value for `detect_language`, must not be `None`")

        self._detect_language = detect_language

    @property
    def entity_themes_limit(self):
        """Gets the entity_themes_limit of this ConfigurationDocumentSection.

        Limits the number of entity themes the service responds. Default: 0

        :return: The entity_themes_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._entity_themes_limit

    @entity_themes_limit.setter
    def entity_themes_limit(self, entity_themes_limit):
        """Sets the entity_themes_limit of this ConfigurationDocumentSection.

        Limits the number of entity themes the service responds. Default: 0

        :param entity_themes_limit: The entity_themes_limit of this ConfigurationDocumentSection.
        :type entity_themes_limit: int
        """
        if entity_themes_limit is None:
            raise ValueError("Invalid value for `entity_themes_limit`, must not be `None`")
        if entity_themes_limit is not None and entity_themes_limit > 20:
            raise ValueError("Invalid value for `entity_themes_limit`, must be a value less than or equal to `20`")
        if entity_themes_limit is not None and entity_themes_limit < 0:
            raise ValueError("Invalid value for `entity_themes_limit`, must be a value greater than or equal to `0`")

        self._entity_themes_limit = entity_themes_limit

    @property
    def intentions(self):
        """Gets the intentions of this ConfigurationDocumentSection.

        Switches on intentions detection feature. Default: false

        :return: The intentions of this ConfigurationDocumentSection.
        :rtype: bool
        """
        return self._intentions

    @intentions.setter
    def intentions(self, intentions):
        """Sets the intentions of this ConfigurationDocumentSection.

        Switches on intentions detection feature. Default: false

        :param intentions: The intentions of this ConfigurationDocumentSection.
        :type intentions: bool
        """
        if intentions is None:
            raise ValueError("Invalid value for `intentions`, must not be `None`")

        self._intentions = intentions

    @property
    def model_sentiment(self):
        """Gets the model_sentiment of this ConfigurationDocumentSection.

        Switches on/off model-based sentiment feature. Default: false

        :return: The model_sentiment of this ConfigurationDocumentSection.
        :rtype: bool
        """
        return self._model_sentiment

    @model_sentiment.setter
    def model_sentiment(self, model_sentiment):
        """Sets the model_sentiment of this ConfigurationDocumentSection.

        Switches on/off model-based sentiment feature. Default: false

        :param model_sentiment: The model_sentiment of this ConfigurationDocumentSection.
        :type model_sentiment: bool
        """
        if model_sentiment is None:
            raise ValueError("Invalid value for `model_sentiment`, must not be `None`")

        self._model_sentiment = model_sentiment

    @property
    def named_entities_limit(self):
        """Gets the named_entities_limit of this ConfigurationDocumentSection.

        Limits the number of named entities the service responds. Default: 5

        :return: The named_entities_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._named_entities_limit

    @named_entities_limit.setter
    def named_entities_limit(self, named_entities_limit):
        """Sets the named_entities_limit of this ConfigurationDocumentSection.

        Limits the number of named entities the service responds. Default: 5

        :param named_entities_limit: The named_entities_limit of this ConfigurationDocumentSection.
        :type named_entities_limit: int
        """
        if named_entities_limit is None:
            raise ValueError("Invalid value for `named_entities_limit`, must not be `None`")
        if named_entities_limit is not None and named_entities_limit > 20:
            raise ValueError("Invalid value for `named_entities_limit`, must be a value less than or equal to `20`")
        if named_entities_limit is not None and named_entities_limit < 0:
            raise ValueError("Invalid value for `named_entities_limit`, must be a value greater than or equal to `0`")

        self._named_entities_limit = named_entities_limit

    @property
    def named_mentions_limit(self):
        """Gets the named_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of named entity related mentions. Default: 0

        :return: The named_mentions_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._named_mentions_limit

    @named_mentions_limit.setter
    def named_mentions_limit(self, named_mentions_limit):
        """Sets the named_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of named entity related mentions. Default: 0

        :param named_mentions_limit: The named_mentions_limit of this ConfigurationDocumentSection.
        :type named_mentions_limit: int
        """
        if named_mentions_limit is None:
            raise ValueError("Invalid value for `named_mentions_limit`, must not be `None`")
        if named_mentions_limit is not None and named_mentions_limit > 20:
            raise ValueError("Invalid value for `named_mentions_limit`, must be a value less than or equal to `20`")
        if named_mentions_limit is not None and named_mentions_limit < 0:
            raise ValueError("Invalid value for `named_mentions_limit`, must be a value greater than or equal to `0`")

        self._named_mentions_limit = named_mentions_limit

    @property
    def named_opinions_limit(self):
        """Gets the named_opinions_limit of this ConfigurationDocumentSection.

        Limits the number of named entity opinions the service responds. Default: 0

        :return: The named_opinions_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._named_opinions_limit

    @named_opinions_limit.setter
    def named_opinions_limit(self, named_opinions_limit):
        """Sets the named_opinions_limit of this ConfigurationDocumentSection.

        Limits the number of named entity opinions the service responds. Default: 0

        :param named_opinions_limit: The named_opinions_limit of this ConfigurationDocumentSection.
        :type named_opinions_limit: int
        """
        if named_opinions_limit is None:
            raise ValueError("Invalid value for `named_opinions_limit`, must not be `None`")
        if named_opinions_limit is not None and named_opinions_limit > 20:
            raise ValueError("Invalid value for `named_opinions_limit`, must be a value less than or equal to `20`")
        if named_opinions_limit is not None and named_opinions_limit < 0:
            raise ValueError("Invalid value for `named_opinions_limit`, must be a value greater than or equal to `0`")

        self._named_opinions_limit = named_opinions_limit

    @property
    def named_relations_limit(self):
        """Gets the named_relations_limit of this ConfigurationDocumentSection.

        Limits the number of named entity relations the service responds. Default: 0

        :return: The named_relations_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._named_relations_limit

    @named_relations_limit.setter
    def named_relations_limit(self, named_relations_limit):
        """Sets the named_relations_limit of this ConfigurationDocumentSection.

        Limits the number of named entity relations the service responds. Default: 0

        :param named_relations_limit: The named_relations_limit of this ConfigurationDocumentSection.
        :type named_relations_limit: int
        """
        if named_relations_limit is None:
            raise ValueError("Invalid value for `named_relations_limit`, must not be `None`")
        if named_relations_limit is not None and named_relations_limit > 20:
            raise ValueError("Invalid value for `named_relations_limit`, must be a value less than or equal to `20`")
        if named_relations_limit is not None and named_relations_limit < 0:
            raise ValueError("Invalid value for `named_relations_limit`, must be a value greater than or equal to `0`")

        self._named_relations_limit = named_relations_limit

    @property
    def phrases_limit(self):
        """Gets the phrases_limit of this ConfigurationDocumentSection.

        Limits the number of responded sentiment-bearing phrases for document. Default: 0

        :return: The phrases_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._phrases_limit

    @phrases_limit.setter
    def phrases_limit(self, phrases_limit):
        """Sets the phrases_limit of this ConfigurationDocumentSection.

        Limits the number of responded sentiment-bearing phrases for document. Default: 0

        :param phrases_limit: The phrases_limit of this ConfigurationDocumentSection.
        :type phrases_limit: int
        """
        if phrases_limit is None:
            raise ValueError("Invalid value for `phrases_limit`, must not be `None`")
        if phrases_limit is not None and phrases_limit > 20:
            raise ValueError("Invalid value for `phrases_limit`, must be a value less than or equal to `20`")
        if phrases_limit is not None and phrases_limit < 0:
            raise ValueError("Invalid value for `phrases_limit`, must be a value greater than or equal to `0`")

        self._phrases_limit = phrases_limit

    @property
    def pos_types(self):
        """Gets the pos_types of this ConfigurationDocumentSection.

        Defines parts-of-speech which will be responded by the server

        :return: The pos_types of this ConfigurationDocumentSection.
        :rtype: str
        """
        return self._pos_types

    @pos_types.setter
    def pos_types(self, pos_types):
        """Sets the pos_types of this ConfigurationDocumentSection.

        Defines parts-of-speech which will be responded by the server

        :param pos_types: The pos_types of this ConfigurationDocumentSection.
        :type pos_types: str
        """
        allowed_values = ["All", "Noun", "Verb", "Adjective", "Determiner", "Misc", "Twitter", "Chinese"]  # noqa: E501
        if pos_types not in allowed_values:
            raise ValueError(
                "Invalid value for `pos_types` ({0}), must be one of {1}"
                .format(pos_types, allowed_values)
            )

        self._pos_types = pos_types

    @property
    def possible_phrases_limit(self):
        """Gets the possible_phrases_limit of this ConfigurationDocumentSection.

        Limits the number of responded possible phrases which may affect on sentiment score extraction. Default: 0

        :return: The possible_phrases_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._possible_phrases_limit

    @possible_phrases_limit.setter
    def possible_phrases_limit(self, possible_phrases_limit):
        """Sets the possible_phrases_limit of this ConfigurationDocumentSection.

        Limits the number of responded possible phrases which may affect on sentiment score extraction. Default: 0

        :param possible_phrases_limit: The possible_phrases_limit of this ConfigurationDocumentSection.
        :type possible_phrases_limit: int
        """
        if possible_phrases_limit is None:
            raise ValueError("Invalid value for `possible_phrases_limit`, must not be `None`")
        if possible_phrases_limit is not None and possible_phrases_limit > 20:
            raise ValueError("Invalid value for `possible_phrases_limit`, must be a value less than or equal to `20`")
        if possible_phrases_limit is not None and possible_phrases_limit < 0:
            raise ValueError("Invalid value for `possible_phrases_limit`, must be a value greater than or equal to `0`")

        self._possible_phrases_limit = possible_phrases_limit

    @property
    def query_topics_limit(self):
        """Gets the query_topics_limit of this ConfigurationDocumentSection.

        Limits the number of query topics the service responds. Default: 5

        :return: The query_topics_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._query_topics_limit

    @query_topics_limit.setter
    def query_topics_limit(self, query_topics_limit):
        """Sets the query_topics_limit of this ConfigurationDocumentSection.

        Limits the number of query topics the service responds. Default: 5

        :param query_topics_limit: The query_topics_limit of this ConfigurationDocumentSection.
        :type query_topics_limit: int
        """
        if query_topics_limit is None:
            raise ValueError("Invalid value for `query_topics_limit`, must not be `None`")
        if query_topics_limit is not None and query_topics_limit > 20:
            raise ValueError("Invalid value for `query_topics_limit`, must be a value less than or equal to `20`")
        if query_topics_limit is not None and query_topics_limit < 0:
            raise ValueError("Invalid value for `query_topics_limit`, must be a value greater than or equal to `0`")

        self._query_topics_limit = query_topics_limit

    @property
    def summary_limit(self):
        """Gets the summary_limit of this ConfigurationDocumentSection.

        Limits the number of sentences for the document summary feature. Default: 3

        :return: The summary_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._summary_limit

    @summary_limit.setter
    def summary_limit(self, summary_limit):
        """Sets the summary_limit of this ConfigurationDocumentSection.

        Limits the number of sentences for the document summary feature. Default: 3

        :param summary_limit: The summary_limit of this ConfigurationDocumentSection.
        :type summary_limit: int
        """
        if summary_limit is None:
            raise ValueError("Invalid value for `summary_limit`, must not be `None`")
        if summary_limit is not None and summary_limit > 20:
            raise ValueError("Invalid value for `summary_limit`, must be a value less than or equal to `20`")
        if summary_limit is not None and summary_limit < 0:
            raise ValueError("Invalid value for `summary_limit`, must be a value greater than or equal to `0`")

        self._summary_limit = summary_limit

    @property
    def theme_mentions_limit(self):
        """Gets the theme_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of document and entity related theme mentions. Default: 0

        :return: The theme_mentions_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._theme_mentions_limit

    @theme_mentions_limit.setter
    def theme_mentions_limit(self, theme_mentions_limit):
        """Sets the theme_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of document and entity related theme mentions. Default: 0

        :param theme_mentions_limit: The theme_mentions_limit of this ConfigurationDocumentSection.
        :type theme_mentions_limit: int
        """
        if theme_mentions_limit is None:
            raise ValueError("Invalid value for `theme_mentions_limit`, must not be `None`")
        if theme_mentions_limit is not None and theme_mentions_limit > 20:
            raise ValueError("Invalid value for `theme_mentions_limit`, must be a value less than or equal to `20`")
        if theme_mentions_limit is not None and theme_mentions_limit < 0:
            raise ValueError("Invalid value for `theme_mentions_limit`, must be a value greater than or equal to `0`")

        self._theme_mentions_limit = theme_mentions_limit

    @property
    def themes_limit(self):
        """Gets the themes_limit of this ConfigurationDocumentSection.

        Limits the number of document themes the service responds. Default: 0

        :return: The themes_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._themes_limit

    @themes_limit.setter
    def themes_limit(self, themes_limit):
        """Sets the themes_limit of this ConfigurationDocumentSection.

        Limits the number of document themes the service responds. Default: 0

        :param themes_limit: The themes_limit of this ConfigurationDocumentSection.
        :type themes_limit: int
        """
        if themes_limit is None:
            raise ValueError("Invalid value for `themes_limit`, must not be `None`")
        if themes_limit is not None and themes_limit > 20:
            raise ValueError("Invalid value for `themes_limit`, must be a value less than or equal to `20`")
        if themes_limit is not None and themes_limit < 0:
            raise ValueError("Invalid value for `themes_limit`, must be a value greater than or equal to `0`")

        self._themes_limit = themes_limit

    @property
    def user_entities_limit(self):
        """Gets the user_entities_limit of this ConfigurationDocumentSection.

        Limits the number of user entities the service responds. Default: 5

        :return: The user_entities_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._user_entities_limit

    @user_entities_limit.setter
    def user_entities_limit(self, user_entities_limit):
        """Sets the user_entities_limit of this ConfigurationDocumentSection.

        Limits the number of user entities the service responds. Default: 5

        :param user_entities_limit: The user_entities_limit of this ConfigurationDocumentSection.
        :type user_entities_limit: int
        """
        if user_entities_limit is None:
            raise ValueError("Invalid value for `user_entities_limit`, must not be `None`")
        if user_entities_limit is not None and user_entities_limit > 20:
            raise ValueError("Invalid value for `user_entities_limit`, must be a value less than or equal to `20`")
        if user_entities_limit is not None and user_entities_limit < 0:
            raise ValueError("Invalid value for `user_entities_limit`, must be a value greater than or equal to `0`")

        self._user_entities_limit = user_entities_limit

    @property
    def user_mentions_limit(self):
        """Gets the user_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of user entity related mentions. Default: 0

        :return: The user_mentions_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._user_mentions_limit

    @user_mentions_limit.setter
    def user_mentions_limit(self, user_mentions_limit):
        """Sets the user_mentions_limit of this ConfigurationDocumentSection.

        Limits the number of user entity related mentions. Default: 0

        :param user_mentions_limit: The user_mentions_limit of this ConfigurationDocumentSection.
        :type user_mentions_limit: int
        """
        if user_mentions_limit is None:
            raise ValueError("Invalid value for `user_mentions_limit`, must not be `None`")
        if user_mentions_limit is not None and user_mentions_limit > 20:
            raise ValueError("Invalid value for `user_mentions_limit`, must be a value less than or equal to `20`")
        if user_mentions_limit is not None and user_mentions_limit < 0:
            raise ValueError("Invalid value for `user_mentions_limit`, must be a value greater than or equal to `0`")

        self._user_mentions_limit = user_mentions_limit

    @property
    def user_opinions_limit(self):
        """Gets the user_opinions_limit of this ConfigurationDocumentSection.

        Limits the number of concept topics the service responds. Default: 0

        :return: The user_opinions_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._user_opinions_limit

    @user_opinions_limit.setter
    def user_opinions_limit(self, user_opinions_limit):
        """Sets the user_opinions_limit of this ConfigurationDocumentSection.

        Limits the number of concept topics the service responds. Default: 0

        :param user_opinions_limit: The user_opinions_limit of this ConfigurationDocumentSection.
        :type user_opinions_limit: int
        """
        if user_opinions_limit is None:
            raise ValueError("Invalid value for `user_opinions_limit`, must not be `None`")
        if user_opinions_limit is not None and user_opinions_limit > 20:
            raise ValueError("Invalid value for `user_opinions_limit`, must be a value less than or equal to `20`")
        if user_opinions_limit is not None and user_opinions_limit < 0:
            raise ValueError("Invalid value for `user_opinions_limit`, must be a value greater than or equal to `0`")

        self._user_opinions_limit = user_opinions_limit

    @property
    def user_relations_limit(self):
        """Gets the user_relations_limit of this ConfigurationDocumentSection.

        Limits the number of user entity relations the service responds. Default: 0

        :return: The user_relations_limit of this ConfigurationDocumentSection.
        :rtype: int
        """
        return self._user_relations_limit

    @user_relations_limit.setter
    def user_relations_limit(self, user_relations_limit):
        """Sets the user_relations_limit of this ConfigurationDocumentSection.

        Limits the number of user entity relations the service responds. Default: 0

        :param user_relations_limit: The user_relations_limit of this ConfigurationDocumentSection.
        :type user_relations_limit: int
        """
        if user_relations_limit is None:
            raise ValueError("Invalid value for `user_relations_limit`, must not be `None`")
        if user_relations_limit is not None and user_relations_limit > 20:
            raise ValueError("Invalid value for `user_relations_limit`, must be a value less than or equal to `20`")
        if user_relations_limit is not None and user_relations_limit < 0:
            raise ValueError("Invalid value for `user_relations_limit`, must be a value greater than or equal to `0`")

        self._user_relations_limit = user_relations_limit
