# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.word import Word
from openapi_server import util


class Details(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_imperative: bool=None, is_polar: bool=None, words: List[Word]=None):
        """Details - a model defined in OpenAPI

        :param is_imperative: The is_imperative of this Details.
        :param is_polar: The is_polar of this Details.
        :param words: The words of this Details.
        """
        self.openapi_types = {
            'is_imperative': bool,
            'is_polar': bool,
            'words': List[Word]
        }

        self.attribute_map = {
            'is_imperative': 'is_imperative',
            'is_polar': 'is_polar',
            'words': 'words'
        }

        self._is_imperative = is_imperative
        self._is_polar = is_polar
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Details':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Details of this Details.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_imperative(self):
        """Gets the is_imperative of this Details.

        Represents whether sentence (group of words) is imperative or not

        :return: The is_imperative of this Details.
        :rtype: bool
        """
        return self._is_imperative

    @is_imperative.setter
    def is_imperative(self, is_imperative):
        """Sets the is_imperative of this Details.

        Represents whether sentence (group of words) is imperative or not

        :param is_imperative: The is_imperative of this Details.
        :type is_imperative: bool
        """
        if is_imperative is None:
            raise ValueError("Invalid value for `is_imperative`, must not be `None`")

        self._is_imperative = is_imperative

    @property
    def is_polar(self):
        """Gets the is_polar of this Details.

        Represents whether or not sentence content contains sentiment polarity

        :return: The is_polar of this Details.
        :rtype: bool
        """
        return self._is_polar

    @is_polar.setter
    def is_polar(self, is_polar):
        """Sets the is_polar of this Details.

        Represents whether or not sentence content contains sentiment polarity

        :param is_polar: The is_polar of this Details.
        :type is_polar: bool
        """
        if is_polar is None:
            raise ValueError("Invalid value for `is_polar`, must not be `None`")

        self._is_polar = is_polar

    @property
    def words(self):
        """Gets the words of this Details.

        Returns list of words grouped by the parent sentence

        :return: The words of this Details.
        :rtype: List[Word]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this Details.

        Returns list of words grouped by the parent sentence

        :param words: The words of this Details.
        :type words: List[Word]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")

        self._words = words
