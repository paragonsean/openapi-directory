# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Opinion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quotation: str=None, sentiment_polarity: str=None, sentiment_score: float=None, speaker: float=None, topic: str=None, type: str=None):
        """Opinion - a model defined in OpenAPI

        :param quotation: The quotation of this Opinion.
        :param sentiment_polarity: The sentiment_polarity of this Opinion.
        :param sentiment_score: The sentiment_score of this Opinion.
        :param speaker: The speaker of this Opinion.
        :param topic: The topic of this Opinion.
        :param type: The type of this Opinion.
        """
        self.openapi_types = {
            'quotation': str,
            'sentiment_polarity': str,
            'sentiment_score': float,
            'speaker': float,
            'topic': str,
            'type': str
        }

        self.attribute_map = {
            'quotation': 'quotation',
            'sentiment_polarity': 'sentiment_polarity',
            'sentiment_score': 'sentiment_score',
            'speaker': 'speaker',
            'topic': 'topic',
            'type': 'type'
        }

        self._quotation = quotation
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_score = sentiment_score
        self._speaker = speaker
        self._topic = topic
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Opinion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Opinion of this Opinion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quotation(self):
        """Gets the quotation of this Opinion.

        The text of the expressed opinion

        :return: The quotation of this Opinion.
        :rtype: str
        """
        return self._quotation

    @quotation.setter
    def quotation(self, quotation):
        """Sets the quotation of this Opinion.

        The text of the expressed opinion

        :param quotation: The quotation of this Opinion.
        :type quotation: str
        """
        if quotation is None:
            raise ValueError("Invalid value for `quotation`, must not be `None`")

        self._quotation = quotation

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this Opinion.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this Opinion.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this Opinion.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this Opinion.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this Opinion.

        The sentiment score associated with the opinion

        :return: The sentiment_score of this Opinion.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this Opinion.

        The sentiment score associated with the opinion

        :param sentiment_score: The sentiment_score of this Opinion.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def speaker(self):
        """Gets the speaker of this Opinion.

        An entity title identifying the author of the opinion

        :return: The speaker of this Opinion.
        :rtype: float
        """
        return self._speaker

    @speaker.setter
    def speaker(self, speaker):
        """Sets the speaker of this Opinion.

        An entity title identifying the author of the opinion

        :param speaker: The speaker of this Opinion.
        :type speaker: float
        """
        if speaker is None:
            raise ValueError("Invalid value for `speaker`, must not be `None`")

        self._speaker = speaker

    @property
    def topic(self):
        """Gets the topic of this Opinion.

        An entity title identifying the subject of the opinion, if applicable

        :return: The topic of this Opinion.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Opinion.

        An entity title identifying the subject of the opinion, if applicable

        :param topic: The topic of this Opinion.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def type(self):
        """Gets the type of this Opinion.

        Type of opinion according to extracted entity

        :return: The type of this Opinion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Opinion.

        Type of opinion according to extracted entity

        :param type: The type of this Opinion.
        :type type: str
        """
        allowed_values = ["named", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
