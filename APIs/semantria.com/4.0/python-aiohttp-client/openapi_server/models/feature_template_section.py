# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureTemplateSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_id: str=None, description: str=None, id: str=None, is_free: bool=None, language: str=None, name: str=None, type: str=None, version: str=None):
        """FeatureTemplateSection - a model defined in OpenAPI

        :param config_id: The config_id of this FeatureTemplateSection.
        :param description: The description of this FeatureTemplateSection.
        :param id: The id of this FeatureTemplateSection.
        :param is_free: The is_free of this FeatureTemplateSection.
        :param language: The language of this FeatureTemplateSection.
        :param name: The name of this FeatureTemplateSection.
        :param type: The type of this FeatureTemplateSection.
        :param version: The version of this FeatureTemplateSection.
        """
        self.openapi_types = {
            'config_id': str,
            'description': str,
            'id': str,
            'is_free': bool,
            'language': str,
            'name': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'config_id': 'config_id',
            'description': 'description',
            'id': 'id',
            'is_free': 'is_free',
            'language': 'language',
            'name': 'name',
            'type': 'type',
            'version': 'version'
        }

        self._config_id = config_id
        self._description = description
        self._id = id
        self._is_free = is_free
        self._language = language
        self._name = name
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureTemplateSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureTemplateSection of this FeatureTemplateSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_id(self):
        """Gets the config_id of this FeatureTemplateSection.

        Unique identifier of configuration associated with the vertical pack. Required for cloning

        :return: The config_id of this FeatureTemplateSection.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this FeatureTemplateSection.

        Unique identifier of configuration associated with the vertical pack. Required for cloning

        :param config_id: The config_id of this FeatureTemplateSection.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def description(self):
        """Gets the description of this FeatureTemplateSection.

        Verbal description of template features, belonging to domain area, etc.

        :return: The description of this FeatureTemplateSection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeatureTemplateSection.

        Verbal description of template features, belonging to domain area, etc.

        :param description: The description of this FeatureTemplateSection.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this FeatureTemplateSection.

        Unique document identifier. Can be up to 36 alphanumeric characters

        :return: The id of this FeatureTemplateSection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeatureTemplateSection.

        Unique document identifier. Can be up to 36 alphanumeric characters

        :param id: The id of this FeatureTemplateSection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_free(self):
        """Gets the is_free of this FeatureTemplateSection.

        Shows whether Vertical pack is free or requires subscription

        :return: The is_free of this FeatureTemplateSection.
        :rtype: bool
        """
        return self._is_free

    @is_free.setter
    def is_free(self, is_free):
        """Sets the is_free of this FeatureTemplateSection.

        Shows whether Vertical pack is free or requires subscription

        :param is_free: The is_free of this FeatureTemplateSection.
        :type is_free: bool
        """
        if is_free is None:
            raise ValueError("Invalid value for `is_free`, must not be `None`")

        self._is_free = is_free

    @property
    def language(self):
        """Gets the language of this FeatureTemplateSection.

        The language supported by the vertical pack

        :return: The language of this FeatureTemplateSection.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this FeatureTemplateSection.

        The language supported by the vertical pack

        :param language: The language of this FeatureTemplateSection.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this FeatureTemplateSection.

        Name of the vertical pack

        :return: The name of this FeatureTemplateSection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureTemplateSection.

        Name of the vertical pack

        :param name: The name of this FeatureTemplateSection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this FeatureTemplateSection.

        The type of the vertical pack, can be either \"vertical-pack\" or \"language-default\"

        :return: The type of this FeatureTemplateSection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeatureTemplateSection.

        The type of the vertical pack, can be either \"vertical-pack\" or \"language-default\"

        :param type: The type of this FeatureTemplateSection.
        :type type: str
        """
        allowed_values = ["language-default", "vertical-pack"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this FeatureTemplateSection.

        Version of the vertical pack, for versioning purposes.

        :return: The version of this FeatureTemplateSection.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FeatureTemplateSection.

        Version of the vertical pack, for versioning purposes.

        :param version: The version of this FeatureTemplateSection.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
