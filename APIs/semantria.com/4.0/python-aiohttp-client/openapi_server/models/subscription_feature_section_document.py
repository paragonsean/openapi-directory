# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionFeatureSectionDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_categories: bool=None, concept_topics: bool=None, entity_themes: bool=None, intentions: bool=None, language_detection: bool=None, mentions: bool=None, model_sentiment: bool=None, named_entities: bool=None, named_relations: bool=None, opinions: bool=None, phrases_detection: bool=None, pos_tagging: bool=None, query_topics: bool=None, sentiment_phrases: bool=None, summary: bool=None, themes: bool=None, user_entities: bool=None, user_relations: bool=None):
        """SubscriptionFeatureSectionDocument - a model defined in OpenAPI

        :param auto_categories: The auto_categories of this SubscriptionFeatureSectionDocument.
        :param concept_topics: The concept_topics of this SubscriptionFeatureSectionDocument.
        :param entity_themes: The entity_themes of this SubscriptionFeatureSectionDocument.
        :param intentions: The intentions of this SubscriptionFeatureSectionDocument.
        :param language_detection: The language_detection of this SubscriptionFeatureSectionDocument.
        :param mentions: The mentions of this SubscriptionFeatureSectionDocument.
        :param model_sentiment: The model_sentiment of this SubscriptionFeatureSectionDocument.
        :param named_entities: The named_entities of this SubscriptionFeatureSectionDocument.
        :param named_relations: The named_relations of this SubscriptionFeatureSectionDocument.
        :param opinions: The opinions of this SubscriptionFeatureSectionDocument.
        :param phrases_detection: The phrases_detection of this SubscriptionFeatureSectionDocument.
        :param pos_tagging: The pos_tagging of this SubscriptionFeatureSectionDocument.
        :param query_topics: The query_topics of this SubscriptionFeatureSectionDocument.
        :param sentiment_phrases: The sentiment_phrases of this SubscriptionFeatureSectionDocument.
        :param summary: The summary of this SubscriptionFeatureSectionDocument.
        :param themes: The themes of this SubscriptionFeatureSectionDocument.
        :param user_entities: The user_entities of this SubscriptionFeatureSectionDocument.
        :param user_relations: The user_relations of this SubscriptionFeatureSectionDocument.
        """
        self.openapi_types = {
            'auto_categories': bool,
            'concept_topics': bool,
            'entity_themes': bool,
            'intentions': bool,
            'language_detection': bool,
            'mentions': bool,
            'model_sentiment': bool,
            'named_entities': bool,
            'named_relations': bool,
            'opinions': bool,
            'phrases_detection': bool,
            'pos_tagging': bool,
            'query_topics': bool,
            'sentiment_phrases': bool,
            'summary': bool,
            'themes': bool,
            'user_entities': bool,
            'user_relations': bool
        }

        self.attribute_map = {
            'auto_categories': 'auto_categories',
            'concept_topics': 'concept_topics',
            'entity_themes': 'entity_themes',
            'intentions': 'intentions',
            'language_detection': 'language_detection',
            'mentions': 'mentions',
            'model_sentiment': 'model_sentiment',
            'named_entities': 'named_entities',
            'named_relations': 'named_relations',
            'opinions': 'opinions',
            'phrases_detection': 'phrases_detection',
            'pos_tagging': 'pos_tagging',
            'query_topics': 'query_topics',
            'sentiment_phrases': 'sentiment_phrases',
            'summary': 'summary',
            'themes': 'themes',
            'user_entities': 'user_entities',
            'user_relations': 'user_relations'
        }

        self._auto_categories = auto_categories
        self._concept_topics = concept_topics
        self._entity_themes = entity_themes
        self._intentions = intentions
        self._language_detection = language_detection
        self._mentions = mentions
        self._model_sentiment = model_sentiment
        self._named_entities = named_entities
        self._named_relations = named_relations
        self._opinions = opinions
        self._phrases_detection = phrases_detection
        self._pos_tagging = pos_tagging
        self._query_topics = query_topics
        self._sentiment_phrases = sentiment_phrases
        self._summary = summary
        self._themes = themes
        self._user_entities = user_entities
        self._user_relations = user_relations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionFeatureSectionDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionFeatureSectionDocument of this SubscriptionFeatureSectionDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_categories(self):
        """Gets the auto_categories of this SubscriptionFeatureSectionDocument.

        Indicates whether auto categories feature is allowed or not

        :return: The auto_categories of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._auto_categories

    @auto_categories.setter
    def auto_categories(self, auto_categories):
        """Sets the auto_categories of this SubscriptionFeatureSectionDocument.

        Indicates whether auto categories feature is allowed or not

        :param auto_categories: The auto_categories of this SubscriptionFeatureSectionDocument.
        :type auto_categories: bool
        """
        if auto_categories is None:
            raise ValueError("Invalid value for `auto_categories`, must not be `None`")

        self._auto_categories = auto_categories

    @property
    def concept_topics(self):
        """Gets the concept_topics of this SubscriptionFeatureSectionDocument.

        Indicates whether concept topics are allowed or not

        :return: The concept_topics of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._concept_topics

    @concept_topics.setter
    def concept_topics(self, concept_topics):
        """Sets the concept_topics of this SubscriptionFeatureSectionDocument.

        Indicates whether concept topics are allowed or not

        :param concept_topics: The concept_topics of this SubscriptionFeatureSectionDocument.
        :type concept_topics: bool
        """
        if concept_topics is None:
            raise ValueError("Invalid value for `concept_topics`, must not be `None`")

        self._concept_topics = concept_topics

    @property
    def entity_themes(self):
        """Gets the entity_themes of this SubscriptionFeatureSectionDocument.

        Indicates whether entity themes feature is allowed or not

        :return: The entity_themes of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._entity_themes

    @entity_themes.setter
    def entity_themes(self, entity_themes):
        """Sets the entity_themes of this SubscriptionFeatureSectionDocument.

        Indicates whether entity themes feature is allowed or not

        :param entity_themes: The entity_themes of this SubscriptionFeatureSectionDocument.
        :type entity_themes: bool
        """
        if entity_themes is None:
            raise ValueError("Invalid value for `entity_themes`, must not be `None`")

        self._entity_themes = entity_themes

    @property
    def intentions(self):
        """Gets the intentions of this SubscriptionFeatureSectionDocument.

        Indicates whether intentions feature is allowed or not.

        :return: The intentions of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._intentions

    @intentions.setter
    def intentions(self, intentions):
        """Sets the intentions of this SubscriptionFeatureSectionDocument.

        Indicates whether intentions feature is allowed or not.

        :param intentions: The intentions of this SubscriptionFeatureSectionDocument.
        :type intentions: bool
        """
        if intentions is None:
            raise ValueError("Invalid value for `intentions`, must not be `None`")

        self._intentions = intentions

    @property
    def language_detection(self):
        """Gets the language_detection of this SubscriptionFeatureSectionDocument.

        Indicates whether language detection feature is allowed or not

        :return: The language_detection of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._language_detection

    @language_detection.setter
    def language_detection(self, language_detection):
        """Sets the language_detection of this SubscriptionFeatureSectionDocument.

        Indicates whether language detection feature is allowed or not

        :param language_detection: The language_detection of this SubscriptionFeatureSectionDocument.
        :type language_detection: bool
        """
        if language_detection is None:
            raise ValueError("Invalid value for `language_detection`, must not be `None`")

        self._language_detection = language_detection

    @property
    def mentions(self):
        """Gets the mentions of this SubscriptionFeatureSectionDocument.

        Indicates whether mentions for entities and themes are allowed or not

        :return: The mentions of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this SubscriptionFeatureSectionDocument.

        Indicates whether mentions for entities and themes are allowed or not

        :param mentions: The mentions of this SubscriptionFeatureSectionDocument.
        :type mentions: bool
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions

    @property
    def model_sentiment(self):
        """Gets the model_sentiment of this SubscriptionFeatureSectionDocument.

        Indicates whether model-based sentiment feature is allowed or not

        :return: The model_sentiment of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._model_sentiment

    @model_sentiment.setter
    def model_sentiment(self, model_sentiment):
        """Sets the model_sentiment of this SubscriptionFeatureSectionDocument.

        Indicates whether model-based sentiment feature is allowed or not

        :param model_sentiment: The model_sentiment of this SubscriptionFeatureSectionDocument.
        :type model_sentiment: bool
        """
        if model_sentiment is None:
            raise ValueError("Invalid value for `model_sentiment`, must not be `None`")

        self._model_sentiment = model_sentiment

    @property
    def named_entities(self):
        """Gets the named_entities of this SubscriptionFeatureSectionDocument.

        Indicates whether named entities feature is allowed or not

        :return: The named_entities of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._named_entities

    @named_entities.setter
    def named_entities(self, named_entities):
        """Sets the named_entities of this SubscriptionFeatureSectionDocument.

        Indicates whether named entities feature is allowed or not

        :param named_entities: The named_entities of this SubscriptionFeatureSectionDocument.
        :type named_entities: bool
        """
        if named_entities is None:
            raise ValueError("Invalid value for `named_entities`, must not be `None`")

        self._named_entities = named_entities

    @property
    def named_relations(self):
        """Gets the named_relations of this SubscriptionFeatureSectionDocument.

        Indicates whether relations for named entities are allowed or not

        :return: The named_relations of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._named_relations

    @named_relations.setter
    def named_relations(self, named_relations):
        """Sets the named_relations of this SubscriptionFeatureSectionDocument.

        Indicates whether relations for named entities are allowed or not

        :param named_relations: The named_relations of this SubscriptionFeatureSectionDocument.
        :type named_relations: bool
        """
        if named_relations is None:
            raise ValueError("Invalid value for `named_relations`, must not be `None`")

        self._named_relations = named_relations

    @property
    def opinions(self):
        """Gets the opinions of this SubscriptionFeatureSectionDocument.

        Indicates whether opinions feature is allowed or not

        :return: The opinions of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._opinions

    @opinions.setter
    def opinions(self, opinions):
        """Sets the opinions of this SubscriptionFeatureSectionDocument.

        Indicates whether opinions feature is allowed or not

        :param opinions: The opinions of this SubscriptionFeatureSectionDocument.
        :type opinions: bool
        """
        if opinions is None:
            raise ValueError("Invalid value for `opinions`, must not be `None`")

        self._opinions = opinions

    @property
    def phrases_detection(self):
        """Gets the phrases_detection of this SubscriptionFeatureSectionDocument.

        Indicates whether possible phrases detection feature is allowed or not

        :return: The phrases_detection of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._phrases_detection

    @phrases_detection.setter
    def phrases_detection(self, phrases_detection):
        """Sets the phrases_detection of this SubscriptionFeatureSectionDocument.

        Indicates whether possible phrases detection feature is allowed or not

        :param phrases_detection: The phrases_detection of this SubscriptionFeatureSectionDocument.
        :type phrases_detection: bool
        """
        if phrases_detection is None:
            raise ValueError("Invalid value for `phrases_detection`, must not be `None`")

        self._phrases_detection = phrases_detection

    @property
    def pos_tagging(self):
        """Gets the pos_tagging of this SubscriptionFeatureSectionDocument.

        Indicates whether part of speech tagging feature is allowed or not

        :return: The pos_tagging of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._pos_tagging

    @pos_tagging.setter
    def pos_tagging(self, pos_tagging):
        """Sets the pos_tagging of this SubscriptionFeatureSectionDocument.

        Indicates whether part of speech tagging feature is allowed or not

        :param pos_tagging: The pos_tagging of this SubscriptionFeatureSectionDocument.
        :type pos_tagging: bool
        """
        if pos_tagging is None:
            raise ValueError("Invalid value for `pos_tagging`, must not be `None`")

        self._pos_tagging = pos_tagging

    @property
    def query_topics(self):
        """Gets the query_topics of this SubscriptionFeatureSectionDocument.

        Indicates whether query defined topics are allowed or not

        :return: The query_topics of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._query_topics

    @query_topics.setter
    def query_topics(self, query_topics):
        """Sets the query_topics of this SubscriptionFeatureSectionDocument.

        Indicates whether query defined topics are allowed or not

        :param query_topics: The query_topics of this SubscriptionFeatureSectionDocument.
        :type query_topics: bool
        """
        if query_topics is None:
            raise ValueError("Invalid value for `query_topics`, must not be `None`")

        self._query_topics = query_topics

    @property
    def sentiment_phrases(self):
        """Gets the sentiment_phrases of this SubscriptionFeatureSectionDocument.

        Indicates whether sentiment-bearing phrases output is allowed or not

        :return: The sentiment_phrases of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._sentiment_phrases

    @sentiment_phrases.setter
    def sentiment_phrases(self, sentiment_phrases):
        """Sets the sentiment_phrases of this SubscriptionFeatureSectionDocument.

        Indicates whether sentiment-bearing phrases output is allowed or not

        :param sentiment_phrases: The sentiment_phrases of this SubscriptionFeatureSectionDocument.
        :type sentiment_phrases: bool
        """
        if sentiment_phrases is None:
            raise ValueError("Invalid value for `sentiment_phrases`, must not be `None`")

        self._sentiment_phrases = sentiment_phrases

    @property
    def summary(self):
        """Gets the summary of this SubscriptionFeatureSectionDocument.

        Indicates whether summarization feature is allowed or not

        :return: The summary of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SubscriptionFeatureSectionDocument.

        Indicates whether summarization feature is allowed or not

        :param summary: The summary of this SubscriptionFeatureSectionDocument.
        :type summary: bool
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def themes(self):
        """Gets the themes of this SubscriptionFeatureSectionDocument.

        Indicates whether document themes feature is allowed or not

        :return: The themes of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this SubscriptionFeatureSectionDocument.

        Indicates whether document themes feature is allowed or not

        :param themes: The themes of this SubscriptionFeatureSectionDocument.
        :type themes: bool
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def user_entities(self):
        """Gets the user_entities of this SubscriptionFeatureSectionDocument.

        Indicates whether user entities feature is allowed or not

        :return: The user_entities of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._user_entities

    @user_entities.setter
    def user_entities(self, user_entities):
        """Sets the user_entities of this SubscriptionFeatureSectionDocument.

        Indicates whether user entities feature is allowed or not

        :param user_entities: The user_entities of this SubscriptionFeatureSectionDocument.
        :type user_entities: bool
        """
        if user_entities is None:
            raise ValueError("Invalid value for `user_entities`, must not be `None`")

        self._user_entities = user_entities

    @property
    def user_relations(self):
        """Gets the user_relations of this SubscriptionFeatureSectionDocument.

        Indicates whether relations for user entities are allowed or not

        :return: The user_relations of this SubscriptionFeatureSectionDocument.
        :rtype: bool
        """
        return self._user_relations

    @user_relations.setter
    def user_relations(self, user_relations):
        """Sets the user_relations of this SubscriptionFeatureSectionDocument.

        Indicates whether relations for user entities are allowed or not

        :param user_relations: The user_relations of this SubscriptionFeatureSectionDocument.
        :type user_relations: bool
        """
        if user_relations is None:
            raise ValueError("Invalid value for `user_relations`, must not be `None`")

        self._user_relations = user_relations
