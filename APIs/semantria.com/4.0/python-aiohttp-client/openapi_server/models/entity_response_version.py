# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityResponseVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label: str=None, modified: str=None, name: str=None, normalized: str=None, type: str=None):
        """EntityResponseVersion - a model defined in OpenAPI

        :param id: The id of this EntityResponseVersion.
        :param label: The label of this EntityResponseVersion.
        :param modified: The modified of this EntityResponseVersion.
        :param name: The name of this EntityResponseVersion.
        :param normalized: The normalized of this EntityResponseVersion.
        :param type: The type of this EntityResponseVersion.
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'modified': str,
            'name': str,
            'normalized': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'modified': 'modified',
            'name': 'name',
            'normalized': 'normalized',
            'type': 'type'
        }

        self._id = id
        self._label = label
        self._modified = modified
        self._name = name
        self._normalized = normalized
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityResponseVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity_ResponseVersion of this EntityResponseVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EntityResponseVersion.

        Unique user entity identifier

        :return: The id of this EntityResponseVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityResponseVersion.

        Unique user entity identifier

        :param id: The id of this EntityResponseVersion.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this EntityResponseVersion.

        Descriptive label for the entity, e.g. Wikipedia URL

        :return: The label of this EntityResponseVersion.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EntityResponseVersion.

        Descriptive label for the entity, e.g. Wikipedia URL

        :param label: The label of this EntityResponseVersion.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def modified(self):
        """Gets the modified of this EntityResponseVersion.

        The timestamp of the latest update of the record. Creation date of update didn't occur

        :return: The modified of this EntityResponseVersion.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this EntityResponseVersion.

        The timestamp of the latest update of the record. Creation date of update didn't occur

        :param modified: The modified of this EntityResponseVersion.
        :type modified: str
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this EntityResponseVersion.

        Entity name

        :return: The name of this EntityResponseVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityResponseVersion.

        Entity name

        :param name: The name of this EntityResponseVersion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def normalized(self):
        """Gets the normalized of this EntityResponseVersion.

        Normalized form of the entity. Will replace entity name in the output

        :return: The normalized of this EntityResponseVersion.
        :rtype: str
        """
        return self._normalized

    @normalized.setter
    def normalized(self, normalized):
        """Sets the normalized of this EntityResponseVersion.

        Normalized form of the entity. Will replace entity name in the output

        :param normalized: The normalized of this EntityResponseVersion.
        :type normalized: str
        """
        if normalized is None:
            raise ValueError("Invalid value for `normalized`, must not be `None`")

        self._normalized = normalized

    @property
    def type(self):
        """Gets the type of this EntityResponseVersion.

        Type of the entity (Company, Person, any custom type)

        :return: The type of this EntityResponseVersion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityResponseVersion.

        Type of the entity (Company, Person, any custom type)

        :param type: The type of this EntityResponseVersion.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
