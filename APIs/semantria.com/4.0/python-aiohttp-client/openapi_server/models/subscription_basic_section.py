# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionBasicSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_response_limit: int=None, batch_limit: int=None, blacklist_limit: int=None, callback_batch_limit: int=None, categories_limit: int=None, category_samples_limit: int=None, characters_limit: int=None, collection_limit: int=None, configurations_limit: int=None, entities_limit: int=None, output_data_limit: int=None, processed_batch_limit: int=None, queries_limit: int=None, return_source_text: bool=None, sentiment_limit: int=None):
        """SubscriptionBasicSection - a model defined in OpenAPI

        :param auto_response_limit: The auto_response_limit of this SubscriptionBasicSection.
        :param batch_limit: The batch_limit of this SubscriptionBasicSection.
        :param blacklist_limit: The blacklist_limit of this SubscriptionBasicSection.
        :param callback_batch_limit: The callback_batch_limit of this SubscriptionBasicSection.
        :param categories_limit: The categories_limit of this SubscriptionBasicSection.
        :param category_samples_limit: The category_samples_limit of this SubscriptionBasicSection.
        :param characters_limit: The characters_limit of this SubscriptionBasicSection.
        :param collection_limit: The collection_limit of this SubscriptionBasicSection.
        :param configurations_limit: The configurations_limit of this SubscriptionBasicSection.
        :param entities_limit: The entities_limit of this SubscriptionBasicSection.
        :param output_data_limit: The output_data_limit of this SubscriptionBasicSection.
        :param processed_batch_limit: The processed_batch_limit of this SubscriptionBasicSection.
        :param queries_limit: The queries_limit of this SubscriptionBasicSection.
        :param return_source_text: The return_source_text of this SubscriptionBasicSection.
        :param sentiment_limit: The sentiment_limit of this SubscriptionBasicSection.
        """
        self.openapi_types = {
            'auto_response_limit': int,
            'batch_limit': int,
            'blacklist_limit': int,
            'callback_batch_limit': int,
            'categories_limit': int,
            'category_samples_limit': int,
            'characters_limit': int,
            'collection_limit': int,
            'configurations_limit': int,
            'entities_limit': int,
            'output_data_limit': int,
            'processed_batch_limit': int,
            'queries_limit': int,
            'return_source_text': bool,
            'sentiment_limit': int
        }

        self.attribute_map = {
            'auto_response_limit': 'auto_response_limit',
            'batch_limit': 'batch_limit',
            'blacklist_limit': 'blacklist_limit',
            'callback_batch_limit': 'callback_batch_limit',
            'categories_limit': 'categories_limit',
            'category_samples_limit': 'category_samples_limit',
            'characters_limit': 'characters_limit',
            'collection_limit': 'collection_limit',
            'configurations_limit': 'configurations_limit',
            'entities_limit': 'entities_limit',
            'output_data_limit': 'output_data_limit',
            'processed_batch_limit': 'processed_batch_limit',
            'queries_limit': 'queries_limit',
            'return_source_text': 'return_source_text',
            'sentiment_limit': 'sentiment_limit'
        }

        self._auto_response_limit = auto_response_limit
        self._batch_limit = batch_limit
        self._blacklist_limit = blacklist_limit
        self._callback_batch_limit = callback_batch_limit
        self._categories_limit = categories_limit
        self._category_samples_limit = category_samples_limit
        self._characters_limit = characters_limit
        self._collection_limit = collection_limit
        self._configurations_limit = configurations_limit
        self._entities_limit = entities_limit
        self._output_data_limit = output_data_limit
        self._processed_batch_limit = processed_batch_limit
        self._queries_limit = queries_limit
        self._return_source_text = return_source_text
        self._sentiment_limit = sentiment_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionBasicSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionBasicSection of this SubscriptionBasicSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_response_limit(self):
        """Gets the auto_response_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for auto-response feature

        :return: The auto_response_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._auto_response_limit

    @auto_response_limit.setter
    def auto_response_limit(self, auto_response_limit):
        """Sets the auto_response_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for auto-response feature

        :param auto_response_limit: The auto_response_limit of this SubscriptionBasicSection.
        :type auto_response_limit: int
        """
        if auto_response_limit is None:
            raise ValueError("Invalid value for `auto_response_limit`, must not be `None`")
        if auto_response_limit is not None and auto_response_limit < 0:
            raise ValueError("Invalid value for `auto_response_limit`, must be a value greater than or equal to `0`")

        self._auto_response_limit = auto_response_limit

    @property
    def batch_limit(self):
        """Gets the batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of the incoming batch in documents

        :return: The batch_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._batch_limit

    @batch_limit.setter
    def batch_limit(self, batch_limit):
        """Sets the batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of the incoming batch in documents

        :param batch_limit: The batch_limit of this SubscriptionBasicSection.
        :type batch_limit: int
        """
        if batch_limit is None:
            raise ValueError("Invalid value for `batch_limit`, must not be `None`")
        if batch_limit is not None and batch_limit < 0:
            raise ValueError("Invalid value for `batch_limit`, must be a value greater than or equal to `0`")

        self._batch_limit = batch_limit

    @property
    def blacklist_limit(self):
        """Gets the blacklist_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed blacklist items

        :return: The blacklist_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._blacklist_limit

    @blacklist_limit.setter
    def blacklist_limit(self, blacklist_limit):
        """Sets the blacklist_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed blacklist items

        :param blacklist_limit: The blacklist_limit of this SubscriptionBasicSection.
        :type blacklist_limit: int
        """
        if blacklist_limit is None:
            raise ValueError("Invalid value for `blacklist_limit`, must not be `None`")
        if blacklist_limit is not None and blacklist_limit < 0:
            raise ValueError("Invalid value for `blacklist_limit`, must be a value greater than or equal to `0`")

        self._blacklist_limit = blacklist_limit

    @property
    def callback_batch_limit(self):
        """Gets the callback_batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for callback data retrieving mode

        :return: The callback_batch_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._callback_batch_limit

    @callback_batch_limit.setter
    def callback_batch_limit(self, callback_batch_limit):
        """Sets the callback_batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for callback data retrieving mode

        :param callback_batch_limit: The callback_batch_limit of this SubscriptionBasicSection.
        :type callback_batch_limit: int
        """
        if callback_batch_limit is None:
            raise ValueError("Invalid value for `callback_batch_limit`, must not be `None`")
        if callback_batch_limit is not None and callback_batch_limit < 0:
            raise ValueError("Invalid value for `callback_batch_limit`, must be a value greater than or equal to `0`")

        self._callback_batch_limit = callback_batch_limit

    @property
    def categories_limit(self):
        """Gets the categories_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed categories

        :return: The categories_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._categories_limit

    @categories_limit.setter
    def categories_limit(self, categories_limit):
        """Sets the categories_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed categories

        :param categories_limit: The categories_limit of this SubscriptionBasicSection.
        :type categories_limit: int
        """
        if categories_limit is None:
            raise ValueError("Invalid value for `categories_limit`, must not be `None`")
        if categories_limit is not None and categories_limit < 0:
            raise ValueError("Invalid value for `categories_limit`, must be a value greater than or equal to `0`")

        self._categories_limit = categories_limit

    @property
    def category_samples_limit(self):
        """Gets the category_samples_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed category samples

        :return: The category_samples_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._category_samples_limit

    @category_samples_limit.setter
    def category_samples_limit(self, category_samples_limit):
        """Sets the category_samples_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed category samples

        :param category_samples_limit: The category_samples_limit of this SubscriptionBasicSection.
        :type category_samples_limit: int
        """
        if category_samples_limit is None:
            raise ValueError("Invalid value for `category_samples_limit`, must not be `None`")
        if category_samples_limit is not None and category_samples_limit < 0:
            raise ValueError("Invalid value for `category_samples_limit`, must be a value greater than or equal to `0`")

        self._category_samples_limit = category_samples_limit

    @property
    def characters_limit(self):
        """Gets the characters_limit of this SubscriptionBasicSection.

        Represents the maximum length of the document allowed for processing

        :return: The characters_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._characters_limit

    @characters_limit.setter
    def characters_limit(self, characters_limit):
        """Sets the characters_limit of this SubscriptionBasicSection.

        Represents the maximum length of the document allowed for processing

        :param characters_limit: The characters_limit of this SubscriptionBasicSection.
        :type characters_limit: int
        """
        if characters_limit is None:
            raise ValueError("Invalid value for `characters_limit`, must not be `None`")
        if characters_limit is not None and characters_limit < 0:
            raise ValueError("Invalid value for `characters_limit`, must be a value greater than or equal to `0`")

        self._characters_limit = characters_limit

    @property
    def collection_limit(self):
        """Gets the collection_limit of this SubscriptionBasicSection.

        Represents the maximum size of collection in documents

        :return: The collection_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._collection_limit

    @collection_limit.setter
    def collection_limit(self, collection_limit):
        """Sets the collection_limit of this SubscriptionBasicSection.

        Represents the maximum size of collection in documents

        :param collection_limit: The collection_limit of this SubscriptionBasicSection.
        :type collection_limit: int
        """
        if collection_limit is None:
            raise ValueError("Invalid value for `collection_limit`, must not be `None`")
        if collection_limit is not None and collection_limit < 0:
            raise ValueError("Invalid value for `collection_limit`, must be a value greater than or equal to `0`")

        self._collection_limit = collection_limit

    @property
    def configurations_limit(self):
        """Gets the configurations_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed configurations

        :return: The configurations_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._configurations_limit

    @configurations_limit.setter
    def configurations_limit(self, configurations_limit):
        """Sets the configurations_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed configurations

        :param configurations_limit: The configurations_limit of this SubscriptionBasicSection.
        :type configurations_limit: int
        """
        if configurations_limit is None:
            raise ValueError("Invalid value for `configurations_limit`, must not be `None`")
        if configurations_limit is not None and configurations_limit < 0:
            raise ValueError("Invalid value for `configurations_limit`, must be a value greater than or equal to `0`")

        self._configurations_limit = configurations_limit

    @property
    def entities_limit(self):
        """Gets the entities_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed entities

        :return: The entities_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._entities_limit

    @entities_limit.setter
    def entities_limit(self, entities_limit):
        """Sets the entities_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed entities

        :param entities_limit: The entities_limit of this SubscriptionBasicSection.
        :type entities_limit: int
        """
        if entities_limit is None:
            raise ValueError("Invalid value for `entities_limit`, must not be `None`")
        if entities_limit is not None and entities_limit < 0:
            raise ValueError("Invalid value for `entities_limit`, must be a value greater than or equal to `0`")

        self._entities_limit = entities_limit

    @property
    def output_data_limit(self):
        """Gets the output_data_limit of this SubscriptionBasicSection.

        Represent the maximum number allowed as output limit of configuration

        :return: The output_data_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._output_data_limit

    @output_data_limit.setter
    def output_data_limit(self, output_data_limit):
        """Sets the output_data_limit of this SubscriptionBasicSection.

        Represent the maximum number allowed as output limit of configuration

        :param output_data_limit: The output_data_limit of this SubscriptionBasicSection.
        :type output_data_limit: int
        """
        if output_data_limit is None:
            raise ValueError("Invalid value for `output_data_limit`, must not be `None`")
        if output_data_limit is not None and output_data_limit < 0:
            raise ValueError("Invalid value for `output_data_limit`, must be a value greater than or equal to `0`")

        self._output_data_limit = output_data_limit

    @property
    def processed_batch_limit(self):
        """Gets the processed_batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for pulling data retrieving mode

        :return: The processed_batch_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._processed_batch_limit

    @processed_batch_limit.setter
    def processed_batch_limit(self, processed_batch_limit):
        """Sets the processed_batch_limit of this SubscriptionBasicSection.

        Represents the maximum size of outgoing batch for pulling data retrieving mode

        :param processed_batch_limit: The processed_batch_limit of this SubscriptionBasicSection.
        :type processed_batch_limit: int
        """
        if processed_batch_limit is None:
            raise ValueError("Invalid value for `processed_batch_limit`, must not be `None`")
        if processed_batch_limit is not None and processed_batch_limit < 0:
            raise ValueError("Invalid value for `processed_batch_limit`, must be a value greater than or equal to `0`")

        self._processed_batch_limit = processed_batch_limit

    @property
    def queries_limit(self):
        """Gets the queries_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed queries

        :return: The queries_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._queries_limit

    @queries_limit.setter
    def queries_limit(self, queries_limit):
        """Sets the queries_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed queries

        :param queries_limit: The queries_limit of this SubscriptionBasicSection.
        :type queries_limit: int
        """
        if queries_limit is None:
            raise ValueError("Invalid value for `queries_limit`, must not be `None`")
        if queries_limit is not None and queries_limit < 0:
            raise ValueError("Invalid value for `queries_limit`, must be a value greater than or equal to `0`")

        self._queries_limit = queries_limit

    @property
    def return_source_text(self):
        """Gets the return_source_text of this SubscriptionBasicSection.

        Indicates whether responding of source text along with the analysis data is allowed or not

        :return: The return_source_text of this SubscriptionBasicSection.
        :rtype: bool
        """
        return self._return_source_text

    @return_source_text.setter
    def return_source_text(self, return_source_text):
        """Sets the return_source_text of this SubscriptionBasicSection.

        Indicates whether responding of source text along with the analysis data is allowed or not

        :param return_source_text: The return_source_text of this SubscriptionBasicSection.
        :type return_source_text: bool
        """
        if return_source_text is None:
            raise ValueError("Invalid value for `return_source_text`, must not be `None`")

        self._return_source_text = return_source_text

    @property
    def sentiment_limit(self):
        """Gets the sentiment_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed sentiment-bearing phrases

        :return: The sentiment_limit of this SubscriptionBasicSection.
        :rtype: int
        """
        return self._sentiment_limit

    @sentiment_limit.setter
    def sentiment_limit(self, sentiment_limit):
        """Sets the sentiment_limit of this SubscriptionBasicSection.

        Represents the maximum number of allowed sentiment-bearing phrases

        :param sentiment_limit: The sentiment_limit of this SubscriptionBasicSection.
        :type sentiment_limit: int
        """
        if sentiment_limit is None:
            raise ValueError("Invalid value for `sentiment_limit`, must not be `None`")
        if sentiment_limit is not None and sentiment_limit < 0:
            raise ValueError("Invalid value for `sentiment_limit`, must be a value greater than or equal to `0`")

        self._sentiment_limit = sentiment_limit
