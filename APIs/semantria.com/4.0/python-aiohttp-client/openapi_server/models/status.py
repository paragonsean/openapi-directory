# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, service_status: str=None, service_version: str=None, supported_compression: str=None, supported_encoding: str=None, supported_languages: List[str]=None):
        """Status - a model defined in OpenAPI

        :param api_version: The api_version of this Status.
        :param service_status: The service_status of this Status.
        :param service_version: The service_version of this Status.
        :param supported_compression: The supported_compression of this Status.
        :param supported_encoding: The supported_encoding of this Status.
        :param supported_languages: The supported_languages of this Status.
        """
        self.openapi_types = {
            'api_version': str,
            'service_status': str,
            'service_version': str,
            'supported_compression': str,
            'supported_encoding': str,
            'supported_languages': List[str]
        }

        self.attribute_map = {
            'api_version': 'api_version',
            'service_status': 'service_status',
            'service_version': 'service_version',
            'supported_compression': 'supported_compression',
            'supported_encoding': 'supported_encoding',
            'supported_languages': 'supported_languages'
        }

        self._api_version = api_version
        self._service_status = service_status
        self._service_version = service_version
        self._supported_compression = supported_compression
        self._supported_encoding = supported_encoding
        self._supported_languages = supported_languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this Status.

        Represents current version of the exposed API

        :return: The api_version of this Status.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Status.

        Represents current version of the exposed API

        :param api_version: The api_version of this Status.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")

        self._api_version = api_version

    @property
    def service_status(self):
        """Gets the service_status of this Status.

        Represents the availability of the service

        :return: The service_status of this Status.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this Status.

        Represents the availability of the service

        :param service_status: The service_status of this Status.
        :type service_status: str
        """
        allowed_values = ["available", "pending", "sold"]  # noqa: E501
        if service_status not in allowed_values:
            raise ValueError(
                "Invalid value for `service_status` ({0}), must be one of {1}"
                .format(service_status, allowed_values)
            )

        self._service_status = service_status

    @property
    def service_version(self):
        """Gets the service_version of this Status.

        Represents current version of the Semantria service

        :return: The service_version of this Status.
        :rtype: str
        """
        return self._service_version

    @service_version.setter
    def service_version(self, service_version):
        """Sets the service_version of this Status.

        Represents current version of the Semantria service

        :param service_version: The service_version of this Status.
        :type service_version: str
        """
        if service_version is None:
            raise ValueError("Invalid value for `service_version`, must not be `None`")

        self._service_version = service_version

    @property
    def supported_compression(self):
        """Gets the supported_compression of this Status.

        Exposes supported compression algorithms. Currently only gzip and deflate are supported

        :return: The supported_compression of this Status.
        :rtype: str
        """
        return self._supported_compression

    @supported_compression.setter
    def supported_compression(self, supported_compression):
        """Sets the supported_compression of this Status.

        Exposes supported compression algorithms. Currently only gzip and deflate are supported

        :param supported_compression: The supported_compression of this Status.
        :type supported_compression: str
        """
        if supported_compression is None:
            raise ValueError("Invalid value for `supported_compression`, must not be `None`")

        self._supported_compression = supported_compression

    @property
    def supported_encoding(self):
        """Gets the supported_encoding of this Status.

        Exposes supported content encoding. Currently only UTF-8 is supported

        :return: The supported_encoding of this Status.
        :rtype: str
        """
        return self._supported_encoding

    @supported_encoding.setter
    def supported_encoding(self, supported_encoding):
        """Sets the supported_encoding of this Status.

        Exposes supported content encoding. Currently only UTF-8 is supported

        :param supported_encoding: The supported_encoding of this Status.
        :type supported_encoding: str
        """
        if supported_encoding is None:
            raise ValueError("Invalid value for `supported_encoding`, must not be `None`")

        self._supported_encoding = supported_encoding

    @property
    def supported_languages(self):
        """Gets the supported_languages of this Status.

        Exposes list of supported languages

        :return: The supported_languages of this Status.
        :rtype: List[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this Status.

        Exposes list of supported languages

        :param supported_languages: The supported_languages of this Status.
        :type supported_languages: List[str]
        """
        if supported_languages is None:
            raise ValueError("Invalid value for `supported_languages`, must not be `None`")

        self._supported_languages = supported_languages
