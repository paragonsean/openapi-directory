# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mention import Mention
from openapi_server import util


class Theme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mentions: List[Mention]=None, normalized: str=None, phrases_count: int=None, sentiment_polarity: str=None, sentiment_score: float=None, stemmed: str=None, themes_count: int=None, title: str=None):
        """Theme - a model defined in OpenAPI

        :param mentions: The mentions of this Theme.
        :param normalized: The normalized of this Theme.
        :param phrases_count: The phrases_count of this Theme.
        :param sentiment_polarity: The sentiment_polarity of this Theme.
        :param sentiment_score: The sentiment_score of this Theme.
        :param stemmed: The stemmed of this Theme.
        :param themes_count: The themes_count of this Theme.
        :param title: The title of this Theme.
        """
        self.openapi_types = {
            'mentions': List[Mention],
            'normalized': str,
            'phrases_count': int,
            'sentiment_polarity': str,
            'sentiment_score': float,
            'stemmed': str,
            'themes_count': int,
            'title': str
        }

        self.attribute_map = {
            'mentions': 'mentions',
            'normalized': 'normalized',
            'phrases_count': 'phrases_count',
            'sentiment_polarity': 'sentiment_polarity',
            'sentiment_score': 'sentiment_score',
            'stemmed': 'stemmed',
            'themes_count': 'themes_count',
            'title': 'title'
        }

        self._mentions = mentions
        self._normalized = normalized
        self._phrases_count = phrases_count
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_score = sentiment_score
        self._stemmed = stemmed
        self._themes_count = themes_count
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Theme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Theme of this Theme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mentions(self):
        """Gets the mentions of this Theme.

        Returns the concept and query defined topics determined for the text

        :return: The mentions of this Theme.
        :rtype: List[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Theme.

        Returns the concept and query defined topics determined for the text

        :param mentions: The mentions of this Theme.
        :type mentions: List[Mention]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions

    @property
    def normalized(self):
        """Gets the normalized of this Theme.

        The normalized form of the theme

        :return: The normalized of this Theme.
        :rtype: str
        """
        return self._normalized

    @normalized.setter
    def normalized(self, normalized):
        """Sets the normalized of this Theme.

        The normalized form of the theme

        :param normalized: The normalized of this Theme.
        :type normalized: str
        """
        if normalized is None:
            raise ValueError("Invalid value for `normalized`, must not be `None`")

        self._normalized = normalized

    @property
    def phrases_count(self):
        """Gets the phrases_count of this Theme.

        Count of sentiment-bearing phrases was used in calculating theme's sentiment

        :return: The phrases_count of this Theme.
        :rtype: int
        """
        return self._phrases_count

    @phrases_count.setter
    def phrases_count(self, phrases_count):
        """Sets the phrases_count of this Theme.

        Count of sentiment-bearing phrases was used in calculating theme's sentiment

        :param phrases_count: The phrases_count of this Theme.
        :type phrases_count: int
        """
        if phrases_count is None:
            raise ValueError("Invalid value for `phrases_count`, must not be `None`")
        if phrases_count is not None and phrases_count < 0:
            raise ValueError("Invalid value for `phrases_count`, must be a value greater than or equal to `0`")

        self._phrases_count = phrases_count

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this Theme.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this Theme.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this Theme.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this Theme.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this Theme.

        Sentiment score for theme’s sentences across the documents

        :return: The sentiment_score of this Theme.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this Theme.

        Sentiment score for theme’s sentences across the documents

        :param sentiment_score: The sentiment_score of this Theme.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def stemmed(self):
        """Gets the stemmed of this Theme.

        The stemmed form of the theme

        :return: The stemmed of this Theme.
        :rtype: str
        """
        return self._stemmed

    @stemmed.setter
    def stemmed(self, stemmed):
        """Sets the stemmed of this Theme.

        The stemmed form of the theme

        :param stemmed: The stemmed of this Theme.
        :type stemmed: str
        """
        if stemmed is None:
            raise ValueError("Invalid value for `stemmed`, must not be `None`")

        self._stemmed = stemmed

    @property
    def themes_count(self):
        """Gets the themes_count of this Theme.

        Count of themes across the documents that got rolled into this one

        :return: The themes_count of this Theme.
        :rtype: int
        """
        return self._themes_count

    @themes_count.setter
    def themes_count(self, themes_count):
        """Sets the themes_count of this Theme.

        Count of themes across the documents that got rolled into this one

        :param themes_count: The themes_count of this Theme.
        :type themes_count: int
        """
        if themes_count is None:
            raise ValueError("Invalid value for `themes_count`, must not be `None`")
        if themes_count is not None and themes_count < 0:
            raise ValueError("Invalid value for `themes_count`, must be a value greater than or equal to `0`")

        self._themes_count = themes_count

    @property
    def title(self):
        """Gets the title of this Theme.

        The text of the theme across the documents

        :return: The title of this Theme.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Theme.

        The text of the theme across the documents

        :param title: The title of this Theme.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
