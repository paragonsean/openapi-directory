# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_basic_section import SubscriptionBasicSection
from openapi_server.models.subscription_billing_section import SubscriptionBillingSection
from openapi_server.models.subscription_feature_section import SubscriptionFeatureSection
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic_settings: SubscriptionBasicSection=None, billing_settings: SubscriptionBillingSection=None, feature_settings: SubscriptionFeatureSection=None, name: str=None, status: str=None):
        """Subscription - a model defined in OpenAPI

        :param basic_settings: The basic_settings of this Subscription.
        :param billing_settings: The billing_settings of this Subscription.
        :param feature_settings: The feature_settings of this Subscription.
        :param name: The name of this Subscription.
        :param status: The status of this Subscription.
        """
        self.openapi_types = {
            'basic_settings': SubscriptionBasicSection,
            'billing_settings': SubscriptionBillingSection,
            'feature_settings': SubscriptionFeatureSection,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'basic_settings': 'basic_settings',
            'billing_settings': 'billing_settings',
            'feature_settings': 'feature_settings',
            'name': 'name',
            'status': 'status'
        }

        self._basic_settings = basic_settings
        self._billing_settings = billing_settings
        self._feature_settings = feature_settings
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic_settings(self):
        """Gets the basic_settings of this Subscription.


        :return: The basic_settings of this Subscription.
        :rtype: SubscriptionBasicSection
        """
        return self._basic_settings

    @basic_settings.setter
    def basic_settings(self, basic_settings):
        """Sets the basic_settings of this Subscription.


        :param basic_settings: The basic_settings of this Subscription.
        :type basic_settings: SubscriptionBasicSection
        """
        if basic_settings is None:
            raise ValueError("Invalid value for `basic_settings`, must not be `None`")

        self._basic_settings = basic_settings

    @property
    def billing_settings(self):
        """Gets the billing_settings of this Subscription.


        :return: The billing_settings of this Subscription.
        :rtype: SubscriptionBillingSection
        """
        return self._billing_settings

    @billing_settings.setter
    def billing_settings(self, billing_settings):
        """Sets the billing_settings of this Subscription.


        :param billing_settings: The billing_settings of this Subscription.
        :type billing_settings: SubscriptionBillingSection
        """
        if billing_settings is None:
            raise ValueError("Invalid value for `billing_settings`, must not be `None`")

        self._billing_settings = billing_settings

    @property
    def feature_settings(self):
        """Gets the feature_settings of this Subscription.


        :return: The feature_settings of this Subscription.
        :rtype: SubscriptionFeatureSection
        """
        return self._feature_settings

    @feature_settings.setter
    def feature_settings(self, feature_settings):
        """Sets the feature_settings of this Subscription.


        :param feature_settings: The feature_settings of this Subscription.
        :type feature_settings: SubscriptionFeatureSection
        """
        if feature_settings is None:
            raise ValueError("Invalid value for `feature_settings`, must not be `None`")

        self._feature_settings = feature_settings

    @property
    def name(self):
        """Gets the name of this Subscription.

        Semantria subscriber name. Usually email

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        Semantria subscriber name. Usually email

        :param name: The name of this Subscription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Subscription.

        Semantria subscriber status. Can be active, expired, disabled, etc

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        Semantria subscriber status. Can be active, expired, disabled, etc

        :param status: The status of this Subscription.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
