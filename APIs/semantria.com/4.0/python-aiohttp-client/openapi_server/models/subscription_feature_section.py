# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_feature_section_collection import SubscriptionFeatureSectionCollection
from openapi_server.models.subscription_feature_section_document import SubscriptionFeatureSectionDocument
from openapi_server.models.subscription_feature_section_template import SubscriptionFeatureSectionTemplate
from openapi_server import util


class SubscriptionFeatureSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection: SubscriptionFeatureSectionCollection=None, document: SubscriptionFeatureSectionDocument=None, html_processing: bool=None, supported_languages: str=None, templates: SubscriptionFeatureSectionTemplate=None):
        """SubscriptionFeatureSection - a model defined in OpenAPI

        :param collection: The collection of this SubscriptionFeatureSection.
        :param document: The document of this SubscriptionFeatureSection.
        :param html_processing: The html_processing of this SubscriptionFeatureSection.
        :param supported_languages: The supported_languages of this SubscriptionFeatureSection.
        :param templates: The templates of this SubscriptionFeatureSection.
        """
        self.openapi_types = {
            'collection': SubscriptionFeatureSectionCollection,
            'document': SubscriptionFeatureSectionDocument,
            'html_processing': bool,
            'supported_languages': str,
            'templates': SubscriptionFeatureSectionTemplate
        }

        self.attribute_map = {
            'collection': 'collection',
            'document': 'document',
            'html_processing': 'html_processing',
            'supported_languages': 'supported_languages',
            'templates': 'templates'
        }

        self._collection = collection
        self._document = document
        self._html_processing = html_processing
        self._supported_languages = supported_languages
        self._templates = templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionFeatureSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionFeatureSection of this SubscriptionFeatureSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection(self):
        """Gets the collection of this SubscriptionFeatureSection.


        :return: The collection of this SubscriptionFeatureSection.
        :rtype: SubscriptionFeatureSectionCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this SubscriptionFeatureSection.


        :param collection: The collection of this SubscriptionFeatureSection.
        :type collection: SubscriptionFeatureSectionCollection
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")

        self._collection = collection

    @property
    def document(self):
        """Gets the document of this SubscriptionFeatureSection.


        :return: The document of this SubscriptionFeatureSection.
        :rtype: SubscriptionFeatureSectionDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this SubscriptionFeatureSection.


        :param document: The document of this SubscriptionFeatureSection.
        :type document: SubscriptionFeatureSectionDocument
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def html_processing(self):
        """Gets the html_processing of this SubscriptionFeatureSection.

        Identifies whether HTML processing feature is supported or not

        :return: The html_processing of this SubscriptionFeatureSection.
        :rtype: bool
        """
        return self._html_processing

    @html_processing.setter
    def html_processing(self, html_processing):
        """Sets the html_processing of this SubscriptionFeatureSection.

        Identifies whether HTML processing feature is supported or not

        :param html_processing: The html_processing of this SubscriptionFeatureSection.
        :type html_processing: bool
        """
        if html_processing is None:
            raise ValueError("Invalid value for `html_processing`, must not be `None`")

        self._html_processing = html_processing

    @property
    def supported_languages(self):
        """Gets the supported_languages of this SubscriptionFeatureSection.

        Lists all languages which are allowed for current subscription

        :return: The supported_languages of this SubscriptionFeatureSection.
        :rtype: str
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this SubscriptionFeatureSection.

        Lists all languages which are allowed for current subscription

        :param supported_languages: The supported_languages of this SubscriptionFeatureSection.
        :type supported_languages: str
        """
        if supported_languages is None:
            raise ValueError("Invalid value for `supported_languages`, must not be `None`")

        self._supported_languages = supported_languages

    @property
    def templates(self):
        """Gets the templates of this SubscriptionFeatureSection.


        :return: The templates of this SubscriptionFeatureSection.
        :rtype: SubscriptionFeatureSectionTemplate
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this SubscriptionFeatureSection.


        :param templates: The templates of this SubscriptionFeatureSection.
        :type templates: SubscriptionFeatureSectionTemplate
        """
        if templates is None:
            raise ValueError("Invalid value for `templates`, must not be `None`")

        self._templates = templates
