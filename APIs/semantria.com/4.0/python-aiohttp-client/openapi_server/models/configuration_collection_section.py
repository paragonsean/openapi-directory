# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigurationCollectionSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_mentions_limit: int=None, concept_topics_limit: int=None, facet_atts_limit: int=None, facet_mentions_limit: int=None, facets_limit: int=None, named_entities_limit: int=None, named_mentions_limit: int=None, query_topics_limit: int=None, theme_mentions_limit: int=None, themes_limit: int=None, user_entities_limit: int=None, user_mentions_limit: int=None):
        """ConfigurationCollectionSection - a model defined in OpenAPI

        :param attribute_mentions_limit: The attribute_mentions_limit of this ConfigurationCollectionSection.
        :param concept_topics_limit: The concept_topics_limit of this ConfigurationCollectionSection.
        :param facet_atts_limit: The facet_atts_limit of this ConfigurationCollectionSection.
        :param facet_mentions_limit: The facet_mentions_limit of this ConfigurationCollectionSection.
        :param facets_limit: The facets_limit of this ConfigurationCollectionSection.
        :param named_entities_limit: The named_entities_limit of this ConfigurationCollectionSection.
        :param named_mentions_limit: The named_mentions_limit of this ConfigurationCollectionSection.
        :param query_topics_limit: The query_topics_limit of this ConfigurationCollectionSection.
        :param theme_mentions_limit: The theme_mentions_limit of this ConfigurationCollectionSection.
        :param themes_limit: The themes_limit of this ConfigurationCollectionSection.
        :param user_entities_limit: The user_entities_limit of this ConfigurationCollectionSection.
        :param user_mentions_limit: The user_mentions_limit of this ConfigurationCollectionSection.
        """
        self.openapi_types = {
            'attribute_mentions_limit': int,
            'concept_topics_limit': int,
            'facet_atts_limit': int,
            'facet_mentions_limit': int,
            'facets_limit': int,
            'named_entities_limit': int,
            'named_mentions_limit': int,
            'query_topics_limit': int,
            'theme_mentions_limit': int,
            'themes_limit': int,
            'user_entities_limit': int,
            'user_mentions_limit': int
        }

        self.attribute_map = {
            'attribute_mentions_limit': 'attribute_mentions_limit',
            'concept_topics_limit': 'concept_topics_limit',
            'facet_atts_limit': 'facet_atts_limit',
            'facet_mentions_limit': 'facet_mentions_limit',
            'facets_limit': 'facets_limit',
            'named_entities_limit': 'named_entities_limit',
            'named_mentions_limit': 'named_mentions_limit',
            'query_topics_limit': 'query_topics_limit',
            'theme_mentions_limit': 'theme_mentions_limit',
            'themes_limit': 'themes_limit',
            'user_entities_limit': 'user_entities_limit',
            'user_mentions_limit': 'user_mentions_limit'
        }

        self._attribute_mentions_limit = attribute_mentions_limit
        self._concept_topics_limit = concept_topics_limit
        self._facet_atts_limit = facet_atts_limit
        self._facet_mentions_limit = facet_mentions_limit
        self._facets_limit = facets_limit
        self._named_entities_limit = named_entities_limit
        self._named_mentions_limit = named_mentions_limit
        self._query_topics_limit = query_topics_limit
        self._theme_mentions_limit = theme_mentions_limit
        self._themes_limit = themes_limit
        self._user_entities_limit = user_entities_limit
        self._user_mentions_limit = user_mentions_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationCollectionSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationCollectionSection of this ConfigurationCollectionSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_mentions_limit(self):
        """Gets the attribute_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of attribute responded from the server. Default: 0

        :return: The attribute_mentions_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._attribute_mentions_limit

    @attribute_mentions_limit.setter
    def attribute_mentions_limit(self, attribute_mentions_limit):
        """Sets the attribute_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of attribute responded from the server. Default: 0

        :param attribute_mentions_limit: The attribute_mentions_limit of this ConfigurationCollectionSection.
        :type attribute_mentions_limit: int
        """
        if attribute_mentions_limit is None:
            raise ValueError("Invalid value for `attribute_mentions_limit`, must not be `None`")
        if attribute_mentions_limit is not None and attribute_mentions_limit > 20:
            raise ValueError("Invalid value for `attribute_mentions_limit`, must be a value less than or equal to `20`")
        if attribute_mentions_limit is not None and attribute_mentions_limit < 0:
            raise ValueError("Invalid value for `attribute_mentions_limit`, must be a value greater than or equal to `0`")

        self._attribute_mentions_limit = attribute_mentions_limit

    @property
    def concept_topics_limit(self):
        """Gets the concept_topics_limit of this ConfigurationCollectionSection.

        Limits the number of concept topics responded from the service. Default: 5

        :return: The concept_topics_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._concept_topics_limit

    @concept_topics_limit.setter
    def concept_topics_limit(self, concept_topics_limit):
        """Sets the concept_topics_limit of this ConfigurationCollectionSection.

        Limits the number of concept topics responded from the service. Default: 5

        :param concept_topics_limit: The concept_topics_limit of this ConfigurationCollectionSection.
        :type concept_topics_limit: int
        """
        if concept_topics_limit is None:
            raise ValueError("Invalid value for `concept_topics_limit`, must not be `None`")
        if concept_topics_limit is not None and concept_topics_limit > 20:
            raise ValueError("Invalid value for `concept_topics_limit`, must be a value less than or equal to `20`")
        if concept_topics_limit is not None and concept_topics_limit < 0:
            raise ValueError("Invalid value for `concept_topics_limit`, must be a value greater than or equal to `0`")

        self._concept_topics_limit = concept_topics_limit

    @property
    def facet_atts_limit(self):
        """Gets the facet_atts_limit of this ConfigurationCollectionSection.

        Limits the number of facets which will be responded from the server. Default: 5

        :return: The facet_atts_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._facet_atts_limit

    @facet_atts_limit.setter
    def facet_atts_limit(self, facet_atts_limit):
        """Sets the facet_atts_limit of this ConfigurationCollectionSection.

        Limits the number of facets which will be responded from the server. Default: 5

        :param facet_atts_limit: The facet_atts_limit of this ConfigurationCollectionSection.
        :type facet_atts_limit: int
        """
        if facet_atts_limit is None:
            raise ValueError("Invalid value for `facet_atts_limit`, must not be `None`")
        if facet_atts_limit is not None and facet_atts_limit > 20:
            raise ValueError("Invalid value for `facet_atts_limit`, must be a value less than or equal to `20`")
        if facet_atts_limit is not None and facet_atts_limit < 0:
            raise ValueError("Invalid value for `facet_atts_limit`, must be a value greater than or equal to `0`")

        self._facet_atts_limit = facet_atts_limit

    @property
    def facet_mentions_limit(self):
        """Gets the facet_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of facet responded from the server. Default: 0

        :return: The facet_mentions_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._facet_mentions_limit

    @facet_mentions_limit.setter
    def facet_mentions_limit(self, facet_mentions_limit):
        """Sets the facet_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of facet responded from the server. Default: 0

        :param facet_mentions_limit: The facet_mentions_limit of this ConfigurationCollectionSection.
        :type facet_mentions_limit: int
        """
        if facet_mentions_limit is None:
            raise ValueError("Invalid value for `facet_mentions_limit`, must not be `None`")
        if facet_mentions_limit is not None and facet_mentions_limit > 20:
            raise ValueError("Invalid value for `facet_mentions_limit`, must be a value less than or equal to `20`")
        if facet_mentions_limit is not None and facet_mentions_limit < 0:
            raise ValueError("Invalid value for `facet_mentions_limit`, must be a value greater than or equal to `0`")

        self._facet_mentions_limit = facet_mentions_limit

    @property
    def facets_limit(self):
        """Gets the facets_limit of this ConfigurationCollectionSection.

        Limits the number of facets which will be responded from the server.  Default: 15

        :return: The facets_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._facets_limit

    @facets_limit.setter
    def facets_limit(self, facets_limit):
        """Sets the facets_limit of this ConfigurationCollectionSection.

        Limits the number of facets which will be responded from the server.  Default: 15

        :param facets_limit: The facets_limit of this ConfigurationCollectionSection.
        :type facets_limit: int
        """
        if facets_limit is None:
            raise ValueError("Invalid value for `facets_limit`, must not be `None`")
        if facets_limit is not None and facets_limit > 20:
            raise ValueError("Invalid value for `facets_limit`, must be a value less than or equal to `20`")
        if facets_limit is not None and facets_limit < 0:
            raise ValueError("Invalid value for `facets_limit`, must be a value greater than or equal to `0`")

        self._facets_limit = facets_limit

    @property
    def named_entities_limit(self):
        """Gets the named_entities_limit of this ConfigurationCollectionSection.

        Limits the number of named entities responded from the service. Default: 5

        :return: The named_entities_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._named_entities_limit

    @named_entities_limit.setter
    def named_entities_limit(self, named_entities_limit):
        """Sets the named_entities_limit of this ConfigurationCollectionSection.

        Limits the number of named entities responded from the service. Default: 5

        :param named_entities_limit: The named_entities_limit of this ConfigurationCollectionSection.
        :type named_entities_limit: int
        """
        if named_entities_limit is None:
            raise ValueError("Invalid value for `named_entities_limit`, must not be `None`")
        if named_entities_limit is not None and named_entities_limit > 20:
            raise ValueError("Invalid value for `named_entities_limit`, must be a value less than or equal to `20`")
        if named_entities_limit is not None and named_entities_limit < 0:
            raise ValueError("Invalid value for `named_entities_limit`, must be a value greater than or equal to `0`")

        self._named_entities_limit = named_entities_limit

    @property
    def named_mentions_limit(self):
        """Gets the named_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of theme responded from the server. Default: 0

        :return: The named_mentions_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._named_mentions_limit

    @named_mentions_limit.setter
    def named_mentions_limit(self, named_mentions_limit):
        """Sets the named_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of mentions of theme responded from the server. Default: 0

        :param named_mentions_limit: The named_mentions_limit of this ConfigurationCollectionSection.
        :type named_mentions_limit: int
        """
        if named_mentions_limit is None:
            raise ValueError("Invalid value for `named_mentions_limit`, must not be `None`")
        if named_mentions_limit is not None and named_mentions_limit > 20:
            raise ValueError("Invalid value for `named_mentions_limit`, must be a value less than or equal to `20`")
        if named_mentions_limit is not None and named_mentions_limit < 0:
            raise ValueError("Invalid value for `named_mentions_limit`, must be a value greater than or equal to `0`")

        self._named_mentions_limit = named_mentions_limit

    @property
    def query_topics_limit(self):
        """Gets the query_topics_limit of this ConfigurationCollectionSection.

        Limits the number of query topics responded from the service. Default: 5

        :return: The query_topics_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._query_topics_limit

    @query_topics_limit.setter
    def query_topics_limit(self, query_topics_limit):
        """Sets the query_topics_limit of this ConfigurationCollectionSection.

        Limits the number of query topics responded from the service. Default: 5

        :param query_topics_limit: The query_topics_limit of this ConfigurationCollectionSection.
        :type query_topics_limit: int
        """
        if query_topics_limit is None:
            raise ValueError("Invalid value for `query_topics_limit`, must not be `None`")
        if query_topics_limit is not None and query_topics_limit > 20:
            raise ValueError("Invalid value for `query_topics_limit`, must be a value less than or equal to `20`")
        if query_topics_limit is not None and query_topics_limit < 0:
            raise ValueError("Invalid value for `query_topics_limit`, must be a value greater than or equal to `0`")

        self._query_topics_limit = query_topics_limit

    @property
    def theme_mentions_limit(self):
        """Gets the theme_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of entity mentions responded from the server. Default: 0

        :return: The theme_mentions_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._theme_mentions_limit

    @theme_mentions_limit.setter
    def theme_mentions_limit(self, theme_mentions_limit):
        """Sets the theme_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of entity mentions responded from the server. Default: 0

        :param theme_mentions_limit: The theme_mentions_limit of this ConfigurationCollectionSection.
        :type theme_mentions_limit: int
        """
        if theme_mentions_limit is None:
            raise ValueError("Invalid value for `theme_mentions_limit`, must not be `None`")
        if theme_mentions_limit is not None and theme_mentions_limit > 20:
            raise ValueError("Invalid value for `theme_mentions_limit`, must be a value less than or equal to `20`")
        if theme_mentions_limit is not None and theme_mentions_limit < 0:
            raise ValueError("Invalid value for `theme_mentions_limit`, must be a value greater than or equal to `0`")

        self._theme_mentions_limit = theme_mentions_limit

    @property
    def themes_limit(self):
        """Gets the themes_limit of this ConfigurationCollectionSection.

        Limits the number of themes responded from the service. Default: 5

        :return: The themes_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._themes_limit

    @themes_limit.setter
    def themes_limit(self, themes_limit):
        """Sets the themes_limit of this ConfigurationCollectionSection.

        Limits the number of themes responded from the service. Default: 5

        :param themes_limit: The themes_limit of this ConfigurationCollectionSection.
        :type themes_limit: int
        """
        if themes_limit is None:
            raise ValueError("Invalid value for `themes_limit`, must not be `None`")
        if themes_limit is not None and themes_limit > 20:
            raise ValueError("Invalid value for `themes_limit`, must be a value less than or equal to `20`")
        if themes_limit is not None and themes_limit < 0:
            raise ValueError("Invalid value for `themes_limit`, must be a value greater than or equal to `0`")

        self._themes_limit = themes_limit

    @property
    def user_entities_limit(self):
        """Gets the user_entities_limit of this ConfigurationCollectionSection.

        Limits the number of user entities the service responds. Default: 15

        :return: The user_entities_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._user_entities_limit

    @user_entities_limit.setter
    def user_entities_limit(self, user_entities_limit):
        """Sets the user_entities_limit of this ConfigurationCollectionSection.

        Limits the number of user entities the service responds. Default: 15

        :param user_entities_limit: The user_entities_limit of this ConfigurationCollectionSection.
        :type user_entities_limit: int
        """
        if user_entities_limit is None:
            raise ValueError("Invalid value for `user_entities_limit`, must not be `None`")
        if user_entities_limit is not None and user_entities_limit > 20:
            raise ValueError("Invalid value for `user_entities_limit`, must be a value less than or equal to `20`")
        if user_entities_limit is not None and user_entities_limit < 0:
            raise ValueError("Invalid value for `user_entities_limit`, must be a value greater than or equal to `0`")

        self._user_entities_limit = user_entities_limit

    @property
    def user_mentions_limit(self):
        """Gets the user_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of user entity mentions the service responds. Default: 0

        :return: The user_mentions_limit of this ConfigurationCollectionSection.
        :rtype: int
        """
        return self._user_mentions_limit

    @user_mentions_limit.setter
    def user_mentions_limit(self, user_mentions_limit):
        """Sets the user_mentions_limit of this ConfigurationCollectionSection.

        Limits the number of user entity mentions the service responds. Default: 0

        :param user_mentions_limit: The user_mentions_limit of this ConfigurationCollectionSection.
        :type user_mentions_limit: int
        """
        if user_mentions_limit is None:
            raise ValueError("Invalid value for `user_mentions_limit`, must not be `None`")
        if user_mentions_limit is not None and user_mentions_limit > 20:
            raise ValueError("Invalid value for `user_mentions_limit`, must be a value less than or equal to `20`")
        if user_mentions_limit is not None and user_mentions_limit < 0:
            raise ValueError("Invalid value for `user_mentions_limit`, must be a value greater than or equal to `0`")

        self._user_mentions_limit = user_mentions_limit
