# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Word(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_negated: bool=None, sentiment_score: float=None, stemmed: str=None, tag: str=None, title: str=None, type: str=None):
        """Word - a model defined in OpenAPI

        :param is_negated: The is_negated of this Word.
        :param sentiment_score: The sentiment_score of this Word.
        :param stemmed: The stemmed of this Word.
        :param tag: The tag of this Word.
        :param title: The title of this Word.
        :param type: The type of this Word.
        """
        self.openapi_types = {
            'is_negated': bool,
            'sentiment_score': float,
            'stemmed': str,
            'tag': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'is_negated': 'is_negated',
            'sentiment_score': 'sentiment_score',
            'stemmed': 'stemmed',
            'tag': 'tag',
            'title': 'title',
            'type': 'type'
        }

        self._is_negated = is_negated
        self._sentiment_score = sentiment_score
        self._stemmed = stemmed
        self._tag = tag
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Word':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Word of this Word.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_negated(self):
        """Gets the is_negated of this Word.

        A flag indicating if the token is or is part of a sentiment inverting construction

        :return: The is_negated of this Word.
        :rtype: bool
        """
        return self._is_negated

    @is_negated.setter
    def is_negated(self, is_negated):
        """Sets the is_negated of this Word.

        A flag indicating if the token is or is part of a sentiment inverting construction

        :param is_negated: The is_negated of this Word.
        :type is_negated: bool
        """
        if is_negated is None:
            raise ValueError("Invalid value for `is_negated`, must not be `None`")

        self._is_negated = is_negated

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this Word.

        The sentiment score associated with the word

        :return: The sentiment_score of this Word.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this Word.

        The sentiment score associated with the word

        :param sentiment_score: The sentiment_score of this Word.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def stemmed(self):
        """Gets the stemmed of this Word.

        The stemmed form of the word

        :return: The stemmed of this Word.
        :rtype: str
        """
        return self._stemmed

    @stemmed.setter
    def stemmed(self, stemmed):
        """Sets the stemmed of this Word.

        The stemmed form of the word

        :param stemmed: The stemmed of this Word.
        :type stemmed: str
        """
        if stemmed is None:
            raise ValueError("Invalid value for `stemmed`, must not be `None`")

        self._stemmed = stemmed

    @property
    def tag(self):
        """Gets the tag of this Word.

        POS marker of the word

        :return: The tag of this Word.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Word.

        POS marker of the word

        :param tag: The tag of this Word.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag

    @property
    def title(self):
        """Gets the title of this Word.

        The original word representation in text

        :return: The title of this Word.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Word.

        The original word representation in text

        :param title: The title of this Word.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Word.

        Verbal representation of part of speech in addition to certain tag

        :return: The type of this Word.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Word.

        Verbal representation of part of speech in addition to certain tag

        :param type: The type of this Word.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
