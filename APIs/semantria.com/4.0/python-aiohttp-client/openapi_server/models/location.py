# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, length: int=None, offset: int=None):
        """Location - a model defined in OpenAPI

        :param index: The index of this Location.
        :param length: The length of this Location.
        :param offset: The offset of this Location.
        """
        self.openapi_types = {
            'index': int,
            'length': int,
            'offset': int
        }

        self.attribute_map = {
            'index': 'index',
            'length': 'length',
            'offset': 'offset'
        }

        self._index = index
        self._length = length
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this Location.

        Document index within collection where the mention appeared

        :return: The index of this Location.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Location.

        Document index within collection where the mention appeared

        :param index: The index of this Location.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def length(self):
        """Gets the length of this Location.

        The length of the mention in bytes

        :return: The length of this Location.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Location.

        The length of the mention in bytes

        :param length: The length of this Location.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def offset(self):
        """Gets the offset of this Location.

        The amount of bytes offset in the original text before the start of the mention

        :return: The offset of this Location.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Location.

        The amount of bytes offset in the original text before the start of the mention

        :param offset: The offset of this Location.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset
