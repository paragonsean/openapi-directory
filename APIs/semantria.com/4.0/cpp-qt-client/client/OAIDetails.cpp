/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetails::OAIDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetails::OAIDetails() {
    this->initializeModel();
}

OAIDetails::~OAIDetails() {}

void OAIDetails::initializeModel() {

    m_is_imperative_isSet = false;
    m_is_imperative_isValid = false;

    m_is_polar_isSet = false;
    m_is_polar_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;
}

void OAIDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetails::fromJsonObject(QJsonObject json) {

    m_is_imperative_isValid = ::OpenAPI::fromJsonValue(m_is_imperative, json[QString("is_imperative")]);
    m_is_imperative_isSet = !json[QString("is_imperative")].isNull() && m_is_imperative_isValid;

    m_is_polar_isValid = ::OpenAPI::fromJsonValue(m_is_polar, json[QString("is_polar")]);
    m_is_polar_isSet = !json[QString("is_polar")].isNull() && m_is_polar_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;
}

QString OAIDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_is_imperative_isSet) {
        obj.insert(QString("is_imperative"), ::OpenAPI::toJsonValue(m_is_imperative));
    }
    if (m_is_polar_isSet) {
        obj.insert(QString("is_polar"), ::OpenAPI::toJsonValue(m_is_polar));
    }
    if (m_words.size() > 0) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    return obj;
}

bool OAIDetails::isIsImperative() const {
    return m_is_imperative;
}
void OAIDetails::setIsImperative(const bool &is_imperative) {
    m_is_imperative = is_imperative;
    m_is_imperative_isSet = true;
}

bool OAIDetails::is_is_imperative_Set() const{
    return m_is_imperative_isSet;
}

bool OAIDetails::is_is_imperative_Valid() const{
    return m_is_imperative_isValid;
}

bool OAIDetails::isIsPolar() const {
    return m_is_polar;
}
void OAIDetails::setIsPolar(const bool &is_polar) {
    m_is_polar = is_polar;
    m_is_polar_isSet = true;
}

bool OAIDetails::is_is_polar_Set() const{
    return m_is_polar_isSet;
}

bool OAIDetails::is_is_polar_Valid() const{
    return m_is_polar_isValid;
}

QList<OAIWord> OAIDetails::getWords() const {
    return m_words;
}
void OAIDetails::setWords(const QList<OAIWord> &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAIDetails::is_words_Set() const{
    return m_words_isSet;
}

bool OAIDetails::is_words_Valid() const{
    return m_words_isValid;
}

bool OAIDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_imperative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_polar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_imperative_isValid && m_is_polar_isValid && m_words_isValid && true;
}

} // namespace OpenAPI
