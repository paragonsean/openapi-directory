/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigurationCollectionSection.h
 *
 * 
 */

#ifndef OAIConfigurationCollectionSection_H
#define OAIConfigurationCollectionSection_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConfigurationCollectionSection : public OAIObject {
public:
    OAIConfigurationCollectionSection();
    OAIConfigurationCollectionSection(QString json);
    ~OAIConfigurationCollectionSection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAttributeMentionsLimit() const;
    void setAttributeMentionsLimit(const qint32 &attribute_mentions_limit);
    bool is_attribute_mentions_limit_Set() const;
    bool is_attribute_mentions_limit_Valid() const;

    qint32 getConceptTopicsLimit() const;
    void setConceptTopicsLimit(const qint32 &concept_topics_limit);
    bool is_concept_topics_limit_Set() const;
    bool is_concept_topics_limit_Valid() const;

    qint32 getFacetAttsLimit() const;
    void setFacetAttsLimit(const qint32 &facet_atts_limit);
    bool is_facet_atts_limit_Set() const;
    bool is_facet_atts_limit_Valid() const;

    qint32 getFacetMentionsLimit() const;
    void setFacetMentionsLimit(const qint32 &facet_mentions_limit);
    bool is_facet_mentions_limit_Set() const;
    bool is_facet_mentions_limit_Valid() const;

    qint32 getFacetsLimit() const;
    void setFacetsLimit(const qint32 &facets_limit);
    bool is_facets_limit_Set() const;
    bool is_facets_limit_Valid() const;

    qint32 getNamedEntitiesLimit() const;
    void setNamedEntitiesLimit(const qint32 &named_entities_limit);
    bool is_named_entities_limit_Set() const;
    bool is_named_entities_limit_Valid() const;

    qint32 getNamedMentionsLimit() const;
    void setNamedMentionsLimit(const qint32 &named_mentions_limit);
    bool is_named_mentions_limit_Set() const;
    bool is_named_mentions_limit_Valid() const;

    qint32 getQueryTopicsLimit() const;
    void setQueryTopicsLimit(const qint32 &query_topics_limit);
    bool is_query_topics_limit_Set() const;
    bool is_query_topics_limit_Valid() const;

    qint32 getThemeMentionsLimit() const;
    void setThemeMentionsLimit(const qint32 &theme_mentions_limit);
    bool is_theme_mentions_limit_Set() const;
    bool is_theme_mentions_limit_Valid() const;

    qint32 getThemesLimit() const;
    void setThemesLimit(const qint32 &themes_limit);
    bool is_themes_limit_Set() const;
    bool is_themes_limit_Valid() const;

    qint32 getUserEntitiesLimit() const;
    void setUserEntitiesLimit(const qint32 &user_entities_limit);
    bool is_user_entities_limit_Set() const;
    bool is_user_entities_limit_Valid() const;

    qint32 getUserMentionsLimit() const;
    void setUserMentionsLimit(const qint32 &user_mentions_limit);
    bool is_user_mentions_limit_Set() const;
    bool is_user_mentions_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_attribute_mentions_limit;
    bool m_attribute_mentions_limit_isSet;
    bool m_attribute_mentions_limit_isValid;

    qint32 m_concept_topics_limit;
    bool m_concept_topics_limit_isSet;
    bool m_concept_topics_limit_isValid;

    qint32 m_facet_atts_limit;
    bool m_facet_atts_limit_isSet;
    bool m_facet_atts_limit_isValid;

    qint32 m_facet_mentions_limit;
    bool m_facet_mentions_limit_isSet;
    bool m_facet_mentions_limit_isValid;

    qint32 m_facets_limit;
    bool m_facets_limit_isSet;
    bool m_facets_limit_isValid;

    qint32 m_named_entities_limit;
    bool m_named_entities_limit_isSet;
    bool m_named_entities_limit_isValid;

    qint32 m_named_mentions_limit;
    bool m_named_mentions_limit_isSet;
    bool m_named_mentions_limit_isValid;

    qint32 m_query_topics_limit;
    bool m_query_topics_limit_isSet;
    bool m_query_topics_limit_isValid;

    qint32 m_theme_mentions_limit;
    bool m_theme_mentions_limit_isSet;
    bool m_theme_mentions_limit_isValid;

    qint32 m_themes_limit;
    bool m_themes_limit_isSet;
    bool m_themes_limit_isValid;

    qint32 m_user_entities_limit;
    bool m_user_entities_limit_isSet;
    bool m_user_entities_limit_isValid;

    qint32 m_user_mentions_limit;
    bool m_user_mentions_limit_isSet;
    bool m_user_mentions_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigurationCollectionSection)

#endif // OAIConfigurationCollectionSection_H
