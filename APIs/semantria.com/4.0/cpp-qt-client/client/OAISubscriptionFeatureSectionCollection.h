/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionFeatureSectionCollection.h
 *
 * 
 */

#ifndef OAISubscriptionFeatureSectionCollection_H
#define OAISubscriptionFeatureSectionCollection_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubscriptionFeatureSectionCollection : public OAIObject {
public:
    OAISubscriptionFeatureSectionCollection();
    OAISubscriptionFeatureSectionCollection(QString json);
    ~OAISubscriptionFeatureSectionCollection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isConceptTopics() const;
    void setConceptTopics(const bool &concept_topics);
    bool is_concept_topics_Set() const;
    bool is_concept_topics_Valid() const;

    bool isFacets() const;
    void setFacets(const bool &facets);
    bool is_facets_Set() const;
    bool is_facets_Valid() const;

    bool isMentions() const;
    void setMentions(const bool &mentions);
    bool is_mentions_Set() const;
    bool is_mentions_Valid() const;

    bool isNamedEntities() const;
    void setNamedEntities(const bool &named_entities);
    bool is_named_entities_Set() const;
    bool is_named_entities_Valid() const;

    bool isQueryTopics() const;
    void setQueryTopics(const bool &query_topics);
    bool is_query_topics_Set() const;
    bool is_query_topics_Valid() const;

    bool isThemes() const;
    void setThemes(const bool &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    bool isUserEntities() const;
    void setUserEntities(const bool &user_entities);
    bool is_user_entities_Set() const;
    bool is_user_entities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_concept_topics;
    bool m_concept_topics_isSet;
    bool m_concept_topics_isValid;

    bool m_facets;
    bool m_facets_isSet;
    bool m_facets_isValid;

    bool m_mentions;
    bool m_mentions_isSet;
    bool m_mentions_isValid;

    bool m_named_entities;
    bool m_named_entities_isSet;
    bool m_named_entities_isValid;

    bool m_query_topics;
    bool m_query_topics_isSet;
    bool m_query_topics_isValid;

    bool m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    bool m_user_entities;
    bool m_user_entities_isSet;
    bool m_user_entities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionFeatureSectionCollection)

#endif // OAISubscriptionFeatureSectionCollection_H
