/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProcessingCollectionsApi_H
#define OAI_OAIProcessingCollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollection.h"
#include "OAICollectionAnalyticData.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProcessingCollectionsApi : public QObject {
    Q_OBJECT

public:
    OAIProcessingCollectionsApi(const int timeOut = 0);
    ~OAIProcessingCollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  config_id QString [optional]
    */
    virtual void cancelCollection(const QString &collection_id, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &config_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  collection OAIObject [required]
    * @param[in]  config_id QString [optional]
    */
    virtual void queueCollection(const QString &content_type, const OAIObject &collection, const ::OpenAPI::OptionalParam<QString> &config_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  config_id QString [optional]
    */
    virtual void receiveCollectionAnalyticData(const QString &collection_id, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &config_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  config_id QString [optional]
    */
    virtual void retrieveProcessedCollections(const QString &content_type, const ::OpenAPI::OptionalParam<QString> &config_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelCollectionCallback(OAIHttpRequestWorker *worker);
    void queueCollectionCallback(OAIHttpRequestWorker *worker);
    void receiveCollectionAnalyticDataCallback(OAIHttpRequestWorker *worker);
    void retrieveProcessedCollectionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelCollectionSignal();
    void queueCollectionSignal(OAICollection summary);
    void receiveCollectionAnalyticDataSignal(OAICollectionAnalyticData summary);
    void retrieveProcessedCollectionsSignal(OAICollectionAnalyticData summary);


    void cancelCollectionSignalFull(OAIHttpRequestWorker *worker);
    void queueCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void receiveCollectionAnalyticDataSignalFull(OAIHttpRequestWorker *worker, OAICollectionAnalyticData summary);
    void retrieveProcessedCollectionsSignalFull(OAIHttpRequestWorker *worker, OAICollectionAnalyticData summary);

    Q_DECL_DEPRECATED_X("Use cancelCollectionSignalError() instead")
    void cancelCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueCollectionSignalError() instead")
    void queueCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queueCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use receiveCollectionAnalyticDataSignalError() instead")
    void receiveCollectionAnalyticDataSignalE(OAICollectionAnalyticData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void receiveCollectionAnalyticDataSignalError(OAICollectionAnalyticData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveProcessedCollectionsSignalError() instead")
    void retrieveProcessedCollectionsSignalE(OAICollectionAnalyticData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveProcessedCollectionsSignalError(OAICollectionAnalyticData summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelCollectionSignalErrorFull() instead")
    void cancelCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueCollectionSignalErrorFull() instead")
    void queueCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queueCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use receiveCollectionAnalyticDataSignalErrorFull() instead")
    void receiveCollectionAnalyticDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void receiveCollectionAnalyticDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveProcessedCollectionsSignalErrorFull() instead")
    void retrieveProcessedCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveProcessedCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
