/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionBillingSection.h
 *
 * 
 */

#ifndef OAISubscriptionBillingSection_H
#define OAISubscriptionBillingSection_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubscriptionBillingSection : public OAIObject {
public:
    OAISubscriptionBillingSection();
    OAISubscriptionBillingSection(QString json);
    ~OAISubscriptionBillingSection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAppSeatsAllocated() const;
    void setAppSeatsAllocated(const qint32 &app_seats_allocated);
    bool is_app_seats_allocated_Set() const;
    bool is_app_seats_allocated_Valid() const;

    qint32 getAppSeatsPermitted() const;
    void setAppSeatsPermitted(const qint32 &app_seats_permitted);
    bool is_app_seats_permitted_Set() const;
    bool is_app_seats_permitted_Valid() const;

    qint32 getDataCallsBalance() const;
    void setDataCallsBalance(const qint32 &data_calls_balance);
    bool is_data_calls_balance_Set() const;
    bool is_data_calls_balance_Valid() const;

    qint32 getDataCallsLimit() const;
    void setDataCallsLimit(const qint32 &data_calls_limit);
    bool is_data_calls_limit_Set() const;
    bool is_data_calls_limit_Valid() const;

    qint32 getDataCallsLimitInterval() const;
    void setDataCallsLimitInterval(const qint32 &data_calls_limit_interval);
    bool is_data_calls_limit_interval_Set() const;
    bool is_data_calls_limit_interval_Valid() const;

    qint32 getDocsBalance() const;
    void setDocsBalance(const qint32 &docs_balance);
    bool is_docs_balance_Set() const;
    bool is_docs_balance_Valid() const;

    qint32 getDocsLimit() const;
    void setDocsLimit(const qint32 &docs_limit);
    bool is_docs_limit_Set() const;
    bool is_docs_limit_Valid() const;

    qint32 getDocsLimitInterval() const;
    void setDocsLimitInterval(const qint32 &docs_limit_interval);
    bool is_docs_limit_interval_Set() const;
    bool is_docs_limit_interval_Valid() const;

    qint32 getDocsSuggested() const;
    void setDocsSuggested(const qint32 &docs_suggested);
    bool is_docs_suggested_Set() const;
    bool is_docs_suggested_Valid() const;

    qint32 getDocsSuggestedInterval() const;
    void setDocsSuggestedInterval(const qint32 &docs_suggested_interval);
    bool is_docs_suggested_interval_Set() const;
    bool is_docs_suggested_interval_Valid() const;

    QString getExpirationDate() const;
    void setExpirationDate(const QString &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getLimitType() const;
    void setLimitType(const QString &limit_type);
    bool is_limit_type_Set() const;
    bool is_limit_type_Valid() const;

    qint32 getPollingCallsBalance() const;
    void setPollingCallsBalance(const qint32 &polling_calls_balance);
    bool is_polling_calls_balance_Set() const;
    bool is_polling_calls_balance_Valid() const;

    qint32 getPollingCallsLimit() const;
    void setPollingCallsLimit(const qint32 &polling_calls_limit);
    bool is_polling_calls_limit_Set() const;
    bool is_polling_calls_limit_Valid() const;

    qint32 getPollingCallsLimitInterval() const;
    void setPollingCallsLimitInterval(const qint32 &polling_calls_limit_interval);
    bool is_polling_calls_limit_interval_Set() const;
    bool is_polling_calls_limit_interval_Valid() const;

    QString getPriority() const;
    void setPriority(const QString &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    qint32 getSettingsCallsBalance() const;
    void setSettingsCallsBalance(const qint32 &settings_calls_balance);
    bool is_settings_calls_balance_Set() const;
    bool is_settings_calls_balance_Valid() const;

    qint32 getSettingsCallsLimit() const;
    void setSettingsCallsLimit(const qint32 &settings_calls_limit);
    bool is_settings_calls_limit_Set() const;
    bool is_settings_calls_limit_Valid() const;

    qint32 getSettingsCallsLimitInterval() const;
    void setSettingsCallsLimitInterval(const qint32 &settings_calls_limit_interval);
    bool is_settings_calls_limit_interval_Set() const;
    bool is_settings_calls_limit_interval_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_app_seats_allocated;
    bool m_app_seats_allocated_isSet;
    bool m_app_seats_allocated_isValid;

    qint32 m_app_seats_permitted;
    bool m_app_seats_permitted_isSet;
    bool m_app_seats_permitted_isValid;

    qint32 m_data_calls_balance;
    bool m_data_calls_balance_isSet;
    bool m_data_calls_balance_isValid;

    qint32 m_data_calls_limit;
    bool m_data_calls_limit_isSet;
    bool m_data_calls_limit_isValid;

    qint32 m_data_calls_limit_interval;
    bool m_data_calls_limit_interval_isSet;
    bool m_data_calls_limit_interval_isValid;

    qint32 m_docs_balance;
    bool m_docs_balance_isSet;
    bool m_docs_balance_isValid;

    qint32 m_docs_limit;
    bool m_docs_limit_isSet;
    bool m_docs_limit_isValid;

    qint32 m_docs_limit_interval;
    bool m_docs_limit_interval_isSet;
    bool m_docs_limit_interval_isValid;

    qint32 m_docs_suggested;
    bool m_docs_suggested_isSet;
    bool m_docs_suggested_isValid;

    qint32 m_docs_suggested_interval;
    bool m_docs_suggested_interval_isSet;
    bool m_docs_suggested_interval_isValid;

    QString m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_limit_type;
    bool m_limit_type_isSet;
    bool m_limit_type_isValid;

    qint32 m_polling_calls_balance;
    bool m_polling_calls_balance_isSet;
    bool m_polling_calls_balance_isValid;

    qint32 m_polling_calls_limit;
    bool m_polling_calls_limit_isSet;
    bool m_polling_calls_limit_isValid;

    qint32 m_polling_calls_limit_interval;
    bool m_polling_calls_limit_interval_isSet;
    bool m_polling_calls_limit_interval_isValid;

    QString m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    qint32 m_settings_calls_balance;
    bool m_settings_calls_balance_isSet;
    bool m_settings_calls_balance_isValid;

    qint32 m_settings_calls_limit;
    bool m_settings_calls_limit_isSet;
    bool m_settings_calls_limit_isValid;

    qint32 m_settings_calls_limit_interval;
    bool m_settings_calls_limit_interval_isSet;
    bool m_settings_calls_limit_interval_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionBillingSection)

#endif // OAISubscriptionBillingSection_H
