/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistic::OAIStatistic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistic::OAIStatistic() {
    this->initializeModel();
}

OAIStatistic::~OAIStatistic() {}

void OAIStatistic::initializeModel() {

    m_calls_data_isSet = false;
    m_calls_data_isValid = false;

    m_calls_polling_isSet = false;
    m_calls_polling_isValid = false;

    m_calls_settings_isSet = false;
    m_calls_settings_isValid = false;

    m_colls_documents_isSet = false;
    m_colls_documents_isValid = false;

    m_colls_failed_isSet = false;
    m_colls_failed_isValid = false;

    m_colls_processed_isSet = false;
    m_colls_processed_isValid = false;

    m_colls_responded_isSet = false;
    m_colls_responded_isValid = false;

    m_configurations_isSet = false;
    m_configurations_isValid = false;

    m_docs_failed_isSet = false;
    m_docs_failed_isValid = false;

    m_docs_processed_isSet = false;
    m_docs_processed_isValid = false;

    m_docs_responded_isSet = false;
    m_docs_responded_isValid = false;

    m_latest_used_app_isSet = false;
    m_latest_used_app_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overall_batches_isSet = false;
    m_overall_batches_isValid = false;

    m_overall_calls_isSet = false;
    m_overall_calls_isValid = false;

    m_overall_docs_isSet = false;
    m_overall_docs_isValid = false;

    m_overall_exceeded_isSet = false;
    m_overall_exceeded_isValid = false;

    m_overall_texts_isSet = false;
    m_overall_texts_isValid = false;

    m_overcall_colls_isSet = false;
    m_overcall_colls_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_used_apps_isSet = false;
    m_used_apps_isValid = false;
}

void OAIStatistic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistic::fromJsonObject(QJsonObject json) {

    m_calls_data_isValid = ::OpenAPI::fromJsonValue(m_calls_data, json[QString("calls_data")]);
    m_calls_data_isSet = !json[QString("calls_data")].isNull() && m_calls_data_isValid;

    m_calls_polling_isValid = ::OpenAPI::fromJsonValue(m_calls_polling, json[QString("calls_polling")]);
    m_calls_polling_isSet = !json[QString("calls_polling")].isNull() && m_calls_polling_isValid;

    m_calls_settings_isValid = ::OpenAPI::fromJsonValue(m_calls_settings, json[QString("calls_settings")]);
    m_calls_settings_isSet = !json[QString("calls_settings")].isNull() && m_calls_settings_isValid;

    m_colls_documents_isValid = ::OpenAPI::fromJsonValue(m_colls_documents, json[QString("colls_documents")]);
    m_colls_documents_isSet = !json[QString("colls_documents")].isNull() && m_colls_documents_isValid;

    m_colls_failed_isValid = ::OpenAPI::fromJsonValue(m_colls_failed, json[QString("colls_failed")]);
    m_colls_failed_isSet = !json[QString("colls_failed")].isNull() && m_colls_failed_isValid;

    m_colls_processed_isValid = ::OpenAPI::fromJsonValue(m_colls_processed, json[QString("colls_processed")]);
    m_colls_processed_isSet = !json[QString("colls_processed")].isNull() && m_colls_processed_isValid;

    m_colls_responded_isValid = ::OpenAPI::fromJsonValue(m_colls_responded, json[QString("colls_responded")]);
    m_colls_responded_isSet = !json[QString("colls_responded")].isNull() && m_colls_responded_isValid;

    m_configurations_isValid = ::OpenAPI::fromJsonValue(m_configurations, json[QString("configurations")]);
    m_configurations_isSet = !json[QString("configurations")].isNull() && m_configurations_isValid;

    m_docs_failed_isValid = ::OpenAPI::fromJsonValue(m_docs_failed, json[QString("docs_failed")]);
    m_docs_failed_isSet = !json[QString("docs_failed")].isNull() && m_docs_failed_isValid;

    m_docs_processed_isValid = ::OpenAPI::fromJsonValue(m_docs_processed, json[QString("docs_processed")]);
    m_docs_processed_isSet = !json[QString("docs_processed")].isNull() && m_docs_processed_isValid;

    m_docs_responded_isValid = ::OpenAPI::fromJsonValue(m_docs_responded, json[QString("docs_responded")]);
    m_docs_responded_isSet = !json[QString("docs_responded")].isNull() && m_docs_responded_isValid;

    m_latest_used_app_isValid = ::OpenAPI::fromJsonValue(m_latest_used_app, json[QString("latest_used_app")]);
    m_latest_used_app_isSet = !json[QString("latest_used_app")].isNull() && m_latest_used_app_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overall_batches_isValid = ::OpenAPI::fromJsonValue(m_overall_batches, json[QString("overall_batches")]);
    m_overall_batches_isSet = !json[QString("overall_batches")].isNull() && m_overall_batches_isValid;

    m_overall_calls_isValid = ::OpenAPI::fromJsonValue(m_overall_calls, json[QString("overall_calls")]);
    m_overall_calls_isSet = !json[QString("overall_calls")].isNull() && m_overall_calls_isValid;

    m_overall_docs_isValid = ::OpenAPI::fromJsonValue(m_overall_docs, json[QString("overall_docs")]);
    m_overall_docs_isSet = !json[QString("overall_docs")].isNull() && m_overall_docs_isValid;

    m_overall_exceeded_isValid = ::OpenAPI::fromJsonValue(m_overall_exceeded, json[QString("overall_exceeded")]);
    m_overall_exceeded_isSet = !json[QString("overall_exceeded")].isNull() && m_overall_exceeded_isValid;

    m_overall_texts_isValid = ::OpenAPI::fromJsonValue(m_overall_texts, json[QString("overall_texts")]);
    m_overall_texts_isSet = !json[QString("overall_texts")].isNull() && m_overall_texts_isValid;

    m_overcall_colls_isValid = ::OpenAPI::fromJsonValue(m_overcall_colls, json[QString("overcall_colls")]);
    m_overcall_colls_isSet = !json[QString("overcall_colls")].isNull() && m_overcall_colls_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_used_apps_isValid = ::OpenAPI::fromJsonValue(m_used_apps, json[QString("used_apps")]);
    m_used_apps_isSet = !json[QString("used_apps")].isNull() && m_used_apps_isValid;
}

QString OAIStatistic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistic::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_data_isSet) {
        obj.insert(QString("calls_data"), ::OpenAPI::toJsonValue(m_calls_data));
    }
    if (m_calls_polling_isSet) {
        obj.insert(QString("calls_polling"), ::OpenAPI::toJsonValue(m_calls_polling));
    }
    if (m_calls_settings_isSet) {
        obj.insert(QString("calls_settings"), ::OpenAPI::toJsonValue(m_calls_settings));
    }
    if (m_colls_documents_isSet) {
        obj.insert(QString("colls_documents"), ::OpenAPI::toJsonValue(m_colls_documents));
    }
    if (m_colls_failed_isSet) {
        obj.insert(QString("colls_failed"), ::OpenAPI::toJsonValue(m_colls_failed));
    }
    if (m_colls_processed_isSet) {
        obj.insert(QString("colls_processed"), ::OpenAPI::toJsonValue(m_colls_processed));
    }
    if (m_colls_responded_isSet) {
        obj.insert(QString("colls_responded"), ::OpenAPI::toJsonValue(m_colls_responded));
    }
    if (m_configurations.size() > 0) {
        obj.insert(QString("configurations"), ::OpenAPI::toJsonValue(m_configurations));
    }
    if (m_docs_failed_isSet) {
        obj.insert(QString("docs_failed"), ::OpenAPI::toJsonValue(m_docs_failed));
    }
    if (m_docs_processed_isSet) {
        obj.insert(QString("docs_processed"), ::OpenAPI::toJsonValue(m_docs_processed));
    }
    if (m_docs_responded_isSet) {
        obj.insert(QString("docs_responded"), ::OpenAPI::toJsonValue(m_docs_responded));
    }
    if (m_latest_used_app_isSet) {
        obj.insert(QString("latest_used_app"), ::OpenAPI::toJsonValue(m_latest_used_app));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overall_batches_isSet) {
        obj.insert(QString("overall_batches"), ::OpenAPI::toJsonValue(m_overall_batches));
    }
    if (m_overall_calls_isSet) {
        obj.insert(QString("overall_calls"), ::OpenAPI::toJsonValue(m_overall_calls));
    }
    if (m_overall_docs_isSet) {
        obj.insert(QString("overall_docs"), ::OpenAPI::toJsonValue(m_overall_docs));
    }
    if (m_overall_exceeded_isSet) {
        obj.insert(QString("overall_exceeded"), ::OpenAPI::toJsonValue(m_overall_exceeded));
    }
    if (m_overall_texts_isSet) {
        obj.insert(QString("overall_texts"), ::OpenAPI::toJsonValue(m_overall_texts));
    }
    if (m_overcall_colls_isSet) {
        obj.insert(QString("overcall_colls"), ::OpenAPI::toJsonValue(m_overcall_colls));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_used_apps_isSet) {
        obj.insert(QString("used_apps"), ::OpenAPI::toJsonValue(m_used_apps));
    }
    return obj;
}

qint32 OAIStatistic::getCallsData() const {
    return m_calls_data;
}
void OAIStatistic::setCallsData(const qint32 &calls_data) {
    m_calls_data = calls_data;
    m_calls_data_isSet = true;
}

bool OAIStatistic::is_calls_data_Set() const{
    return m_calls_data_isSet;
}

bool OAIStatistic::is_calls_data_Valid() const{
    return m_calls_data_isValid;
}

qint32 OAIStatistic::getCallsPolling() const {
    return m_calls_polling;
}
void OAIStatistic::setCallsPolling(const qint32 &calls_polling) {
    m_calls_polling = calls_polling;
    m_calls_polling_isSet = true;
}

bool OAIStatistic::is_calls_polling_Set() const{
    return m_calls_polling_isSet;
}

bool OAIStatistic::is_calls_polling_Valid() const{
    return m_calls_polling_isValid;
}

qint32 OAIStatistic::getCallsSettings() const {
    return m_calls_settings;
}
void OAIStatistic::setCallsSettings(const qint32 &calls_settings) {
    m_calls_settings = calls_settings;
    m_calls_settings_isSet = true;
}

bool OAIStatistic::is_calls_settings_Set() const{
    return m_calls_settings_isSet;
}

bool OAIStatistic::is_calls_settings_Valid() const{
    return m_calls_settings_isValid;
}

qint32 OAIStatistic::getCollsDocuments() const {
    return m_colls_documents;
}
void OAIStatistic::setCollsDocuments(const qint32 &colls_documents) {
    m_colls_documents = colls_documents;
    m_colls_documents_isSet = true;
}

bool OAIStatistic::is_colls_documents_Set() const{
    return m_colls_documents_isSet;
}

bool OAIStatistic::is_colls_documents_Valid() const{
    return m_colls_documents_isValid;
}

qint32 OAIStatistic::getCollsFailed() const {
    return m_colls_failed;
}
void OAIStatistic::setCollsFailed(const qint32 &colls_failed) {
    m_colls_failed = colls_failed;
    m_colls_failed_isSet = true;
}

bool OAIStatistic::is_colls_failed_Set() const{
    return m_colls_failed_isSet;
}

bool OAIStatistic::is_colls_failed_Valid() const{
    return m_colls_failed_isValid;
}

qint32 OAIStatistic::getCollsProcessed() const {
    return m_colls_processed;
}
void OAIStatistic::setCollsProcessed(const qint32 &colls_processed) {
    m_colls_processed = colls_processed;
    m_colls_processed_isSet = true;
}

bool OAIStatistic::is_colls_processed_Set() const{
    return m_colls_processed_isSet;
}

bool OAIStatistic::is_colls_processed_Valid() const{
    return m_colls_processed_isValid;
}

qint32 OAIStatistic::getCollsResponded() const {
    return m_colls_responded;
}
void OAIStatistic::setCollsResponded(const qint32 &colls_responded) {
    m_colls_responded = colls_responded;
    m_colls_responded_isSet = true;
}

bool OAIStatistic::is_colls_responded_Set() const{
    return m_colls_responded_isSet;
}

bool OAIStatistic::is_colls_responded_Valid() const{
    return m_colls_responded_isValid;
}

QList<OAIStatisticConfiguration> OAIStatistic::getConfigurations() const {
    return m_configurations;
}
void OAIStatistic::setConfigurations(const QList<OAIStatisticConfiguration> &configurations) {
    m_configurations = configurations;
    m_configurations_isSet = true;
}

bool OAIStatistic::is_configurations_Set() const{
    return m_configurations_isSet;
}

bool OAIStatistic::is_configurations_Valid() const{
    return m_configurations_isValid;
}

qint32 OAIStatistic::getDocsFailed() const {
    return m_docs_failed;
}
void OAIStatistic::setDocsFailed(const qint32 &docs_failed) {
    m_docs_failed = docs_failed;
    m_docs_failed_isSet = true;
}

bool OAIStatistic::is_docs_failed_Set() const{
    return m_docs_failed_isSet;
}

bool OAIStatistic::is_docs_failed_Valid() const{
    return m_docs_failed_isValid;
}

qint32 OAIStatistic::getDocsProcessed() const {
    return m_docs_processed;
}
void OAIStatistic::setDocsProcessed(const qint32 &docs_processed) {
    m_docs_processed = docs_processed;
    m_docs_processed_isSet = true;
}

bool OAIStatistic::is_docs_processed_Set() const{
    return m_docs_processed_isSet;
}

bool OAIStatistic::is_docs_processed_Valid() const{
    return m_docs_processed_isValid;
}

qint32 OAIStatistic::getDocsResponded() const {
    return m_docs_responded;
}
void OAIStatistic::setDocsResponded(const qint32 &docs_responded) {
    m_docs_responded = docs_responded;
    m_docs_responded_isSet = true;
}

bool OAIStatistic::is_docs_responded_Set() const{
    return m_docs_responded_isSet;
}

bool OAIStatistic::is_docs_responded_Valid() const{
    return m_docs_responded_isValid;
}

QString OAIStatistic::getLatestUsedApp() const {
    return m_latest_used_app;
}
void OAIStatistic::setLatestUsedApp(const QString &latest_used_app) {
    m_latest_used_app = latest_used_app;
    m_latest_used_app_isSet = true;
}

bool OAIStatistic::is_latest_used_app_Set() const{
    return m_latest_used_app_isSet;
}

bool OAIStatistic::is_latest_used_app_Valid() const{
    return m_latest_used_app_isValid;
}

QString OAIStatistic::getName() const {
    return m_name;
}
void OAIStatistic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStatistic::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStatistic::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStatistic::getOverallBatches() const {
    return m_overall_batches;
}
void OAIStatistic::setOverallBatches(const qint32 &overall_batches) {
    m_overall_batches = overall_batches;
    m_overall_batches_isSet = true;
}

bool OAIStatistic::is_overall_batches_Set() const{
    return m_overall_batches_isSet;
}

bool OAIStatistic::is_overall_batches_Valid() const{
    return m_overall_batches_isValid;
}

qint32 OAIStatistic::getOverallCalls() const {
    return m_overall_calls;
}
void OAIStatistic::setOverallCalls(const qint32 &overall_calls) {
    m_overall_calls = overall_calls;
    m_overall_calls_isSet = true;
}

bool OAIStatistic::is_overall_calls_Set() const{
    return m_overall_calls_isSet;
}

bool OAIStatistic::is_overall_calls_Valid() const{
    return m_overall_calls_isValid;
}

qint32 OAIStatistic::getOverallDocs() const {
    return m_overall_docs;
}
void OAIStatistic::setOverallDocs(const qint32 &overall_docs) {
    m_overall_docs = overall_docs;
    m_overall_docs_isSet = true;
}

bool OAIStatistic::is_overall_docs_Set() const{
    return m_overall_docs_isSet;
}

bool OAIStatistic::is_overall_docs_Valid() const{
    return m_overall_docs_isValid;
}

qint32 OAIStatistic::getOverallExceeded() const {
    return m_overall_exceeded;
}
void OAIStatistic::setOverallExceeded(const qint32 &overall_exceeded) {
    m_overall_exceeded = overall_exceeded;
    m_overall_exceeded_isSet = true;
}

bool OAIStatistic::is_overall_exceeded_Set() const{
    return m_overall_exceeded_isSet;
}

bool OAIStatistic::is_overall_exceeded_Valid() const{
    return m_overall_exceeded_isValid;
}

qint32 OAIStatistic::getOverallTexts() const {
    return m_overall_texts;
}
void OAIStatistic::setOverallTexts(const qint32 &overall_texts) {
    m_overall_texts = overall_texts;
    m_overall_texts_isSet = true;
}

bool OAIStatistic::is_overall_texts_Set() const{
    return m_overall_texts_isSet;
}

bool OAIStatistic::is_overall_texts_Valid() const{
    return m_overall_texts_isValid;
}

qint32 OAIStatistic::getOvercallColls() const {
    return m_overcall_colls;
}
void OAIStatistic::setOvercallColls(const qint32 &overcall_colls) {
    m_overcall_colls = overcall_colls;
    m_overcall_colls_isSet = true;
}

bool OAIStatistic::is_overcall_colls_Set() const{
    return m_overcall_colls_isSet;
}

bool OAIStatistic::is_overcall_colls_Valid() const{
    return m_overcall_colls_isValid;
}

QString OAIStatistic::getStatus() const {
    return m_status;
}
void OAIStatistic::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStatistic::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStatistic::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStatistic::getUsedApps() const {
    return m_used_apps;
}
void OAIStatistic::setUsedApps(const QString &used_apps) {
    m_used_apps = used_apps;
    m_used_apps_isSet = true;
}

bool OAIStatistic::is_used_apps_Set() const{
    return m_used_apps_isSet;
}

bool OAIStatistic::is_used_apps_Valid() const{
    return m_used_apps_isValid;
}

bool OAIStatistic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_polling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calls_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colls_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colls_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colls_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colls_responded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_docs_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docs_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docs_responded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_used_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_batches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_docs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_texts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overcall_colls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_apps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calls_data_isValid && m_calls_polling_isValid && m_calls_settings_isValid && m_colls_documents_isValid && m_colls_failed_isValid && m_colls_processed_isValid && m_colls_responded_isValid && m_configurations_isValid && m_docs_failed_isValid && m_docs_processed_isValid && m_docs_responded_isValid && m_latest_used_app_isValid && m_name_isValid && m_overall_batches_isValid && m_overall_calls_isValid && m_overall_docs_isValid && m_overall_exceeded_isValid && m_overall_texts_isValid && m_overcall_colls_isValid && m_status_isValid && m_used_apps_isValid && true;
}

} // namespace OpenAPI
