/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionBasicSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionBasicSection::OAISubscriptionBasicSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionBasicSection::OAISubscriptionBasicSection() {
    this->initializeModel();
}

OAISubscriptionBasicSection::~OAISubscriptionBasicSection() {}

void OAISubscriptionBasicSection::initializeModel() {

    m_auto_response_limit_isSet = false;
    m_auto_response_limit_isValid = false;

    m_batch_limit_isSet = false;
    m_batch_limit_isValid = false;

    m_blacklist_limit_isSet = false;
    m_blacklist_limit_isValid = false;

    m_callback_batch_limit_isSet = false;
    m_callback_batch_limit_isValid = false;

    m_categories_limit_isSet = false;
    m_categories_limit_isValid = false;

    m_category_samples_limit_isSet = false;
    m_category_samples_limit_isValid = false;

    m_characters_limit_isSet = false;
    m_characters_limit_isValid = false;

    m_collection_limit_isSet = false;
    m_collection_limit_isValid = false;

    m_configurations_limit_isSet = false;
    m_configurations_limit_isValid = false;

    m_entities_limit_isSet = false;
    m_entities_limit_isValid = false;

    m_output_data_limit_isSet = false;
    m_output_data_limit_isValid = false;

    m_processed_batch_limit_isSet = false;
    m_processed_batch_limit_isValid = false;

    m_queries_limit_isSet = false;
    m_queries_limit_isValid = false;

    m_return_source_text_isSet = false;
    m_return_source_text_isValid = false;

    m_sentiment_limit_isSet = false;
    m_sentiment_limit_isValid = false;
}

void OAISubscriptionBasicSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionBasicSection::fromJsonObject(QJsonObject json) {

    m_auto_response_limit_isValid = ::OpenAPI::fromJsonValue(m_auto_response_limit, json[QString("auto_response_limit")]);
    m_auto_response_limit_isSet = !json[QString("auto_response_limit")].isNull() && m_auto_response_limit_isValid;

    m_batch_limit_isValid = ::OpenAPI::fromJsonValue(m_batch_limit, json[QString("batch_limit")]);
    m_batch_limit_isSet = !json[QString("batch_limit")].isNull() && m_batch_limit_isValid;

    m_blacklist_limit_isValid = ::OpenAPI::fromJsonValue(m_blacklist_limit, json[QString("blacklist_limit")]);
    m_blacklist_limit_isSet = !json[QString("blacklist_limit")].isNull() && m_blacklist_limit_isValid;

    m_callback_batch_limit_isValid = ::OpenAPI::fromJsonValue(m_callback_batch_limit, json[QString("callback_batch_limit")]);
    m_callback_batch_limit_isSet = !json[QString("callback_batch_limit")].isNull() && m_callback_batch_limit_isValid;

    m_categories_limit_isValid = ::OpenAPI::fromJsonValue(m_categories_limit, json[QString("categories_limit")]);
    m_categories_limit_isSet = !json[QString("categories_limit")].isNull() && m_categories_limit_isValid;

    m_category_samples_limit_isValid = ::OpenAPI::fromJsonValue(m_category_samples_limit, json[QString("category_samples_limit")]);
    m_category_samples_limit_isSet = !json[QString("category_samples_limit")].isNull() && m_category_samples_limit_isValid;

    m_characters_limit_isValid = ::OpenAPI::fromJsonValue(m_characters_limit, json[QString("characters_limit")]);
    m_characters_limit_isSet = !json[QString("characters_limit")].isNull() && m_characters_limit_isValid;

    m_collection_limit_isValid = ::OpenAPI::fromJsonValue(m_collection_limit, json[QString("collection_limit")]);
    m_collection_limit_isSet = !json[QString("collection_limit")].isNull() && m_collection_limit_isValid;

    m_configurations_limit_isValid = ::OpenAPI::fromJsonValue(m_configurations_limit, json[QString("configurations_limit")]);
    m_configurations_limit_isSet = !json[QString("configurations_limit")].isNull() && m_configurations_limit_isValid;

    m_entities_limit_isValid = ::OpenAPI::fromJsonValue(m_entities_limit, json[QString("entities_limit")]);
    m_entities_limit_isSet = !json[QString("entities_limit")].isNull() && m_entities_limit_isValid;

    m_output_data_limit_isValid = ::OpenAPI::fromJsonValue(m_output_data_limit, json[QString("output_data_limit")]);
    m_output_data_limit_isSet = !json[QString("output_data_limit")].isNull() && m_output_data_limit_isValid;

    m_processed_batch_limit_isValid = ::OpenAPI::fromJsonValue(m_processed_batch_limit, json[QString("processed_batch_limit")]);
    m_processed_batch_limit_isSet = !json[QString("processed_batch_limit")].isNull() && m_processed_batch_limit_isValid;

    m_queries_limit_isValid = ::OpenAPI::fromJsonValue(m_queries_limit, json[QString("queries_limit")]);
    m_queries_limit_isSet = !json[QString("queries_limit")].isNull() && m_queries_limit_isValid;

    m_return_source_text_isValid = ::OpenAPI::fromJsonValue(m_return_source_text, json[QString("return_source_text")]);
    m_return_source_text_isSet = !json[QString("return_source_text")].isNull() && m_return_source_text_isValid;

    m_sentiment_limit_isValid = ::OpenAPI::fromJsonValue(m_sentiment_limit, json[QString("sentiment_limit")]);
    m_sentiment_limit_isSet = !json[QString("sentiment_limit")].isNull() && m_sentiment_limit_isValid;
}

QString OAISubscriptionBasicSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionBasicSection::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_response_limit_isSet) {
        obj.insert(QString("auto_response_limit"), ::OpenAPI::toJsonValue(m_auto_response_limit));
    }
    if (m_batch_limit_isSet) {
        obj.insert(QString("batch_limit"), ::OpenAPI::toJsonValue(m_batch_limit));
    }
    if (m_blacklist_limit_isSet) {
        obj.insert(QString("blacklist_limit"), ::OpenAPI::toJsonValue(m_blacklist_limit));
    }
    if (m_callback_batch_limit_isSet) {
        obj.insert(QString("callback_batch_limit"), ::OpenAPI::toJsonValue(m_callback_batch_limit));
    }
    if (m_categories_limit_isSet) {
        obj.insert(QString("categories_limit"), ::OpenAPI::toJsonValue(m_categories_limit));
    }
    if (m_category_samples_limit_isSet) {
        obj.insert(QString("category_samples_limit"), ::OpenAPI::toJsonValue(m_category_samples_limit));
    }
    if (m_characters_limit_isSet) {
        obj.insert(QString("characters_limit"), ::OpenAPI::toJsonValue(m_characters_limit));
    }
    if (m_collection_limit_isSet) {
        obj.insert(QString("collection_limit"), ::OpenAPI::toJsonValue(m_collection_limit));
    }
    if (m_configurations_limit_isSet) {
        obj.insert(QString("configurations_limit"), ::OpenAPI::toJsonValue(m_configurations_limit));
    }
    if (m_entities_limit_isSet) {
        obj.insert(QString("entities_limit"), ::OpenAPI::toJsonValue(m_entities_limit));
    }
    if (m_output_data_limit_isSet) {
        obj.insert(QString("output_data_limit"), ::OpenAPI::toJsonValue(m_output_data_limit));
    }
    if (m_processed_batch_limit_isSet) {
        obj.insert(QString("processed_batch_limit"), ::OpenAPI::toJsonValue(m_processed_batch_limit));
    }
    if (m_queries_limit_isSet) {
        obj.insert(QString("queries_limit"), ::OpenAPI::toJsonValue(m_queries_limit));
    }
    if (m_return_source_text_isSet) {
        obj.insert(QString("return_source_text"), ::OpenAPI::toJsonValue(m_return_source_text));
    }
    if (m_sentiment_limit_isSet) {
        obj.insert(QString("sentiment_limit"), ::OpenAPI::toJsonValue(m_sentiment_limit));
    }
    return obj;
}

qint32 OAISubscriptionBasicSection::getAutoResponseLimit() const {
    return m_auto_response_limit;
}
void OAISubscriptionBasicSection::setAutoResponseLimit(const qint32 &auto_response_limit) {
    m_auto_response_limit = auto_response_limit;
    m_auto_response_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_auto_response_limit_Set() const{
    return m_auto_response_limit_isSet;
}

bool OAISubscriptionBasicSection::is_auto_response_limit_Valid() const{
    return m_auto_response_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getBatchLimit() const {
    return m_batch_limit;
}
void OAISubscriptionBasicSection::setBatchLimit(const qint32 &batch_limit) {
    m_batch_limit = batch_limit;
    m_batch_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_batch_limit_Set() const{
    return m_batch_limit_isSet;
}

bool OAISubscriptionBasicSection::is_batch_limit_Valid() const{
    return m_batch_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getBlacklistLimit() const {
    return m_blacklist_limit;
}
void OAISubscriptionBasicSection::setBlacklistLimit(const qint32 &blacklist_limit) {
    m_blacklist_limit = blacklist_limit;
    m_blacklist_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_blacklist_limit_Set() const{
    return m_blacklist_limit_isSet;
}

bool OAISubscriptionBasicSection::is_blacklist_limit_Valid() const{
    return m_blacklist_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getCallbackBatchLimit() const {
    return m_callback_batch_limit;
}
void OAISubscriptionBasicSection::setCallbackBatchLimit(const qint32 &callback_batch_limit) {
    m_callback_batch_limit = callback_batch_limit;
    m_callback_batch_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_callback_batch_limit_Set() const{
    return m_callback_batch_limit_isSet;
}

bool OAISubscriptionBasicSection::is_callback_batch_limit_Valid() const{
    return m_callback_batch_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getCategoriesLimit() const {
    return m_categories_limit;
}
void OAISubscriptionBasicSection::setCategoriesLimit(const qint32 &categories_limit) {
    m_categories_limit = categories_limit;
    m_categories_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_categories_limit_Set() const{
    return m_categories_limit_isSet;
}

bool OAISubscriptionBasicSection::is_categories_limit_Valid() const{
    return m_categories_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getCategorySamplesLimit() const {
    return m_category_samples_limit;
}
void OAISubscriptionBasicSection::setCategorySamplesLimit(const qint32 &category_samples_limit) {
    m_category_samples_limit = category_samples_limit;
    m_category_samples_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_category_samples_limit_Set() const{
    return m_category_samples_limit_isSet;
}

bool OAISubscriptionBasicSection::is_category_samples_limit_Valid() const{
    return m_category_samples_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getCharactersLimit() const {
    return m_characters_limit;
}
void OAISubscriptionBasicSection::setCharactersLimit(const qint32 &characters_limit) {
    m_characters_limit = characters_limit;
    m_characters_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_characters_limit_Set() const{
    return m_characters_limit_isSet;
}

bool OAISubscriptionBasicSection::is_characters_limit_Valid() const{
    return m_characters_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getCollectionLimit() const {
    return m_collection_limit;
}
void OAISubscriptionBasicSection::setCollectionLimit(const qint32 &collection_limit) {
    m_collection_limit = collection_limit;
    m_collection_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_collection_limit_Set() const{
    return m_collection_limit_isSet;
}

bool OAISubscriptionBasicSection::is_collection_limit_Valid() const{
    return m_collection_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getConfigurationsLimit() const {
    return m_configurations_limit;
}
void OAISubscriptionBasicSection::setConfigurationsLimit(const qint32 &configurations_limit) {
    m_configurations_limit = configurations_limit;
    m_configurations_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_configurations_limit_Set() const{
    return m_configurations_limit_isSet;
}

bool OAISubscriptionBasicSection::is_configurations_limit_Valid() const{
    return m_configurations_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getEntitiesLimit() const {
    return m_entities_limit;
}
void OAISubscriptionBasicSection::setEntitiesLimit(const qint32 &entities_limit) {
    m_entities_limit = entities_limit;
    m_entities_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_entities_limit_Set() const{
    return m_entities_limit_isSet;
}

bool OAISubscriptionBasicSection::is_entities_limit_Valid() const{
    return m_entities_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getOutputDataLimit() const {
    return m_output_data_limit;
}
void OAISubscriptionBasicSection::setOutputDataLimit(const qint32 &output_data_limit) {
    m_output_data_limit = output_data_limit;
    m_output_data_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_output_data_limit_Set() const{
    return m_output_data_limit_isSet;
}

bool OAISubscriptionBasicSection::is_output_data_limit_Valid() const{
    return m_output_data_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getProcessedBatchLimit() const {
    return m_processed_batch_limit;
}
void OAISubscriptionBasicSection::setProcessedBatchLimit(const qint32 &processed_batch_limit) {
    m_processed_batch_limit = processed_batch_limit;
    m_processed_batch_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_processed_batch_limit_Set() const{
    return m_processed_batch_limit_isSet;
}

bool OAISubscriptionBasicSection::is_processed_batch_limit_Valid() const{
    return m_processed_batch_limit_isValid;
}

qint32 OAISubscriptionBasicSection::getQueriesLimit() const {
    return m_queries_limit;
}
void OAISubscriptionBasicSection::setQueriesLimit(const qint32 &queries_limit) {
    m_queries_limit = queries_limit;
    m_queries_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_queries_limit_Set() const{
    return m_queries_limit_isSet;
}

bool OAISubscriptionBasicSection::is_queries_limit_Valid() const{
    return m_queries_limit_isValid;
}

bool OAISubscriptionBasicSection::isReturnSourceText() const {
    return m_return_source_text;
}
void OAISubscriptionBasicSection::setReturnSourceText(const bool &return_source_text) {
    m_return_source_text = return_source_text;
    m_return_source_text_isSet = true;
}

bool OAISubscriptionBasicSection::is_return_source_text_Set() const{
    return m_return_source_text_isSet;
}

bool OAISubscriptionBasicSection::is_return_source_text_Valid() const{
    return m_return_source_text_isValid;
}

qint32 OAISubscriptionBasicSection::getSentimentLimit() const {
    return m_sentiment_limit;
}
void OAISubscriptionBasicSection::setSentimentLimit(const qint32 &sentiment_limit) {
    m_sentiment_limit = sentiment_limit;
    m_sentiment_limit_isSet = true;
}

bool OAISubscriptionBasicSection::is_sentiment_limit_Set() const{
    return m_sentiment_limit_isSet;
}

bool OAISubscriptionBasicSection::is_sentiment_limit_Valid() const{
    return m_sentiment_limit_isValid;
}

bool OAISubscriptionBasicSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_response_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklist_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_batch_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_samples_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_characters_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurations_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_batch_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_source_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionBasicSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_response_limit_isValid && m_batch_limit_isValid && m_blacklist_limit_isValid && m_callback_batch_limit_isValid && m_categories_limit_isValid && m_category_samples_limit_isValid && m_characters_limit_isValid && m_collection_limit_isValid && m_configurations_limit_isValid && m_entities_limit_isValid && m_output_data_limit_isValid && m_processed_batch_limit_isValid && m_queries_limit_isValid && m_return_source_text_isValid && m_sentiment_limit_isValid && true;
}

} // namespace OpenAPI
