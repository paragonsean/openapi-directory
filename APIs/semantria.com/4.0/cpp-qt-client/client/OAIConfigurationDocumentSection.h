/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigurationDocumentSection.h
 *
 * 
 */

#ifndef OAIConfigurationDocumentSection_H
#define OAIConfigurationDocumentSection_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConfigurationDocumentSection : public OAIObject {
public:
    OAIConfigurationDocumentSection();
    OAIConfigurationDocumentSection(QString json);
    ~OAIConfigurationDocumentSection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAutoCategoriesLimit() const;
    void setAutoCategoriesLimit(const qint32 &auto_categories_limit);
    bool is_auto_categories_limit_Set() const;
    bool is_auto_categories_limit_Valid() const;

    qint32 getConceptTopicsLimit() const;
    void setConceptTopicsLimit(const qint32 &concept_topics_limit);
    bool is_concept_topics_limit_Set() const;
    bool is_concept_topics_limit_Valid() const;

    bool isDetectLanguage() const;
    void setDetectLanguage(const bool &detect_language);
    bool is_detect_language_Set() const;
    bool is_detect_language_Valid() const;

    qint32 getEntityThemesLimit() const;
    void setEntityThemesLimit(const qint32 &entity_themes_limit);
    bool is_entity_themes_limit_Set() const;
    bool is_entity_themes_limit_Valid() const;

    bool isIntentions() const;
    void setIntentions(const bool &intentions);
    bool is_intentions_Set() const;
    bool is_intentions_Valid() const;

    bool isModelSentiment() const;
    void setModelSentiment(const bool &model_sentiment);
    bool is_model_sentiment_Set() const;
    bool is_model_sentiment_Valid() const;

    qint32 getNamedEntitiesLimit() const;
    void setNamedEntitiesLimit(const qint32 &named_entities_limit);
    bool is_named_entities_limit_Set() const;
    bool is_named_entities_limit_Valid() const;

    qint32 getNamedMentionsLimit() const;
    void setNamedMentionsLimit(const qint32 &named_mentions_limit);
    bool is_named_mentions_limit_Set() const;
    bool is_named_mentions_limit_Valid() const;

    qint32 getNamedOpinionsLimit() const;
    void setNamedOpinionsLimit(const qint32 &named_opinions_limit);
    bool is_named_opinions_limit_Set() const;
    bool is_named_opinions_limit_Valid() const;

    qint32 getNamedRelationsLimit() const;
    void setNamedRelationsLimit(const qint32 &named_relations_limit);
    bool is_named_relations_limit_Set() const;
    bool is_named_relations_limit_Valid() const;

    qint32 getPhrasesLimit() const;
    void setPhrasesLimit(const qint32 &phrases_limit);
    bool is_phrases_limit_Set() const;
    bool is_phrases_limit_Valid() const;

    QString getPosTypes() const;
    void setPosTypes(const QString &pos_types);
    bool is_pos_types_Set() const;
    bool is_pos_types_Valid() const;

    qint32 getPossiblePhrasesLimit() const;
    void setPossiblePhrasesLimit(const qint32 &possible_phrases_limit);
    bool is_possible_phrases_limit_Set() const;
    bool is_possible_phrases_limit_Valid() const;

    qint32 getQueryTopicsLimit() const;
    void setQueryTopicsLimit(const qint32 &query_topics_limit);
    bool is_query_topics_limit_Set() const;
    bool is_query_topics_limit_Valid() const;

    qint32 getSummaryLimit() const;
    void setSummaryLimit(const qint32 &summary_limit);
    bool is_summary_limit_Set() const;
    bool is_summary_limit_Valid() const;

    qint32 getThemeMentionsLimit() const;
    void setThemeMentionsLimit(const qint32 &theme_mentions_limit);
    bool is_theme_mentions_limit_Set() const;
    bool is_theme_mentions_limit_Valid() const;

    qint32 getThemesLimit() const;
    void setThemesLimit(const qint32 &themes_limit);
    bool is_themes_limit_Set() const;
    bool is_themes_limit_Valid() const;

    qint32 getUserEntitiesLimit() const;
    void setUserEntitiesLimit(const qint32 &user_entities_limit);
    bool is_user_entities_limit_Set() const;
    bool is_user_entities_limit_Valid() const;

    qint32 getUserMentionsLimit() const;
    void setUserMentionsLimit(const qint32 &user_mentions_limit);
    bool is_user_mentions_limit_Set() const;
    bool is_user_mentions_limit_Valid() const;

    qint32 getUserOpinionsLimit() const;
    void setUserOpinionsLimit(const qint32 &user_opinions_limit);
    bool is_user_opinions_limit_Set() const;
    bool is_user_opinions_limit_Valid() const;

    qint32 getUserRelationsLimit() const;
    void setUserRelationsLimit(const qint32 &user_relations_limit);
    bool is_user_relations_limit_Set() const;
    bool is_user_relations_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_auto_categories_limit;
    bool m_auto_categories_limit_isSet;
    bool m_auto_categories_limit_isValid;

    qint32 m_concept_topics_limit;
    bool m_concept_topics_limit_isSet;
    bool m_concept_topics_limit_isValid;

    bool m_detect_language;
    bool m_detect_language_isSet;
    bool m_detect_language_isValid;

    qint32 m_entity_themes_limit;
    bool m_entity_themes_limit_isSet;
    bool m_entity_themes_limit_isValid;

    bool m_intentions;
    bool m_intentions_isSet;
    bool m_intentions_isValid;

    bool m_model_sentiment;
    bool m_model_sentiment_isSet;
    bool m_model_sentiment_isValid;

    qint32 m_named_entities_limit;
    bool m_named_entities_limit_isSet;
    bool m_named_entities_limit_isValid;

    qint32 m_named_mentions_limit;
    bool m_named_mentions_limit_isSet;
    bool m_named_mentions_limit_isValid;

    qint32 m_named_opinions_limit;
    bool m_named_opinions_limit_isSet;
    bool m_named_opinions_limit_isValid;

    qint32 m_named_relations_limit;
    bool m_named_relations_limit_isSet;
    bool m_named_relations_limit_isValid;

    qint32 m_phrases_limit;
    bool m_phrases_limit_isSet;
    bool m_phrases_limit_isValid;

    QString m_pos_types;
    bool m_pos_types_isSet;
    bool m_pos_types_isValid;

    qint32 m_possible_phrases_limit;
    bool m_possible_phrases_limit_isSet;
    bool m_possible_phrases_limit_isValid;

    qint32 m_query_topics_limit;
    bool m_query_topics_limit_isSet;
    bool m_query_topics_limit_isValid;

    qint32 m_summary_limit;
    bool m_summary_limit_isSet;
    bool m_summary_limit_isValid;

    qint32 m_theme_mentions_limit;
    bool m_theme_mentions_limit_isSet;
    bool m_theme_mentions_limit_isValid;

    qint32 m_themes_limit;
    bool m_themes_limit_isSet;
    bool m_themes_limit_isValid;

    qint32 m_user_entities_limit;
    bool m_user_entities_limit_isSet;
    bool m_user_entities_limit_isValid;

    qint32 m_user_mentions_limit;
    bool m_user_mentions_limit_isSet;
    bool m_user_mentions_limit_isValid;

    qint32 m_user_opinions_limit;
    bool m_user_opinions_limit_isSet;
    bool m_user_opinions_limit_isValid;

    qint32 m_user_relations_limit;
    bool m_user_relations_limit_isSet;
    bool m_user_relations_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigurationDocumentSection)

#endif // OAIConfigurationDocumentSection_H
