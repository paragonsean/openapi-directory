/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_relation_type_isSet = false;
    m_relation_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidence_score")]);
    m_confidence_score_isSet = !json[QString("confidence_score")].isNull() && m_confidence_score_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_relation_type_isValid = ::OpenAPI::fromJsonValue(m_relation_type, json[QString("relation_type")]);
    m_relation_type_isSet = !json[QString("relation_type")].isNull() && m_relation_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidence_score"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_relation_type_isSet) {
        obj.insert(QString("relation_type"), ::OpenAPI::toJsonValue(m_relation_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

float OAIRelation::getConfidenceScore() const {
    return m_confidence_score;
}
void OAIRelation::setConfidenceScore(const float &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAIRelation::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAIRelation::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

QList<OAIRelationEntity> OAIRelation::getEntities() const {
    return m_entities;
}
void OAIRelation::setEntities(const QList<OAIRelationEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIRelation::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIRelation::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIRelation::getExtra() const {
    return m_extra;
}
void OAIRelation::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIRelation::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIRelation::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIRelation::getRelationType() const {
    return m_relation_type;
}
void OAIRelation::setRelationType(const QString &relation_type) {
    m_relation_type = relation_type;
    m_relation_type_isSet = true;
}

bool OAIRelation::is_relation_type_Set() const{
    return m_relation_type_isSet;
}

bool OAIRelation::is_relation_type_Valid() const{
    return m_relation_type_isValid;
}

QString OAIRelation::getType() const {
    return m_type;
}
void OAIRelation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRelation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRelation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_score_isValid && m_entities_isValid && m_extra_isValid && m_relation_type_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
