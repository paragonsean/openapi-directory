/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopic::OAITopic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopic::OAITopic() {
    this->initializeModel();
}

OAITopic::~OAITopic() {}

void OAITopic::initializeModel() {

    m_hitcount_isSet = false;
    m_hitcount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITopic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopic::fromJsonObject(QJsonObject json) {

    m_hitcount_isValid = ::OpenAPI::fromJsonValue(m_hitcount, json[QString("hitcount")]);
    m_hitcount_isSet = !json[QString("hitcount")].isNull() && m_hitcount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("sentiment_polarity")]);
    m_sentiment_polarity_isSet = !json[QString("sentiment_polarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentiment_score")]);
    m_sentiment_score_isSet = !json[QString("sentiment_score")].isNull() && m_sentiment_score_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITopic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopic::asJsonObject() const {
    QJsonObject obj;
    if (m_hitcount_isSet) {
        obj.insert(QString("hitcount"), ::OpenAPI::toJsonValue(m_hitcount));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("sentiment_polarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentiment_score"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAITopic::getHitcount() const {
    return m_hitcount;
}
void OAITopic::setHitcount(const qint32 &hitcount) {
    m_hitcount = hitcount;
    m_hitcount_isSet = true;
}

bool OAITopic::is_hitcount_Set() const{
    return m_hitcount_isSet;
}

bool OAITopic::is_hitcount_Valid() const{
    return m_hitcount_isValid;
}

QString OAITopic::getId() const {
    return m_id;
}
void OAITopic::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopic::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopic::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITopic::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAITopic::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAITopic::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAITopic::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

double OAITopic::getSentimentScore() const {
    return m_sentiment_score;
}
void OAITopic::setSentimentScore(const double &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAITopic::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAITopic::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

QString OAITopic::getTitle() const {
    return m_title;
}
void OAITopic::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITopic::is_title_Set() const{
    return m_title_isSet;
}

bool OAITopic::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITopic::getType() const {
    return m_type;
}
void OAITopic::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITopic::is_type_Set() const{
    return m_type_isSet;
}

bool OAITopic::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITopic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hitcount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hitcount_isValid && m_id_isValid && m_sentiment_polarity_isValid && m_sentiment_score_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
