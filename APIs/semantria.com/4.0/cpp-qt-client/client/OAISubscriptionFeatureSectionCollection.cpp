/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionFeatureSectionCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionFeatureSectionCollection::OAISubscriptionFeatureSectionCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionFeatureSectionCollection::OAISubscriptionFeatureSectionCollection() {
    this->initializeModel();
}

OAISubscriptionFeatureSectionCollection::~OAISubscriptionFeatureSectionCollection() {}

void OAISubscriptionFeatureSectionCollection::initializeModel() {

    m_concept_topics_isSet = false;
    m_concept_topics_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_named_entities_isSet = false;
    m_named_entities_isValid = false;

    m_query_topics_isSet = false;
    m_query_topics_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_user_entities_isSet = false;
    m_user_entities_isValid = false;
}

void OAISubscriptionFeatureSectionCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionFeatureSectionCollection::fromJsonObject(QJsonObject json) {

    m_concept_topics_isValid = ::OpenAPI::fromJsonValue(m_concept_topics, json[QString("concept_topics")]);
    m_concept_topics_isSet = !json[QString("concept_topics")].isNull() && m_concept_topics_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_named_entities_isValid = ::OpenAPI::fromJsonValue(m_named_entities, json[QString("named_entities")]);
    m_named_entities_isSet = !json[QString("named_entities")].isNull() && m_named_entities_isValid;

    m_query_topics_isValid = ::OpenAPI::fromJsonValue(m_query_topics, json[QString("query_topics")]);
    m_query_topics_isSet = !json[QString("query_topics")].isNull() && m_query_topics_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_user_entities_isValid = ::OpenAPI::fromJsonValue(m_user_entities, json[QString("user_entities")]);
    m_user_entities_isSet = !json[QString("user_entities")].isNull() && m_user_entities_isValid;
}

QString OAISubscriptionFeatureSectionCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionFeatureSectionCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_concept_topics_isSet) {
        obj.insert(QString("concept_topics"), ::OpenAPI::toJsonValue(m_concept_topics));
    }
    if (m_facets_isSet) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_mentions_isSet) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_named_entities_isSet) {
        obj.insert(QString("named_entities"), ::OpenAPI::toJsonValue(m_named_entities));
    }
    if (m_query_topics_isSet) {
        obj.insert(QString("query_topics"), ::OpenAPI::toJsonValue(m_query_topics));
    }
    if (m_themes_isSet) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_user_entities_isSet) {
        obj.insert(QString("user_entities"), ::OpenAPI::toJsonValue(m_user_entities));
    }
    return obj;
}

bool OAISubscriptionFeatureSectionCollection::isConceptTopics() const {
    return m_concept_topics;
}
void OAISubscriptionFeatureSectionCollection::setConceptTopics(const bool &concept_topics) {
    m_concept_topics = concept_topics;
    m_concept_topics_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_concept_topics_Set() const{
    return m_concept_topics_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_concept_topics_Valid() const{
    return m_concept_topics_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isFacets() const {
    return m_facets;
}
void OAISubscriptionFeatureSectionCollection::setFacets(const bool &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_facets_Valid() const{
    return m_facets_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isMentions() const {
    return m_mentions;
}
void OAISubscriptionFeatureSectionCollection::setMentions(const bool &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_mentions_Valid() const{
    return m_mentions_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isNamedEntities() const {
    return m_named_entities;
}
void OAISubscriptionFeatureSectionCollection::setNamedEntities(const bool &named_entities) {
    m_named_entities = named_entities;
    m_named_entities_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_named_entities_Set() const{
    return m_named_entities_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_named_entities_Valid() const{
    return m_named_entities_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isQueryTopics() const {
    return m_query_topics;
}
void OAISubscriptionFeatureSectionCollection::setQueryTopics(const bool &query_topics) {
    m_query_topics = query_topics;
    m_query_topics_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_query_topics_Set() const{
    return m_query_topics_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_query_topics_Valid() const{
    return m_query_topics_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isThemes() const {
    return m_themes;
}
void OAISubscriptionFeatureSectionCollection::setThemes(const bool &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isUserEntities() const {
    return m_user_entities;
}
void OAISubscriptionFeatureSectionCollection::setUserEntities(const bool &user_entities) {
    m_user_entities = user_entities;
    m_user_entities_isSet = true;
}

bool OAISubscriptionFeatureSectionCollection::is_user_entities_Set() const{
    return m_user_entities_isSet;
}

bool OAISubscriptionFeatureSectionCollection::is_user_entities_Valid() const{
    return m_user_entities_isValid;
}

bool OAISubscriptionFeatureSectionCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concept_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionFeatureSectionCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_concept_topics_isValid && m_facets_isValid && m_mentions_isValid && m_named_entities_isValid && m_query_topics_isValid && m_themes_isValid && m_user_entities_isValid && true;
}

} // namespace OpenAPI
