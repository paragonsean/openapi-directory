/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWord::OAIWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWord::OAIWord() {
    this->initializeModel();
}

OAIWord::~OAIWord() {}

void OAIWord::initializeModel() {

    m_is_negated_isSet = false;
    m_is_negated_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_stemmed_isSet = false;
    m_stemmed_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWord::fromJsonObject(QJsonObject json) {

    m_is_negated_isValid = ::OpenAPI::fromJsonValue(m_is_negated, json[QString("is_negated")]);
    m_is_negated_isSet = !json[QString("is_negated")].isNull() && m_is_negated_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentiment_score")]);
    m_sentiment_score_isSet = !json[QString("sentiment_score")].isNull() && m_sentiment_score_isValid;

    m_stemmed_isValid = ::OpenAPI::fromJsonValue(m_stemmed, json[QString("stemmed")]);
    m_stemmed_isSet = !json[QString("stemmed")].isNull() && m_stemmed_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWord::asJsonObject() const {
    QJsonObject obj;
    if (m_is_negated_isSet) {
        obj.insert(QString("is_negated"), ::OpenAPI::toJsonValue(m_is_negated));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentiment_score"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_stemmed_isSet) {
        obj.insert(QString("stemmed"), ::OpenAPI::toJsonValue(m_stemmed));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIWord::isIsNegated() const {
    return m_is_negated;
}
void OAIWord::setIsNegated(const bool &is_negated) {
    m_is_negated = is_negated;
    m_is_negated_isSet = true;
}

bool OAIWord::is_is_negated_Set() const{
    return m_is_negated_isSet;
}

bool OAIWord::is_is_negated_Valid() const{
    return m_is_negated_isValid;
}

double OAIWord::getSentimentScore() const {
    return m_sentiment_score;
}
void OAIWord::setSentimentScore(const double &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAIWord::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAIWord::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

QString OAIWord::getStemmed() const {
    return m_stemmed;
}
void OAIWord::setStemmed(const QString &stemmed) {
    m_stemmed = stemmed;
    m_stemmed_isSet = true;
}

bool OAIWord::is_stemmed_Set() const{
    return m_stemmed_isSet;
}

bool OAIWord::is_stemmed_Valid() const{
    return m_stemmed_isValid;
}

QString OAIWord::getTag() const {
    return m_tag;
}
void OAIWord::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIWord::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIWord::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIWord::getTitle() const {
    return m_title;
}
void OAIWord::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWord::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWord::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIWord::getType() const {
    return m_type;
}
void OAIWord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWord::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_negated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stemmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_negated_isValid && m_sentiment_score_isValid && m_stemmed_isValid && m_tag_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
