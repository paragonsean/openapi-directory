/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttribute::OAIAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttribute::OAIAttribute() {
    this->initializeModel();
}

OAIAttribute::~OAIAttribute() {}

void OAIAttribute::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;
}

void OAIAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttribute::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;
}

QString OAIAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    return obj;
}

qint32 OAIAttribute::getCount() const {
    return m_count;
}
void OAIAttribute::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAttribute::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAttribute::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIAttribute::getLabel() const {
    return m_label;
}
void OAIAttribute::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAttribute::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAttribute::is_label_Valid() const{
    return m_label_isValid;
}

QList<OAIMention> OAIAttribute::getMentions() const {
    return m_mentions;
}
void OAIAttribute::setMentions(const QList<OAIMention> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIAttribute::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIAttribute::is_mentions_Valid() const{
    return m_mentions_isValid;
}

bool OAIAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_label_isValid && m_mentions_isValid && true;
}

} // namespace OpenAPI
