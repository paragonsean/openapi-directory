/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration_ResponseVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration_ResponseVersion::OAIConfiguration_ResponseVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration_ResponseVersion::OAIConfiguration_ResponseVersion() {
    this->initializeModel();
}

OAIConfiguration_ResponseVersion::~OAIConfiguration_ResponseVersion() {}

void OAIConfiguration_ResponseVersion::initializeModel() {

    m_auto_response_isSet = false;
    m_auto_response_isValid = false;

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_categories_threshold_isSet = false;
    m_categories_threshold_isValid = false;

    m_chars_threshold_isSet = false;
    m_chars_threshold_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_entities_threshold_isSet = false;
    m_entities_threshold_isValid = false;

    m_from_template_config_id_isSet = false;
    m_from_template_config_id_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_one_sentence_isSet = false;
    m_one_sentence_isValid = false;

    m_process_html_isSet = false;
    m_process_html_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConfiguration_ResponseVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration_ResponseVersion::fromJsonObject(QJsonObject json) {

    m_auto_response_isValid = ::OpenAPI::fromJsonValue(m_auto_response, json[QString("auto_response")]);
    m_auto_response_isSet = !json[QString("auto_response")].isNull() && m_auto_response_isValid;

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("callback")]);
    m_callback_isSet = !json[QString("callback")].isNull() && m_callback_isValid;

    m_categories_threshold_isValid = ::OpenAPI::fromJsonValue(m_categories_threshold, json[QString("categories_threshold")]);
    m_categories_threshold_isSet = !json[QString("categories_threshold")].isNull() && m_categories_threshold_isValid;

    m_chars_threshold_isValid = ::OpenAPI::fromJsonValue(m_chars_threshold, json[QString("chars_threshold")]);
    m_chars_threshold_isSet = !json[QString("chars_threshold")].isNull() && m_chars_threshold_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("config_id")]);
    m_config_id_isSet = !json[QString("config_id")].isNull() && m_config_id_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_entities_threshold_isValid = ::OpenAPI::fromJsonValue(m_entities_threshold, json[QString("entities_threshold")]);
    m_entities_threshold_isSet = !json[QString("entities_threshold")].isNull() && m_entities_threshold_isValid;

    m_from_template_config_id_isValid = ::OpenAPI::fromJsonValue(m_from_template_config_id, json[QString("from_template_config_id")]);
    m_from_template_config_id_isSet = !json[QString("from_template_config_id")].isNull() && m_from_template_config_id_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("is_primary")]);
    m_is_primary_isSet = !json[QString("is_primary")].isNull() && m_is_primary_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_one_sentence_isValid = ::OpenAPI::fromJsonValue(m_one_sentence, json[QString("one_sentence")]);
    m_one_sentence_isSet = !json[QString("one_sentence")].isNull() && m_one_sentence_isValid;

    m_process_html_isValid = ::OpenAPI::fromJsonValue(m_process_html, json[QString("process_html")]);
    m_process_html_isSet = !json[QString("process_html")].isNull() && m_process_html_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConfiguration_ResponseVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration_ResponseVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_response_isSet) {
        obj.insert(QString("auto_response"), ::OpenAPI::toJsonValue(m_auto_response));
    }
    if (m_callback_isSet) {
        obj.insert(QString("callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_categories_threshold_isSet) {
        obj.insert(QString("categories_threshold"), ::OpenAPI::toJsonValue(m_categories_threshold));
    }
    if (m_chars_threshold_isSet) {
        obj.insert(QString("chars_threshold"), ::OpenAPI::toJsonValue(m_chars_threshold));
    }
    if (m_collection.isSet()) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_config_id_isSet) {
        obj.insert(QString("config_id"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_entities_threshold_isSet) {
        obj.insert(QString("entities_threshold"), ::OpenAPI::toJsonValue(m_entities_threshold));
    }
    if (m_from_template_config_id_isSet) {
        obj.insert(QString("from_template_config_id"), ::OpenAPI::toJsonValue(m_from_template_config_id));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("is_primary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_one_sentence_isSet) {
        obj.insert(QString("one_sentence"), ::OpenAPI::toJsonValue(m_one_sentence));
    }
    if (m_process_html_isSet) {
        obj.insert(QString("process_html"), ::OpenAPI::toJsonValue(m_process_html));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIConfiguration_ResponseVersion::isAutoResponse() const {
    return m_auto_response;
}
void OAIConfiguration_ResponseVersion::setAutoResponse(const bool &auto_response) {
    m_auto_response = auto_response;
    m_auto_response_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_auto_response_Set() const{
    return m_auto_response_isSet;
}

bool OAIConfiguration_ResponseVersion::is_auto_response_Valid() const{
    return m_auto_response_isValid;
}

QString OAIConfiguration_ResponseVersion::getCallback() const {
    return m_callback;
}
void OAIConfiguration_ResponseVersion::setCallback(const QString &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIConfiguration_ResponseVersion::is_callback_Valid() const{
    return m_callback_isValid;
}

double OAIConfiguration_ResponseVersion::getCategoriesThreshold() const {
    return m_categories_threshold;
}
void OAIConfiguration_ResponseVersion::setCategoriesThreshold(const double &categories_threshold) {
    m_categories_threshold = categories_threshold;
    m_categories_threshold_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_categories_threshold_Set() const{
    return m_categories_threshold_isSet;
}

bool OAIConfiguration_ResponseVersion::is_categories_threshold_Valid() const{
    return m_categories_threshold_isValid;
}

qint32 OAIConfiguration_ResponseVersion::getCharsThreshold() const {
    return m_chars_threshold;
}
void OAIConfiguration_ResponseVersion::setCharsThreshold(const qint32 &chars_threshold) {
    m_chars_threshold = chars_threshold;
    m_chars_threshold_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_chars_threshold_Set() const{
    return m_chars_threshold_isSet;
}

bool OAIConfiguration_ResponseVersion::is_chars_threshold_Valid() const{
    return m_chars_threshold_isValid;
}

OAIConfigurationCollectionSection OAIConfiguration_ResponseVersion::getCollection() const {
    return m_collection;
}
void OAIConfiguration_ResponseVersion::setCollection(const OAIConfigurationCollectionSection &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIConfiguration_ResponseVersion::is_collection_Valid() const{
    return m_collection_isValid;
}

QString OAIConfiguration_ResponseVersion::getConfigId() const {
    return m_config_id;
}
void OAIConfiguration_ResponseVersion::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAIConfiguration_ResponseVersion::is_config_id_Valid() const{
    return m_config_id_isValid;
}

OAIConfigurationDocumentSection OAIConfiguration_ResponseVersion::getDocument() const {
    return m_document;
}
void OAIConfiguration_ResponseVersion::setDocument(const OAIConfigurationDocumentSection &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_document_Set() const{
    return m_document_isSet;
}

bool OAIConfiguration_ResponseVersion::is_document_Valid() const{
    return m_document_isValid;
}

qint32 OAIConfiguration_ResponseVersion::getEntitiesThreshold() const {
    return m_entities_threshold;
}
void OAIConfiguration_ResponseVersion::setEntitiesThreshold(const qint32 &entities_threshold) {
    m_entities_threshold = entities_threshold;
    m_entities_threshold_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_entities_threshold_Set() const{
    return m_entities_threshold_isSet;
}

bool OAIConfiguration_ResponseVersion::is_entities_threshold_Valid() const{
    return m_entities_threshold_isValid;
}

QString OAIConfiguration_ResponseVersion::getFromTemplateConfigId() const {
    return m_from_template_config_id;
}
void OAIConfiguration_ResponseVersion::setFromTemplateConfigId(const QString &from_template_config_id) {
    m_from_template_config_id = from_template_config_id;
    m_from_template_config_id_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_from_template_config_id_Set() const{
    return m_from_template_config_id_isSet;
}

bool OAIConfiguration_ResponseVersion::is_from_template_config_id_Valid() const{
    return m_from_template_config_id_isValid;
}

bool OAIConfiguration_ResponseVersion::isIsPrimary() const {
    return m_is_primary;
}
void OAIConfiguration_ResponseVersion::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAIConfiguration_ResponseVersion::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

QString OAIConfiguration_ResponseVersion::getLanguage() const {
    return m_language;
}
void OAIConfiguration_ResponseVersion::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_language_Set() const{
    return m_language_isSet;
}

bool OAIConfiguration_ResponseVersion::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIConfiguration_ResponseVersion::getModified() const {
    return m_modified;
}
void OAIConfiguration_ResponseVersion::setModified(const QString &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIConfiguration_ResponseVersion::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIConfiguration_ResponseVersion::getName() const {
    return m_name;
}
void OAIConfiguration_ResponseVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfiguration_ResponseVersion::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIConfiguration_ResponseVersion::isOneSentence() const {
    return m_one_sentence;
}
void OAIConfiguration_ResponseVersion::setOneSentence(const bool &one_sentence) {
    m_one_sentence = one_sentence;
    m_one_sentence_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_one_sentence_Set() const{
    return m_one_sentence_isSet;
}

bool OAIConfiguration_ResponseVersion::is_one_sentence_Valid() const{
    return m_one_sentence_isValid;
}

bool OAIConfiguration_ResponseVersion::isProcessHtml() const {
    return m_process_html;
}
void OAIConfiguration_ResponseVersion::setProcessHtml(const bool &process_html) {
    m_process_html = process_html;
    m_process_html_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_process_html_Set() const{
    return m_process_html_isSet;
}

bool OAIConfiguration_ResponseVersion::is_process_html_Valid() const{
    return m_process_html_isValid;
}

QString OAIConfiguration_ResponseVersion::getVersion() const {
    return m_version;
}
void OAIConfiguration_ResponseVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConfiguration_ResponseVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConfiguration_ResponseVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConfiguration_ResponseVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chars_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_template_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_sentence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration_ResponseVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_response_isValid && m_callback_isValid && m_categories_threshold_isValid && m_chars_threshold_isValid && m_collection_isValid && m_config_id_isValid && m_document_isValid && m_entities_threshold_isValid && m_from_template_config_id_isValid && m_is_primary_isValid && m_language_isValid && m_modified_isValid && m_name_isValid && m_one_sentence_isValid && m_process_html_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
