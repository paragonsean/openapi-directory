/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationCollectionSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationCollectionSection::OAIConfigurationCollectionSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationCollectionSection::OAIConfigurationCollectionSection() {
    this->initializeModel();
}

OAIConfigurationCollectionSection::~OAIConfigurationCollectionSection() {}

void OAIConfigurationCollectionSection::initializeModel() {

    m_attribute_mentions_limit_isSet = false;
    m_attribute_mentions_limit_isValid = false;

    m_concept_topics_limit_isSet = false;
    m_concept_topics_limit_isValid = false;

    m_facet_atts_limit_isSet = false;
    m_facet_atts_limit_isValid = false;

    m_facet_mentions_limit_isSet = false;
    m_facet_mentions_limit_isValid = false;

    m_facets_limit_isSet = false;
    m_facets_limit_isValid = false;

    m_named_entities_limit_isSet = false;
    m_named_entities_limit_isValid = false;

    m_named_mentions_limit_isSet = false;
    m_named_mentions_limit_isValid = false;

    m_query_topics_limit_isSet = false;
    m_query_topics_limit_isValid = false;

    m_theme_mentions_limit_isSet = false;
    m_theme_mentions_limit_isValid = false;

    m_themes_limit_isSet = false;
    m_themes_limit_isValid = false;

    m_user_entities_limit_isSet = false;
    m_user_entities_limit_isValid = false;

    m_user_mentions_limit_isSet = false;
    m_user_mentions_limit_isValid = false;
}

void OAIConfigurationCollectionSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationCollectionSection::fromJsonObject(QJsonObject json) {

    m_attribute_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_attribute_mentions_limit, json[QString("attribute_mentions_limit")]);
    m_attribute_mentions_limit_isSet = !json[QString("attribute_mentions_limit")].isNull() && m_attribute_mentions_limit_isValid;

    m_concept_topics_limit_isValid = ::OpenAPI::fromJsonValue(m_concept_topics_limit, json[QString("concept_topics_limit")]);
    m_concept_topics_limit_isSet = !json[QString("concept_topics_limit")].isNull() && m_concept_topics_limit_isValid;

    m_facet_atts_limit_isValid = ::OpenAPI::fromJsonValue(m_facet_atts_limit, json[QString("facet_atts_limit")]);
    m_facet_atts_limit_isSet = !json[QString("facet_atts_limit")].isNull() && m_facet_atts_limit_isValid;

    m_facet_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_facet_mentions_limit, json[QString("facet_mentions_limit")]);
    m_facet_mentions_limit_isSet = !json[QString("facet_mentions_limit")].isNull() && m_facet_mentions_limit_isValid;

    m_facets_limit_isValid = ::OpenAPI::fromJsonValue(m_facets_limit, json[QString("facets_limit")]);
    m_facets_limit_isSet = !json[QString("facets_limit")].isNull() && m_facets_limit_isValid;

    m_named_entities_limit_isValid = ::OpenAPI::fromJsonValue(m_named_entities_limit, json[QString("named_entities_limit")]);
    m_named_entities_limit_isSet = !json[QString("named_entities_limit")].isNull() && m_named_entities_limit_isValid;

    m_named_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_named_mentions_limit, json[QString("named_mentions_limit")]);
    m_named_mentions_limit_isSet = !json[QString("named_mentions_limit")].isNull() && m_named_mentions_limit_isValid;

    m_query_topics_limit_isValid = ::OpenAPI::fromJsonValue(m_query_topics_limit, json[QString("query_topics_limit")]);
    m_query_topics_limit_isSet = !json[QString("query_topics_limit")].isNull() && m_query_topics_limit_isValid;

    m_theme_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_theme_mentions_limit, json[QString("theme_mentions_limit")]);
    m_theme_mentions_limit_isSet = !json[QString("theme_mentions_limit")].isNull() && m_theme_mentions_limit_isValid;

    m_themes_limit_isValid = ::OpenAPI::fromJsonValue(m_themes_limit, json[QString("themes_limit")]);
    m_themes_limit_isSet = !json[QString("themes_limit")].isNull() && m_themes_limit_isValid;

    m_user_entities_limit_isValid = ::OpenAPI::fromJsonValue(m_user_entities_limit, json[QString("user_entities_limit")]);
    m_user_entities_limit_isSet = !json[QString("user_entities_limit")].isNull() && m_user_entities_limit_isValid;

    m_user_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_user_mentions_limit, json[QString("user_mentions_limit")]);
    m_user_mentions_limit_isSet = !json[QString("user_mentions_limit")].isNull() && m_user_mentions_limit_isValid;
}

QString OAIConfigurationCollectionSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationCollectionSection::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_mentions_limit_isSet) {
        obj.insert(QString("attribute_mentions_limit"), ::OpenAPI::toJsonValue(m_attribute_mentions_limit));
    }
    if (m_concept_topics_limit_isSet) {
        obj.insert(QString("concept_topics_limit"), ::OpenAPI::toJsonValue(m_concept_topics_limit));
    }
    if (m_facet_atts_limit_isSet) {
        obj.insert(QString("facet_atts_limit"), ::OpenAPI::toJsonValue(m_facet_atts_limit));
    }
    if (m_facet_mentions_limit_isSet) {
        obj.insert(QString("facet_mentions_limit"), ::OpenAPI::toJsonValue(m_facet_mentions_limit));
    }
    if (m_facets_limit_isSet) {
        obj.insert(QString("facets_limit"), ::OpenAPI::toJsonValue(m_facets_limit));
    }
    if (m_named_entities_limit_isSet) {
        obj.insert(QString("named_entities_limit"), ::OpenAPI::toJsonValue(m_named_entities_limit));
    }
    if (m_named_mentions_limit_isSet) {
        obj.insert(QString("named_mentions_limit"), ::OpenAPI::toJsonValue(m_named_mentions_limit));
    }
    if (m_query_topics_limit_isSet) {
        obj.insert(QString("query_topics_limit"), ::OpenAPI::toJsonValue(m_query_topics_limit));
    }
    if (m_theme_mentions_limit_isSet) {
        obj.insert(QString("theme_mentions_limit"), ::OpenAPI::toJsonValue(m_theme_mentions_limit));
    }
    if (m_themes_limit_isSet) {
        obj.insert(QString("themes_limit"), ::OpenAPI::toJsonValue(m_themes_limit));
    }
    if (m_user_entities_limit_isSet) {
        obj.insert(QString("user_entities_limit"), ::OpenAPI::toJsonValue(m_user_entities_limit));
    }
    if (m_user_mentions_limit_isSet) {
        obj.insert(QString("user_mentions_limit"), ::OpenAPI::toJsonValue(m_user_mentions_limit));
    }
    return obj;
}

qint32 OAIConfigurationCollectionSection::getAttributeMentionsLimit() const {
    return m_attribute_mentions_limit;
}
void OAIConfigurationCollectionSection::setAttributeMentionsLimit(const qint32 &attribute_mentions_limit) {
    m_attribute_mentions_limit = attribute_mentions_limit;
    m_attribute_mentions_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_attribute_mentions_limit_Set() const{
    return m_attribute_mentions_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_attribute_mentions_limit_Valid() const{
    return m_attribute_mentions_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getConceptTopicsLimit() const {
    return m_concept_topics_limit;
}
void OAIConfigurationCollectionSection::setConceptTopicsLimit(const qint32 &concept_topics_limit) {
    m_concept_topics_limit = concept_topics_limit;
    m_concept_topics_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_concept_topics_limit_Set() const{
    return m_concept_topics_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_concept_topics_limit_Valid() const{
    return m_concept_topics_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getFacetAttsLimit() const {
    return m_facet_atts_limit;
}
void OAIConfigurationCollectionSection::setFacetAttsLimit(const qint32 &facet_atts_limit) {
    m_facet_atts_limit = facet_atts_limit;
    m_facet_atts_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_facet_atts_limit_Set() const{
    return m_facet_atts_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_facet_atts_limit_Valid() const{
    return m_facet_atts_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getFacetMentionsLimit() const {
    return m_facet_mentions_limit;
}
void OAIConfigurationCollectionSection::setFacetMentionsLimit(const qint32 &facet_mentions_limit) {
    m_facet_mentions_limit = facet_mentions_limit;
    m_facet_mentions_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_facet_mentions_limit_Set() const{
    return m_facet_mentions_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_facet_mentions_limit_Valid() const{
    return m_facet_mentions_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getFacetsLimit() const {
    return m_facets_limit;
}
void OAIConfigurationCollectionSection::setFacetsLimit(const qint32 &facets_limit) {
    m_facets_limit = facets_limit;
    m_facets_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_facets_limit_Set() const{
    return m_facets_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_facets_limit_Valid() const{
    return m_facets_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getNamedEntitiesLimit() const {
    return m_named_entities_limit;
}
void OAIConfigurationCollectionSection::setNamedEntitiesLimit(const qint32 &named_entities_limit) {
    m_named_entities_limit = named_entities_limit;
    m_named_entities_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_named_entities_limit_Set() const{
    return m_named_entities_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_named_entities_limit_Valid() const{
    return m_named_entities_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getNamedMentionsLimit() const {
    return m_named_mentions_limit;
}
void OAIConfigurationCollectionSection::setNamedMentionsLimit(const qint32 &named_mentions_limit) {
    m_named_mentions_limit = named_mentions_limit;
    m_named_mentions_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_named_mentions_limit_Set() const{
    return m_named_mentions_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_named_mentions_limit_Valid() const{
    return m_named_mentions_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getQueryTopicsLimit() const {
    return m_query_topics_limit;
}
void OAIConfigurationCollectionSection::setQueryTopicsLimit(const qint32 &query_topics_limit) {
    m_query_topics_limit = query_topics_limit;
    m_query_topics_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_query_topics_limit_Set() const{
    return m_query_topics_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_query_topics_limit_Valid() const{
    return m_query_topics_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getThemeMentionsLimit() const {
    return m_theme_mentions_limit;
}
void OAIConfigurationCollectionSection::setThemeMentionsLimit(const qint32 &theme_mentions_limit) {
    m_theme_mentions_limit = theme_mentions_limit;
    m_theme_mentions_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_theme_mentions_limit_Set() const{
    return m_theme_mentions_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_theme_mentions_limit_Valid() const{
    return m_theme_mentions_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getThemesLimit() const {
    return m_themes_limit;
}
void OAIConfigurationCollectionSection::setThemesLimit(const qint32 &themes_limit) {
    m_themes_limit = themes_limit;
    m_themes_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_themes_limit_Set() const{
    return m_themes_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_themes_limit_Valid() const{
    return m_themes_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getUserEntitiesLimit() const {
    return m_user_entities_limit;
}
void OAIConfigurationCollectionSection::setUserEntitiesLimit(const qint32 &user_entities_limit) {
    m_user_entities_limit = user_entities_limit;
    m_user_entities_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_user_entities_limit_Set() const{
    return m_user_entities_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_user_entities_limit_Valid() const{
    return m_user_entities_limit_isValid;
}

qint32 OAIConfigurationCollectionSection::getUserMentionsLimit() const {
    return m_user_mentions_limit;
}
void OAIConfigurationCollectionSection::setUserMentionsLimit(const qint32 &user_mentions_limit) {
    m_user_mentions_limit = user_mentions_limit;
    m_user_mentions_limit_isSet = true;
}

bool OAIConfigurationCollectionSection::is_user_mentions_limit_Set() const{
    return m_user_mentions_limit_isSet;
}

bool OAIConfigurationCollectionSection::is_user_mentions_limit_Valid() const{
    return m_user_mentions_limit_isValid;
}

bool OAIConfigurationCollectionSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_topics_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_atts_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_topics_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationCollectionSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_mentions_limit_isValid && m_concept_topics_limit_isValid && m_facet_atts_limit_isValid && m_facet_mentions_limit_isValid && m_facets_limit_isValid && m_named_entities_limit_isValid && m_named_mentions_limit_isValid && m_query_topics_limit_isValid && m_theme_mentions_limit_isValid && m_themes_limit_isValid && m_user_entities_limit_isValid && m_user_mentions_limit_isValid && true;
}

} // namespace OpenAPI
