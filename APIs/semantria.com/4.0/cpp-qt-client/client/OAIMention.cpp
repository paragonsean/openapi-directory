/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMention::OAIMention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMention::OAIMention() {
    this->initializeModel();
}

OAIMention::~OAIMention() {}

void OAIMention::initializeModel() {

    m_is_negated_isSet = false;
    m_is_negated_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_negating_phrase_isSet = false;
    m_negating_phrase_isValid = false;
}

void OAIMention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMention::fromJsonObject(QJsonObject json) {

    m_is_negated_isValid = ::OpenAPI::fromJsonValue(m_is_negated, json[QString("is_negated")]);
    m_is_negated_isSet = !json[QString("is_negated")].isNull() && m_is_negated_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_negating_phrase_isValid = ::OpenAPI::fromJsonValue(m_negating_phrase, json[QString("negating_phrase")]);
    m_negating_phrase_isSet = !json[QString("negating_phrase")].isNull() && m_negating_phrase_isValid;
}

QString OAIMention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMention::asJsonObject() const {
    QJsonObject obj;
    if (m_is_negated_isSet) {
        obj.insert(QString("is_negated"), ::OpenAPI::toJsonValue(m_is_negated));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_negating_phrase_isSet) {
        obj.insert(QString("negating_phrase"), ::OpenAPI::toJsonValue(m_negating_phrase));
    }
    return obj;
}

bool OAIMention::isIsNegated() const {
    return m_is_negated;
}
void OAIMention::setIsNegated(const bool &is_negated) {
    m_is_negated = is_negated;
    m_is_negated_isSet = true;
}

bool OAIMention::is_is_negated_Set() const{
    return m_is_negated_isSet;
}

bool OAIMention::is_is_negated_Valid() const{
    return m_is_negated_isValid;
}

QString OAIMention::getLabel() const {
    return m_label;
}
void OAIMention::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIMention::is_label_Set() const{
    return m_label_isSet;
}

bool OAIMention::is_label_Valid() const{
    return m_label_isValid;
}

QList<OAILocation> OAIMention::getLocations() const {
    return m_locations;
}
void OAIMention::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIMention::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIMention::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIMention::getNegatingPhrase() const {
    return m_negating_phrase;
}
void OAIMention::setNegatingPhrase(const QString &negating_phrase) {
    m_negating_phrase = negating_phrase;
    m_negating_phrase_isSet = true;
}

bool OAIMention::is_negating_phrase_Set() const{
    return m_negating_phrase_isSet;
}

bool OAIMention::is_negating_phrase_Valid() const{
    return m_negating_phrase_isValid;
}

bool OAIMention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_negated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_negating_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMention::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_negated_isValid && m_label_isValid && m_locations_isValid && m_negating_phrase_isValid && true;
}

} // namespace OpenAPI
