/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatisticConfiguration.h
 *
 * 
 */

#ifndef OAIStatisticConfiguration_H
#define OAIStatisticConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatisticConfiguration : public OAIObject {
public:
    OAIStatisticConfiguration();
    OAIStatisticConfiguration(QString json);
    ~OAIStatisticConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCallsData() const;
    void setCallsData(const qint32 &calls_data);
    bool is_calls_data_Set() const;
    bool is_calls_data_Valid() const;

    qint32 getCallsPolling() const;
    void setCallsPolling(const qint32 &calls_polling);
    bool is_calls_polling_Set() const;
    bool is_calls_polling_Valid() const;

    qint32 getCallsSettings() const;
    void setCallsSettings(const qint32 &calls_settings);
    bool is_calls_settings_Set() const;
    bool is_calls_settings_Valid() const;

    qint32 getCollsFailed() const;
    void setCollsFailed(const qint32 &colls_failed);
    bool is_colls_failed_Set() const;
    bool is_colls_failed_Valid() const;

    qint32 getCollsProcessed() const;
    void setCollsProcessed(const qint32 &colls_processed);
    bool is_colls_processed_Set() const;
    bool is_colls_processed_Valid() const;

    qint32 getCollsResponded() const;
    void setCollsResponded(const qint32 &colls_responded);
    bool is_colls_responded_Set() const;
    bool is_colls_responded_Valid() const;

    QString getConfigId() const;
    void setConfigId(const QString &config_id);
    bool is_config_id_Set() const;
    bool is_config_id_Valid() const;

    qint32 getDocsFailed() const;
    void setDocsFailed(const qint32 &docs_failed);
    bool is_docs_failed_Set() const;
    bool is_docs_failed_Valid() const;

    qint32 getDocsProcessed() const;
    void setDocsProcessed(const qint32 &docs_processed);
    bool is_docs_processed_Set() const;
    bool is_docs_processed_Valid() const;

    qint32 getDocsResponded() const;
    void setDocsResponded(const qint32 &docs_responded);
    bool is_docs_responded_Set() const;
    bool is_docs_responded_Valid() const;

    QString getLatestUsedApp() const;
    void setLatestUsedApp(const QString &latest_used_app);
    bool is_latest_used_app_Set() const;
    bool is_latest_used_app_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOverallBatches() const;
    void setOverallBatches(const qint32 &overall_batches);
    bool is_overall_batches_Set() const;
    bool is_overall_batches_Valid() const;

    qint32 getOverallCalls() const;
    void setOverallCalls(const qint32 &overall_calls);
    bool is_overall_calls_Set() const;
    bool is_overall_calls_Valid() const;

    qint32 getOverallDocs() const;
    void setOverallDocs(const qint32 &overall_docs);
    bool is_overall_docs_Set() const;
    bool is_overall_docs_Valid() const;

    qint32 getOverallExceeded() const;
    void setOverallExceeded(const qint32 &overall_exceeded);
    bool is_overall_exceeded_Set() const;
    bool is_overall_exceeded_Valid() const;

    qint32 getOverallTexts() const;
    void setOverallTexts(const qint32 &overall_texts);
    bool is_overall_texts_Set() const;
    bool is_overall_texts_Valid() const;

    qint32 getOvercallColls() const;
    void setOvercallColls(const qint32 &overcall_colls);
    bool is_overcall_colls_Set() const;
    bool is_overcall_colls_Valid() const;

    QString getUsedApps() const;
    void setUsedApps(const QString &used_apps);
    bool is_used_apps_Set() const;
    bool is_used_apps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_calls_data;
    bool m_calls_data_isSet;
    bool m_calls_data_isValid;

    qint32 m_calls_polling;
    bool m_calls_polling_isSet;
    bool m_calls_polling_isValid;

    qint32 m_calls_settings;
    bool m_calls_settings_isSet;
    bool m_calls_settings_isValid;

    qint32 m_colls_failed;
    bool m_colls_failed_isSet;
    bool m_colls_failed_isValid;

    qint32 m_colls_processed;
    bool m_colls_processed_isSet;
    bool m_colls_processed_isValid;

    qint32 m_colls_responded;
    bool m_colls_responded_isSet;
    bool m_colls_responded_isValid;

    QString m_config_id;
    bool m_config_id_isSet;
    bool m_config_id_isValid;

    qint32 m_docs_failed;
    bool m_docs_failed_isSet;
    bool m_docs_failed_isValid;

    qint32 m_docs_processed;
    bool m_docs_processed_isSet;
    bool m_docs_processed_isValid;

    qint32 m_docs_responded;
    bool m_docs_responded_isSet;
    bool m_docs_responded_isValid;

    QString m_latest_used_app;
    bool m_latest_used_app_isSet;
    bool m_latest_used_app_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_overall_batches;
    bool m_overall_batches_isSet;
    bool m_overall_batches_isValid;

    qint32 m_overall_calls;
    bool m_overall_calls_isSet;
    bool m_overall_calls_isValid;

    qint32 m_overall_docs;
    bool m_overall_docs_isSet;
    bool m_overall_docs_isValid;

    qint32 m_overall_exceeded;
    bool m_overall_exceeded_isSet;
    bool m_overall_exceeded_isValid;

    qint32 m_overall_texts;
    bool m_overall_texts_isSet;
    bool m_overall_texts_isValid;

    qint32 m_overcall_colls;
    bool m_overcall_colls_isSet;
    bool m_overcall_colls_isValid;

    QString m_used_apps;
    bool m_used_apps_isSet;
    bool m_used_apps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatisticConfiguration)

#endif // OAIStatisticConfiguration_H
