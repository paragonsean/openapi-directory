/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionFeatureSectionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionFeatureSectionTemplate::OAISubscriptionFeatureSectionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionFeatureSectionTemplate::OAISubscriptionFeatureSectionTemplate() {
    this->initializeModel();
}

OAISubscriptionFeatureSectionTemplate::~OAISubscriptionFeatureSectionTemplate() {}

void OAISubscriptionFeatureSectionTemplate::initializeModel() {

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_free_isSet = false;
    m_is_free_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISubscriptionFeatureSectionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionFeatureSectionTemplate::fromJsonObject(QJsonObject json) {

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("config_id")]);
    m_config_id_isSet = !json[QString("config_id")].isNull() && m_config_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_free_isValid = ::OpenAPI::fromJsonValue(m_is_free, json[QString("is_free")]);
    m_is_free_isSet = !json[QString("is_free")].isNull() && m_is_free_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionFeatureSectionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_config_id_isSet) {
        obj.insert(QString("config_id"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_free_isSet) {
        obj.insert(QString("is_free"), ::OpenAPI::toJsonValue(m_is_free));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISubscriptionFeatureSectionTemplate::getConfigId() const {
    return m_config_id;
}
void OAISubscriptionFeatureSectionTemplate::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_config_id_Valid() const{
    return m_config_id_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getDescription() const {
    return m_description;
}
void OAISubscriptionFeatureSectionTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getId() const {
    return m_id;
}
void OAISubscriptionFeatureSectionTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscriptionFeatureSectionTemplate::isIsFree() const {
    return m_is_free;
}
void OAISubscriptionFeatureSectionTemplate::setIsFree(const bool &is_free) {
    m_is_free = is_free;
    m_is_free_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_is_free_Set() const{
    return m_is_free_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_is_free_Valid() const{
    return m_is_free_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getLanguage() const {
    return m_language;
}
void OAISubscriptionFeatureSectionTemplate::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_language_Set() const{
    return m_language_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getName() const {
    return m_name;
}
void OAISubscriptionFeatureSectionTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getType() const {
    return m_type;
}
void OAISubscriptionFeatureSectionTemplate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISubscriptionFeatureSectionTemplate::getVersion() const {
    return m_version;
}
void OAISubscriptionFeatureSectionTemplate::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISubscriptionFeatureSectionTemplate::is_version_Set() const{
    return m_version_isSet;
}

bool OAISubscriptionFeatureSectionTemplate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISubscriptionFeatureSectionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionFeatureSectionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_id_isValid && m_description_isValid && m_id_isValid && m_is_free_isValid && m_language_isValid && m_name_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
