/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeature.h
 *
 * 
 */

#ifndef OAIFeature_H
#define OAIFeature_H

#include <QJsonObject>

#include "OAIFeatureDetailedModeSection.h"
#include "OAIFeatureDiscoveryModeSection.h"
#include "OAIFeatureSettingsSection.h"
#include "OAIFeatureTemplateSection.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFeatureDetailedModeSection;
class OAIFeatureDiscoveryModeSection;
class OAIFeatureSettingsSection;
class OAIFeatureTemplateSection;

class OAIFeature : public OAIObject {
public:
    OAIFeature();
    OAIFeature(QString json);
    ~OAIFeature() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFeatureDetailedModeSection getDetailedMode() const;
    void setDetailedMode(const OAIFeatureDetailedModeSection &detailed_mode);
    bool is_detailed_mode_Set() const;
    bool is_detailed_mode_Valid() const;

    OAIFeatureDiscoveryModeSection getDiscoveryMode() const;
    void setDiscoveryMode(const OAIFeatureDiscoveryModeSection &discovery_mode);
    bool is_discovery_mode_Set() const;
    bool is_discovery_mode_Valid() const;

    bool isHtmlProcessing() const;
    void setHtmlProcessing(const bool &html_processing);
    bool is_html_processing_Set() const;
    bool is_html_processing_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    bool isOneSentenceMode() const;
    void setOneSentenceMode(const bool &one_sentence_mode);
    bool is_one_sentence_mode_Set() const;
    bool is_one_sentence_mode_Valid() const;

    OAIFeatureSettingsSection getSettings() const;
    void setSettings(const OAIFeatureSettingsSection &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    OAIFeatureTemplateSection getTemplates() const;
    void setTemplates(const OAIFeatureTemplateSection &templates);
    bool is_templates_Set() const;
    bool is_templates_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFeatureDetailedModeSection m_detailed_mode;
    bool m_detailed_mode_isSet;
    bool m_detailed_mode_isValid;

    OAIFeatureDiscoveryModeSection m_discovery_mode;
    bool m_discovery_mode_isSet;
    bool m_discovery_mode_isValid;

    bool m_html_processing;
    bool m_html_processing_isSet;
    bool m_html_processing_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    bool m_one_sentence_mode;
    bool m_one_sentence_mode_isSet;
    bool m_one_sentence_mode_isValid;

    OAIFeatureSettingsSection m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    OAIFeatureTemplateSection m_templates;
    bool m_templates_isSet;
    bool m_templates_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeature)

#endif // OAIFeature_H
