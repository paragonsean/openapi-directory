/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntention::OAIIntention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntention::OAIIntention() {
    this->initializeModel();
}

OAIIntention::~OAIIntention() {}

void OAIIntention::initializeModel() {

    m_evidence_phrase_isSet = false;
    m_evidence_phrase_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_what_isSet = false;
    m_what_isValid = false;

    m_who_isSet = false;
    m_who_isValid = false;
}

void OAIIntention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntention::fromJsonObject(QJsonObject json) {

    m_evidence_phrase_isValid = ::OpenAPI::fromJsonValue(m_evidence_phrase, json[QString("evidence_phrase")]);
    m_evidence_phrase_isSet = !json[QString("evidence_phrase")].isNull() && m_evidence_phrase_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_what_isValid = ::OpenAPI::fromJsonValue(m_what, json[QString("what")]);
    m_what_isSet = !json[QString("what")].isNull() && m_what_isValid;

    m_who_isValid = ::OpenAPI::fromJsonValue(m_who, json[QString("who")]);
    m_who_isSet = !json[QString("who")].isNull() && m_who_isValid;
}

QString OAIIntention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntention::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_phrase_isSet) {
        obj.insert(QString("evidence_phrase"), ::OpenAPI::toJsonValue(m_evidence_phrase));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_what_isSet) {
        obj.insert(QString("what"), ::OpenAPI::toJsonValue(m_what));
    }
    if (m_who_isSet) {
        obj.insert(QString("who"), ::OpenAPI::toJsonValue(m_who));
    }
    return obj;
}

QString OAIIntention::getEvidencePhrase() const {
    return m_evidence_phrase;
}
void OAIIntention::setEvidencePhrase(const QString &evidence_phrase) {
    m_evidence_phrase = evidence_phrase;
    m_evidence_phrase_isSet = true;
}

bool OAIIntention::is_evidence_phrase_Set() const{
    return m_evidence_phrase_isSet;
}

bool OAIIntention::is_evidence_phrase_Valid() const{
    return m_evidence_phrase_isValid;
}

QString OAIIntention::getType() const {
    return m_type;
}
void OAIIntention::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIntention::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIntention::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIIntention::getWhat() const {
    return m_what;
}
void OAIIntention::setWhat(const QString &what) {
    m_what = what;
    m_what_isSet = true;
}

bool OAIIntention::is_what_Set() const{
    return m_what_isSet;
}

bool OAIIntention::is_what_Valid() const{
    return m_what_isValid;
}

QString OAIIntention::getWho() const {
    return m_who;
}
void OAIIntention::setWho(const QString &who) {
    m_who = who;
    m_who_isSet = true;
}

bool OAIIntention::is_who_Set() const{
    return m_who_isSet;
}

bool OAIIntention::is_who_Valid() const{
    return m_who_isValid;
}

bool OAIIntention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_who_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntention::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evidence_phrase_isValid && m_type_isValid && m_what_isValid && m_who_isValid && true;
}

} // namespace OpenAPI
