/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoCategory::OAIAutoCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoCategory::OAIAutoCategory() {
    this->initializeModel();
}

OAIAutoCategory::~OAIAutoCategory() {}

void OAIAutoCategory::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_strength_score_isSet = false;
    m_strength_score_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAutoCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoCategory::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("sentiment_polarity")]);
    m_sentiment_polarity_isSet = !json[QString("sentiment_polarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentiment_score")]);
    m_sentiment_score_isSet = !json[QString("sentiment_score")].isNull() && m_sentiment_score_isValid;

    m_strength_score_isValid = ::OpenAPI::fromJsonValue(m_strength_score, json[QString("strength_score")]);
    m_strength_score_isSet = !json[QString("strength_score")].isNull() && m_strength_score_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAutoCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("sentiment_polarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentiment_score"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_strength_score_isSet) {
        obj.insert(QString("strength_score"), ::OpenAPI::toJsonValue(m_strength_score));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAISubCategory> OAIAutoCategory::getCategories() const {
    return m_categories;
}
void OAIAutoCategory::setCategories(const QList<OAISubCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIAutoCategory::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIAutoCategory::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIAutoCategory::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAIAutoCategory::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAIAutoCategory::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAIAutoCategory::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

double OAIAutoCategory::getSentimentScore() const {
    return m_sentiment_score;
}
void OAIAutoCategory::setSentimentScore(const double &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAIAutoCategory::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAIAutoCategory::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

double OAIAutoCategory::getStrengthScore() const {
    return m_strength_score;
}
void OAIAutoCategory::setStrengthScore(const double &strength_score) {
    m_strength_score = strength_score;
    m_strength_score_isSet = true;
}

bool OAIAutoCategory::is_strength_score_Set() const{
    return m_strength_score_isSet;
}

bool OAIAutoCategory::is_strength_score_Valid() const{
    return m_strength_score_isValid;
}

QString OAIAutoCategory::getTitle() const {
    return m_title;
}
void OAIAutoCategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAutoCategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAutoCategory::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAutoCategory::getType() const {
    return m_type;
}
void OAIAutoCategory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAutoCategory::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAutoCategory::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAutoCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strength_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_sentiment_polarity_isValid && m_sentiment_score_isValid && m_strength_score_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
