/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationDocumentSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationDocumentSection::OAIConfigurationDocumentSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationDocumentSection::OAIConfigurationDocumentSection() {
    this->initializeModel();
}

OAIConfigurationDocumentSection::~OAIConfigurationDocumentSection() {}

void OAIConfigurationDocumentSection::initializeModel() {

    m_auto_categories_limit_isSet = false;
    m_auto_categories_limit_isValid = false;

    m_concept_topics_limit_isSet = false;
    m_concept_topics_limit_isValid = false;

    m_detect_language_isSet = false;
    m_detect_language_isValid = false;

    m_entity_themes_limit_isSet = false;
    m_entity_themes_limit_isValid = false;

    m_intentions_isSet = false;
    m_intentions_isValid = false;

    m_model_sentiment_isSet = false;
    m_model_sentiment_isValid = false;

    m_named_entities_limit_isSet = false;
    m_named_entities_limit_isValid = false;

    m_named_mentions_limit_isSet = false;
    m_named_mentions_limit_isValid = false;

    m_named_opinions_limit_isSet = false;
    m_named_opinions_limit_isValid = false;

    m_named_relations_limit_isSet = false;
    m_named_relations_limit_isValid = false;

    m_phrases_limit_isSet = false;
    m_phrases_limit_isValid = false;

    m_pos_types_isSet = false;
    m_pos_types_isValid = false;

    m_possible_phrases_limit_isSet = false;
    m_possible_phrases_limit_isValid = false;

    m_query_topics_limit_isSet = false;
    m_query_topics_limit_isValid = false;

    m_summary_limit_isSet = false;
    m_summary_limit_isValid = false;

    m_theme_mentions_limit_isSet = false;
    m_theme_mentions_limit_isValid = false;

    m_themes_limit_isSet = false;
    m_themes_limit_isValid = false;

    m_user_entities_limit_isSet = false;
    m_user_entities_limit_isValid = false;

    m_user_mentions_limit_isSet = false;
    m_user_mentions_limit_isValid = false;

    m_user_opinions_limit_isSet = false;
    m_user_opinions_limit_isValid = false;

    m_user_relations_limit_isSet = false;
    m_user_relations_limit_isValid = false;
}

void OAIConfigurationDocumentSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationDocumentSection::fromJsonObject(QJsonObject json) {

    m_auto_categories_limit_isValid = ::OpenAPI::fromJsonValue(m_auto_categories_limit, json[QString("auto_categories_limit")]);
    m_auto_categories_limit_isSet = !json[QString("auto_categories_limit")].isNull() && m_auto_categories_limit_isValid;

    m_concept_topics_limit_isValid = ::OpenAPI::fromJsonValue(m_concept_topics_limit, json[QString("concept_topics_limit")]);
    m_concept_topics_limit_isSet = !json[QString("concept_topics_limit")].isNull() && m_concept_topics_limit_isValid;

    m_detect_language_isValid = ::OpenAPI::fromJsonValue(m_detect_language, json[QString("detect_language")]);
    m_detect_language_isSet = !json[QString("detect_language")].isNull() && m_detect_language_isValid;

    m_entity_themes_limit_isValid = ::OpenAPI::fromJsonValue(m_entity_themes_limit, json[QString("entity_themes_limit")]);
    m_entity_themes_limit_isSet = !json[QString("entity_themes_limit")].isNull() && m_entity_themes_limit_isValid;

    m_intentions_isValid = ::OpenAPI::fromJsonValue(m_intentions, json[QString("intentions")]);
    m_intentions_isSet = !json[QString("intentions")].isNull() && m_intentions_isValid;

    m_model_sentiment_isValid = ::OpenAPI::fromJsonValue(m_model_sentiment, json[QString("model_sentiment")]);
    m_model_sentiment_isSet = !json[QString("model_sentiment")].isNull() && m_model_sentiment_isValid;

    m_named_entities_limit_isValid = ::OpenAPI::fromJsonValue(m_named_entities_limit, json[QString("named_entities_limit")]);
    m_named_entities_limit_isSet = !json[QString("named_entities_limit")].isNull() && m_named_entities_limit_isValid;

    m_named_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_named_mentions_limit, json[QString("named_mentions_limit")]);
    m_named_mentions_limit_isSet = !json[QString("named_mentions_limit")].isNull() && m_named_mentions_limit_isValid;

    m_named_opinions_limit_isValid = ::OpenAPI::fromJsonValue(m_named_opinions_limit, json[QString("named_opinions_limit")]);
    m_named_opinions_limit_isSet = !json[QString("named_opinions_limit")].isNull() && m_named_opinions_limit_isValid;

    m_named_relations_limit_isValid = ::OpenAPI::fromJsonValue(m_named_relations_limit, json[QString("named_relations_limit")]);
    m_named_relations_limit_isSet = !json[QString("named_relations_limit")].isNull() && m_named_relations_limit_isValid;

    m_phrases_limit_isValid = ::OpenAPI::fromJsonValue(m_phrases_limit, json[QString("phrases_limit")]);
    m_phrases_limit_isSet = !json[QString("phrases_limit")].isNull() && m_phrases_limit_isValid;

    m_pos_types_isValid = ::OpenAPI::fromJsonValue(m_pos_types, json[QString("pos_types")]);
    m_pos_types_isSet = !json[QString("pos_types")].isNull() && m_pos_types_isValid;

    m_possible_phrases_limit_isValid = ::OpenAPI::fromJsonValue(m_possible_phrases_limit, json[QString("possible_phrases_limit")]);
    m_possible_phrases_limit_isSet = !json[QString("possible_phrases_limit")].isNull() && m_possible_phrases_limit_isValid;

    m_query_topics_limit_isValid = ::OpenAPI::fromJsonValue(m_query_topics_limit, json[QString("query_topics_limit")]);
    m_query_topics_limit_isSet = !json[QString("query_topics_limit")].isNull() && m_query_topics_limit_isValid;

    m_summary_limit_isValid = ::OpenAPI::fromJsonValue(m_summary_limit, json[QString("summary_limit")]);
    m_summary_limit_isSet = !json[QString("summary_limit")].isNull() && m_summary_limit_isValid;

    m_theme_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_theme_mentions_limit, json[QString("theme_mentions_limit")]);
    m_theme_mentions_limit_isSet = !json[QString("theme_mentions_limit")].isNull() && m_theme_mentions_limit_isValid;

    m_themes_limit_isValid = ::OpenAPI::fromJsonValue(m_themes_limit, json[QString("themes_limit")]);
    m_themes_limit_isSet = !json[QString("themes_limit")].isNull() && m_themes_limit_isValid;

    m_user_entities_limit_isValid = ::OpenAPI::fromJsonValue(m_user_entities_limit, json[QString("user_entities_limit")]);
    m_user_entities_limit_isSet = !json[QString("user_entities_limit")].isNull() && m_user_entities_limit_isValid;

    m_user_mentions_limit_isValid = ::OpenAPI::fromJsonValue(m_user_mentions_limit, json[QString("user_mentions_limit")]);
    m_user_mentions_limit_isSet = !json[QString("user_mentions_limit")].isNull() && m_user_mentions_limit_isValid;

    m_user_opinions_limit_isValid = ::OpenAPI::fromJsonValue(m_user_opinions_limit, json[QString("user_opinions_limit")]);
    m_user_opinions_limit_isSet = !json[QString("user_opinions_limit")].isNull() && m_user_opinions_limit_isValid;

    m_user_relations_limit_isValid = ::OpenAPI::fromJsonValue(m_user_relations_limit, json[QString("user_relations_limit")]);
    m_user_relations_limit_isSet = !json[QString("user_relations_limit")].isNull() && m_user_relations_limit_isValid;
}

QString OAIConfigurationDocumentSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationDocumentSection::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_categories_limit_isSet) {
        obj.insert(QString("auto_categories_limit"), ::OpenAPI::toJsonValue(m_auto_categories_limit));
    }
    if (m_concept_topics_limit_isSet) {
        obj.insert(QString("concept_topics_limit"), ::OpenAPI::toJsonValue(m_concept_topics_limit));
    }
    if (m_detect_language_isSet) {
        obj.insert(QString("detect_language"), ::OpenAPI::toJsonValue(m_detect_language));
    }
    if (m_entity_themes_limit_isSet) {
        obj.insert(QString("entity_themes_limit"), ::OpenAPI::toJsonValue(m_entity_themes_limit));
    }
    if (m_intentions_isSet) {
        obj.insert(QString("intentions"), ::OpenAPI::toJsonValue(m_intentions));
    }
    if (m_model_sentiment_isSet) {
        obj.insert(QString("model_sentiment"), ::OpenAPI::toJsonValue(m_model_sentiment));
    }
    if (m_named_entities_limit_isSet) {
        obj.insert(QString("named_entities_limit"), ::OpenAPI::toJsonValue(m_named_entities_limit));
    }
    if (m_named_mentions_limit_isSet) {
        obj.insert(QString("named_mentions_limit"), ::OpenAPI::toJsonValue(m_named_mentions_limit));
    }
    if (m_named_opinions_limit_isSet) {
        obj.insert(QString("named_opinions_limit"), ::OpenAPI::toJsonValue(m_named_opinions_limit));
    }
    if (m_named_relations_limit_isSet) {
        obj.insert(QString("named_relations_limit"), ::OpenAPI::toJsonValue(m_named_relations_limit));
    }
    if (m_phrases_limit_isSet) {
        obj.insert(QString("phrases_limit"), ::OpenAPI::toJsonValue(m_phrases_limit));
    }
    if (m_pos_types_isSet) {
        obj.insert(QString("pos_types"), ::OpenAPI::toJsonValue(m_pos_types));
    }
    if (m_possible_phrases_limit_isSet) {
        obj.insert(QString("possible_phrases_limit"), ::OpenAPI::toJsonValue(m_possible_phrases_limit));
    }
    if (m_query_topics_limit_isSet) {
        obj.insert(QString("query_topics_limit"), ::OpenAPI::toJsonValue(m_query_topics_limit));
    }
    if (m_summary_limit_isSet) {
        obj.insert(QString("summary_limit"), ::OpenAPI::toJsonValue(m_summary_limit));
    }
    if (m_theme_mentions_limit_isSet) {
        obj.insert(QString("theme_mentions_limit"), ::OpenAPI::toJsonValue(m_theme_mentions_limit));
    }
    if (m_themes_limit_isSet) {
        obj.insert(QString("themes_limit"), ::OpenAPI::toJsonValue(m_themes_limit));
    }
    if (m_user_entities_limit_isSet) {
        obj.insert(QString("user_entities_limit"), ::OpenAPI::toJsonValue(m_user_entities_limit));
    }
    if (m_user_mentions_limit_isSet) {
        obj.insert(QString("user_mentions_limit"), ::OpenAPI::toJsonValue(m_user_mentions_limit));
    }
    if (m_user_opinions_limit_isSet) {
        obj.insert(QString("user_opinions_limit"), ::OpenAPI::toJsonValue(m_user_opinions_limit));
    }
    if (m_user_relations_limit_isSet) {
        obj.insert(QString("user_relations_limit"), ::OpenAPI::toJsonValue(m_user_relations_limit));
    }
    return obj;
}

qint32 OAIConfigurationDocumentSection::getAutoCategoriesLimit() const {
    return m_auto_categories_limit;
}
void OAIConfigurationDocumentSection::setAutoCategoriesLimit(const qint32 &auto_categories_limit) {
    m_auto_categories_limit = auto_categories_limit;
    m_auto_categories_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_auto_categories_limit_Set() const{
    return m_auto_categories_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_auto_categories_limit_Valid() const{
    return m_auto_categories_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getConceptTopicsLimit() const {
    return m_concept_topics_limit;
}
void OAIConfigurationDocumentSection::setConceptTopicsLimit(const qint32 &concept_topics_limit) {
    m_concept_topics_limit = concept_topics_limit;
    m_concept_topics_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_concept_topics_limit_Set() const{
    return m_concept_topics_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_concept_topics_limit_Valid() const{
    return m_concept_topics_limit_isValid;
}

bool OAIConfigurationDocumentSection::isDetectLanguage() const {
    return m_detect_language;
}
void OAIConfigurationDocumentSection::setDetectLanguage(const bool &detect_language) {
    m_detect_language = detect_language;
    m_detect_language_isSet = true;
}

bool OAIConfigurationDocumentSection::is_detect_language_Set() const{
    return m_detect_language_isSet;
}

bool OAIConfigurationDocumentSection::is_detect_language_Valid() const{
    return m_detect_language_isValid;
}

qint32 OAIConfigurationDocumentSection::getEntityThemesLimit() const {
    return m_entity_themes_limit;
}
void OAIConfigurationDocumentSection::setEntityThemesLimit(const qint32 &entity_themes_limit) {
    m_entity_themes_limit = entity_themes_limit;
    m_entity_themes_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_entity_themes_limit_Set() const{
    return m_entity_themes_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_entity_themes_limit_Valid() const{
    return m_entity_themes_limit_isValid;
}

bool OAIConfigurationDocumentSection::isIntentions() const {
    return m_intentions;
}
void OAIConfigurationDocumentSection::setIntentions(const bool &intentions) {
    m_intentions = intentions;
    m_intentions_isSet = true;
}

bool OAIConfigurationDocumentSection::is_intentions_Set() const{
    return m_intentions_isSet;
}

bool OAIConfigurationDocumentSection::is_intentions_Valid() const{
    return m_intentions_isValid;
}

bool OAIConfigurationDocumentSection::isModelSentiment() const {
    return m_model_sentiment;
}
void OAIConfigurationDocumentSection::setModelSentiment(const bool &model_sentiment) {
    m_model_sentiment = model_sentiment;
    m_model_sentiment_isSet = true;
}

bool OAIConfigurationDocumentSection::is_model_sentiment_Set() const{
    return m_model_sentiment_isSet;
}

bool OAIConfigurationDocumentSection::is_model_sentiment_Valid() const{
    return m_model_sentiment_isValid;
}

qint32 OAIConfigurationDocumentSection::getNamedEntitiesLimit() const {
    return m_named_entities_limit;
}
void OAIConfigurationDocumentSection::setNamedEntitiesLimit(const qint32 &named_entities_limit) {
    m_named_entities_limit = named_entities_limit;
    m_named_entities_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_named_entities_limit_Set() const{
    return m_named_entities_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_named_entities_limit_Valid() const{
    return m_named_entities_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getNamedMentionsLimit() const {
    return m_named_mentions_limit;
}
void OAIConfigurationDocumentSection::setNamedMentionsLimit(const qint32 &named_mentions_limit) {
    m_named_mentions_limit = named_mentions_limit;
    m_named_mentions_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_named_mentions_limit_Set() const{
    return m_named_mentions_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_named_mentions_limit_Valid() const{
    return m_named_mentions_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getNamedOpinionsLimit() const {
    return m_named_opinions_limit;
}
void OAIConfigurationDocumentSection::setNamedOpinionsLimit(const qint32 &named_opinions_limit) {
    m_named_opinions_limit = named_opinions_limit;
    m_named_opinions_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_named_opinions_limit_Set() const{
    return m_named_opinions_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_named_opinions_limit_Valid() const{
    return m_named_opinions_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getNamedRelationsLimit() const {
    return m_named_relations_limit;
}
void OAIConfigurationDocumentSection::setNamedRelationsLimit(const qint32 &named_relations_limit) {
    m_named_relations_limit = named_relations_limit;
    m_named_relations_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_named_relations_limit_Set() const{
    return m_named_relations_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_named_relations_limit_Valid() const{
    return m_named_relations_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getPhrasesLimit() const {
    return m_phrases_limit;
}
void OAIConfigurationDocumentSection::setPhrasesLimit(const qint32 &phrases_limit) {
    m_phrases_limit = phrases_limit;
    m_phrases_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_phrases_limit_Set() const{
    return m_phrases_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_phrases_limit_Valid() const{
    return m_phrases_limit_isValid;
}

QString OAIConfigurationDocumentSection::getPosTypes() const {
    return m_pos_types;
}
void OAIConfigurationDocumentSection::setPosTypes(const QString &pos_types) {
    m_pos_types = pos_types;
    m_pos_types_isSet = true;
}

bool OAIConfigurationDocumentSection::is_pos_types_Set() const{
    return m_pos_types_isSet;
}

bool OAIConfigurationDocumentSection::is_pos_types_Valid() const{
    return m_pos_types_isValid;
}

qint32 OAIConfigurationDocumentSection::getPossiblePhrasesLimit() const {
    return m_possible_phrases_limit;
}
void OAIConfigurationDocumentSection::setPossiblePhrasesLimit(const qint32 &possible_phrases_limit) {
    m_possible_phrases_limit = possible_phrases_limit;
    m_possible_phrases_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_possible_phrases_limit_Set() const{
    return m_possible_phrases_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_possible_phrases_limit_Valid() const{
    return m_possible_phrases_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getQueryTopicsLimit() const {
    return m_query_topics_limit;
}
void OAIConfigurationDocumentSection::setQueryTopicsLimit(const qint32 &query_topics_limit) {
    m_query_topics_limit = query_topics_limit;
    m_query_topics_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_query_topics_limit_Set() const{
    return m_query_topics_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_query_topics_limit_Valid() const{
    return m_query_topics_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getSummaryLimit() const {
    return m_summary_limit;
}
void OAIConfigurationDocumentSection::setSummaryLimit(const qint32 &summary_limit) {
    m_summary_limit = summary_limit;
    m_summary_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_summary_limit_Set() const{
    return m_summary_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_summary_limit_Valid() const{
    return m_summary_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getThemeMentionsLimit() const {
    return m_theme_mentions_limit;
}
void OAIConfigurationDocumentSection::setThemeMentionsLimit(const qint32 &theme_mentions_limit) {
    m_theme_mentions_limit = theme_mentions_limit;
    m_theme_mentions_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_theme_mentions_limit_Set() const{
    return m_theme_mentions_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_theme_mentions_limit_Valid() const{
    return m_theme_mentions_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getThemesLimit() const {
    return m_themes_limit;
}
void OAIConfigurationDocumentSection::setThemesLimit(const qint32 &themes_limit) {
    m_themes_limit = themes_limit;
    m_themes_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_themes_limit_Set() const{
    return m_themes_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_themes_limit_Valid() const{
    return m_themes_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getUserEntitiesLimit() const {
    return m_user_entities_limit;
}
void OAIConfigurationDocumentSection::setUserEntitiesLimit(const qint32 &user_entities_limit) {
    m_user_entities_limit = user_entities_limit;
    m_user_entities_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_user_entities_limit_Set() const{
    return m_user_entities_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_user_entities_limit_Valid() const{
    return m_user_entities_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getUserMentionsLimit() const {
    return m_user_mentions_limit;
}
void OAIConfigurationDocumentSection::setUserMentionsLimit(const qint32 &user_mentions_limit) {
    m_user_mentions_limit = user_mentions_limit;
    m_user_mentions_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_user_mentions_limit_Set() const{
    return m_user_mentions_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_user_mentions_limit_Valid() const{
    return m_user_mentions_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getUserOpinionsLimit() const {
    return m_user_opinions_limit;
}
void OAIConfigurationDocumentSection::setUserOpinionsLimit(const qint32 &user_opinions_limit) {
    m_user_opinions_limit = user_opinions_limit;
    m_user_opinions_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_user_opinions_limit_Set() const{
    return m_user_opinions_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_user_opinions_limit_Valid() const{
    return m_user_opinions_limit_isValid;
}

qint32 OAIConfigurationDocumentSection::getUserRelationsLimit() const {
    return m_user_relations_limit;
}
void OAIConfigurationDocumentSection::setUserRelationsLimit(const qint32 &user_relations_limit) {
    m_user_relations_limit = user_relations_limit;
    m_user_relations_limit_isSet = true;
}

bool OAIConfigurationDocumentSection::is_user_relations_limit_Set() const{
    return m_user_relations_limit_isSet;
}

bool OAIConfigurationDocumentSection::is_user_relations_limit_Valid() const{
    return m_user_relations_limit_isValid;
}

bool OAIConfigurationDocumentSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_categories_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concept_topics_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_themes_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_opinions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_relations_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrases_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_phrases_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_topics_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mentions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_opinions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_relations_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationDocumentSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_categories_limit_isValid && m_concept_topics_limit_isValid && m_detect_language_isValid && m_entity_themes_limit_isValid && m_intentions_isValid && m_model_sentiment_isValid && m_named_entities_limit_isValid && m_named_mentions_limit_isValid && m_named_opinions_limit_isValid && m_named_relations_limit_isValid && m_phrases_limit_isValid && m_pos_types_isValid && m_possible_phrases_limit_isValid && m_query_topics_limit_isValid && m_summary_limit_isValid && m_theme_mentions_limit_isValid && m_themes_limit_isValid && m_user_entities_limit_isValid && m_user_mentions_limit_isValid && m_user_opinions_limit_isValid && m_user_relations_limit_isValid && true;
}

} // namespace OpenAPI
