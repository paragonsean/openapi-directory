/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureSettingsSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureSettingsSection::OAIFeatureSettingsSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureSettingsSection::OAIFeatureSettingsSection() {
    this->initializeModel();
}

OAIFeatureSettingsSection::~OAIFeatureSettingsSection() {}

void OAIFeatureSettingsSection::initializeModel() {

    m_blacklist_isSet = false;
    m_blacklist_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_sentiment_phrases_isSet = false;
    m_sentiment_phrases_isValid = false;

    m_taxonomy_isSet = false;
    m_taxonomy_isValid = false;

    m_user_categories_isSet = false;
    m_user_categories_isValid = false;

    m_user_entities_isSet = false;
    m_user_entities_isValid = false;
}

void OAIFeatureSettingsSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureSettingsSection::fromJsonObject(QJsonObject json) {

    m_blacklist_isValid = ::OpenAPI::fromJsonValue(m_blacklist, json[QString("blacklist")]);
    m_blacklist_isSet = !json[QString("blacklist")].isNull() && m_blacklist_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_sentiment_phrases_isValid = ::OpenAPI::fromJsonValue(m_sentiment_phrases, json[QString("sentiment_phrases")]);
    m_sentiment_phrases_isSet = !json[QString("sentiment_phrases")].isNull() && m_sentiment_phrases_isValid;

    m_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_taxonomy, json[QString("taxonomy")]);
    m_taxonomy_isSet = !json[QString("taxonomy")].isNull() && m_taxonomy_isValid;

    m_user_categories_isValid = ::OpenAPI::fromJsonValue(m_user_categories, json[QString("user_categories")]);
    m_user_categories_isSet = !json[QString("user_categories")].isNull() && m_user_categories_isValid;

    m_user_entities_isValid = ::OpenAPI::fromJsonValue(m_user_entities, json[QString("user_entities")]);
    m_user_entities_isSet = !json[QString("user_entities")].isNull() && m_user_entities_isValid;
}

QString OAIFeatureSettingsSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureSettingsSection::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklist_isSet) {
        obj.insert(QString("blacklist"), ::OpenAPI::toJsonValue(m_blacklist));
    }
    if (m_queries_isSet) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_sentiment_phrases_isSet) {
        obj.insert(QString("sentiment_phrases"), ::OpenAPI::toJsonValue(m_sentiment_phrases));
    }
    if (m_taxonomy_isSet) {
        obj.insert(QString("taxonomy"), ::OpenAPI::toJsonValue(m_taxonomy));
    }
    if (m_user_categories_isSet) {
        obj.insert(QString("user_categories"), ::OpenAPI::toJsonValue(m_user_categories));
    }
    if (m_user_entities_isSet) {
        obj.insert(QString("user_entities"), ::OpenAPI::toJsonValue(m_user_entities));
    }
    return obj;
}

bool OAIFeatureSettingsSection::isBlacklist() const {
    return m_blacklist;
}
void OAIFeatureSettingsSection::setBlacklist(const bool &blacklist) {
    m_blacklist = blacklist;
    m_blacklist_isSet = true;
}

bool OAIFeatureSettingsSection::is_blacklist_Set() const{
    return m_blacklist_isSet;
}

bool OAIFeatureSettingsSection::is_blacklist_Valid() const{
    return m_blacklist_isValid;
}

bool OAIFeatureSettingsSection::isQueries() const {
    return m_queries;
}
void OAIFeatureSettingsSection::setQueries(const bool &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIFeatureSettingsSection::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIFeatureSettingsSection::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAIFeatureSettingsSection::isSentimentPhrases() const {
    return m_sentiment_phrases;
}
void OAIFeatureSettingsSection::setSentimentPhrases(const bool &sentiment_phrases) {
    m_sentiment_phrases = sentiment_phrases;
    m_sentiment_phrases_isSet = true;
}

bool OAIFeatureSettingsSection::is_sentiment_phrases_Set() const{
    return m_sentiment_phrases_isSet;
}

bool OAIFeatureSettingsSection::is_sentiment_phrases_Valid() const{
    return m_sentiment_phrases_isValid;
}

bool OAIFeatureSettingsSection::isTaxonomy() const {
    return m_taxonomy;
}
void OAIFeatureSettingsSection::setTaxonomy(const bool &taxonomy) {
    m_taxonomy = taxonomy;
    m_taxonomy_isSet = true;
}

bool OAIFeatureSettingsSection::is_taxonomy_Set() const{
    return m_taxonomy_isSet;
}

bool OAIFeatureSettingsSection::is_taxonomy_Valid() const{
    return m_taxonomy_isValid;
}

bool OAIFeatureSettingsSection::isUserCategories() const {
    return m_user_categories;
}
void OAIFeatureSettingsSection::setUserCategories(const bool &user_categories) {
    m_user_categories = user_categories;
    m_user_categories_isSet = true;
}

bool OAIFeatureSettingsSection::is_user_categories_Set() const{
    return m_user_categories_isSet;
}

bool OAIFeatureSettingsSection::is_user_categories_Valid() const{
    return m_user_categories_isValid;
}

bool OAIFeatureSettingsSection::isUserEntities() const {
    return m_user_entities;
}
void OAIFeatureSettingsSection::setUserEntities(const bool &user_entities) {
    m_user_entities = user_entities;
    m_user_entities_isSet = true;
}

bool OAIFeatureSettingsSection::is_user_entities_Set() const{
    return m_user_entities_isSet;
}

bool OAIFeatureSettingsSection::is_user_entities_Valid() const{
    return m_user_entities_isValid;
}

bool OAIFeatureSettingsSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_phrases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureSettingsSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blacklist_isValid && m_queries_isValid && m_sentiment_phrases_isValid && m_taxonomy_isValid && m_user_categories_isValid && m_user_entities_isValid && true;
}

} // namespace OpenAPI
