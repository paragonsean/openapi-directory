/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

qint32 OAILocation::getIndex() const {
    return m_index;
}
void OAILocation::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAILocation::is_index_Set() const{
    return m_index_isSet;
}

bool OAILocation::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAILocation::getLength() const {
    return m_length;
}
void OAILocation::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAILocation::is_length_Set() const{
    return m_length_isSet;
}

bool OAILocation::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAILocation::getOffset() const {
    return m_offset;
}
void OAILocation::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAILocation::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAILocation::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_length_isValid && m_offset_isValid && true;
}

} // namespace OpenAPI
