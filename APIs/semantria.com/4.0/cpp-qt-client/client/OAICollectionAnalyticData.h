/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICollectionAnalyticData.h
 *
 * 
 */

#ifndef OAICollectionAnalyticData_H
#define OAICollectionAnalyticData_H

#include <QJsonObject>

#include "OAIEntity.h"
#include "OAIFacet.h"
#include "OAITheme.h"
#include "OAITopic.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEntity;
class OAIFacet;
class OAITopic;
class OAITheme;

class OAICollectionAnalyticData : public OAIObject {
public:
    OAICollectionAnalyticData();
    OAICollectionAnalyticData(QString json);
    ~OAICollectionAnalyticData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConfigId() const;
    void setConfigId(const QString &config_id);
    bool is_config_id_Set() const;
    bool is_config_id_Valid() const;

    QList<OAIEntity> getEntities() const;
    void setEntities(const QList<OAIEntity> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QList<OAIFacet> getFacets() const;
    void setFacets(const QList<OAIFacet> &facets);
    bool is_facets_Set() const;
    bool is_facets_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QList<OAITopic> getTaxonomy() const;
    void setTaxonomy(const QList<OAITopic> &taxonomy);
    bool is_taxonomy_Set() const;
    bool is_taxonomy_Valid() const;

    QList<OAITheme> getThemes() const;
    void setThemes(const QList<OAITheme> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    QList<OAITopic> getTopics() const;
    void setTopics(const QList<OAITopic> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_config_id;
    bool m_config_id_isSet;
    bool m_config_id_isValid;

    QList<OAIEntity> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QList<OAIFacet> m_facets;
    bool m_facets_isSet;
    bool m_facets_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QList<OAITopic> m_taxonomy;
    bool m_taxonomy_isSet;
    bool m_taxonomy_isValid;

    QList<OAITheme> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    QList<OAITopic> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICollectionAnalyticData)

#endif // OAICollectionAnalyticData_H
