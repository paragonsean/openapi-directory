/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxonomyNode_InsertVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxonomyNode_InsertVersion::OAITaxonomyNode_InsertVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxonomyNode_InsertVersion::OAITaxonomyNode_InsertVersion() {
    this->initializeModel();
}

OAITaxonomyNode_InsertVersion::~OAITaxonomyNode_InsertVersion() {}

void OAITaxonomyNode_InsertVersion::initializeModel() {

    m_enforce_parent_matching_isSet = false;
    m_enforce_parent_matching_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAITaxonomyNode_InsertVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxonomyNode_InsertVersion::fromJsonObject(QJsonObject json) {

    m_enforce_parent_matching_isValid = ::OpenAPI::fromJsonValue(m_enforce_parent_matching, json[QString("enforce_parent_matching")]);
    m_enforce_parent_matching_isSet = !json[QString("enforce_parent_matching")].isNull() && m_enforce_parent_matching_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAITaxonomyNode_InsertVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxonomyNode_InsertVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_enforce_parent_matching_isSet) {
        obj.insert(QString("enforce_parent_matching"), ::OpenAPI::toJsonValue(m_enforce_parent_matching));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

bool OAITaxonomyNode_InsertVersion::isEnforceParentMatching() const {
    return m_enforce_parent_matching;
}
void OAITaxonomyNode_InsertVersion::setEnforceParentMatching(const bool &enforce_parent_matching) {
    m_enforce_parent_matching = enforce_parent_matching;
    m_enforce_parent_matching_isSet = true;
}

bool OAITaxonomyNode_InsertVersion::is_enforce_parent_matching_Set() const{
    return m_enforce_parent_matching_isSet;
}

bool OAITaxonomyNode_InsertVersion::is_enforce_parent_matching_Valid() const{
    return m_enforce_parent_matching_isValid;
}

QString OAITaxonomyNode_InsertVersion::getName() const {
    return m_name;
}
void OAITaxonomyNode_InsertVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaxonomyNode_InsertVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaxonomyNode_InsertVersion::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIObject> OAITaxonomyNode_InsertVersion::getNodes() const {
    return m_nodes;
}
void OAITaxonomyNode_InsertVersion::setNodes(const QList<OAIObject> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAITaxonomyNode_InsertVersion::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAITaxonomyNode_InsertVersion::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QList<OAITaxonomyTopic> OAITaxonomyNode_InsertVersion::getTopics() const {
    return m_topics;
}
void OAITaxonomyNode_InsertVersion::setTopics(const QList<OAITaxonomyTopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAITaxonomyNode_InsertVersion::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAITaxonomyNode_InsertVersion::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAITaxonomyNode_InsertVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforce_parent_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxonomyNode_InsertVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
