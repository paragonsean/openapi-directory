/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeatureDiscoveryModeSection.h
 *
 * 
 */

#ifndef OAIFeatureDiscoveryModeSection_H
#define OAIFeatureDiscoveryModeSection_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFeatureDiscoveryModeSection : public OAIObject {
public:
    OAIFeatureDiscoveryModeSection();
    OAIFeatureDiscoveryModeSection(QString json);
    ~OAIFeatureDiscoveryModeSection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEntityMentions() const;
    void setEntityMentions(const bool &entity_mentions);
    bool is_entity_mentions_Set() const;
    bool is_entity_mentions_Valid() const;

    bool isFacetAttributes() const;
    void setFacetAttributes(const bool &facet_attributes);
    bool is_facet_attributes_Set() const;
    bool is_facet_attributes_Valid() const;

    bool isFacetMentioins() const;
    void setFacetMentioins(const bool &facet_mentioins);
    bool is_facet_mentioins_Set() const;
    bool is_facet_mentioins_Valid() const;

    bool isFacets() const;
    void setFacets(const bool &facets);
    bool is_facets_Set() const;
    bool is_facets_Valid() const;

    bool isNamedEntities() const;
    void setNamedEntities(const bool &named_entities);
    bool is_named_entities_Set() const;
    bool is_named_entities_Valid() const;

    bool isQueries() const;
    void setQueries(const bool &queries);
    bool is_queries_Set() const;
    bool is_queries_Valid() const;

    bool isTaxonomy() const;
    void setTaxonomy(const bool &taxonomy);
    bool is_taxonomy_Set() const;
    bool is_taxonomy_Valid() const;

    bool isThemeMentions() const;
    void setThemeMentions(const bool &theme_mentions);
    bool is_theme_mentions_Set() const;
    bool is_theme_mentions_Valid() const;

    bool isThemes() const;
    void setThemes(const bool &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    bool isUserCategories() const;
    void setUserCategories(const bool &user_categories);
    bool is_user_categories_Set() const;
    bool is_user_categories_Valid() const;

    bool isUserEntities() const;
    void setUserEntities(const bool &user_entities);
    bool is_user_entities_Set() const;
    bool is_user_entities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_entity_mentions;
    bool m_entity_mentions_isSet;
    bool m_entity_mentions_isValid;

    bool m_facet_attributes;
    bool m_facet_attributes_isSet;
    bool m_facet_attributes_isValid;

    bool m_facet_mentioins;
    bool m_facet_mentioins_isSet;
    bool m_facet_mentioins_isValid;

    bool m_facets;
    bool m_facets_isSet;
    bool m_facets_isValid;

    bool m_named_entities;
    bool m_named_entities_isSet;
    bool m_named_entities_isValid;

    bool m_queries;
    bool m_queries_isSet;
    bool m_queries_isValid;

    bool m_taxonomy;
    bool m_taxonomy_isSet;
    bool m_taxonomy_isValid;

    bool m_theme_mentions;
    bool m_theme_mentions_isSet;
    bool m_theme_mentions_isValid;

    bool m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    bool m_user_categories;
    bool m_user_categories_isSet;
    bool m_user_categories_isValid;

    bool m_user_entities;
    bool m_user_entities_isSet;
    bool m_user_entities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeatureDiscoveryModeSection)

#endif // OAIFeatureDiscoveryModeSection_H
