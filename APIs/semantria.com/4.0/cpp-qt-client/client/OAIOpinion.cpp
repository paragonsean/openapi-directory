/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpinion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpinion::OAIOpinion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpinion::OAIOpinion() {
    this->initializeModel();
}

OAIOpinion::~OAIOpinion() {}

void OAIOpinion::initializeModel() {

    m_quotation_isSet = false;
    m_quotation_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_speaker_isSet = false;
    m_speaker_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOpinion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpinion::fromJsonObject(QJsonObject json) {

    m_quotation_isValid = ::OpenAPI::fromJsonValue(m_quotation, json[QString("quotation")]);
    m_quotation_isSet = !json[QString("quotation")].isNull() && m_quotation_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("sentiment_polarity")]);
    m_sentiment_polarity_isSet = !json[QString("sentiment_polarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentiment_score")]);
    m_sentiment_score_isSet = !json[QString("sentiment_score")].isNull() && m_sentiment_score_isValid;

    m_speaker_isValid = ::OpenAPI::fromJsonValue(m_speaker, json[QString("speaker")]);
    m_speaker_isSet = !json[QString("speaker")].isNull() && m_speaker_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOpinion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpinion::asJsonObject() const {
    QJsonObject obj;
    if (m_quotation_isSet) {
        obj.insert(QString("quotation"), ::OpenAPI::toJsonValue(m_quotation));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("sentiment_polarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentiment_score"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_speaker_isSet) {
        obj.insert(QString("speaker"), ::OpenAPI::toJsonValue(m_speaker));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOpinion::getQuotation() const {
    return m_quotation;
}
void OAIOpinion::setQuotation(const QString &quotation) {
    m_quotation = quotation;
    m_quotation_isSet = true;
}

bool OAIOpinion::is_quotation_Set() const{
    return m_quotation_isSet;
}

bool OAIOpinion::is_quotation_Valid() const{
    return m_quotation_isValid;
}

QString OAIOpinion::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAIOpinion::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAIOpinion::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAIOpinion::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

double OAIOpinion::getSentimentScore() const {
    return m_sentiment_score;
}
void OAIOpinion::setSentimentScore(const double &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAIOpinion::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAIOpinion::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

float OAIOpinion::getSpeaker() const {
    return m_speaker;
}
void OAIOpinion::setSpeaker(const float &speaker) {
    m_speaker = speaker;
    m_speaker_isSet = true;
}

bool OAIOpinion::is_speaker_Set() const{
    return m_speaker_isSet;
}

bool OAIOpinion::is_speaker_Valid() const{
    return m_speaker_isValid;
}

QString OAIOpinion::getTopic() const {
    return m_topic;
}
void OAIOpinion::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIOpinion::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIOpinion::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIOpinion::getType() const {
    return m_type;
}
void OAIOpinion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOpinion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOpinion::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOpinion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpinion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quotation_isValid && m_sentiment_polarity_isValid && m_sentiment_score_isValid && m_speaker_isValid && m_topic_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
