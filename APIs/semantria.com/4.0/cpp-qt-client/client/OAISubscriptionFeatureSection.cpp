/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionFeatureSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionFeatureSection::OAISubscriptionFeatureSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionFeatureSection::OAISubscriptionFeatureSection() {
    this->initializeModel();
}

OAISubscriptionFeatureSection::~OAISubscriptionFeatureSection() {}

void OAISubscriptionFeatureSection::initializeModel() {

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_html_processing_isSet = false;
    m_html_processing_isValid = false;

    m_supported_languages_isSet = false;
    m_supported_languages_isValid = false;

    m_templates_isSet = false;
    m_templates_isValid = false;
}

void OAISubscriptionFeatureSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionFeatureSection::fromJsonObject(QJsonObject json) {

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_html_processing_isValid = ::OpenAPI::fromJsonValue(m_html_processing, json[QString("html_processing")]);
    m_html_processing_isSet = !json[QString("html_processing")].isNull() && m_html_processing_isValid;

    m_supported_languages_isValid = ::OpenAPI::fromJsonValue(m_supported_languages, json[QString("supported_languages")]);
    m_supported_languages_isSet = !json[QString("supported_languages")].isNull() && m_supported_languages_isValid;

    m_templates_isValid = ::OpenAPI::fromJsonValue(m_templates, json[QString("templates")]);
    m_templates_isSet = !json[QString("templates")].isNull() && m_templates_isValid;
}

QString OAISubscriptionFeatureSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionFeatureSection::asJsonObject() const {
    QJsonObject obj;
    if (m_collection.isSet()) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_html_processing_isSet) {
        obj.insert(QString("html_processing"), ::OpenAPI::toJsonValue(m_html_processing));
    }
    if (m_supported_languages_isSet) {
        obj.insert(QString("supported_languages"), ::OpenAPI::toJsonValue(m_supported_languages));
    }
    if (m_templates.isSet()) {
        obj.insert(QString("templates"), ::OpenAPI::toJsonValue(m_templates));
    }
    return obj;
}

OAISubscriptionFeatureSectionCollection OAISubscriptionFeatureSection::getCollection() const {
    return m_collection;
}
void OAISubscriptionFeatureSection::setCollection(const OAISubscriptionFeatureSectionCollection &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAISubscriptionFeatureSection::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAISubscriptionFeatureSection::is_collection_Valid() const{
    return m_collection_isValid;
}

OAISubscriptionFeatureSectionDocument OAISubscriptionFeatureSection::getDocument() const {
    return m_document;
}
void OAISubscriptionFeatureSection::setDocument(const OAISubscriptionFeatureSectionDocument &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAISubscriptionFeatureSection::is_document_Set() const{
    return m_document_isSet;
}

bool OAISubscriptionFeatureSection::is_document_Valid() const{
    return m_document_isValid;
}

bool OAISubscriptionFeatureSection::isHtmlProcessing() const {
    return m_html_processing;
}
void OAISubscriptionFeatureSection::setHtmlProcessing(const bool &html_processing) {
    m_html_processing = html_processing;
    m_html_processing_isSet = true;
}

bool OAISubscriptionFeatureSection::is_html_processing_Set() const{
    return m_html_processing_isSet;
}

bool OAISubscriptionFeatureSection::is_html_processing_Valid() const{
    return m_html_processing_isValid;
}

QString OAISubscriptionFeatureSection::getSupportedLanguages() const {
    return m_supported_languages;
}
void OAISubscriptionFeatureSection::setSupportedLanguages(const QString &supported_languages) {
    m_supported_languages = supported_languages;
    m_supported_languages_isSet = true;
}

bool OAISubscriptionFeatureSection::is_supported_languages_Set() const{
    return m_supported_languages_isSet;
}

bool OAISubscriptionFeatureSection::is_supported_languages_Valid() const{
    return m_supported_languages_isValid;
}

OAISubscriptionFeatureSectionTemplate OAISubscriptionFeatureSection::getTemplates() const {
    return m_templates;
}
void OAISubscriptionFeatureSection::setTemplates(const OAISubscriptionFeatureSectionTemplate &templates) {
    m_templates = templates;
    m_templates_isSet = true;
}

bool OAISubscriptionFeatureSection::is_templates_Set() const{
    return m_templates_isSet;
}

bool OAISubscriptionFeatureSection::is_templates_Valid() const{
    return m_templates_isValid;
}

bool OAISubscriptionFeatureSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_languages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionFeatureSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collection_isValid && m_document_isValid && m_html_processing_isValid && m_supported_languages_isValid && m_templates_isValid && true;
}

} // namespace OpenAPI
