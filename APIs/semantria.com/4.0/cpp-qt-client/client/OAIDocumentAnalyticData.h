/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocumentAnalyticData.h
 *
 * 
 */

#ifndef OAIDocumentAnalyticData_H
#define OAIDocumentAnalyticData_H

#include <QJsonObject>

#include "OAIAutoCategory.h"
#include "OAIDetails.h"
#include "OAIEntity.h"
#include "OAIIntention.h"
#include "OAIModelSentiment.h"
#include "OAIOpinion.h"
#include "OAIPhrase.h"
#include "OAIRelation.h"
#include "OAITheme.h"
#include "OAITopic.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoCategory;
class OAIDetails;
class OAIEntity;
class OAIIntention;
class OAIModelSentiment;
class OAIOpinion;
class OAIPhrase;
class OAIRelation;
class OAITopic;
class OAITheme;

class OAIDocumentAnalyticData : public OAIObject {
public:
    OAIDocumentAnalyticData();
    OAIDocumentAnalyticData(QString json);
    ~OAIDocumentAnalyticData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAutoCategory> getAutoCategories() const;
    void setAutoCategories(const QList<OAIAutoCategory> &auto_categories);
    bool is_auto_categories_Set() const;
    bool is_auto_categories_Valid() const;

    QString getConfigId() const;
    void setConfigId(const QString &config_id);
    bool is_config_id_Set() const;
    bool is_config_id_Valid() const;

    QList<OAIDetails> getDetails() const;
    void setDetails(const QList<OAIDetails> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QList<OAIEntity> getEntities() const;
    void setEntities(const QList<OAIEntity> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIIntention> getIntentions() const;
    void setIntentions(const QList<OAIIntention> &intentions);
    bool is_intentions_Set() const;
    bool is_intentions_Valid() const;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    double getLanguageScore() const;
    void setLanguageScore(const double &language_score);
    bool is_language_score_Set() const;
    bool is_language_score_Valid() const;

    OAIModelSentiment getModelSentiment() const;
    void setModelSentiment(const OAIModelSentiment &model_sentiment);
    bool is_model_sentiment_Set() const;
    bool is_model_sentiment_Valid() const;

    QList<OAIOpinion> getOpinions() const;
    void setOpinions(const QList<OAIOpinion> &opinions);
    bool is_opinions_Set() const;
    bool is_opinions_Valid() const;

    QList<OAIPhrase> getPhrases() const;
    void setPhrases(const QList<OAIPhrase> &phrases);
    bool is_phrases_Set() const;
    bool is_phrases_Valid() const;

    QList<OAIRelation> getRelations() const;
    void setRelations(const QList<OAIRelation> &relations);
    bool is_relations_Set() const;
    bool is_relations_Valid() const;

    QString getSentimentPolarity() const;
    void setSentimentPolarity(const QString &sentiment_polarity);
    bool is_sentiment_polarity_Set() const;
    bool is_sentiment_polarity_Valid() const;

    double getSentimentScore() const;
    void setSentimentScore(const double &sentiment_score);
    bool is_sentiment_score_Set() const;
    bool is_sentiment_score_Valid() const;

    QString getSourceText() const;
    void setSourceText(const QString &source_text);
    bool is_source_text_Set() const;
    bool is_source_text_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    QList<OAITopic> getTaxonomy() const;
    void setTaxonomy(const QList<OAITopic> &taxonomy);
    bool is_taxonomy_Set() const;
    bool is_taxonomy_Valid() const;

    QList<OAITheme> getThemes() const;
    void setThemes(const QList<OAITheme> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    QList<OAITopic> getTopics() const;
    void setTopics(const QList<OAITopic> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAutoCategory> m_auto_categories;
    bool m_auto_categories_isSet;
    bool m_auto_categories_isValid;

    QString m_config_id;
    bool m_config_id_isSet;
    bool m_config_id_isValid;

    QList<OAIDetails> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QList<OAIEntity> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIIntention> m_intentions;
    bool m_intentions_isSet;
    bool m_intentions_isValid;

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    double m_language_score;
    bool m_language_score_isSet;
    bool m_language_score_isValid;

    OAIModelSentiment m_model_sentiment;
    bool m_model_sentiment_isSet;
    bool m_model_sentiment_isValid;

    QList<OAIOpinion> m_opinions;
    bool m_opinions_isSet;
    bool m_opinions_isValid;

    QList<OAIPhrase> m_phrases;
    bool m_phrases_isSet;
    bool m_phrases_isValid;

    QList<OAIRelation> m_relations;
    bool m_relations_isSet;
    bool m_relations_isValid;

    QString m_sentiment_polarity;
    bool m_sentiment_polarity_isSet;
    bool m_sentiment_polarity_isValid;

    double m_sentiment_score;
    bool m_sentiment_score_isSet;
    bool m_sentiment_score_isValid;

    QString m_source_text;
    bool m_source_text_isSet;
    bool m_source_text_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    QList<OAITopic> m_taxonomy;
    bool m_taxonomy_isSet;
    bool m_taxonomy_isValid;

    QList<OAITheme> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    QList<OAITopic> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocumentAnalyticData)

#endif // OAIDocumentAnalyticData_H
