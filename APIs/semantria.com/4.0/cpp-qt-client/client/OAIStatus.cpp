/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_service_status_isSet = false;
    m_service_status_isValid = false;

    m_service_version_isSet = false;
    m_service_version_isValid = false;

    m_supported_compression_isSet = false;
    m_supported_compression_isValid = false;

    m_supported_encoding_isSet = false;
    m_supported_encoding_isValid = false;

    m_supported_languages_isSet = false;
    m_supported_languages_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_service_status_isValid = ::OpenAPI::fromJsonValue(m_service_status, json[QString("service_status")]);
    m_service_status_isSet = !json[QString("service_status")].isNull() && m_service_status_isValid;

    m_service_version_isValid = ::OpenAPI::fromJsonValue(m_service_version, json[QString("service_version")]);
    m_service_version_isSet = !json[QString("service_version")].isNull() && m_service_version_isValid;

    m_supported_compression_isValid = ::OpenAPI::fromJsonValue(m_supported_compression, json[QString("supported_compression")]);
    m_supported_compression_isSet = !json[QString("supported_compression")].isNull() && m_supported_compression_isValid;

    m_supported_encoding_isValid = ::OpenAPI::fromJsonValue(m_supported_encoding, json[QString("supported_encoding")]);
    m_supported_encoding_isSet = !json[QString("supported_encoding")].isNull() && m_supported_encoding_isValid;

    m_supported_languages_isValid = ::OpenAPI::fromJsonValue(m_supported_languages, json[QString("supported_languages")]);
    m_supported_languages_isSet = !json[QString("supported_languages")].isNull() && m_supported_languages_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_service_status_isSet) {
        obj.insert(QString("service_status"), ::OpenAPI::toJsonValue(m_service_status));
    }
    if (m_service_version_isSet) {
        obj.insert(QString("service_version"), ::OpenAPI::toJsonValue(m_service_version));
    }
    if (m_supported_compression_isSet) {
        obj.insert(QString("supported_compression"), ::OpenAPI::toJsonValue(m_supported_compression));
    }
    if (m_supported_encoding_isSet) {
        obj.insert(QString("supported_encoding"), ::OpenAPI::toJsonValue(m_supported_encoding));
    }
    if (m_supported_languages.size() > 0) {
        obj.insert(QString("supported_languages"), ::OpenAPI::toJsonValue(m_supported_languages));
    }
    return obj;
}

QString OAIStatus::getApiVersion() const {
    return m_api_version;
}
void OAIStatus::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIStatus::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIStatus::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIStatus::getServiceStatus() const {
    return m_service_status;
}
void OAIStatus::setServiceStatus(const QString &service_status) {
    m_service_status = service_status;
    m_service_status_isSet = true;
}

bool OAIStatus::is_service_status_Set() const{
    return m_service_status_isSet;
}

bool OAIStatus::is_service_status_Valid() const{
    return m_service_status_isValid;
}

QString OAIStatus::getServiceVersion() const {
    return m_service_version;
}
void OAIStatus::setServiceVersion(const QString &service_version) {
    m_service_version = service_version;
    m_service_version_isSet = true;
}

bool OAIStatus::is_service_version_Set() const{
    return m_service_version_isSet;
}

bool OAIStatus::is_service_version_Valid() const{
    return m_service_version_isValid;
}

QString OAIStatus::getSupportedCompression() const {
    return m_supported_compression;
}
void OAIStatus::setSupportedCompression(const QString &supported_compression) {
    m_supported_compression = supported_compression;
    m_supported_compression_isSet = true;
}

bool OAIStatus::is_supported_compression_Set() const{
    return m_supported_compression_isSet;
}

bool OAIStatus::is_supported_compression_Valid() const{
    return m_supported_compression_isValid;
}

QString OAIStatus::getSupportedEncoding() const {
    return m_supported_encoding;
}
void OAIStatus::setSupportedEncoding(const QString &supported_encoding) {
    m_supported_encoding = supported_encoding;
    m_supported_encoding_isSet = true;
}

bool OAIStatus::is_supported_encoding_Set() const{
    return m_supported_encoding_isSet;
}

bool OAIStatus::is_supported_encoding_Valid() const{
    return m_supported_encoding_isValid;
}

QList<QString> OAIStatus::getSupportedLanguages() const {
    return m_supported_languages;
}
void OAIStatus::setSupportedLanguages(const QList<QString> &supported_languages) {
    m_supported_languages = supported_languages;
    m_supported_languages_isSet = true;
}

bool OAIStatus::is_supported_languages_Set() const{
    return m_supported_languages_isSet;
}

bool OAIStatus::is_supported_languages_Valid() const{
    return m_supported_languages_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_version_isValid && m_service_status_isValid && m_service_version_isValid && m_supported_compression_isValid && m_supported_encoding_isValid && m_supported_languages_isValid && true;
}

} // namespace OpenAPI
