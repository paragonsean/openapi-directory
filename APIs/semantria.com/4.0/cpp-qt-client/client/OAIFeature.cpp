/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_detailed_mode_isSet = false;
    m_detailed_mode_isValid = false;

    m_discovery_mode_isSet = false;
    m_discovery_mode_isValid = false;

    m_html_processing_isSet = false;
    m_html_processing_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_one_sentence_mode_isSet = false;
    m_one_sentence_mode_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_templates_isSet = false;
    m_templates_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_detailed_mode_isValid = ::OpenAPI::fromJsonValue(m_detailed_mode, json[QString("detailed_mode")]);
    m_detailed_mode_isSet = !json[QString("detailed_mode")].isNull() && m_detailed_mode_isValid;

    m_discovery_mode_isValid = ::OpenAPI::fromJsonValue(m_discovery_mode, json[QString("discovery_mode")]);
    m_discovery_mode_isSet = !json[QString("discovery_mode")].isNull() && m_discovery_mode_isValid;

    m_html_processing_isValid = ::OpenAPI::fromJsonValue(m_html_processing, json[QString("html_processing")]);
    m_html_processing_isSet = !json[QString("html_processing")].isNull() && m_html_processing_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_one_sentence_mode_isValid = ::OpenAPI::fromJsonValue(m_one_sentence_mode, json[QString("one_sentence_mode")]);
    m_one_sentence_mode_isSet = !json[QString("one_sentence_mode")].isNull() && m_one_sentence_mode_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_templates_isValid = ::OpenAPI::fromJsonValue(m_templates, json[QString("templates")]);
    m_templates_isSet = !json[QString("templates")].isNull() && m_templates_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_detailed_mode.isSet()) {
        obj.insert(QString("detailed_mode"), ::OpenAPI::toJsonValue(m_detailed_mode));
    }
    if (m_discovery_mode.isSet()) {
        obj.insert(QString("discovery_mode"), ::OpenAPI::toJsonValue(m_discovery_mode));
    }
    if (m_html_processing_isSet) {
        obj.insert(QString("html_processing"), ::OpenAPI::toJsonValue(m_html_processing));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_one_sentence_mode_isSet) {
        obj.insert(QString("one_sentence_mode"), ::OpenAPI::toJsonValue(m_one_sentence_mode));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_templates.isSet()) {
        obj.insert(QString("templates"), ::OpenAPI::toJsonValue(m_templates));
    }
    return obj;
}

OAIFeatureDetailedModeSection OAIFeature::getDetailedMode() const {
    return m_detailed_mode;
}
void OAIFeature::setDetailedMode(const OAIFeatureDetailedModeSection &detailed_mode) {
    m_detailed_mode = detailed_mode;
    m_detailed_mode_isSet = true;
}

bool OAIFeature::is_detailed_mode_Set() const{
    return m_detailed_mode_isSet;
}

bool OAIFeature::is_detailed_mode_Valid() const{
    return m_detailed_mode_isValid;
}

OAIFeatureDiscoveryModeSection OAIFeature::getDiscoveryMode() const {
    return m_discovery_mode;
}
void OAIFeature::setDiscoveryMode(const OAIFeatureDiscoveryModeSection &discovery_mode) {
    m_discovery_mode = discovery_mode;
    m_discovery_mode_isSet = true;
}

bool OAIFeature::is_discovery_mode_Set() const{
    return m_discovery_mode_isSet;
}

bool OAIFeature::is_discovery_mode_Valid() const{
    return m_discovery_mode_isValid;
}

bool OAIFeature::isHtmlProcessing() const {
    return m_html_processing;
}
void OAIFeature::setHtmlProcessing(const bool &html_processing) {
    m_html_processing = html_processing;
    m_html_processing_isSet = true;
}

bool OAIFeature::is_html_processing_Set() const{
    return m_html_processing_isSet;
}

bool OAIFeature::is_html_processing_Valid() const{
    return m_html_processing_isValid;
}

QString OAIFeature::getId() const {
    return m_id;
}
void OAIFeature::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeature::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeature::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeature::getLanguage() const {
    return m_language;
}
void OAIFeature::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIFeature::is_language_Set() const{
    return m_language_isSet;
}

bool OAIFeature::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIFeature::isOneSentenceMode() const {
    return m_one_sentence_mode;
}
void OAIFeature::setOneSentenceMode(const bool &one_sentence_mode) {
    m_one_sentence_mode = one_sentence_mode;
    m_one_sentence_mode_isSet = true;
}

bool OAIFeature::is_one_sentence_mode_Set() const{
    return m_one_sentence_mode_isSet;
}

bool OAIFeature::is_one_sentence_mode_Valid() const{
    return m_one_sentence_mode_isValid;
}

OAIFeatureSettingsSection OAIFeature::getSettings() const {
    return m_settings;
}
void OAIFeature::setSettings(const OAIFeatureSettingsSection &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIFeature::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIFeature::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIFeatureTemplateSection OAIFeature::getTemplates() const {
    return m_templates;
}
void OAIFeature::setTemplates(const OAIFeatureTemplateSection &templates) {
    m_templates = templates;
    m_templates_isSet = true;
}

bool OAIFeature::is_templates_Set() const{
    return m_templates_isSet;
}

bool OAIFeature::is_templates_Valid() const{
    return m_templates_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detailed_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_sentence_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detailed_mode_isValid && m_discovery_mode_isValid && m_html_processing_isValid && m_id_isValid && m_language_isValid && m_one_sentence_mode_isValid && m_settings_isValid && m_templates_isValid && true;
}

} // namespace OpenAPI
