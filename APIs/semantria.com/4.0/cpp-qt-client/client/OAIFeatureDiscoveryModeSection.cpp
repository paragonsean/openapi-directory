/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureDiscoveryModeSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureDiscoveryModeSection::OAIFeatureDiscoveryModeSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureDiscoveryModeSection::OAIFeatureDiscoveryModeSection() {
    this->initializeModel();
}

OAIFeatureDiscoveryModeSection::~OAIFeatureDiscoveryModeSection() {}

void OAIFeatureDiscoveryModeSection::initializeModel() {

    m_entity_mentions_isSet = false;
    m_entity_mentions_isValid = false;

    m_facet_attributes_isSet = false;
    m_facet_attributes_isValid = false;

    m_facet_mentioins_isSet = false;
    m_facet_mentioins_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_named_entities_isSet = false;
    m_named_entities_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_taxonomy_isSet = false;
    m_taxonomy_isValid = false;

    m_theme_mentions_isSet = false;
    m_theme_mentions_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_user_categories_isSet = false;
    m_user_categories_isValid = false;

    m_user_entities_isSet = false;
    m_user_entities_isValid = false;
}

void OAIFeatureDiscoveryModeSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureDiscoveryModeSection::fromJsonObject(QJsonObject json) {

    m_entity_mentions_isValid = ::OpenAPI::fromJsonValue(m_entity_mentions, json[QString("entity_mentions")]);
    m_entity_mentions_isSet = !json[QString("entity_mentions")].isNull() && m_entity_mentions_isValid;

    m_facet_attributes_isValid = ::OpenAPI::fromJsonValue(m_facet_attributes, json[QString("facet_attributes")]);
    m_facet_attributes_isSet = !json[QString("facet_attributes")].isNull() && m_facet_attributes_isValid;

    m_facet_mentioins_isValid = ::OpenAPI::fromJsonValue(m_facet_mentioins, json[QString("facet_mentioins")]);
    m_facet_mentioins_isSet = !json[QString("facet_mentioins")].isNull() && m_facet_mentioins_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_named_entities_isValid = ::OpenAPI::fromJsonValue(m_named_entities, json[QString("named_entities")]);
    m_named_entities_isSet = !json[QString("named_entities")].isNull() && m_named_entities_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_taxonomy, json[QString("taxonomy")]);
    m_taxonomy_isSet = !json[QString("taxonomy")].isNull() && m_taxonomy_isValid;

    m_theme_mentions_isValid = ::OpenAPI::fromJsonValue(m_theme_mentions, json[QString("theme_mentions")]);
    m_theme_mentions_isSet = !json[QString("theme_mentions")].isNull() && m_theme_mentions_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_user_categories_isValid = ::OpenAPI::fromJsonValue(m_user_categories, json[QString("user_categories")]);
    m_user_categories_isSet = !json[QString("user_categories")].isNull() && m_user_categories_isValid;

    m_user_entities_isValid = ::OpenAPI::fromJsonValue(m_user_entities, json[QString("user_entities")]);
    m_user_entities_isSet = !json[QString("user_entities")].isNull() && m_user_entities_isValid;
}

QString OAIFeatureDiscoveryModeSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureDiscoveryModeSection::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_mentions_isSet) {
        obj.insert(QString("entity_mentions"), ::OpenAPI::toJsonValue(m_entity_mentions));
    }
    if (m_facet_attributes_isSet) {
        obj.insert(QString("facet_attributes"), ::OpenAPI::toJsonValue(m_facet_attributes));
    }
    if (m_facet_mentioins_isSet) {
        obj.insert(QString("facet_mentioins"), ::OpenAPI::toJsonValue(m_facet_mentioins));
    }
    if (m_facets_isSet) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_named_entities_isSet) {
        obj.insert(QString("named_entities"), ::OpenAPI::toJsonValue(m_named_entities));
    }
    if (m_queries_isSet) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_taxonomy_isSet) {
        obj.insert(QString("taxonomy"), ::OpenAPI::toJsonValue(m_taxonomy));
    }
    if (m_theme_mentions_isSet) {
        obj.insert(QString("theme_mentions"), ::OpenAPI::toJsonValue(m_theme_mentions));
    }
    if (m_themes_isSet) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_user_categories_isSet) {
        obj.insert(QString("user_categories"), ::OpenAPI::toJsonValue(m_user_categories));
    }
    if (m_user_entities_isSet) {
        obj.insert(QString("user_entities"), ::OpenAPI::toJsonValue(m_user_entities));
    }
    return obj;
}

bool OAIFeatureDiscoveryModeSection::isEntityMentions() const {
    return m_entity_mentions;
}
void OAIFeatureDiscoveryModeSection::setEntityMentions(const bool &entity_mentions) {
    m_entity_mentions = entity_mentions;
    m_entity_mentions_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_entity_mentions_Set() const{
    return m_entity_mentions_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_entity_mentions_Valid() const{
    return m_entity_mentions_isValid;
}

bool OAIFeatureDiscoveryModeSection::isFacetAttributes() const {
    return m_facet_attributes;
}
void OAIFeatureDiscoveryModeSection::setFacetAttributes(const bool &facet_attributes) {
    m_facet_attributes = facet_attributes;
    m_facet_attributes_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_facet_attributes_Set() const{
    return m_facet_attributes_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_facet_attributes_Valid() const{
    return m_facet_attributes_isValid;
}

bool OAIFeatureDiscoveryModeSection::isFacetMentioins() const {
    return m_facet_mentioins;
}
void OAIFeatureDiscoveryModeSection::setFacetMentioins(const bool &facet_mentioins) {
    m_facet_mentioins = facet_mentioins;
    m_facet_mentioins_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_facet_mentioins_Set() const{
    return m_facet_mentioins_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_facet_mentioins_Valid() const{
    return m_facet_mentioins_isValid;
}

bool OAIFeatureDiscoveryModeSection::isFacets() const {
    return m_facets;
}
void OAIFeatureDiscoveryModeSection::setFacets(const bool &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_facets_Valid() const{
    return m_facets_isValid;
}

bool OAIFeatureDiscoveryModeSection::isNamedEntities() const {
    return m_named_entities;
}
void OAIFeatureDiscoveryModeSection::setNamedEntities(const bool &named_entities) {
    m_named_entities = named_entities;
    m_named_entities_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_named_entities_Set() const{
    return m_named_entities_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_named_entities_Valid() const{
    return m_named_entities_isValid;
}

bool OAIFeatureDiscoveryModeSection::isQueries() const {
    return m_queries;
}
void OAIFeatureDiscoveryModeSection::setQueries(const bool &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAIFeatureDiscoveryModeSection::isTaxonomy() const {
    return m_taxonomy;
}
void OAIFeatureDiscoveryModeSection::setTaxonomy(const bool &taxonomy) {
    m_taxonomy = taxonomy;
    m_taxonomy_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_taxonomy_Set() const{
    return m_taxonomy_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_taxonomy_Valid() const{
    return m_taxonomy_isValid;
}

bool OAIFeatureDiscoveryModeSection::isThemeMentions() const {
    return m_theme_mentions;
}
void OAIFeatureDiscoveryModeSection::setThemeMentions(const bool &theme_mentions) {
    m_theme_mentions = theme_mentions;
    m_theme_mentions_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_theme_mentions_Set() const{
    return m_theme_mentions_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_theme_mentions_Valid() const{
    return m_theme_mentions_isValid;
}

bool OAIFeatureDiscoveryModeSection::isThemes() const {
    return m_themes;
}
void OAIFeatureDiscoveryModeSection::setThemes(const bool &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAIFeatureDiscoveryModeSection::isUserCategories() const {
    return m_user_categories;
}
void OAIFeatureDiscoveryModeSection::setUserCategories(const bool &user_categories) {
    m_user_categories = user_categories;
    m_user_categories_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_user_categories_Set() const{
    return m_user_categories_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_user_categories_Valid() const{
    return m_user_categories_isValid;
}

bool OAIFeatureDiscoveryModeSection::isUserEntities() const {
    return m_user_entities;
}
void OAIFeatureDiscoveryModeSection::setUserEntities(const bool &user_entities) {
    m_user_entities = user_entities;
    m_user_entities_isSet = true;
}

bool OAIFeatureDiscoveryModeSection::is_user_entities_Set() const{
    return m_user_entities_isSet;
}

bool OAIFeatureDiscoveryModeSection::is_user_entities_Valid() const{
    return m_user_entities_isValid;
}

bool OAIFeatureDiscoveryModeSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_mentioins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureDiscoveryModeSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_mentions_isValid && m_facet_attributes_isValid && m_facet_mentioins_isValid && m_facets_isValid && m_named_entities_isValid && m_queries_isValid && m_taxonomy_isValid && m_theme_mentions_isValid && m_themes_isValid && m_user_categories_isValid && m_user_entities_isValid && true;
}

} // namespace OpenAPI
