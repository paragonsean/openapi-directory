/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITheme::OAITheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITheme::OAITheme() {
    this->initializeModel();
}

OAITheme::~OAITheme() {}

void OAITheme::initializeModel() {

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_normalized_isSet = false;
    m_normalized_isValid = false;

    m_phrases_count_isSet = false;
    m_phrases_count_isValid = false;

    m_sentiment_polarity_isSet = false;
    m_sentiment_polarity_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_stemmed_isSet = false;
    m_stemmed_isValid = false;

    m_themes_count_isSet = false;
    m_themes_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITheme::fromJsonObject(QJsonObject json) {

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_normalized_isValid = ::OpenAPI::fromJsonValue(m_normalized, json[QString("normalized")]);
    m_normalized_isSet = !json[QString("normalized")].isNull() && m_normalized_isValid;

    m_phrases_count_isValid = ::OpenAPI::fromJsonValue(m_phrases_count, json[QString("phrases_count")]);
    m_phrases_count_isSet = !json[QString("phrases_count")].isNull() && m_phrases_count_isValid;

    m_sentiment_polarity_isValid = ::OpenAPI::fromJsonValue(m_sentiment_polarity, json[QString("sentiment_polarity")]);
    m_sentiment_polarity_isSet = !json[QString("sentiment_polarity")].isNull() && m_sentiment_polarity_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentiment_score")]);
    m_sentiment_score_isSet = !json[QString("sentiment_score")].isNull() && m_sentiment_score_isValid;

    m_stemmed_isValid = ::OpenAPI::fromJsonValue(m_stemmed, json[QString("stemmed")]);
    m_stemmed_isSet = !json[QString("stemmed")].isNull() && m_stemmed_isValid;

    m_themes_count_isValid = ::OpenAPI::fromJsonValue(m_themes_count, json[QString("themes_count")]);
    m_themes_count_isSet = !json[QString("themes_count")].isNull() && m_themes_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAITheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITheme::asJsonObject() const {
    QJsonObject obj;
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_normalized_isSet) {
        obj.insert(QString("normalized"), ::OpenAPI::toJsonValue(m_normalized));
    }
    if (m_phrases_count_isSet) {
        obj.insert(QString("phrases_count"), ::OpenAPI::toJsonValue(m_phrases_count));
    }
    if (m_sentiment_polarity_isSet) {
        obj.insert(QString("sentiment_polarity"), ::OpenAPI::toJsonValue(m_sentiment_polarity));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentiment_score"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_stemmed_isSet) {
        obj.insert(QString("stemmed"), ::OpenAPI::toJsonValue(m_stemmed));
    }
    if (m_themes_count_isSet) {
        obj.insert(QString("themes_count"), ::OpenAPI::toJsonValue(m_themes_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIMention> OAITheme::getMentions() const {
    return m_mentions;
}
void OAITheme::setMentions(const QList<OAIMention> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAITheme::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAITheme::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QString OAITheme::getNormalized() const {
    return m_normalized;
}
void OAITheme::setNormalized(const QString &normalized) {
    m_normalized = normalized;
    m_normalized_isSet = true;
}

bool OAITheme::is_normalized_Set() const{
    return m_normalized_isSet;
}

bool OAITheme::is_normalized_Valid() const{
    return m_normalized_isValid;
}

qint32 OAITheme::getPhrasesCount() const {
    return m_phrases_count;
}
void OAITheme::setPhrasesCount(const qint32 &phrases_count) {
    m_phrases_count = phrases_count;
    m_phrases_count_isSet = true;
}

bool OAITheme::is_phrases_count_Set() const{
    return m_phrases_count_isSet;
}

bool OAITheme::is_phrases_count_Valid() const{
    return m_phrases_count_isValid;
}

QString OAITheme::getSentimentPolarity() const {
    return m_sentiment_polarity;
}
void OAITheme::setSentimentPolarity(const QString &sentiment_polarity) {
    m_sentiment_polarity = sentiment_polarity;
    m_sentiment_polarity_isSet = true;
}

bool OAITheme::is_sentiment_polarity_Set() const{
    return m_sentiment_polarity_isSet;
}

bool OAITheme::is_sentiment_polarity_Valid() const{
    return m_sentiment_polarity_isValid;
}

double OAITheme::getSentimentScore() const {
    return m_sentiment_score;
}
void OAITheme::setSentimentScore(const double &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAITheme::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAITheme::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

QString OAITheme::getStemmed() const {
    return m_stemmed;
}
void OAITheme::setStemmed(const QString &stemmed) {
    m_stemmed = stemmed;
    m_stemmed_isSet = true;
}

bool OAITheme::is_stemmed_Set() const{
    return m_stemmed_isSet;
}

bool OAITheme::is_stemmed_Valid() const{
    return m_stemmed_isValid;
}

qint32 OAITheme::getThemesCount() const {
    return m_themes_count;
}
void OAITheme::setThemesCount(const qint32 &themes_count) {
    m_themes_count = themes_count;
    m_themes_count_isSet = true;
}

bool OAITheme::is_themes_count_Set() const{
    return m_themes_count_isSet;
}

bool OAITheme::is_themes_count_Valid() const{
    return m_themes_count_isValid;
}

QString OAITheme::getTitle() const {
    return m_title;
}
void OAITheme::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITheme::is_title_Set() const{
    return m_title_isSet;
}

bool OAITheme::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrases_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stemmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mentions_isValid && m_normalized_isValid && m_phrases_count_isValid && m_sentiment_polarity_isValid && m_sentiment_score_isValid && m_stemmed_isValid && m_themes_count_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
