/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureDetailedModeSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureDetailedModeSection::OAIFeatureDetailedModeSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureDetailedModeSection::OAIFeatureDetailedModeSection() {
    this->initializeModel();
}

OAIFeatureDetailedModeSection::~OAIFeatureDetailedModeSection() {}

void OAIFeatureDetailedModeSection::initializeModel() {

    m_auto_categories_isSet = false;
    m_auto_categories_isValid = false;

    m_entity_mentions_isSet = false;
    m_entity_mentions_isValid = false;

    m_entity_opinions_isSet = false;
    m_entity_opinions_isValid = false;

    m_entity_relations_isSet = false;
    m_entity_relations_isValid = false;

    m_entity_themes_isSet = false;
    m_entity_themes_isValid = false;

    m_intentions_isSet = false;
    m_intentions_isValid = false;

    m_language_detection_isSet = false;
    m_language_detection_isValid = false;

    m_model_sentiment_isSet = false;
    m_model_sentiment_isValid = false;

    m_named_entities_isSet = false;
    m_named_entities_isValid = false;

    m_pos_tagging_isSet = false;
    m_pos_tagging_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_sentiment_phrases_isSet = false;
    m_sentiment_phrases_isValid = false;

    m_summarization_isSet = false;
    m_summarization_isValid = false;

    m_taxonomy_isSet = false;
    m_taxonomy_isValid = false;

    m_theme_mentions_isSet = false;
    m_theme_mentions_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_user_categories_isSet = false;
    m_user_categories_isValid = false;

    m_user_entities_isSet = false;
    m_user_entities_isValid = false;
}

void OAIFeatureDetailedModeSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureDetailedModeSection::fromJsonObject(QJsonObject json) {

    m_auto_categories_isValid = ::OpenAPI::fromJsonValue(m_auto_categories, json[QString("auto_categories")]);
    m_auto_categories_isSet = !json[QString("auto_categories")].isNull() && m_auto_categories_isValid;

    m_entity_mentions_isValid = ::OpenAPI::fromJsonValue(m_entity_mentions, json[QString("entity_mentions")]);
    m_entity_mentions_isSet = !json[QString("entity_mentions")].isNull() && m_entity_mentions_isValid;

    m_entity_opinions_isValid = ::OpenAPI::fromJsonValue(m_entity_opinions, json[QString("entity_opinions")]);
    m_entity_opinions_isSet = !json[QString("entity_opinions")].isNull() && m_entity_opinions_isValid;

    m_entity_relations_isValid = ::OpenAPI::fromJsonValue(m_entity_relations, json[QString("entity_relations")]);
    m_entity_relations_isSet = !json[QString("entity_relations")].isNull() && m_entity_relations_isValid;

    m_entity_themes_isValid = ::OpenAPI::fromJsonValue(m_entity_themes, json[QString("entity_themes")]);
    m_entity_themes_isSet = !json[QString("entity_themes")].isNull() && m_entity_themes_isValid;

    m_intentions_isValid = ::OpenAPI::fromJsonValue(m_intentions, json[QString("intentions")]);
    m_intentions_isSet = !json[QString("intentions")].isNull() && m_intentions_isValid;

    m_language_detection_isValid = ::OpenAPI::fromJsonValue(m_language_detection, json[QString("language_detection")]);
    m_language_detection_isSet = !json[QString("language_detection")].isNull() && m_language_detection_isValid;

    m_model_sentiment_isValid = ::OpenAPI::fromJsonValue(m_model_sentiment, json[QString("model_sentiment")]);
    m_model_sentiment_isSet = !json[QString("model_sentiment")].isNull() && m_model_sentiment_isValid;

    m_named_entities_isValid = ::OpenAPI::fromJsonValue(m_named_entities, json[QString("named_entities")]);
    m_named_entities_isSet = !json[QString("named_entities")].isNull() && m_named_entities_isValid;

    m_pos_tagging_isValid = ::OpenAPI::fromJsonValue(m_pos_tagging, json[QString("pos_tagging")]);
    m_pos_tagging_isSet = !json[QString("pos_tagging")].isNull() && m_pos_tagging_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_sentiment_phrases_isValid = ::OpenAPI::fromJsonValue(m_sentiment_phrases, json[QString("sentiment_phrases")]);
    m_sentiment_phrases_isSet = !json[QString("sentiment_phrases")].isNull() && m_sentiment_phrases_isValid;

    m_summarization_isValid = ::OpenAPI::fromJsonValue(m_summarization, json[QString("summarization")]);
    m_summarization_isSet = !json[QString("summarization")].isNull() && m_summarization_isValid;

    m_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_taxonomy, json[QString("taxonomy")]);
    m_taxonomy_isSet = !json[QString("taxonomy")].isNull() && m_taxonomy_isValid;

    m_theme_mentions_isValid = ::OpenAPI::fromJsonValue(m_theme_mentions, json[QString("theme_mentions")]);
    m_theme_mentions_isSet = !json[QString("theme_mentions")].isNull() && m_theme_mentions_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_user_categories_isValid = ::OpenAPI::fromJsonValue(m_user_categories, json[QString("user_categories")]);
    m_user_categories_isSet = !json[QString("user_categories")].isNull() && m_user_categories_isValid;

    m_user_entities_isValid = ::OpenAPI::fromJsonValue(m_user_entities, json[QString("user_entities")]);
    m_user_entities_isSet = !json[QString("user_entities")].isNull() && m_user_entities_isValid;
}

QString OAIFeatureDetailedModeSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureDetailedModeSection::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_categories_isSet) {
        obj.insert(QString("auto_categories"), ::OpenAPI::toJsonValue(m_auto_categories));
    }
    if (m_entity_mentions_isSet) {
        obj.insert(QString("entity_mentions"), ::OpenAPI::toJsonValue(m_entity_mentions));
    }
    if (m_entity_opinions_isSet) {
        obj.insert(QString("entity_opinions"), ::OpenAPI::toJsonValue(m_entity_opinions));
    }
    if (m_entity_relations_isSet) {
        obj.insert(QString("entity_relations"), ::OpenAPI::toJsonValue(m_entity_relations));
    }
    if (m_entity_themes_isSet) {
        obj.insert(QString("entity_themes"), ::OpenAPI::toJsonValue(m_entity_themes));
    }
    if (m_intentions_isSet) {
        obj.insert(QString("intentions"), ::OpenAPI::toJsonValue(m_intentions));
    }
    if (m_language_detection_isSet) {
        obj.insert(QString("language_detection"), ::OpenAPI::toJsonValue(m_language_detection));
    }
    if (m_model_sentiment_isSet) {
        obj.insert(QString("model_sentiment"), ::OpenAPI::toJsonValue(m_model_sentiment));
    }
    if (m_named_entities_isSet) {
        obj.insert(QString("named_entities"), ::OpenAPI::toJsonValue(m_named_entities));
    }
    if (m_pos_tagging_isSet) {
        obj.insert(QString("pos_tagging"), ::OpenAPI::toJsonValue(m_pos_tagging));
    }
    if (m_queries_isSet) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_sentiment_phrases_isSet) {
        obj.insert(QString("sentiment_phrases"), ::OpenAPI::toJsonValue(m_sentiment_phrases));
    }
    if (m_summarization_isSet) {
        obj.insert(QString("summarization"), ::OpenAPI::toJsonValue(m_summarization));
    }
    if (m_taxonomy_isSet) {
        obj.insert(QString("taxonomy"), ::OpenAPI::toJsonValue(m_taxonomy));
    }
    if (m_theme_mentions_isSet) {
        obj.insert(QString("theme_mentions"), ::OpenAPI::toJsonValue(m_theme_mentions));
    }
    if (m_themes_isSet) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_user_categories_isSet) {
        obj.insert(QString("user_categories"), ::OpenAPI::toJsonValue(m_user_categories));
    }
    if (m_user_entities_isSet) {
        obj.insert(QString("user_entities"), ::OpenAPI::toJsonValue(m_user_entities));
    }
    return obj;
}

bool OAIFeatureDetailedModeSection::isAutoCategories() const {
    return m_auto_categories;
}
void OAIFeatureDetailedModeSection::setAutoCategories(const bool &auto_categories) {
    m_auto_categories = auto_categories;
    m_auto_categories_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_auto_categories_Set() const{
    return m_auto_categories_isSet;
}

bool OAIFeatureDetailedModeSection::is_auto_categories_Valid() const{
    return m_auto_categories_isValid;
}

bool OAIFeatureDetailedModeSection::isEntityMentions() const {
    return m_entity_mentions;
}
void OAIFeatureDetailedModeSection::setEntityMentions(const bool &entity_mentions) {
    m_entity_mentions = entity_mentions;
    m_entity_mentions_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_entity_mentions_Set() const{
    return m_entity_mentions_isSet;
}

bool OAIFeatureDetailedModeSection::is_entity_mentions_Valid() const{
    return m_entity_mentions_isValid;
}

bool OAIFeatureDetailedModeSection::isEntityOpinions() const {
    return m_entity_opinions;
}
void OAIFeatureDetailedModeSection::setEntityOpinions(const bool &entity_opinions) {
    m_entity_opinions = entity_opinions;
    m_entity_opinions_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_entity_opinions_Set() const{
    return m_entity_opinions_isSet;
}

bool OAIFeatureDetailedModeSection::is_entity_opinions_Valid() const{
    return m_entity_opinions_isValid;
}

bool OAIFeatureDetailedModeSection::isEntityRelations() const {
    return m_entity_relations;
}
void OAIFeatureDetailedModeSection::setEntityRelations(const bool &entity_relations) {
    m_entity_relations = entity_relations;
    m_entity_relations_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_entity_relations_Set() const{
    return m_entity_relations_isSet;
}

bool OAIFeatureDetailedModeSection::is_entity_relations_Valid() const{
    return m_entity_relations_isValid;
}

bool OAIFeatureDetailedModeSection::isEntityThemes() const {
    return m_entity_themes;
}
void OAIFeatureDetailedModeSection::setEntityThemes(const bool &entity_themes) {
    m_entity_themes = entity_themes;
    m_entity_themes_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_entity_themes_Set() const{
    return m_entity_themes_isSet;
}

bool OAIFeatureDetailedModeSection::is_entity_themes_Valid() const{
    return m_entity_themes_isValid;
}

bool OAIFeatureDetailedModeSection::isIntentions() const {
    return m_intentions;
}
void OAIFeatureDetailedModeSection::setIntentions(const bool &intentions) {
    m_intentions = intentions;
    m_intentions_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_intentions_Set() const{
    return m_intentions_isSet;
}

bool OAIFeatureDetailedModeSection::is_intentions_Valid() const{
    return m_intentions_isValid;
}

bool OAIFeatureDetailedModeSection::isLanguageDetection() const {
    return m_language_detection;
}
void OAIFeatureDetailedModeSection::setLanguageDetection(const bool &language_detection) {
    m_language_detection = language_detection;
    m_language_detection_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_language_detection_Set() const{
    return m_language_detection_isSet;
}

bool OAIFeatureDetailedModeSection::is_language_detection_Valid() const{
    return m_language_detection_isValid;
}

bool OAIFeatureDetailedModeSection::isModelSentiment() const {
    return m_model_sentiment;
}
void OAIFeatureDetailedModeSection::setModelSentiment(const bool &model_sentiment) {
    m_model_sentiment = model_sentiment;
    m_model_sentiment_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_model_sentiment_Set() const{
    return m_model_sentiment_isSet;
}

bool OAIFeatureDetailedModeSection::is_model_sentiment_Valid() const{
    return m_model_sentiment_isValid;
}

bool OAIFeatureDetailedModeSection::isNamedEntities() const {
    return m_named_entities;
}
void OAIFeatureDetailedModeSection::setNamedEntities(const bool &named_entities) {
    m_named_entities = named_entities;
    m_named_entities_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_named_entities_Set() const{
    return m_named_entities_isSet;
}

bool OAIFeatureDetailedModeSection::is_named_entities_Valid() const{
    return m_named_entities_isValid;
}

bool OAIFeatureDetailedModeSection::isPosTagging() const {
    return m_pos_tagging;
}
void OAIFeatureDetailedModeSection::setPosTagging(const bool &pos_tagging) {
    m_pos_tagging = pos_tagging;
    m_pos_tagging_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_pos_tagging_Set() const{
    return m_pos_tagging_isSet;
}

bool OAIFeatureDetailedModeSection::is_pos_tagging_Valid() const{
    return m_pos_tagging_isValid;
}

bool OAIFeatureDetailedModeSection::isQueries() const {
    return m_queries;
}
void OAIFeatureDetailedModeSection::setQueries(const bool &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIFeatureDetailedModeSection::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAIFeatureDetailedModeSection::isSentiment() const {
    return m_sentiment;
}
void OAIFeatureDetailedModeSection::setSentiment(const bool &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAIFeatureDetailedModeSection::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

bool OAIFeatureDetailedModeSection::isSentimentPhrases() const {
    return m_sentiment_phrases;
}
void OAIFeatureDetailedModeSection::setSentimentPhrases(const bool &sentiment_phrases) {
    m_sentiment_phrases = sentiment_phrases;
    m_sentiment_phrases_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_sentiment_phrases_Set() const{
    return m_sentiment_phrases_isSet;
}

bool OAIFeatureDetailedModeSection::is_sentiment_phrases_Valid() const{
    return m_sentiment_phrases_isValid;
}

bool OAIFeatureDetailedModeSection::isSummarization() const {
    return m_summarization;
}
void OAIFeatureDetailedModeSection::setSummarization(const bool &summarization) {
    m_summarization = summarization;
    m_summarization_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_summarization_Set() const{
    return m_summarization_isSet;
}

bool OAIFeatureDetailedModeSection::is_summarization_Valid() const{
    return m_summarization_isValid;
}

bool OAIFeatureDetailedModeSection::isTaxonomy() const {
    return m_taxonomy;
}
void OAIFeatureDetailedModeSection::setTaxonomy(const bool &taxonomy) {
    m_taxonomy = taxonomy;
    m_taxonomy_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_taxonomy_Set() const{
    return m_taxonomy_isSet;
}

bool OAIFeatureDetailedModeSection::is_taxonomy_Valid() const{
    return m_taxonomy_isValid;
}

bool OAIFeatureDetailedModeSection::isThemeMentions() const {
    return m_theme_mentions;
}
void OAIFeatureDetailedModeSection::setThemeMentions(const bool &theme_mentions) {
    m_theme_mentions = theme_mentions;
    m_theme_mentions_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_theme_mentions_Set() const{
    return m_theme_mentions_isSet;
}

bool OAIFeatureDetailedModeSection::is_theme_mentions_Valid() const{
    return m_theme_mentions_isValid;
}

bool OAIFeatureDetailedModeSection::isThemes() const {
    return m_themes;
}
void OAIFeatureDetailedModeSection::setThemes(const bool &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIFeatureDetailedModeSection::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAIFeatureDetailedModeSection::isUserCategories() const {
    return m_user_categories;
}
void OAIFeatureDetailedModeSection::setUserCategories(const bool &user_categories) {
    m_user_categories = user_categories;
    m_user_categories_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_user_categories_Set() const{
    return m_user_categories_isSet;
}

bool OAIFeatureDetailedModeSection::is_user_categories_Valid() const{
    return m_user_categories_isValid;
}

bool OAIFeatureDetailedModeSection::isUserEntities() const {
    return m_user_entities;
}
void OAIFeatureDetailedModeSection::setUserEntities(const bool &user_entities) {
    m_user_entities = user_entities;
    m_user_entities_isSet = true;
}

bool OAIFeatureDetailedModeSection::is_user_entities_Set() const{
    return m_user_entities_isSet;
}

bool OAIFeatureDetailedModeSection::is_user_entities_Valid() const{
    return m_user_entities_isValid;
}

bool OAIFeatureDetailedModeSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_opinions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_relations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_tagging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_phrases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summarization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureDetailedModeSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_categories_isValid && m_entity_mentions_isValid && m_entity_opinions_isValid && m_entity_relations_isValid && m_entity_themes_isValid && m_intentions_isValid && m_language_detection_isValid && m_model_sentiment_isValid && m_named_entities_isValid && m_pos_tagging_isValid && m_queries_isValid && m_sentiment_isValid && m_sentiment_phrases_isValid && m_summarization_isValid && m_taxonomy_isValid && m_theme_mentions_isValid && m_themes_isValid && m_user_categories_isValid && m_user_entities_isValid && true;
}

} // namespace OpenAPI
