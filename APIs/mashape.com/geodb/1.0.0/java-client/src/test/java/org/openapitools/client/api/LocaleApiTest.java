/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BadRequestResponse;
import org.openapitools.client.model.CurrenciesResponse;
import org.openapitools.client.model.DateTimeResponse;
import org.openapitools.client.model.ForbiddenResponse;
import org.openapitools.client.model.LanguagesResponse;
import org.openapitools.client.model.LocalesResponse;
import org.openapitools.client.model.NotFoundResponse;
import org.openapitools.client.model.TimeResponse;
import org.openapitools.client.model.TimeZoneResponse;
import org.openapitools.client.model.TimeZonesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocaleApi
 */
@Disabled
public class LocaleApiTest {

    private final LocaleApi api = new LocaleApi();

    /**
     * Find currencies
     *
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrenciesUsingGETTest() throws ApiException {
        String countryId = null;
        Boolean hateoasMode = null;
        Integer limit = null;
        Integer offset = null;
        CurrenciesResponse response = api.getCurrenciesUsingGET(countryId, hateoasMode, limit, offset);
        // TODO: test validations
    }

    /**
     * Get languages
     *
     * Get all supported languages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLanguagesUsingGETTest() throws ApiException {
        Boolean hateoasMode = null;
        Integer limit = null;
        Integer offset = null;
        LanguagesResponse response = api.getLanguagesUsingGET(hateoasMode, limit, offset);
        // TODO: test validations
    }

    /**
     * Get locales
     *
     * Get all known locales
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalesUsingGETTest() throws ApiException {
        Boolean hateoasMode = null;
        Integer limit = null;
        Integer offset = null;
        LocalesResponse response = api.getLocalesUsingGET(hateoasMode, limit, offset);
        // TODO: test validations
    }

    /**
     * Get time-zone date-time
     *
     * Get time-zone date-time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeZoneDateTimeUsingGETTest() throws ApiException {
        String zoneId = null;
        DateTimeResponse response = api.getTimeZoneDateTimeUsingGET(zoneId);
        // TODO: test validations
    }

    /**
     * Get time-zone time
     *
     * Get time-zone time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeZoneTimeUsingGETTest() throws ApiException {
        String zoneId = null;
        TimeResponse response = api.getTimeZoneTimeUsingGET(zoneId);
        // TODO: test validations
    }

    /**
     * Get time-zone
     *
     * Get time-zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeZoneUsingGETTest() throws ApiException {
        String zoneId = null;
        TimeZoneResponse response = api.getTimeZoneUsingGET(zoneId);
        // TODO: test validations
    }

    /**
     * Get time-zones
     *
     * Get all known time-zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimezonesUsingGETTest() throws ApiException {
        Boolean hateoasMode = null;
        Integer limit = null;
        Integer offset = null;
        TimeZonesResponse response = api.getTimezonesUsingGET(hateoasMode, limit, offset);
        // TODO: test validations
    }

}
