/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BadRequestResponse;
import org.openapitools.client.model.CountriesResponse;
import org.openapitools.client.model.CountryResponse;
import org.openapitools.client.model.DateTimeResponse;
import org.openapitools.client.model.DistanceResponse;
import org.openapitools.client.model.ForbiddenResponse;
import org.openapitools.client.model.NotFoundResponse;
import org.openapitools.client.model.PopulatedPlaceResponse;
import org.openapitools.client.model.PopulatedPlacesResponse;
import org.openapitools.client.model.RegionResponse;
import org.openapitools.client.model.RegionsResponse;
import org.openapitools.client.model.TimeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeoApi
 */
@Disabled
public class GeoApiTest {

    private final GeoApi api = new GeoApi();

    /**
     * Find administrative divisions
     *
     * Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAdminDivisionsUsingGETTest() throws ApiException {
        String location = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findAdminDivisionsUsingGET(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find cities near division
     *
     * Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCitiesNearAdminDivisionUsingGETTest() throws ApiException {
        String divisionId = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        String types = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findCitiesNearAdminDivisionUsingGET(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find cities near city
     *
     * Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCitiesNearCityUsingGETTest() throws ApiException {
        String cityId = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        String types = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findCitiesNearCityUsingGET(cityId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find cities near location
     *
     * Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCitiesNearLocationUsingGETTest() throws ApiException {
        String locationId = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        String types = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findCitiesNearLocationUsingGET(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find cities
     *
     * Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCitiesUsingGETTest() throws ApiException {
        String location = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        String types = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findCitiesUsingGET(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find divisions near division
     *
     * Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDivisionsNearAdminDivisionUsingGETTest() throws ApiException {
        String divisionId = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findDivisionsNearAdminDivisionUsingGET(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find divisions near location
     *
     * Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDivisionsNearLocationUsingGETTest() throws ApiException {
        String locationId = null;
        Integer radius = null;
        String distanceUnit = null;
        String countryIds = null;
        String excludedCountryIds = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findDivisionsNearLocationUsingGET(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find country region cities
     *
     * Get the cities in a specific country region. The country and region info is omitted in the response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findRegionCitiesUsingGETTest() throws ApiException {
        String countryId = null;
        String regionCode = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        String types = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findRegionCitiesUsingGET(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Find country region administrative divisions
     *
     * Get the administrative divisions in a specific country region. The country and region info is omitted in the response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findRegionDivisionsUsingGETTest() throws ApiException {
        String countryId = null;
        String regionCode = null;
        Integer minPopulation = null;
        Integer maxPopulation = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        String timeZoneIds = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String includeDeleted = null;
        PopulatedPlacesResponse response = api.findRegionDivisionsUsingGET(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted);
        // TODO: test validations
    }

    /**
     * Get administrative division details
     *
     * Get the details for a specific administrative division, including location coordinates, population, and elevation above sea-level (if available). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdminDivisionUsingGETTest() throws ApiException {
        String divisionId = null;
        Boolean asciiMode = null;
        String languageCode = null;
        PopulatedPlaceResponse response = api.getAdminDivisionUsingGET(divisionId, asciiMode, languageCode);
        // TODO: test validations
    }

    /**
     * Get city date-time
     *
     * Get city date-time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCityDateTimeUsingGETTest() throws ApiException {
        String cityId = null;
        DateTimeResponse response = api.getCityDateTimeUsingGET(cityId);
        // TODO: test validations
    }

    /**
     * Get city distance
     *
     * Get distance from the given city
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCityDistanceUsingGETTest() throws ApiException {
        String cityId = null;
        String toCityId = null;
        String distanceUnit = null;
        DistanceResponse response = api.getCityDistanceUsingGET(cityId, toCityId, distanceUnit);
        // TODO: test validations
    }

    /**
     * Get city admin region
     *
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCityLocatedInUsingGETTest() throws ApiException {
        String cityId = null;
        Boolean asciiMode = null;
        String languageCode = null;
        PopulatedPlaceResponse response = api.getCityLocatedInUsingGET(cityId, asciiMode, languageCode);
        // TODO: test validations
    }

    /**
     * Get city time
     *
     * Get city time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCityTimeUsingGETTest() throws ApiException {
        String cityId = null;
        TimeResponse response = api.getCityTimeUsingGET(cityId);
        // TODO: test validations
    }

    /**
     * Get city details
     *
     * Get the details for a specific city, including location coordinates, population, and elevation above sea-level (if available). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCityUsingGETTest() throws ApiException {
        String cityId = null;
        Boolean asciiMode = null;
        String languageCode = null;
        PopulatedPlaceResponse response = api.getCityUsingGET(cityId, asciiMode, languageCode);
        // TODO: test validations
    }

    /**
     * Find countries
     *
     * Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCountriesUsingGETTest() throws ApiException {
        String currencyCode = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        CountriesResponse response = api.getCountriesUsingGET(currencyCode, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort);
        // TODO: test validations
    }

    /**
     * Get country details
     *
     * Get the details for a specific country, including number of regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCountryUsingGETTest() throws ApiException {
        String countryId = null;
        Boolean asciiMode = null;
        String languageCode = null;
        CountryResponse response = api.getCountryUsingGET(countryId, asciiMode, languageCode);
        // TODO: test validations
    }

    /**
     * Get region details
     *
     * Get the details of a specific country region, including number of cities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionUsingGETTest() throws ApiException {
        String countryId = null;
        String regionCode = null;
        Boolean asciiMode = null;
        String languageCode = null;
        RegionResponse response = api.getRegionUsingGET(countryId, regionCode, asciiMode, languageCode);
        // TODO: test validations
    }

    /**
     * Find country regions
     *
     * Get all regions in a specific country. These could be states, provinces, districts, or otherwise major political divisions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionsUsingGETTest() throws ApiException {
        String countryId = null;
        String namePrefix = null;
        Boolean namePrefixDefaultLangResults = null;
        Boolean asciiMode = null;
        Boolean hateoasMode = null;
        String languageCode = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        RegionsResponse response = api.getRegionsUsingGET(countryId, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort);
        // TODO: test validations
    }

}
