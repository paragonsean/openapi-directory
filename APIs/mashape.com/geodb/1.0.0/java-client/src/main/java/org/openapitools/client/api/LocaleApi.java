/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestResponse;
import org.openapitools.client.model.CurrenciesResponse;
import org.openapitools.client.model.DateTimeResponse;
import org.openapitools.client.model.ForbiddenResponse;
import org.openapitools.client.model.LanguagesResponse;
import org.openapitools.client.model.LocalesResponse;
import org.openapitools.client.model.NotFoundResponse;
import org.openapitools.client.model.TimeResponse;
import org.openapitools.client.model.TimeZoneResponse;
import org.openapitools.client.model.TimeZonesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocaleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocaleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocaleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCurrenciesUsingGET
     * @param countryId Currencies for this country id (required)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of currencies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesUsingGETCall(String countryId, Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryId", countryId));
        }

        if (hateoasMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hateoasMode", hateoasMode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesUsingGETValidateBeforeCall(String countryId, Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling getCurrenciesUsingGET(Async)");
        }

        return getCurrenciesUsingGETCall(countryId, hateoasMode, limit, offset, _callback);

    }

    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param countryId Currencies for this country id (required)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return CurrenciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of currencies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CurrenciesResponse getCurrenciesUsingGET(String countryId, Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CurrenciesResponse> localVarResp = getCurrenciesUsingGETWithHttpInfo(countryId, hateoasMode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param countryId Currencies for this country id (required)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return ApiResponse&lt;CurrenciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of currencies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrenciesResponse> getCurrenciesUsingGETWithHttpInfo(String countryId, Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesUsingGETValidateBeforeCall(countryId, hateoasMode, limit, offset, null);
        Type localVarReturnType = new TypeToken<CurrenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find currencies (asynchronously)
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param countryId Currencies for this country id (required)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of currencies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesUsingGETAsync(String countryId, Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback<CurrenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesUsingGETValidateBeforeCall(countryId, hateoasMode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CurrenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLanguagesUsingGET
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of languages supported by the system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesUsingGETCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hateoasMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hateoasMode", hateoasMode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguagesUsingGETValidateBeforeCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getLanguagesUsingGETCall(hateoasMode, limit, offset, _callback);

    }

    /**
     * Get languages
     * Get all supported languages
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return LanguagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of languages supported by the system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LanguagesResponse getLanguagesUsingGET(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<LanguagesResponse> localVarResp = getLanguagesUsingGETWithHttpInfo(hateoasMode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get languages
     * Get all supported languages
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return ApiResponse&lt;LanguagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of languages supported by the system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LanguagesResponse> getLanguagesUsingGETWithHttpInfo(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getLanguagesUsingGETValidateBeforeCall(hateoasMode, limit, offset, null);
        Type localVarReturnType = new TypeToken<LanguagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get languages (asynchronously)
     * Get all supported languages
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of languages supported by the system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesUsingGETAsync(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback<LanguagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguagesUsingGETValidateBeforeCall(hateoasMode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<LanguagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocalesUsingGET
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of locales </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalesUsingGETCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/locales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hateoasMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hateoasMode", hateoasMode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocalesUsingGETValidateBeforeCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getLocalesUsingGETCall(hateoasMode, limit, offset, _callback);

    }

    /**
     * Get locales
     * Get all known locales
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return LocalesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of locales </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LocalesResponse getLocalesUsingGET(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<LocalesResponse> localVarResp = getLocalesUsingGETWithHttpInfo(hateoasMode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get locales
     * Get all known locales
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return ApiResponse&lt;LocalesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of locales </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocalesResponse> getLocalesUsingGETWithHttpInfo(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getLocalesUsingGETValidateBeforeCall(hateoasMode, limit, offset, null);
        Type localVarReturnType = new TypeToken<LocalesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get locales (asynchronously)
     * Get all known locales
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of locales </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalesUsingGETAsync(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback<LocalesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocalesUsingGETValidateBeforeCall(hateoasMode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<LocalesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimeZoneDateTimeUsingGET
     * @param zoneId A time-zone id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-6801 date-time </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneDateTimeUsingGETCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/timezones/{zoneId}/dateTime"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeZoneDateTimeUsingGETValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getTimeZoneDateTimeUsingGET(Async)");
        }

        return getTimeZoneDateTimeUsingGETCall(zoneId, _callback);

    }

    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param zoneId A time-zone id (required)
     * @return DateTimeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-6801 date-time </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DateTimeResponse getTimeZoneDateTimeUsingGET(String zoneId) throws ApiException {
        ApiResponse<DateTimeResponse> localVarResp = getTimeZoneDateTimeUsingGETWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param zoneId A time-zone id (required)
     * @return ApiResponse&lt;DateTimeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-6801 date-time </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DateTimeResponse> getTimeZoneDateTimeUsingGETWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getTimeZoneDateTimeUsingGETValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DateTimeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time-zone date-time (asynchronously)
     * Get time-zone date-time
     * @param zoneId A time-zone id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-6801 date-time </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneDateTimeUsingGETAsync(String zoneId, final ApiCallback<DateTimeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeZoneDateTimeUsingGETValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DateTimeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimeZoneTimeUsingGET
     * @param zoneId A time-zone id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-8601 time response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneTimeUsingGETCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/timezones/{zoneId}/time"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeZoneTimeUsingGETValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getTimeZoneTimeUsingGET(Async)");
        }

        return getTimeZoneTimeUsingGETCall(zoneId, _callback);

    }

    /**
     * Get time-zone time
     * Get time-zone time
     * @param zoneId A time-zone id (required)
     * @return TimeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-8601 time response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TimeResponse getTimeZoneTimeUsingGET(String zoneId) throws ApiException {
        ApiResponse<TimeResponse> localVarResp = getTimeZoneTimeUsingGETWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get time-zone time
     * Get time-zone time
     * @param zoneId A time-zone id (required)
     * @return ApiResponse&lt;TimeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-8601 time response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeResponse> getTimeZoneTimeUsingGETWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getTimeZoneTimeUsingGETValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TimeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time-zone time (asynchronously)
     * Get time-zone time
     * @param zoneId A time-zone id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An ISO-8601 time response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneTimeUsingGETAsync(String zoneId, final ApiCallback<TimeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeZoneTimeUsingGETValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TimeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimeZoneUsingGET
     * @param zoneId A time-zone id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A time-zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneUsingGETCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/timezones/{zoneId}"
            .replace("{" + "zoneId" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeZoneUsingGETValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getTimeZoneUsingGET(Async)");
        }

        return getTimeZoneUsingGETCall(zoneId, _callback);

    }

    /**
     * Get time-zone
     * Get time-zone
     * @param zoneId A time-zone id (required)
     * @return TimeZoneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A time-zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TimeZoneResponse getTimeZoneUsingGET(String zoneId) throws ApiException {
        ApiResponse<TimeZoneResponse> localVarResp = getTimeZoneUsingGETWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get time-zone
     * Get time-zone
     * @param zoneId A time-zone id (required)
     * @return ApiResponse&lt;TimeZoneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A time-zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeZoneResponse> getTimeZoneUsingGETWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getTimeZoneUsingGETValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TimeZoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time-zone (asynchronously)
     * Get time-zone
     * @param zoneId A time-zone id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A time-zone </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 - Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZoneUsingGETAsync(String zoneId, final ApiCallback<TimeZoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeZoneUsingGETValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TimeZoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimezonesUsingGET
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of time-zones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimezonesUsingGETCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locale/timezones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hateoasMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hateoasMode", hateoasMode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimezonesUsingGETValidateBeforeCall(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getTimezonesUsingGETCall(hateoasMode, limit, offset, _callback);

    }

    /**
     * Get time-zones
     * Get all known time-zones
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return TimeZonesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of time-zones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TimeZonesResponse getTimezonesUsingGET(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TimeZonesResponse> localVarResp = getTimezonesUsingGETWithHttpInfo(hateoasMode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get time-zones
     * Get all known time-zones
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return ApiResponse&lt;TimeZonesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of time-zones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimeZonesResponse> getTimezonesUsingGETWithHttpInfo(Boolean hateoasMode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTimezonesUsingGETValidateBeforeCall(hateoasMode, limit, offset, null);
        Type localVarReturnType = new TypeToken<TimeZonesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get time-zones (asynchronously)
     * Get all known time-zones
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of time-zones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 - Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 - Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 - Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimezonesUsingGETAsync(Boolean hateoasMode, Integer limit, Integer offset, final ApiCallback<TimeZonesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimezonesUsingGETValidateBeforeCall(hateoasMode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TimeZonesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
