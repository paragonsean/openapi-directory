/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Full country details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:41.357600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountryDetails {
  public static final String SERIALIZED_NAME_CALLING_CODE = "callingCode";
  @SerializedName(SERIALIZED_NAME_CALLING_CODE)
  private String callingCode;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CURRENCY_CODES = "currencyCodes";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODES)
  private List<String> currencyCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAG_IMAGE_URI = "flagImageUri";
  @SerializedName(SERIALIZED_NAME_FLAG_IMAGE_URI)
  private String flagImageUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM_REGIONS = "numRegions";
  @SerializedName(SERIALIZED_NAME_NUM_REGIONS)
  private Integer numRegions;

  public static final String SERIALIZED_NAME_WIKI_DATA_ID = "wikiDataId";
  @SerializedName(SERIALIZED_NAME_WIKI_DATA_ID)
  private String wikiDataId;

  public CountryDetails() {
  }

  public CountryDetails callingCode(String callingCode) {
    this.callingCode = callingCode;
    return this;
  }

  /**
   * The country dialing prefix
   * @return callingCode
   */
  @javax.annotation.Nullable
  public String getCallingCode() {
    return callingCode;
  }

  public void setCallingCode(String callingCode) {
    this.callingCode = callingCode;
  }


  public CountryDetails code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The ISO-3166 country code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CountryDetails currencyCodes(List<String> currencyCodes) {
    this.currencyCodes = currencyCodes;
    return this;
  }

  public CountryDetails addCurrencyCodesItem(String currencyCodesItem) {
    if (this.currencyCodes == null) {
      this.currencyCodes = new ArrayList<>();
    }
    this.currencyCodes.add(currencyCodesItem);
    return this;
  }

  /**
   * A list of supported ISO-4217 currency codes
   * @return currencyCodes
   */
  @javax.annotation.Nullable
  public List<String> getCurrencyCodes() {
    return currencyCodes;
  }

  public void setCurrencyCodes(List<String> currencyCodes) {
    this.currencyCodes = currencyCodes;
  }


  public CountryDetails flagImageUri(String flagImageUri) {
    this.flagImageUri = flagImageUri;
    return this;
  }

  /**
   * The country flag image
   * @return flagImageUri
   */
  @javax.annotation.Nullable
  public String getFlagImageUri() {
    return flagImageUri;
  }

  public void setFlagImageUri(String flagImageUri) {
    this.flagImageUri = flagImageUri;
  }


  public CountryDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The country name (varies by languageCode)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CountryDetails numRegions(Integer numRegions) {
    this.numRegions = numRegions;
    return this;
  }

  /**
   * The number of regions in this country
   * @return numRegions
   */
  @javax.annotation.Nullable
  public Integer getNumRegions() {
    return numRegions;
  }

  public void setNumRegions(Integer numRegions) {
    this.numRegions = numRegions;
  }


  public CountryDetails wikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
    return this;
  }

  /**
   * The country WikiData id
   * @return wikiDataId
   */
  @javax.annotation.Nullable
  public String getWikiDataId() {
    return wikiDataId;
  }

  public void setWikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryDetails countryDetails = (CountryDetails) o;
    return Objects.equals(this.callingCode, countryDetails.callingCode) &&
        Objects.equals(this.code, countryDetails.code) &&
        Objects.equals(this.currencyCodes, countryDetails.currencyCodes) &&
        Objects.equals(this.flagImageUri, countryDetails.flagImageUri) &&
        Objects.equals(this.name, countryDetails.name) &&
        Objects.equals(this.numRegions, countryDetails.numRegions) &&
        Objects.equals(this.wikiDataId, countryDetails.wikiDataId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callingCode, code, currencyCodes, flagImageUri, name, numRegions, wikiDataId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryDetails {\n");
    sb.append("    callingCode: ").append(toIndentedString(callingCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currencyCodes: ").append(toIndentedString(currencyCodes)).append("\n");
    sb.append("    flagImageUri: ").append(toIndentedString(flagImageUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numRegions: ").append(toIndentedString(numRegions)).append("\n");
    sb.append("    wikiDataId: ").append(toIndentedString(wikiDataId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callingCode");
    openapiFields.add("code");
    openapiFields.add("currencyCodes");
    openapiFields.add("flagImageUri");
    openapiFields.add("name");
    openapiFields.add("numRegions");
    openapiFields.add("wikiDataId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountryDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountryDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryDetails is not found in the empty JSON string", CountryDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountryDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callingCode") != null && !jsonObj.get("callingCode").isJsonNull()) && !jsonObj.get("callingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callingCode").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencyCodes") != null && !jsonObj.get("currencyCodes").isJsonNull() && !jsonObj.get("currencyCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCodes` to be an array in the JSON string but got `%s`", jsonObj.get("currencyCodes").toString()));
      }
      if ((jsonObj.get("flagImageUri") != null && !jsonObj.get("flagImageUri").isJsonNull()) && !jsonObj.get("flagImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flagImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flagImageUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("wikiDataId") != null && !jsonObj.get("wikiDataId").isJsonNull()) && !jsonObj.get("wikiDataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikiDataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikiDataId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryDetails>() {
           @Override
           public void write(JsonWriter out, CountryDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountryDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountryDetails
   * @throws IOException if the JSON string is invalid with respect to CountryDetails
   */
  public static CountryDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryDetails.class);
  }

  /**
   * Convert an instance of CountryDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

