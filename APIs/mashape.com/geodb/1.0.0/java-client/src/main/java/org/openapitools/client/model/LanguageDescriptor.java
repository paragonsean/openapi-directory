/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A language supported by the service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:41.357600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LanguageDescriptor {
  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    UNDEFINED("undefined"),
    
    AA("aa"),
    
    AB("ab"),
    
    AE("ae"),
    
    AF("af"),
    
    AK("ak"),
    
    AM("am"),
    
    AN("an"),
    
    AR("ar"),
    
    AS("as"),
    
    AV("av"),
    
    AY("ay"),
    
    AZ("az"),
    
    BA("ba"),
    
    BE("be"),
    
    BG("bg"),
    
    BH("bh"),
    
    BI("bi"),
    
    BM("bm"),
    
    BN("bn"),
    
    BO("bo"),
    
    BR("br"),
    
    BS("bs"),
    
    CA("ca"),
    
    CE("ce"),
    
    CH("ch"),
    
    CO("co"),
    
    CR("cr"),
    
    CS("cs"),
    
    CU("cu"),
    
    CV("cv"),
    
    CY("cy"),
    
    DA("da"),
    
    DE("de"),
    
    DV("dv"),
    
    DZ("dz"),
    
    EE("ee"),
    
    EL("el"),
    
    EN("en"),
    
    EO("eo"),
    
    ES("es"),
    
    ET("et"),
    
    EU("eu"),
    
    FA("fa"),
    
    FF("ff"),
    
    FI("fi"),
    
    FJ("fj"),
    
    FO("fo"),
    
    FR("fr"),
    
    FY("fy"),
    
    GA("ga"),
    
    GD("gd"),
    
    GL("gl"),
    
    GN("gn"),
    
    GU("gu"),
    
    GV("gv"),
    
    HA("ha"),
    
    HE("he"),
    
    HI("hi"),
    
    HO("ho"),
    
    HR("hr"),
    
    HT("ht"),
    
    HU("hu"),
    
    HY("hy"),
    
    HZ("hz"),
    
    IA("ia"),
    
    ID("id"),
    
    IE("ie"),
    
    IG("ig"),
    
    II("ii"),
    
    IK("ik"),
    
    IO("io"),
    
    IS("is"),
    
    IT("it"),
    
    IU("iu"),
    
    JA("ja"),
    
    JV("jv"),
    
    KA("ka"),
    
    KG("kg"),
    
    KI("ki"),
    
    KJ("kj"),
    
    KK("kk"),
    
    KL("kl"),
    
    KM("km"),
    
    KN("kn"),
    
    KO("ko"),
    
    KR("kr"),
    
    KS("ks"),
    
    KU("ku"),
    
    KV("kv"),
    
    KW("kw"),
    
    KY("ky"),
    
    LA("la"),
    
    LB("lb"),
    
    LG("lg"),
    
    LI("li"),
    
    LN("ln"),
    
    LO("lo"),
    
    LT("lt"),
    
    LU("lu"),
    
    LV("lv"),
    
    MG("mg"),
    
    MH("mh"),
    
    MI("mi"),
    
    MK("mk"),
    
    ML("ml"),
    
    MN("mn"),
    
    MR("mr"),
    
    MS("ms"),
    
    MT("mt"),
    
    MY("my"),
    
    NA("na"),
    
    NB("nb"),
    
    ND("nd"),
    
    NE("ne"),
    
    NG("ng"),
    
    NL("nl"),
    
    NN("nn"),
    
    NR("nr"),
    
    NV("nv"),
    
    NY("ny"),
    
    OC("oc"),
    
    OJ("oj"),
    
    OM("om"),
    
    OR("or"),
    
    OS("os"),
    
    PA("pa"),
    
    PI("pi"),
    
    PL("pl"),
    
    PS("ps"),
    
    PT("pt"),
    
    QU("qu"),
    
    RM("rm"),
    
    RN("rn"),
    
    RO("ro"),
    
    RU("ru"),
    
    RW("rw"),
    
    SA("sa"),
    
    SC("sc"),
    
    SD("sd"),
    
    SE("se"),
    
    SG("sg"),
    
    SI("si"),
    
    SK("sk"),
    
    SL("sl"),
    
    SM("sm"),
    
    SN("sn"),
    
    SO("so"),
    
    SQ("sq"),
    
    SR("sr"),
    
    SS("ss"),
    
    ST("st"),
    
    SU("su"),
    
    SV("sv"),
    
    SW("sw"),
    
    TA("ta"),
    
    TE("te"),
    
    TG("tg"),
    
    TH("th"),
    
    TI("ti"),
    
    TK("tk"),
    
    TL("tl"),
    
    TN("tn"),
    
    TO("to"),
    
    TR("tr"),
    
    TS("ts"),
    
    TT("tt"),
    
    TW("tw"),
    
    TY("ty"),
    
    UG("ug"),
    
    UK("uk"),
    
    UR("ur"),
    
    UZ("uz"),
    
    VE("ve"),
    
    VI("vi"),
    
    VO("vo"),
    
    WA("wa"),
    
    WO("wo"),
    
    XH("xh"),
    
    YI("yi"),
    
    YO("yo"),
    
    ZA("za"),
    
    ZH("zh"),
    
    ZU("zu");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public LanguageDescriptor() {
  }

  public LanguageDescriptor code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public LanguageDescriptor name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguageDescriptor languageDescriptor = (LanguageDescriptor) o;
    return Objects.equals(this.code, languageDescriptor.code) &&
        Objects.equals(this.name, languageDescriptor.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguageDescriptor {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LanguageDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LanguageDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LanguageDescriptor is not found in the empty JSON string", LanguageDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LanguageDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LanguageDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LanguageDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LanguageDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LanguageDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LanguageDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<LanguageDescriptor>() {
           @Override
           public void write(JsonWriter out, LanguageDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LanguageDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LanguageDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LanguageDescriptor
   * @throws IOException if the JSON string is invalid with respect to LanguageDescriptor
   */
  public static LanguageDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LanguageDescriptor.class);
  }

  /**
   * Convert an instance of LanguageDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

