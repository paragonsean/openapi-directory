/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Full country region details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:41.357600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionDetails {
  public static final String SERIALIZED_NAME_CAPITAL = "capital";
  @SerializedName(SERIALIZED_NAME_CAPITAL)
  private String capital;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_FIPS_CODE = "fipsCode";
  @SerializedName(SERIALIZED_NAME_FIPS_CODE)
  private String fipsCode;

  public static final String SERIALIZED_NAME_ISO_CODE = "isoCode";
  @SerializedName(SERIALIZED_NAME_ISO_CODE)
  private String isoCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM_CITIES = "numCities";
  @SerializedName(SERIALIZED_NAME_NUM_CITIES)
  private Integer numCities;

  public static final String SERIALIZED_NAME_WIKI_DATA_ID = "wikiDataId";
  @SerializedName(SERIALIZED_NAME_WIKI_DATA_ID)
  private String wikiDataId;

  public RegionDetails() {
  }

  public RegionDetails capital(String capital) {
    this.capital = capital;
    return this;
  }

  /**
   * The region&#39;s capital city (varies by languageCode)
   * @return capital
   */
  @javax.annotation.Nullable
  public String getCapital() {
    return capital;
  }

  public void setCapital(String capital) {
    this.capital = capital;
  }


  public RegionDetails countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * An ISO-3166 country code
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public RegionDetails fipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
    return this;
  }

  /**
   * The FIPS 10-4 region code
   * @return fipsCode
   */
  @javax.annotation.Nullable
  public String getFipsCode() {
    return fipsCode;
  }

  public void setFipsCode(String fipsCode) {
    this.fipsCode = fipsCode;
  }


  public RegionDetails isoCode(String isoCode) {
    this.isoCode = isoCode;
    return this;
  }

  /**
   * The ISO region code
   * @return isoCode
   */
  @javax.annotation.Nullable
  public String getIsoCode() {
    return isoCode;
  }

  public void setIsoCode(String isoCode) {
    this.isoCode = isoCode;
  }


  public RegionDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The region name (varies by languageCode)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RegionDetails numCities(Integer numCities) {
    this.numCities = numCities;
    return this;
  }

  /**
   * The number of cities in this region
   * @return numCities
   */
  @javax.annotation.Nullable
  public Integer getNumCities() {
    return numCities;
  }

  public void setNumCities(Integer numCities) {
    this.numCities = numCities;
  }


  public RegionDetails wikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
    return this;
  }

  /**
   * The region WikiData id
   * @return wikiDataId
   */
  @javax.annotation.Nullable
  public String getWikiDataId() {
    return wikiDataId;
  }

  public void setWikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionDetails regionDetails = (RegionDetails) o;
    return Objects.equals(this.capital, regionDetails.capital) &&
        Objects.equals(this.countryCode, regionDetails.countryCode) &&
        Objects.equals(this.fipsCode, regionDetails.fipsCode) &&
        Objects.equals(this.isoCode, regionDetails.isoCode) &&
        Objects.equals(this.name, regionDetails.name) &&
        Objects.equals(this.numCities, regionDetails.numCities) &&
        Objects.equals(this.wikiDataId, regionDetails.wikiDataId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capital, countryCode, fipsCode, isoCode, name, numCities, wikiDataId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionDetails {\n");
    sb.append("    capital: ").append(toIndentedString(capital)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    fipsCode: ").append(toIndentedString(fipsCode)).append("\n");
    sb.append("    isoCode: ").append(toIndentedString(isoCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numCities: ").append(toIndentedString(numCities)).append("\n");
    sb.append("    wikiDataId: ").append(toIndentedString(wikiDataId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capital");
    openapiFields.add("countryCode");
    openapiFields.add("fipsCode");
    openapiFields.add("isoCode");
    openapiFields.add("name");
    openapiFields.add("numCities");
    openapiFields.add("wikiDataId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionDetails is not found in the empty JSON string", RegionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capital") != null && !jsonObj.get("capital").isJsonNull()) && !jsonObj.get("capital").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capital` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capital").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("fipsCode") != null && !jsonObj.get("fipsCode").isJsonNull()) && !jsonObj.get("fipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fipsCode").toString()));
      }
      if ((jsonObj.get("isoCode") != null && !jsonObj.get("isoCode").isJsonNull()) && !jsonObj.get("isoCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("wikiDataId") != null && !jsonObj.get("wikiDataId").isJsonNull()) && !jsonObj.get("wikiDataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikiDataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikiDataId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionDetails>() {
           @Override
           public void write(JsonWriter out, RegionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionDetails
   * @throws IOException if the JSON string is invalid with respect to RegionDetails
   */
  public static RegionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionDetails.class);
  }

  /**
   * Convert an instance of RegionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

