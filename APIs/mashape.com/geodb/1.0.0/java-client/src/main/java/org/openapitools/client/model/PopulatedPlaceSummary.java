/*
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PopulatedPlaceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Minimal populated-place info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:41.357600-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PopulatedPlaceSummary {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POPULATION = "population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private Integer population;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PopulatedPlaceType type;

  public static final String SERIALIZED_NAME_WIKI_DATA_ID = "wikiDataId";
  @SerializedName(SERIALIZED_NAME_WIKI_DATA_ID)
  private String wikiDataId;

  public PopulatedPlaceSummary() {
  }

  public PopulatedPlaceSummary country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country name (varies by languageCode)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PopulatedPlaceSummary countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The ISO-3166 country code
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PopulatedPlaceSummary distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Included if this is the result of a distance query
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public PopulatedPlaceSummary id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The place GeoDB native id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PopulatedPlaceSummary latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The place latittude (-90.0 to 90.0)
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public PopulatedPlaceSummary longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The place longitude (-180.0 to 180.0)
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public PopulatedPlaceSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The place name (varies by languageCode)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PopulatedPlaceSummary population(Integer population) {
    this.population = population;
    return this;
  }

  /**
   * The place population
   * @return population
   */
  @javax.annotation.Nullable
  public Integer getPopulation() {
    return population;
  }

  public void setPopulation(Integer population) {
    this.population = population;
  }


  public PopulatedPlaceSummary region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The region name (varies by languageCode)
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public PopulatedPlaceSummary regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * The ISO or FIPS region code
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public PopulatedPlaceSummary type(PopulatedPlaceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public PopulatedPlaceType getType() {
    return type;
  }

  public void setType(PopulatedPlaceType type) {
    this.type = type;
  }


  public PopulatedPlaceSummary wikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
    return this;
  }

  /**
   * The place WikiData id
   * @return wikiDataId
   */
  @javax.annotation.Nullable
  public String getWikiDataId() {
    return wikiDataId;
  }

  public void setWikiDataId(String wikiDataId) {
    this.wikiDataId = wikiDataId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PopulatedPlaceSummary populatedPlaceSummary = (PopulatedPlaceSummary) o;
    return Objects.equals(this.country, populatedPlaceSummary.country) &&
        Objects.equals(this.countryCode, populatedPlaceSummary.countryCode) &&
        Objects.equals(this.distance, populatedPlaceSummary.distance) &&
        Objects.equals(this.id, populatedPlaceSummary.id) &&
        Objects.equals(this.latitude, populatedPlaceSummary.latitude) &&
        Objects.equals(this.longitude, populatedPlaceSummary.longitude) &&
        Objects.equals(this.name, populatedPlaceSummary.name) &&
        Objects.equals(this.population, populatedPlaceSummary.population) &&
        Objects.equals(this.region, populatedPlaceSummary.region) &&
        Objects.equals(this.regionCode, populatedPlaceSummary.regionCode) &&
        Objects.equals(this.type, populatedPlaceSummary.type) &&
        Objects.equals(this.wikiDataId, populatedPlaceSummary.wikiDataId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, countryCode, distance, id, latitude, longitude, name, population, region, regionCode, type, wikiDataId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PopulatedPlaceSummary {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wikiDataId: ").append(toIndentedString(wikiDataId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("countryCode");
    openapiFields.add("distance");
    openapiFields.add("id");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("population");
    openapiFields.add("region");
    openapiFields.add("regionCode");
    openapiFields.add("type");
    openapiFields.add("wikiDataId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PopulatedPlaceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PopulatedPlaceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PopulatedPlaceSummary is not found in the empty JSON string", PopulatedPlaceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PopulatedPlaceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PopulatedPlaceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        PopulatedPlaceType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("wikiDataId") != null && !jsonObj.get("wikiDataId").isJsonNull()) && !jsonObj.get("wikiDataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikiDataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikiDataId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PopulatedPlaceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PopulatedPlaceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PopulatedPlaceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PopulatedPlaceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PopulatedPlaceSummary>() {
           @Override
           public void write(JsonWriter out, PopulatedPlaceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PopulatedPlaceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PopulatedPlaceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PopulatedPlaceSummary
   * @throws IOException if the JSON string is invalid with respect to PopulatedPlaceSummary
   */
  public static PopulatedPlaceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PopulatedPlaceSummary.class);
  }

  /**
   * Convert an instance of PopulatedPlaceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

