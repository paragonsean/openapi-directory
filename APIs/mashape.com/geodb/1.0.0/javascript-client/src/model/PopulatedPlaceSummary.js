/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PopulatedPlaceType from './PopulatedPlaceType';

/**
 * The PopulatedPlaceSummary model module.
 * @module model/PopulatedPlaceSummary
 * @version 1.0.0
 */
class PopulatedPlaceSummary {
    /**
     * Constructs a new <code>PopulatedPlaceSummary</code>.
     * Minimal populated-place info
     * @alias module:model/PopulatedPlaceSummary
     */
    constructor() { 
        
        PopulatedPlaceSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PopulatedPlaceSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PopulatedPlaceSummary} obj Optional instance to populate.
     * @return {module:model/PopulatedPlaceSummary} The populated <code>PopulatedPlaceSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PopulatedPlaceSummary();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = PopulatedPlaceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('wikiDataId')) {
                obj['wikiDataId'] = ApiClient.convertToType(data['wikiDataId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PopulatedPlaceSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PopulatedPlaceSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['wikiDataId'] && !(typeof data['wikiDataId'] === 'string' || data['wikiDataId'] instanceof String)) {
            throw new Error("Expected the field `wikiDataId` to be a primitive type in the JSON string but got " + data['wikiDataId']);
        }

        return true;
    }


}



/**
 * The country name (varies by languageCode)
 * @member {String} country
 */
PopulatedPlaceSummary.prototype['country'] = undefined;

/**
 * The ISO-3166 country code
 * @member {String} countryCode
 */
PopulatedPlaceSummary.prototype['countryCode'] = undefined;

/**
 * Included if this is the result of a distance query
 * @member {Number} distance
 */
PopulatedPlaceSummary.prototype['distance'] = undefined;

/**
 * The place GeoDB native id
 * @member {Number} id
 */
PopulatedPlaceSummary.prototype['id'] = undefined;

/**
 * The place latittude (-90.0 to 90.0)
 * @member {Number} latitude
 */
PopulatedPlaceSummary.prototype['latitude'] = undefined;

/**
 * The place longitude (-180.0 to 180.0)
 * @member {Number} longitude
 */
PopulatedPlaceSummary.prototype['longitude'] = undefined;

/**
 * The place name (varies by languageCode)
 * @member {String} name
 */
PopulatedPlaceSummary.prototype['name'] = undefined;

/**
 * The place population
 * @member {Number} population
 */
PopulatedPlaceSummary.prototype['population'] = undefined;

/**
 * The region name (varies by languageCode)
 * @member {String} region
 */
PopulatedPlaceSummary.prototype['region'] = undefined;

/**
 * The ISO or FIPS region code
 * @member {String} regionCode
 */
PopulatedPlaceSummary.prototype['regionCode'] = undefined;

/**
 * @member {module:model/PopulatedPlaceType} type
 */
PopulatedPlaceSummary.prototype['type'] = undefined;

/**
 * The place WikiData id
 * @member {String} wikiDataId
 */
PopulatedPlaceSummary.prototype['wikiDataId'] = undefined;






export default PopulatedPlaceSummary;

