/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestResponse from '../model/BadRequestResponse';
import CountriesResponse from '../model/CountriesResponse';
import CountryResponse from '../model/CountryResponse';
import DateTimeResponse from '../model/DateTimeResponse';
import DistanceResponse from '../model/DistanceResponse';
import ForbiddenResponse from '../model/ForbiddenResponse';
import NotFoundResponse from '../model/NotFoundResponse';
import PopulatedPlaceResponse from '../model/PopulatedPlaceResponse';
import PopulatedPlacesResponse from '../model/PopulatedPlacesResponse';
import RegionResponse from '../model/RegionResponse';
import RegionsResponse from '../model/RegionsResponse';
import TimeResponse from '../model/TimeResponse';

/**
* Geo service.
* @module api/GeoApi
* @version 1.0.0
*/
export default class GeoApi {

    /**
    * Constructs a new GeoApi. 
    * @alias module:api/GeoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findAdminDivisionsUsingGET operation.
     * @callback module:api/GeoApi~findAdminDivisionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find administrative divisions
     * Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {Object} opts Optional parameters
     * @param {String} [location] Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findAdminDivisionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findAdminDivisionsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location': opts['location'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/adminDivisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCitiesNearAdminDivisionUsingGET operation.
     * @callback module:api/GeoApi~findCitiesNearAdminDivisionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find cities near division
     * Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {String} [types] Only places for these types (comma-delimited): CITY | ADM2
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findCitiesNearAdminDivisionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findCitiesNearAdminDivisionUsingGET(divisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling findCitiesNearAdminDivisionUsingGET");
      }

      let pathParams = {
        'divisionId': divisionId
      };
      let queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}/nearbyCities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCitiesNearCityUsingGET operation.
     * @callback module:api/GeoApi~findCitiesNearCityUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find cities near city
     * Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {String} [types] Only places for these types (comma-delimited): CITY | ADM2
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findCitiesNearCityUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findCitiesNearCityUsingGET(cityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling findCitiesNearCityUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}/nearbyCities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCitiesNearLocationUsingGET operation.
     * @callback module:api/GeoApi~findCitiesNearLocationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find cities near location
     * Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {String} [types] Only places for these types (comma-delimited): CITY | ADM2
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findCitiesNearLocationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findCitiesNearLocationUsingGET(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling findCitiesNearLocationUsingGET");
      }

      let pathParams = {
        'locationId': locationId
      };
      let queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/locations/{locationId}/nearbyCities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCitiesUsingGET operation.
     * @callback module:api/GeoApi~findCitiesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find cities
     * Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param {Object} opts Optional parameters
     * @param {String} [location] Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {String} [types] Only places for these types (comma-delimited): CITY | ADM2
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findCitiesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findCitiesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location': opts['location'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDivisionsNearAdminDivisionUsingGET operation.
     * @callback module:api/GeoApi~findDivisionsNearAdminDivisionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find divisions near division
     * Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findDivisionsNearAdminDivisionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findDivisionsNearAdminDivisionUsingGET(divisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling findDivisionsNearAdminDivisionUsingGET");
      }

      let pathParams = {
        'divisionId': divisionId
      };
      let queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}/nearbyDivisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDivisionsNearLocationUsingGET operation.
     * @callback module:api/GeoApi~findDivisionsNearLocationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find divisions near location
     * Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param {String} locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The location radius within which to find places
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {String} [countryIds] Only places in these countries (comma-delimited country codes or WikiData ids)
     * @param {String} [excludedCountryIds] Only places NOT in these countries (comma-delimited country codes or WikiData ids)
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findDivisionsNearLocationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findDivisionsNearLocationUsingGET(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling findDivisionsNearLocationUsingGET");
      }

      let pathParams = {
        'locationId': locationId
      };
      let queryParams = {
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit'],
        'countryIds': opts['countryIds'],
        'excludedCountryIds': opts['excludedCountryIds'],
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/locations/{locationId}/nearbyDivisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findRegionCitiesUsingGET operation.
     * @callback module:api/GeoApi~findRegionCitiesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find country region cities
     * Get the cities in a specific country region. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {String} [types] Only places for these types (comma-delimited): CITY | ADM2
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findRegionCitiesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findRegionCitiesUsingGET(countryId, regionCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findRegionCitiesUsingGET");
      }
      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling findRegionCitiesUsingGET");
      }

      let pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      let queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'types': opts['types'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findRegionDivisionsUsingGET operation.
     * @callback module:api/GeoApi~findRegionDivisionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find country region administrative divisions
     * Get the administrative divisions in a specific country region. The country and region info is omitted in the response. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Number} [minPopulation] Only places having at least this population
     * @param {Number} [maxPopulation] Only places having no more than this population
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {String} [timeZoneIds] Only places in these time-zones (comma-delimited)
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
     * @param {String} [includeDeleted = 'NONE')] Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
     * @param {module:api/GeoApi~findRegionDivisionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlacesResponse}
     */
    findRegionDivisionsUsingGET(countryId, regionCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling findRegionDivisionsUsingGET");
      }
      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling findRegionDivisionsUsingGET");
      }

      let pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      let queryParams = {
        'minPopulation': opts['minPopulation'],
        'maxPopulation': opts['maxPopulation'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'timeZoneIds': opts['timeZoneIds'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlacesResponse;
      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}/adminDivisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdminDivisionUsingGET operation.
     * @callback module:api/GeoApi~getAdminDivisionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get administrative division details
     * Get the details for a specific administrative division, including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} divisionId An admin-division id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {String} [languageCode] Display results in this language
     * @param {module:api/GeoApi~getAdminDivisionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlaceResponse}
     */
    getAdminDivisionUsingGET(divisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'divisionId' is set
      if (divisionId === undefined || divisionId === null) {
        throw new Error("Missing the required parameter 'divisionId' when calling getAdminDivisionUsingGET");
      }

      let pathParams = {
        'divisionId': divisionId
      };
      let queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlaceResponse;
      return this.apiClient.callApi(
        '/geo/adminDivisions/{divisionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityDateTimeUsingGET operation.
     * @callback module:api/GeoApi~getCityDateTimeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city date-time
     * Get city date-time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {module:api/GeoApi~getCityDateTimeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeResponse}
     */
    getCityDateTimeUsingGET(cityId, callback) {
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityDateTimeUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}/dateTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityDistanceUsingGET operation.
     * @callback module:api/GeoApi~getCityDistanceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city distance
     * Get distance from the given city
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {String} toCityId Distance to this city
     * @param {Object} opts Optional parameters
     * @param {String} [distanceUnit = 'MI')] The unit of distance: MI | KM
     * @param {module:api/GeoApi~getCityDistanceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistanceResponse}
     */
    getCityDistanceUsingGET(cityId, toCityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityDistanceUsingGET");
      }
      // verify the required parameter 'toCityId' is set
      if (toCityId === undefined || toCityId === null) {
        throw new Error("Missing the required parameter 'toCityId' when calling getCityDistanceUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
        'toCityId': toCityId,
        'distanceUnit': opts['distanceUnit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistanceResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}/distance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityLocatedInUsingGET operation.
     * @callback module:api/GeoApi~getCityLocatedInUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city admin region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {String} [languageCode] Display results in this language
     * @param {module:api/GeoApi~getCityLocatedInUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlaceResponse}
     */
    getCityLocatedInUsingGET(cityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityLocatedInUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlaceResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}/locatedIn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityTimeUsingGET operation.
     * @callback module:api/GeoApi~getCityTimeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city time
     * Get city time
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {module:api/GeoApi~getCityTimeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeResponse}
     */
    getCityTimeUsingGET(cityId, callback) {
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityTimeUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCityUsingGET operation.
     * @callback module:api/GeoApi~getCityUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopulatedPlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city details
     * Get the details for a specific city, including location coordinates, population, and elevation above sea-level (if available). 
     * @param {String} cityId A city id (either native 'id' or 'wikiDataId')
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {String} [languageCode] Display results in this language
     * @param {module:api/GeoApi~getCityUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopulatedPlaceResponse}
     */
    getCityUsingGET(cityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityId' is set
      if (cityId === undefined || cityId === null) {
        throw new Error("Missing the required parameter 'cityId' when calling getCityUsingGET");
      }

      let pathParams = {
        'cityId': cityId
      };
      let queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopulatedPlaceResponse;
      return this.apiClient.callApi(
        '/geo/cities/{cityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountriesUsingGET operation.
     * @callback module:api/GeoApi~getCountriesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find countries
     * Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     * @param {Object} opts Optional parameters
     * @param {String} [currencyCode] Only countries supporting this currency
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name
     * @param {module:api/GeoApi~getCountriesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountriesResponse}
     */
    getCountriesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'currencyCode': opts['currencyCode'],
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountriesResponse;
      return this.apiClient.callApi(
        '/geo/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountryUsingGET operation.
     * @callback module:api/GeoApi~getCountryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get country details
     * Get the details for a specific country, including number of regions.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {String} [languageCode] Display results in this language
     * @param {module:api/GeoApi~getCountryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryResponse}
     */
    getCountryUsingGET(countryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getCountryUsingGET");
      }

      let pathParams = {
        'countryId': countryId
      };
      let queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountryResponse;
      return this.apiClient.callApi(
        '/geo/countries/{countryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionUsingGET operation.
     * @callback module:api/GeoApi~getRegionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get region details
     * Get the details of a specific country region, including number of cities.
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {String} regionCode An ISO-3166 or FIPS region code
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {String} [languageCode] Display results in this language
     * @param {module:api/GeoApi~getRegionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegionResponse}
     */
    getRegionUsingGET(countryId, regionCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getRegionUsingGET");
      }
      // verify the required parameter 'regionCode' is set
      if (regionCode === undefined || regionCode === null) {
        throw new Error("Missing the required parameter 'regionCode' when calling getRegionUsingGET");
      }

      let pathParams = {
        'countryId': countryId,
        'regionCode': regionCode
      };
      let queryParams = {
        'asciiMode': opts['asciiMode'],
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegionResponse;
      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions/{regionCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionsUsingGET operation.
     * @callback module:api/GeoApi~getRegionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find country regions
     * Get all regions in a specific country. These could be states, provinces, districts, or otherwise major political divisions. 
     * @param {String} countryId An ISO-3166 country code or WikiData id
     * @param {Object} opts Optional parameters
     * @param {String} [namePrefix] Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
     * @param {Boolean} [namePrefixDefaultLangResults = true)] When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
     * @param {Boolean} [asciiMode = false)] Display results using ASCII characters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {String} [languageCode] Display results in this language
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {String} [sort] How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name
     * @param {module:api/GeoApi~getRegionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegionsResponse}
     */
    getRegionsUsingGET(countryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getRegionsUsingGET");
      }

      let pathParams = {
        'countryId': countryId
      };
      let queryParams = {
        'namePrefix': opts['namePrefix'],
        'namePrefixDefaultLangResults': opts['namePrefixDefaultLangResults'],
        'asciiMode': opts['asciiMode'],
        'hateoasMode': opts['hateoasMode'],
        'languageCode': opts['languageCode'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegionsResponse;
      return this.apiClient.callApi(
        '/geo/countries/{countryId}/regions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
