/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestResponse from '../model/BadRequestResponse';
import CurrenciesResponse from '../model/CurrenciesResponse';
import DateTimeResponse from '../model/DateTimeResponse';
import ForbiddenResponse from '../model/ForbiddenResponse';
import LanguagesResponse from '../model/LanguagesResponse';
import LocalesResponse from '../model/LocalesResponse';
import NotFoundResponse from '../model/NotFoundResponse';
import TimeResponse from '../model/TimeResponse';
import TimeZoneResponse from '../model/TimeZoneResponse';
import TimeZonesResponse from '../model/TimeZonesResponse';

/**
* Locale service.
* @module api/LocaleApi
* @version 1.0.0
*/
export default class LocaleApi {

    /**
    * Constructs a new LocaleApi. 
    * @alias module:api/LocaleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCurrenciesUsingGET operation.
     * @callback module:api/LocaleApi~getCurrenciesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param {String} countryId Currencies for this country id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {module:api/LocaleApi~getCurrenciesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrenciesResponse}
     */
    getCurrenciesUsingGET(countryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling getCurrenciesUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryId': countryId,
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrenciesResponse;
      return this.apiClient.callApi(
        '/locale/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLanguagesUsingGET operation.
     * @callback module:api/LocaleApi~getLanguagesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LanguagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get languages
     * Get all supported languages
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {module:api/LocaleApi~getLanguagesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LanguagesResponse}
     */
    getLanguagesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LanguagesResponse;
      return this.apiClient.callApi(
        '/locale/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalesUsingGET operation.
     * @callback module:api/LocaleApi~getLocalesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get locales
     * Get all known locales
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {module:api/LocaleApi~getLocalesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocalesResponse}
     */
    getLocalesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocalesResponse;
      return this.apiClient.callApi(
        '/locale/locales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeZoneDateTimeUsingGET operation.
     * @callback module:api/LocaleApi~getTimeZoneDateTimeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DateTimeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param {String} zoneId A time-zone id
     * @param {module:api/LocaleApi~getTimeZoneDateTimeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DateTimeResponse}
     */
    getTimeZoneDateTimeUsingGET(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneDateTimeUsingGET");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DateTimeResponse;
      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}/dateTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeZoneTimeUsingGET operation.
     * @callback module:api/LocaleApi~getTimeZoneTimeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time-zone time
     * Get time-zone time
     * @param {String} zoneId A time-zone id
     * @param {module:api/LocaleApi~getTimeZoneTimeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeResponse}
     */
    getTimeZoneTimeUsingGET(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneTimeUsingGET");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeResponse;
      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeZoneUsingGET operation.
     * @callback module:api/LocaleApi~getTimeZoneUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeZoneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time-zone
     * Get time-zone
     * @param {String} zoneId A time-zone id
     * @param {module:api/LocaleApi~getTimeZoneUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeZoneResponse}
     */
    getTimeZoneUsingGET(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTimeZoneUsingGET");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeZoneResponse;
      return this.apiClient.callApi(
        '/locale/timezones/{zoneId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimezonesUsingGET operation.
     * @callback module:api/LocaleApi~getTimezonesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeZonesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time-zones
     * Get all known time-zones
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hateoasMode = true)] Include HATEOAS-style links in results
     * @param {Number} [limit = 10)] The maximum number of results to retrieve
     * @param {Number} [offset = 0)] The zero-ary offset index into the results
     * @param {module:api/LocaleApi~getTimezonesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeZonesResponse}
     */
    getTimezonesUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hateoasMode': opts['hateoasMode'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeZonesResponse;
      return this.apiClient.callApi(
        '/locale/timezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
