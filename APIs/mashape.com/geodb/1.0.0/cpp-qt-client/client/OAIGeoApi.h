/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeoApi_H
#define OAI_OAIGeoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBadRequestResponse.h"
#include "OAICountriesResponse.h"
#include "OAICountryResponse.h"
#include "OAIDateTimeResponse.h"
#include "OAIDistanceResponse.h"
#include "OAIForbiddenResponse.h"
#include "OAINotFoundResponse.h"
#include "OAIPopulatedPlaceResponse.h"
#include "OAIPopulatedPlacesResponse.h"
#include "OAIRegionResponse.h"
#include "OAIRegionsResponse.h"
#include "OAITimeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeoApi : public QObject {
    Q_OBJECT

public:
    OAIGeoApi(const int timeOut = 0);
    ~OAIGeoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findAdminDivisionsUsingGET(const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  division_id QString [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findCitiesNearAdminDivisionUsingGET(const QString &division_id, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city_id QString [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findCitiesNearCityUsingGET(const QString &city_id, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findCitiesNearLocationUsingGET(const QString &location_id, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findCitiesUsingGET(const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  division_id QString [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findDivisionsNearAdminDivisionUsingGET(const QString &division_id, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  country_ids QString [optional]
    * @param[in]  excluded_country_ids QString [optional]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findDivisionsNearLocationUsingGET(const QString &location_id, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_country_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  region_code QString [required]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findRegionCitiesUsingGET(const QString &country_id, const QString &region_code, const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  region_code QString [required]
    * @param[in]  min_population qint32 [optional]
    * @param[in]  max_population qint32 [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  time_zone_ids QString [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    virtual void findRegionDivisionsUsingGET(const QString &country_id, const QString &region_code, const ::OpenAPI::OptionalParam<qint32> &min_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_population = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  division_id QString [required]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void getAdminDivisionUsingGET(const QString &division_id, const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city_id QString [required]
    */
    virtual void getCityDateTimeUsingGET(const QString &city_id);

    /**
    * @param[in]  city_id QString [required]
    * @param[in]  to_city_id QString [required]
    * @param[in]  distance_unit QString [optional]
    */
    virtual void getCityDistanceUsingGET(const QString &city_id, const QString &to_city_id, const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city_id QString [required]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void getCityLocatedInUsingGET(const QString &city_id, const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  city_id QString [required]
    */
    virtual void getCityTimeUsingGET(const QString &city_id);

    /**
    * @param[in]  city_id QString [required]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void getCityUsingGET(const QString &city_id, const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  currency_code QString [optional]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getCountriesUsingGET(const ::OpenAPI::OptionalParam<QString> &currency_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void getCountryUsingGET(const QString &country_id, const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  region_code QString [required]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void getRegionUsingGET(const QString &country_id, const QString &region_code, const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  name_prefix QString [optional]
    * @param[in]  name_prefix_default_lang_results bool [optional]
    * @param[in]  ascii_mode bool [optional]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getRegionsUsingGET(const QString &country_id, const ::OpenAPI::OptionalParam<QString> &name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &name_prefix_default_lang_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ascii_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findAdminDivisionsUsingGETCallback(OAIHttpRequestWorker *worker);
    void findCitiesNearAdminDivisionUsingGETCallback(OAIHttpRequestWorker *worker);
    void findCitiesNearCityUsingGETCallback(OAIHttpRequestWorker *worker);
    void findCitiesNearLocationUsingGETCallback(OAIHttpRequestWorker *worker);
    void findCitiesUsingGETCallback(OAIHttpRequestWorker *worker);
    void findDivisionsNearAdminDivisionUsingGETCallback(OAIHttpRequestWorker *worker);
    void findDivisionsNearLocationUsingGETCallback(OAIHttpRequestWorker *worker);
    void findRegionCitiesUsingGETCallback(OAIHttpRequestWorker *worker);
    void findRegionDivisionsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAdminDivisionUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCityDateTimeUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCityDistanceUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCityLocatedInUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCityTimeUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCityUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCountriesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getCountryUsingGETCallback(OAIHttpRequestWorker *worker);
    void getRegionUsingGETCallback(OAIHttpRequestWorker *worker);
    void getRegionsUsingGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findAdminDivisionsUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findCitiesNearAdminDivisionUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findCitiesNearCityUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findCitiesNearLocationUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findCitiesUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findDivisionsNearAdminDivisionUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findDivisionsNearLocationUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findRegionCitiesUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void findRegionDivisionsUsingGETSignal(OAIPopulatedPlacesResponse summary);
    void getAdminDivisionUsingGETSignal(OAIPopulatedPlaceResponse summary);
    void getCityDateTimeUsingGETSignal(OAIDateTimeResponse summary);
    void getCityDistanceUsingGETSignal(OAIDistanceResponse summary);
    void getCityLocatedInUsingGETSignal(OAIPopulatedPlaceResponse summary);
    void getCityTimeUsingGETSignal(OAITimeResponse summary);
    void getCityUsingGETSignal(OAIPopulatedPlaceResponse summary);
    void getCountriesUsingGETSignal(OAICountriesResponse summary);
    void getCountryUsingGETSignal(OAICountryResponse summary);
    void getRegionUsingGETSignal(OAIRegionResponse summary);
    void getRegionsUsingGETSignal(OAIRegionsResponse summary);


    void findAdminDivisionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findCitiesNearAdminDivisionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findCitiesNearCityUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findCitiesNearLocationUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findCitiesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findDivisionsNearAdminDivisionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findDivisionsNearLocationUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findRegionCitiesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void findRegionDivisionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlacesResponse summary);
    void getAdminDivisionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlaceResponse summary);
    void getCityDateTimeUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeResponse summary);
    void getCityDistanceUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIDistanceResponse summary);
    void getCityLocatedInUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlaceResponse summary);
    void getCityTimeUsingGETSignalFull(OAIHttpRequestWorker *worker, OAITimeResponse summary);
    void getCityUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPopulatedPlaceResponse summary);
    void getCountriesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICountriesResponse summary);
    void getCountryUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICountryResponse summary);
    void getRegionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRegionResponse summary);
    void getRegionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIRegionsResponse summary);

    Q_DECL_DEPRECATED_X("Use findAdminDivisionsUsingGETSignalError() instead")
    void findAdminDivisionsUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findAdminDivisionsUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearAdminDivisionUsingGETSignalError() instead")
    void findCitiesNearAdminDivisionUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearAdminDivisionUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearCityUsingGETSignalError() instead")
    void findCitiesNearCityUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearCityUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearLocationUsingGETSignalError() instead")
    void findCitiesNearLocationUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearLocationUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesUsingGETSignalError() instead")
    void findCitiesUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDivisionsNearAdminDivisionUsingGETSignalError() instead")
    void findDivisionsNearAdminDivisionUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findDivisionsNearAdminDivisionUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDivisionsNearLocationUsingGETSignalError() instead")
    void findDivisionsNearLocationUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findDivisionsNearLocationUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findRegionCitiesUsingGETSignalError() instead")
    void findRegionCitiesUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findRegionCitiesUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findRegionDivisionsUsingGETSignalError() instead")
    void findRegionDivisionsUsingGETSignalE(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findRegionDivisionsUsingGETSignalError(OAIPopulatedPlacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdminDivisionUsingGETSignalError() instead")
    void getAdminDivisionUsingGETSignalE(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminDivisionUsingGETSignalError(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityDateTimeUsingGETSignalError() instead")
    void getCityDateTimeUsingGETSignalE(OAIDateTimeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityDateTimeUsingGETSignalError(OAIDateTimeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityDistanceUsingGETSignalError() instead")
    void getCityDistanceUsingGETSignalE(OAIDistanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityDistanceUsingGETSignalError(OAIDistanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityLocatedInUsingGETSignalError() instead")
    void getCityLocatedInUsingGETSignalE(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityLocatedInUsingGETSignalError(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityTimeUsingGETSignalError() instead")
    void getCityTimeUsingGETSignalE(OAITimeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityTimeUsingGETSignalError(OAITimeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityUsingGETSignalError() instead")
    void getCityUsingGETSignalE(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityUsingGETSignalError(OAIPopulatedPlaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesUsingGETSignalError() instead")
    void getCountriesUsingGETSignalE(OAICountriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesUsingGETSignalError(OAICountriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountryUsingGETSignalError() instead")
    void getCountryUsingGETSignalE(OAICountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountryUsingGETSignalError(OAICountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionUsingGETSignalError() instead")
    void getRegionUsingGETSignalE(OAIRegionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionUsingGETSignalError(OAIRegionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsUsingGETSignalError() instead")
    void getRegionsUsingGETSignalE(OAIRegionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsUsingGETSignalError(OAIRegionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findAdminDivisionsUsingGETSignalErrorFull() instead")
    void findAdminDivisionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAdminDivisionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearAdminDivisionUsingGETSignalErrorFull() instead")
    void findCitiesNearAdminDivisionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearAdminDivisionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearCityUsingGETSignalErrorFull() instead")
    void findCitiesNearCityUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearCityUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesNearLocationUsingGETSignalErrorFull() instead")
    void findCitiesNearLocationUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesNearLocationUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCitiesUsingGETSignalErrorFull() instead")
    void findCitiesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCitiesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDivisionsNearAdminDivisionUsingGETSignalErrorFull() instead")
    void findDivisionsNearAdminDivisionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findDivisionsNearAdminDivisionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findDivisionsNearLocationUsingGETSignalErrorFull() instead")
    void findDivisionsNearLocationUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findDivisionsNearLocationUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findRegionCitiesUsingGETSignalErrorFull() instead")
    void findRegionCitiesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findRegionCitiesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findRegionDivisionsUsingGETSignalErrorFull() instead")
    void findRegionDivisionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findRegionDivisionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdminDivisionUsingGETSignalErrorFull() instead")
    void getAdminDivisionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminDivisionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityDateTimeUsingGETSignalErrorFull() instead")
    void getCityDateTimeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityDateTimeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityDistanceUsingGETSignalErrorFull() instead")
    void getCityDistanceUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityDistanceUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityLocatedInUsingGETSignalErrorFull() instead")
    void getCityLocatedInUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityLocatedInUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityTimeUsingGETSignalErrorFull() instead")
    void getCityTimeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityTimeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCityUsingGETSignalErrorFull() instead")
    void getCityUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCityUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesUsingGETSignalErrorFull() instead")
    void getCountriesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountryUsingGETSignalErrorFull() instead")
    void getCountryUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountryUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionUsingGETSignalErrorFull() instead")
    void getRegionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsUsingGETSignalErrorFull() instead")
    void getRegionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
