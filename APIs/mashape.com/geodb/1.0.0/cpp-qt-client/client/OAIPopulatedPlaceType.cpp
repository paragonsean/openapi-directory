/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopulatedPlaceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopulatedPlaceType::OAIPopulatedPlaceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopulatedPlaceType::OAIPopulatedPlaceType() {
    this->initializeModel();
}

OAIPopulatedPlaceType::~OAIPopulatedPlaceType() {}

void OAIPopulatedPlaceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPopulatedPlaceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPopulatedPlaceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ADM2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPopulatedPlaceType::ADM2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPopulatedPlaceType::CITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPopulatedPlaceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPopulatedPlaceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPopulatedPlaceType::ADM2:
            val = "ADM2";
            break;
        case eOAIPopulatedPlaceType::CITY:
            val = "CITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPopulatedPlaceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPopulatedPlaceType::eOAIPopulatedPlaceType OAIPopulatedPlaceType::getValue() const {
    return m_value;
}

void OAIPopulatedPlaceType::setValue(const OAIPopulatedPlaceType::eOAIPopulatedPlaceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPopulatedPlaceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPopulatedPlaceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
