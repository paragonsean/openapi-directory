/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionDetails::OAIRegionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionDetails::OAIRegionDetails() {
    this->initializeModel();
}

OAIRegionDetails::~OAIRegionDetails() {}

void OAIRegionDetails::initializeModel() {

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_fips_code_isSet = false;
    m_fips_code_isValid = false;

    m_iso_code_isSet = false;
    m_iso_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_cities_isSet = false;
    m_num_cities_isValid = false;

    m_wiki_data_id_isSet = false;
    m_wiki_data_id_isValid = false;
}

void OAIRegionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionDetails::fromJsonObject(QJsonObject json) {

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("capital")]);
    m_capital_isSet = !json[QString("capital")].isNull() && m_capital_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fips_code, json[QString("fipsCode")]);
    m_fips_code_isSet = !json[QString("fipsCode")].isNull() && m_fips_code_isValid;

    m_iso_code_isValid = ::OpenAPI::fromJsonValue(m_iso_code, json[QString("isoCode")]);
    m_iso_code_isSet = !json[QString("isoCode")].isNull() && m_iso_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_cities_isValid = ::OpenAPI::fromJsonValue(m_num_cities, json[QString("numCities")]);
    m_num_cities_isSet = !json[QString("numCities")].isNull() && m_num_cities_isValid;

    m_wiki_data_id_isValid = ::OpenAPI::fromJsonValue(m_wiki_data_id, json[QString("wikiDataId")]);
    m_wiki_data_id_isSet = !json[QString("wikiDataId")].isNull() && m_wiki_data_id_isValid;
}

QString OAIRegionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_capital_isSet) {
        obj.insert(QString("capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_fips_code_isSet) {
        obj.insert(QString("fipsCode"), ::OpenAPI::toJsonValue(m_fips_code));
    }
    if (m_iso_code_isSet) {
        obj.insert(QString("isoCode"), ::OpenAPI::toJsonValue(m_iso_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_cities_isSet) {
        obj.insert(QString("numCities"), ::OpenAPI::toJsonValue(m_num_cities));
    }
    if (m_wiki_data_id_isSet) {
        obj.insert(QString("wikiDataId"), ::OpenAPI::toJsonValue(m_wiki_data_id));
    }
    return obj;
}

QString OAIRegionDetails::getCapital() const {
    return m_capital;
}
void OAIRegionDetails::setCapital(const QString &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAIRegionDetails::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAIRegionDetails::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAIRegionDetails::getCountryCode() const {
    return m_country_code;
}
void OAIRegionDetails::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIRegionDetails::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIRegionDetails::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIRegionDetails::getFipsCode() const {
    return m_fips_code;
}
void OAIRegionDetails::setFipsCode(const QString &fips_code) {
    m_fips_code = fips_code;
    m_fips_code_isSet = true;
}

bool OAIRegionDetails::is_fips_code_Set() const{
    return m_fips_code_isSet;
}

bool OAIRegionDetails::is_fips_code_Valid() const{
    return m_fips_code_isValid;
}

QString OAIRegionDetails::getIsoCode() const {
    return m_iso_code;
}
void OAIRegionDetails::setIsoCode(const QString &iso_code) {
    m_iso_code = iso_code;
    m_iso_code_isSet = true;
}

bool OAIRegionDetails::is_iso_code_Set() const{
    return m_iso_code_isSet;
}

bool OAIRegionDetails::is_iso_code_Valid() const{
    return m_iso_code_isValid;
}

QString OAIRegionDetails::getName() const {
    return m_name;
}
void OAIRegionDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegionDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegionDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRegionDetails::getNumCities() const {
    return m_num_cities;
}
void OAIRegionDetails::setNumCities(const qint32 &num_cities) {
    m_num_cities = num_cities;
    m_num_cities_isSet = true;
}

bool OAIRegionDetails::is_num_cities_Set() const{
    return m_num_cities_isSet;
}

bool OAIRegionDetails::is_num_cities_Valid() const{
    return m_num_cities_isValid;
}

QString OAIRegionDetails::getWikiDataId() const {
    return m_wiki_data_id;
}
void OAIRegionDetails::setWikiDataId(const QString &wiki_data_id) {
    m_wiki_data_id = wiki_data_id;
    m_wiki_data_id_isSet = true;
}

bool OAIRegionDetails::is_wiki_data_id_Set() const{
    return m_wiki_data_id_isSet;
}

bool OAIRegionDetails::is_wiki_data_id_Valid() const{
    return m_wiki_data_id_isValid;
}

bool OAIRegionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_cities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
