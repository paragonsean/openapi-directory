/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopulatedPlaceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopulatedPlaceDetails::OAIPopulatedPlaceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopulatedPlaceDetails::OAIPopulatedPlaceDetails() {
    this->initializeModel();
}

OAIPopulatedPlaceDetails::~OAIPopulatedPlaceDetails() {}

void OAIPopulatedPlaceDetails::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_elevation_meters_isSet = false;
    m_elevation_meters_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wiki_data_id_isSet = false;
    m_wiki_data_id_isValid = false;
}

void OAIPopulatedPlaceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopulatedPlaceDetails::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_elevation_meters_isValid = ::OpenAPI::fromJsonValue(m_elevation_meters, json[QString("elevationMeters")]);
    m_elevation_meters_isSet = !json[QString("elevationMeters")].isNull() && m_elevation_meters_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("population")]);
    m_population_isSet = !json[QString("population")].isNull() && m_population_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wiki_data_id_isValid = ::OpenAPI::fromJsonValue(m_wiki_data_id, json[QString("wikiDataId")]);
    m_wiki_data_id_isSet = !json[QString("wikiDataId")].isNull() && m_wiki_data_id_isValid;
}

QString OAIPopulatedPlaceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopulatedPlaceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_elevation_meters_isSet) {
        obj.insert(QString("elevationMeters"), ::OpenAPI::toJsonValue(m_elevation_meters));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_population_isSet) {
        obj.insert(QString("population"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wiki_data_id_isSet) {
        obj.insert(QString("wikiDataId"), ::OpenAPI::toJsonValue(m_wiki_data_id));
    }
    return obj;
}

QString OAIPopulatedPlaceDetails::getCountry() const {
    return m_country;
}
void OAIPopulatedPlaceDetails::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPopulatedPlaceDetails::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPopulatedPlaceDetails::getCountryCode() const {
    return m_country_code;
}
void OAIPopulatedPlaceDetails::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPopulatedPlaceDetails::is_country_code_Valid() const{
    return m_country_code_isValid;
}

bool OAIPopulatedPlaceDetails::isDeleted() const {
    return m_deleted;
}
void OAIPopulatedPlaceDetails::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPopulatedPlaceDetails::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAIPopulatedPlaceDetails::getElevationMeters() const {
    return m_elevation_meters;
}
void OAIPopulatedPlaceDetails::setElevationMeters(const qint32 &elevation_meters) {
    m_elevation_meters = elevation_meters;
    m_elevation_meters_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_elevation_meters_Set() const{
    return m_elevation_meters_isSet;
}

bool OAIPopulatedPlaceDetails::is_elevation_meters_Valid() const{
    return m_elevation_meters_isValid;
}

qint32 OAIPopulatedPlaceDetails::getId() const {
    return m_id;
}
void OAIPopulatedPlaceDetails::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPopulatedPlaceDetails::is_id_Valid() const{
    return m_id_isValid;
}

double OAIPopulatedPlaceDetails::getLatitude() const {
    return m_latitude;
}
void OAIPopulatedPlaceDetails::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPopulatedPlaceDetails::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIPopulatedPlaceDetails::getLongitude() const {
    return m_longitude;
}
void OAIPopulatedPlaceDetails::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPopulatedPlaceDetails::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIPopulatedPlaceDetails::getName() const {
    return m_name;
}
void OAIPopulatedPlaceDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPopulatedPlaceDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPopulatedPlaceDetails::getPopulation() const {
    return m_population;
}
void OAIPopulatedPlaceDetails::setPopulation(const qint32 &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_population_Set() const{
    return m_population_isSet;
}

bool OAIPopulatedPlaceDetails::is_population_Valid() const{
    return m_population_isValid;
}

QString OAIPopulatedPlaceDetails::getRegion() const {
    return m_region;
}
void OAIPopulatedPlaceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPopulatedPlaceDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIPopulatedPlaceDetails::getRegionCode() const {
    return m_region_code;
}
void OAIPopulatedPlaceDetails::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIPopulatedPlaceDetails::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIPopulatedPlaceDetails::getTimezone() const {
    return m_timezone;
}
void OAIPopulatedPlaceDetails::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIPopulatedPlaceDetails::is_timezone_Valid() const{
    return m_timezone_isValid;
}

OAIPopulatedPlaceType OAIPopulatedPlaceDetails::getType() const {
    return m_type;
}
void OAIPopulatedPlaceDetails::setType(const OAIPopulatedPlaceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPopulatedPlaceDetails::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPopulatedPlaceDetails::getWikiDataId() const {
    return m_wiki_data_id;
}
void OAIPopulatedPlaceDetails::setWikiDataId(const QString &wiki_data_id) {
    m_wiki_data_id = wiki_data_id;
    m_wiki_data_id_isSet = true;
}

bool OAIPopulatedPlaceDetails::is_wiki_data_id_Set() const{
    return m_wiki_data_id_isSet;
}

bool OAIPopulatedPlaceDetails::is_wiki_data_id_Valid() const{
    return m_wiki_data_id_isValid;
}

bool OAIPopulatedPlaceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopulatedPlaceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
