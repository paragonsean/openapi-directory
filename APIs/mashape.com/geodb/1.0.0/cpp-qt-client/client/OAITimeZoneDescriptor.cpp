/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeZoneDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeZoneDescriptor::OAITimeZoneDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeZoneDescriptor::OAITimeZoneDescriptor() {
    this->initializeModel();
}

OAITimeZoneDescriptor::~OAITimeZoneDescriptor() {}

void OAITimeZoneDescriptor::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_raw_utc_offset_hours_isSet = false;
    m_raw_utc_offset_hours_isValid = false;
}

void OAITimeZoneDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeZoneDescriptor::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_raw_utc_offset_hours_isValid = ::OpenAPI::fromJsonValue(m_raw_utc_offset_hours, json[QString("rawUtcOffsetHours")]);
    m_raw_utc_offset_hours_isSet = !json[QString("rawUtcOffsetHours")].isNull() && m_raw_utc_offset_hours_isValid;
}

QString OAITimeZoneDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeZoneDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_raw_utc_offset_hours_isSet) {
        obj.insert(QString("rawUtcOffsetHours"), ::OpenAPI::toJsonValue(m_raw_utc_offset_hours));
    }
    return obj;
}

QString OAITimeZoneDescriptor::getId() const {
    return m_id;
}
void OAITimeZoneDescriptor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimeZoneDescriptor::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimeZoneDescriptor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimeZoneDescriptor::getName() const {
    return m_name;
}
void OAITimeZoneDescriptor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimeZoneDescriptor::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimeZoneDescriptor::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITimeZoneDescriptor::getRawUtcOffsetHours() const {
    return m_raw_utc_offset_hours;
}
void OAITimeZoneDescriptor::setRawUtcOffsetHours(const qint32 &raw_utc_offset_hours) {
    m_raw_utc_offset_hours = raw_utc_offset_hours;
    m_raw_utc_offset_hours_isSet = true;
}

bool OAITimeZoneDescriptor::is_raw_utc_offset_hours_Set() const{
    return m_raw_utc_offset_hours_isSet;
}

bool OAITimeZoneDescriptor::is_raw_utc_offset_hours_Valid() const{
    return m_raw_utc_offset_hours_isValid;
}

bool OAITimeZoneDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_utc_offset_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeZoneDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
