/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocaleApi_H
#define OAI_OAILocaleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBadRequestResponse.h"
#include "OAICurrenciesResponse.h"
#include "OAIDateTimeResponse.h"
#include "OAIForbiddenResponse.h"
#include "OAILanguagesResponse.h"
#include "OAILocalesResponse.h"
#include "OAINotFoundResponse.h"
#include "OAITimeResponse.h"
#include "OAITimeZoneResponse.h"
#include "OAITimeZonesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocaleApi : public QObject {
    Q_OBJECT

public:
    OAILocaleApi(const int timeOut = 0);
    ~OAILocaleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getCurrenciesUsingGET(const QString &country_id, const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getLanguagesUsingGET(const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getLocalesUsingGET(const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void getTimeZoneDateTimeUsingGET(const QString &zone_id);

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void getTimeZoneTimeUsingGET(const QString &zone_id);

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void getTimeZoneUsingGET(const QString &zone_id);

    /**
    * @param[in]  hateoas_mode bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getTimezonesUsingGET(const ::OpenAPI::OptionalParam<bool> &hateoas_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCurrenciesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getLanguagesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getLocalesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTimeZoneDateTimeUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTimeZoneTimeUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTimeZoneUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTimezonesUsingGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCurrenciesUsingGETSignal(OAICurrenciesResponse summary);
    void getLanguagesUsingGETSignal(OAILanguagesResponse summary);
    void getLocalesUsingGETSignal(OAILocalesResponse summary);
    void getTimeZoneDateTimeUsingGETSignal(OAIDateTimeResponse summary);
    void getTimeZoneTimeUsingGETSignal(OAITimeResponse summary);
    void getTimeZoneUsingGETSignal(OAITimeZoneResponse summary);
    void getTimezonesUsingGETSignal(OAITimeZonesResponse summary);


    void getCurrenciesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICurrenciesResponse summary);
    void getLanguagesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAILanguagesResponse summary);
    void getLocalesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAILocalesResponse summary);
    void getTimeZoneDateTimeUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIDateTimeResponse summary);
    void getTimeZoneTimeUsingGETSignalFull(OAIHttpRequestWorker *worker, OAITimeResponse summary);
    void getTimeZoneUsingGETSignalFull(OAIHttpRequestWorker *worker, OAITimeZoneResponse summary);
    void getTimezonesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAITimeZonesResponse summary);

    Q_DECL_DEPRECATED_X("Use getCurrenciesUsingGETSignalError() instead")
    void getCurrenciesUsingGETSignalE(OAICurrenciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesUsingGETSignalError(OAICurrenciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesUsingGETSignalError() instead")
    void getLanguagesUsingGETSignalE(OAILanguagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesUsingGETSignalError(OAILanguagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalesUsingGETSignalError() instead")
    void getLocalesUsingGETSignalE(OAILocalesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalesUsingGETSignalError(OAILocalesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneDateTimeUsingGETSignalError() instead")
    void getTimeZoneDateTimeUsingGETSignalE(OAIDateTimeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneDateTimeUsingGETSignalError(OAIDateTimeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneTimeUsingGETSignalError() instead")
    void getTimeZoneTimeUsingGETSignalE(OAITimeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneTimeUsingGETSignalError(OAITimeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneUsingGETSignalError() instead")
    void getTimeZoneUsingGETSignalE(OAITimeZoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneUsingGETSignalError(OAITimeZoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimezonesUsingGETSignalError() instead")
    void getTimezonesUsingGETSignalE(OAITimeZonesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimezonesUsingGETSignalError(OAITimeZonesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCurrenciesUsingGETSignalErrorFull() instead")
    void getCurrenciesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesUsingGETSignalErrorFull() instead")
    void getLanguagesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalesUsingGETSignalErrorFull() instead")
    void getLocalesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneDateTimeUsingGETSignalErrorFull() instead")
    void getTimeZoneDateTimeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneDateTimeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneTimeUsingGETSignalErrorFull() instead")
    void getTimeZoneTimeUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneTimeUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneUsingGETSignalErrorFull() instead")
    void getTimeZoneUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimezonesUsingGETSignalErrorFull() instead")
    void getTimezonesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimezonesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
