/**
 * GeoDB Cities API
 * The GeoDB API focuses on getting global city and region data. Easily obtain country, region, and city data for use in your apps!  <ul>   <li>Filter cities by name prefix, country, location, time-zone, and even minimum population.</li>   <li>Sort cities by name, country code, elevation, and population - or any combination of these.</li>    <li>Get all country regions.</li> <li>Get all cities in a given region.</li>   <li>     Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including     HATEOAS-style links to facilitate paging results.   </li>    <li>Backed by cloud-based load-balanced infrastructure for resiliency and performance!</li>   <li>Data is periodically refreshed from GeoNames and WikiData.</li> </ul> <p>Notes: <ul>   <li>     Since the database is periodically updated, this may <strong>very rarely</strong> result in certain cities     being marked deleted (e.g., duplicates removed). By default, endpoints returning city data will exclude     cities marked deleted. However, in the unlikely event that this occurs while your app is paging through a set     of affected results - and you care about the paged results suddenly changing underneath - specify      <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).   </li> </ul> <hr/> <h3>Useful Resources</h3> <ul>   <li>     SDKs     <ul>       <li>         <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>,          <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>       </li>       <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>       <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>     </ul>     <li><a href='swagger.json'>Swagger Docs</a></li>     <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>   </li>       </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountryDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountryDetails::OAICountryDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountryDetails::OAICountryDetails() {
    this->initializeModel();
}

OAICountryDetails::~OAICountryDetails() {}

void OAICountryDetails::initializeModel() {

    m_calling_code_isSet = false;
    m_calling_code_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_codes_isSet = false;
    m_currency_codes_isValid = false;

    m_flag_image_uri_isSet = false;
    m_flag_image_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_regions_isSet = false;
    m_num_regions_isValid = false;

    m_wiki_data_id_isSet = false;
    m_wiki_data_id_isValid = false;
}

void OAICountryDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountryDetails::fromJsonObject(QJsonObject json) {

    m_calling_code_isValid = ::OpenAPI::fromJsonValue(m_calling_code, json[QString("callingCode")]);
    m_calling_code_isSet = !json[QString("callingCode")].isNull() && m_calling_code_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_currency_codes_isValid = ::OpenAPI::fromJsonValue(m_currency_codes, json[QString("currencyCodes")]);
    m_currency_codes_isSet = !json[QString("currencyCodes")].isNull() && m_currency_codes_isValid;

    m_flag_image_uri_isValid = ::OpenAPI::fromJsonValue(m_flag_image_uri, json[QString("flagImageUri")]);
    m_flag_image_uri_isSet = !json[QString("flagImageUri")].isNull() && m_flag_image_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_regions_isValid = ::OpenAPI::fromJsonValue(m_num_regions, json[QString("numRegions")]);
    m_num_regions_isSet = !json[QString("numRegions")].isNull() && m_num_regions_isValid;

    m_wiki_data_id_isValid = ::OpenAPI::fromJsonValue(m_wiki_data_id, json[QString("wikiDataId")]);
    m_wiki_data_id_isSet = !json[QString("wikiDataId")].isNull() && m_wiki_data_id_isValid;
}

QString OAICountryDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountryDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_calling_code_isSet) {
        obj.insert(QString("callingCode"), ::OpenAPI::toJsonValue(m_calling_code));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_codes.size() > 0) {
        obj.insert(QString("currencyCodes"), ::OpenAPI::toJsonValue(m_currency_codes));
    }
    if (m_flag_image_uri_isSet) {
        obj.insert(QString("flagImageUri"), ::OpenAPI::toJsonValue(m_flag_image_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_regions_isSet) {
        obj.insert(QString("numRegions"), ::OpenAPI::toJsonValue(m_num_regions));
    }
    if (m_wiki_data_id_isSet) {
        obj.insert(QString("wikiDataId"), ::OpenAPI::toJsonValue(m_wiki_data_id));
    }
    return obj;
}

QString OAICountryDetails::getCallingCode() const {
    return m_calling_code;
}
void OAICountryDetails::setCallingCode(const QString &calling_code) {
    m_calling_code = calling_code;
    m_calling_code_isSet = true;
}

bool OAICountryDetails::is_calling_code_Set() const{
    return m_calling_code_isSet;
}

bool OAICountryDetails::is_calling_code_Valid() const{
    return m_calling_code_isValid;
}

QString OAICountryDetails::getCode() const {
    return m_code;
}
void OAICountryDetails::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICountryDetails::is_code_Set() const{
    return m_code_isSet;
}

bool OAICountryDetails::is_code_Valid() const{
    return m_code_isValid;
}

QList<QString> OAICountryDetails::getCurrencyCodes() const {
    return m_currency_codes;
}
void OAICountryDetails::setCurrencyCodes(const QList<QString> &currency_codes) {
    m_currency_codes = currency_codes;
    m_currency_codes_isSet = true;
}

bool OAICountryDetails::is_currency_codes_Set() const{
    return m_currency_codes_isSet;
}

bool OAICountryDetails::is_currency_codes_Valid() const{
    return m_currency_codes_isValid;
}

QString OAICountryDetails::getFlagImageUri() const {
    return m_flag_image_uri;
}
void OAICountryDetails::setFlagImageUri(const QString &flag_image_uri) {
    m_flag_image_uri = flag_image_uri;
    m_flag_image_uri_isSet = true;
}

bool OAICountryDetails::is_flag_image_uri_Set() const{
    return m_flag_image_uri_isSet;
}

bool OAICountryDetails::is_flag_image_uri_Valid() const{
    return m_flag_image_uri_isValid;
}

QString OAICountryDetails::getName() const {
    return m_name;
}
void OAICountryDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountryDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountryDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICountryDetails::getNumRegions() const {
    return m_num_regions;
}
void OAICountryDetails::setNumRegions(const qint32 &num_regions) {
    m_num_regions = num_regions;
    m_num_regions_isSet = true;
}

bool OAICountryDetails::is_num_regions_Set() const{
    return m_num_regions_isSet;
}

bool OAICountryDetails::is_num_regions_Valid() const{
    return m_num_regions_isValid;
}

QString OAICountryDetails::getWikiDataId() const {
    return m_wiki_data_id;
}
void OAICountryDetails::setWikiDataId(const QString &wiki_data_id) {
    m_wiki_data_id = wiki_data_id;
    m_wiki_data_id_isSet = true;
}

bool OAICountryDetails::is_wiki_data_id_Set() const{
    return m_wiki_data_id_isSet;
}

bool OAICountryDetails::is_wiki_data_id_Valid() const{
    return m_wiki_data_id_isValid;
}

bool OAICountryDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calling_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_regions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountryDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
