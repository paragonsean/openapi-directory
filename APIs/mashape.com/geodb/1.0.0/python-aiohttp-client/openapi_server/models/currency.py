# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, country_codes: List[str]=None, symbol: str=None):
        """Currency - a model defined in OpenAPI

        :param code: The code of this Currency.
        :param country_codes: The country_codes of this Currency.
        :param symbol: The symbol of this Currency.
        """
        self.openapi_types = {
            'code': str,
            'country_codes': List[str],
            'symbol': str
        }

        self.attribute_map = {
            'code': 'code',
            'country_codes': 'countryCodes',
            'symbol': 'symbol'
        }

        self._code = code
        self._country_codes = country_codes
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Currency.

        The ISO-4217 currency code

        :return: The code of this Currency.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Currency.

        The ISO-4217 currency code

        :param code: The code of this Currency.
        :type code: str
        """

        self._code = code

    @property
    def country_codes(self):
        """Gets the country_codes of this Currency.

        A list of ISO-3166 country codes of countries supporting this currency

        :return: The country_codes of this Currency.
        :rtype: List[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this Currency.

        A list of ISO-3166 country codes of countries supporting this currency

        :param country_codes: The country_codes of this Currency.
        :type country_codes: List[str]
        """

        self._country_codes = country_codes

    @property
    def symbol(self):
        """Gets the symbol of this Currency.

        The currency symbol

        :return: The symbol of this Currency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.

        The currency symbol

        :param symbol: The symbol of this Currency.
        :type symbol: str
        """

        self._symbol = symbol
