# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountrySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, currency_codes: List[str]=None, name: str=None, wiki_data_id: str=None):
        """CountrySummary - a model defined in OpenAPI

        :param code: The code of this CountrySummary.
        :param currency_codes: The currency_codes of this CountrySummary.
        :param name: The name of this CountrySummary.
        :param wiki_data_id: The wiki_data_id of this CountrySummary.
        """
        self.openapi_types = {
            'code': str,
            'currency_codes': List[str],
            'name': str,
            'wiki_data_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'currency_codes': 'currencyCodes',
            'name': 'name',
            'wiki_data_id': 'wikiDataId'
        }

        self._code = code
        self._currency_codes = currency_codes
        self._name = name
        self._wiki_data_id = wiki_data_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountrySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountrySummary of this CountrySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CountrySummary.

        The ISO-3166 country code

        :return: The code of this CountrySummary.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CountrySummary.

        The ISO-3166 country code

        :param code: The code of this CountrySummary.
        :type code: str
        """

        self._code = code

    @property
    def currency_codes(self):
        """Gets the currency_codes of this CountrySummary.

        A list of supported ISO-4217 currency codes

        :return: The currency_codes of this CountrySummary.
        :rtype: List[str]
        """
        return self._currency_codes

    @currency_codes.setter
    def currency_codes(self, currency_codes):
        """Sets the currency_codes of this CountrySummary.

        A list of supported ISO-4217 currency codes

        :param currency_codes: The currency_codes of this CountrySummary.
        :type currency_codes: List[str]
        """

        self._currency_codes = currency_codes

    @property
    def name(self):
        """Gets the name of this CountrySummary.

        The country name (varies by languageCode)

        :return: The name of this CountrySummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountrySummary.

        The country name (varies by languageCode)

        :param name: The name of this CountrySummary.
        :type name: str
        """

        self._name = name

    @property
    def wiki_data_id(self):
        """Gets the wiki_data_id of this CountrySummary.

        The country WikiData id

        :return: The wiki_data_id of this CountrySummary.
        :rtype: str
        """
        return self._wiki_data_id

    @wiki_data_id.setter
    def wiki_data_id(self, wiki_data_id):
        """Sets the wiki_data_id of this CountrySummary.

        The country WikiData id

        :param wiki_data_id: The wiki_data_id of this CountrySummary.
        :type wiki_data_id: str
        """

        self._wiki_data_id = wiki_data_id
