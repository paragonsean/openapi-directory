# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.populated_place_type import PopulatedPlaceType
from openapi_server import util


class PopulatedPlaceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_code: str=None, distance: float=None, id: int=None, latitude: float=None, longitude: float=None, name: str=None, population: int=None, region: str=None, region_code: str=None, type: PopulatedPlaceType=None, wiki_data_id: str=None):
        """PopulatedPlaceSummary - a model defined in OpenAPI

        :param country: The country of this PopulatedPlaceSummary.
        :param country_code: The country_code of this PopulatedPlaceSummary.
        :param distance: The distance of this PopulatedPlaceSummary.
        :param id: The id of this PopulatedPlaceSummary.
        :param latitude: The latitude of this PopulatedPlaceSummary.
        :param longitude: The longitude of this PopulatedPlaceSummary.
        :param name: The name of this PopulatedPlaceSummary.
        :param population: The population of this PopulatedPlaceSummary.
        :param region: The region of this PopulatedPlaceSummary.
        :param region_code: The region_code of this PopulatedPlaceSummary.
        :param type: The type of this PopulatedPlaceSummary.
        :param wiki_data_id: The wiki_data_id of this PopulatedPlaceSummary.
        """
        self.openapi_types = {
            'country': str,
            'country_code': str,
            'distance': float,
            'id': int,
            'latitude': float,
            'longitude': float,
            'name': str,
            'population': int,
            'region': str,
            'region_code': str,
            'type': PopulatedPlaceType,
            'wiki_data_id': str
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'countryCode',
            'distance': 'distance',
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'population': 'population',
            'region': 'region',
            'region_code': 'regionCode',
            'type': 'type',
            'wiki_data_id': 'wikiDataId'
        }

        self._country = country
        self._country_code = country_code
        self._distance = distance
        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._population = population
        self._region = region
        self._region_code = region_code
        self._type = type
        self._wiki_data_id = wiki_data_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PopulatedPlaceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PopulatedPlaceSummary of this PopulatedPlaceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this PopulatedPlaceSummary.

        The country name (varies by languageCode)

        :return: The country of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PopulatedPlaceSummary.

        The country name (varies by languageCode)

        :param country: The country of this PopulatedPlaceSummary.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this PopulatedPlaceSummary.

        The ISO-3166 country code

        :return: The country_code of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PopulatedPlaceSummary.

        The ISO-3166 country code

        :param country_code: The country_code of this PopulatedPlaceSummary.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def distance(self):
        """Gets the distance of this PopulatedPlaceSummary.

        Included if this is the result of a distance query

        :return: The distance of this PopulatedPlaceSummary.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this PopulatedPlaceSummary.

        Included if this is the result of a distance query

        :param distance: The distance of this PopulatedPlaceSummary.
        :type distance: float
        """

        self._distance = distance

    @property
    def id(self):
        """Gets the id of this PopulatedPlaceSummary.

        The place GeoDB native id

        :return: The id of this PopulatedPlaceSummary.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PopulatedPlaceSummary.

        The place GeoDB native id

        :param id: The id of this PopulatedPlaceSummary.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this PopulatedPlaceSummary.

        The place latittude (-90.0 to 90.0)

        :return: The latitude of this PopulatedPlaceSummary.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PopulatedPlaceSummary.

        The place latittude (-90.0 to 90.0)

        :param latitude: The latitude of this PopulatedPlaceSummary.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PopulatedPlaceSummary.

        The place longitude (-180.0 to 180.0)

        :return: The longitude of this PopulatedPlaceSummary.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PopulatedPlaceSummary.

        The place longitude (-180.0 to 180.0)

        :param longitude: The longitude of this PopulatedPlaceSummary.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this PopulatedPlaceSummary.

        The place name (varies by languageCode)

        :return: The name of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PopulatedPlaceSummary.

        The place name (varies by languageCode)

        :param name: The name of this PopulatedPlaceSummary.
        :type name: str
        """

        self._name = name

    @property
    def population(self):
        """Gets the population of this PopulatedPlaceSummary.

        The place population

        :return: The population of this PopulatedPlaceSummary.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this PopulatedPlaceSummary.

        The place population

        :param population: The population of this PopulatedPlaceSummary.
        :type population: int
        """

        self._population = population

    @property
    def region(self):
        """Gets the region of this PopulatedPlaceSummary.

        The region name (varies by languageCode)

        :return: The region of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PopulatedPlaceSummary.

        The region name (varies by languageCode)

        :param region: The region of this PopulatedPlaceSummary.
        :type region: str
        """

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this PopulatedPlaceSummary.

        The ISO or FIPS region code

        :return: The region_code of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this PopulatedPlaceSummary.

        The ISO or FIPS region code

        :param region_code: The region_code of this PopulatedPlaceSummary.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def type(self):
        """Gets the type of this PopulatedPlaceSummary.


        :return: The type of this PopulatedPlaceSummary.
        :rtype: PopulatedPlaceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PopulatedPlaceSummary.


        :param type: The type of this PopulatedPlaceSummary.
        :type type: PopulatedPlaceType
        """

        self._type = type

    @property
    def wiki_data_id(self):
        """Gets the wiki_data_id of this PopulatedPlaceSummary.

        The place WikiData id

        :return: The wiki_data_id of this PopulatedPlaceSummary.
        :rtype: str
        """
        return self._wiki_data_id

    @wiki_data_id.setter
    def wiki_data_id(self, wiki_data_id):
        """Sets the wiki_data_id of this PopulatedPlaceSummary.

        The place WikiData id

        :param wiki_data_id: The wiki_data_id of this PopulatedPlaceSummary.
        :type wiki_data_id: str
        """

        self._wiki_data_id = wiki_data_id
