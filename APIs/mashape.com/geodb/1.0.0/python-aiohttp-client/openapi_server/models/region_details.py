# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capital: str=None, country_code: str=None, fips_code: str=None, iso_code: str=None, name: str=None, num_cities: int=None, wiki_data_id: str=None):
        """RegionDetails - a model defined in OpenAPI

        :param capital: The capital of this RegionDetails.
        :param country_code: The country_code of this RegionDetails.
        :param fips_code: The fips_code of this RegionDetails.
        :param iso_code: The iso_code of this RegionDetails.
        :param name: The name of this RegionDetails.
        :param num_cities: The num_cities of this RegionDetails.
        :param wiki_data_id: The wiki_data_id of this RegionDetails.
        """
        self.openapi_types = {
            'capital': str,
            'country_code': str,
            'fips_code': str,
            'iso_code': str,
            'name': str,
            'num_cities': int,
            'wiki_data_id': str
        }

        self.attribute_map = {
            'capital': 'capital',
            'country_code': 'countryCode',
            'fips_code': 'fipsCode',
            'iso_code': 'isoCode',
            'name': 'name',
            'num_cities': 'numCities',
            'wiki_data_id': 'wikiDataId'
        }

        self._capital = capital
        self._country_code = country_code
        self._fips_code = fips_code
        self._iso_code = iso_code
        self._name = name
        self._num_cities = num_cities
        self._wiki_data_id = wiki_data_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionDetails of this RegionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capital(self):
        """Gets the capital of this RegionDetails.

        The region's capital city (varies by languageCode)

        :return: The capital of this RegionDetails.
        :rtype: str
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this RegionDetails.

        The region's capital city (varies by languageCode)

        :param capital: The capital of this RegionDetails.
        :type capital: str
        """

        self._capital = capital

    @property
    def country_code(self):
        """Gets the country_code of this RegionDetails.

        An ISO-3166 country code

        :return: The country_code of this RegionDetails.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this RegionDetails.

        An ISO-3166 country code

        :param country_code: The country_code of this RegionDetails.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def fips_code(self):
        """Gets the fips_code of this RegionDetails.

        The FIPS 10-4 region code

        :return: The fips_code of this RegionDetails.
        :rtype: str
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """Sets the fips_code of this RegionDetails.

        The FIPS 10-4 region code

        :param fips_code: The fips_code of this RegionDetails.
        :type fips_code: str
        """

        self._fips_code = fips_code

    @property
    def iso_code(self):
        """Gets the iso_code of this RegionDetails.

        The ISO region code

        :return: The iso_code of this RegionDetails.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this RegionDetails.

        The ISO region code

        :param iso_code: The iso_code of this RegionDetails.
        :type iso_code: str
        """

        self._iso_code = iso_code

    @property
    def name(self):
        """Gets the name of this RegionDetails.

        The region name (varies by languageCode)

        :return: The name of this RegionDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegionDetails.

        The region name (varies by languageCode)

        :param name: The name of this RegionDetails.
        :type name: str
        """

        self._name = name

    @property
    def num_cities(self):
        """Gets the num_cities of this RegionDetails.

        The number of cities in this region

        :return: The num_cities of this RegionDetails.
        :rtype: int
        """
        return self._num_cities

    @num_cities.setter
    def num_cities(self, num_cities):
        """Sets the num_cities of this RegionDetails.

        The number of cities in this region

        :param num_cities: The num_cities of this RegionDetails.
        :type num_cities: int
        """

        self._num_cities = num_cities

    @property
    def wiki_data_id(self):
        """Gets the wiki_data_id of this RegionDetails.

        The region WikiData id

        :return: The wiki_data_id of this RegionDetails.
        :rtype: str
        """
        return self._wiki_data_id

    @wiki_data_id.setter
    def wiki_data_id(self, wiki_data_id):
        """Sets the wiki_data_id of this RegionDetails.

        The region WikiData id

        :param wiki_data_id: The wiki_data_id of this RegionDetails.
        :type wiki_data_id: str
        """

        self._wiki_data_id = wiki_data_id
