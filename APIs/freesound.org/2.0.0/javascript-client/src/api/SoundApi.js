/**
 * Freesound
 * With the Freesound APIv2 you can browse, search, and retrieve information about Freesound users, packs, and the sounds themselves of course. You can find similar sounds to a given target (based on content analysis) and retrieve automatically extracted features from audio files, as well as perform advanced queries combining content analysis features and other metadata (tags, etc...). With the Freesound APIv2, you can also upload, comment, rate and bookmark sounds!
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Sound from '../model/Sound';

/**
* Sound service.
* @module api/SoundApi
* @version 2.0.0
*/
export default class SoundApi {

    /**
    * Constructs a new SoundApi. 
    * @alias module:api/SoundApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSoundById operation.
     * @callback module:api/SoundApi~getSoundByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sound} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of a sound
     * This resource allows the retrieval of detailed information about a sound.
     * @param {Number} soundId ID of the sound that needs to be fetched
     * @param {module:api/SoundApi~getSoundByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sound}
     */
    getSoundById(soundId, callback) {
      let postBody = null;
      // verify the required parameter 'soundId' is set
      if (soundId === undefined || soundId === null) {
        throw new Error("Missing the required parameter 'soundId' when calling getSoundById");
      }

      let pathParams = {
        'soundId': soundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = Sound;
      return this.apiClient.callApi(
        '/sounds/{soundId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
