# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CombinedResultSearchInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, poster: str=None, title: str=None, type: str=None, year: str=None, imdb_id: str=None):
        """CombinedResultSearchInner - a model defined in OpenAPI

        :param poster: The poster of this CombinedResultSearchInner.
        :param title: The title of this CombinedResultSearchInner.
        :param type: The type of this CombinedResultSearchInner.
        :param year: The year of this CombinedResultSearchInner.
        :param imdb_id: The imdb_id of this CombinedResultSearchInner.
        """
        self.openapi_types = {
            'poster': str,
            'title': str,
            'type': str,
            'year': str,
            'imdb_id': str
        }

        self.attribute_map = {
            'poster': 'Poster',
            'title': 'Title',
            'type': 'Type',
            'year': 'Year',
            'imdb_id': 'imdbID'
        }

        self._poster = poster
        self._title = title
        self._type = type
        self._year = year
        self._imdb_id = imdb_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinedResultSearchInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combinedResult_Search_inner of this CombinedResultSearchInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def poster(self):
        """Gets the poster of this CombinedResultSearchInner.


        :return: The poster of this CombinedResultSearchInner.
        :rtype: str
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this CombinedResultSearchInner.


        :param poster: The poster of this CombinedResultSearchInner.
        :type poster: str
        """
        if poster is None:
            raise ValueError("Invalid value for `poster`, must not be `None`")

        self._poster = poster

    @property
    def title(self):
        """Gets the title of this CombinedResultSearchInner.


        :return: The title of this CombinedResultSearchInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CombinedResultSearchInner.


        :param title: The title of this CombinedResultSearchInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this CombinedResultSearchInner.


        :return: The type of this CombinedResultSearchInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CombinedResultSearchInner.


        :param type: The type of this CombinedResultSearchInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def year(self):
        """Gets the year of this CombinedResultSearchInner.


        :return: The year of this CombinedResultSearchInner.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CombinedResultSearchInner.


        :param year: The year of this CombinedResultSearchInner.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year

    @property
    def imdb_id(self):
        """Gets the imdb_id of this CombinedResultSearchInner.


        :return: The imdb_id of this CombinedResultSearchInner.
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this CombinedResultSearchInner.


        :param imdb_id: The imdb_id of this CombinedResultSearchInner.
        :type imdb_id: str
        """
        if imdb_id is None:
            raise ValueError("Invalid value for `imdb_id`, must not be `None`")

        self._imdb_id = imdb_id
