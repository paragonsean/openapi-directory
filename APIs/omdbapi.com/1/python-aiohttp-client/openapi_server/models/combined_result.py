# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.combined_result_search_inner import CombinedResultSearchInner
from openapi_server import util


class CombinedResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actors: str=None, awards: str=None, box_office: str=None, country: str=None, dvd: str=None, director: str=None, genre: str=None, language: str=None, metascore: str=None, plot: str=None, poster: str=None, production: str=None, rated: str=None, released: str=None, response: str=None, runtime: str=None, search: List[CombinedResultSearchInner]=None, title: str=None, type: str=None, website: str=None, writer: str=None, year: str=None, imdb_id: str=None, imdb_rating: str=None, imdb_votes: str=None, tomato_consensus: str=None, tomato_fresh: str=None, tomato_image: str=None, tomato_meter: str=None, tomato_rating: str=None, tomato_reviews: str=None, tomato_rotten: str=None, tomato_url: str=None, tomato_user_meter: str=None, tomato_user_rating: str=None, tomato_user_reviews: str=None, total_results: str=None, total_seasons: str=None):
        """CombinedResult - a model defined in OpenAPI

        :param actors: The actors of this CombinedResult.
        :param awards: The awards of this CombinedResult.
        :param box_office: The box_office of this CombinedResult.
        :param country: The country of this CombinedResult.
        :param dvd: The dvd of this CombinedResult.
        :param director: The director of this CombinedResult.
        :param genre: The genre of this CombinedResult.
        :param language: The language of this CombinedResult.
        :param metascore: The metascore of this CombinedResult.
        :param plot: The plot of this CombinedResult.
        :param poster: The poster of this CombinedResult.
        :param production: The production of this CombinedResult.
        :param rated: The rated of this CombinedResult.
        :param released: The released of this CombinedResult.
        :param response: The response of this CombinedResult.
        :param runtime: The runtime of this CombinedResult.
        :param search: The search of this CombinedResult.
        :param title: The title of this CombinedResult.
        :param type: The type of this CombinedResult.
        :param website: The website of this CombinedResult.
        :param writer: The writer of this CombinedResult.
        :param year: The year of this CombinedResult.
        :param imdb_id: The imdb_id of this CombinedResult.
        :param imdb_rating: The imdb_rating of this CombinedResult.
        :param imdb_votes: The imdb_votes of this CombinedResult.
        :param tomato_consensus: The tomato_consensus of this CombinedResult.
        :param tomato_fresh: The tomato_fresh of this CombinedResult.
        :param tomato_image: The tomato_image of this CombinedResult.
        :param tomato_meter: The tomato_meter of this CombinedResult.
        :param tomato_rating: The tomato_rating of this CombinedResult.
        :param tomato_reviews: The tomato_reviews of this CombinedResult.
        :param tomato_rotten: The tomato_rotten of this CombinedResult.
        :param tomato_url: The tomato_url of this CombinedResult.
        :param tomato_user_meter: The tomato_user_meter of this CombinedResult.
        :param tomato_user_rating: The tomato_user_rating of this CombinedResult.
        :param tomato_user_reviews: The tomato_user_reviews of this CombinedResult.
        :param total_results: The total_results of this CombinedResult.
        :param total_seasons: The total_seasons of this CombinedResult.
        """
        self.openapi_types = {
            'actors': str,
            'awards': str,
            'box_office': str,
            'country': str,
            'dvd': str,
            'director': str,
            'genre': str,
            'language': str,
            'metascore': str,
            'plot': str,
            'poster': str,
            'production': str,
            'rated': str,
            'released': str,
            'response': str,
            'runtime': str,
            'search': List[CombinedResultSearchInner],
            'title': str,
            'type': str,
            'website': str,
            'writer': str,
            'year': str,
            'imdb_id': str,
            'imdb_rating': str,
            'imdb_votes': str,
            'tomato_consensus': str,
            'tomato_fresh': str,
            'tomato_image': str,
            'tomato_meter': str,
            'tomato_rating': str,
            'tomato_reviews': str,
            'tomato_rotten': str,
            'tomato_url': str,
            'tomato_user_meter': str,
            'tomato_user_rating': str,
            'tomato_user_reviews': str,
            'total_results': str,
            'total_seasons': str
        }

        self.attribute_map = {
            'actors': 'Actors',
            'awards': 'Awards',
            'box_office': 'BoxOffice',
            'country': 'Country',
            'dvd': 'DVD',
            'director': 'Director',
            'genre': 'Genre',
            'language': 'Language',
            'metascore': 'Metascore',
            'plot': 'Plot',
            'poster': 'Poster',
            'production': 'Production',
            'rated': 'Rated',
            'released': 'Released',
            'response': 'Response',
            'runtime': 'Runtime',
            'search': 'Search',
            'title': 'Title',
            'type': 'Type',
            'website': 'Website',
            'writer': 'Writer',
            'year': 'Year',
            'imdb_id': 'imdbID',
            'imdb_rating': 'imdbRating',
            'imdb_votes': 'imdbVotes',
            'tomato_consensus': 'tomatoConsensus',
            'tomato_fresh': 'tomatoFresh',
            'tomato_image': 'tomatoImage',
            'tomato_meter': 'tomatoMeter',
            'tomato_rating': 'tomatoRating',
            'tomato_reviews': 'tomatoReviews',
            'tomato_rotten': 'tomatoRotten',
            'tomato_url': 'tomatoURL',
            'tomato_user_meter': 'tomatoUserMeter',
            'tomato_user_rating': 'tomatoUserRating',
            'tomato_user_reviews': 'tomatoUserReviews',
            'total_results': 'totalResults',
            'total_seasons': 'totalSeasons'
        }

        self._actors = actors
        self._awards = awards
        self._box_office = box_office
        self._country = country
        self._dvd = dvd
        self._director = director
        self._genre = genre
        self._language = language
        self._metascore = metascore
        self._plot = plot
        self._poster = poster
        self._production = production
        self._rated = rated
        self._released = released
        self._response = response
        self._runtime = runtime
        self._search = search
        self._title = title
        self._type = type
        self._website = website
        self._writer = writer
        self._year = year
        self._imdb_id = imdb_id
        self._imdb_rating = imdb_rating
        self._imdb_votes = imdb_votes
        self._tomato_consensus = tomato_consensus
        self._tomato_fresh = tomato_fresh
        self._tomato_image = tomato_image
        self._tomato_meter = tomato_meter
        self._tomato_rating = tomato_rating
        self._tomato_reviews = tomato_reviews
        self._tomato_rotten = tomato_rotten
        self._tomato_url = tomato_url
        self._tomato_user_meter = tomato_user_meter
        self._tomato_user_rating = tomato_user_rating
        self._tomato_user_reviews = tomato_user_reviews
        self._total_results = total_results
        self._total_seasons = total_seasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinedResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combinedResult of this CombinedResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actors(self):
        """Gets the actors of this CombinedResult.


        :return: The actors of this CombinedResult.
        :rtype: str
        """
        return self._actors

    @actors.setter
    def actors(self, actors):
        """Sets the actors of this CombinedResult.


        :param actors: The actors of this CombinedResult.
        :type actors: str
        """

        self._actors = actors

    @property
    def awards(self):
        """Gets the awards of this CombinedResult.


        :return: The awards of this CombinedResult.
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this CombinedResult.


        :param awards: The awards of this CombinedResult.
        :type awards: str
        """

        self._awards = awards

    @property
    def box_office(self):
        """Gets the box_office of this CombinedResult.


        :return: The box_office of this CombinedResult.
        :rtype: str
        """
        return self._box_office

    @box_office.setter
    def box_office(self, box_office):
        """Sets the box_office of this CombinedResult.


        :param box_office: The box_office of this CombinedResult.
        :type box_office: str
        """

        self._box_office = box_office

    @property
    def country(self):
        """Gets the country of this CombinedResult.


        :return: The country of this CombinedResult.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CombinedResult.


        :param country: The country of this CombinedResult.
        :type country: str
        """

        self._country = country

    @property
    def dvd(self):
        """Gets the dvd of this CombinedResult.


        :return: The dvd of this CombinedResult.
        :rtype: str
        """
        return self._dvd

    @dvd.setter
    def dvd(self, dvd):
        """Sets the dvd of this CombinedResult.


        :param dvd: The dvd of this CombinedResult.
        :type dvd: str
        """

        self._dvd = dvd

    @property
    def director(self):
        """Gets the director of this CombinedResult.


        :return: The director of this CombinedResult.
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this CombinedResult.


        :param director: The director of this CombinedResult.
        :type director: str
        """

        self._director = director

    @property
    def genre(self):
        """Gets the genre of this CombinedResult.


        :return: The genre of this CombinedResult.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this CombinedResult.


        :param genre: The genre of this CombinedResult.
        :type genre: str
        """

        self._genre = genre

    @property
    def language(self):
        """Gets the language of this CombinedResult.


        :return: The language of this CombinedResult.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CombinedResult.


        :param language: The language of this CombinedResult.
        :type language: str
        """

        self._language = language

    @property
    def metascore(self):
        """Gets the metascore of this CombinedResult.


        :return: The metascore of this CombinedResult.
        :rtype: str
        """
        return self._metascore

    @metascore.setter
    def metascore(self, metascore):
        """Sets the metascore of this CombinedResult.


        :param metascore: The metascore of this CombinedResult.
        :type metascore: str
        """

        self._metascore = metascore

    @property
    def plot(self):
        """Gets the plot of this CombinedResult.


        :return: The plot of this CombinedResult.
        :rtype: str
        """
        return self._plot

    @plot.setter
    def plot(self, plot):
        """Sets the plot of this CombinedResult.


        :param plot: The plot of this CombinedResult.
        :type plot: str
        """

        self._plot = plot

    @property
    def poster(self):
        """Gets the poster of this CombinedResult.


        :return: The poster of this CombinedResult.
        :rtype: str
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this CombinedResult.


        :param poster: The poster of this CombinedResult.
        :type poster: str
        """

        self._poster = poster

    @property
    def production(self):
        """Gets the production of this CombinedResult.


        :return: The production of this CombinedResult.
        :rtype: str
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this CombinedResult.


        :param production: The production of this CombinedResult.
        :type production: str
        """

        self._production = production

    @property
    def rated(self):
        """Gets the rated of this CombinedResult.


        :return: The rated of this CombinedResult.
        :rtype: str
        """
        return self._rated

    @rated.setter
    def rated(self, rated):
        """Sets the rated of this CombinedResult.


        :param rated: The rated of this CombinedResult.
        :type rated: str
        """

        self._rated = rated

    @property
    def released(self):
        """Gets the released of this CombinedResult.


        :return: The released of this CombinedResult.
        :rtype: str
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this CombinedResult.


        :param released: The released of this CombinedResult.
        :type released: str
        """

        self._released = released

    @property
    def response(self):
        """Gets the response of this CombinedResult.


        :return: The response of this CombinedResult.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this CombinedResult.


        :param response: The response of this CombinedResult.
        :type response: str
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def runtime(self):
        """Gets the runtime of this CombinedResult.


        :return: The runtime of this CombinedResult.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this CombinedResult.


        :param runtime: The runtime of this CombinedResult.
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def search(self):
        """Gets the search of this CombinedResult.


        :return: The search of this CombinedResult.
        :rtype: List[CombinedResultSearchInner]
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this CombinedResult.


        :param search: The search of this CombinedResult.
        :type search: List[CombinedResultSearchInner]
        """

        self._search = search

    @property
    def title(self):
        """Gets the title of this CombinedResult.


        :return: The title of this CombinedResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CombinedResult.


        :param title: The title of this CombinedResult.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this CombinedResult.


        :return: The type of this CombinedResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CombinedResult.


        :param type: The type of this CombinedResult.
        :type type: str
        """

        self._type = type

    @property
    def website(self):
        """Gets the website of this CombinedResult.


        :return: The website of this CombinedResult.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CombinedResult.


        :param website: The website of this CombinedResult.
        :type website: str
        """

        self._website = website

    @property
    def writer(self):
        """Gets the writer of this CombinedResult.


        :return: The writer of this CombinedResult.
        :rtype: str
        """
        return self._writer

    @writer.setter
    def writer(self, writer):
        """Sets the writer of this CombinedResult.


        :param writer: The writer of this CombinedResult.
        :type writer: str
        """

        self._writer = writer

    @property
    def year(self):
        """Gets the year of this CombinedResult.


        :return: The year of this CombinedResult.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CombinedResult.


        :param year: The year of this CombinedResult.
        :type year: str
        """

        self._year = year

    @property
    def imdb_id(self):
        """Gets the imdb_id of this CombinedResult.


        :return: The imdb_id of this CombinedResult.
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this CombinedResult.


        :param imdb_id: The imdb_id of this CombinedResult.
        :type imdb_id: str
        """

        self._imdb_id = imdb_id

    @property
    def imdb_rating(self):
        """Gets the imdb_rating of this CombinedResult.


        :return: The imdb_rating of this CombinedResult.
        :rtype: str
        """
        return self._imdb_rating

    @imdb_rating.setter
    def imdb_rating(self, imdb_rating):
        """Sets the imdb_rating of this CombinedResult.


        :param imdb_rating: The imdb_rating of this CombinedResult.
        :type imdb_rating: str
        """

        self._imdb_rating = imdb_rating

    @property
    def imdb_votes(self):
        """Gets the imdb_votes of this CombinedResult.


        :return: The imdb_votes of this CombinedResult.
        :rtype: str
        """
        return self._imdb_votes

    @imdb_votes.setter
    def imdb_votes(self, imdb_votes):
        """Sets the imdb_votes of this CombinedResult.


        :param imdb_votes: The imdb_votes of this CombinedResult.
        :type imdb_votes: str
        """

        self._imdb_votes = imdb_votes

    @property
    def tomato_consensus(self):
        """Gets the tomato_consensus of this CombinedResult.


        :return: The tomato_consensus of this CombinedResult.
        :rtype: str
        """
        return self._tomato_consensus

    @tomato_consensus.setter
    def tomato_consensus(self, tomato_consensus):
        """Sets the tomato_consensus of this CombinedResult.


        :param tomato_consensus: The tomato_consensus of this CombinedResult.
        :type tomato_consensus: str
        """

        self._tomato_consensus = tomato_consensus

    @property
    def tomato_fresh(self):
        """Gets the tomato_fresh of this CombinedResult.


        :return: The tomato_fresh of this CombinedResult.
        :rtype: str
        """
        return self._tomato_fresh

    @tomato_fresh.setter
    def tomato_fresh(self, tomato_fresh):
        """Sets the tomato_fresh of this CombinedResult.


        :param tomato_fresh: The tomato_fresh of this CombinedResult.
        :type tomato_fresh: str
        """

        self._tomato_fresh = tomato_fresh

    @property
    def tomato_image(self):
        """Gets the tomato_image of this CombinedResult.


        :return: The tomato_image of this CombinedResult.
        :rtype: str
        """
        return self._tomato_image

    @tomato_image.setter
    def tomato_image(self, tomato_image):
        """Sets the tomato_image of this CombinedResult.


        :param tomato_image: The tomato_image of this CombinedResult.
        :type tomato_image: str
        """

        self._tomato_image = tomato_image

    @property
    def tomato_meter(self):
        """Gets the tomato_meter of this CombinedResult.


        :return: The tomato_meter of this CombinedResult.
        :rtype: str
        """
        return self._tomato_meter

    @tomato_meter.setter
    def tomato_meter(self, tomato_meter):
        """Sets the tomato_meter of this CombinedResult.


        :param tomato_meter: The tomato_meter of this CombinedResult.
        :type tomato_meter: str
        """

        self._tomato_meter = tomato_meter

    @property
    def tomato_rating(self):
        """Gets the tomato_rating of this CombinedResult.


        :return: The tomato_rating of this CombinedResult.
        :rtype: str
        """
        return self._tomato_rating

    @tomato_rating.setter
    def tomato_rating(self, tomato_rating):
        """Sets the tomato_rating of this CombinedResult.


        :param tomato_rating: The tomato_rating of this CombinedResult.
        :type tomato_rating: str
        """

        self._tomato_rating = tomato_rating

    @property
    def tomato_reviews(self):
        """Gets the tomato_reviews of this CombinedResult.


        :return: The tomato_reviews of this CombinedResult.
        :rtype: str
        """
        return self._tomato_reviews

    @tomato_reviews.setter
    def tomato_reviews(self, tomato_reviews):
        """Sets the tomato_reviews of this CombinedResult.


        :param tomato_reviews: The tomato_reviews of this CombinedResult.
        :type tomato_reviews: str
        """

        self._tomato_reviews = tomato_reviews

    @property
    def tomato_rotten(self):
        """Gets the tomato_rotten of this CombinedResult.


        :return: The tomato_rotten of this CombinedResult.
        :rtype: str
        """
        return self._tomato_rotten

    @tomato_rotten.setter
    def tomato_rotten(self, tomato_rotten):
        """Sets the tomato_rotten of this CombinedResult.


        :param tomato_rotten: The tomato_rotten of this CombinedResult.
        :type tomato_rotten: str
        """

        self._tomato_rotten = tomato_rotten

    @property
    def tomato_url(self):
        """Gets the tomato_url of this CombinedResult.


        :return: The tomato_url of this CombinedResult.
        :rtype: str
        """
        return self._tomato_url

    @tomato_url.setter
    def tomato_url(self, tomato_url):
        """Sets the tomato_url of this CombinedResult.


        :param tomato_url: The tomato_url of this CombinedResult.
        :type tomato_url: str
        """

        self._tomato_url = tomato_url

    @property
    def tomato_user_meter(self):
        """Gets the tomato_user_meter of this CombinedResult.


        :return: The tomato_user_meter of this CombinedResult.
        :rtype: str
        """
        return self._tomato_user_meter

    @tomato_user_meter.setter
    def tomato_user_meter(self, tomato_user_meter):
        """Sets the tomato_user_meter of this CombinedResult.


        :param tomato_user_meter: The tomato_user_meter of this CombinedResult.
        :type tomato_user_meter: str
        """

        self._tomato_user_meter = tomato_user_meter

    @property
    def tomato_user_rating(self):
        """Gets the tomato_user_rating of this CombinedResult.


        :return: The tomato_user_rating of this CombinedResult.
        :rtype: str
        """
        return self._tomato_user_rating

    @tomato_user_rating.setter
    def tomato_user_rating(self, tomato_user_rating):
        """Sets the tomato_user_rating of this CombinedResult.


        :param tomato_user_rating: The tomato_user_rating of this CombinedResult.
        :type tomato_user_rating: str
        """

        self._tomato_user_rating = tomato_user_rating

    @property
    def tomato_user_reviews(self):
        """Gets the tomato_user_reviews of this CombinedResult.


        :return: The tomato_user_reviews of this CombinedResult.
        :rtype: str
        """
        return self._tomato_user_reviews

    @tomato_user_reviews.setter
    def tomato_user_reviews(self, tomato_user_reviews):
        """Sets the tomato_user_reviews of this CombinedResult.


        :param tomato_user_reviews: The tomato_user_reviews of this CombinedResult.
        :type tomato_user_reviews: str
        """

        self._tomato_user_reviews = tomato_user_reviews

    @property
    def total_results(self):
        """Gets the total_results of this CombinedResult.


        :return: The total_results of this CombinedResult.
        :rtype: str
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this CombinedResult.


        :param total_results: The total_results of this CombinedResult.
        :type total_results: str
        """

        self._total_results = total_results

    @property
    def total_seasons(self):
        """Gets the total_seasons of this CombinedResult.


        :return: The total_seasons of this CombinedResult.
        :rtype: str
        """
        return self._total_seasons

    @total_seasons.setter
    def total_seasons(self, total_seasons):
        """Sets the total_seasons of this CombinedResult.


        :param total_seasons: The total_seasons of this CombinedResult.
        :type total_seasons: str
        """

        self._total_seasons = total_seasons
