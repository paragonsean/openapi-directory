/**
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CombinedResultSearchInner model module.
 * @module model/CombinedResultSearchInner
 * @version 1
 */
class CombinedResultSearchInner {
    /**
     * Constructs a new <code>CombinedResultSearchInner</code>.
     * @alias module:model/CombinedResultSearchInner
     * @param poster {String} 
     * @param title {String} 
     * @param type {String} 
     * @param year {String} 
     * @param imdbID {String} 
     */
    constructor(poster, title, type, year, imdbID) { 
        
        CombinedResultSearchInner.initialize(this, poster, title, type, year, imdbID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, poster, title, type, year, imdbID) { 
        obj['Poster'] = poster;
        obj['Title'] = title;
        obj['Type'] = type;
        obj['Year'] = year;
        obj['imdbID'] = imdbID;
    }

    /**
     * Constructs a <code>CombinedResultSearchInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CombinedResultSearchInner} obj Optional instance to populate.
     * @return {module:model/CombinedResultSearchInner} The populated <code>CombinedResultSearchInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CombinedResultSearchInner();

            if (data.hasOwnProperty('Poster')) {
                obj['Poster'] = ApiClient.convertToType(data['Poster'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'String');
            }
            if (data.hasOwnProperty('imdbID')) {
                obj['imdbID'] = ApiClient.convertToType(data['imdbID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CombinedResultSearchInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CombinedResultSearchInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CombinedResultSearchInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Poster'] && !(typeof data['Poster'] === 'string' || data['Poster'] instanceof String)) {
            throw new Error("Expected the field `Poster` to be a primitive type in the JSON string but got " + data['Poster']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Year'] && !(typeof data['Year'] === 'string' || data['Year'] instanceof String)) {
            throw new Error("Expected the field `Year` to be a primitive type in the JSON string but got " + data['Year']);
        }
        // ensure the json data is a string
        if (data['imdbID'] && !(typeof data['imdbID'] === 'string' || data['imdbID'] instanceof String)) {
            throw new Error("Expected the field `imdbID` to be a primitive type in the JSON string but got " + data['imdbID']);
        }

        return true;
    }


}

CombinedResultSearchInner.RequiredProperties = ["Poster", "Title", "Type", "Year", "imdbID"];

/**
 * @member {String} Poster
 */
CombinedResultSearchInner.prototype['Poster'] = undefined;

/**
 * @member {String} Title
 */
CombinedResultSearchInner.prototype['Title'] = undefined;

/**
 * @member {String} Type
 */
CombinedResultSearchInner.prototype['Type'] = undefined;

/**
 * @member {String} Year
 */
CombinedResultSearchInner.prototype['Year'] = undefined;

/**
 * @member {String} imdbID
 */
CombinedResultSearchInner.prototype['imdbID'] = undefined;






export default CombinedResultSearchInner;

