/**
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CombinedResultSearchInner from './CombinedResultSearchInner';

/**
 * The CombinedResult model module.
 * @module model/CombinedResult
 * @version 1
 */
class CombinedResult {
    /**
     * Constructs a new <code>CombinedResult</code>.
     * @alias module:model/CombinedResult
     * @param response {String} 
     */
    constructor(response) { 
        
        CombinedResult.initialize(this, response);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, response) { 
        obj['Response'] = response;
    }

    /**
     * Constructs a <code>CombinedResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CombinedResult} obj Optional instance to populate.
     * @return {module:model/CombinedResult} The populated <code>CombinedResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CombinedResult();

            if (data.hasOwnProperty('Actors')) {
                obj['Actors'] = ApiClient.convertToType(data['Actors'], 'String');
            }
            if (data.hasOwnProperty('Awards')) {
                obj['Awards'] = ApiClient.convertToType(data['Awards'], 'String');
            }
            if (data.hasOwnProperty('BoxOffice')) {
                obj['BoxOffice'] = ApiClient.convertToType(data['BoxOffice'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('DVD')) {
                obj['DVD'] = ApiClient.convertToType(data['DVD'], 'String');
            }
            if (data.hasOwnProperty('Director')) {
                obj['Director'] = ApiClient.convertToType(data['Director'], 'String');
            }
            if (data.hasOwnProperty('Genre')) {
                obj['Genre'] = ApiClient.convertToType(data['Genre'], 'String');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('Metascore')) {
                obj['Metascore'] = ApiClient.convertToType(data['Metascore'], 'String');
            }
            if (data.hasOwnProperty('Plot')) {
                obj['Plot'] = ApiClient.convertToType(data['Plot'], 'String');
            }
            if (data.hasOwnProperty('Poster')) {
                obj['Poster'] = ApiClient.convertToType(data['Poster'], 'String');
            }
            if (data.hasOwnProperty('Production')) {
                obj['Production'] = ApiClient.convertToType(data['Production'], 'String');
            }
            if (data.hasOwnProperty('Rated')) {
                obj['Rated'] = ApiClient.convertToType(data['Rated'], 'String');
            }
            if (data.hasOwnProperty('Released')) {
                obj['Released'] = ApiClient.convertToType(data['Released'], 'String');
            }
            if (data.hasOwnProperty('Response')) {
                obj['Response'] = ApiClient.convertToType(data['Response'], 'String');
            }
            if (data.hasOwnProperty('Runtime')) {
                obj['Runtime'] = ApiClient.convertToType(data['Runtime'], 'String');
            }
            if (data.hasOwnProperty('Search')) {
                obj['Search'] = ApiClient.convertToType(data['Search'], [CombinedResultSearchInner]);
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Website')) {
                obj['Website'] = ApiClient.convertToType(data['Website'], 'String');
            }
            if (data.hasOwnProperty('Writer')) {
                obj['Writer'] = ApiClient.convertToType(data['Writer'], 'String');
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'String');
            }
            if (data.hasOwnProperty('imdbID')) {
                obj['imdbID'] = ApiClient.convertToType(data['imdbID'], 'String');
            }
            if (data.hasOwnProperty('imdbRating')) {
                obj['imdbRating'] = ApiClient.convertToType(data['imdbRating'], 'String');
            }
            if (data.hasOwnProperty('imdbVotes')) {
                obj['imdbVotes'] = ApiClient.convertToType(data['imdbVotes'], 'String');
            }
            if (data.hasOwnProperty('tomatoConsensus')) {
                obj['tomatoConsensus'] = ApiClient.convertToType(data['tomatoConsensus'], 'String');
            }
            if (data.hasOwnProperty('tomatoFresh')) {
                obj['tomatoFresh'] = ApiClient.convertToType(data['tomatoFresh'], 'String');
            }
            if (data.hasOwnProperty('tomatoImage')) {
                obj['tomatoImage'] = ApiClient.convertToType(data['tomatoImage'], 'String');
            }
            if (data.hasOwnProperty('tomatoMeter')) {
                obj['tomatoMeter'] = ApiClient.convertToType(data['tomatoMeter'], 'String');
            }
            if (data.hasOwnProperty('tomatoRating')) {
                obj['tomatoRating'] = ApiClient.convertToType(data['tomatoRating'], 'String');
            }
            if (data.hasOwnProperty('tomatoReviews')) {
                obj['tomatoReviews'] = ApiClient.convertToType(data['tomatoReviews'], 'String');
            }
            if (data.hasOwnProperty('tomatoRotten')) {
                obj['tomatoRotten'] = ApiClient.convertToType(data['tomatoRotten'], 'String');
            }
            if (data.hasOwnProperty('tomatoURL')) {
                obj['tomatoURL'] = ApiClient.convertToType(data['tomatoURL'], 'String');
            }
            if (data.hasOwnProperty('tomatoUserMeter')) {
                obj['tomatoUserMeter'] = ApiClient.convertToType(data['tomatoUserMeter'], 'String');
            }
            if (data.hasOwnProperty('tomatoUserRating')) {
                obj['tomatoUserRating'] = ApiClient.convertToType(data['tomatoUserRating'], 'String');
            }
            if (data.hasOwnProperty('tomatoUserReviews')) {
                obj['tomatoUserReviews'] = ApiClient.convertToType(data['tomatoUserReviews'], 'String');
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'String');
            }
            if (data.hasOwnProperty('totalSeasons')) {
                obj['totalSeasons'] = ApiClient.convertToType(data['totalSeasons'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CombinedResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CombinedResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CombinedResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Actors'] && !(typeof data['Actors'] === 'string' || data['Actors'] instanceof String)) {
            throw new Error("Expected the field `Actors` to be a primitive type in the JSON string but got " + data['Actors']);
        }
        // ensure the json data is a string
        if (data['Awards'] && !(typeof data['Awards'] === 'string' || data['Awards'] instanceof String)) {
            throw new Error("Expected the field `Awards` to be a primitive type in the JSON string but got " + data['Awards']);
        }
        // ensure the json data is a string
        if (data['BoxOffice'] && !(typeof data['BoxOffice'] === 'string' || data['BoxOffice'] instanceof String)) {
            throw new Error("Expected the field `BoxOffice` to be a primitive type in the JSON string but got " + data['BoxOffice']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['DVD'] && !(typeof data['DVD'] === 'string' || data['DVD'] instanceof String)) {
            throw new Error("Expected the field `DVD` to be a primitive type in the JSON string but got " + data['DVD']);
        }
        // ensure the json data is a string
        if (data['Director'] && !(typeof data['Director'] === 'string' || data['Director'] instanceof String)) {
            throw new Error("Expected the field `Director` to be a primitive type in the JSON string but got " + data['Director']);
        }
        // ensure the json data is a string
        if (data['Genre'] && !(typeof data['Genre'] === 'string' || data['Genre'] instanceof String)) {
            throw new Error("Expected the field `Genre` to be a primitive type in the JSON string but got " + data['Genre']);
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }
        // ensure the json data is a string
        if (data['Metascore'] && !(typeof data['Metascore'] === 'string' || data['Metascore'] instanceof String)) {
            throw new Error("Expected the field `Metascore` to be a primitive type in the JSON string but got " + data['Metascore']);
        }
        // ensure the json data is a string
        if (data['Plot'] && !(typeof data['Plot'] === 'string' || data['Plot'] instanceof String)) {
            throw new Error("Expected the field `Plot` to be a primitive type in the JSON string but got " + data['Plot']);
        }
        // ensure the json data is a string
        if (data['Poster'] && !(typeof data['Poster'] === 'string' || data['Poster'] instanceof String)) {
            throw new Error("Expected the field `Poster` to be a primitive type in the JSON string but got " + data['Poster']);
        }
        // ensure the json data is a string
        if (data['Production'] && !(typeof data['Production'] === 'string' || data['Production'] instanceof String)) {
            throw new Error("Expected the field `Production` to be a primitive type in the JSON string but got " + data['Production']);
        }
        // ensure the json data is a string
        if (data['Rated'] && !(typeof data['Rated'] === 'string' || data['Rated'] instanceof String)) {
            throw new Error("Expected the field `Rated` to be a primitive type in the JSON string but got " + data['Rated']);
        }
        // ensure the json data is a string
        if (data['Released'] && !(typeof data['Released'] === 'string' || data['Released'] instanceof String)) {
            throw new Error("Expected the field `Released` to be a primitive type in the JSON string but got " + data['Released']);
        }
        // ensure the json data is a string
        if (data['Response'] && !(typeof data['Response'] === 'string' || data['Response'] instanceof String)) {
            throw new Error("Expected the field `Response` to be a primitive type in the JSON string but got " + data['Response']);
        }
        // ensure the json data is a string
        if (data['Runtime'] && !(typeof data['Runtime'] === 'string' || data['Runtime'] instanceof String)) {
            throw new Error("Expected the field `Runtime` to be a primitive type in the JSON string but got " + data['Runtime']);
        }
        if (data['Search']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Search'])) {
                throw new Error("Expected the field `Search` to be an array in the JSON data but got " + data['Search']);
            }
            // validate the optional field `Search` (array)
            for (const item of data['Search']) {
                CombinedResultSearchInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Website'] && !(typeof data['Website'] === 'string' || data['Website'] instanceof String)) {
            throw new Error("Expected the field `Website` to be a primitive type in the JSON string but got " + data['Website']);
        }
        // ensure the json data is a string
        if (data['Writer'] && !(typeof data['Writer'] === 'string' || data['Writer'] instanceof String)) {
            throw new Error("Expected the field `Writer` to be a primitive type in the JSON string but got " + data['Writer']);
        }
        // ensure the json data is a string
        if (data['Year'] && !(typeof data['Year'] === 'string' || data['Year'] instanceof String)) {
            throw new Error("Expected the field `Year` to be a primitive type in the JSON string but got " + data['Year']);
        }
        // ensure the json data is a string
        if (data['imdbID'] && !(typeof data['imdbID'] === 'string' || data['imdbID'] instanceof String)) {
            throw new Error("Expected the field `imdbID` to be a primitive type in the JSON string but got " + data['imdbID']);
        }
        // ensure the json data is a string
        if (data['imdbRating'] && !(typeof data['imdbRating'] === 'string' || data['imdbRating'] instanceof String)) {
            throw new Error("Expected the field `imdbRating` to be a primitive type in the JSON string but got " + data['imdbRating']);
        }
        // ensure the json data is a string
        if (data['imdbVotes'] && !(typeof data['imdbVotes'] === 'string' || data['imdbVotes'] instanceof String)) {
            throw new Error("Expected the field `imdbVotes` to be a primitive type in the JSON string but got " + data['imdbVotes']);
        }
        // ensure the json data is a string
        if (data['tomatoConsensus'] && !(typeof data['tomatoConsensus'] === 'string' || data['tomatoConsensus'] instanceof String)) {
            throw new Error("Expected the field `tomatoConsensus` to be a primitive type in the JSON string but got " + data['tomatoConsensus']);
        }
        // ensure the json data is a string
        if (data['tomatoFresh'] && !(typeof data['tomatoFresh'] === 'string' || data['tomatoFresh'] instanceof String)) {
            throw new Error("Expected the field `tomatoFresh` to be a primitive type in the JSON string but got " + data['tomatoFresh']);
        }
        // ensure the json data is a string
        if (data['tomatoImage'] && !(typeof data['tomatoImage'] === 'string' || data['tomatoImage'] instanceof String)) {
            throw new Error("Expected the field `tomatoImage` to be a primitive type in the JSON string but got " + data['tomatoImage']);
        }
        // ensure the json data is a string
        if (data['tomatoMeter'] && !(typeof data['tomatoMeter'] === 'string' || data['tomatoMeter'] instanceof String)) {
            throw new Error("Expected the field `tomatoMeter` to be a primitive type in the JSON string but got " + data['tomatoMeter']);
        }
        // ensure the json data is a string
        if (data['tomatoRating'] && !(typeof data['tomatoRating'] === 'string' || data['tomatoRating'] instanceof String)) {
            throw new Error("Expected the field `tomatoRating` to be a primitive type in the JSON string but got " + data['tomatoRating']);
        }
        // ensure the json data is a string
        if (data['tomatoReviews'] && !(typeof data['tomatoReviews'] === 'string' || data['tomatoReviews'] instanceof String)) {
            throw new Error("Expected the field `tomatoReviews` to be a primitive type in the JSON string but got " + data['tomatoReviews']);
        }
        // ensure the json data is a string
        if (data['tomatoRotten'] && !(typeof data['tomatoRotten'] === 'string' || data['tomatoRotten'] instanceof String)) {
            throw new Error("Expected the field `tomatoRotten` to be a primitive type in the JSON string but got " + data['tomatoRotten']);
        }
        // ensure the json data is a string
        if (data['tomatoURL'] && !(typeof data['tomatoURL'] === 'string' || data['tomatoURL'] instanceof String)) {
            throw new Error("Expected the field `tomatoURL` to be a primitive type in the JSON string but got " + data['tomatoURL']);
        }
        // ensure the json data is a string
        if (data['tomatoUserMeter'] && !(typeof data['tomatoUserMeter'] === 'string' || data['tomatoUserMeter'] instanceof String)) {
            throw new Error("Expected the field `tomatoUserMeter` to be a primitive type in the JSON string but got " + data['tomatoUserMeter']);
        }
        // ensure the json data is a string
        if (data['tomatoUserRating'] && !(typeof data['tomatoUserRating'] === 'string' || data['tomatoUserRating'] instanceof String)) {
            throw new Error("Expected the field `tomatoUserRating` to be a primitive type in the JSON string but got " + data['tomatoUserRating']);
        }
        // ensure the json data is a string
        if (data['tomatoUserReviews'] && !(typeof data['tomatoUserReviews'] === 'string' || data['tomatoUserReviews'] instanceof String)) {
            throw new Error("Expected the field `tomatoUserReviews` to be a primitive type in the JSON string but got " + data['tomatoUserReviews']);
        }
        // ensure the json data is a string
        if (data['totalResults'] && !(typeof data['totalResults'] === 'string' || data['totalResults'] instanceof String)) {
            throw new Error("Expected the field `totalResults` to be a primitive type in the JSON string but got " + data['totalResults']);
        }
        // ensure the json data is a string
        if (data['totalSeasons'] && !(typeof data['totalSeasons'] === 'string' || data['totalSeasons'] instanceof String)) {
            throw new Error("Expected the field `totalSeasons` to be a primitive type in the JSON string but got " + data['totalSeasons']);
        }

        return true;
    }


}

CombinedResult.RequiredProperties = ["Response"];

/**
 * @member {String} Actors
 */
CombinedResult.prototype['Actors'] = undefined;

/**
 * @member {String} Awards
 */
CombinedResult.prototype['Awards'] = undefined;

/**
 * @member {String} BoxOffice
 */
CombinedResult.prototype['BoxOffice'] = undefined;

/**
 * @member {String} Country
 */
CombinedResult.prototype['Country'] = undefined;

/**
 * @member {String} DVD
 */
CombinedResult.prototype['DVD'] = undefined;

/**
 * @member {String} Director
 */
CombinedResult.prototype['Director'] = undefined;

/**
 * @member {String} Genre
 */
CombinedResult.prototype['Genre'] = undefined;

/**
 * @member {String} Language
 */
CombinedResult.prototype['Language'] = undefined;

/**
 * @member {String} Metascore
 */
CombinedResult.prototype['Metascore'] = undefined;

/**
 * @member {String} Plot
 */
CombinedResult.prototype['Plot'] = undefined;

/**
 * @member {String} Poster
 */
CombinedResult.prototype['Poster'] = undefined;

/**
 * @member {String} Production
 */
CombinedResult.prototype['Production'] = undefined;

/**
 * @member {String} Rated
 */
CombinedResult.prototype['Rated'] = undefined;

/**
 * @member {String} Released
 */
CombinedResult.prototype['Released'] = undefined;

/**
 * @member {String} Response
 */
CombinedResult.prototype['Response'] = undefined;

/**
 * @member {String} Runtime
 */
CombinedResult.prototype['Runtime'] = undefined;

/**
 * @member {Array.<module:model/CombinedResultSearchInner>} Search
 */
CombinedResult.prototype['Search'] = undefined;

/**
 * @member {String} Title
 */
CombinedResult.prototype['Title'] = undefined;

/**
 * @member {String} Type
 */
CombinedResult.prototype['Type'] = undefined;

/**
 * @member {String} Website
 */
CombinedResult.prototype['Website'] = undefined;

/**
 * @member {String} Writer
 */
CombinedResult.prototype['Writer'] = undefined;

/**
 * @member {String} Year
 */
CombinedResult.prototype['Year'] = undefined;

/**
 * @member {String} imdbID
 */
CombinedResult.prototype['imdbID'] = undefined;

/**
 * @member {String} imdbRating
 */
CombinedResult.prototype['imdbRating'] = undefined;

/**
 * @member {String} imdbVotes
 */
CombinedResult.prototype['imdbVotes'] = undefined;

/**
 * @member {String} tomatoConsensus
 */
CombinedResult.prototype['tomatoConsensus'] = undefined;

/**
 * @member {String} tomatoFresh
 */
CombinedResult.prototype['tomatoFresh'] = undefined;

/**
 * @member {String} tomatoImage
 */
CombinedResult.prototype['tomatoImage'] = undefined;

/**
 * @member {String} tomatoMeter
 */
CombinedResult.prototype['tomatoMeter'] = undefined;

/**
 * @member {String} tomatoRating
 */
CombinedResult.prototype['tomatoRating'] = undefined;

/**
 * @member {String} tomatoReviews
 */
CombinedResult.prototype['tomatoReviews'] = undefined;

/**
 * @member {String} tomatoRotten
 */
CombinedResult.prototype['tomatoRotten'] = undefined;

/**
 * @member {String} tomatoURL
 */
CombinedResult.prototype['tomatoURL'] = undefined;

/**
 * @member {String} tomatoUserMeter
 */
CombinedResult.prototype['tomatoUserMeter'] = undefined;

/**
 * @member {String} tomatoUserRating
 */
CombinedResult.prototype['tomatoUserRating'] = undefined;

/**
 * @member {String} tomatoUserReviews
 */
CombinedResult.prototype['tomatoUserReviews'] = undefined;

/**
 * @member {String} totalResults
 */
CombinedResult.prototype['totalResults'] = undefined;

/**
 * @member {String} totalSeasons
 */
CombinedResult.prototype['totalSeasons'] = undefined;






export default CombinedResult;

