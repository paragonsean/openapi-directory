/*
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CombinedResultSearchInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:56.334294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CombinedResultSearchInner {
  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private String poster;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_YEAR = "Year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public CombinedResultSearchInner() {
  }

  public CombinedResultSearchInner poster(String poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nonnull
  public String getPoster() {
    return poster;
  }

  public void setPoster(String poster) {
    this.poster = poster;
  }


  public CombinedResultSearchInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CombinedResultSearchInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CombinedResultSearchInner year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nonnull
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }


  public CombinedResultSearchInner imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nonnull
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedResultSearchInner combinedResultSearchInner = (CombinedResultSearchInner) o;
    return Objects.equals(this.poster, combinedResultSearchInner.poster) &&
        Objects.equals(this.title, combinedResultSearchInner.title) &&
        Objects.equals(this.type, combinedResultSearchInner.type) &&
        Objects.equals(this.year, combinedResultSearchInner.year) &&
        Objects.equals(this.imdbID, combinedResultSearchInner.imdbID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poster, title, type, year, imdbID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinedResultSearchInner {\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Poster");
    openapiFields.add("Title");
    openapiFields.add("Type");
    openapiFields.add("Year");
    openapiFields.add("imdbID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Poster");
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Year");
    openapiRequiredFields.add("imdbID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CombinedResultSearchInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CombinedResultSearchInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CombinedResultSearchInner is not found in the empty JSON string", CombinedResultSearchInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CombinedResultSearchInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CombinedResultSearchInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CombinedResultSearchInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Poster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Poster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Poster").toString()));
      }
      if (!jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if (!jsonObj.get("Year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year").toString()));
      }
      if (!jsonObj.get("imdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CombinedResultSearchInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CombinedResultSearchInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CombinedResultSearchInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CombinedResultSearchInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CombinedResultSearchInner>() {
           @Override
           public void write(JsonWriter out, CombinedResultSearchInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CombinedResultSearchInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CombinedResultSearchInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CombinedResultSearchInner
   * @throws IOException if the JSON string is invalid with respect to CombinedResultSearchInner
   */
  public static CombinedResultSearchInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CombinedResultSearchInner.class);
  }

  /**
   * Convert an instance of CombinedResultSearchInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

