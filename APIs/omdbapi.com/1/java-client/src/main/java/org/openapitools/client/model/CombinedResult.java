/*
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CombinedResultSearchInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CombinedResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:56.334294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CombinedResult {
  public static final String SERIALIZED_NAME_ACTORS = "Actors";
  @SerializedName(SERIALIZED_NAME_ACTORS)
  private String actors;

  public static final String SERIALIZED_NAME_AWARDS = "Awards";
  @SerializedName(SERIALIZED_NAME_AWARDS)
  private String awards;

  public static final String SERIALIZED_NAME_BOX_OFFICE = "BoxOffice";
  @SerializedName(SERIALIZED_NAME_BOX_OFFICE)
  private String boxOffice;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_D_V_D = "DVD";
  @SerializedName(SERIALIZED_NAME_D_V_D)
  private String DVD;

  public static final String SERIALIZED_NAME_DIRECTOR = "Director";
  @SerializedName(SERIALIZED_NAME_DIRECTOR)
  private String director;

  public static final String SERIALIZED_NAME_GENRE = "Genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_METASCORE = "Metascore";
  @SerializedName(SERIALIZED_NAME_METASCORE)
  private String metascore;

  public static final String SERIALIZED_NAME_PLOT = "Plot";
  @SerializedName(SERIALIZED_NAME_PLOT)
  private String plot;

  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private String poster;

  public static final String SERIALIZED_NAME_PRODUCTION = "Production";
  @SerializedName(SERIALIZED_NAME_PRODUCTION)
  private String production;

  public static final String SERIALIZED_NAME_RATED = "Rated";
  @SerializedName(SERIALIZED_NAME_RATED)
  private String rated;

  public static final String SERIALIZED_NAME_RELEASED = "Released";
  @SerializedName(SERIALIZED_NAME_RELEASED)
  private String released;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;

  public static final String SERIALIZED_NAME_RUNTIME = "Runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private String runtime;

  public static final String SERIALIZED_NAME_SEARCH = "Search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private List<CombinedResultSearchInner> search = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WEBSITE = "Website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_WRITER = "Writer";
  @SerializedName(SERIALIZED_NAME_WRITER)
  private String writer;

  public static final String SERIALIZED_NAME_YEAR = "Year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public static final String SERIALIZED_NAME_IMDB_RATING = "imdbRating";
  @SerializedName(SERIALIZED_NAME_IMDB_RATING)
  private String imdbRating;

  public static final String SERIALIZED_NAME_IMDB_VOTES = "imdbVotes";
  @SerializedName(SERIALIZED_NAME_IMDB_VOTES)
  private String imdbVotes;

  public static final String SERIALIZED_NAME_TOMATO_CONSENSUS = "tomatoConsensus";
  @SerializedName(SERIALIZED_NAME_TOMATO_CONSENSUS)
  private String tomatoConsensus;

  public static final String SERIALIZED_NAME_TOMATO_FRESH = "tomatoFresh";
  @SerializedName(SERIALIZED_NAME_TOMATO_FRESH)
  private String tomatoFresh;

  public static final String SERIALIZED_NAME_TOMATO_IMAGE = "tomatoImage";
  @SerializedName(SERIALIZED_NAME_TOMATO_IMAGE)
  private String tomatoImage;

  public static final String SERIALIZED_NAME_TOMATO_METER = "tomatoMeter";
  @SerializedName(SERIALIZED_NAME_TOMATO_METER)
  private String tomatoMeter;

  public static final String SERIALIZED_NAME_TOMATO_RATING = "tomatoRating";
  @SerializedName(SERIALIZED_NAME_TOMATO_RATING)
  private String tomatoRating;

  public static final String SERIALIZED_NAME_TOMATO_REVIEWS = "tomatoReviews";
  @SerializedName(SERIALIZED_NAME_TOMATO_REVIEWS)
  private String tomatoReviews;

  public static final String SERIALIZED_NAME_TOMATO_ROTTEN = "tomatoRotten";
  @SerializedName(SERIALIZED_NAME_TOMATO_ROTTEN)
  private String tomatoRotten;

  public static final String SERIALIZED_NAME_TOMATO_U_R_L = "tomatoURL";
  @SerializedName(SERIALIZED_NAME_TOMATO_U_R_L)
  private String tomatoURL;

  public static final String SERIALIZED_NAME_TOMATO_USER_METER = "tomatoUserMeter";
  @SerializedName(SERIALIZED_NAME_TOMATO_USER_METER)
  private String tomatoUserMeter;

  public static final String SERIALIZED_NAME_TOMATO_USER_RATING = "tomatoUserRating";
  @SerializedName(SERIALIZED_NAME_TOMATO_USER_RATING)
  private String tomatoUserRating;

  public static final String SERIALIZED_NAME_TOMATO_USER_REVIEWS = "tomatoUserReviews";
  @SerializedName(SERIALIZED_NAME_TOMATO_USER_REVIEWS)
  private String tomatoUserReviews;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private String totalResults;

  public static final String SERIALIZED_NAME_TOTAL_SEASONS = "totalSeasons";
  @SerializedName(SERIALIZED_NAME_TOTAL_SEASONS)
  private String totalSeasons;

  public CombinedResult() {
  }

  public CombinedResult actors(String actors) {
    this.actors = actors;
    return this;
  }

  /**
   * Get actors
   * @return actors
   */
  @javax.annotation.Nullable
  public String getActors() {
    return actors;
  }

  public void setActors(String actors) {
    this.actors = actors;
  }


  public CombinedResult awards(String awards) {
    this.awards = awards;
    return this;
  }

  /**
   * Get awards
   * @return awards
   */
  @javax.annotation.Nullable
  public String getAwards() {
    return awards;
  }

  public void setAwards(String awards) {
    this.awards = awards;
  }


  public CombinedResult boxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
    return this;
  }

  /**
   * Get boxOffice
   * @return boxOffice
   */
  @javax.annotation.Nullable
  public String getBoxOffice() {
    return boxOffice;
  }

  public void setBoxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
  }


  public CombinedResult country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CombinedResult DVD(String DVD) {
    this.DVD = DVD;
    return this;
  }

  /**
   * Get DVD
   * @return DVD
   */
  @javax.annotation.Nullable
  public String getDVD() {
    return DVD;
  }

  public void setDVD(String DVD) {
    this.DVD = DVD;
  }


  public CombinedResult director(String director) {
    this.director = director;
    return this;
  }

  /**
   * Get director
   * @return director
   */
  @javax.annotation.Nullable
  public String getDirector() {
    return director;
  }

  public void setDirector(String director) {
    this.director = director;
  }


  public CombinedResult genre(String genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nullable
  public String getGenre() {
    return genre;
  }

  public void setGenre(String genre) {
    this.genre = genre;
  }


  public CombinedResult language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public CombinedResult metascore(String metascore) {
    this.metascore = metascore;
    return this;
  }

  /**
   * Get metascore
   * @return metascore
   */
  @javax.annotation.Nullable
  public String getMetascore() {
    return metascore;
  }

  public void setMetascore(String metascore) {
    this.metascore = metascore;
  }


  public CombinedResult plot(String plot) {
    this.plot = plot;
    return this;
  }

  /**
   * Get plot
   * @return plot
   */
  @javax.annotation.Nullable
  public String getPlot() {
    return plot;
  }

  public void setPlot(String plot) {
    this.plot = plot;
  }


  public CombinedResult poster(String poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public String getPoster() {
    return poster;
  }

  public void setPoster(String poster) {
    this.poster = poster;
  }


  public CombinedResult production(String production) {
    this.production = production;
    return this;
  }

  /**
   * Get production
   * @return production
   */
  @javax.annotation.Nullable
  public String getProduction() {
    return production;
  }

  public void setProduction(String production) {
    this.production = production;
  }


  public CombinedResult rated(String rated) {
    this.rated = rated;
    return this;
  }

  /**
   * Get rated
   * @return rated
   */
  @javax.annotation.Nullable
  public String getRated() {
    return rated;
  }

  public void setRated(String rated) {
    this.rated = rated;
  }


  public CombinedResult released(String released) {
    this.released = released;
    return this;
  }

  /**
   * Get released
   * @return released
   */
  @javax.annotation.Nullable
  public String getReleased() {
    return released;
  }

  public void setReleased(String released) {
    this.released = released;
  }


  public CombinedResult response(String response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public String getResponse() {
    return response;
  }

  public void setResponse(String response) {
    this.response = response;
  }


  public CombinedResult runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  public CombinedResult search(List<CombinedResultSearchInner> search) {
    this.search = search;
    return this;
  }

  public CombinedResult addSearchItem(CombinedResultSearchInner searchItem) {
    if (this.search == null) {
      this.search = new ArrayList<>();
    }
    this.search.add(searchItem);
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public List<CombinedResultSearchInner> getSearch() {
    return search;
  }

  public void setSearch(List<CombinedResultSearchInner> search) {
    this.search = search;
  }


  public CombinedResult title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CombinedResult type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CombinedResult website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public CombinedResult writer(String writer) {
    this.writer = writer;
    return this;
  }

  /**
   * Get writer
   * @return writer
   */
  @javax.annotation.Nullable
  public String getWriter() {
    return writer;
  }

  public void setWriter(String writer) {
    this.writer = writer;
  }


  public CombinedResult year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }


  public CombinedResult imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nullable
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }


  public CombinedResult imdbRating(String imdbRating) {
    this.imdbRating = imdbRating;
    return this;
  }

  /**
   * Get imdbRating
   * @return imdbRating
   */
  @javax.annotation.Nullable
  public String getImdbRating() {
    return imdbRating;
  }

  public void setImdbRating(String imdbRating) {
    this.imdbRating = imdbRating;
  }


  public CombinedResult imdbVotes(String imdbVotes) {
    this.imdbVotes = imdbVotes;
    return this;
  }

  /**
   * Get imdbVotes
   * @return imdbVotes
   */
  @javax.annotation.Nullable
  public String getImdbVotes() {
    return imdbVotes;
  }

  public void setImdbVotes(String imdbVotes) {
    this.imdbVotes = imdbVotes;
  }


  public CombinedResult tomatoConsensus(String tomatoConsensus) {
    this.tomatoConsensus = tomatoConsensus;
    return this;
  }

  /**
   * Get tomatoConsensus
   * @return tomatoConsensus
   */
  @javax.annotation.Nullable
  public String getTomatoConsensus() {
    return tomatoConsensus;
  }

  public void setTomatoConsensus(String tomatoConsensus) {
    this.tomatoConsensus = tomatoConsensus;
  }


  public CombinedResult tomatoFresh(String tomatoFresh) {
    this.tomatoFresh = tomatoFresh;
    return this;
  }

  /**
   * Get tomatoFresh
   * @return tomatoFresh
   */
  @javax.annotation.Nullable
  public String getTomatoFresh() {
    return tomatoFresh;
  }

  public void setTomatoFresh(String tomatoFresh) {
    this.tomatoFresh = tomatoFresh;
  }


  public CombinedResult tomatoImage(String tomatoImage) {
    this.tomatoImage = tomatoImage;
    return this;
  }

  /**
   * Get tomatoImage
   * @return tomatoImage
   */
  @javax.annotation.Nullable
  public String getTomatoImage() {
    return tomatoImage;
  }

  public void setTomatoImage(String tomatoImage) {
    this.tomatoImage = tomatoImage;
  }


  public CombinedResult tomatoMeter(String tomatoMeter) {
    this.tomatoMeter = tomatoMeter;
    return this;
  }

  /**
   * Get tomatoMeter
   * @return tomatoMeter
   */
  @javax.annotation.Nullable
  public String getTomatoMeter() {
    return tomatoMeter;
  }

  public void setTomatoMeter(String tomatoMeter) {
    this.tomatoMeter = tomatoMeter;
  }


  public CombinedResult tomatoRating(String tomatoRating) {
    this.tomatoRating = tomatoRating;
    return this;
  }

  /**
   * Get tomatoRating
   * @return tomatoRating
   */
  @javax.annotation.Nullable
  public String getTomatoRating() {
    return tomatoRating;
  }

  public void setTomatoRating(String tomatoRating) {
    this.tomatoRating = tomatoRating;
  }


  public CombinedResult tomatoReviews(String tomatoReviews) {
    this.tomatoReviews = tomatoReviews;
    return this;
  }

  /**
   * Get tomatoReviews
   * @return tomatoReviews
   */
  @javax.annotation.Nullable
  public String getTomatoReviews() {
    return tomatoReviews;
  }

  public void setTomatoReviews(String tomatoReviews) {
    this.tomatoReviews = tomatoReviews;
  }


  public CombinedResult tomatoRotten(String tomatoRotten) {
    this.tomatoRotten = tomatoRotten;
    return this;
  }

  /**
   * Get tomatoRotten
   * @return tomatoRotten
   */
  @javax.annotation.Nullable
  public String getTomatoRotten() {
    return tomatoRotten;
  }

  public void setTomatoRotten(String tomatoRotten) {
    this.tomatoRotten = tomatoRotten;
  }


  public CombinedResult tomatoURL(String tomatoURL) {
    this.tomatoURL = tomatoURL;
    return this;
  }

  /**
   * Get tomatoURL
   * @return tomatoURL
   */
  @javax.annotation.Nullable
  public String getTomatoURL() {
    return tomatoURL;
  }

  public void setTomatoURL(String tomatoURL) {
    this.tomatoURL = tomatoURL;
  }


  public CombinedResult tomatoUserMeter(String tomatoUserMeter) {
    this.tomatoUserMeter = tomatoUserMeter;
    return this;
  }

  /**
   * Get tomatoUserMeter
   * @return tomatoUserMeter
   */
  @javax.annotation.Nullable
  public String getTomatoUserMeter() {
    return tomatoUserMeter;
  }

  public void setTomatoUserMeter(String tomatoUserMeter) {
    this.tomatoUserMeter = tomatoUserMeter;
  }


  public CombinedResult tomatoUserRating(String tomatoUserRating) {
    this.tomatoUserRating = tomatoUserRating;
    return this;
  }

  /**
   * Get tomatoUserRating
   * @return tomatoUserRating
   */
  @javax.annotation.Nullable
  public String getTomatoUserRating() {
    return tomatoUserRating;
  }

  public void setTomatoUserRating(String tomatoUserRating) {
    this.tomatoUserRating = tomatoUserRating;
  }


  public CombinedResult tomatoUserReviews(String tomatoUserReviews) {
    this.tomatoUserReviews = tomatoUserReviews;
    return this;
  }

  /**
   * Get tomatoUserReviews
   * @return tomatoUserReviews
   */
  @javax.annotation.Nullable
  public String getTomatoUserReviews() {
    return tomatoUserReviews;
  }

  public void setTomatoUserReviews(String tomatoUserReviews) {
    this.tomatoUserReviews = tomatoUserReviews;
  }


  public CombinedResult totalResults(String totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Get totalResults
   * @return totalResults
   */
  @javax.annotation.Nullable
  public String getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(String totalResults) {
    this.totalResults = totalResults;
  }


  public CombinedResult totalSeasons(String totalSeasons) {
    this.totalSeasons = totalSeasons;
    return this;
  }

  /**
   * Get totalSeasons
   * @return totalSeasons
   */
  @javax.annotation.Nullable
  public String getTotalSeasons() {
    return totalSeasons;
  }

  public void setTotalSeasons(String totalSeasons) {
    this.totalSeasons = totalSeasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedResult combinedResult = (CombinedResult) o;
    return Objects.equals(this.actors, combinedResult.actors) &&
        Objects.equals(this.awards, combinedResult.awards) &&
        Objects.equals(this.boxOffice, combinedResult.boxOffice) &&
        Objects.equals(this.country, combinedResult.country) &&
        Objects.equals(this.DVD, combinedResult.DVD) &&
        Objects.equals(this.director, combinedResult.director) &&
        Objects.equals(this.genre, combinedResult.genre) &&
        Objects.equals(this.language, combinedResult.language) &&
        Objects.equals(this.metascore, combinedResult.metascore) &&
        Objects.equals(this.plot, combinedResult.plot) &&
        Objects.equals(this.poster, combinedResult.poster) &&
        Objects.equals(this.production, combinedResult.production) &&
        Objects.equals(this.rated, combinedResult.rated) &&
        Objects.equals(this.released, combinedResult.released) &&
        Objects.equals(this.response, combinedResult.response) &&
        Objects.equals(this.runtime, combinedResult.runtime) &&
        Objects.equals(this.search, combinedResult.search) &&
        Objects.equals(this.title, combinedResult.title) &&
        Objects.equals(this.type, combinedResult.type) &&
        Objects.equals(this.website, combinedResult.website) &&
        Objects.equals(this.writer, combinedResult.writer) &&
        Objects.equals(this.year, combinedResult.year) &&
        Objects.equals(this.imdbID, combinedResult.imdbID) &&
        Objects.equals(this.imdbRating, combinedResult.imdbRating) &&
        Objects.equals(this.imdbVotes, combinedResult.imdbVotes) &&
        Objects.equals(this.tomatoConsensus, combinedResult.tomatoConsensus) &&
        Objects.equals(this.tomatoFresh, combinedResult.tomatoFresh) &&
        Objects.equals(this.tomatoImage, combinedResult.tomatoImage) &&
        Objects.equals(this.tomatoMeter, combinedResult.tomatoMeter) &&
        Objects.equals(this.tomatoRating, combinedResult.tomatoRating) &&
        Objects.equals(this.tomatoReviews, combinedResult.tomatoReviews) &&
        Objects.equals(this.tomatoRotten, combinedResult.tomatoRotten) &&
        Objects.equals(this.tomatoURL, combinedResult.tomatoURL) &&
        Objects.equals(this.tomatoUserMeter, combinedResult.tomatoUserMeter) &&
        Objects.equals(this.tomatoUserRating, combinedResult.tomatoUserRating) &&
        Objects.equals(this.tomatoUserReviews, combinedResult.tomatoUserReviews) &&
        Objects.equals(this.totalResults, combinedResult.totalResults) &&
        Objects.equals(this.totalSeasons, combinedResult.totalSeasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actors, awards, boxOffice, country, DVD, director, genre, language, metascore, plot, poster, production, rated, released, response, runtime, search, title, type, website, writer, year, imdbID, imdbRating, imdbVotes, tomatoConsensus, tomatoFresh, tomatoImage, tomatoMeter, tomatoRating, tomatoReviews, tomatoRotten, tomatoURL, tomatoUserMeter, tomatoUserRating, tomatoUserReviews, totalResults, totalSeasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinedResult {\n");
    sb.append("    actors: ").append(toIndentedString(actors)).append("\n");
    sb.append("    awards: ").append(toIndentedString(awards)).append("\n");
    sb.append("    boxOffice: ").append(toIndentedString(boxOffice)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    DVD: ").append(toIndentedString(DVD)).append("\n");
    sb.append("    director: ").append(toIndentedString(director)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    metascore: ").append(toIndentedString(metascore)).append("\n");
    sb.append("    plot: ").append(toIndentedString(plot)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("    rated: ").append(toIndentedString(rated)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("    imdbRating: ").append(toIndentedString(imdbRating)).append("\n");
    sb.append("    imdbVotes: ").append(toIndentedString(imdbVotes)).append("\n");
    sb.append("    tomatoConsensus: ").append(toIndentedString(tomatoConsensus)).append("\n");
    sb.append("    tomatoFresh: ").append(toIndentedString(tomatoFresh)).append("\n");
    sb.append("    tomatoImage: ").append(toIndentedString(tomatoImage)).append("\n");
    sb.append("    tomatoMeter: ").append(toIndentedString(tomatoMeter)).append("\n");
    sb.append("    tomatoRating: ").append(toIndentedString(tomatoRating)).append("\n");
    sb.append("    tomatoReviews: ").append(toIndentedString(tomatoReviews)).append("\n");
    sb.append("    tomatoRotten: ").append(toIndentedString(tomatoRotten)).append("\n");
    sb.append("    tomatoURL: ").append(toIndentedString(tomatoURL)).append("\n");
    sb.append("    tomatoUserMeter: ").append(toIndentedString(tomatoUserMeter)).append("\n");
    sb.append("    tomatoUserRating: ").append(toIndentedString(tomatoUserRating)).append("\n");
    sb.append("    tomatoUserReviews: ").append(toIndentedString(tomatoUserReviews)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("    totalSeasons: ").append(toIndentedString(totalSeasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Actors");
    openapiFields.add("Awards");
    openapiFields.add("BoxOffice");
    openapiFields.add("Country");
    openapiFields.add("DVD");
    openapiFields.add("Director");
    openapiFields.add("Genre");
    openapiFields.add("Language");
    openapiFields.add("Metascore");
    openapiFields.add("Plot");
    openapiFields.add("Poster");
    openapiFields.add("Production");
    openapiFields.add("Rated");
    openapiFields.add("Released");
    openapiFields.add("Response");
    openapiFields.add("Runtime");
    openapiFields.add("Search");
    openapiFields.add("Title");
    openapiFields.add("Type");
    openapiFields.add("Website");
    openapiFields.add("Writer");
    openapiFields.add("Year");
    openapiFields.add("imdbID");
    openapiFields.add("imdbRating");
    openapiFields.add("imdbVotes");
    openapiFields.add("tomatoConsensus");
    openapiFields.add("tomatoFresh");
    openapiFields.add("tomatoImage");
    openapiFields.add("tomatoMeter");
    openapiFields.add("tomatoRating");
    openapiFields.add("tomatoReviews");
    openapiFields.add("tomatoRotten");
    openapiFields.add("tomatoURL");
    openapiFields.add("tomatoUserMeter");
    openapiFields.add("tomatoUserRating");
    openapiFields.add("tomatoUserReviews");
    openapiFields.add("totalResults");
    openapiFields.add("totalSeasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CombinedResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CombinedResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CombinedResult is not found in the empty JSON string", CombinedResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CombinedResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CombinedResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CombinedResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Actors") != null && !jsonObj.get("Actors").isJsonNull()) && !jsonObj.get("Actors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Actors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Actors").toString()));
      }
      if ((jsonObj.get("Awards") != null && !jsonObj.get("Awards").isJsonNull()) && !jsonObj.get("Awards").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Awards` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Awards").toString()));
      }
      if ((jsonObj.get("BoxOffice") != null && !jsonObj.get("BoxOffice").isJsonNull()) && !jsonObj.get("BoxOffice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BoxOffice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BoxOffice").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("DVD") != null && !jsonObj.get("DVD").isJsonNull()) && !jsonObj.get("DVD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DVD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DVD").toString()));
      }
      if ((jsonObj.get("Director") != null && !jsonObj.get("Director").isJsonNull()) && !jsonObj.get("Director").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Director` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Director").toString()));
      }
      if ((jsonObj.get("Genre") != null && !jsonObj.get("Genre").isJsonNull()) && !jsonObj.get("Genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Genre").toString()));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if ((jsonObj.get("Metascore") != null && !jsonObj.get("Metascore").isJsonNull()) && !jsonObj.get("Metascore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Metascore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Metascore").toString()));
      }
      if ((jsonObj.get("Plot") != null && !jsonObj.get("Plot").isJsonNull()) && !jsonObj.get("Plot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Plot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Plot").toString()));
      }
      if ((jsonObj.get("Poster") != null && !jsonObj.get("Poster").isJsonNull()) && !jsonObj.get("Poster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Poster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Poster").toString()));
      }
      if ((jsonObj.get("Production") != null && !jsonObj.get("Production").isJsonNull()) && !jsonObj.get("Production").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Production` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Production").toString()));
      }
      if ((jsonObj.get("Rated") != null && !jsonObj.get("Rated").isJsonNull()) && !jsonObj.get("Rated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rated").toString()));
      }
      if ((jsonObj.get("Released") != null && !jsonObj.get("Released").isJsonNull()) && !jsonObj.get("Released").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Released` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Released").toString()));
      }
      if (!jsonObj.get("Response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Response").toString()));
      }
      if ((jsonObj.get("Runtime") != null && !jsonObj.get("Runtime").isJsonNull()) && !jsonObj.get("Runtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Runtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Runtime").toString()));
      }
      if (jsonObj.get("Search") != null && !jsonObj.get("Search").isJsonNull()) {
        JsonArray jsonArraysearch = jsonObj.getAsJsonArray("Search");
        if (jsonArraysearch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Search").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Search` to be an array in the JSON string but got `%s`", jsonObj.get("Search").toString()));
          }

          // validate the optional field `Search` (array)
          for (int i = 0; i < jsonArraysearch.size(); i++) {
            CombinedResultSearchInner.validateJsonElement(jsonArraysearch.get(i));
          };
        }
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Website") != null && !jsonObj.get("Website").isJsonNull()) && !jsonObj.get("Website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Website").toString()));
      }
      if ((jsonObj.get("Writer") != null && !jsonObj.get("Writer").isJsonNull()) && !jsonObj.get("Writer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Writer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Writer").toString()));
      }
      if ((jsonObj.get("Year") != null && !jsonObj.get("Year").isJsonNull()) && !jsonObj.get("Year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year").toString()));
      }
      if ((jsonObj.get("imdbID") != null && !jsonObj.get("imdbID").isJsonNull()) && !jsonObj.get("imdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbID").toString()));
      }
      if ((jsonObj.get("imdbRating") != null && !jsonObj.get("imdbRating").isJsonNull()) && !jsonObj.get("imdbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbRating").toString()));
      }
      if ((jsonObj.get("imdbVotes") != null && !jsonObj.get("imdbVotes").isJsonNull()) && !jsonObj.get("imdbVotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbVotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbVotes").toString()));
      }
      if ((jsonObj.get("tomatoConsensus") != null && !jsonObj.get("tomatoConsensus").isJsonNull()) && !jsonObj.get("tomatoConsensus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoConsensus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoConsensus").toString()));
      }
      if ((jsonObj.get("tomatoFresh") != null && !jsonObj.get("tomatoFresh").isJsonNull()) && !jsonObj.get("tomatoFresh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoFresh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoFresh").toString()));
      }
      if ((jsonObj.get("tomatoImage") != null && !jsonObj.get("tomatoImage").isJsonNull()) && !jsonObj.get("tomatoImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoImage").toString()));
      }
      if ((jsonObj.get("tomatoMeter") != null && !jsonObj.get("tomatoMeter").isJsonNull()) && !jsonObj.get("tomatoMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoMeter").toString()));
      }
      if ((jsonObj.get("tomatoRating") != null && !jsonObj.get("tomatoRating").isJsonNull()) && !jsonObj.get("tomatoRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoRating").toString()));
      }
      if ((jsonObj.get("tomatoReviews") != null && !jsonObj.get("tomatoReviews").isJsonNull()) && !jsonObj.get("tomatoReviews").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoReviews` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoReviews").toString()));
      }
      if ((jsonObj.get("tomatoRotten") != null && !jsonObj.get("tomatoRotten").isJsonNull()) && !jsonObj.get("tomatoRotten").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoRotten` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoRotten").toString()));
      }
      if ((jsonObj.get("tomatoURL") != null && !jsonObj.get("tomatoURL").isJsonNull()) && !jsonObj.get("tomatoURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoURL").toString()));
      }
      if ((jsonObj.get("tomatoUserMeter") != null && !jsonObj.get("tomatoUserMeter").isJsonNull()) && !jsonObj.get("tomatoUserMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoUserMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoUserMeter").toString()));
      }
      if ((jsonObj.get("tomatoUserRating") != null && !jsonObj.get("tomatoUserRating").isJsonNull()) && !jsonObj.get("tomatoUserRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoUserRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoUserRating").toString()));
      }
      if ((jsonObj.get("tomatoUserReviews") != null && !jsonObj.get("tomatoUserReviews").isJsonNull()) && !jsonObj.get("tomatoUserReviews").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tomatoUserReviews` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tomatoUserReviews").toString()));
      }
      if ((jsonObj.get("totalResults") != null && !jsonObj.get("totalResults").isJsonNull()) && !jsonObj.get("totalResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalResults").toString()));
      }
      if ((jsonObj.get("totalSeasons") != null && !jsonObj.get("totalSeasons").isJsonNull()) && !jsonObj.get("totalSeasons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSeasons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSeasons").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CombinedResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CombinedResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CombinedResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CombinedResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CombinedResult>() {
           @Override
           public void write(JsonWriter out, CombinedResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CombinedResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CombinedResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CombinedResult
   * @throws IOException if the JSON string is invalid with respect to CombinedResult
   */
  public static CombinedResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CombinedResult.class);
  }

  /**
   * Convert an instance of CombinedResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

