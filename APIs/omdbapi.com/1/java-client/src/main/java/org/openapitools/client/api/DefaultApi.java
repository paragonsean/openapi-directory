/*
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CombinedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOMDbSearch
     * @param r The data type to return. (required)
     * @param t Movie title to search for. One of t, i or s is required. (optional)
     * @param i A valid IMDb ID (e.g. tt1285016). One of t, i or s is required. (optional)
     * @param s Movie title to search for. One of t, i or s is required. (optional)
     * @param y Year of release. (optional)
     * @param type Type of result to return. (optional)
     * @param plot Return short or full plot. (optional, default to short)
     * @param tomatoes Include Rotten Tomatoes ratings. (optional, default to false)
     * @param v API version (reserved for future use). (optional, default to 1)
     * @param page Page number to return. (optional, default to 1)
     * @param paramCallback JSONP callback name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOMDbSearchCall(String r, String t, String i, String s, Integer y, String type, String plot, Boolean tomatoes, Integer v, Integer page, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        if (i != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("i", i));
        }

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        if (y != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("y", y));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (plot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plot", plot));
        }

        if (tomatoes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tomatoes", tomatoes));
        }

        if (r != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("r", r));
        }

        if (v != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("v", v));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOMDbSearchValidateBeforeCall(String r, String t, String i, String s, Integer y, String type, String plot, Boolean tomatoes, Integer v, Integer page, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'r' is set
        if (r == null) {
            throw new ApiException("Missing the required parameter 'r' when calling getOMDbSearch(Async)");
        }

        return getOMDbSearchCall(r, t, i, s, y, type, plot, tomatoes, v, page, paramCallback, _callback);

    }

    /**
     * OMDb Search
     * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
     * @param r The data type to return. (required)
     * @param t Movie title to search for. One of t, i or s is required. (optional)
     * @param i A valid IMDb ID (e.g. tt1285016). One of t, i or s is required. (optional)
     * @param s Movie title to search for. One of t, i or s is required. (optional)
     * @param y Year of release. (optional)
     * @param type Type of result to return. (optional)
     * @param plot Return short or full plot. (optional, default to short)
     * @param tomatoes Include Rotten Tomatoes ratings. (optional, default to false)
     * @param v API version (reserved for future use). (optional, default to 1)
     * @param page Page number to return. (optional, default to 1)
     * @param paramCallback JSONP callback name. (optional)
     * @return CombinedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public CombinedResult getOMDbSearch(String r, String t, String i, String s, Integer y, String type, String plot, Boolean tomatoes, Integer v, Integer page, String paramCallback) throws ApiException {
        ApiResponse<CombinedResult> localVarResp = getOMDbSearchWithHttpInfo(r, t, i, s, y, type, plot, tomatoes, v, page, paramCallback);
        return localVarResp.getData();
    }

    /**
     * OMDb Search
     * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
     * @param r The data type to return. (required)
     * @param t Movie title to search for. One of t, i or s is required. (optional)
     * @param i A valid IMDb ID (e.g. tt1285016). One of t, i or s is required. (optional)
     * @param s Movie title to search for. One of t, i or s is required. (optional)
     * @param y Year of release. (optional)
     * @param type Type of result to return. (optional)
     * @param plot Return short or full plot. (optional, default to short)
     * @param tomatoes Include Rotten Tomatoes ratings. (optional, default to false)
     * @param v API version (reserved for future use). (optional, default to 1)
     * @param page Page number to return. (optional, default to 1)
     * @param paramCallback JSONP callback name. (optional)
     * @return ApiResponse&lt;CombinedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CombinedResult> getOMDbSearchWithHttpInfo(String r, String t, String i, String s, Integer y, String type, String plot, Boolean tomatoes, Integer v, Integer page, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getOMDbSearchValidateBeforeCall(r, t, i, s, y, type, plot, tomatoes, v, page, paramCallback, null);
        Type localVarReturnType = new TypeToken<CombinedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OMDb Search (asynchronously)
     * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
     * @param r The data type to return. (required)
     * @param t Movie title to search for. One of t, i or s is required. (optional)
     * @param i A valid IMDb ID (e.g. tt1285016). One of t, i or s is required. (optional)
     * @param s Movie title to search for. One of t, i or s is required. (optional)
     * @param y Year of release. (optional)
     * @param type Type of result to return. (optional)
     * @param plot Return short or full plot. (optional, default to short)
     * @param tomatoes Include Rotten Tomatoes ratings. (optional, default to false)
     * @param v API version (reserved for future use). (optional, default to 1)
     * @param page Page number to return. (optional, default to 1)
     * @param paramCallback JSONP callback name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOMDbSearchAsync(String r, String t, String i, String s, Integer y, String type, String plot, Boolean tomatoes, Integer v, Integer page, String paramCallback, final ApiCallback<CombinedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOMDbSearchValidateBeforeCall(r, t, i, s, y, type, plot, tomatoes, v, page, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<CombinedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
