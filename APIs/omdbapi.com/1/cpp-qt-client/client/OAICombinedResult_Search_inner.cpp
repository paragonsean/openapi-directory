/**
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombinedResult_Search_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombinedResult_Search_inner::OAICombinedResult_Search_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombinedResult_Search_inner::OAICombinedResult_Search_inner() {
    this->initializeModel();
}

OAICombinedResult_Search_inner::~OAICombinedResult_Search_inner() {}

void OAICombinedResult_Search_inner::initializeModel() {

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;

    m_imdb_id_isSet = false;
    m_imdb_id_isValid = false;
}

void OAICombinedResult_Search_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombinedResult_Search_inner::fromJsonObject(QJsonObject json) {

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("Poster")]);
    m_poster_isSet = !json[QString("Poster")].isNull() && m_poster_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;

    m_imdb_id_isValid = ::OpenAPI::fromJsonValue(m_imdb_id, json[QString("imdbID")]);
    m_imdb_id_isSet = !json[QString("imdbID")].isNull() && m_imdb_id_isValid;
}

QString OAICombinedResult_Search_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombinedResult_Search_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_poster_isSet) {
        obj.insert(QString("Poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    if (m_imdb_id_isSet) {
        obj.insert(QString("imdbID"), ::OpenAPI::toJsonValue(m_imdb_id));
    }
    return obj;
}

QString OAICombinedResult_Search_inner::getPoster() const {
    return m_poster;
}
void OAICombinedResult_Search_inner::setPoster(const QString &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAICombinedResult_Search_inner::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAICombinedResult_Search_inner::is_poster_Valid() const{
    return m_poster_isValid;
}

QString OAICombinedResult_Search_inner::getTitle() const {
    return m_title;
}
void OAICombinedResult_Search_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICombinedResult_Search_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAICombinedResult_Search_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICombinedResult_Search_inner::getType() const {
    return m_type;
}
void OAICombinedResult_Search_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICombinedResult_Search_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAICombinedResult_Search_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICombinedResult_Search_inner::getYear() const {
    return m_year;
}
void OAICombinedResult_Search_inner::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAICombinedResult_Search_inner::is_year_Set() const{
    return m_year_isSet;
}

bool OAICombinedResult_Search_inner::is_year_Valid() const{
    return m_year_isValid;
}

QString OAICombinedResult_Search_inner::getImdbId() const {
    return m_imdb_id;
}
void OAICombinedResult_Search_inner::setImdbId(const QString &imdb_id) {
    m_imdb_id = imdb_id;
    m_imdb_id_isSet = true;
}

bool OAICombinedResult_Search_inner::is_imdb_id_Set() const{
    return m_imdb_id_isSet;
}

bool OAICombinedResult_Search_inner::is_imdb_id_Valid() const{
    return m_imdb_id_isValid;
}

bool OAICombinedResult_Search_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_poster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombinedResult_Search_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_poster_isValid && m_title_isValid && m_type_isValid && m_year_isValid && m_imdb_id_isValid && true;
}

} // namespace OpenAPI
