/**
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombinedResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombinedResult::OAICombinedResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombinedResult::OAICombinedResult() {
    this->initializeModel();
}

OAICombinedResult::~OAICombinedResult() {}

void OAICombinedResult::initializeModel() {

    m_actors_isSet = false;
    m_actors_isValid = false;

    m_awards_isSet = false;
    m_awards_isValid = false;

    m_box_office_isSet = false;
    m_box_office_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_dvd_isSet = false;
    m_dvd_isValid = false;

    m_director_isSet = false;
    m_director_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_metascore_isSet = false;
    m_metascore_isValid = false;

    m_plot_isSet = false;
    m_plot_isValid = false;

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_production_isSet = false;
    m_production_isValid = false;

    m_rated_isSet = false;
    m_rated_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_writer_isSet = false;
    m_writer_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;

    m_imdb_id_isSet = false;
    m_imdb_id_isValid = false;

    m_imdb_rating_isSet = false;
    m_imdb_rating_isValid = false;

    m_imdb_votes_isSet = false;
    m_imdb_votes_isValid = false;

    m_tomato_consensus_isSet = false;
    m_tomato_consensus_isValid = false;

    m_tomato_fresh_isSet = false;
    m_tomato_fresh_isValid = false;

    m_tomato_image_isSet = false;
    m_tomato_image_isValid = false;

    m_tomato_meter_isSet = false;
    m_tomato_meter_isValid = false;

    m_tomato_rating_isSet = false;
    m_tomato_rating_isValid = false;

    m_tomato_reviews_isSet = false;
    m_tomato_reviews_isValid = false;

    m_tomato_rotten_isSet = false;
    m_tomato_rotten_isValid = false;

    m_tomato_url_isSet = false;
    m_tomato_url_isValid = false;

    m_tomato_user_meter_isSet = false;
    m_tomato_user_meter_isValid = false;

    m_tomato_user_rating_isSet = false;
    m_tomato_user_rating_isValid = false;

    m_tomato_user_reviews_isSet = false;
    m_tomato_user_reviews_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_total_seasons_isSet = false;
    m_total_seasons_isValid = false;
}

void OAICombinedResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombinedResult::fromJsonObject(QJsonObject json) {

    m_actors_isValid = ::OpenAPI::fromJsonValue(m_actors, json[QString("Actors")]);
    m_actors_isSet = !json[QString("Actors")].isNull() && m_actors_isValid;

    m_awards_isValid = ::OpenAPI::fromJsonValue(m_awards, json[QString("Awards")]);
    m_awards_isSet = !json[QString("Awards")].isNull() && m_awards_isValid;

    m_box_office_isValid = ::OpenAPI::fromJsonValue(m_box_office, json[QString("BoxOffice")]);
    m_box_office_isSet = !json[QString("BoxOffice")].isNull() && m_box_office_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_dvd_isValid = ::OpenAPI::fromJsonValue(m_dvd, json[QString("DVD")]);
    m_dvd_isSet = !json[QString("DVD")].isNull() && m_dvd_isValid;

    m_director_isValid = ::OpenAPI::fromJsonValue(m_director, json[QString("Director")]);
    m_director_isSet = !json[QString("Director")].isNull() && m_director_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("Genre")]);
    m_genre_isSet = !json[QString("Genre")].isNull() && m_genre_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_metascore_isValid = ::OpenAPI::fromJsonValue(m_metascore, json[QString("Metascore")]);
    m_metascore_isSet = !json[QString("Metascore")].isNull() && m_metascore_isValid;

    m_plot_isValid = ::OpenAPI::fromJsonValue(m_plot, json[QString("Plot")]);
    m_plot_isSet = !json[QString("Plot")].isNull() && m_plot_isValid;

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("Poster")]);
    m_poster_isSet = !json[QString("Poster")].isNull() && m_poster_isValid;

    m_production_isValid = ::OpenAPI::fromJsonValue(m_production, json[QString("Production")]);
    m_production_isSet = !json[QString("Production")].isNull() && m_production_isValid;

    m_rated_isValid = ::OpenAPI::fromJsonValue(m_rated, json[QString("Rated")]);
    m_rated_isSet = !json[QString("Rated")].isNull() && m_rated_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("Released")]);
    m_released_isSet = !json[QString("Released")].isNull() && m_released_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("Runtime")]);
    m_runtime_isSet = !json[QString("Runtime")].isNull() && m_runtime_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("Search")]);
    m_search_isSet = !json[QString("Search")].isNull() && m_search_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("Website")]);
    m_website_isSet = !json[QString("Website")].isNull() && m_website_isValid;

    m_writer_isValid = ::OpenAPI::fromJsonValue(m_writer, json[QString("Writer")]);
    m_writer_isSet = !json[QString("Writer")].isNull() && m_writer_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;

    m_imdb_id_isValid = ::OpenAPI::fromJsonValue(m_imdb_id, json[QString("imdbID")]);
    m_imdb_id_isSet = !json[QString("imdbID")].isNull() && m_imdb_id_isValid;

    m_imdb_rating_isValid = ::OpenAPI::fromJsonValue(m_imdb_rating, json[QString("imdbRating")]);
    m_imdb_rating_isSet = !json[QString("imdbRating")].isNull() && m_imdb_rating_isValid;

    m_imdb_votes_isValid = ::OpenAPI::fromJsonValue(m_imdb_votes, json[QString("imdbVotes")]);
    m_imdb_votes_isSet = !json[QString("imdbVotes")].isNull() && m_imdb_votes_isValid;

    m_tomato_consensus_isValid = ::OpenAPI::fromJsonValue(m_tomato_consensus, json[QString("tomatoConsensus")]);
    m_tomato_consensus_isSet = !json[QString("tomatoConsensus")].isNull() && m_tomato_consensus_isValid;

    m_tomato_fresh_isValid = ::OpenAPI::fromJsonValue(m_tomato_fresh, json[QString("tomatoFresh")]);
    m_tomato_fresh_isSet = !json[QString("tomatoFresh")].isNull() && m_tomato_fresh_isValid;

    m_tomato_image_isValid = ::OpenAPI::fromJsonValue(m_tomato_image, json[QString("tomatoImage")]);
    m_tomato_image_isSet = !json[QString("tomatoImage")].isNull() && m_tomato_image_isValid;

    m_tomato_meter_isValid = ::OpenAPI::fromJsonValue(m_tomato_meter, json[QString("tomatoMeter")]);
    m_tomato_meter_isSet = !json[QString("tomatoMeter")].isNull() && m_tomato_meter_isValid;

    m_tomato_rating_isValid = ::OpenAPI::fromJsonValue(m_tomato_rating, json[QString("tomatoRating")]);
    m_tomato_rating_isSet = !json[QString("tomatoRating")].isNull() && m_tomato_rating_isValid;

    m_tomato_reviews_isValid = ::OpenAPI::fromJsonValue(m_tomato_reviews, json[QString("tomatoReviews")]);
    m_tomato_reviews_isSet = !json[QString("tomatoReviews")].isNull() && m_tomato_reviews_isValid;

    m_tomato_rotten_isValid = ::OpenAPI::fromJsonValue(m_tomato_rotten, json[QString("tomatoRotten")]);
    m_tomato_rotten_isSet = !json[QString("tomatoRotten")].isNull() && m_tomato_rotten_isValid;

    m_tomato_url_isValid = ::OpenAPI::fromJsonValue(m_tomato_url, json[QString("tomatoURL")]);
    m_tomato_url_isSet = !json[QString("tomatoURL")].isNull() && m_tomato_url_isValid;

    m_tomato_user_meter_isValid = ::OpenAPI::fromJsonValue(m_tomato_user_meter, json[QString("tomatoUserMeter")]);
    m_tomato_user_meter_isSet = !json[QString("tomatoUserMeter")].isNull() && m_tomato_user_meter_isValid;

    m_tomato_user_rating_isValid = ::OpenAPI::fromJsonValue(m_tomato_user_rating, json[QString("tomatoUserRating")]);
    m_tomato_user_rating_isSet = !json[QString("tomatoUserRating")].isNull() && m_tomato_user_rating_isValid;

    m_tomato_user_reviews_isValid = ::OpenAPI::fromJsonValue(m_tomato_user_reviews, json[QString("tomatoUserReviews")]);
    m_tomato_user_reviews_isSet = !json[QString("tomatoUserReviews")].isNull() && m_tomato_user_reviews_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;

    m_total_seasons_isValid = ::OpenAPI::fromJsonValue(m_total_seasons, json[QString("totalSeasons")]);
    m_total_seasons_isSet = !json[QString("totalSeasons")].isNull() && m_total_seasons_isValid;
}

QString OAICombinedResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombinedResult::asJsonObject() const {
    QJsonObject obj;
    if (m_actors_isSet) {
        obj.insert(QString("Actors"), ::OpenAPI::toJsonValue(m_actors));
    }
    if (m_awards_isSet) {
        obj.insert(QString("Awards"), ::OpenAPI::toJsonValue(m_awards));
    }
    if (m_box_office_isSet) {
        obj.insert(QString("BoxOffice"), ::OpenAPI::toJsonValue(m_box_office));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_dvd_isSet) {
        obj.insert(QString("DVD"), ::OpenAPI::toJsonValue(m_dvd));
    }
    if (m_director_isSet) {
        obj.insert(QString("Director"), ::OpenAPI::toJsonValue(m_director));
    }
    if (m_genre_isSet) {
        obj.insert(QString("Genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_metascore_isSet) {
        obj.insert(QString("Metascore"), ::OpenAPI::toJsonValue(m_metascore));
    }
    if (m_plot_isSet) {
        obj.insert(QString("Plot"), ::OpenAPI::toJsonValue(m_plot));
    }
    if (m_poster_isSet) {
        obj.insert(QString("Poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_production_isSet) {
        obj.insert(QString("Production"), ::OpenAPI::toJsonValue(m_production));
    }
    if (m_rated_isSet) {
        obj.insert(QString("Rated"), ::OpenAPI::toJsonValue(m_rated));
    }
    if (m_released_isSet) {
        obj.insert(QString("Released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_response_isSet) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("Runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_search.size() > 0) {
        obj.insert(QString("Search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_website_isSet) {
        obj.insert(QString("Website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_writer_isSet) {
        obj.insert(QString("Writer"), ::OpenAPI::toJsonValue(m_writer));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    if (m_imdb_id_isSet) {
        obj.insert(QString("imdbID"), ::OpenAPI::toJsonValue(m_imdb_id));
    }
    if (m_imdb_rating_isSet) {
        obj.insert(QString("imdbRating"), ::OpenAPI::toJsonValue(m_imdb_rating));
    }
    if (m_imdb_votes_isSet) {
        obj.insert(QString("imdbVotes"), ::OpenAPI::toJsonValue(m_imdb_votes));
    }
    if (m_tomato_consensus_isSet) {
        obj.insert(QString("tomatoConsensus"), ::OpenAPI::toJsonValue(m_tomato_consensus));
    }
    if (m_tomato_fresh_isSet) {
        obj.insert(QString("tomatoFresh"), ::OpenAPI::toJsonValue(m_tomato_fresh));
    }
    if (m_tomato_image_isSet) {
        obj.insert(QString("tomatoImage"), ::OpenAPI::toJsonValue(m_tomato_image));
    }
    if (m_tomato_meter_isSet) {
        obj.insert(QString("tomatoMeter"), ::OpenAPI::toJsonValue(m_tomato_meter));
    }
    if (m_tomato_rating_isSet) {
        obj.insert(QString("tomatoRating"), ::OpenAPI::toJsonValue(m_tomato_rating));
    }
    if (m_tomato_reviews_isSet) {
        obj.insert(QString("tomatoReviews"), ::OpenAPI::toJsonValue(m_tomato_reviews));
    }
    if (m_tomato_rotten_isSet) {
        obj.insert(QString("tomatoRotten"), ::OpenAPI::toJsonValue(m_tomato_rotten));
    }
    if (m_tomato_url_isSet) {
        obj.insert(QString("tomatoURL"), ::OpenAPI::toJsonValue(m_tomato_url));
    }
    if (m_tomato_user_meter_isSet) {
        obj.insert(QString("tomatoUserMeter"), ::OpenAPI::toJsonValue(m_tomato_user_meter));
    }
    if (m_tomato_user_rating_isSet) {
        obj.insert(QString("tomatoUserRating"), ::OpenAPI::toJsonValue(m_tomato_user_rating));
    }
    if (m_tomato_user_reviews_isSet) {
        obj.insert(QString("tomatoUserReviews"), ::OpenAPI::toJsonValue(m_tomato_user_reviews));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    if (m_total_seasons_isSet) {
        obj.insert(QString("totalSeasons"), ::OpenAPI::toJsonValue(m_total_seasons));
    }
    return obj;
}

QString OAICombinedResult::getActors() const {
    return m_actors;
}
void OAICombinedResult::setActors(const QString &actors) {
    m_actors = actors;
    m_actors_isSet = true;
}

bool OAICombinedResult::is_actors_Set() const{
    return m_actors_isSet;
}

bool OAICombinedResult::is_actors_Valid() const{
    return m_actors_isValid;
}

QString OAICombinedResult::getAwards() const {
    return m_awards;
}
void OAICombinedResult::setAwards(const QString &awards) {
    m_awards = awards;
    m_awards_isSet = true;
}

bool OAICombinedResult::is_awards_Set() const{
    return m_awards_isSet;
}

bool OAICombinedResult::is_awards_Valid() const{
    return m_awards_isValid;
}

QString OAICombinedResult::getBoxOffice() const {
    return m_box_office;
}
void OAICombinedResult::setBoxOffice(const QString &box_office) {
    m_box_office = box_office;
    m_box_office_isSet = true;
}

bool OAICombinedResult::is_box_office_Set() const{
    return m_box_office_isSet;
}

bool OAICombinedResult::is_box_office_Valid() const{
    return m_box_office_isValid;
}

QString OAICombinedResult::getCountry() const {
    return m_country;
}
void OAICombinedResult::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICombinedResult::is_country_Set() const{
    return m_country_isSet;
}

bool OAICombinedResult::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICombinedResult::getDvd() const {
    return m_dvd;
}
void OAICombinedResult::setDvd(const QString &dvd) {
    m_dvd = dvd;
    m_dvd_isSet = true;
}

bool OAICombinedResult::is_dvd_Set() const{
    return m_dvd_isSet;
}

bool OAICombinedResult::is_dvd_Valid() const{
    return m_dvd_isValid;
}

QString OAICombinedResult::getDirector() const {
    return m_director;
}
void OAICombinedResult::setDirector(const QString &director) {
    m_director = director;
    m_director_isSet = true;
}

bool OAICombinedResult::is_director_Set() const{
    return m_director_isSet;
}

bool OAICombinedResult::is_director_Valid() const{
    return m_director_isValid;
}

QString OAICombinedResult::getGenre() const {
    return m_genre;
}
void OAICombinedResult::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAICombinedResult::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAICombinedResult::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAICombinedResult::getLanguage() const {
    return m_language;
}
void OAICombinedResult::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICombinedResult::is_language_Set() const{
    return m_language_isSet;
}

bool OAICombinedResult::is_language_Valid() const{
    return m_language_isValid;
}

QString OAICombinedResult::getMetascore() const {
    return m_metascore;
}
void OAICombinedResult::setMetascore(const QString &metascore) {
    m_metascore = metascore;
    m_metascore_isSet = true;
}

bool OAICombinedResult::is_metascore_Set() const{
    return m_metascore_isSet;
}

bool OAICombinedResult::is_metascore_Valid() const{
    return m_metascore_isValid;
}

QString OAICombinedResult::getPlot() const {
    return m_plot;
}
void OAICombinedResult::setPlot(const QString &plot) {
    m_plot = plot;
    m_plot_isSet = true;
}

bool OAICombinedResult::is_plot_Set() const{
    return m_plot_isSet;
}

bool OAICombinedResult::is_plot_Valid() const{
    return m_plot_isValid;
}

QString OAICombinedResult::getPoster() const {
    return m_poster;
}
void OAICombinedResult::setPoster(const QString &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAICombinedResult::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAICombinedResult::is_poster_Valid() const{
    return m_poster_isValid;
}

QString OAICombinedResult::getProduction() const {
    return m_production;
}
void OAICombinedResult::setProduction(const QString &production) {
    m_production = production;
    m_production_isSet = true;
}

bool OAICombinedResult::is_production_Set() const{
    return m_production_isSet;
}

bool OAICombinedResult::is_production_Valid() const{
    return m_production_isValid;
}

QString OAICombinedResult::getRated() const {
    return m_rated;
}
void OAICombinedResult::setRated(const QString &rated) {
    m_rated = rated;
    m_rated_isSet = true;
}

bool OAICombinedResult::is_rated_Set() const{
    return m_rated_isSet;
}

bool OAICombinedResult::is_rated_Valid() const{
    return m_rated_isValid;
}

QString OAICombinedResult::getReleased() const {
    return m_released;
}
void OAICombinedResult::setReleased(const QString &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAICombinedResult::is_released_Set() const{
    return m_released_isSet;
}

bool OAICombinedResult::is_released_Valid() const{
    return m_released_isValid;
}

QString OAICombinedResult::getResponse() const {
    return m_response;
}
void OAICombinedResult::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAICombinedResult::is_response_Set() const{
    return m_response_isSet;
}

bool OAICombinedResult::is_response_Valid() const{
    return m_response_isValid;
}

QString OAICombinedResult::getRuntime() const {
    return m_runtime;
}
void OAICombinedResult::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAICombinedResult::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAICombinedResult::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QList<OAICombinedResult_Search_inner> OAICombinedResult::getSearch() const {
    return m_search;
}
void OAICombinedResult::setSearch(const QList<OAICombinedResult_Search_inner> &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAICombinedResult::is_search_Set() const{
    return m_search_isSet;
}

bool OAICombinedResult::is_search_Valid() const{
    return m_search_isValid;
}

QString OAICombinedResult::getTitle() const {
    return m_title;
}
void OAICombinedResult::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICombinedResult::is_title_Set() const{
    return m_title_isSet;
}

bool OAICombinedResult::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICombinedResult::getType() const {
    return m_type;
}
void OAICombinedResult::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICombinedResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAICombinedResult::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICombinedResult::getWebsite() const {
    return m_website;
}
void OAICombinedResult::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICombinedResult::is_website_Set() const{
    return m_website_isSet;
}

bool OAICombinedResult::is_website_Valid() const{
    return m_website_isValid;
}

QString OAICombinedResult::getWriter() const {
    return m_writer;
}
void OAICombinedResult::setWriter(const QString &writer) {
    m_writer = writer;
    m_writer_isSet = true;
}

bool OAICombinedResult::is_writer_Set() const{
    return m_writer_isSet;
}

bool OAICombinedResult::is_writer_Valid() const{
    return m_writer_isValid;
}

QString OAICombinedResult::getYear() const {
    return m_year;
}
void OAICombinedResult::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAICombinedResult::is_year_Set() const{
    return m_year_isSet;
}

bool OAICombinedResult::is_year_Valid() const{
    return m_year_isValid;
}

QString OAICombinedResult::getImdbId() const {
    return m_imdb_id;
}
void OAICombinedResult::setImdbId(const QString &imdb_id) {
    m_imdb_id = imdb_id;
    m_imdb_id_isSet = true;
}

bool OAICombinedResult::is_imdb_id_Set() const{
    return m_imdb_id_isSet;
}

bool OAICombinedResult::is_imdb_id_Valid() const{
    return m_imdb_id_isValid;
}

QString OAICombinedResult::getImdbRating() const {
    return m_imdb_rating;
}
void OAICombinedResult::setImdbRating(const QString &imdb_rating) {
    m_imdb_rating = imdb_rating;
    m_imdb_rating_isSet = true;
}

bool OAICombinedResult::is_imdb_rating_Set() const{
    return m_imdb_rating_isSet;
}

bool OAICombinedResult::is_imdb_rating_Valid() const{
    return m_imdb_rating_isValid;
}

QString OAICombinedResult::getImdbVotes() const {
    return m_imdb_votes;
}
void OAICombinedResult::setImdbVotes(const QString &imdb_votes) {
    m_imdb_votes = imdb_votes;
    m_imdb_votes_isSet = true;
}

bool OAICombinedResult::is_imdb_votes_Set() const{
    return m_imdb_votes_isSet;
}

bool OAICombinedResult::is_imdb_votes_Valid() const{
    return m_imdb_votes_isValid;
}

QString OAICombinedResult::getTomatoConsensus() const {
    return m_tomato_consensus;
}
void OAICombinedResult::setTomatoConsensus(const QString &tomato_consensus) {
    m_tomato_consensus = tomato_consensus;
    m_tomato_consensus_isSet = true;
}

bool OAICombinedResult::is_tomato_consensus_Set() const{
    return m_tomato_consensus_isSet;
}

bool OAICombinedResult::is_tomato_consensus_Valid() const{
    return m_tomato_consensus_isValid;
}

QString OAICombinedResult::getTomatoFresh() const {
    return m_tomato_fresh;
}
void OAICombinedResult::setTomatoFresh(const QString &tomato_fresh) {
    m_tomato_fresh = tomato_fresh;
    m_tomato_fresh_isSet = true;
}

bool OAICombinedResult::is_tomato_fresh_Set() const{
    return m_tomato_fresh_isSet;
}

bool OAICombinedResult::is_tomato_fresh_Valid() const{
    return m_tomato_fresh_isValid;
}

QString OAICombinedResult::getTomatoImage() const {
    return m_tomato_image;
}
void OAICombinedResult::setTomatoImage(const QString &tomato_image) {
    m_tomato_image = tomato_image;
    m_tomato_image_isSet = true;
}

bool OAICombinedResult::is_tomato_image_Set() const{
    return m_tomato_image_isSet;
}

bool OAICombinedResult::is_tomato_image_Valid() const{
    return m_tomato_image_isValid;
}

QString OAICombinedResult::getTomatoMeter() const {
    return m_tomato_meter;
}
void OAICombinedResult::setTomatoMeter(const QString &tomato_meter) {
    m_tomato_meter = tomato_meter;
    m_tomato_meter_isSet = true;
}

bool OAICombinedResult::is_tomato_meter_Set() const{
    return m_tomato_meter_isSet;
}

bool OAICombinedResult::is_tomato_meter_Valid() const{
    return m_tomato_meter_isValid;
}

QString OAICombinedResult::getTomatoRating() const {
    return m_tomato_rating;
}
void OAICombinedResult::setTomatoRating(const QString &tomato_rating) {
    m_tomato_rating = tomato_rating;
    m_tomato_rating_isSet = true;
}

bool OAICombinedResult::is_tomato_rating_Set() const{
    return m_tomato_rating_isSet;
}

bool OAICombinedResult::is_tomato_rating_Valid() const{
    return m_tomato_rating_isValid;
}

QString OAICombinedResult::getTomatoReviews() const {
    return m_tomato_reviews;
}
void OAICombinedResult::setTomatoReviews(const QString &tomato_reviews) {
    m_tomato_reviews = tomato_reviews;
    m_tomato_reviews_isSet = true;
}

bool OAICombinedResult::is_tomato_reviews_Set() const{
    return m_tomato_reviews_isSet;
}

bool OAICombinedResult::is_tomato_reviews_Valid() const{
    return m_tomato_reviews_isValid;
}

QString OAICombinedResult::getTomatoRotten() const {
    return m_tomato_rotten;
}
void OAICombinedResult::setTomatoRotten(const QString &tomato_rotten) {
    m_tomato_rotten = tomato_rotten;
    m_tomato_rotten_isSet = true;
}

bool OAICombinedResult::is_tomato_rotten_Set() const{
    return m_tomato_rotten_isSet;
}

bool OAICombinedResult::is_tomato_rotten_Valid() const{
    return m_tomato_rotten_isValid;
}

QString OAICombinedResult::getTomatoUrl() const {
    return m_tomato_url;
}
void OAICombinedResult::setTomatoUrl(const QString &tomato_url) {
    m_tomato_url = tomato_url;
    m_tomato_url_isSet = true;
}

bool OAICombinedResult::is_tomato_url_Set() const{
    return m_tomato_url_isSet;
}

bool OAICombinedResult::is_tomato_url_Valid() const{
    return m_tomato_url_isValid;
}

QString OAICombinedResult::getTomatoUserMeter() const {
    return m_tomato_user_meter;
}
void OAICombinedResult::setTomatoUserMeter(const QString &tomato_user_meter) {
    m_tomato_user_meter = tomato_user_meter;
    m_tomato_user_meter_isSet = true;
}

bool OAICombinedResult::is_tomato_user_meter_Set() const{
    return m_tomato_user_meter_isSet;
}

bool OAICombinedResult::is_tomato_user_meter_Valid() const{
    return m_tomato_user_meter_isValid;
}

QString OAICombinedResult::getTomatoUserRating() const {
    return m_tomato_user_rating;
}
void OAICombinedResult::setTomatoUserRating(const QString &tomato_user_rating) {
    m_tomato_user_rating = tomato_user_rating;
    m_tomato_user_rating_isSet = true;
}

bool OAICombinedResult::is_tomato_user_rating_Set() const{
    return m_tomato_user_rating_isSet;
}

bool OAICombinedResult::is_tomato_user_rating_Valid() const{
    return m_tomato_user_rating_isValid;
}

QString OAICombinedResult::getTomatoUserReviews() const {
    return m_tomato_user_reviews;
}
void OAICombinedResult::setTomatoUserReviews(const QString &tomato_user_reviews) {
    m_tomato_user_reviews = tomato_user_reviews;
    m_tomato_user_reviews_isSet = true;
}

bool OAICombinedResult::is_tomato_user_reviews_Set() const{
    return m_tomato_user_reviews_isSet;
}

bool OAICombinedResult::is_tomato_user_reviews_Valid() const{
    return m_tomato_user_reviews_isValid;
}

QString OAICombinedResult::getTotalResults() const {
    return m_total_results;
}
void OAICombinedResult::setTotalResults(const QString &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAICombinedResult::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAICombinedResult::is_total_results_Valid() const{
    return m_total_results_isValid;
}

QString OAICombinedResult::getTotalSeasons() const {
    return m_total_seasons;
}
void OAICombinedResult::setTotalSeasons(const QString &total_seasons) {
    m_total_seasons = total_seasons;
    m_total_seasons_isSet = true;
}

bool OAICombinedResult::is_total_seasons_Set() const{
    return m_total_seasons_isSet;
}

bool OAICombinedResult::is_total_seasons_Valid() const{
    return m_total_seasons_isValid;
}

bool OAICombinedResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_director_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metascore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_writer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_votes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_consensus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_fresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_reviews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_rotten_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_user_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_user_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tomato_user_reviews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_seasons_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombinedResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_response_isValid && true;
}

} // namespace OpenAPI
