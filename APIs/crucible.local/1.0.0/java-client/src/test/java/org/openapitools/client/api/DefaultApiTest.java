/*
 * Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChangesetToReviewTest() throws ApiException {
        String id = null;
        api.addChangesetToReview(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFileTest() throws ApiException {
        String id = null;
        api.addFile(id);
        // TODO: test validations
    }

    /**
     * Add the changes between two files in a fisheye repository to the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFisheyeReviewItemTest() throws ApiException {
        String id = null;
        api.addFisheyeReviewItem(id);
        // TODO: test validations
    }

    /**
     * Add a general comment to the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGeneralCommentTest() throws ApiException {
        String id = null;
        api.addGeneralComment(id);
        // TODO: test validations
    }

    /**
     * Old, non-restful name. Kept for backwards compatibility. Exactly the same as POSTing to /{id}/patch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPatchReview0Test() throws ApiException {
        String id = null;
        api.addPatchReview0(id);
        // TODO: test validations
    }

    /**
     * Add the revisions in a patch to an existing review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPatchToReviewTest() throws ApiException {
        String id = null;
        api.addPatchToReview(id);
        // TODO: test validations
    }

    /**
     * Adds a reply to the given comment. This call includes the  repsonse header that  contains the URL of the newly created entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReplyTest() throws ApiException {
        String id = null;
        String cId = null;
        api.addReply(id, cId);
        // TODO: test validations
    }

    /**
     * Adds the given review item to the review. This will always create a new review item, even if there is an existing  one with the same data in the review (in which case the existing item will be replaced).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReviewItemTest() throws ApiException {
        String id = null;
        api.addReviewItem(id);
        // TODO: test validations
    }

    /**
     * Adds the given list of revisions to the supplied review item, merging if required. For example, if the review  item for  contains revisions 3 to 6, and if:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReviewItemRevisionsTest() throws ApiException {
        String riId = null;
        String id = null;
        String rev = null;
        api.addReviewItemRevisions(riId, id, rev);
        // TODO: test validations
    }

    /**
     * Adds a review item for each of the supplied crucibleRevisionData elements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReviewItemsTest() throws ApiException {
        String id = null;
        api.addReviewItems(id);
        // TODO: test validations
    }

    /**
     * Adds the given list of reviewers to the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReviewersTest() throws ApiException {
        String id = null;
        api.addReviewers(id);
        // TODO: test validations
    }

    /**
     * This call includes the  repsonse header that contains the URL of the newly created entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVersionedCommentTest() throws ApiException {
        String riId = null;
        String id = null;
        api.addVersionedComment(riId, id);
        // TODO: test validations
    }

    /**
     * Lists the contents of the specified directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void browseTest() throws ApiException {
        String path = null;
        String repository = null;
        api.browse(path, repository);
        // TODO: test validations
    }

    /**
     * Represents a particular changeset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeTest() throws ApiException {
        String repository = null;
        String revision = null;
        api.change(repository, revision);
        // TODO: test validations
    }

    /**
     * Change the state of a review by performing an action on it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeStateTest() throws ApiException {
        String id = null;
        String action = null;
        Boolean ignoreWarnings = null;
        api.changeState(id, action, ignoreWarnings);
        // TODO: test validations
    }

    /**
     * Represents a sorted list of changesets, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changesTest() throws ApiException {
        String path = null;
        String repository = null;
        String oldestCsid = null;
        Boolean includeOldest = null;
        String newestCsid = null;
        Boolean includeNewest = null;
        Integer max = null;
        api.changes(path, repository, oldestCsid, includeOldest, newestCsid, includeNewest, max);
        // TODO: test validations
    }

    /**
     * Closes the given review with the summary given.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeReviewWithCommentTest() throws ApiException {
        String id = null;
        api.closeReviewWithComment(id);
        // TODO: test validations
    }

    /**
     * Completes the review for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeReviewTest() throws ApiException {
        String id = null;
        Boolean ignoreWarnings = null;
        api.completeReview(id, ignoreWarnings);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReviewTest() throws ApiException {
        api.createReview();
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified review.  The review must have been abandoned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReviewTest() throws ApiException {
        String id = null;
        api.deleteReview(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailsTest() throws ApiException {
        String path = null;
        String repository = null;
        String revision = null;
        api.details(path, repository, revision);
        // TODO: test validations
    }

    /**
     * Return all the comments visible to the requesting user for the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCommentsTest() throws ApiException {
        String id = null;
        Boolean render = null;
        api.getAllComments(id, render);
        // TODO: test validations
    }

    /**
     * Retrieves all reviews that are in one of the the specified states. For each review all details are included (review items + comments). The  wiki rendered comments will be available via the &lt;messageAsHtml&gt; element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllDetailedReviewsTest() throws ApiException {
        String state = null;
        api.getAllDetailedReviews(state);
        // TODO: test validations
    }

    /**
     * Get the list of projects that the authenticated user is entitled to access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProjectsTest() throws ApiException {
        Boolean excludeAllowedReviewers = null;
        api.getAllProjects(excludeAllowedReviewers);
        // TODO: test validations
    }

    /**
     * Returns a list of all repositories. This includes plugin provided repositories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRepositoriesTest() throws ApiException {
        String name = null;
        Boolean enabled = null;
        Boolean available = null;
        String type = null;
        Integer limit = null;
        api.getAllRepositories(name, enabled, available, type, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllReviewsTest() throws ApiException {
        String state = null;
        api.getAllReviews(state);
        // TODO: test validations
    }

    /**
     * Get a list of the actions which the current user is allowed to perform  on the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableActionsTest() throws ApiException {
        String id = null;
        api.getAvailableActions(id);
        // TODO: test validations
    }

    /**
     * Get a list of the actions which the current user can perform on this  review, given its current state and the user&#39;s permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableTransitionsTest() throws ApiException {
        String id = null;
        api.getAvailableTransitions(id);
        // TODO: test validations
    }

    /**
     * Gets the given comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
        String id = null;
        String cId = null;
        Boolean render = null;
        api.getComment(id, cId, render);
        // TODO: test validations
    }

    /**
     * Gets a list of completed reviewers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompletedReviewersTest() throws ApiException {
        String id = null;
        api.getCompletedReviewers(id);
        // TODO: test validations
    }

    /**
     * Returns the raw content of the specified file revision as a binary  stream. No attempt is made to identify the content type and no mime  type is provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentsTest() throws ApiException {
        String path = null;
        String repository = null;
        String revision = null;
        api.getContents(path, repository, revision);
        // TODO: test validations
    }

    /**
     * To ignore a property, omit it from the query string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFilterReviewsTest() throws ApiException {
        String title = null;
        String author = null;
        String moderator = null;
        String creator = null;
        String states = null;
        String reviewer = null;
        Boolean orRoles = null;
        Boolean complete = null;
        Boolean allReviewersComplete = null;
        String project = null;
        Long fromDate = null;
        Long toDate = null;
        api.getCustomFilterReviews(title, author, moderator, creator, states, reviewer, orRoles, complete, allReviewersComplete, project, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * To ignore a property, omit it from the query string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailedCustomFilterReviewsTest() throws ApiException {
        String title = null;
        String author = null;
        String moderator = null;
        String creator = null;
        String states = null;
        String reviewer = null;
        Boolean orRoles = null;
        Boolean complete = null;
        Boolean allReviewersComplete = null;
        String project = null;
        Long fromDate = null;
        Long toDate = null;
        api.getDetailedCustomFilterReviews(title, author, moderator, creator, states, reviewer, orRoles, complete, allReviewersComplete, project, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * Gets a list of all the reviews that match the specified filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailedFilteredReviewsForUserTest() throws ApiException {
        String filter = null;
        api.getDetailedFilteredReviewsForUser(filter);
        // TODO: test validations
    }

    /**
     * Returns the specified review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailedReviewTest() throws ApiException {
        String id = null;
        api.getDetailedReview(id);
        // TODO: test validations
    }

    /**
     * Get all the reviews which match the given filter, for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilteredReviewsForUserTest() throws ApiException {
        String filter = null;
        api.getFilteredReviewsForUser(filter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneralCommentsTest() throws ApiException {
        String id = null;
        Boolean render = null;
        api.getGeneralComments(id, render);
        // TODO: test validations
    }

    /**
     * Returns the user details of the user mapped to a committer in a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappedUserTest() throws ApiException {
        String repository = null;
        String username = null;
        api.getMappedUser(repository, username);
        // TODO: test validations
    }

    /**
     * Get comment metrics metadata for the specified metrics version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricsTest() throws ApiException {
        String version = null;
        api.getMetrics(version);
        // TODO: test validations
    }

    /**
     * Returns a project description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String key = null;
        Boolean excludeAllowedReviewers = null;
        api.getProject(key, excludeAllowedReviewers);
        // TODO: test validations
    }

    /**
     * Gets the replies to the given comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepliesTest() throws ApiException {
        String id = null;
        String cId = null;
        Boolean render = null;
        api.getReplies(id, cId, render);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryDetailsTest() throws ApiException {
        String repository = null;
        api.getRepositoryDetails(repository);
        // TODO: test validations
    }

    /**
     * Get a single review by its permId (e.g. \&quot;CR-45\&quot;).  If the review does not exist, a 404 is returned.    The moderator element may not exist if the review does not have a Moderator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewTest() throws ApiException {
        String id = null;
        api.getReview(id);
        // TODO: test validations
    }

    /**
     * Returns detailed information for a specific review item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewItemTest() throws ApiException {
        String riId = null;
        String id = null;
        api.getReviewItem(riId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewItemsCommentsTest() throws ApiException {
        String riId = null;
        String id = null;
        Boolean render = null;
        api.getReviewItemsComments(riId, id, render);
        // TODO: test validations
    }

    /**
     * Returns a list of all the items in a review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewItemsForReviewTest() throws ApiException {
        String id = null;
        api.getReviewItemsForReview(id);
        // TODO: test validations
    }

    /**
     * Get a list of patches and their details for the given review
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewPatchesTest() throws ApiException {
        String id = null;
        api.getReviewPatches(id);
        // TODO: test validations
    }

    /**
     * Get a list of reviewers in the review given by the permaid id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewersTest() throws ApiException {
        String id = null;
        api.getReviewers(id);
        // TODO: test validations
    }

    /**
     * Return a list of Reviews which include a particular file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsDetailsForPathTest() throws ApiException {
        String repository = null;
        String path = null;
        api.getReviewsDetailsForPath(repository, path);
        // TODO: test validations
    }

    /**
     * Get a list of all reviews that have been linked to the specified JIRA issue key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsForIssueKeyTest() throws ApiException {
        String jiraKey = null;
        String maxReturn = null;
        api.getReviewsForIssueKey(jiraKey, maxReturn);
        // TODO: test validations
    }

    /**
     * Return a list of Reviews which include a particular file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsForPathTest() throws ApiException {
        String repository = null;
        String path = null;
        api.getReviewsForPath(repository, path);
        // TODO: test validations
    }

    /**
     * Search for reviews where the name, description, state or permaId contain the specified term.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsForTermTest() throws ApiException {
        String term = null;
        String maxReturn = null;
        api.getReviewsForTerm(term, maxReturn);
        // TODO: test validations
    }

    /**
     * For backward compatibility we provide this method, but repositories should be referred to just by their key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSvnRepositoryDetailsTest() throws ApiException {
        String repository = null;
        api.getSvnRepositoryDetails(repository);
        // TODO: test validations
    }

    /**
     * Gets a list of reviewers that have not completed the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUncompletedReviewersTest() throws ApiException {
        String id = null;
        api.getUncompletedReviewers(id);
        // TODO: test validations
    }

    /**
     * Returns the user&#39;s profile details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        String username = null;
        api.getUserProfile(username);
        // TODO: test validations
    }

    /**
     * Get a list of all the users. You can also ask for a set of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String username = null;
        api.getUsers(username);
        // TODO: test validations
    }

    /**
     * Returns Crucible version information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVersionInfoTest() throws ApiException {
        api.getVersionInfo();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVersionedCommentsTest() throws ApiException {
        String id = null;
        Boolean render = null;
        api.getVersionedComments(id, render);
        // TODO: test validations
    }

    /**
     * Represents the history of a versioned entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyTest() throws ApiException {
        String path = null;
        String repository = null;
        String revision = null;
        api.history(path, repository, revision);
        // TODO: test validations
    }

    /**
     * Get the user authentication token.    This is a legacy version of the login request. Using GET is deprecated as your password is likely to appear in logs which record request URLs.  Use the POST version instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        String userName = null;
        String password = null;
        api.login(userName, password);
        // TODO: test validations
    }

    /**
     * Get the user authentication token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginPostTest() throws ApiException {
        api.loginPost();
        // TODO: test validations
    }

    /**
     * For the effective user, mark all comments in a review as read (except  those marked as leave unread).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAllCommentsAsReadTest() throws ApiException {
        String id = null;
        api.markAllCommentsAsRead(id);
        // TODO: test validations
    }

    /**
     * Marks the comment as leave unread to the current user - it will not automatically be marked as read by crucible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markCommentAsLeaveUnreadTest() throws ApiException {
        String id = null;
        String cId = null;
        api.markCommentAsLeaveUnread(id, cId);
        // TODO: test validations
    }

    /**
     * Mark the given comment as read for the user used to make this POST.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markCommentAsReadTest() throws ApiException {
        String id = null;
        String cId = null;
        api.markCommentAsRead(id, cId);
        // TODO: test validations
    }

    /**
     * This method should no longer be used, as it uses a POST for a read-only  retrieval operation and is provided for backward compatibility only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCustomFilterReviewsTest() throws ApiException {
        api.postCustomFilterReviews();
        // TODO: test validations
    }

    /**
     * This method should no longer be used, as it uses a POST for a read-only  retrieval operation and is provided for backward compatibility only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDetailedCustomFilterReviewsTest() throws ApiException {
        api.postDetailedCustomFilterReviews();
        // TODO: test validations
    }

    /**
     * Publishes all the draft comments of the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishAllCommentsTest() throws ApiException {
        String id = null;
        api.publishAllComments(id);
        // TODO: test validations
    }

    /**
     * publishes the given draft comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishCommentTest() throws ApiException {
        String id = null;
        String cId = null;
        api.publishComment(id, cId);
        // TODO: test validations
    }

    /**
     * Immediately send a reminder to incomplete reviewers about the given review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void remindIncompleteReviewersTest() throws ApiException {
        String id = null;
        api.remindIncompleteReviewers(id);
        // TODO: test validations
    }

    /**
     * Deletes the given comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCommentTest() throws ApiException {
        String id = null;
        String cId = null;
        api.removeComment(id, cId);
        // TODO: test validations
    }

    /**
     * Removes the patch with the given id from the review. All of the revisions provided by the patch will be removed as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePatchTest() throws ApiException {
        Integer patchId = null;
        String id = null;
        api.removePatch(patchId, id);
        // TODO: test validations
    }

    /**
     * Deletes the reply.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeReplyTest() throws ApiException {
        String id = null;
        String rId = null;
        String cId = null;
        api.removeReply(id, rId, cId);
        // TODO: test validations
    }

    /**
     * Removes an item from a review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeReviewItemTest() throws ApiException {
        String riId = null;
        String id = null;
        api.removeReviewItem(riId, id);
        // TODO: test validations
    }

    /**
     * Removes the revisions given from the review item in the review specified by the id. If the review item has no  more revisions left, it is automatically deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeReviewItemRevisionsTest() throws ApiException {
        String riId = null;
        String id = null;
        String rev = null;
        api.removeReviewItemRevisions(riId, id, rev);
        // TODO: test validations
    }

    /**
     * Removes the reviewer from the review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeReviewerTest() throws ApiException {
        String id = null;
        String username = null;
        api.removeReviewer(id, username);
        // TODO: test validations
    }

    /**
     * Sets the review item specified by itemId with the given reviewItem. The old review item is discarded. Can only  perform this operation if the old review item specified by itemId can be deleted. The old review item&#39;s permId is  not changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setReviewItemTest() throws ApiException {
        String riId = null;
        String id = null;
        api.setReviewItem(riId, id);
        // TODO: test validations
    }

    /**
     * Uncompletes the review for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uncompleteReviewTest() throws ApiException {
        String id = null;
        Boolean ignoreWarnings = null;
        api.uncompleteReview(id, ignoreWarnings);
        // TODO: test validations
    }

    /**
     * Updates the comment given by the perma id to the new comment posted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCommentTest() throws ApiException {
        String id = null;
        String cId = null;
        api.updateComment(id, cId);
        // TODO: test validations
    }

    /**
     * Updates a reply with the given newComment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReplyTest() throws ApiException {
        String id = null;
        String rId = null;
        String cId = null;
        api.updateReply(id, rId, cId);
        // TODO: test validations
    }

}
