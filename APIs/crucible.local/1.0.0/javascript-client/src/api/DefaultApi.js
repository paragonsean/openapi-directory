/**
 * Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChangesetToReview operation.
     * @callback module:api/DefaultApi~addChangesetToReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the perm id of the review to add the changeset to
     * @param {module:api/DefaultApi~addChangesetToReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChangesetToReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addChangesetToReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/addChangeset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFile operation.
     * @callback module:api/DefaultApi~addFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the review perma id to add the file
     * @param {module:api/DefaultApi~addFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/addFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFisheyeReviewItem operation.
     * @callback module:api/DefaultApi~addFisheyeReviewItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the changes between two files in a fisheye repository to the review.
     * @param {String} id the id of the review (e.g. \"CR-362\").
     * @param {module:api/DefaultApi~addFisheyeReviewItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFisheyeReviewItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFisheyeReviewItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addGeneralComment operation.
     * @callback module:api/DefaultApi~addGeneralCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a general comment to the review.
     * @param {String} id the review perma-id
     * @param {module:api/DefaultApi~addGeneralCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addGeneralComment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addGeneralComment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPatchReview0 operation.
     * @callback module:api/DefaultApi~addPatchReview0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Old, non-restful name. Kept for backwards compatibility. Exactly the same as POSTing to /{id}/patch
     * @param {String} id 
     * @param {module:api/DefaultApi~addPatchReview0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addPatchReview0(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addPatchReview0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/addPatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPatchToReview operation.
     * @callback module:api/DefaultApi~addPatchToReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the revisions in a patch to an existing review.
     * @param {String} id the review id to get the patches for
     * @param {module:api/DefaultApi~addPatchToReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPatchToReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addPatchToReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/patch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addReply operation.
     * @callback module:api/DefaultApi~addReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a reply to the given comment. This call includes the  repsonse header that  contains the URL of the newly created entity.
     * @param {String} id the review perma-id (e.g. \"CR-45\").
     * @param {String} cId the comment to reply to
     * @param {module:api/DefaultApi~addReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addReply(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReply");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling addReply");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addReviewItem operation.
     * @callback module:api/DefaultApi~addReviewItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the given review item to the review. This will always create a new review item, even if there is an existing  one with the same data in the review (in which case the existing item will be replaced).
     * @param {String} id the id of the review (e.g. \"CR-362\").
     * @param {module:api/DefaultApi~addReviewItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addReviewItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReviewItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addReviewItemRevisions operation.
     * @callback module:api/DefaultApi~addReviewItemRevisionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the given list of revisions to the supplied review item, merging if required. For example, if the review  item for  contains revisions 3 to 6, and if:
     * @param {String} riId the id of the review item (e.g. \"CFR-5622\").
     * @param {String} id the id of the review (e.g. \"CR-345\").
     * @param {Object} opts Optional parameters
     * @param {String} [rev] a list of revisions to add to the review item, merging if required. If a revision already exists  in the given review item, then the given revision is ignored.
     * @param {module:api/DefaultApi~addReviewItemRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addReviewItemRevisions(riId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling addReviewItemRevisions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReviewItemRevisions");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addReviewItems operation.
     * @callback module:api/DefaultApi~addReviewItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a review item for each of the supplied crucibleRevisionData elements.
     * @param {String} id the id of the review (e.g. \"CR-362\").
     * @param {module:api/DefaultApi~addReviewItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addReviewItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReviewItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addReviewers operation.
     * @callback module:api/DefaultApi~addReviewersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the given list of reviewers to the review.
     * @param {String} id the id of the review to add to
     * @param {module:api/DefaultApi~addReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addReviewers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReviewers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVersionedComment operation.
     * @callback module:api/DefaultApi~addVersionedCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This call includes the  repsonse header that contains the URL of the newly created entity.
     * @param {String} riId the review item id.
     * @param {String} id the review perma id
     * @param {module:api/DefaultApi~addVersionedCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVersionedComment(riId, id, callback) {
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling addVersionedComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addVersionedComment");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the browse operation.
     * @callback module:api/DefaultApi~browseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the contents of the specified directory.
     * @param {String} path path to a directory. When path represents a file name, the result is unspecified.
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {module:api/DefaultApi~browseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    browse(path, repository, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling browse");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling browse");
      }

      let pathParams = {
        'path': path,
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/browse/{repository}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the change operation.
     * @callback module:api/DefaultApi~changeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a particular changeset.
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {String} revision the SCM revision string.
     * @param {module:api/DefaultApi~changeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    change(repository, revision, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling change");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling change");
      }

      let pathParams = {
        'repository': repository,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/change/{repository}/{revision}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeState operation.
     * @callback module:api/DefaultApi~changeStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of a review by performing an action on it.
     * @param {String} id the review perma-id (e.g. \"CR-45\").
     * @param {Object} opts Optional parameters
     * @param {String} [action] the string representation of the action to perform. Valid actions are:    Note:
     * @param {Boolean} [ignoreWarnings = true)] if  then condition failure warnings will be ignored
     * @param {module:api/DefaultApi~changeStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeState(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'action': opts['action'],
        'ignoreWarnings': opts['ignoreWarnings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/transition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changes operation.
     * @callback module:api/DefaultApi~changesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a sorted list of changesets, newest first.
     * @param {String} path only show change sets which contain at least one revision with a path under this path.  Changesets with some revisions outside this path still include all revisions.  i.e. Revisions outside the path are *not* excluded from the change set.
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {Object} opts Optional parameters
     * @param {String} [oldestCsid] only return change sets after this change set. If omitted there is no restriction.
     * @param {Boolean} [includeOldest] include the change set with id \"from\" in the change sets returned.
     * @param {String} [newestCsid] only return change sets before this change set. If omitted there is no restriction.
     * @param {Boolean} [includeNewest] include the change set with id \"to\" in the change sets returned.
     * @param {Number} [max] return only the newest change sets, to a maximum of maxChangesets.
     * @param {module:api/DefaultApi~changesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changes(path, repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling changes");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling changes");
      }

      let pathParams = {
        'path': path,
        'repository': repository
      };
      let queryParams = {
        'oldestCsid': opts['oldestCsid'],
        'includeOldest': opts['includeOldest'],
        'newestCsid': opts['newestCsid'],
        'includeNewest': opts['includeNewest'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/changes/{repository}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeReviewWithComment operation.
     * @callback module:api/DefaultApi~closeReviewWithCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Closes the given review with the summary given.
     * @param {String} id the review perma id to close. it should be in the open state.
     * @param {module:api/DefaultApi~closeReviewWithCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeReviewWithComment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeReviewWithComment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeReview operation.
     * @callback module:api/DefaultApi~completeReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes the review for the current user
     * @param {String} id the review perma id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [ignoreWarnings = true)] if {@code ignoreWarnings==true} then condition failure warnings will be ignored
     * @param {module:api/DefaultApi~completeReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeReview(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'ignoreWarnings': opts['ignoreWarnings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReview operation.
     * @callback module:api/DefaultApi~createReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~createReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createReview(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReview operation.
     * @callback module:api/DefaultApi~deleteReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified review.  The review must have been abandoned.
     * @param {String} id the permId of the review to delete (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~deleteReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the details operation.
     * @callback module:api/DefaultApi~detailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path the path of a file or versioned directory (note that  versioned directories are not supported by all SCM plugins).
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {String} revision the SCM revision string.
     * @param {module:api/DefaultApi~detailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    details(path, repository, revision, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling details");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling details");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling details");
      }

      let pathParams = {
        'path': path,
        'repository': repository,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/{repository}/{revision}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllComments operation.
     * @callback module:api/DefaultApi~getAllCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the comments visible to the requesting user for the review.
     * @param {String} id the review perma-id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] indicate whether to render the wiki text in the returned comments. If set to \"true\", the comments will contain a  <messageAsHtml> element containing the wiki rendered html.
     * @param {module:api/DefaultApi~getAllCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllComments(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllComments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllDetailedReviews operation.
     * @callback module:api/DefaultApi~getAllDetailedReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all reviews that are in one of the the specified states. For each review all details are included (review items + comments). The  wiki rendered comments will be available via the <messageAsHtml> element
     * @param {Object} opts Optional parameters
     * @param {String} [state] the review states to match.
     * @param {module:api/DefaultApi~getAllDetailedReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllDetailedReviews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjects operation.
     * @callback module:api/DefaultApi~getAllProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of projects that the authenticated user is entitled to access.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeAllowedReviewers = false)] if set to true, user data (e.g. allowedReviewers) which is expensive  to compute, will not be included in the response data. Defaults to false so allowedReviewers are included in the response.
     * @param {module:api/DefaultApi~getAllProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'excludeAllowedReviewers': opts['excludeAllowedReviewers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/projects-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRepositories operation.
     * @callback module:api/DefaultApi~getAllRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all repositories. This includes plugin provided repositories
     * @param {Object} opts Optional parameters
     * @param {String} [name] filter repositories by the repository key, only repositories of keys containing this value  would be returned if value was provided.  Case insensitive.
     * @param {Boolean} [enabled] filter repositories by enabled flag.  Only enabled/disabled repositories would be returned  accordingly if value was provided.
     * @param {Boolean} [available] filter repositories by its availability.  Only available/unavailable repositories would be returned  accordingly if value was provided.
     * @param {String} [type] filter repositories by type.  Allowed values: cvs, svn, p4, git, hg, plugin (for light SCM repositories).  Parameter can be specified more than once.
     * @param {Number} [limit = 10000)] maximum number of repositories to be returned.
     * @param {module:api/DefaultApi~getAllRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllRepositories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'enabled': opts['enabled'],
        'available': opts['available'],
        'type': opts['type'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllReviews operation.
     * @callback module:api/DefaultApi~getAllReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [state] only return reviews that are in these states.
     * @param {module:api/DefaultApi~getAllReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllReviews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableActions operation.
     * @callback module:api/DefaultApi~getAvailableActionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the actions which the current user is allowed to perform  on the review.
     * @param {String} id the permId of the a review (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~getAvailableActionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvailableActions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAvailableActions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableTransitions operation.
     * @callback module:api/DefaultApi~getAvailableTransitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the actions which the current user can perform on this  review, given its current state and the user's permissions.
     * @param {String} id the permId of the a review (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~getAvailableTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvailableTransitions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAvailableTransitions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/DefaultApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the given comment.
     * @param {String} id the perma id of the review
     * @param {String} cId the id of the comment
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] true if the wiki text should be rendered into html, into the field <messageAsHtml>.
     * @param {module:api/DefaultApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getComment(id, cId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling getComment");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompletedReviewers operation.
     * @callback module:api/DefaultApi~getCompletedReviewersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of completed reviewers.
     * @param {String} id the review perma id to retrieve reviewers
     * @param {module:api/DefaultApi~getCompletedReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCompletedReviewers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompletedReviewers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewers/completed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContents operation.
     * @callback module:api/DefaultApi~getContentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the raw content of the specified file revision as a binary  stream. No attempt is made to identify the content type and no mime  type is provided.
     * @param {String} path the path of a file.
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {String} revision the SCM revision string.
     * @param {module:api/DefaultApi~getContentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContents(path, repository, revision, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getContents");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getContents");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling getContents");
      }

      let pathParams = {
        'path': path,
        'repository': repository,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/content/{repository}/{revision}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFilterReviews operation.
     * @callback module:api/DefaultApi~getCustomFilterReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To ignore a property, omit it from the query string.
     * @param {Object} opts Optional parameters
     * @param {String} [title] a string that will be searched for in review titles.
     * @param {String} [author] reviews authored by this user.
     * @param {String} [moderator] reviews moderated by this user.
     * @param {String} [creator] reviews created by this user.
     * @param {String} [states] comma-separated list of amy of the following strings: (Draft,  Approval, Review, Summarize, Closed, Dead, Rejected, Unknown).
     * @param {String} [reviewer] reviews reviewed by this user.
     * @param {Boolean} [orRoles] whether the value of , ,   and  should be OR'd  () or AND'd ()  together.
     * @param {Boolean} [complete] reviews that the specified reviewer has completed.
     * @param {Boolean} [allReviewersComplete] Reviews that all reviewers have completed.
     * @param {String} [project] reviews for the specified project.
     * @param {Number} [fromDate] reviews with last activity date after the specified timestamp, in milliseconds. Inclusive.
     * @param {Number} [toDate] reviews with last activity date before the specified timestamp, in milliseconds. Inclusive.
     * @param {module:api/DefaultApi~getCustomFilterReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomFilterReviews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'author': opts['author'],
        'moderator': opts['moderator'],
        'creator': opts['creator'],
        'states': opts['states'],
        'reviewer': opts['reviewer'],
        'orRoles': opts['orRoles'],
        'complete': opts['complete'],
        'allReviewersComplete': opts['allReviewersComplete'],
        'project': opts['project'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailedCustomFilterReviews operation.
     * @callback module:api/DefaultApi~getDetailedCustomFilterReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To ignore a property, omit it from the query string.
     * @param {Object} opts Optional parameters
     * @param {String} [title] a string that will be searched for in review titles.
     * @param {String} [author] reviews authored by this user.
     * @param {String} [moderator] reviews moderated by this user.
     * @param {String} [creator] reviews created by this user.
     * @param {String} [states] comma-separated list of amy of the following strings: (Draft,  Approval, Review, Summarize, Closed, Dead, Rejected, Unknown).
     * @param {String} [reviewer] reviews reviewed by this user.
     * @param {Boolean} [orRoles] whether the value of , ,   and  should be OR'd  () or AND'd ()  together.
     * @param {Boolean} [complete] reviews that the specified reviewer has completed.
     * @param {Boolean} [allReviewersComplete] Reviews that all reviewers have completed.
     * @param {String} [project] reviews for the specified project.
     * @param {Number} [fromDate] reviews with last activity date after the specified timestamp, in milliseconds. Inclusive.
     * @param {Number} [toDate] reviews with last activity date before the specified timestamp, in milliseconds. Inclusive.
     * @param {module:api/DefaultApi~getDetailedCustomFilterReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDetailedCustomFilterReviews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'author': opts['author'],
        'moderator': opts['moderator'],
        'creator': opts['creator'],
        'states': opts['states'],
        'reviewer': opts['reviewer'],
        'orRoles': opts['orRoles'],
        'complete': opts['complete'],
        'allReviewersComplete': opts['allReviewersComplete'],
        'project': opts['project'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailedFilteredReviewsForUser operation.
     * @callback module:api/DefaultApi~getDetailedFilteredReviewsForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all the reviews that match the specified filter criteria.
     * @param {String} filter a predefined filter type.
     * @param {module:api/DefaultApi~getDetailedFilteredReviewsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDetailedFilteredReviewsForUser(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getDetailedFilteredReviewsForUser");
      }

      let pathParams = {
        'filter': filter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter/{filter}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailedReview operation.
     * @callback module:api/DefaultApi~getDetailedReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified review.
     * @param {String} id the permId of the review (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~getDetailedReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDetailedReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDetailedReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilteredReviewsForUser operation.
     * @callback module:api/DefaultApi~getFilteredReviewsForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the reviews which match the given filter, for the current user.
     * @param {String} filter a predefined filter type.
     * @param {module:api/DefaultApi~getFilteredReviewsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFilteredReviewsForUser(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getFilteredReviewsForUser");
      }

      let pathParams = {
        'filter': filter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralComments operation.
     * @callback module:api/DefaultApi~getGeneralCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id review perma-id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] indicate whether to render the wiki text in the returned comments. If set to \"true\", the comments will contain a  <messageAsHtml> element containing the wiki rendered html.
     * @param {module:api/DefaultApi~getGeneralCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGeneralComments(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneralComments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/general', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMappedUser operation.
     * @callback module:api/DefaultApi~getMappedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user details of the user mapped to a committer in a repository.
     * @param {String} repository the key of the repository
     * @param {String} username the name of the committer
     * @param {module:api/DefaultApi~getMappedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMappedUser(repository, username, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getMappedUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getMappedUser");
      }

      let pathParams = {
        'repository': repository,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/users-v1/{repository}/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetrics operation.
     * @callback module:api/DefaultApi~getMetricsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comment metrics metadata for the specified metrics version.
     * @param {String} version a metrics version.
     * @param {module:api/DefaultApi~getMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMetrics(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getMetrics");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/metrics/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/DefaultApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project description.
     * @param {String} key the key of a Crucible project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeAllowedReviewers = false)] 
     * @param {module:api/DefaultApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProject(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProject");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'excludeAllowedReviewers': opts['excludeAllowedReviewers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/projects-v1/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplies operation.
     * @callback module:api/DefaultApi~getRepliesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the replies to the given comment.
     * @param {String} id the review perma-id (e.g. \"CR-45\").
     * @param {String} cId the comment to reply to
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] true if the comments should also be rendered into html, into the element <messageAsHtml>
     * @param {module:api/DefaultApi~getRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReplies(id, cId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReplies");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling getReplies");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryDetails operation.
     * @callback module:api/DefaultApi~getRepositoryDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {module:api/DefaultApi~getRepositoryDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRepositoryDetails(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getRepositoryDetails");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReview operation.
     * @callback module:api/DefaultApi~getReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single review by its permId (e.g. \"CR-45\").  If the review does not exist, a 404 is returned.    The moderator element may not exist if the review does not have a Moderator.
     * @param {String} id the permId of the review to delete (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~getReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewItem operation.
     * @callback module:api/DefaultApi~getReviewItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns detailed information for a specific review item.
     * @param {String} riId review item id (e.g. \"CFR-6312\").
     * @param {String} id review id (e.g. \"CR-345\").
     * @param {module:api/DefaultApi~getReviewItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewItem(riId, id, callback) {
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling getReviewItem");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReviewItem");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewItemsComments operation.
     * @callback module:api/DefaultApi~getReviewItemsCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} riId the review item id.
     * @param {String} id the review perma id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] indicate whether to render the wiki text in the returned comments. If set to \"true\", the comments will contain a  <messageAsHtml> element containing the wiki rendered html.
     * @param {module:api/DefaultApi~getReviewItemsCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewItemsComments(riId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling getReviewItemsComments");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReviewItemsComments");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewItemsForReview operation.
     * @callback module:api/DefaultApi~getReviewItemsForReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the items in a review.
     * @param {String} id the id of the review (e.g. \"CR-362\").
     * @param {module:api/DefaultApi~getReviewItemsForReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewItemsForReview(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReviewItemsForReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewPatches operation.
     * @callback module:api/DefaultApi~getReviewPatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of patches and their details for the given review
     * @param {String} id the review id to get the patches for
     * @param {module:api/DefaultApi~getReviewPatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewPatches(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReviewPatches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/patch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewers operation.
     * @callback module:api/DefaultApi~getReviewersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of reviewers in the review given by the permaid id.
     * @param {String} id the id of the review to add to
     * @param {module:api/DefaultApi~getReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReviewers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsDetailsForPath operation.
     * @callback module:api/DefaultApi~getReviewsDetailsForPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of Reviews which include a particular file.
     * @param {String} repository the key of the repository to search for file.
     * @param {Object} opts Optional parameters
     * @param {String} [path] path to find in reviews.
     * @param {module:api/DefaultApi~getReviewsDetailsForPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsDetailsForPath(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getReviewsDetailsForPath");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/search/{repository}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsForIssueKey operation.
     * @callback module:api/DefaultApi~getReviewsForIssueKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all reviews that have been linked to the specified JIRA issue key.
     * @param {Object} opts Optional parameters
     * @param {String} [jiraKey] a Jira issue key (e.g. \"FOO-3453\")
     * @param {String} [maxReturn] the maximum number of reviews to return.
     * @param {module:api/DefaultApi~getReviewsForIssueKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsForIssueKey(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'jiraKey': opts['jiraKey'],
        'maxReturn': opts['maxReturn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/search-v1/reviewsForIssue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsForPath operation.
     * @callback module:api/DefaultApi~getReviewsForPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of Reviews which include a particular file.
     * @param {String} repository the key of the repository to search for file
     * @param {Object} opts Optional parameters
     * @param {String} [path] path to find in reviews
     * @param {module:api/DefaultApi~getReviewsForPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsForPath(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getReviewsForPath");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/search/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsForTerm operation.
     * @callback module:api/DefaultApi~getReviewsForTermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for reviews where the name, description, state or permaId contain the specified term.
     * @param {Object} opts Optional parameters
     * @param {String} [term] a search term.
     * @param {String} [maxReturn] the maximum number of reviews to return.
     * @param {module:api/DefaultApi~getReviewsForTermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsForTerm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'maxReturn': opts['maxReturn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/search-v1/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSvnRepositoryDetails operation.
     * @callback module:api/DefaultApi~getSvnRepositoryDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For backward compatibility we provide this method, but repositories should be referred to just by their key.
     * @param {String} repository the key of a FishEye or Crucible SCM plugin repository
     * @param {module:api/DefaultApi~getSvnRepositoryDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSvnRepositoryDetails(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getSvnRepositoryDetails");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/{repository}/svn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUncompletedReviewers operation.
     * @callback module:api/DefaultApi~getUncompletedReviewersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of reviewers that have not completed the review.
     * @param {String} id the review perma id to retrieve reviewers
     * @param {module:api/DefaultApi~getUncompletedReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUncompletedReviewers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUncompletedReviewers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewers/uncompleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfile operation.
     * @callback module:api/DefaultApi~getUserProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user's profile details.
     * @param {String} username the username of the user
     * @param {module:api/DefaultApi~getUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserProfile(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserProfile");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/users-v1/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/DefaultApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the users. You can also ask for a set of users.
     * @param {Object} opts Optional parameters
     * @param {String} [username] a username (or a few) to limit the number of returned entries. It will return only existing users.
     * @param {module:api/DefaultApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/users-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionInfo operation.
     * @callback module:api/DefaultApi~getVersionInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Crucible version information.
     * @param {module:api/DefaultApi~getVersionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVersionInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/versionInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionedComments operation.
     * @callback module:api/DefaultApi~getVersionedCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id review perma-id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [render = false)] indicate whether to render the wiki text in the returned comments. If set to \"true\", the comments will contain a  <messageAsHtml> element containing the wiki rendered html.
     * @param {module:api/DefaultApi~getVersionedCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVersionedComments(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVersionedComments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'render': opts['render']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/versioned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the history operation.
     * @callback module:api/DefaultApi~historyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents the history of a versioned entity.
     * @param {String} path the path of a file or versioned directory (note that  versioned directories are not supported by all SCM plugins).
     * @param {String} repository the key of the Crucible SCM plugin repository.
     * @param {String} revision the SCM revision string.
     * @param {module:api/DefaultApi~historyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    history(path, repository, revision, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling history");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling history");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling history");
      }

      let pathParams = {
        'path': path,
        'repository': repository,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/repositories-v1/history/{repository}/{revision}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user authentication token.    This is a legacy version of the login request. Using GET is deprecated as your password is likely to appear in logs which record request URLs.  Use the POST version instead.
     * @param {Object} opts Optional parameters
     * @param {String} [userName] the username of the user to get the token for
     * @param {String} [password] the password for the user to get the token for
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userName': opts['userName'],
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/auth-v1/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback module:api/DefaultApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user authentication token.
     * @param {module:api/DefaultApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/auth-v1/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markAllCommentsAsRead operation.
     * @callback module:api/DefaultApi~markAllCommentsAsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For the effective user, mark all comments in a review as read (except  those marked as leave unread).
     * @param {String} id the review perma-id (e.g. \"CR-45\").
     * @param {module:api/DefaultApi~markAllCommentsAsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markAllCommentsAsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markAllCommentsAsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/markAllAsRead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markCommentAsLeaveUnread operation.
     * @callback module:api/DefaultApi~markCommentAsLeaveUnreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the comment as leave unread to the current user - it will not automatically be marked as read by crucible.
     * @param {String} id the review perma id for the comment
     * @param {String} cId the comment perma id
     * @param {module:api/DefaultApi~markCommentAsLeaveUnreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markCommentAsLeaveUnread(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markCommentAsLeaveUnread");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling markCommentAsLeaveUnread");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/markAsLeaveUnread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markCommentAsRead operation.
     * @callback module:api/DefaultApi~markCommentAsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the given comment as read for the user used to make this POST.
     * @param {String} id the review perma id
     * @param {String} cId the comment perma id.
     * @param {module:api/DefaultApi~markCommentAsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markCommentAsRead(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markCommentAsRead");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling markCommentAsRead");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/markAsRead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomFilterReviews operation.
     * @callback module:api/DefaultApi~postCustomFilterReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method should no longer be used, as it uses a POST for a read-only  retrieval operation and is provided for backward compatibility only.
     * @param {module:api/DefaultApi~postCustomFilterReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomFilterReviews(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDetailedCustomFilterReviews operation.
     * @callback module:api/DefaultApi~postDetailedCustomFilterReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method should no longer be used, as it uses a POST for a read-only  retrieval operation and is provided for backward compatibility only.
     * @param {module:api/DefaultApi~postDetailedCustomFilterReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDetailedCustomFilterReviews(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/filter/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishAllComments operation.
     * @callback module:api/DefaultApi~publishAllCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes all the draft comments of the current user.
     * @param {String} id the review perma id to look for draft comments
     * @param {module:api/DefaultApi~publishAllCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishAllComments(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publishAllComments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishComment operation.
     * @callback module:api/DefaultApi~publishCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * publishes the given draft comment.
     * @param {String} id the review perma id
     * @param {String} cId the comment perma id
     * @param {module:api/DefaultApi~publishCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishComment(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publishComment");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling publishComment");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/publish/{cId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindIncompleteReviewers operation.
     * @callback module:api/DefaultApi~remindIncompleteReviewersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately send a reminder to incomplete reviewers about the given review.
     * @param {String} id the review perma id to remind about. it should be in the open state.
     * @param {module:api/DefaultApi~remindIncompleteReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    remindIncompleteReviewers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling remindIncompleteReviewers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/remind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeComment operation.
     * @callback module:api/DefaultApi~removeCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given comment.
     * @param {String} id the perma id of the review
     * @param {String} cId the id of the comment
     * @param {module:api/DefaultApi~removeCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeComment(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeComment");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling removeComment");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePatch operation.
     * @callback module:api/DefaultApi~removePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the patch with the given id from the review. All of the revisions provided by the patch will be removed as well.
     * @param {Number} patchId the id of the patch (as returned by the '{id}/patch' resource)
     * @param {String} id the permaId of the review
     * @param {module:api/DefaultApi~removePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removePatch(patchId, id, callback) {
      let postBody = null;
      // verify the required parameter 'patchId' is set
      if (patchId === undefined || patchId === null) {
        throw new Error("Missing the required parameter 'patchId' when calling removePatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removePatch");
      }

      let pathParams = {
        'patchId': patchId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/patch/{patchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeReply operation.
     * @callback module:api/DefaultApi~removeReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the reply.
     * @param {String} id The review perma id
     * @param {String} rId the perma id of the reply to delete
     * @param {String} cId the reply's parent comment perma id
     * @param {module:api/DefaultApi~removeReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeReply(id, rId, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeReply");
      }
      // verify the required parameter 'rId' is set
      if (rId === undefined || rId === null) {
        throw new Error("Missing the required parameter 'rId' when calling removeReply");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling removeReply");
      }

      let pathParams = {
        'id': id,
        'rId': rId,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/replies/{rId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeReviewItem operation.
     * @callback module:api/DefaultApi~removeReviewItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an item from a review.
     * @param {String} riId review item id (e.g. \"CFR-6312\").
     * @param {String} id review id (e.g. \"CR-345\").
     * @param {module:api/DefaultApi~removeReviewItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeReviewItem(riId, id, callback) {
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling removeReviewItem");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeReviewItem");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeReviewItemRevisions operation.
     * @callback module:api/DefaultApi~removeReviewItemRevisionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the revisions given from the review item in the review specified by the id. If the review item has no  more revisions left, it is automatically deleted.
     * @param {String} riId the id of the review item (e.g. \"CFR-5622\").
     * @param {String} id the id of the review (e.g. \"CR-345\").
     * @param {Object} opts Optional parameters
     * @param {String} [rev] a list of revisions to add to the review item, merging if required. If a revision already exists  in the given review item, then the given revision is ignored.
     * @param {module:api/DefaultApi~removeReviewItemRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeReviewItemRevisions(riId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling removeReviewItemRevisions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeReviewItemRevisions");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}/revisions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeReviewer operation.
     * @callback module:api/DefaultApi~removeReviewerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the reviewer from the review.
     * @param {String} id the perma id of the review
     * @param {String} username the name of the reviewer.
     * @param {module:api/DefaultApi~removeReviewerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeReviewer(id, username, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeReviewer");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling removeReviewer");
      }

      let pathParams = {
        'id': id,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewers/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setReviewItem operation.
     * @callback module:api/DefaultApi~setReviewItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the review item specified by itemId with the given reviewItem. The old review item is discarded. Can only  perform this operation if the old review item specified by itemId can be deleted. The old review item's permId is  not changed.
     * @param {String} riId a valid review item id (e.g. \"CFR-5622\").
     * @param {String} id a valid review id (e.g. \"CR-345\").
     * @param {module:api/DefaultApi~setReviewItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setReviewItem(riId, id, callback) {
      let postBody = null;
      // verify the required parameter 'riId' is set
      if (riId === undefined || riId === null) {
        throw new Error("Missing the required parameter 'riId' when calling setReviewItem");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReviewItem");
      }

      let pathParams = {
        'riId': riId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/reviewitems/{riId}/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uncompleteReview operation.
     * @callback module:api/DefaultApi~uncompleteReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uncompletes the review for the current user.
     * @param {String} id the review perma id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [ignoreWarnings = true)] if {@code ignoreWarnings==true} then condition failure warnings will be ignored
     * @param {module:api/DefaultApi~uncompleteReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uncompleteReview(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uncompleteReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'ignoreWarnings': opts['ignoreWarnings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/uncomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComment operation.
     * @callback module:api/DefaultApi~updateCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the comment given by the perma id to the new comment posted.
     * @param {String} id the perma id of the review
     * @param {String} cId the id of the comment
     * @param {module:api/DefaultApi~updateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateComment(id, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComment");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling updateComment");
      }

      let pathParams = {
        'id': id,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReply operation.
     * @callback module:api/DefaultApi~updateReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a reply with the given newComment.
     * @param {String} id The review perma id
     * @param {String} rId the perma id of the reply to delete
     * @param {String} cId the reply's parent comment perma id
     * @param {module:api/DefaultApi~updateReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateReply(id, rId, cId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReply");
      }
      // verify the required parameter 'rId' is set
      if (rId === undefined || rId === null) {
        throw new Error("Missing the required parameter 'rId' when calling updateReply");
      }
      // verify the required parameter 'cId' is set
      if (cId === undefined || cId === null) {
        throw new Error("Missing the required parameter 'cId' when calling updateReply");
      }

      let pathParams = {
        'id': id,
        'rId': rId,
        'cId': cId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service/reviews-v1/{id}/comments/{cId}/replies/{rId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
