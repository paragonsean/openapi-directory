/**
 * Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addChangesetToReview(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addFile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addFisheyeReviewItem(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addGeneralComment(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addPatchReview0(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addPatchToReview(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void addReply(const QString &id, const QString &c_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addReviewItem(const QString &id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rev QString [optional]
    */
    virtual void addReviewItemRevisions(const QString &ri_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void addReviewItems(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void addReviewers(const QString &id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void addVersionedComment(const QString &ri_id, const QString &id);

    /**
    * @param[in]  path QString [required]
    * @param[in]  repository QString [required]
    */
    virtual void browse(const QString &path, const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  revision QString [required]
    */
    virtual void change(const QString &repository, const QString &revision);

    /**
    * @param[in]  id QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  ignore_warnings bool [optional]
    */
    virtual void changeState(const QString &id, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_warnings = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  oldest_csid QString [optional]
    * @param[in]  include_oldest bool [optional]
    * @param[in]  newest_csid QString [optional]
    * @param[in]  include_newest bool [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void changes(const QString &path, const QString &repository, const ::OpenAPI::OptionalParam<QString> &oldest_csid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_oldest = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &newest_csid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_newest = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void closeReviewWithComment(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ignore_warnings bool [optional]
    */
    virtual void completeReview(const QString &id, const ::OpenAPI::OptionalParam<bool> &ignore_warnings = ::OpenAPI::OptionalParam<bool>());


    virtual void createReview();

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteReview(const QString &id);

    /**
    * @param[in]  path QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  revision QString [required]
    */
    virtual void details(const QString &path, const QString &repository, const QString &revision);

    /**
    * @param[in]  id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getAllComments(const QString &id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  state QString [optional]
    */
    virtual void getAllDetailedReviews(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  exclude_allowed_reviewers bool [optional]
    */
    virtual void getAllProjects(const ::OpenAPI::OptionalParam<bool> &exclude_allowed_reviewers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  available bool [optional]
    * @param[in]  type QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAllRepositories(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  state QString [optional]
    */
    virtual void getAllReviews(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAvailableActions(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAvailableTransitions(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getComment(const QString &id, const QString &c_id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCompletedReviewers(const QString &id);

    /**
    * @param[in]  path QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  revision QString [required]
    */
    virtual void getContents(const QString &path, const QString &repository, const QString &revision);

    /**
    * @param[in]  title QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  moderator QString [optional]
    * @param[in]  creator QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  reviewer QString [optional]
    * @param[in]  or_roles bool [optional]
    * @param[in]  complete bool [optional]
    * @param[in]  all_reviewers_complete bool [optional]
    * @param[in]  project QString [optional]
    * @param[in]  from_date qint64 [optional]
    * @param[in]  to_date qint64 [optional]
    */
    virtual void getCustomFilterReviews(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moderator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reviewer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &or_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &complete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &all_reviewers_complete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &from_date = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &to_date = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  title QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  moderator QString [optional]
    * @param[in]  creator QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  reviewer QString [optional]
    * @param[in]  or_roles bool [optional]
    * @param[in]  complete bool [optional]
    * @param[in]  all_reviewers_complete bool [optional]
    * @param[in]  project QString [optional]
    * @param[in]  from_date qint64 [optional]
    * @param[in]  to_date qint64 [optional]
    */
    virtual void getDetailedCustomFilterReviews(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moderator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reviewer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &or_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &complete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &all_reviewers_complete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &from_date = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &to_date = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  filter QString [required]
    */
    virtual void getDetailedFilteredReviewsForUser(const QString &filter);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDetailedReview(const QString &id);

    /**
    * @param[in]  filter QString [required]
    */
    virtual void getFilteredReviewsForUser(const QString &filter);

    /**
    * @param[in]  id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getGeneralComments(const QString &id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  username QString [required]
    */
    virtual void getMappedUser(const QString &repository, const QString &username);

    /**
    * @param[in]  version QString [required]
    */
    virtual void getMetrics(const QString &version);

    /**
    * @param[in]  key QString [required]
    * @param[in]  exclude_allowed_reviewers bool [optional]
    */
    virtual void getProject(const QString &key, const ::OpenAPI::OptionalParam<bool> &exclude_allowed_reviewers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getReplies(const QString &id, const QString &c_id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getRepositoryDetails(const QString &repository);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getReview(const QString &id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getReviewItem(const QString &ri_id, const QString &id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getReviewItemsComments(const QString &ri_id, const QString &id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getReviewItemsForReview(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getReviewPatches(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getReviewers(const QString &id);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void getReviewsDetailsForPath(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  jira_key QString [optional]
    * @param[in]  max_return QString [optional]
    */
    virtual void getReviewsForIssueKey(const ::OpenAPI::OptionalParam<QString> &jira_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void getReviewsForPath(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  term QString [optional]
    * @param[in]  max_return QString [optional]
    */
    virtual void getReviewsForTerm(const ::OpenAPI::OptionalParam<QString> &term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getSvnRepositoryDetails(const QString &repository);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUncompletedReviewers(const QString &id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void getUserProfile(const QString &username);

    /**
    * @param[in]  username QString [optional]
    */
    virtual void getUsers(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());


    virtual void getVersionInfo();

    /**
    * @param[in]  id QString [required]
    * @param[in]  render bool [optional]
    */
    virtual void getVersionedComments(const QString &id, const ::OpenAPI::OptionalParam<bool> &render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  revision QString [required]
    */
    virtual void history(const QString &path, const QString &repository, const QString &revision);

    /**
    * @param[in]  user_name QString [optional]
    * @param[in]  password QString [optional]
    */
    virtual void login(const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());


    virtual void loginPost();

    /**
    * @param[in]  id QString [required]
    */
    virtual void markAllCommentsAsRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void markCommentAsLeaveUnread(const QString &id, const QString &c_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void markCommentAsRead(const QString &id, const QString &c_id);


    virtual void postCustomFilterReviews();


    virtual void postDetailedCustomFilterReviews();

    /**
    * @param[in]  id QString [required]
    */
    virtual void publishAllComments(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void publishComment(const QString &id, const QString &c_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void remindIncompleteReviewers(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void removeComment(const QString &id, const QString &c_id);

    /**
    * @param[in]  patch_id qint32 [required]
    * @param[in]  id QString [required]
    */
    virtual void removePatch(const qint32 &patch_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  r_id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void removeReply(const QString &id, const QString &r_id, const QString &c_id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void removeReviewItem(const QString &ri_id, const QString &id);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rev QString [optional]
    */
    virtual void removeReviewItemRevisions(const QString &ri_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  username QString [required]
    */
    virtual void removeReviewer(const QString &id, const QString &username);

    /**
    * @param[in]  ri_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void setReviewItem(const QString &ri_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ignore_warnings bool [optional]
    */
    virtual void uncompleteReview(const QString &id, const ::OpenAPI::OptionalParam<bool> &ignore_warnings = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void updateComment(const QString &id, const QString &c_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  r_id QString [required]
    * @param[in]  c_id QString [required]
    */
    virtual void updateReply(const QString &id, const QString &r_id, const QString &c_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addChangesetToReviewCallback(OAIHttpRequestWorker *worker);
    void addFileCallback(OAIHttpRequestWorker *worker);
    void addFisheyeReviewItemCallback(OAIHttpRequestWorker *worker);
    void addGeneralCommentCallback(OAIHttpRequestWorker *worker);
    void addPatchReview0Callback(OAIHttpRequestWorker *worker);
    void addPatchToReviewCallback(OAIHttpRequestWorker *worker);
    void addReplyCallback(OAIHttpRequestWorker *worker);
    void addReviewItemCallback(OAIHttpRequestWorker *worker);
    void addReviewItemRevisionsCallback(OAIHttpRequestWorker *worker);
    void addReviewItemsCallback(OAIHttpRequestWorker *worker);
    void addReviewersCallback(OAIHttpRequestWorker *worker);
    void addVersionedCommentCallback(OAIHttpRequestWorker *worker);
    void browseCallback(OAIHttpRequestWorker *worker);
    void changeCallback(OAIHttpRequestWorker *worker);
    void changeStateCallback(OAIHttpRequestWorker *worker);
    void changesCallback(OAIHttpRequestWorker *worker);
    void closeReviewWithCommentCallback(OAIHttpRequestWorker *worker);
    void completeReviewCallback(OAIHttpRequestWorker *worker);
    void createReviewCallback(OAIHttpRequestWorker *worker);
    void deleteReviewCallback(OAIHttpRequestWorker *worker);
    void detailsCallback(OAIHttpRequestWorker *worker);
    void getAllCommentsCallback(OAIHttpRequestWorker *worker);
    void getAllDetailedReviewsCallback(OAIHttpRequestWorker *worker);
    void getAllProjectsCallback(OAIHttpRequestWorker *worker);
    void getAllRepositoriesCallback(OAIHttpRequestWorker *worker);
    void getAllReviewsCallback(OAIHttpRequestWorker *worker);
    void getAvailableActionsCallback(OAIHttpRequestWorker *worker);
    void getAvailableTransitionsCallback(OAIHttpRequestWorker *worker);
    void getCommentCallback(OAIHttpRequestWorker *worker);
    void getCompletedReviewersCallback(OAIHttpRequestWorker *worker);
    void getContentsCallback(OAIHttpRequestWorker *worker);
    void getCustomFilterReviewsCallback(OAIHttpRequestWorker *worker);
    void getDetailedCustomFilterReviewsCallback(OAIHttpRequestWorker *worker);
    void getDetailedFilteredReviewsForUserCallback(OAIHttpRequestWorker *worker);
    void getDetailedReviewCallback(OAIHttpRequestWorker *worker);
    void getFilteredReviewsForUserCallback(OAIHttpRequestWorker *worker);
    void getGeneralCommentsCallback(OAIHttpRequestWorker *worker);
    void getMappedUserCallback(OAIHttpRequestWorker *worker);
    void getMetricsCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getRepliesCallback(OAIHttpRequestWorker *worker);
    void getRepositoryDetailsCallback(OAIHttpRequestWorker *worker);
    void getReviewCallback(OAIHttpRequestWorker *worker);
    void getReviewItemCallback(OAIHttpRequestWorker *worker);
    void getReviewItemsCommentsCallback(OAIHttpRequestWorker *worker);
    void getReviewItemsForReviewCallback(OAIHttpRequestWorker *worker);
    void getReviewPatchesCallback(OAIHttpRequestWorker *worker);
    void getReviewersCallback(OAIHttpRequestWorker *worker);
    void getReviewsDetailsForPathCallback(OAIHttpRequestWorker *worker);
    void getReviewsForIssueKeyCallback(OAIHttpRequestWorker *worker);
    void getReviewsForPathCallback(OAIHttpRequestWorker *worker);
    void getReviewsForTermCallback(OAIHttpRequestWorker *worker);
    void getSvnRepositoryDetailsCallback(OAIHttpRequestWorker *worker);
    void getUncompletedReviewersCallback(OAIHttpRequestWorker *worker);
    void getUserProfileCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void getVersionInfoCallback(OAIHttpRequestWorker *worker);
    void getVersionedCommentsCallback(OAIHttpRequestWorker *worker);
    void historyCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void loginPostCallback(OAIHttpRequestWorker *worker);
    void markAllCommentsAsReadCallback(OAIHttpRequestWorker *worker);
    void markCommentAsLeaveUnreadCallback(OAIHttpRequestWorker *worker);
    void markCommentAsReadCallback(OAIHttpRequestWorker *worker);
    void postCustomFilterReviewsCallback(OAIHttpRequestWorker *worker);
    void postDetailedCustomFilterReviewsCallback(OAIHttpRequestWorker *worker);
    void publishAllCommentsCallback(OAIHttpRequestWorker *worker);
    void publishCommentCallback(OAIHttpRequestWorker *worker);
    void remindIncompleteReviewersCallback(OAIHttpRequestWorker *worker);
    void removeCommentCallback(OAIHttpRequestWorker *worker);
    void removePatchCallback(OAIHttpRequestWorker *worker);
    void removeReplyCallback(OAIHttpRequestWorker *worker);
    void removeReviewItemCallback(OAIHttpRequestWorker *worker);
    void removeReviewItemRevisionsCallback(OAIHttpRequestWorker *worker);
    void removeReviewerCallback(OAIHttpRequestWorker *worker);
    void setReviewItemCallback(OAIHttpRequestWorker *worker);
    void uncompleteReviewCallback(OAIHttpRequestWorker *worker);
    void updateCommentCallback(OAIHttpRequestWorker *worker);
    void updateReplyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addChangesetToReviewSignal();
    void addFileSignal();
    void addFisheyeReviewItemSignal();
    void addGeneralCommentSignal();
    void addPatchReview0Signal();
    void addPatchToReviewSignal();
    void addReplySignal();
    void addReviewItemSignal();
    void addReviewItemRevisionsSignal();
    void addReviewItemsSignal();
    void addReviewersSignal();
    void addVersionedCommentSignal();
    void browseSignal();
    void changeSignal();
    void changeStateSignal();
    void changesSignal();
    void closeReviewWithCommentSignal();
    void completeReviewSignal();
    void createReviewSignal();
    void deleteReviewSignal();
    void detailsSignal();
    void getAllCommentsSignal();
    void getAllDetailedReviewsSignal();
    void getAllProjectsSignal();
    void getAllRepositoriesSignal();
    void getAllReviewsSignal();
    void getAvailableActionsSignal();
    void getAvailableTransitionsSignal();
    void getCommentSignal();
    void getCompletedReviewersSignal();
    void getContentsSignal();
    void getCustomFilterReviewsSignal();
    void getDetailedCustomFilterReviewsSignal();
    void getDetailedFilteredReviewsForUserSignal();
    void getDetailedReviewSignal();
    void getFilteredReviewsForUserSignal();
    void getGeneralCommentsSignal();
    void getMappedUserSignal();
    void getMetricsSignal();
    void getProjectSignal();
    void getRepliesSignal();
    void getRepositoryDetailsSignal();
    void getReviewSignal();
    void getReviewItemSignal();
    void getReviewItemsCommentsSignal();
    void getReviewItemsForReviewSignal();
    void getReviewPatchesSignal();
    void getReviewersSignal();
    void getReviewsDetailsForPathSignal();
    void getReviewsForIssueKeySignal();
    void getReviewsForPathSignal();
    void getReviewsForTermSignal();
    void getSvnRepositoryDetailsSignal();
    void getUncompletedReviewersSignal();
    void getUserProfileSignal();
    void getUsersSignal();
    void getVersionInfoSignal();
    void getVersionedCommentsSignal();
    void historySignal();
    void loginSignal();
    void loginPostSignal();
    void markAllCommentsAsReadSignal();
    void markCommentAsLeaveUnreadSignal();
    void markCommentAsReadSignal();
    void postCustomFilterReviewsSignal();
    void postDetailedCustomFilterReviewsSignal();
    void publishAllCommentsSignal();
    void publishCommentSignal();
    void remindIncompleteReviewersSignal();
    void removeCommentSignal();
    void removePatchSignal();
    void removeReplySignal();
    void removeReviewItemSignal();
    void removeReviewItemRevisionsSignal();
    void removeReviewerSignal();
    void setReviewItemSignal();
    void uncompleteReviewSignal();
    void updateCommentSignal();
    void updateReplySignal();


    void addChangesetToReviewSignalFull(OAIHttpRequestWorker *worker);
    void addFileSignalFull(OAIHttpRequestWorker *worker);
    void addFisheyeReviewItemSignalFull(OAIHttpRequestWorker *worker);
    void addGeneralCommentSignalFull(OAIHttpRequestWorker *worker);
    void addPatchReview0SignalFull(OAIHttpRequestWorker *worker);
    void addPatchToReviewSignalFull(OAIHttpRequestWorker *worker);
    void addReplySignalFull(OAIHttpRequestWorker *worker);
    void addReviewItemSignalFull(OAIHttpRequestWorker *worker);
    void addReviewItemRevisionsSignalFull(OAIHttpRequestWorker *worker);
    void addReviewItemsSignalFull(OAIHttpRequestWorker *worker);
    void addReviewersSignalFull(OAIHttpRequestWorker *worker);
    void addVersionedCommentSignalFull(OAIHttpRequestWorker *worker);
    void browseSignalFull(OAIHttpRequestWorker *worker);
    void changeSignalFull(OAIHttpRequestWorker *worker);
    void changeStateSignalFull(OAIHttpRequestWorker *worker);
    void changesSignalFull(OAIHttpRequestWorker *worker);
    void closeReviewWithCommentSignalFull(OAIHttpRequestWorker *worker);
    void completeReviewSignalFull(OAIHttpRequestWorker *worker);
    void createReviewSignalFull(OAIHttpRequestWorker *worker);
    void deleteReviewSignalFull(OAIHttpRequestWorker *worker);
    void detailsSignalFull(OAIHttpRequestWorker *worker);
    void getAllCommentsSignalFull(OAIHttpRequestWorker *worker);
    void getAllDetailedReviewsSignalFull(OAIHttpRequestWorker *worker);
    void getAllProjectsSignalFull(OAIHttpRequestWorker *worker);
    void getAllRepositoriesSignalFull(OAIHttpRequestWorker *worker);
    void getAllReviewsSignalFull(OAIHttpRequestWorker *worker);
    void getAvailableActionsSignalFull(OAIHttpRequestWorker *worker);
    void getAvailableTransitionsSignalFull(OAIHttpRequestWorker *worker);
    void getCommentSignalFull(OAIHttpRequestWorker *worker);
    void getCompletedReviewersSignalFull(OAIHttpRequestWorker *worker);
    void getContentsSignalFull(OAIHttpRequestWorker *worker);
    void getCustomFilterReviewsSignalFull(OAIHttpRequestWorker *worker);
    void getDetailedCustomFilterReviewsSignalFull(OAIHttpRequestWorker *worker);
    void getDetailedFilteredReviewsForUserSignalFull(OAIHttpRequestWorker *worker);
    void getDetailedReviewSignalFull(OAIHttpRequestWorker *worker);
    void getFilteredReviewsForUserSignalFull(OAIHttpRequestWorker *worker);
    void getGeneralCommentsSignalFull(OAIHttpRequestWorker *worker);
    void getMappedUserSignalFull(OAIHttpRequestWorker *worker);
    void getMetricsSignalFull(OAIHttpRequestWorker *worker);
    void getProjectSignalFull(OAIHttpRequestWorker *worker);
    void getRepliesSignalFull(OAIHttpRequestWorker *worker);
    void getRepositoryDetailsSignalFull(OAIHttpRequestWorker *worker);
    void getReviewSignalFull(OAIHttpRequestWorker *worker);
    void getReviewItemSignalFull(OAIHttpRequestWorker *worker);
    void getReviewItemsCommentsSignalFull(OAIHttpRequestWorker *worker);
    void getReviewItemsForReviewSignalFull(OAIHttpRequestWorker *worker);
    void getReviewPatchesSignalFull(OAIHttpRequestWorker *worker);
    void getReviewersSignalFull(OAIHttpRequestWorker *worker);
    void getReviewsDetailsForPathSignalFull(OAIHttpRequestWorker *worker);
    void getReviewsForIssueKeySignalFull(OAIHttpRequestWorker *worker);
    void getReviewsForPathSignalFull(OAIHttpRequestWorker *worker);
    void getReviewsForTermSignalFull(OAIHttpRequestWorker *worker);
    void getSvnRepositoryDetailsSignalFull(OAIHttpRequestWorker *worker);
    void getUncompletedReviewersSignalFull(OAIHttpRequestWorker *worker);
    void getUserProfileSignalFull(OAIHttpRequestWorker *worker);
    void getUsersSignalFull(OAIHttpRequestWorker *worker);
    void getVersionInfoSignalFull(OAIHttpRequestWorker *worker);
    void getVersionedCommentsSignalFull(OAIHttpRequestWorker *worker);
    void historySignalFull(OAIHttpRequestWorker *worker);
    void loginSignalFull(OAIHttpRequestWorker *worker);
    void loginPostSignalFull(OAIHttpRequestWorker *worker);
    void markAllCommentsAsReadSignalFull(OAIHttpRequestWorker *worker);
    void markCommentAsLeaveUnreadSignalFull(OAIHttpRequestWorker *worker);
    void markCommentAsReadSignalFull(OAIHttpRequestWorker *worker);
    void postCustomFilterReviewsSignalFull(OAIHttpRequestWorker *worker);
    void postDetailedCustomFilterReviewsSignalFull(OAIHttpRequestWorker *worker);
    void publishAllCommentsSignalFull(OAIHttpRequestWorker *worker);
    void publishCommentSignalFull(OAIHttpRequestWorker *worker);
    void remindIncompleteReviewersSignalFull(OAIHttpRequestWorker *worker);
    void removeCommentSignalFull(OAIHttpRequestWorker *worker);
    void removePatchSignalFull(OAIHttpRequestWorker *worker);
    void removeReplySignalFull(OAIHttpRequestWorker *worker);
    void removeReviewItemSignalFull(OAIHttpRequestWorker *worker);
    void removeReviewItemRevisionsSignalFull(OAIHttpRequestWorker *worker);
    void removeReviewerSignalFull(OAIHttpRequestWorker *worker);
    void setReviewItemSignalFull(OAIHttpRequestWorker *worker);
    void uncompleteReviewSignalFull(OAIHttpRequestWorker *worker);
    void updateCommentSignalFull(OAIHttpRequestWorker *worker);
    void updateReplySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addChangesetToReviewSignalError() instead")
    void addChangesetToReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChangesetToReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileSignalError() instead")
    void addFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFisheyeReviewItemSignalError() instead")
    void addFisheyeReviewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFisheyeReviewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addGeneralCommentSignalError() instead")
    void addGeneralCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addGeneralCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPatchReview0SignalError() instead")
    void addPatchReview0SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPatchReview0SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPatchToReviewSignalError() instead")
    void addPatchToReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPatchToReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReplySignalError() instead")
    void addReplySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addReplySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemSignalError() instead")
    void addReviewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemRevisionsSignalError() instead")
    void addReviewItemRevisionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemRevisionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemsSignalError() instead")
    void addReviewItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewersSignalError() instead")
    void addReviewersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVersionedCommentSignalError() instead")
    void addVersionedCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVersionedCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use browseSignalError() instead")
    void browseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void browseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeSignalError() instead")
    void changeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStateSignalError() instead")
    void changeStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changesSignalError() instead")
    void changesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeReviewWithCommentSignalError() instead")
    void closeReviewWithCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void closeReviewWithCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeReviewSignalError() instead")
    void completeReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completeReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReviewSignalError() instead")
    void createReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReviewSignalError() instead")
    void deleteReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailsSignalError() instead")
    void detailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void detailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCommentsSignalError() instead")
    void getAllCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDetailedReviewsSignalError() instead")
    void getAllDetailedReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDetailedReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalError() instead")
    void getAllProjectsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRepositoriesSignalError() instead")
    void getAllRepositoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRepositoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllReviewsSignalError() instead")
    void getAllReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableActionsSignalError() instead")
    void getAvailableActionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableActionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableTransitionsSignalError() instead")
    void getAvailableTransitionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableTransitionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalError() instead")
    void getCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompletedReviewersSignalError() instead")
    void getCompletedReviewersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCompletedReviewersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentsSignalError() instead")
    void getContentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getContentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFilterReviewsSignalError() instead")
    void getCustomFilterReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFilterReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedCustomFilterReviewsSignalError() instead")
    void getDetailedCustomFilterReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedCustomFilterReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedFilteredReviewsForUserSignalError() instead")
    void getDetailedFilteredReviewsForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedFilteredReviewsForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedReviewSignalError() instead")
    void getDetailedReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilteredReviewsForUserSignalError() instead")
    void getFilteredReviewsForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFilteredReviewsForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralCommentsSignalError() instead")
    void getGeneralCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMappedUserSignalError() instead")
    void getMappedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getMappedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetricsSignalError() instead")
    void getMetricsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepliesSignalError() instead")
    void getRepliesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRepliesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryDetailsSignalError() instead")
    void getRepositoryDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewSignalError() instead")
    void getReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemSignalError() instead")
    void getReviewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemsCommentsSignalError() instead")
    void getReviewItemsCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemsCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemsForReviewSignalError() instead")
    void getReviewItemsForReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemsForReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewPatchesSignalError() instead")
    void getReviewPatchesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewPatchesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewersSignalError() instead")
    void getReviewersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsDetailsForPathSignalError() instead")
    void getReviewsDetailsForPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsDetailsForPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForIssueKeySignalError() instead")
    void getReviewsForIssueKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForIssueKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForPathSignalError() instead")
    void getReviewsForPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForTermSignalError() instead")
    void getReviewsForTermSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForTermSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSvnRepositoryDetailsSignalError() instead")
    void getSvnRepositoryDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSvnRepositoryDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUncompletedReviewersSignalError() instead")
    void getUncompletedReviewersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUncompletedReviewersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProfileSignalError() instead")
    void getUserProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionInfoSignalError() instead")
    void getVersionInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionedCommentsSignalError() instead")
    void getVersionedCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionedCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySignalError() instead")
    void historySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void historySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginPostSignalError() instead")
    void loginPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markAllCommentsAsReadSignalError() instead")
    void markAllCommentsAsReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void markAllCommentsAsReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markCommentAsLeaveUnreadSignalError() instead")
    void markCommentAsLeaveUnreadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void markCommentAsLeaveUnreadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markCommentAsReadSignalError() instead")
    void markCommentAsReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void markCommentAsReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCustomFilterReviewsSignalError() instead")
    void postCustomFilterReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postCustomFilterReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDetailedCustomFilterReviewsSignalError() instead")
    void postDetailedCustomFilterReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postDetailedCustomFilterReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAllCommentsSignalError() instead")
    void publishAllCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishAllCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishCommentSignalError() instead")
    void publishCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remindIncompleteReviewersSignalError() instead")
    void remindIncompleteReviewersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void remindIncompleteReviewersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCommentSignalError() instead")
    void removeCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePatchSignalError() instead")
    void removePatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removePatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReplySignalError() instead")
    void removeReplySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeReplySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewItemSignalError() instead")
    void removeReviewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewItemRevisionsSignalError() instead")
    void removeReviewItemRevisionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewItemRevisionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewerSignalError() instead")
    void removeReviewerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReviewItemSignalError() instead")
    void setReviewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setReviewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uncompleteReviewSignalError() instead")
    void uncompleteReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uncompleteReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalError() instead")
    void updateCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReplySignalError() instead")
    void updateReplySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateReplySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addChangesetToReviewSignalErrorFull() instead")
    void addChangesetToReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChangesetToReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileSignalErrorFull() instead")
    void addFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFisheyeReviewItemSignalErrorFull() instead")
    void addFisheyeReviewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFisheyeReviewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addGeneralCommentSignalErrorFull() instead")
    void addGeneralCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGeneralCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPatchReview0SignalErrorFull() instead")
    void addPatchReview0SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPatchReview0SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPatchToReviewSignalErrorFull() instead")
    void addPatchToReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPatchToReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReplySignalErrorFull() instead")
    void addReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemSignalErrorFull() instead")
    void addReviewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemRevisionsSignalErrorFull() instead")
    void addReviewItemRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewItemsSignalErrorFull() instead")
    void addReviewItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addReviewersSignalErrorFull() instead")
    void addReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVersionedCommentSignalErrorFull() instead")
    void addVersionedCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVersionedCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use browseSignalErrorFull() instead")
    void browseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void browseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeSignalErrorFull() instead")
    void changeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStateSignalErrorFull() instead")
    void changeStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changesSignalErrorFull() instead")
    void changesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeReviewWithCommentSignalErrorFull() instead")
    void closeReviewWithCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void closeReviewWithCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeReviewSignalErrorFull() instead")
    void completeReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReviewSignalErrorFull() instead")
    void createReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReviewSignalErrorFull() instead")
    void deleteReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailsSignalErrorFull() instead")
    void detailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCommentsSignalErrorFull() instead")
    void getAllCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDetailedReviewsSignalErrorFull() instead")
    void getAllDetailedReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDetailedReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalErrorFull() instead")
    void getAllProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRepositoriesSignalErrorFull() instead")
    void getAllRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllReviewsSignalErrorFull() instead")
    void getAllReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableActionsSignalErrorFull() instead")
    void getAvailableActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableTransitionsSignalErrorFull() instead")
    void getAvailableTransitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableTransitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalErrorFull() instead")
    void getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompletedReviewersSignalErrorFull() instead")
    void getCompletedReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompletedReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentsSignalErrorFull() instead")
    void getContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFilterReviewsSignalErrorFull() instead")
    void getCustomFilterReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFilterReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedCustomFilterReviewsSignalErrorFull() instead")
    void getDetailedCustomFilterReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedCustomFilterReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedFilteredReviewsForUserSignalErrorFull() instead")
    void getDetailedFilteredReviewsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedFilteredReviewsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailedReviewSignalErrorFull() instead")
    void getDetailedReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailedReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilteredReviewsForUserSignalErrorFull() instead")
    void getFilteredReviewsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilteredReviewsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralCommentsSignalErrorFull() instead")
    void getGeneralCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMappedUserSignalErrorFull() instead")
    void getMappedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMappedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetricsSignalErrorFull() instead")
    void getMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepliesSignalErrorFull() instead")
    void getRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryDetailsSignalErrorFull() instead")
    void getRepositoryDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewSignalErrorFull() instead")
    void getReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemSignalErrorFull() instead")
    void getReviewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemsCommentsSignalErrorFull() instead")
    void getReviewItemsCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemsCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewItemsForReviewSignalErrorFull() instead")
    void getReviewItemsForReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewItemsForReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewPatchesSignalErrorFull() instead")
    void getReviewPatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewPatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewersSignalErrorFull() instead")
    void getReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsDetailsForPathSignalErrorFull() instead")
    void getReviewsDetailsForPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsDetailsForPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForIssueKeySignalErrorFull() instead")
    void getReviewsForIssueKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForIssueKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForPathSignalErrorFull() instead")
    void getReviewsForPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForTermSignalErrorFull() instead")
    void getReviewsForTermSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForTermSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSvnRepositoryDetailsSignalErrorFull() instead")
    void getSvnRepositoryDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSvnRepositoryDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUncompletedReviewersSignalErrorFull() instead")
    void getUncompletedReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUncompletedReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProfileSignalErrorFull() instead")
    void getUserProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionInfoSignalErrorFull() instead")
    void getVersionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionedCommentsSignalErrorFull() instead")
    void getVersionedCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionedCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historySignalErrorFull() instead")
    void historySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginPostSignalErrorFull() instead")
    void loginPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markAllCommentsAsReadSignalErrorFull() instead")
    void markAllCommentsAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markAllCommentsAsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markCommentAsLeaveUnreadSignalErrorFull() instead")
    void markCommentAsLeaveUnreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markCommentAsLeaveUnreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markCommentAsReadSignalErrorFull() instead")
    void markCommentAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markCommentAsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCustomFilterReviewsSignalErrorFull() instead")
    void postCustomFilterReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCustomFilterReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDetailedCustomFilterReviewsSignalErrorFull() instead")
    void postDetailedCustomFilterReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDetailedCustomFilterReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAllCommentsSignalErrorFull() instead")
    void publishAllCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAllCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishCommentSignalErrorFull() instead")
    void publishCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remindIncompleteReviewersSignalErrorFull() instead")
    void remindIncompleteReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remindIncompleteReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCommentSignalErrorFull() instead")
    void removeCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePatchSignalErrorFull() instead")
    void removePatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReplySignalErrorFull() instead")
    void removeReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewItemSignalErrorFull() instead")
    void removeReviewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewItemRevisionsSignalErrorFull() instead")
    void removeReviewItemRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewItemRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReviewerSignalErrorFull() instead")
    void removeReviewerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReviewerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReviewItemSignalErrorFull() instead")
    void setReviewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setReviewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uncompleteReviewSignalErrorFull() instead")
    void uncompleteReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uncompleteReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalErrorFull() instead")
    void updateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReplySignalErrorFull() instead")
    void updateReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
