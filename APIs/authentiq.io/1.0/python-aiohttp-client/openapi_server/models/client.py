# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_type: str=None, client_id: str=None, client_name: str=None, client_uri: str=None, contacts: List[str]=None, default_max_age: int=None, default_scopes: List[str]=None, grant_types: List[str]=None, logo_uri: str=None, policy_uri: str=None, redirect_uris: List[str]=None, response_types: List[str]=None, tos_uri: str=None):
        """Client - a model defined in OpenAPI

        :param application_type: The application_type of this Client.
        :param client_id: The client_id of this Client.
        :param client_name: The client_name of this Client.
        :param client_uri: The client_uri of this Client.
        :param contacts: The contacts of this Client.
        :param default_max_age: The default_max_age of this Client.
        :param default_scopes: The default_scopes of this Client.
        :param grant_types: The grant_types of this Client.
        :param logo_uri: The logo_uri of this Client.
        :param policy_uri: The policy_uri of this Client.
        :param redirect_uris: The redirect_uris of this Client.
        :param response_types: The response_types of this Client.
        :param tos_uri: The tos_uri of this Client.
        """
        self.openapi_types = {
            'application_type': str,
            'client_id': str,
            'client_name': str,
            'client_uri': str,
            'contacts': List[str],
            'default_max_age': int,
            'default_scopes': List[str],
            'grant_types': List[str],
            'logo_uri': str,
            'policy_uri': str,
            'redirect_uris': List[str],
            'response_types': List[str],
            'tos_uri': str
        }

        self.attribute_map = {
            'application_type': 'application_type',
            'client_id': 'client_id',
            'client_name': 'client_name',
            'client_uri': 'client_uri',
            'contacts': 'contacts',
            'default_max_age': 'default_max_age',
            'default_scopes': 'default_scopes',
            'grant_types': 'grant_types',
            'logo_uri': 'logo_uri',
            'policy_uri': 'policy_uri',
            'redirect_uris': 'redirect_uris',
            'response_types': 'response_types',
            'tos_uri': 'tos_uri'
        }

        self._application_type = application_type
        self._client_id = client_id
        self._client_name = client_name
        self._client_uri = client_uri
        self._contacts = contacts
        self._default_max_age = default_max_age
        self._default_scopes = default_scopes
        self._grant_types = grant_types
        self._logo_uri = logo_uri
        self._policy_uri = policy_uri
        self._redirect_uris = redirect_uris
        self._response_types = response_types
        self._tos_uri = tos_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Client of this Client.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type(self):
        """Gets the application_type of this Client.


        :return: The application_type of this Client.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this Client.


        :param application_type: The application_type of this Client.
        :type application_type: str
        """

        self._application_type = application_type

    @property
    def client_id(self):
        """Gets the client_id of this Client.


        :return: The client_id of this Client.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Client.


        :param client_id: The client_id of this Client.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this Client.


        :return: The client_name of this Client.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Client.


        :param client_name: The client_name of this Client.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def client_uri(self):
        """Gets the client_uri of this Client.


        :return: The client_uri of this Client.
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this Client.


        :param client_uri: The client_uri of this Client.
        :type client_uri: str
        """
        if client_uri is None:
            raise ValueError("Invalid value for `client_uri`, must not be `None`")

        self._client_uri = client_uri

    @property
    def contacts(self):
        """Gets the contacts of this Client.


        :return: The contacts of this Client.
        :rtype: List[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Client.


        :param contacts: The contacts of this Client.
        :type contacts: List[str]
        """

        self._contacts = contacts

    @property
    def default_max_age(self):
        """Gets the default_max_age of this Client.


        :return: The default_max_age of this Client.
        :rtype: int
        """
        return self._default_max_age

    @default_max_age.setter
    def default_max_age(self, default_max_age):
        """Sets the default_max_age of this Client.


        :param default_max_age: The default_max_age of this Client.
        :type default_max_age: int
        """

        self._default_max_age = default_max_age

    @property
    def default_scopes(self):
        """Gets the default_scopes of this Client.


        :return: The default_scopes of this Client.
        :rtype: List[str]
        """
        return self._default_scopes

    @default_scopes.setter
    def default_scopes(self, default_scopes):
        """Sets the default_scopes of this Client.


        :param default_scopes: The default_scopes of this Client.
        :type default_scopes: List[str]
        """

        self._default_scopes = default_scopes

    @property
    def grant_types(self):
        """Gets the grant_types of this Client.


        :return: The grant_types of this Client.
        :rtype: List[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this Client.


        :param grant_types: The grant_types of this Client.
        :type grant_types: List[str]
        """

        self._grant_types = grant_types

    @property
    def logo_uri(self):
        """Gets the logo_uri of this Client.


        :return: The logo_uri of this Client.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this Client.


        :param logo_uri: The logo_uri of this Client.
        :type logo_uri: str
        """

        self._logo_uri = logo_uri

    @property
    def policy_uri(self):
        """Gets the policy_uri of this Client.


        :return: The policy_uri of this Client.
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this Client.


        :param policy_uri: The policy_uri of this Client.
        :type policy_uri: str
        """

        self._policy_uri = policy_uri

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this Client.


        :return: The redirect_uris of this Client.
        :rtype: List[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this Client.


        :param redirect_uris: The redirect_uris of this Client.
        :type redirect_uris: List[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def response_types(self):
        """Gets the response_types of this Client.


        :return: The response_types of this Client.
        :rtype: List[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this Client.


        :param response_types: The response_types of this Client.
        :type response_types: List[str]
        """

        self._response_types = response_types

    @property
    def tos_uri(self):
        """Gets the tos_uri of this Client.


        :return: The tos_uri of this Client.
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this Client.


        :param tos_uri: The tos_uri of this Client.
        :type tos_uri: str
        """

        self._tos_uri = tos_uri
