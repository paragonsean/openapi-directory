# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticated_at: datetime=None, client_id: str=None, client_name: str=None, client_uri: str=None, concluded_at: datetime=None, connected_at: datetime=None, contacts: List[str]=None, created_at: str=None, deleted_at: datetime=None, logo_uri: str=None, nonce: str=None, policy_uri: str=None, redirect_uri: str=None, response_mode: str=None, response_type: str=None, scopes: List[str]=None, scopes_optional: List[str]=None, scopes_required: List[str]=None, scopes_seen: List[str]=None, scopes_signed: List[str]=None, session_id: str=None, session_state: str=None, session_uri: str=None, sub: str=None, tokens_seen: List[str]=None, tos_uri: str=None, version: int=None):
        """Session - a model defined in OpenAPI

        :param authenticated_at: The authenticated_at of this Session.
        :param client_id: The client_id of this Session.
        :param client_name: The client_name of this Session.
        :param client_uri: The client_uri of this Session.
        :param concluded_at: The concluded_at of this Session.
        :param connected_at: The connected_at of this Session.
        :param contacts: The contacts of this Session.
        :param created_at: The created_at of this Session.
        :param deleted_at: The deleted_at of this Session.
        :param logo_uri: The logo_uri of this Session.
        :param nonce: The nonce of this Session.
        :param policy_uri: The policy_uri of this Session.
        :param redirect_uri: The redirect_uri of this Session.
        :param response_mode: The response_mode of this Session.
        :param response_type: The response_type of this Session.
        :param scopes: The scopes of this Session.
        :param scopes_optional: The scopes_optional of this Session.
        :param scopes_required: The scopes_required of this Session.
        :param scopes_seen: The scopes_seen of this Session.
        :param scopes_signed: The scopes_signed of this Session.
        :param session_id: The session_id of this Session.
        :param session_state: The session_state of this Session.
        :param session_uri: The session_uri of this Session.
        :param sub: The sub of this Session.
        :param tokens_seen: The tokens_seen of this Session.
        :param tos_uri: The tos_uri of this Session.
        :param version: The version of this Session.
        """
        self.openapi_types = {
            'authenticated_at': datetime,
            'client_id': str,
            'client_name': str,
            'client_uri': str,
            'concluded_at': datetime,
            'connected_at': datetime,
            'contacts': List[str],
            'created_at': str,
            'deleted_at': datetime,
            'logo_uri': str,
            'nonce': str,
            'policy_uri': str,
            'redirect_uri': str,
            'response_mode': str,
            'response_type': str,
            'scopes': List[str],
            'scopes_optional': List[str],
            'scopes_required': List[str],
            'scopes_seen': List[str],
            'scopes_signed': List[str],
            'session_id': str,
            'session_state': str,
            'session_uri': str,
            'sub': str,
            'tokens_seen': List[str],
            'tos_uri': str,
            'version': int
        }

        self.attribute_map = {
            'authenticated_at': 'authenticated_at',
            'client_id': 'client_id',
            'client_name': 'client_name',
            'client_uri': 'client_uri',
            'concluded_at': 'concluded_at',
            'connected_at': 'connected_at',
            'contacts': 'contacts',
            'created_at': 'created_at',
            'deleted_at': 'deleted_at',
            'logo_uri': 'logo_uri',
            'nonce': 'nonce',
            'policy_uri': 'policy_uri',
            'redirect_uri': 'redirect_uri',
            'response_mode': 'response_mode',
            'response_type': 'response_type',
            'scopes': 'scopes',
            'scopes_optional': 'scopes_optional',
            'scopes_required': 'scopes_required',
            'scopes_seen': 'scopes_seen',
            'scopes_signed': 'scopes_signed',
            'session_id': 'session_id',
            'session_state': 'session_state',
            'session_uri': 'session_uri',
            'sub': 'sub',
            'tokens_seen': 'tokens_seen',
            'tos_uri': 'tos_uri',
            'version': 'version'
        }

        self._authenticated_at = authenticated_at
        self._client_id = client_id
        self._client_name = client_name
        self._client_uri = client_uri
        self._concluded_at = concluded_at
        self._connected_at = connected_at
        self._contacts = contacts
        self._created_at = created_at
        self._deleted_at = deleted_at
        self._logo_uri = logo_uri
        self._nonce = nonce
        self._policy_uri = policy_uri
        self._redirect_uri = redirect_uri
        self._response_mode = response_mode
        self._response_type = response_type
        self._scopes = scopes
        self._scopes_optional = scopes_optional
        self._scopes_required = scopes_required
        self._scopes_seen = scopes_seen
        self._scopes_signed = scopes_signed
        self._session_id = session_id
        self._session_state = session_state
        self._session_uri = session_uri
        self._sub = sub
        self._tokens_seen = tokens_seen
        self._tos_uri = tos_uri
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticated_at(self):
        """Gets the authenticated_at of this Session.


        :return: The authenticated_at of this Session.
        :rtype: datetime
        """
        return self._authenticated_at

    @authenticated_at.setter
    def authenticated_at(self, authenticated_at):
        """Sets the authenticated_at of this Session.


        :param authenticated_at: The authenticated_at of this Session.
        :type authenticated_at: datetime
        """

        self._authenticated_at = authenticated_at

    @property
    def client_id(self):
        """Gets the client_id of this Session.


        :return: The client_id of this Session.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Session.


        :param client_id: The client_id of this Session.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this Session.


        :return: The client_name of this Session.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Session.


        :param client_name: The client_name of this Session.
        :type client_name: str
        """

        self._client_name = client_name

    @property
    def client_uri(self):
        """Gets the client_uri of this Session.


        :return: The client_uri of this Session.
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this Session.


        :param client_uri: The client_uri of this Session.
        :type client_uri: str
        """

        self._client_uri = client_uri

    @property
    def concluded_at(self):
        """Gets the concluded_at of this Session.


        :return: The concluded_at of this Session.
        :rtype: datetime
        """
        return self._concluded_at

    @concluded_at.setter
    def concluded_at(self, concluded_at):
        """Sets the concluded_at of this Session.


        :param concluded_at: The concluded_at of this Session.
        :type concluded_at: datetime
        """

        self._concluded_at = concluded_at

    @property
    def connected_at(self):
        """Gets the connected_at of this Session.


        :return: The connected_at of this Session.
        :rtype: datetime
        """
        return self._connected_at

    @connected_at.setter
    def connected_at(self, connected_at):
        """Sets the connected_at of this Session.


        :param connected_at: The connected_at of this Session.
        :type connected_at: datetime
        """

        self._connected_at = connected_at

    @property
    def contacts(self):
        """Gets the contacts of this Session.


        :return: The contacts of this Session.
        :rtype: List[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Session.


        :param contacts: The contacts of this Session.
        :type contacts: List[str]
        """

        self._contacts = contacts

    @property
    def created_at(self):
        """Gets the created_at of this Session.


        :return: The created_at of this Session.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Session.


        :param created_at: The created_at of this Session.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Session.


        :return: The deleted_at of this Session.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Session.


        :param deleted_at: The deleted_at of this Session.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def logo_uri(self):
        """Gets the logo_uri of this Session.


        :return: The logo_uri of this Session.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this Session.


        :param logo_uri: The logo_uri of this Session.
        :type logo_uri: str
        """

        self._logo_uri = logo_uri

    @property
    def nonce(self):
        """Gets the nonce of this Session.


        :return: The nonce of this Session.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Session.


        :param nonce: The nonce of this Session.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def policy_uri(self):
        """Gets the policy_uri of this Session.


        :return: The policy_uri of this Session.
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this Session.


        :param policy_uri: The policy_uri of this Session.
        :type policy_uri: str
        """

        self._policy_uri = policy_uri

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Session.


        :return: The redirect_uri of this Session.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Session.


        :param redirect_uri: The redirect_uri of this Session.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def response_mode(self):
        """Gets the response_mode of this Session.


        :return: The response_mode of this Session.
        :rtype: str
        """
        return self._response_mode

    @response_mode.setter
    def response_mode(self, response_mode):
        """Sets the response_mode of this Session.


        :param response_mode: The response_mode of this Session.
        :type response_mode: str
        """

        self._response_mode = response_mode

    @property
    def response_type(self):
        """Gets the response_type of this Session.


        :return: The response_type of this Session.
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this Session.


        :param response_type: The response_type of this Session.
        :type response_type: str
        """

        self._response_type = response_type

    @property
    def scopes(self):
        """Gets the scopes of this Session.


        :return: The scopes of this Session.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Session.


        :param scopes: The scopes of this Session.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def scopes_optional(self):
        """Gets the scopes_optional of this Session.


        :return: The scopes_optional of this Session.
        :rtype: List[str]
        """
        return self._scopes_optional

    @scopes_optional.setter
    def scopes_optional(self, scopes_optional):
        """Sets the scopes_optional of this Session.


        :param scopes_optional: The scopes_optional of this Session.
        :type scopes_optional: List[str]
        """

        self._scopes_optional = scopes_optional

    @property
    def scopes_required(self):
        """Gets the scopes_required of this Session.


        :return: The scopes_required of this Session.
        :rtype: List[str]
        """
        return self._scopes_required

    @scopes_required.setter
    def scopes_required(self, scopes_required):
        """Sets the scopes_required of this Session.


        :param scopes_required: The scopes_required of this Session.
        :type scopes_required: List[str]
        """

        self._scopes_required = scopes_required

    @property
    def scopes_seen(self):
        """Gets the scopes_seen of this Session.


        :return: The scopes_seen of this Session.
        :rtype: List[str]
        """
        return self._scopes_seen

    @scopes_seen.setter
    def scopes_seen(self, scopes_seen):
        """Sets the scopes_seen of this Session.


        :param scopes_seen: The scopes_seen of this Session.
        :type scopes_seen: List[str]
        """

        self._scopes_seen = scopes_seen

    @property
    def scopes_signed(self):
        """Gets the scopes_signed of this Session.


        :return: The scopes_signed of this Session.
        :rtype: List[str]
        """
        return self._scopes_signed

    @scopes_signed.setter
    def scopes_signed(self, scopes_signed):
        """Sets the scopes_signed of this Session.


        :param scopes_signed: The scopes_signed of this Session.
        :type scopes_signed: List[str]
        """

        self._scopes_signed = scopes_signed

    @property
    def session_id(self):
        """Gets the session_id of this Session.


        :return: The session_id of this Session.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Session.


        :param session_id: The session_id of this Session.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def session_state(self):
        """Gets the session_state of this Session.


        :return: The session_state of this Session.
        :rtype: str
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state):
        """Sets the session_state of this Session.


        :param session_state: The session_state of this Session.
        :type session_state: str
        """

        self._session_state = session_state

    @property
    def session_uri(self):
        """Gets the session_uri of this Session.


        :return: The session_uri of this Session.
        :rtype: str
        """
        return self._session_uri

    @session_uri.setter
    def session_uri(self, session_uri):
        """Sets the session_uri of this Session.


        :param session_uri: The session_uri of this Session.
        :type session_uri: str
        """

        self._session_uri = session_uri

    @property
    def sub(self):
        """Gets the sub of this Session.


        :return: The sub of this Session.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Session.


        :param sub: The sub of this Session.
        :type sub: str
        """

        self._sub = sub

    @property
    def tokens_seen(self):
        """Gets the tokens_seen of this Session.


        :return: The tokens_seen of this Session.
        :rtype: List[str]
        """
        return self._tokens_seen

    @tokens_seen.setter
    def tokens_seen(self, tokens_seen):
        """Sets the tokens_seen of this Session.


        :param tokens_seen: The tokens_seen of this Session.
        :type tokens_seen: List[str]
        """

        self._tokens_seen = tokens_seen

    @property
    def tos_uri(self):
        """Gets the tos_uri of this Session.


        :return: The tos_uri of this Session.
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this Session.


        :param tos_uri: The tos_uri of this Session.
        :type tos_uri: str
        """

        self._tos_uri = tos_uri

    @property
    def version(self):
        """Gets the version of this Session.


        :return: The version of this Session.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Session.


        :param version: The version of this Session.
        :type version: int
        """

        self._version = version
