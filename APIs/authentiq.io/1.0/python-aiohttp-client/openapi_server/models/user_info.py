# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.user_info_aq_location import UserInfoAqLocation
from openapi_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, aqlocation: UserInfoAqLocation=None, email: str=None, email_verified: bool=None, family_name: str=None, given_name: str=None, name: str=None, phone_number: str=None, phone_number_verified: bool=None, sub: str=None):
        """UserInfo - a model defined in OpenAPI

        :param address: The address of this UserInfo.
        :param aqlocation: The aqlocation of this UserInfo.
        :param email: The email of this UserInfo.
        :param email_verified: The email_verified of this UserInfo.
        :param family_name: The family_name of this UserInfo.
        :param given_name: The given_name of this UserInfo.
        :param name: The name of this UserInfo.
        :param phone_number: The phone_number of this UserInfo.
        :param phone_number_verified: The phone_number_verified of this UserInfo.
        :param sub: The sub of this UserInfo.
        """
        self.openapi_types = {
            'address': Address,
            'aqlocation': UserInfoAqLocation,
            'email': str,
            'email_verified': bool,
            'family_name': str,
            'given_name': str,
            'name': str,
            'phone_number': str,
            'phone_number_verified': bool,
            'sub': str
        }

        self.attribute_map = {
            'address': 'address',
            'aqlocation': 'aq:location',
            'email': 'email',
            'email_verified': 'email_verified',
            'family_name': 'family_name',
            'given_name': 'given_name',
            'name': 'name',
            'phone_number': 'phone_number',
            'phone_number_verified': 'phone_number_verified',
            'sub': 'sub'
        }

        self._address = address
        self._aqlocation = aqlocation
        self._email = email
        self._email_verified = email_verified
        self._family_name = family_name
        self._given_name = given_name
        self._name = name
        self._phone_number = phone_number
        self._phone_number_verified = phone_number_verified
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UserInfo.


        :return: The address of this UserInfo.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserInfo.


        :param address: The address of this UserInfo.
        :type address: Address
        """

        self._address = address

    @property
    def aqlocation(self):
        """Gets the aqlocation of this UserInfo.


        :return: The aqlocation of this UserInfo.
        :rtype: UserInfoAqLocation
        """
        return self._aqlocation

    @aqlocation.setter
    def aqlocation(self, aqlocation):
        """Sets the aqlocation of this UserInfo.


        :param aqlocation: The aqlocation of this UserInfo.
        :type aqlocation: UserInfoAqLocation
        """

        self._aqlocation = aqlocation

    @property
    def email(self):
        """Gets the email of this UserInfo.


        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.


        :param email: The email of this UserInfo.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserInfo.


        :return: The email_verified of this UserInfo.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserInfo.


        :param email_verified: The email_verified of this UserInfo.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def family_name(self):
        """Gets the family_name of this UserInfo.


        :return: The family_name of this UserInfo.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserInfo.


        :param family_name: The family_name of this UserInfo.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this UserInfo.


        :return: The given_name of this UserInfo.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserInfo.


        :param given_name: The given_name of this UserInfo.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def name(self):
        """Gets the name of this UserInfo.


        :return: The name of this UserInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInfo.


        :param name: The name of this UserInfo.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this UserInfo.


        :return: The phone_number of this UserInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserInfo.


        :param phone_number: The phone_number of this UserInfo.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this UserInfo.


        :return: The phone_number_verified of this UserInfo.
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this UserInfo.


        :param phone_number_verified: The phone_number_verified of this UserInfo.
        :type phone_number_verified: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def sub(self):
        """Gets the sub of this UserInfo.


        :return: The sub of this UserInfo.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this UserInfo.


        :param sub: The sub of this UserInfo.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub
