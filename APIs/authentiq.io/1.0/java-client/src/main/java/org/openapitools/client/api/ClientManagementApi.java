/*
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Client;
import org.openapitools.client.model.OAuth2Error;
import org.openapitools.client.model.ProblemDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for client
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Client Objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "client_registration_token", "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return clientCall(_callback);

    }

    /**
     * List clients
     * Retrieve a list of clients. 
     * @return List&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Client Objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     */
    public List<Client> client() throws ApiException {
        ApiResponse<List<Client>> localVarResp = clientWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List clients
     * Retrieve a list of clients. 
     * @return ApiResponse&lt;List&lt;Client&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Client Objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Client>> clientWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clientValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List clients (asynchronously)
     * Retrieve a list of clients. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Client Objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAsync(final ApiCallback<List<Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientClientId
     * @param clientId Client identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Client deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Delete a client Documentation</a>
     */
    public okhttp3.Call clientClientIdCall(String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "client_registration_token", "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientClientIdValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientClientId(Async)");
        }

        return clientClientIdCall(clientId, _callback);

    }

    /**
     * Delete a client
     * Delete a previously registered client. 
     * @param clientId Client identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Client deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Delete a client Documentation</a>
     */
    public void clientClientId(String clientId) throws ApiException {
        clientClientIdWithHttpInfo(clientId);
    }

    /**
     * Delete a client
     * Delete a previously registered client. 
     * @param clientId Client identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Client deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Delete a client Documentation</a>
     */
    public ApiResponse<Void> clientClientIdWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = clientClientIdValidateBeforeCall(clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a client (asynchronously)
     * Delete a previously registered client. 
     * @param clientId Client identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Client deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Delete a client Documentation</a>
     */
    public okhttp3.Call clientClientIdAsync(String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientClientIdValidateBeforeCall(clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClient
     * @param client Client Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Client created </td><td>  * Location - URL of new client resource <br>  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Registration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration">Register a client Documentation</a>
     */
    public okhttp3.Call createClientCall(Client client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = client;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "client_registration_token", "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientValidateBeforeCall(Client client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling createClient(Async)");
        }

        return createClientCall(client, _callback);

    }

    /**
     * Register a client
     * Register a new client with this Authentiq Connect provider.  This endpoint is compatible with [OIDC&#39;s Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension. 
     * @param client Client Object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Client created </td><td>  * Location - URL of new client resource <br>  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Registration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration">Register a client Documentation</a>
     */
    public void createClient(Client client) throws ApiException {
        createClientWithHttpInfo(client);
    }

    /**
     * Register a client
     * Register a new client with this Authentiq Connect provider.  This endpoint is compatible with [OIDC&#39;s Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension. 
     * @param client Client Object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Client created </td><td>  * Location - URL of new client resource <br>  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Registration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration">Register a client Documentation</a>
     */
    public ApiResponse<Void> createClientWithHttpInfo(Client client) throws ApiException {
        okhttp3.Call localVarCall = createClientValidateBeforeCall(client, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a client (asynchronously)
     * Register a new client with this Authentiq Connect provider.  This endpoint is compatible with [OIDC&#39;s Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension. 
     * @param client Client Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Client created </td><td>  * Location - URL of new client resource <br>  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Registration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration">Register a client Documentation</a>
     */
    public okhttp3.Call createClientAsync(Client client, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientValidateBeforeCall(client, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClient
     * @param clientId Client identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">View a client Documentation</a>
     */
    public okhttp3.Call getClientCall(String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "client_registration_token", "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClient(Async)");
        }

        return getClientCall(clientId, _callback);

    }

    /**
     * View a client
     * Retrieve the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">View a client Documentation</a>
     */
    public Client getClient(String clientId) throws ApiException {
        ApiResponse<Client> localVarResp = getClientWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * View a client
     * Retrieve the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">View a client Documentation</a>
     */
    public ApiResponse<Client> getClientWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = getClientValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a client (asynchronously)
     * Retrieve the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">View a client Documentation</a>
     */
    public okhttp3.Call getClientAsync(String clientId, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClient
     * @param clientId Client identifier (required)
     * @param client Client Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Update a client Documentation</a>
     */
    public okhttp3.Call updateClientCall(String clientId, Client client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = client;

        // create path and map variables
        String localVarPath = "/client/{client_id}"
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "client_registration_token", "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientValidateBeforeCall(String clientId, Client client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClient(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling updateClient(Async)");
        }

        return updateClientCall(clientId, client, _callback);

    }

    /**
     * Update a client
     * Update the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @param client Client Object (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Update a client Documentation</a>
     */
    public Client updateClient(String clientId, Client client) throws ApiException {
        ApiResponse<Client> localVarResp = updateClientWithHttpInfo(clientId, client);
        return localVarResp.getData();
    }

    /**
     * Update a client
     * Update the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @param client Client Object (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Update a client Documentation</a>
     */
    public ApiResponse<Client> updateClientWithHttpInfo(String clientId, Client client) throws ApiException {
        okhttp3.Call localVarCall = updateClientValidateBeforeCall(clientId, client, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a client (asynchronously)
     * Update the configuration of a previously registered client. 
     * @param clientId Client identifier (required)
     * @param client Client Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Problem Detail error response </td><td>  -  </td></tr>
     </table>
     * OIDC Client Configuration Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint">Update a client Documentation</a>
     */
    public okhttp3.Call updateClientAsync(String clientId, Client client, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientValidateBeforeCall(clientId, client, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
