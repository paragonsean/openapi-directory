/*
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Session object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:45.732506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_AUTHENTICATED_AT = "authenticated_at";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED_AT)
  private OffsetDateTime authenticatedAt;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "client_name";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_URI = "client_uri";
  @SerializedName(SERIALIZED_NAME_CLIENT_URI)
  private String clientUri;

  public static final String SERIALIZED_NAME_CONCLUDED_AT = "concluded_at";
  @SerializedName(SERIALIZED_NAME_CONCLUDED_AT)
  private OffsetDateTime concludedAt;

  public static final String SERIALIZED_NAME_CONNECTED_AT = "connected_at";
  @SerializedName(SERIALIZED_NAME_CONNECTED_AT)
  private OffsetDateTime connectedAt;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<String> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_LOGO_URI = "logo_uri";
  @SerializedName(SERIALIZED_NAME_LOGO_URI)
  private String logoUri;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_POLICY_URI = "policy_uri";
  @SerializedName(SERIALIZED_NAME_POLICY_URI)
  private String policyUri;

  public static final String SERIALIZED_NAME_REDIRECT_URI = "redirect_uri";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URI)
  private String redirectUri;

  public static final String SERIALIZED_NAME_RESPONSE_MODE = "response_mode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODE)
  private String responseMode;

  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "response_type";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  private String responseType;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES_OPTIONAL = "scopes_optional";
  @SerializedName(SERIALIZED_NAME_SCOPES_OPTIONAL)
  private List<String> scopesOptional = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES_REQUIRED = "scopes_required";
  @SerializedName(SERIALIZED_NAME_SCOPES_REQUIRED)
  private List<String> scopesRequired = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES_SEEN = "scopes_seen";
  @SerializedName(SERIALIZED_NAME_SCOPES_SEEN)
  private List<String> scopesSeen = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES_SIGNED = "scopes_signed";
  @SerializedName(SERIALIZED_NAME_SCOPES_SIGNED)
  private List<String> scopesSigned = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SESSION_STATE = "session_state";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE)
  private String sessionState;

  public static final String SERIALIZED_NAME_SESSION_URI = "session_uri";
  @SerializedName(SERIALIZED_NAME_SESSION_URI)
  private String sessionUri;

  public static final String SERIALIZED_NAME_SUB = "sub";
  @SerializedName(SERIALIZED_NAME_SUB)
  private String sub;

  public static final String SERIALIZED_NAME_TOKENS_SEEN = "tokens_seen";
  @SerializedName(SERIALIZED_NAME_TOKENS_SEEN)
  private List<String> tokensSeen = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOS_URI = "tos_uri";
  @SerializedName(SERIALIZED_NAME_TOS_URI)
  private String tosUri;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Session() {
  }

  public Session authenticatedAt(OffsetDateTime authenticatedAt) {
    this.authenticatedAt = authenticatedAt;
    return this;
  }

  /**
   * Get authenticatedAt
   * @return authenticatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAuthenticatedAt() {
    return authenticatedAt;
  }

  public void setAuthenticatedAt(OffsetDateTime authenticatedAt) {
    this.authenticatedAt = authenticatedAt;
  }


  public Session clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Session clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Get clientName
   * @return clientName
   */
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public Session clientUri(String clientUri) {
    this.clientUri = clientUri;
    return this;
  }

  /**
   * Get clientUri
   * @return clientUri
   */
  @javax.annotation.Nullable
  public String getClientUri() {
    return clientUri;
  }

  public void setClientUri(String clientUri) {
    this.clientUri = clientUri;
  }


  public Session concludedAt(OffsetDateTime concludedAt) {
    this.concludedAt = concludedAt;
    return this;
  }

  /**
   * Get concludedAt
   * @return concludedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConcludedAt() {
    return concludedAt;
  }

  public void setConcludedAt(OffsetDateTime concludedAt) {
    this.concludedAt = concludedAt;
  }


  public Session connectedAt(OffsetDateTime connectedAt) {
    this.connectedAt = connectedAt;
    return this;
  }

  /**
   * Get connectedAt
   * @return connectedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConnectedAt() {
    return connectedAt;
  }

  public void setConnectedAt(OffsetDateTime connectedAt) {
    this.connectedAt = connectedAt;
  }


  public Session contacts(List<String> contacts) {
    this.contacts = contacts;
    return this;
  }

  public Session addContactsItem(String contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<String> getContacts() {
    return contacts;
  }

  public void setContacts(List<String> contacts) {
    this.contacts = contacts;
  }


  public Session createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Session deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public Session logoUri(String logoUri) {
    this.logoUri = logoUri;
    return this;
  }

  /**
   * Get logoUri
   * @return logoUri
   */
  @javax.annotation.Nullable
  public String getLogoUri() {
    return logoUri;
  }

  public void setLogoUri(String logoUri) {
    this.logoUri = logoUri;
  }


  public Session nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public Session policyUri(String policyUri) {
    this.policyUri = policyUri;
    return this;
  }

  /**
   * Get policyUri
   * @return policyUri
   */
  @javax.annotation.Nullable
  public String getPolicyUri() {
    return policyUri;
  }

  public void setPolicyUri(String policyUri) {
    this.policyUri = policyUri;
  }


  public Session redirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
    return this;
  }

  /**
   * Get redirectUri
   * @return redirectUri
   */
  @javax.annotation.Nullable
  public String getRedirectUri() {
    return redirectUri;
  }

  public void setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
  }


  public Session responseMode(String responseMode) {
    this.responseMode = responseMode;
    return this;
  }

  /**
   * Get responseMode
   * @return responseMode
   */
  @javax.annotation.Nullable
  public String getResponseMode() {
    return responseMode;
  }

  public void setResponseMode(String responseMode) {
    this.responseMode = responseMode;
  }


  public Session responseType(String responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * Get responseType
   * @return responseType
   */
  @javax.annotation.Nullable
  public String getResponseType() {
    return responseType;
  }

  public void setResponseType(String responseType) {
    this.responseType = responseType;
  }


  public Session scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Session addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public Session scopesOptional(List<String> scopesOptional) {
    this.scopesOptional = scopesOptional;
    return this;
  }

  public Session addScopesOptionalItem(String scopesOptionalItem) {
    if (this.scopesOptional == null) {
      this.scopesOptional = new ArrayList<>();
    }
    this.scopesOptional.add(scopesOptionalItem);
    return this;
  }

  /**
   * Get scopesOptional
   * @return scopesOptional
   */
  @javax.annotation.Nullable
  public List<String> getScopesOptional() {
    return scopesOptional;
  }

  public void setScopesOptional(List<String> scopesOptional) {
    this.scopesOptional = scopesOptional;
  }


  public Session scopesRequired(List<String> scopesRequired) {
    this.scopesRequired = scopesRequired;
    return this;
  }

  public Session addScopesRequiredItem(String scopesRequiredItem) {
    if (this.scopesRequired == null) {
      this.scopesRequired = new ArrayList<>();
    }
    this.scopesRequired.add(scopesRequiredItem);
    return this;
  }

  /**
   * Get scopesRequired
   * @return scopesRequired
   */
  @javax.annotation.Nullable
  public List<String> getScopesRequired() {
    return scopesRequired;
  }

  public void setScopesRequired(List<String> scopesRequired) {
    this.scopesRequired = scopesRequired;
  }


  public Session scopesSeen(List<String> scopesSeen) {
    this.scopesSeen = scopesSeen;
    return this;
  }

  public Session addScopesSeenItem(String scopesSeenItem) {
    if (this.scopesSeen == null) {
      this.scopesSeen = new ArrayList<>();
    }
    this.scopesSeen.add(scopesSeenItem);
    return this;
  }

  /**
   * Get scopesSeen
   * @return scopesSeen
   */
  @javax.annotation.Nullable
  public List<String> getScopesSeen() {
    return scopesSeen;
  }

  public void setScopesSeen(List<String> scopesSeen) {
    this.scopesSeen = scopesSeen;
  }


  public Session scopesSigned(List<String> scopesSigned) {
    this.scopesSigned = scopesSigned;
    return this;
  }

  public Session addScopesSignedItem(String scopesSignedItem) {
    if (this.scopesSigned == null) {
      this.scopesSigned = new ArrayList<>();
    }
    this.scopesSigned.add(scopesSignedItem);
    return this;
  }

  /**
   * Get scopesSigned
   * @return scopesSigned
   */
  @javax.annotation.Nullable
  public List<String> getScopesSigned() {
    return scopesSigned;
  }

  public void setScopesSigned(List<String> scopesSigned) {
    this.scopesSigned = scopesSigned;
  }


  public Session sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public Session sessionState(String sessionState) {
    this.sessionState = sessionState;
    return this;
  }

  /**
   * Get sessionState
   * @return sessionState
   */
  @javax.annotation.Nullable
  public String getSessionState() {
    return sessionState;
  }

  public void setSessionState(String sessionState) {
    this.sessionState = sessionState;
  }


  public Session sessionUri(String sessionUri) {
    this.sessionUri = sessionUri;
    return this;
  }

  /**
   * Get sessionUri
   * @return sessionUri
   */
  @javax.annotation.Nullable
  public String getSessionUri() {
    return sessionUri;
  }

  public void setSessionUri(String sessionUri) {
    this.sessionUri = sessionUri;
  }


  public Session sub(String sub) {
    this.sub = sub;
    return this;
  }

  /**
   * Get sub
   * @return sub
   */
  @javax.annotation.Nullable
  public String getSub() {
    return sub;
  }

  public void setSub(String sub) {
    this.sub = sub;
  }


  public Session tokensSeen(List<String> tokensSeen) {
    this.tokensSeen = tokensSeen;
    return this;
  }

  public Session addTokensSeenItem(String tokensSeenItem) {
    if (this.tokensSeen == null) {
      this.tokensSeen = new ArrayList<>();
    }
    this.tokensSeen.add(tokensSeenItem);
    return this;
  }

  /**
   * Get tokensSeen
   * @return tokensSeen
   */
  @javax.annotation.Nullable
  public List<String> getTokensSeen() {
    return tokensSeen;
  }

  public void setTokensSeen(List<String> tokensSeen) {
    this.tokensSeen = tokensSeen;
  }


  public Session tosUri(String tosUri) {
    this.tosUri = tosUri;
    return this;
  }

  /**
   * Get tosUri
   * @return tosUri
   */
  @javax.annotation.Nullable
  public String getTosUri() {
    return tosUri;
  }

  public void setTosUri(String tosUri) {
    this.tosUri = tosUri;
  }


  public Session version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.authenticatedAt, session.authenticatedAt) &&
        Objects.equals(this.clientId, session.clientId) &&
        Objects.equals(this.clientName, session.clientName) &&
        Objects.equals(this.clientUri, session.clientUri) &&
        Objects.equals(this.concludedAt, session.concludedAt) &&
        Objects.equals(this.connectedAt, session.connectedAt) &&
        Objects.equals(this.contacts, session.contacts) &&
        Objects.equals(this.createdAt, session.createdAt) &&
        Objects.equals(this.deletedAt, session.deletedAt) &&
        Objects.equals(this.logoUri, session.logoUri) &&
        Objects.equals(this.nonce, session.nonce) &&
        Objects.equals(this.policyUri, session.policyUri) &&
        Objects.equals(this.redirectUri, session.redirectUri) &&
        Objects.equals(this.responseMode, session.responseMode) &&
        Objects.equals(this.responseType, session.responseType) &&
        Objects.equals(this.scopes, session.scopes) &&
        Objects.equals(this.scopesOptional, session.scopesOptional) &&
        Objects.equals(this.scopesRequired, session.scopesRequired) &&
        Objects.equals(this.scopesSeen, session.scopesSeen) &&
        Objects.equals(this.scopesSigned, session.scopesSigned) &&
        Objects.equals(this.sessionId, session.sessionId) &&
        Objects.equals(this.sessionState, session.sessionState) &&
        Objects.equals(this.sessionUri, session.sessionUri) &&
        Objects.equals(this.sub, session.sub) &&
        Objects.equals(this.tokensSeen, session.tokensSeen) &&
        Objects.equals(this.tosUri, session.tosUri) &&
        Objects.equals(this.version, session.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticatedAt, clientId, clientName, clientUri, concludedAt, connectedAt, contacts, createdAt, deletedAt, logoUri, nonce, policyUri, redirectUri, responseMode, responseType, scopes, scopesOptional, scopesRequired, scopesSeen, scopesSigned, sessionId, sessionState, sessionUri, sub, tokensSeen, tosUri, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    authenticatedAt: ").append(toIndentedString(authenticatedAt)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientUri: ").append(toIndentedString(clientUri)).append("\n");
    sb.append("    concludedAt: ").append(toIndentedString(concludedAt)).append("\n");
    sb.append("    connectedAt: ").append(toIndentedString(connectedAt)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    logoUri: ").append(toIndentedString(logoUri)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    policyUri: ").append(toIndentedString(policyUri)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("    responseMode: ").append(toIndentedString(responseMode)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    scopesOptional: ").append(toIndentedString(scopesOptional)).append("\n");
    sb.append("    scopesRequired: ").append(toIndentedString(scopesRequired)).append("\n");
    sb.append("    scopesSeen: ").append(toIndentedString(scopesSeen)).append("\n");
    sb.append("    scopesSigned: ").append(toIndentedString(scopesSigned)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    sessionState: ").append(toIndentedString(sessionState)).append("\n");
    sb.append("    sessionUri: ").append(toIndentedString(sessionUri)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    tokensSeen: ").append(toIndentedString(tokensSeen)).append("\n");
    sb.append("    tosUri: ").append(toIndentedString(tosUri)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticated_at");
    openapiFields.add("client_id");
    openapiFields.add("client_name");
    openapiFields.add("client_uri");
    openapiFields.add("concluded_at");
    openapiFields.add("connected_at");
    openapiFields.add("contacts");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("logo_uri");
    openapiFields.add("nonce");
    openapiFields.add("policy_uri");
    openapiFields.add("redirect_uri");
    openapiFields.add("response_mode");
    openapiFields.add("response_type");
    openapiFields.add("scopes");
    openapiFields.add("scopes_optional");
    openapiFields.add("scopes_required");
    openapiFields.add("scopes_seen");
    openapiFields.add("scopes_signed");
    openapiFields.add("session_id");
    openapiFields.add("session_state");
    openapiFields.add("session_uri");
    openapiFields.add("sub");
    openapiFields.add("tokens_seen");
    openapiFields.add("tos_uri");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_name") != null && !jsonObj.get("client_name").isJsonNull()) && !jsonObj.get("client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_name").toString()));
      }
      if ((jsonObj.get("client_uri") != null && !jsonObj.get("client_uri").isJsonNull()) && !jsonObj.get("client_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull() && !jsonObj.get("contacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("logo_uri") != null && !jsonObj.get("logo_uri").isJsonNull()) && !jsonObj.get("logo_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_uri").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("policy_uri") != null && !jsonObj.get("policy_uri").isJsonNull()) && !jsonObj.get("policy_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_uri").toString()));
      }
      if ((jsonObj.get("redirect_uri") != null && !jsonObj.get("redirect_uri").isJsonNull()) && !jsonObj.get("redirect_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_uri").toString()));
      }
      if ((jsonObj.get("response_mode") != null && !jsonObj.get("response_mode").isJsonNull()) && !jsonObj.get("response_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_mode").toString()));
      }
      if ((jsonObj.get("response_type") != null && !jsonObj.get("response_type").isJsonNull()) && !jsonObj.get("response_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_optional") != null && !jsonObj.get("scopes_optional").isJsonNull() && !jsonObj.get("scopes_optional").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_optional` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_optional").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_required") != null && !jsonObj.get("scopes_required").isJsonNull() && !jsonObj.get("scopes_required").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_required` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_required").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_seen") != null && !jsonObj.get("scopes_seen").isJsonNull() && !jsonObj.get("scopes_seen").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_seen` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_seen").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_signed") != null && !jsonObj.get("scopes_signed").isJsonNull() && !jsonObj.get("scopes_signed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_signed` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_signed").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("session_state") != null && !jsonObj.get("session_state").isJsonNull()) && !jsonObj.get("session_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_state").toString()));
      }
      if ((jsonObj.get("session_uri") != null && !jsonObj.get("session_uri").isJsonNull()) && !jsonObj.get("session_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_uri").toString()));
      }
      if ((jsonObj.get("sub") != null && !jsonObj.get("sub").isJsonNull()) && !jsonObj.get("sub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tokens_seen") != null && !jsonObj.get("tokens_seen").isJsonNull() && !jsonObj.get("tokens_seen").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokens_seen` to be an array in the JSON string but got `%s`", jsonObj.get("tokens_seen").toString()));
      }
      if ((jsonObj.get("tos_uri") != null && !jsonObj.get("tos_uri").isJsonNull()) && !jsonObj.get("tos_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tos_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tos_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

