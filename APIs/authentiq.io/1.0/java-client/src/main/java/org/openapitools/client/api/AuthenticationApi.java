/*
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OAuth2Error;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.UserInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorize
     * @param clientId A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
     * @param responseType The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set.  (required)
     * @param scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC.  (required)
     * @param redirectUri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
     * @param state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
     * @param responseMode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types.  (optional)
     * @param nonce An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.  (optional)
     * @param display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;.  (optional, default to page)
     * @param prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session.  (optional, default to login)
     * @param maxAge Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.  (optional, default to 0)
     * @param uiLocales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> A successful or erroneous authentication response.  </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> *Sign in with Authentiq* page, popup or modal.  </td><td>  -  </td></tr>
     </table>
     * OIDC Authorization Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint">Authenticate a user Documentation</a>
     */
    public okhttp3.Call authorizeCall(String clientId, String responseType, String scope, String redirectUri, String state, String responseMode, String nonce, String display, String prompt, Integer maxAge, String uiLocales, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (responseMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_mode", responseMode));
        }

        if (nonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonce", nonce));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (prompt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prompt", prompt));
        }

        if (maxAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_age", maxAge));
        }

        if (uiLocales != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ui_locales", uiLocales));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeValidateBeforeCall(String clientId, String responseType, String scope, String redirectUri, String state, String responseMode, String nonce, String display, String prompt, Integer maxAge, String uiLocales, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorize(Async)");
        }

        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling authorize(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling authorize(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling authorize(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling authorize(Async)");
        }

        return authorizeCall(clientId, responseType, scope, redirectUri, state, responseMode, nonce, display, prompt, maxAge, uiLocales, _callback);

    }

    /**
     * Authenticate a user
     * Start a session with Authentiq Connect to authenticate a user.  &#x60;&#x60;&#x60; GET https://connect.authentiq.io/authorize?client_id&#x3D;&lt;your-client-id&gt;&amp;response_type&#x3D;code+id_token&amp;scope&#x3D;openid+email&amp;redirect_uri&#x3D;&lt;your-redirect-uri&gt;&amp;state&#x3D;0123456789 &#x60;&#x60;&#x60;  This endpoint also supports the POST method. 
     * @param clientId A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
     * @param responseType The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set.  (required)
     * @param scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC.  (required)
     * @param redirectUri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
     * @param state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
     * @param responseMode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types.  (optional)
     * @param nonce An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.  (optional)
     * @param display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;.  (optional, default to page)
     * @param prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session.  (optional, default to login)
     * @param maxAge Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.  (optional, default to 0)
     * @param uiLocales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> A successful or erroneous authentication response.  </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> *Sign in with Authentiq* page, popup or modal.  </td><td>  -  </td></tr>
     </table>
     * OIDC Authorization Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint">Authenticate a user Documentation</a>
     */
    public void authorize(String clientId, String responseType, String scope, String redirectUri, String state, String responseMode, String nonce, String display, String prompt, Integer maxAge, String uiLocales) throws ApiException {
        authorizeWithHttpInfo(clientId, responseType, scope, redirectUri, state, responseMode, nonce, display, prompt, maxAge, uiLocales);
    }

    /**
     * Authenticate a user
     * Start a session with Authentiq Connect to authenticate a user.  &#x60;&#x60;&#x60; GET https://connect.authentiq.io/authorize?client_id&#x3D;&lt;your-client-id&gt;&amp;response_type&#x3D;code+id_token&amp;scope&#x3D;openid+email&amp;redirect_uri&#x3D;&lt;your-redirect-uri&gt;&amp;state&#x3D;0123456789 &#x60;&#x60;&#x60;  This endpoint also supports the POST method. 
     * @param clientId A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
     * @param responseType The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set.  (required)
     * @param scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC.  (required)
     * @param redirectUri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
     * @param state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
     * @param responseMode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types.  (optional)
     * @param nonce An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.  (optional)
     * @param display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;.  (optional, default to page)
     * @param prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session.  (optional, default to login)
     * @param maxAge Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.  (optional, default to 0)
     * @param uiLocales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> A successful or erroneous authentication response.  </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> *Sign in with Authentiq* page, popup or modal.  </td><td>  -  </td></tr>
     </table>
     * OIDC Authorization Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint">Authenticate a user Documentation</a>
     */
    public ApiResponse<Void> authorizeWithHttpInfo(String clientId, String responseType, String scope, String redirectUri, String state, String responseMode, String nonce, String display, String prompt, Integer maxAge, String uiLocales) throws ApiException {
        okhttp3.Call localVarCall = authorizeValidateBeforeCall(clientId, responseType, scope, redirectUri, state, responseMode, nonce, display, prompt, maxAge, uiLocales, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Authenticate a user (asynchronously)
     * Start a session with Authentiq Connect to authenticate a user.  &#x60;&#x60;&#x60; GET https://connect.authentiq.io/authorize?client_id&#x3D;&lt;your-client-id&gt;&amp;response_type&#x3D;code+id_token&amp;scope&#x3D;openid+email&amp;redirect_uri&#x3D;&lt;your-redirect-uri&gt;&amp;state&#x3D;0123456789 &#x60;&#x60;&#x60;  This endpoint also supports the POST method. 
     * @param clientId A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
     * @param responseType The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set.  (required)
     * @param scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC.  (required)
     * @param redirectUri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
     * @param state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
     * @param responseMode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types.  (optional)
     * @param nonce An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.  (optional)
     * @param display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;.  (optional, default to page)
     * @param prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session.  (optional, default to login)
     * @param maxAge Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.  (optional, default to 0)
     * @param uiLocales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> A successful or erroneous authentication response.  </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> *Sign in with Authentiq* page, popup or modal.  </td><td>  -  </td></tr>
     </table>
     * OIDC Authorization Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint">Authenticate a user Documentation</a>
     */
    public okhttp3.Call authorizeAsync(String clientId, String responseType, String scope, String redirectUri, String state, String responseMode, String nonce, String display, String prompt, Integer maxAge, String uiLocales, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeValidateBeforeCall(clientId, responseType, scope, redirectUri, state, responseMode, nonce, display, prompt, maxAge, uiLocales, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for token
     * @param clientId The registered client ID.  (required)
     * @param clientSecret The registered client ID secret.  (required)
     * @param code The authorization code previously obtained from the Authentication endpoint.  (required)
     * @param grantType The authorization grant type, must be &#x60;authorization_code&#x60;.  (required)
     * @param redirectUri The redirect URL that was used previously with the Authentication endpoint.  (required)
     * @param authorization HTTP Basic authorization header.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Token Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint">Obtain an ID Token Documentation</a>
     */
    public okhttp3.Call tokenCall(String clientId, String clientSecret, String code, String grantType, String redirectUri, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenValidateBeforeCall(String clientId, String clientSecret, String code, String grantType, String redirectUri, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling token(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling token(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling token(Async)");
        }

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling token(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling token(Async)");
        }

        return tokenCall(clientId, clientSecret, code, grantType, redirectUri, authorization, _callback);

    }

    /**
     * Obtain an ID Token
     * Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both &#x60;client_secret_basic&#x60; (default) and &#x60;client_secret_basic&#x60; authentication methods, as specified by the client&#39;s &#x60;token_endpoint_auth_method&#x60;. 
     * @param clientId The registered client ID.  (required)
     * @param clientSecret The registered client ID secret.  (required)
     * @param code The authorization code previously obtained from the Authentication endpoint.  (required)
     * @param grantType The authorization grant type, must be &#x60;authorization_code&#x60;.  (required)
     * @param redirectUri The redirect URL that was used previously with the Authentication endpoint.  (required)
     * @param authorization HTTP Basic authorization header.  (optional)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Token Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint">Obtain an ID Token Documentation</a>
     */
    public Token token(String clientId, String clientSecret, String code, String grantType, String redirectUri, String authorization) throws ApiException {
        ApiResponse<Token> localVarResp = tokenWithHttpInfo(clientId, clientSecret, code, grantType, redirectUri, authorization);
        return localVarResp.getData();
    }

    /**
     * Obtain an ID Token
     * Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both &#x60;client_secret_basic&#x60; (default) and &#x60;client_secret_basic&#x60; authentication methods, as specified by the client&#39;s &#x60;token_endpoint_auth_method&#x60;. 
     * @param clientId The registered client ID.  (required)
     * @param clientSecret The registered client ID secret.  (required)
     * @param code The authorization code previously obtained from the Authentication endpoint.  (required)
     * @param grantType The authorization grant type, must be &#x60;authorization_code&#x60;.  (required)
     * @param redirectUri The redirect URL that was used previously with the Authentication endpoint.  (required)
     * @param authorization HTTP Basic authorization header.  (optional)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Token Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint">Obtain an ID Token Documentation</a>
     */
    public ApiResponse<Token> tokenWithHttpInfo(String clientId, String clientSecret, String code, String grantType, String redirectUri, String authorization) throws ApiException {
        okhttp3.Call localVarCall = tokenValidateBeforeCall(clientId, clientSecret, code, grantType, redirectUri, authorization, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain an ID Token (asynchronously)
     * Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both &#x60;client_secret_basic&#x60; (default) and &#x60;client_secret_basic&#x60; authentication methods, as specified by the client&#39;s &#x60;token_endpoint_auth_method&#x60;. 
     * @param clientId The registered client ID.  (required)
     * @param clientSecret The registered client ID secret.  (required)
     * @param code The authorization code previously obtained from the Authentication endpoint.  (required)
     * @param grantType The authorization grant type, must be &#x60;authorization_code&#x60;.  (required)
     * @param redirectUri The redirect URL that was used previously with the Authentication endpoint.  (required)
     * @param authorization HTTP Basic authorization header.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC Token Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint">Obtain an ID Token Documentation</a>
     */
    public okhttp3.Call tokenAsync(String clientId, String clientSecret, String code, String grantType, String redirectUri, String authorization, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenValidateBeforeCall(clientId, clientSecret, code, grantType, redirectUri, authorization, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserInfo response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC UserInfo Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#UserInfo">Retrieve a user profile Documentation</a>
     */
    public okhttp3.Call userInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json",
            "application/x-www-form-urlencoded",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_code", "oauth_implicit" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userInfoCall(_callback);

    }

    /**
     * Retrieve a user profile
     * Use this endpoint to retrieve a user&#39;s profile in case you are unable to parse an ID Token or you&#39;ve not already obtained enough details from the ID Token via the Token Endpoint. 
     * @return UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserInfo response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC UserInfo Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#UserInfo">Retrieve a user profile Documentation</a>
     */
    public UserInfo userInfo() throws ApiException {
        ApiResponse<UserInfo> localVarResp = userInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve a user profile
     * Use this endpoint to retrieve a user&#39;s profile in case you are unable to parse an ID Token or you&#39;ve not already obtained enough details from the ID Token via the Token Endpoint. 
     * @return ApiResponse&lt;UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserInfo response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC UserInfo Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#UserInfo">Retrieve a user profile Documentation</a>
     */
    public ApiResponse<UserInfo> userInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user profile (asynchronously)
     * Use this endpoint to retrieve a user&#39;s profile in case you are unable to parse an ID Token or you&#39;ve not already obtained enough details from the ID Token via the Token Endpoint. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserInfo response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OAuth 2.0 error response </td><td>  -  </td></tr>
     </table>
     * OIDC UserInfo Endpoint
     * @see <a href="http://openid.net/specs/openid-connect-core-1_0.html#UserInfo">Retrieve a user profile Documentation</a>
     */
    public okhttp3.Call userInfoAsync(final ApiCallback<UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = userInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
