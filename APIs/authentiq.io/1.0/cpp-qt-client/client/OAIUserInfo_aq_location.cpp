/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo_aq_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo_aq_location::OAIUserInfo_aq_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo_aq_location::OAIUserInfo_aq_location() {
    this->initializeModel();
}

OAIUserInfo_aq_location::~OAIUserInfo_aq_location() {}

void OAIUserInfo_aq_location::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIUserInfo_aq_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo_aq_location::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAIUserInfo_aq_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo_aq_location::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

OAIAddress OAIUserInfo_aq_location::getAddress() const {
    return m_address;
}
void OAIUserInfo_aq_location::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUserInfo_aq_location::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUserInfo_aq_location::is_address_Valid() const{
    return m_address_isValid;
}

float OAIUserInfo_aq_location::getLatitude() const {
    return m_latitude;
}
void OAIUserInfo_aq_location::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIUserInfo_aq_location::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIUserInfo_aq_location::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAIUserInfo_aq_location::getLongitude() const {
    return m_longitude;
}
void OAIUserInfo_aq_location::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIUserInfo_aq_location::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIUserInfo_aq_location::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIUserInfo_aq_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo_aq_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
