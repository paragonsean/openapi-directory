/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOAuth2Error.h"
#include "OAIToken.h"
#include "OAIUserInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  response_type QString [required]
    * @param[in]  scope QString [required]
    * @param[in]  redirect_uri QString [required]
    * @param[in]  state QString [required]
    * @param[in]  response_mode QString [optional]
    * @param[in]  nonce QString [optional]
    * @param[in]  display QString [optional]
    * @param[in]  prompt QString [optional]
    * @param[in]  max_age qint32 [optional]
    * @param[in]  ui_locales QString [optional]
    */
    virtual void authorize(const QString &client_id, const QString &response_type, const QString &scope, const QString &redirect_uri, const QString &state, const ::OpenAPI::OptionalParam<QString> &response_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prompt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_age = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ui_locales = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  client_secret QString [required]
    * @param[in]  code QString [required]
    * @param[in]  grant_type QString [required]
    * @param[in]  redirect_uri QString [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void token(const QString &client_id, const QString &client_secret, const QString &code, const QString &grant_type, const QString &redirect_uri, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());


    virtual void userInfo();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizeCallback(OAIHttpRequestWorker *worker);
    void tokenCallback(OAIHttpRequestWorker *worker);
    void userInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizeSignal();
    void tokenSignal(OAIToken summary);
    void userInfoSignal(OAIUserInfo summary);


    void authorizeSignalFull(OAIHttpRequestWorker *worker);
    void tokenSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void userInfoSignalFull(OAIHttpRequestWorker *worker, OAIUserInfo summary);

    Q_DECL_DEPRECATED_X("Use authorizeSignalError() instead")
    void authorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokenSignalError() instead")
    void tokenSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInfoSignalError() instead")
    void userInfoSignalE(OAIUserInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userInfoSignalError(OAIUserInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizeSignalErrorFull() instead")
    void authorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokenSignalErrorFull() instead")
    void tokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInfoSignalErrorFull() instead")
    void userInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
