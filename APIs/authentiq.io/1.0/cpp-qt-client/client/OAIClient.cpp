/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClient::OAIClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClient::OAIClient() {
    this->initializeModel();
}

OAIClient::~OAIClient() {}

void OAIClient::initializeModel() {

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_uri_isSet = false;
    m_client_uri_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_default_max_age_isSet = false;
    m_default_max_age_isValid = false;

    m_default_scopes_isSet = false;
    m_default_scopes_isValid = false;

    m_grant_types_isSet = false;
    m_grant_types_isValid = false;

    m_logo_uri_isSet = false;
    m_logo_uri_isValid = false;

    m_policy_uri_isSet = false;
    m_policy_uri_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;

    m_response_types_isSet = false;
    m_response_types_isValid = false;

    m_tos_uri_isSet = false;
    m_tos_uri_isValid = false;
}

void OAIClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClient::fromJsonObject(QJsonObject json) {

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("application_type")]);
    m_application_type_isSet = !json[QString("application_type")].isNull() && m_application_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("client_name")]);
    m_client_name_isSet = !json[QString("client_name")].isNull() && m_client_name_isValid;

    m_client_uri_isValid = ::OpenAPI::fromJsonValue(m_client_uri, json[QString("client_uri")]);
    m_client_uri_isSet = !json[QString("client_uri")].isNull() && m_client_uri_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_default_max_age_isValid = ::OpenAPI::fromJsonValue(m_default_max_age, json[QString("default_max_age")]);
    m_default_max_age_isSet = !json[QString("default_max_age")].isNull() && m_default_max_age_isValid;

    m_default_scopes_isValid = ::OpenAPI::fromJsonValue(m_default_scopes, json[QString("default_scopes")]);
    m_default_scopes_isSet = !json[QString("default_scopes")].isNull() && m_default_scopes_isValid;

    m_grant_types_isValid = ::OpenAPI::fromJsonValue(m_grant_types, json[QString("grant_types")]);
    m_grant_types_isSet = !json[QString("grant_types")].isNull() && m_grant_types_isValid;

    m_logo_uri_isValid = ::OpenAPI::fromJsonValue(m_logo_uri, json[QString("logo_uri")]);
    m_logo_uri_isSet = !json[QString("logo_uri")].isNull() && m_logo_uri_isValid;

    m_policy_uri_isValid = ::OpenAPI::fromJsonValue(m_policy_uri, json[QString("policy_uri")]);
    m_policy_uri_isSet = !json[QString("policy_uri")].isNull() && m_policy_uri_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirect_uris")]);
    m_redirect_uris_isSet = !json[QString("redirect_uris")].isNull() && m_redirect_uris_isValid;

    m_response_types_isValid = ::OpenAPI::fromJsonValue(m_response_types, json[QString("response_types")]);
    m_response_types_isSet = !json[QString("response_types")].isNull() && m_response_types_isValid;

    m_tos_uri_isValid = ::OpenAPI::fromJsonValue(m_tos_uri, json[QString("tos_uri")]);
    m_tos_uri_isSet = !json[QString("tos_uri")].isNull() && m_tos_uri_isValid;
}

QString OAIClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClient::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_isSet) {
        obj.insert(QString("application_type"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("client_name"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_uri_isSet) {
        obj.insert(QString("client_uri"), ::OpenAPI::toJsonValue(m_client_uri));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_default_max_age_isSet) {
        obj.insert(QString("default_max_age"), ::OpenAPI::toJsonValue(m_default_max_age));
    }
    if (m_default_scopes.size() > 0) {
        obj.insert(QString("default_scopes"), ::OpenAPI::toJsonValue(m_default_scopes));
    }
    if (m_grant_types.size() > 0) {
        obj.insert(QString("grant_types"), ::OpenAPI::toJsonValue(m_grant_types));
    }
    if (m_logo_uri_isSet) {
        obj.insert(QString("logo_uri"), ::OpenAPI::toJsonValue(m_logo_uri));
    }
    if (m_policy_uri_isSet) {
        obj.insert(QString("policy_uri"), ::OpenAPI::toJsonValue(m_policy_uri));
    }
    if (m_redirect_uris.size() > 0) {
        obj.insert(QString("redirect_uris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    if (m_response_types.size() > 0) {
        obj.insert(QString("response_types"), ::OpenAPI::toJsonValue(m_response_types));
    }
    if (m_tos_uri_isSet) {
        obj.insert(QString("tos_uri"), ::OpenAPI::toJsonValue(m_tos_uri));
    }
    return obj;
}

QString OAIClient::getApplicationType() const {
    return m_application_type;
}
void OAIClient::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIClient::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIClient::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QString OAIClient::getClientId() const {
    return m_client_id;
}
void OAIClient::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIClient::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIClient::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIClient::getClientName() const {
    return m_client_name;
}
void OAIClient::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIClient::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIClient::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIClient::getClientUri() const {
    return m_client_uri;
}
void OAIClient::setClientUri(const QString &client_uri) {
    m_client_uri = client_uri;
    m_client_uri_isSet = true;
}

bool OAIClient::is_client_uri_Set() const{
    return m_client_uri_isSet;
}

bool OAIClient::is_client_uri_Valid() const{
    return m_client_uri_isValid;
}

QList<QString> OAIClient::getContacts() const {
    return m_contacts;
}
void OAIClient::setContacts(const QList<QString> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIClient::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIClient::is_contacts_Valid() const{
    return m_contacts_isValid;
}

qint64 OAIClient::getDefaultMaxAge() const {
    return m_default_max_age;
}
void OAIClient::setDefaultMaxAge(const qint64 &default_max_age) {
    m_default_max_age = default_max_age;
    m_default_max_age_isSet = true;
}

bool OAIClient::is_default_max_age_Set() const{
    return m_default_max_age_isSet;
}

bool OAIClient::is_default_max_age_Valid() const{
    return m_default_max_age_isValid;
}

QList<QString> OAIClient::getDefaultScopes() const {
    return m_default_scopes;
}
void OAIClient::setDefaultScopes(const QList<QString> &default_scopes) {
    m_default_scopes = default_scopes;
    m_default_scopes_isSet = true;
}

bool OAIClient::is_default_scopes_Set() const{
    return m_default_scopes_isSet;
}

bool OAIClient::is_default_scopes_Valid() const{
    return m_default_scopes_isValid;
}

QList<QString> OAIClient::getGrantTypes() const {
    return m_grant_types;
}
void OAIClient::setGrantTypes(const QList<QString> &grant_types) {
    m_grant_types = grant_types;
    m_grant_types_isSet = true;
}

bool OAIClient::is_grant_types_Set() const{
    return m_grant_types_isSet;
}

bool OAIClient::is_grant_types_Valid() const{
    return m_grant_types_isValid;
}

QString OAIClient::getLogoUri() const {
    return m_logo_uri;
}
void OAIClient::setLogoUri(const QString &logo_uri) {
    m_logo_uri = logo_uri;
    m_logo_uri_isSet = true;
}

bool OAIClient::is_logo_uri_Set() const{
    return m_logo_uri_isSet;
}

bool OAIClient::is_logo_uri_Valid() const{
    return m_logo_uri_isValid;
}

QString OAIClient::getPolicyUri() const {
    return m_policy_uri;
}
void OAIClient::setPolicyUri(const QString &policy_uri) {
    m_policy_uri = policy_uri;
    m_policy_uri_isSet = true;
}

bool OAIClient::is_policy_uri_Set() const{
    return m_policy_uri_isSet;
}

bool OAIClient::is_policy_uri_Valid() const{
    return m_policy_uri_isValid;
}

QList<QString> OAIClient::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIClient::setRedirectUris(const QList<QString> &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIClient::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIClient::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

QList<QString> OAIClient::getResponseTypes() const {
    return m_response_types;
}
void OAIClient::setResponseTypes(const QList<QString> &response_types) {
    m_response_types = response_types;
    m_response_types_isSet = true;
}

bool OAIClient::is_response_types_Set() const{
    return m_response_types_isSet;
}

bool OAIClient::is_response_types_Valid() const{
    return m_response_types_isValid;
}

QString OAIClient::getTosUri() const {
    return m_tos_uri;
}
void OAIClient::setTosUri(const QString &tos_uri) {
    m_tos_uri = tos_uri;
    m_tos_uri_isSet = true;
}

bool OAIClient::is_tos_uri_Set() const{
    return m_tos_uri_isSet;
}

bool OAIClient::is_tos_uri_Valid() const{
    return m_tos_uri_isValid;
}

bool OAIClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tos_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_name_isValid && m_client_uri_isValid && true;
}

} // namespace OpenAPI
