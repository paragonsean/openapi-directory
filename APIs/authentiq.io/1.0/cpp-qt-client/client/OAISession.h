/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession.h
 *
 * Session object
 */

#ifndef OAISession_H
#define OAISession_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISession : public OAIObject {
public:
    OAISession();
    OAISession(QString json);
    ~OAISession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAuthenticatedAt() const;
    void setAuthenticatedAt(const QDateTime &authenticated_at);
    bool is_authenticated_at_Set() const;
    bool is_authenticated_at_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientName() const;
    void setClientName(const QString &client_name);
    bool is_client_name_Set() const;
    bool is_client_name_Valid() const;

    QString getClientUri() const;
    void setClientUri(const QString &client_uri);
    bool is_client_uri_Set() const;
    bool is_client_uri_Valid() const;

    QDateTime getConcludedAt() const;
    void setConcludedAt(const QDateTime &concluded_at);
    bool is_concluded_at_Set() const;
    bool is_concluded_at_Valid() const;

    QDateTime getConnectedAt() const;
    void setConnectedAt(const QDateTime &connected_at);
    bool is_connected_at_Set() const;
    bool is_connected_at_Valid() const;

    QList<QString> getContacts() const;
    void setContacts(const QList<QString> &contacts);
    bool is_contacts_Set() const;
    bool is_contacts_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getDeletedAt() const;
    void setDeletedAt(const QDateTime &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    QString getLogoUri() const;
    void setLogoUri(const QString &logo_uri);
    bool is_logo_uri_Set() const;
    bool is_logo_uri_Valid() const;

    QString getNonce() const;
    void setNonce(const QString &nonce);
    bool is_nonce_Set() const;
    bool is_nonce_Valid() const;

    QString getPolicyUri() const;
    void setPolicyUri(const QString &policy_uri);
    bool is_policy_uri_Set() const;
    bool is_policy_uri_Valid() const;

    QString getRedirectUri() const;
    void setRedirectUri(const QString &redirect_uri);
    bool is_redirect_uri_Set() const;
    bool is_redirect_uri_Valid() const;

    QString getResponseMode() const;
    void setResponseMode(const QString &response_mode);
    bool is_response_mode_Set() const;
    bool is_response_mode_Valid() const;

    QString getResponseType() const;
    void setResponseType(const QString &response_type);
    bool is_response_type_Set() const;
    bool is_response_type_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QList<QString> getScopesOptional() const;
    void setScopesOptional(const QList<QString> &scopes_optional);
    bool is_scopes_optional_Set() const;
    bool is_scopes_optional_Valid() const;

    QList<QString> getScopesRequired() const;
    void setScopesRequired(const QList<QString> &scopes_required);
    bool is_scopes_required_Set() const;
    bool is_scopes_required_Valid() const;

    QList<QString> getScopesSeen() const;
    void setScopesSeen(const QList<QString> &scopes_seen);
    bool is_scopes_seen_Set() const;
    bool is_scopes_seen_Valid() const;

    QList<QString> getScopesSigned() const;
    void setScopesSigned(const QList<QString> &scopes_signed);
    bool is_scopes_signed_Set() const;
    bool is_scopes_signed_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QString getSessionState() const;
    void setSessionState(const QString &session_state);
    bool is_session_state_Set() const;
    bool is_session_state_Valid() const;

    QString getSessionUri() const;
    void setSessionUri(const QString &session_uri);
    bool is_session_uri_Set() const;
    bool is_session_uri_Valid() const;

    QString getSub() const;
    void setSub(const QString &sub);
    bool is_sub_Set() const;
    bool is_sub_Valid() const;

    QList<QString> getTokensSeen() const;
    void setTokensSeen(const QList<QString> &tokens_seen);
    bool is_tokens_seen_Set() const;
    bool is_tokens_seen_Valid() const;

    QString getTosUri() const;
    void setTosUri(const QString &tos_uri);
    bool is_tos_uri_Set() const;
    bool is_tos_uri_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_authenticated_at;
    bool m_authenticated_at_isSet;
    bool m_authenticated_at_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_name;
    bool m_client_name_isSet;
    bool m_client_name_isValid;

    QString m_client_uri;
    bool m_client_uri_isSet;
    bool m_client_uri_isValid;

    QDateTime m_concluded_at;
    bool m_concluded_at_isSet;
    bool m_concluded_at_isValid;

    QDateTime m_connected_at;
    bool m_connected_at_isSet;
    bool m_connected_at_isValid;

    QList<QString> m_contacts;
    bool m_contacts_isSet;
    bool m_contacts_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    QString m_logo_uri;
    bool m_logo_uri_isSet;
    bool m_logo_uri_isValid;

    QString m_nonce;
    bool m_nonce_isSet;
    bool m_nonce_isValid;

    QString m_policy_uri;
    bool m_policy_uri_isSet;
    bool m_policy_uri_isValid;

    QString m_redirect_uri;
    bool m_redirect_uri_isSet;
    bool m_redirect_uri_isValid;

    QString m_response_mode;
    bool m_response_mode_isSet;
    bool m_response_mode_isValid;

    QString m_response_type;
    bool m_response_type_isSet;
    bool m_response_type_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QList<QString> m_scopes_optional;
    bool m_scopes_optional_isSet;
    bool m_scopes_optional_isValid;

    QList<QString> m_scopes_required;
    bool m_scopes_required_isSet;
    bool m_scopes_required_isValid;

    QList<QString> m_scopes_seen;
    bool m_scopes_seen_isSet;
    bool m_scopes_seen_isValid;

    QList<QString> m_scopes_signed;
    bool m_scopes_signed_isSet;
    bool m_scopes_signed_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QString m_session_state;
    bool m_session_state_isSet;
    bool m_session_state_isValid;

    QString m_session_uri;
    bool m_session_uri_isSet;
    bool m_session_uri_isValid;

    QString m_sub;
    bool m_sub_isSet;
    bool m_sub_isValid;

    QList<QString> m_tokens_seen;
    bool m_tokens_seen_isSet;
    bool m_tokens_seen_isValid;

    QString m_tos_uri;
    bool m_tos_uri_isSet;
    bool m_tos_uri_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession)

#endif // OAISession_H
