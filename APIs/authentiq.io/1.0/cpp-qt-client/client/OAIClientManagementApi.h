/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientManagementApi_H
#define OAI_OAIClientManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClient.h"
#include "OAIOAuth2Error.h"
#include "OAIProblemDetail.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientManagementApi : public QObject {
    Q_OBJECT

public:
    OAIClientManagementApi(const int timeOut = 0);
    ~OAIClientManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void client();

    /**
    * @param[in]  client_id QString [required]
    */
    virtual void clientClientId(const QString &client_id);

    /**
    * @param[in]  oai_client OAIClient [required]
    */
    virtual void createClient(const OAIClient &oai_client);

    /**
    * @param[in]  client_id QString [required]
    */
    virtual void getClient(const QString &client_id);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_client OAIClient [required]
    */
    virtual void updateClient(const QString &client_id, const OAIClient &oai_client);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clientCallback(OAIHttpRequestWorker *worker);
    void clientClientIdCallback(OAIHttpRequestWorker *worker);
    void createClientCallback(OAIHttpRequestWorker *worker);
    void getClientCallback(OAIHttpRequestWorker *worker);
    void updateClientCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clientSignal(QList<OAIClient> summary);
    void clientClientIdSignal();
    void createClientSignal();
    void getClientSignal(OAIClient summary);
    void updateClientSignal(OAIClient summary);


    void clientSignalFull(OAIHttpRequestWorker *worker, QList<OAIClient> summary);
    void clientClientIdSignalFull(OAIHttpRequestWorker *worker);
    void createClientSignalFull(OAIHttpRequestWorker *worker);
    void getClientSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);
    void updateClientSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);

    Q_DECL_DEPRECATED_X("Use clientSignalError() instead")
    void clientSignalE(QList<OAIClient> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientSignalError(QList<OAIClient> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientClientIdSignalError() instead")
    void clientClientIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clientClientIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createClientSignalError() instead")
    void createClientSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createClientSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientSignalError() instead")
    void getClientSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientSignalError() instead")
    void updateClientSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clientSignalErrorFull() instead")
    void clientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientClientIdSignalErrorFull() instead")
    void clientClientIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientClientIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createClientSignalErrorFull() instead")
    void createClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientSignalErrorFull() instead")
    void getClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientSignalErrorFull() instead")
    void updateClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
