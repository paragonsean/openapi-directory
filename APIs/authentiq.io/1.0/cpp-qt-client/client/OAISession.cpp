/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_authenticated_at_isSet = false;
    m_authenticated_at_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_uri_isSet = false;
    m_client_uri_isValid = false;

    m_concluded_at_isSet = false;
    m_concluded_at_isValid = false;

    m_connected_at_isSet = false;
    m_connected_at_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_logo_uri_isSet = false;
    m_logo_uri_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_policy_uri_isSet = false;
    m_policy_uri_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_response_mode_isSet = false;
    m_response_mode_isValid = false;

    m_response_type_isSet = false;
    m_response_type_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_scopes_optional_isSet = false;
    m_scopes_optional_isValid = false;

    m_scopes_required_isSet = false;
    m_scopes_required_isValid = false;

    m_scopes_seen_isSet = false;
    m_scopes_seen_isValid = false;

    m_scopes_signed_isSet = false;
    m_scopes_signed_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_session_state_isSet = false;
    m_session_state_isValid = false;

    m_session_uri_isSet = false;
    m_session_uri_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_tokens_seen_isSet = false;
    m_tokens_seen_isValid = false;

    m_tos_uri_isSet = false;
    m_tos_uri_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_authenticated_at_isValid = ::OpenAPI::fromJsonValue(m_authenticated_at, json[QString("authenticated_at")]);
    m_authenticated_at_isSet = !json[QString("authenticated_at")].isNull() && m_authenticated_at_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("client_name")]);
    m_client_name_isSet = !json[QString("client_name")].isNull() && m_client_name_isValid;

    m_client_uri_isValid = ::OpenAPI::fromJsonValue(m_client_uri, json[QString("client_uri")]);
    m_client_uri_isSet = !json[QString("client_uri")].isNull() && m_client_uri_isValid;

    m_concluded_at_isValid = ::OpenAPI::fromJsonValue(m_concluded_at, json[QString("concluded_at")]);
    m_concluded_at_isSet = !json[QString("concluded_at")].isNull() && m_concluded_at_isValid;

    m_connected_at_isValid = ::OpenAPI::fromJsonValue(m_connected_at, json[QString("connected_at")]);
    m_connected_at_isSet = !json[QString("connected_at")].isNull() && m_connected_at_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_logo_uri_isValid = ::OpenAPI::fromJsonValue(m_logo_uri, json[QString("logo_uri")]);
    m_logo_uri_isSet = !json[QString("logo_uri")].isNull() && m_logo_uri_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_policy_uri_isValid = ::OpenAPI::fromJsonValue(m_policy_uri, json[QString("policy_uri")]);
    m_policy_uri_isSet = !json[QString("policy_uri")].isNull() && m_policy_uri_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_response_mode_isValid = ::OpenAPI::fromJsonValue(m_response_mode, json[QString("response_mode")]);
    m_response_mode_isSet = !json[QString("response_mode")].isNull() && m_response_mode_isValid;

    m_response_type_isValid = ::OpenAPI::fromJsonValue(m_response_type, json[QString("response_type")]);
    m_response_type_isSet = !json[QString("response_type")].isNull() && m_response_type_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_scopes_optional_isValid = ::OpenAPI::fromJsonValue(m_scopes_optional, json[QString("scopes_optional")]);
    m_scopes_optional_isSet = !json[QString("scopes_optional")].isNull() && m_scopes_optional_isValid;

    m_scopes_required_isValid = ::OpenAPI::fromJsonValue(m_scopes_required, json[QString("scopes_required")]);
    m_scopes_required_isSet = !json[QString("scopes_required")].isNull() && m_scopes_required_isValid;

    m_scopes_seen_isValid = ::OpenAPI::fromJsonValue(m_scopes_seen, json[QString("scopes_seen")]);
    m_scopes_seen_isSet = !json[QString("scopes_seen")].isNull() && m_scopes_seen_isValid;

    m_scopes_signed_isValid = ::OpenAPI::fromJsonValue(m_scopes_signed, json[QString("scopes_signed")]);
    m_scopes_signed_isSet = !json[QString("scopes_signed")].isNull() && m_scopes_signed_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_session_state_isValid = ::OpenAPI::fromJsonValue(m_session_state, json[QString("session_state")]);
    m_session_state_isSet = !json[QString("session_state")].isNull() && m_session_state_isValid;

    m_session_uri_isValid = ::OpenAPI::fromJsonValue(m_session_uri, json[QString("session_uri")]);
    m_session_uri_isSet = !json[QString("session_uri")].isNull() && m_session_uri_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_tokens_seen_isValid = ::OpenAPI::fromJsonValue(m_tokens_seen, json[QString("tokens_seen")]);
    m_tokens_seen_isSet = !json[QString("tokens_seen")].isNull() && m_tokens_seen_isValid;

    m_tos_uri_isValid = ::OpenAPI::fromJsonValue(m_tos_uri, json[QString("tos_uri")]);
    m_tos_uri_isSet = !json[QString("tos_uri")].isNull() && m_tos_uri_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticated_at_isSet) {
        obj.insert(QString("authenticated_at"), ::OpenAPI::toJsonValue(m_authenticated_at));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("client_name"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_uri_isSet) {
        obj.insert(QString("client_uri"), ::OpenAPI::toJsonValue(m_client_uri));
    }
    if (m_concluded_at_isSet) {
        obj.insert(QString("concluded_at"), ::OpenAPI::toJsonValue(m_concluded_at));
    }
    if (m_connected_at_isSet) {
        obj.insert(QString("connected_at"), ::OpenAPI::toJsonValue(m_connected_at));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_logo_uri_isSet) {
        obj.insert(QString("logo_uri"), ::OpenAPI::toJsonValue(m_logo_uri));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_policy_uri_isSet) {
        obj.insert(QString("policy_uri"), ::OpenAPI::toJsonValue(m_policy_uri));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_response_mode_isSet) {
        obj.insert(QString("response_mode"), ::OpenAPI::toJsonValue(m_response_mode));
    }
    if (m_response_type_isSet) {
        obj.insert(QString("response_type"), ::OpenAPI::toJsonValue(m_response_type));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_scopes_optional.size() > 0) {
        obj.insert(QString("scopes_optional"), ::OpenAPI::toJsonValue(m_scopes_optional));
    }
    if (m_scopes_required.size() > 0) {
        obj.insert(QString("scopes_required"), ::OpenAPI::toJsonValue(m_scopes_required));
    }
    if (m_scopes_seen.size() > 0) {
        obj.insert(QString("scopes_seen"), ::OpenAPI::toJsonValue(m_scopes_seen));
    }
    if (m_scopes_signed.size() > 0) {
        obj.insert(QString("scopes_signed"), ::OpenAPI::toJsonValue(m_scopes_signed));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_session_state_isSet) {
        obj.insert(QString("session_state"), ::OpenAPI::toJsonValue(m_session_state));
    }
    if (m_session_uri_isSet) {
        obj.insert(QString("session_uri"), ::OpenAPI::toJsonValue(m_session_uri));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_tokens_seen.size() > 0) {
        obj.insert(QString("tokens_seen"), ::OpenAPI::toJsonValue(m_tokens_seen));
    }
    if (m_tos_uri_isSet) {
        obj.insert(QString("tos_uri"), ::OpenAPI::toJsonValue(m_tos_uri));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAISession::getAuthenticatedAt() const {
    return m_authenticated_at;
}
void OAISession::setAuthenticatedAt(const QDateTime &authenticated_at) {
    m_authenticated_at = authenticated_at;
    m_authenticated_at_isSet = true;
}

bool OAISession::is_authenticated_at_Set() const{
    return m_authenticated_at_isSet;
}

bool OAISession::is_authenticated_at_Valid() const{
    return m_authenticated_at_isValid;
}

QString OAISession::getClientId() const {
    return m_client_id;
}
void OAISession::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISession::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISession::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAISession::getClientName() const {
    return m_client_name;
}
void OAISession::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAISession::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAISession::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAISession::getClientUri() const {
    return m_client_uri;
}
void OAISession::setClientUri(const QString &client_uri) {
    m_client_uri = client_uri;
    m_client_uri_isSet = true;
}

bool OAISession::is_client_uri_Set() const{
    return m_client_uri_isSet;
}

bool OAISession::is_client_uri_Valid() const{
    return m_client_uri_isValid;
}

QDateTime OAISession::getConcludedAt() const {
    return m_concluded_at;
}
void OAISession::setConcludedAt(const QDateTime &concluded_at) {
    m_concluded_at = concluded_at;
    m_concluded_at_isSet = true;
}

bool OAISession::is_concluded_at_Set() const{
    return m_concluded_at_isSet;
}

bool OAISession::is_concluded_at_Valid() const{
    return m_concluded_at_isValid;
}

QDateTime OAISession::getConnectedAt() const {
    return m_connected_at;
}
void OAISession::setConnectedAt(const QDateTime &connected_at) {
    m_connected_at = connected_at;
    m_connected_at_isSet = true;
}

bool OAISession::is_connected_at_Set() const{
    return m_connected_at_isSet;
}

bool OAISession::is_connected_at_Valid() const{
    return m_connected_at_isValid;
}

QList<QString> OAISession::getContacts() const {
    return m_contacts;
}
void OAISession::setContacts(const QList<QString> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAISession::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAISession::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QString OAISession::getCreatedAt() const {
    return m_created_at;
}
void OAISession::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISession::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISession::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAISession::getDeletedAt() const {
    return m_deleted_at;
}
void OAISession::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAISession::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAISession::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAISession::getLogoUri() const {
    return m_logo_uri;
}
void OAISession::setLogoUri(const QString &logo_uri) {
    m_logo_uri = logo_uri;
    m_logo_uri_isSet = true;
}

bool OAISession::is_logo_uri_Set() const{
    return m_logo_uri_isSet;
}

bool OAISession::is_logo_uri_Valid() const{
    return m_logo_uri_isValid;
}

QString OAISession::getNonce() const {
    return m_nonce;
}
void OAISession::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAISession::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAISession::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAISession::getPolicyUri() const {
    return m_policy_uri;
}
void OAISession::setPolicyUri(const QString &policy_uri) {
    m_policy_uri = policy_uri;
    m_policy_uri_isSet = true;
}

bool OAISession::is_policy_uri_Set() const{
    return m_policy_uri_isSet;
}

bool OAISession::is_policy_uri_Valid() const{
    return m_policy_uri_isValid;
}

QString OAISession::getRedirectUri() const {
    return m_redirect_uri;
}
void OAISession::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAISession::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAISession::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAISession::getResponseMode() const {
    return m_response_mode;
}
void OAISession::setResponseMode(const QString &response_mode) {
    m_response_mode = response_mode;
    m_response_mode_isSet = true;
}

bool OAISession::is_response_mode_Set() const{
    return m_response_mode_isSet;
}

bool OAISession::is_response_mode_Valid() const{
    return m_response_mode_isValid;
}

QString OAISession::getResponseType() const {
    return m_response_type;
}
void OAISession::setResponseType(const QString &response_type) {
    m_response_type = response_type;
    m_response_type_isSet = true;
}

bool OAISession::is_response_type_Set() const{
    return m_response_type_isSet;
}

bool OAISession::is_response_type_Valid() const{
    return m_response_type_isValid;
}

QList<QString> OAISession::getScopes() const {
    return m_scopes;
}
void OAISession::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAISession::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAISession::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QList<QString> OAISession::getScopesOptional() const {
    return m_scopes_optional;
}
void OAISession::setScopesOptional(const QList<QString> &scopes_optional) {
    m_scopes_optional = scopes_optional;
    m_scopes_optional_isSet = true;
}

bool OAISession::is_scopes_optional_Set() const{
    return m_scopes_optional_isSet;
}

bool OAISession::is_scopes_optional_Valid() const{
    return m_scopes_optional_isValid;
}

QList<QString> OAISession::getScopesRequired() const {
    return m_scopes_required;
}
void OAISession::setScopesRequired(const QList<QString> &scopes_required) {
    m_scopes_required = scopes_required;
    m_scopes_required_isSet = true;
}

bool OAISession::is_scopes_required_Set() const{
    return m_scopes_required_isSet;
}

bool OAISession::is_scopes_required_Valid() const{
    return m_scopes_required_isValid;
}

QList<QString> OAISession::getScopesSeen() const {
    return m_scopes_seen;
}
void OAISession::setScopesSeen(const QList<QString> &scopes_seen) {
    m_scopes_seen = scopes_seen;
    m_scopes_seen_isSet = true;
}

bool OAISession::is_scopes_seen_Set() const{
    return m_scopes_seen_isSet;
}

bool OAISession::is_scopes_seen_Valid() const{
    return m_scopes_seen_isValid;
}

QList<QString> OAISession::getScopesSigned() const {
    return m_scopes_signed;
}
void OAISession::setScopesSigned(const QList<QString> &scopes_signed) {
    m_scopes_signed = scopes_signed;
    m_scopes_signed_isSet = true;
}

bool OAISession::is_scopes_signed_Set() const{
    return m_scopes_signed_isSet;
}

bool OAISession::is_scopes_signed_Valid() const{
    return m_scopes_signed_isValid;
}

QString OAISession::getSessionId() const {
    return m_session_id;
}
void OAISession::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISession::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISession::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAISession::getSessionState() const {
    return m_session_state;
}
void OAISession::setSessionState(const QString &session_state) {
    m_session_state = session_state;
    m_session_state_isSet = true;
}

bool OAISession::is_session_state_Set() const{
    return m_session_state_isSet;
}

bool OAISession::is_session_state_Valid() const{
    return m_session_state_isValid;
}

QString OAISession::getSessionUri() const {
    return m_session_uri;
}
void OAISession::setSessionUri(const QString &session_uri) {
    m_session_uri = session_uri;
    m_session_uri_isSet = true;
}

bool OAISession::is_session_uri_Set() const{
    return m_session_uri_isSet;
}

bool OAISession::is_session_uri_Valid() const{
    return m_session_uri_isValid;
}

QString OAISession::getSub() const {
    return m_sub;
}
void OAISession::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAISession::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAISession::is_sub_Valid() const{
    return m_sub_isValid;
}

QList<QString> OAISession::getTokensSeen() const {
    return m_tokens_seen;
}
void OAISession::setTokensSeen(const QList<QString> &tokens_seen) {
    m_tokens_seen = tokens_seen;
    m_tokens_seen_isSet = true;
}

bool OAISession::is_tokens_seen_Set() const{
    return m_tokens_seen_isSet;
}

bool OAISession::is_tokens_seen_Valid() const{
    return m_tokens_seen_isValid;
}

QString OAISession::getTosUri() const {
    return m_tos_uri;
}
void OAISession::setTosUri(const QString &tos_uri) {
    m_tos_uri = tos_uri;
    m_tos_uri_isSet = true;
}

bool OAISession::is_tos_uri_Set() const{
    return m_tos_uri_isSet;
}

bool OAISession::is_tos_uri_Valid() const{
    return m_tos_uri_isValid;
}

qint32 OAISession::getVersion() const {
    return m_version;
}
void OAISession::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISession::is_version_Set() const{
    return m_version_isSet;
}

bool OAISession::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concluded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_optional.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_seen.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_signed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_seen.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tos_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
