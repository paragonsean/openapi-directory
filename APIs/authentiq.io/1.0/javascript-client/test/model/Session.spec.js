/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AuthentiqConnectApi);
  }
}(this, function(expect, AuthentiqConnectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AuthentiqConnectApi.Session();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Session', function() {
    it('should create an instance of Session', function() {
      // uncomment below and update the code to test Session
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be.a(AuthentiqConnectApi.Session);
    });

    it('should have the property authenticatedAt (base name: "authenticated_at")', function() {
      // uncomment below and update the code to test the property authenticatedAt
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "client_id")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientName (base name: "client_name")', function() {
      // uncomment below and update the code to test the property clientName
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientUri (base name: "client_uri")', function() {
      // uncomment below and update the code to test the property clientUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property concludedAt (base name: "concluded_at")', function() {
      // uncomment below and update the code to test the property concludedAt
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property connectedAt (base name: "connected_at")', function() {
      // uncomment below and update the code to test the property connectedAt
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property contacts (base name: "contacts")', function() {
      // uncomment below and update the code to test the property contacts
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property logoUri (base name: "logo_uri")', function() {
      // uncomment below and update the code to test the property logoUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property nonce (base name: "nonce")', function() {
      // uncomment below and update the code to test the property nonce
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property policyUri (base name: "policy_uri")', function() {
      // uncomment below and update the code to test the property policyUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property redirectUri (base name: "redirect_uri")', function() {
      // uncomment below and update the code to test the property redirectUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property responseMode (base name: "response_mode")', function() {
      // uncomment below and update the code to test the property responseMode
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property responseType (base name: "response_type")', function() {
      // uncomment below and update the code to test the property responseType
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property scopes (base name: "scopes")', function() {
      // uncomment below and update the code to test the property scopes
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property scopesOptional (base name: "scopes_optional")', function() {
      // uncomment below and update the code to test the property scopesOptional
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property scopesRequired (base name: "scopes_required")', function() {
      // uncomment below and update the code to test the property scopesRequired
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property scopesSeen (base name: "scopes_seen")', function() {
      // uncomment below and update the code to test the property scopesSeen
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property scopesSigned (base name: "scopes_signed")', function() {
      // uncomment below and update the code to test the property scopesSigned
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "session_id")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property sessionState (base name: "session_state")', function() {
      // uncomment below and update the code to test the property sessionState
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property sessionUri (base name: "session_uri")', function() {
      // uncomment below and update the code to test the property sessionUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property sub (base name: "sub")', function() {
      // uncomment below and update the code to test the property sub
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property tokensSeen (base name: "tokens_seen")', function() {
      // uncomment below and update the code to test the property tokensSeen
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property tosUri (base name: "tos_uri")', function() {
      // uncomment below and update the code to test the property tosUri
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new AuthentiqConnectApi.Session();
      //expect(instance).to.be();
    });

  });

}));
