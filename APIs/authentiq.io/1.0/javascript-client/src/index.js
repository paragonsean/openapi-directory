/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import Client from './model/Client';
import OAuth2Error from './model/OAuth2Error';
import ProblemDetail from './model/ProblemDetail';
import Session from './model/Session';
import Token from './model/Token';
import UserInfo from './model/UserInfo';
import UserInfoAqLocation from './model/UserInfoAqLocation';
import AuthenticationApi from './api/AuthenticationApi';
import ClientManagementApi from './api/ClientManagementApi';
import SessionManagementApi from './api/SessionManagementApi';


/**
* Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AuthentiqConnectApi = require('index'); // See note below*.
* var xxxSvc = new AuthentiqConnectApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AuthentiqConnectApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AuthentiqConnectApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AuthentiqConnectApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The Client model constructor.
     * @property {module:model/Client}
     */
    Client,

    /**
     * The OAuth2Error model constructor.
     * @property {module:model/OAuth2Error}
     */
    OAuth2Error,

    /**
     * The ProblemDetail model constructor.
     * @property {module:model/ProblemDetail}
     */
    ProblemDetail,

    /**
     * The Session model constructor.
     * @property {module:model/Session}
     */
    Session,

    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token,

    /**
     * The UserInfo model constructor.
     * @property {module:model/UserInfo}
     */
    UserInfo,

    /**
     * The UserInfoAqLocation model constructor.
     * @property {module:model/UserInfoAqLocation}
     */
    UserInfoAqLocation,

    /**
    * The AuthenticationApi service constructor.
    * @property {module:api/AuthenticationApi}
    */
    AuthenticationApi,

    /**
    * The ClientManagementApi service constructor.
    * @property {module:api/ClientManagementApi}
    */
    ClientManagementApi,

    /**
    * The SessionManagementApi service constructor.
    * @property {module:api/SessionManagementApi}
    */
    SessionManagementApi
};
