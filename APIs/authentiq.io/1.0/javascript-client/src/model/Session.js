/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * Session object
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('authenticated_at')) {
                obj['authenticated_at'] = ApiClient.convertToType(data['authenticated_at'], 'Date');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_name')) {
                obj['client_name'] = ApiClient.convertToType(data['client_name'], 'String');
            }
            if (data.hasOwnProperty('client_uri')) {
                obj['client_uri'] = ApiClient.convertToType(data['client_uri'], 'String');
            }
            if (data.hasOwnProperty('concluded_at')) {
                obj['concluded_at'] = ApiClient.convertToType(data['concluded_at'], 'Date');
            }
            if (data.hasOwnProperty('connected_at')) {
                obj['connected_at'] = ApiClient.convertToType(data['connected_at'], 'Date');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], ['String']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('logo_uri')) {
                obj['logo_uri'] = ApiClient.convertToType(data['logo_uri'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('policy_uri')) {
                obj['policy_uri'] = ApiClient.convertToType(data['policy_uri'], 'String');
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('response_mode')) {
                obj['response_mode'] = ApiClient.convertToType(data['response_mode'], 'String');
            }
            if (data.hasOwnProperty('response_type')) {
                obj['response_type'] = ApiClient.convertToType(data['response_type'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('scopes_optional')) {
                obj['scopes_optional'] = ApiClient.convertToType(data['scopes_optional'], ['String']);
            }
            if (data.hasOwnProperty('scopes_required')) {
                obj['scopes_required'] = ApiClient.convertToType(data['scopes_required'], ['String']);
            }
            if (data.hasOwnProperty('scopes_seen')) {
                obj['scopes_seen'] = ApiClient.convertToType(data['scopes_seen'], ['String']);
            }
            if (data.hasOwnProperty('scopes_signed')) {
                obj['scopes_signed'] = ApiClient.convertToType(data['scopes_signed'], ['String']);
            }
            if (data.hasOwnProperty('session_id')) {
                obj['session_id'] = ApiClient.convertToType(data['session_id'], 'String');
            }
            if (data.hasOwnProperty('session_state')) {
                obj['session_state'] = ApiClient.convertToType(data['session_state'], 'String');
            }
            if (data.hasOwnProperty('session_uri')) {
                obj['session_uri'] = ApiClient.convertToType(data['session_uri'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
            if (data.hasOwnProperty('tokens_seen')) {
                obj['tokens_seen'] = ApiClient.convertToType(data['tokens_seen'], ['String']);
            }
            if (data.hasOwnProperty('tos_uri')) {
                obj['tos_uri'] = ApiClient.convertToType(data['tos_uri'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_name'] && !(typeof data['client_name'] === 'string' || data['client_name'] instanceof String)) {
            throw new Error("Expected the field `client_name` to be a primitive type in the JSON string but got " + data['client_name']);
        }
        // ensure the json data is a string
        if (data['client_uri'] && !(typeof data['client_uri'] === 'string' || data['client_uri'] instanceof String)) {
            throw new Error("Expected the field `client_uri` to be a primitive type in the JSON string but got " + data['client_uri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contacts'])) {
            throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['logo_uri'] && !(typeof data['logo_uri'] === 'string' || data['logo_uri'] instanceof String)) {
            throw new Error("Expected the field `logo_uri` to be a primitive type in the JSON string but got " + data['logo_uri']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['policy_uri'] && !(typeof data['policy_uri'] === 'string' || data['policy_uri'] instanceof String)) {
            throw new Error("Expected the field `policy_uri` to be a primitive type in the JSON string but got " + data['policy_uri']);
        }
        // ensure the json data is a string
        if (data['redirect_uri'] && !(typeof data['redirect_uri'] === 'string' || data['redirect_uri'] instanceof String)) {
            throw new Error("Expected the field `redirect_uri` to be a primitive type in the JSON string but got " + data['redirect_uri']);
        }
        // ensure the json data is a string
        if (data['response_mode'] && !(typeof data['response_mode'] === 'string' || data['response_mode'] instanceof String)) {
            throw new Error("Expected the field `response_mode` to be a primitive type in the JSON string but got " + data['response_mode']);
        }
        // ensure the json data is a string
        if (data['response_type'] && !(typeof data['response_type'] === 'string' || data['response_type'] instanceof String)) {
            throw new Error("Expected the field `response_type` to be a primitive type in the JSON string but got " + data['response_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes_optional'])) {
            throw new Error("Expected the field `scopes_optional` to be an array in the JSON data but got " + data['scopes_optional']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes_required'])) {
            throw new Error("Expected the field `scopes_required` to be an array in the JSON data but got " + data['scopes_required']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes_seen'])) {
            throw new Error("Expected the field `scopes_seen` to be an array in the JSON data but got " + data['scopes_seen']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes_signed'])) {
            throw new Error("Expected the field `scopes_signed` to be an array in the JSON data but got " + data['scopes_signed']);
        }
        // ensure the json data is a string
        if (data['session_id'] && !(typeof data['session_id'] === 'string' || data['session_id'] instanceof String)) {
            throw new Error("Expected the field `session_id` to be a primitive type in the JSON string but got " + data['session_id']);
        }
        // ensure the json data is a string
        if (data['session_state'] && !(typeof data['session_state'] === 'string' || data['session_state'] instanceof String)) {
            throw new Error("Expected the field `session_state` to be a primitive type in the JSON string but got " + data['session_state']);
        }
        // ensure the json data is a string
        if (data['session_uri'] && !(typeof data['session_uri'] === 'string' || data['session_uri'] instanceof String)) {
            throw new Error("Expected the field `session_uri` to be a primitive type in the JSON string but got " + data['session_uri']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tokens_seen'])) {
            throw new Error("Expected the field `tokens_seen` to be an array in the JSON data but got " + data['tokens_seen']);
        }
        // ensure the json data is a string
        if (data['tos_uri'] && !(typeof data['tos_uri'] === 'string' || data['tos_uri'] instanceof String)) {
            throw new Error("Expected the field `tos_uri` to be a primitive type in the JSON string but got " + data['tos_uri']);
        }

        return true;
    }


}



/**
 * @member {Date} authenticated_at
 */
Session.prototype['authenticated_at'] = undefined;

/**
 * @member {String} client_id
 */
Session.prototype['client_id'] = undefined;

/**
 * @member {String} client_name
 */
Session.prototype['client_name'] = undefined;

/**
 * @member {String} client_uri
 */
Session.prototype['client_uri'] = undefined;

/**
 * @member {Date} concluded_at
 */
Session.prototype['concluded_at'] = undefined;

/**
 * @member {Date} connected_at
 */
Session.prototype['connected_at'] = undefined;

/**
 * @member {Array.<String>} contacts
 */
Session.prototype['contacts'] = undefined;

/**
 * @member {String} created_at
 */
Session.prototype['created_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
Session.prototype['deleted_at'] = undefined;

/**
 * @member {String} logo_uri
 */
Session.prototype['logo_uri'] = undefined;

/**
 * @member {String} nonce
 */
Session.prototype['nonce'] = undefined;

/**
 * @member {String} policy_uri
 */
Session.prototype['policy_uri'] = undefined;

/**
 * @member {String} redirect_uri
 */
Session.prototype['redirect_uri'] = undefined;

/**
 * @member {String} response_mode
 */
Session.prototype['response_mode'] = undefined;

/**
 * @member {String} response_type
 */
Session.prototype['response_type'] = undefined;

/**
 * @member {Array.<String>} scopes
 */
Session.prototype['scopes'] = undefined;

/**
 * @member {Array.<String>} scopes_optional
 */
Session.prototype['scopes_optional'] = undefined;

/**
 * @member {Array.<String>} scopes_required
 */
Session.prototype['scopes_required'] = undefined;

/**
 * @member {Array.<String>} scopes_seen
 */
Session.prototype['scopes_seen'] = undefined;

/**
 * @member {Array.<String>} scopes_signed
 */
Session.prototype['scopes_signed'] = undefined;

/**
 * @member {String} session_id
 */
Session.prototype['session_id'] = undefined;

/**
 * @member {String} session_state
 */
Session.prototype['session_state'] = undefined;

/**
 * @member {String} session_uri
 */
Session.prototype['session_uri'] = undefined;

/**
 * @member {String} sub
 */
Session.prototype['sub'] = undefined;

/**
 * @member {Array.<String>} tokens_seen
 */
Session.prototype['tokens_seen'] = undefined;

/**
 * @member {String} tos_uri
 */
Session.prototype['tos_uri'] = undefined;

/**
 * @member {Number} version
 */
Session.prototype['version'] = undefined;






export default Session;

