/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Client from '../model/Client';
import OAuth2Error from '../model/OAuth2Error';
import ProblemDetail from '../model/ProblemDetail';

/**
* ClientManagement service.
* @module api/ClientManagementApi
* @version 1.0
*/
export default class ClientManagementApi {

    /**
    * Constructs a new ClientManagementApi. 
    * @alias module:api/ClientManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the client operation.
     * @callback module:api/ClientManagementApi~clientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Client>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List clients
     * Retrieve a list of clients. 
     * @param {module:api/ClientManagementApi~clientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Client>}
     */
    client(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_registration_token', 'oauth_code', 'oauth_implicit'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = [Client];
      return this.apiClient.callApi(
        '/client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientClientId operation.
     * @callback module:api/ClientManagementApi~clientClientIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client
     * Delete a previously registered client. 
     * @param {String} clientId Client identifier
     * @param {module:api/ClientManagementApi~clientClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientClientId(clientId, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling clientClientId");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_registration_token', 'oauth_code', 'oauth_implicit'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/client/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClient operation.
     * @callback module:api/ClientManagementApi~createClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a client
     * Register a new client with this Authentiq Connect provider.  This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension. 
     * @param {module:model/Client} client Client Object
     * @param {module:api/ClientManagementApi~createClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createClient(client, callback) {
      let postBody = client;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling createClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_registration_token', 'oauth_code', 'oauth_implicit'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClient operation.
     * @callback module:api/ClientManagementApi~getClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a client
     * Retrieve the configuration of a previously registered client. 
     * @param {String} clientId Client identifier
     * @param {module:api/ClientManagementApi~getClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    getClient(clientId, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_registration_token', 'oauth_code', 'oauth_implicit'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/client/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClient operation.
     * @callback module:api/ClientManagementApi~updateClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client
     * Update the configuration of a previously registered client. 
     * @param {String} clientId Client identifier
     * @param {module:model/Client} client Client Object
     * @param {module:api/ClientManagementApi~updateClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    updateClient(clientId, client, callback) {
      let postBody = client;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClient");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling updateClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['client_registration_token', 'oauth_code', 'oauth_implicit'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/client/{client_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
