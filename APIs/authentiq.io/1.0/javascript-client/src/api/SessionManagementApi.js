/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* SessionManagement service.
* @module api/SessionManagementApi
* @version 1.0
*/
export default class SessionManagementApi {

    /**
    * Constructs a new SessionManagementApi. 
    * @alias module:api/SessionManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorizeIframe operation.
     * @callback module:api/SessionManagementApi~authorizeIframeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Include a session iframe
     * An OpenID Connect Session Management iframe to facilitate e.g. single sign-on or remote logouts.  The iframe implements the OIDC postMessage-based [change notification protocol](http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification) via which a client can receive notifications about session state changes. 
     * @param {String} clientId Client identifier
     * @param {module:api/SessionManagementApi~authorizeIframeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizeIframe(clientId, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorizeIframe");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{client_id}/iframe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
