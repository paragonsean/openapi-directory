/**
 * Authentiq Connect API
 * Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OAuth2Error from '../model/OAuth2Error';
import Token from '../model/Token';
import UserInfo from '../model/UserInfo';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/AuthenticationApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate a user
     * Start a session with Authentiq Connect to authenticate a user.  ``` GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ```  This endpoint also supports the POST method. 
     * @param {String} clientId A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/). 
     * @param {String} responseType The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set. 
     * @param {String} scope The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC. 
     * @param {String} redirectUri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs. 
     * @param {String} state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. 
     * @param {Object} opts Optional parameters
     * @param {String} [responseMode] Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
     * @param {String} [nonce] An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
     * @param {String} [display = 'page')] The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
     * @param {String} [prompt = 'login')] Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
     * @param {Number} [maxAge = 0)] Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
     * @param {String} [uiLocales] Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
     * @param {module:api/AuthenticationApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorize(clientId, responseType, scope, redirectUri, state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling authorize");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling authorize");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': clientId,
        'response_type': responseType,
        'scope': scope,
        'redirect_uri': redirectUri,
        'state': state,
        'response_mode': opts['responseMode'],
        'nonce': opts['nonce'],
        'display': opts['display'],
        'prompt': opts['prompt'],
        'max_age': opts['maxAge'],
        'ui_locales': opts['uiLocales']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the token operation.
     * @callback module:api/AuthenticationApi~tokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain an ID Token
     * Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. 
     * @param {String} clientId The registered client ID. 
     * @param {String} clientSecret The registered client ID secret. 
     * @param {String} code The authorization code previously obtained from the Authentication endpoint. 
     * @param {String} grantType The authorization grant type, must be `authorization_code`. 
     * @param {String} redirectUri The redirect URL that was used previously with the Authentication endpoint. 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] HTTP Basic authorization header. 
     * @param {module:api/AuthenticationApi~tokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    token(clientId, clientSecret, code, grantType, redirectUri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling token");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling token");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling token");
      }
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling token");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling token");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        'client_id': clientId,
        'client_secret': clientSecret,
        'code': code,
        'grant_type': grantType,
        'redirect_uri': redirectUri
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInfo operation.
     * @callback module:api/AuthenticationApi~userInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user profile
     * Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint. 
     * @param {module:api/AuthenticationApi~userInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfo}
     */
    userInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth_code', 'oauth_implicit'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json', 'application/x-www-form-urlencoded', 'text/html'];
      let returnType = UserInfo;
      return this.apiClient.callApi(
        '/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
