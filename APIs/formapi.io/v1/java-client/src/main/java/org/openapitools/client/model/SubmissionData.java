/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSubmissionDataRequestData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubmissionData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.973433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubmissionData {
  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DATA_REQUESTS = "data_requests";
  @SerializedName(SERIALIZED_NAME_DATA_REQUESTS)
  private List<CreateSubmissionDataRequestData> dataRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn;

  public static final String SERIALIZED_NAME_FIELD_OVERRIDES = "field_overrides";
  @SerializedName(SERIALIZED_NAME_FIELD_OVERRIDES)
  private Object fieldOverrides;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public SubmissionData() {
  }

  public SubmissionData css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Get css
   * @return css
   */
  @javax.annotation.Nullable
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public SubmissionData data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public SubmissionData dataRequests(List<CreateSubmissionDataRequestData> dataRequests) {
    this.dataRequests = dataRequests;
    return this;
  }

  public SubmissionData addDataRequestsItem(CreateSubmissionDataRequestData dataRequestsItem) {
    if (this.dataRequests == null) {
      this.dataRequests = new ArrayList<>();
    }
    this.dataRequests.add(dataRequestsItem);
    return this;
  }

  /**
   * Get dataRequests
   * @return dataRequests
   */
  @javax.annotation.Nullable
  public List<CreateSubmissionDataRequestData> getDataRequests() {
    return dataRequests;
  }

  public void setDataRequests(List<CreateSubmissionDataRequestData> dataRequests) {
    this.dataRequests = dataRequests;
  }


  public SubmissionData expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public SubmissionData fieldOverrides(Object fieldOverrides) {
    this.fieldOverrides = fieldOverrides;
    return this;
  }

  /**
   * Get fieldOverrides
   * @return fieldOverrides
   */
  @javax.annotation.Nullable
  public Object getFieldOverrides() {
    return fieldOverrides;
  }

  public void setFieldOverrides(Object fieldOverrides) {
    this.fieldOverrides = fieldOverrides;
  }


  public SubmissionData html(String html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public SubmissionData metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public SubmissionData password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public SubmissionData test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionData submissionData = (SubmissionData) o;
    return Objects.equals(this.css, submissionData.css) &&
        Objects.equals(this.data, submissionData.data) &&
        Objects.equals(this.dataRequests, submissionData.dataRequests) &&
        Objects.equals(this.expiresIn, submissionData.expiresIn) &&
        Objects.equals(this.fieldOverrides, submissionData.fieldOverrides) &&
        Objects.equals(this.html, submissionData.html) &&
        Objects.equals(this.metadata, submissionData.metadata) &&
        Objects.equals(this.password, submissionData.password) &&
        Objects.equals(this.test, submissionData.test);
  }

  @Override
  public int hashCode() {
    return Objects.hash(css, data, dataRequests, expiresIn, fieldOverrides, html, metadata, password, test);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionData {\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataRequests: ").append(toIndentedString(dataRequests)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    fieldOverrides: ").append(toIndentedString(fieldOverrides)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("css");
    openapiFields.add("data");
    openapiFields.add("data_requests");
    openapiFields.add("expires_in");
    openapiFields.add("field_overrides");
    openapiFields.add("html");
    openapiFields.add("metadata");
    openapiFields.add("password");
    openapiFields.add("test");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmissionData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmissionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmissionData is not found in the empty JSON string", SubmissionData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmissionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmissionData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubmissionData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) && !jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if (jsonObj.get("data_requests") != null && !jsonObj.get("data_requests").isJsonNull()) {
        JsonArray jsonArraydataRequests = jsonObj.getAsJsonArray("data_requests");
        if (jsonArraydataRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data_requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data_requests` to be an array in the JSON string but got `%s`", jsonObj.get("data_requests").toString()));
          }

          // validate the optional field `data_requests` (array)
          for (int i = 0; i < jsonArraydataRequests.size(); i++) {
            CreateSubmissionDataRequestData.validateJsonElement(jsonArraydataRequests.get(i));
          };
        }
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmissionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmissionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmissionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmissionData.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmissionData>() {
           @Override
           public void write(JsonWriter out, SubmissionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmissionData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmissionData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmissionData
   * @throws IOException if the JSON string is invalid with respect to SubmissionData
   */
  public static SubmissionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmissionData.class);
  }

  /**
   * Convert an instance of SubmissionData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

