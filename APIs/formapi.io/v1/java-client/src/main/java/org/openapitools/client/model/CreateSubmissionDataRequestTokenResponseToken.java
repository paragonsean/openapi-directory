/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSubmissionDataRequestTokenResponseToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.973433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSubmissionDataRequestTokenResponseToken {
  public static final String SERIALIZED_NAME_DATA_REQUEST_URL = "data_request_url";
  @SerializedName(SERIALIZED_NAME_DATA_REQUEST_URL)
  private String dataRequestUrl;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public CreateSubmissionDataRequestTokenResponseToken() {
  }

  public CreateSubmissionDataRequestTokenResponseToken dataRequestUrl(String dataRequestUrl) {
    this.dataRequestUrl = dataRequestUrl;
    return this;
  }

  /**
   * Get dataRequestUrl
   * @return dataRequestUrl
   */
  @javax.annotation.Nonnull
  public String getDataRequestUrl() {
    return dataRequestUrl;
  }

  public void setDataRequestUrl(String dataRequestUrl) {
    this.dataRequestUrl = dataRequestUrl;
  }


  public CreateSubmissionDataRequestTokenResponseToken expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateSubmissionDataRequestTokenResponseToken id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateSubmissionDataRequestTokenResponseToken secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nonnull
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubmissionDataRequestTokenResponseToken createSubmissionDataRequestTokenResponseToken = (CreateSubmissionDataRequestTokenResponseToken) o;
    return Objects.equals(this.dataRequestUrl, createSubmissionDataRequestTokenResponseToken.dataRequestUrl) &&
        Objects.equals(this.expiresAt, createSubmissionDataRequestTokenResponseToken.expiresAt) &&
        Objects.equals(this.id, createSubmissionDataRequestTokenResponseToken.id) &&
        Objects.equals(this.secret, createSubmissionDataRequestTokenResponseToken.secret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRequestUrl, expiresAt, id, secret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubmissionDataRequestTokenResponseToken {\n");
    sb.append("    dataRequestUrl: ").append(toIndentedString(dataRequestUrl)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_request_url");
    openapiFields.add("expires_at");
    openapiFields.add("id");
    openapiFields.add("secret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data_request_url");
    openapiRequiredFields.add("expires_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("secret");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSubmissionDataRequestTokenResponseToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSubmissionDataRequestTokenResponseToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSubmissionDataRequestTokenResponseToken is not found in the empty JSON string", CreateSubmissionDataRequestTokenResponseToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSubmissionDataRequestTokenResponseToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSubmissionDataRequestTokenResponseToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSubmissionDataRequestTokenResponseToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("data_request_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_request_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_request_url").toString()));
      }
      if (!jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSubmissionDataRequestTokenResponseToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSubmissionDataRequestTokenResponseToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSubmissionDataRequestTokenResponseToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSubmissionDataRequestTokenResponseToken.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSubmissionDataRequestTokenResponseToken>() {
           @Override
           public void write(JsonWriter out, CreateSubmissionDataRequestTokenResponseToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSubmissionDataRequestTokenResponseToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSubmissionDataRequestTokenResponseToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSubmissionDataRequestTokenResponseToken
   * @throws IOException if the JSON string is invalid with respect to CreateSubmissionDataRequestTokenResponseToken
   */
  public static CreateSubmissionDataRequestTokenResponseToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSubmissionDataRequestTokenResponseToken.class);
  }

  /**
   * Convert an instance of CreateSubmissionDataRequestTokenResponseToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

