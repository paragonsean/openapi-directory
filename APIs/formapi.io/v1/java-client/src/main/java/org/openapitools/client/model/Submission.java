/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubmissionAction;
import org.openapitools.client.model.SubmissionDataRequest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.973433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Submission {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<SubmissionAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATCH_ID = "batch_id";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DATA_REQUESTS = "data_requests";
  @SerializedName(SERIALIZED_NAME_DATA_REQUESTS)
  private List<SubmissionDataRequest> dataRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_EDITABLE = "editable";
  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PDF_HASH = "pdf_hash";
  @SerializedName(SERIALIZED_NAME_PDF_HASH)
  private String pdfHash;

  public static final String SERIALIZED_NAME_PERMANENT_DOWNLOAD_URL = "permanent_download_url";
  @SerializedName(SERIALIZED_NAME_PERMANENT_DOWNLOAD_URL)
  private String permanentDownloadUrl;

  public static final String SERIALIZED_NAME_PROCESSED_AT = "processed_at";
  @SerializedName(SERIALIZED_NAME_PROCESSED_AT)
  private String processedAt;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("pending"),
    
    PROCESSED("processed"),
    
    INVALID_DATA("invalid_data"),
    
    ERROR("error"),
    
    IMAGE_DOWNLOAD_FAILED("image_download_failed"),
    
    IMAGE_PROCESSING_FAILED("image_processing_failed"),
    
    WAITING_FOR_DATA_REQUESTS("waiting_for_data_requests"),
    
    SYNTAX_ERROR("syntax_error"),
    
    ACCOUNT_SUSPENDED("account_suspended"),
    
    LICENSE_REVOKED("license_revoked"),
    
    ACCIDENTAL("accidental");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_TRUNCATED_TEXT = "truncated_text";
  @SerializedName(SERIALIZED_NAME_TRUNCATED_TEXT)
  private Object truncatedText;

  public Submission() {
  }

  public Submission actions(List<SubmissionAction> actions) {
    this.actions = actions;
    return this;
  }

  public Submission addActionsItem(SubmissionAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<SubmissionAction> getActions() {
    return actions;
  }

  public void setActions(List<SubmissionAction> actions) {
    this.actions = actions;
  }


  public Submission batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * Get batchId
   * @return batchId
   */
  @javax.annotation.Nullable
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }


  public Submission data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public Submission dataRequests(List<SubmissionDataRequest> dataRequests) {
    this.dataRequests = dataRequests;
    return this;
  }

  public Submission addDataRequestsItem(SubmissionDataRequest dataRequestsItem) {
    if (this.dataRequests == null) {
      this.dataRequests = new ArrayList<>();
    }
    this.dataRequests.add(dataRequestsItem);
    return this;
  }

  /**
   * Get dataRequests
   * @return dataRequests
   */
  @javax.annotation.Nullable
  public List<SubmissionDataRequest> getDataRequests() {
    return dataRequests;
  }

  public void setDataRequests(List<SubmissionDataRequest> dataRequests) {
    this.dataRequests = dataRequests;
  }


  public Submission downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public Submission editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

  /**
   * Get editable
   * @return editable
   */
  @javax.annotation.Nullable
  public Boolean getEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public Submission expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nonnull
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public Submission expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public Submission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Submission metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public Submission pdfHash(String pdfHash) {
    this.pdfHash = pdfHash;
    return this;
  }

  /**
   * Get pdfHash
   * @return pdfHash
   */
  @javax.annotation.Nullable
  public String getPdfHash() {
    return pdfHash;
  }

  public void setPdfHash(String pdfHash) {
    this.pdfHash = pdfHash;
  }


  public Submission permanentDownloadUrl(String permanentDownloadUrl) {
    this.permanentDownloadUrl = permanentDownloadUrl;
    return this;
  }

  /**
   * Get permanentDownloadUrl
   * @return permanentDownloadUrl
   */
  @javax.annotation.Nullable
  public String getPermanentDownloadUrl() {
    return permanentDownloadUrl;
  }

  public void setPermanentDownloadUrl(String permanentDownloadUrl) {
    this.permanentDownloadUrl = permanentDownloadUrl;
  }


  public Submission processedAt(String processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * Get processedAt
   * @return processedAt
   */
  @javax.annotation.Nullable
  public String getProcessedAt() {
    return processedAt;
  }

  public void setProcessedAt(String processedAt) {
    this.processedAt = processedAt;
  }


  public Submission referrer(String referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Get referrer
   * @return referrer
   */
  @javax.annotation.Nullable
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public Submission source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Submission state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Submission templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Submission test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nonnull
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Submission truncatedText(Object truncatedText) {
    this.truncatedText = truncatedText;
    return this;
  }

  /**
   * Get truncatedText
   * @return truncatedText
   */
  @javax.annotation.Nullable
  public Object getTruncatedText() {
    return truncatedText;
  }

  public void setTruncatedText(Object truncatedText) {
    this.truncatedText = truncatedText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Submission submission = (Submission) o;
    return Objects.equals(this.actions, submission.actions) &&
        Objects.equals(this.batchId, submission.batchId) &&
        Objects.equals(this.data, submission.data) &&
        Objects.equals(this.dataRequests, submission.dataRequests) &&
        Objects.equals(this.downloadUrl, submission.downloadUrl) &&
        Objects.equals(this.editable, submission.editable) &&
        Objects.equals(this.expired, submission.expired) &&
        Objects.equals(this.expiresAt, submission.expiresAt) &&
        Objects.equals(this.id, submission.id) &&
        Objects.equals(this.metadata, submission.metadata) &&
        Objects.equals(this.pdfHash, submission.pdfHash) &&
        Objects.equals(this.permanentDownloadUrl, submission.permanentDownloadUrl) &&
        Objects.equals(this.processedAt, submission.processedAt) &&
        Objects.equals(this.referrer, submission.referrer) &&
        Objects.equals(this.source, submission.source) &&
        Objects.equals(this.state, submission.state) &&
        Objects.equals(this.templateId, submission.templateId) &&
        Objects.equals(this.test, submission.test) &&
        Objects.equals(this.truncatedText, submission.truncatedText);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, batchId, data, dataRequests, downloadUrl, editable, expired, expiresAt, id, metadata, pdfHash, permanentDownloadUrl, processedAt, referrer, source, state, templateId, test, truncatedText);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Submission {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataRequests: ").append(toIndentedString(dataRequests)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    pdfHash: ").append(toIndentedString(pdfHash)).append("\n");
    sb.append("    permanentDownloadUrl: ").append(toIndentedString(permanentDownloadUrl)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    truncatedText: ").append(toIndentedString(truncatedText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("batch_id");
    openapiFields.add("data");
    openapiFields.add("data_requests");
    openapiFields.add("download_url");
    openapiFields.add("editable");
    openapiFields.add("expired");
    openapiFields.add("expires_at");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("pdf_hash");
    openapiFields.add("permanent_download_url");
    openapiFields.add("processed_at");
    openapiFields.add("referrer");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("template_id");
    openapiFields.add("test");
    openapiFields.add("truncated_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expired");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("test");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Submission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Submission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Submission is not found in the empty JSON string", Submission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Submission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Submission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Submission.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            SubmissionAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("batch_id") != null && !jsonObj.get("batch_id").isJsonNull()) && !jsonObj.get("batch_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batch_id").toString()));
      }
      if (jsonObj.get("data_requests") != null && !jsonObj.get("data_requests").isJsonNull()) {
        JsonArray jsonArraydataRequests = jsonObj.getAsJsonArray("data_requests");
        if (jsonArraydataRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data_requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data_requests` to be an array in the JSON string but got `%s`", jsonObj.get("data_requests").toString()));
          }

          // validate the optional field `data_requests` (array)
          for (int i = 0; i < jsonArraydataRequests.size(); i++) {
            SubmissionDataRequest.validateJsonElement(jsonArraydataRequests.get(i));
          };
        }
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("pdf_hash") != null && !jsonObj.get("pdf_hash").isJsonNull()) && !jsonObj.get("pdf_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_hash").toString()));
      }
      if ((jsonObj.get("permanent_download_url") != null && !jsonObj.get("permanent_download_url").isJsonNull()) && !jsonObj.get("permanent_download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_download_url").toString()));
      }
      if ((jsonObj.get("processed_at") != null && !jsonObj.get("processed_at").isJsonNull()) && !jsonObj.get("processed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processed_at").toString()));
      }
      if ((jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Submission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Submission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Submission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Submission.class));

       return (TypeAdapter<T>) new TypeAdapter<Submission>() {
           @Override
           public void write(JsonWriter out, Submission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Submission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Submission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Submission
   * @throws IOException if the JSON string is invalid with respect to Submission
   */
  public static Submission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Submission.class);
  }

  /**
   * Convert an instance of Submission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

