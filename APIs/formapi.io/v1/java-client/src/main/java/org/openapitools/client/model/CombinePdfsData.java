/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CombinedSubmissionSourcePdfsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CombinePdfsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.973433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CombinePdfsData {
  public static final String SERIALIZED_NAME_DELETE_CUSTOM_FILES = "delete_custom_files";
  @SerializedName(SERIALIZED_NAME_DELETE_CUSTOM_FILES)
  private Boolean deleteCustomFiles;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SOURCE_PDFS = "source_pdfs";
  @SerializedName(SERIALIZED_NAME_SOURCE_PDFS)
  private List<CombinedSubmissionSourcePdfsInner> sourcePdfs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public CombinePdfsData() {
  }

  public CombinePdfsData deleteCustomFiles(Boolean deleteCustomFiles) {
    this.deleteCustomFiles = deleteCustomFiles;
    return this;
  }

  /**
   * Get deleteCustomFiles
   * @return deleteCustomFiles
   */
  @javax.annotation.Nullable
  public Boolean getDeleteCustomFiles() {
    return deleteCustomFiles;
  }

  public void setDeleteCustomFiles(Boolean deleteCustomFiles) {
    this.deleteCustomFiles = deleteCustomFiles;
  }


  public CombinePdfsData expiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public Integer getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public CombinePdfsData metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public CombinePdfsData password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CombinePdfsData sourcePdfs(List<CombinedSubmissionSourcePdfsInner> sourcePdfs) {
    this.sourcePdfs = sourcePdfs;
    return this;
  }

  public CombinePdfsData addSourcePdfsItem(CombinedSubmissionSourcePdfsInner sourcePdfsItem) {
    if (this.sourcePdfs == null) {
      this.sourcePdfs = new ArrayList<>();
    }
    this.sourcePdfs.add(sourcePdfsItem);
    return this;
  }

  /**
   * Get sourcePdfs
   * @return sourcePdfs
   */
  @javax.annotation.Nonnull
  public List<CombinedSubmissionSourcePdfsInner> getSourcePdfs() {
    return sourcePdfs;
  }

  public void setSourcePdfs(List<CombinedSubmissionSourcePdfsInner> sourcePdfs) {
    this.sourcePdfs = sourcePdfs;
  }


  public CombinePdfsData test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinePdfsData combinePdfsData = (CombinePdfsData) o;
    return Objects.equals(this.deleteCustomFiles, combinePdfsData.deleteCustomFiles) &&
        Objects.equals(this.expiresIn, combinePdfsData.expiresIn) &&
        Objects.equals(this.metadata, combinePdfsData.metadata) &&
        Objects.equals(this.password, combinePdfsData.password) &&
        Objects.equals(this.sourcePdfs, combinePdfsData.sourcePdfs) &&
        Objects.equals(this.test, combinePdfsData.test);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteCustomFiles, expiresIn, metadata, password, sourcePdfs, test);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinePdfsData {\n");
    sb.append("    deleteCustomFiles: ").append(toIndentedString(deleteCustomFiles)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sourcePdfs: ").append(toIndentedString(sourcePdfs)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete_custom_files");
    openapiFields.add("expires_in");
    openapiFields.add("metadata");
    openapiFields.add("password");
    openapiFields.add("source_pdfs");
    openapiFields.add("test");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source_pdfs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CombinePdfsData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CombinePdfsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CombinePdfsData is not found in the empty JSON string", CombinePdfsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CombinePdfsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CombinePdfsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CombinePdfsData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("source_pdfs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_pdfs` to be an array in the JSON string but got `%s`", jsonObj.get("source_pdfs").toString()));
      }

      JsonArray jsonArraysourcePdfs = jsonObj.getAsJsonArray("source_pdfs");
      // validate the required field `source_pdfs` (array)
      for (int i = 0; i < jsonArraysourcePdfs.size(); i++) {
        CombinedSubmissionSourcePdfsInner.validateJsonElement(jsonArraysourcePdfs.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CombinePdfsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CombinePdfsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CombinePdfsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CombinePdfsData.class));

       return (TypeAdapter<T>) new TypeAdapter<CombinePdfsData>() {
           @Override
           public void write(JsonWriter out, CombinePdfsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CombinePdfsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CombinePdfsData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CombinePdfsData
   * @throws IOException if the JSON string is invalid with respect to CombinePdfsData
   */
  public static CombinePdfsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CombinePdfsData.class);
  }

  /**
   * Convert an instance of CombinePdfsData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

