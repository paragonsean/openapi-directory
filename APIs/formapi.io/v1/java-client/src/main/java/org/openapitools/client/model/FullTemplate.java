/*
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FullTemplateDefaults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FullTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.973433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FullTemplate {
  public static final String SERIALIZED_NAME_ALLOW_ADDITIONAL_PROPERTIES = "allow_additional_properties";
  @SerializedName(SERIALIZED_NAME_ALLOW_ADDITIONAL_PROPERTIES)
  private Boolean allowAdditionalProperties;

  public static final String SERIALIZED_NAME_DEFAULTS = "defaults";
  @SerializedName(SERIALIZED_NAME_DEFAULTS)
  private FullTemplateDefaults defaults;

  public static final String SERIALIZED_NAME_DEMO = "demo";
  @SerializedName(SERIALIZED_NAME_DEMO)
  private Boolean demo;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_FILENAME = "document_filename";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILENAME)
  private String documentFilename;

  public static final String SERIALIZED_NAME_DOCUMENT_MD5 = "document_md5";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_MD5)
  private String documentMd5;

  public static final String SERIALIZED_NAME_DOCUMENT_PARSE_ERROR = "document_parse_error";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PARSE_ERROR)
  private Boolean documentParseError;

  public static final String SERIALIZED_NAME_DOCUMENT_PROCESSED = "document_processed";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PROCESSED)
  private Boolean documentProcessed;

  public static final String SERIALIZED_NAME_DOCUMENT_STATE = "document_state";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STATE)
  private String documentState;

  public static final String SERIALIZED_NAME_DOCUMENT_URL = "document_url";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_URL)
  private String documentUrl;

  public static final String SERIALIZED_NAME_EDITABLE_SUBMISSIONS = "editable_submissions";
  @SerializedName(SERIALIZED_NAME_EDITABLE_SUBMISSIONS)
  private Boolean editableSubmissions;

  public static final String SERIALIZED_NAME_EMBED_DOMAINS = "embed_domains";
  @SerializedName(SERIALIZED_NAME_EMBED_DOMAINS)
  private List<String> embedDomains;

  public static final String SERIALIZED_NAME_ENCRYPT_PDFS = "encrypt_pdfs";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_PDFS)
  private Boolean encryptPdfs;

  public static final String SERIALIZED_NAME_ENCRYPT_PDFS_PASSWORD = "encrypt_pdfs_password";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_PDFS_PASSWORD)
  private String encryptPdfsPassword;

  /**
   * Gets or Sets expirationInterval
   */
  @JsonAdapter(ExpirationIntervalEnum.Adapter.class)
  public enum ExpirationIntervalEnum {
    MINUTES("minutes"),
    
    HOURS("hours"),
    
    DAYS("days");

    private String value;

    ExpirationIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpirationIntervalEnum fromValue(String value) {
      for (ExpirationIntervalEnum b : ExpirationIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpirationIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpirationIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpirationIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpirationIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpirationIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRATION_INTERVAL = "expiration_interval";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_INTERVAL)
  private ExpirationIntervalEnum expirationInterval;

  public static final String SERIALIZED_NAME_EXPIRE_AFTER = "expire_after";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AFTER)
  private BigDecimal expireAfter;

  public static final String SERIALIZED_NAME_EXPIRE_SUBMISSIONS = "expire_submissions";
  @SerializedName(SERIALIZED_NAME_EXPIRE_SUBMISSIONS)
  private Boolean expireSubmissions;

  public static final String SERIALIZED_NAME_FIELD_ORDER = "field_order";
  @SerializedName(SERIALIZED_NAME_FIELD_ORDER)
  private List<List<BigDecimal>> fieldOrder = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Object fields;

  public static final String SERIALIZED_NAME_FIRST_TEMPLATE = "first_template";
  @SerializedName(SERIALIZED_NAME_FIRST_TEMPLATE)
  private Boolean firstTemplate;

  public static final String SERIALIZED_NAME_FOOTER_HTML = "footer_html";
  @SerializedName(SERIALIZED_NAME_FOOTER_HTML)
  private String footerHtml;

  public static final String SERIALIZED_NAME_HEADER_HTML = "header_html";
  @SerializedName(SERIALIZED_NAME_HEADER_HTML)
  private String headerHtml;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGE_COUNT = "page_count";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private BigDecimal pageCount;

  public static final String SERIALIZED_NAME_PAGE_DIMENSIONS = "page_dimensions";
  @SerializedName(SERIALIZED_NAME_PAGE_DIMENSIONS)
  private List<List<BigDecimal>> pageDimensions;

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parent_folder_id";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PERMANENT_DOCUMENT_URL = "permanent_document_url";
  @SerializedName(SERIALIZED_NAME_PERMANENT_DOCUMENT_URL)
  private String permanentDocumentUrl;

  public static final String SERIALIZED_NAME_PUBLIC_SUBMISSIONS = "public_submissions";
  @SerializedName(SERIALIZED_NAME_PUBLIC_SUBMISSIONS)
  private Boolean publicSubmissions;

  public static final String SERIALIZED_NAME_PUBLIC_WEB_FORM = "public_web_form";
  @SerializedName(SERIALIZED_NAME_PUBLIC_WEB_FORM)
  private Boolean publicWebForm;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SCSS = "scss";
  @SerializedName(SERIALIZED_NAME_SCSS)
  private String scss;

  public static final String SERIALIZED_NAME_SHARED_FIELD_DATA = "shared_field_data";
  @SerializedName(SERIALIZED_NAME_SHARED_FIELD_DATA)
  private Object sharedFieldData;

  public static final String SERIALIZED_NAME_SLACK_WEBHOOK_URL = "slack_webhook_url";
  @SerializedName(SERIALIZED_NAME_SLACK_WEBHOOK_URL)
  private String slackWebhookUrl;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "template_type";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private String templateType;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public FullTemplate() {
  }

  public FullTemplate allowAdditionalProperties(Boolean allowAdditionalProperties) {
    this.allowAdditionalProperties = allowAdditionalProperties;
    return this;
  }

  /**
   * Get allowAdditionalProperties
   * @return allowAdditionalProperties
   */
  @javax.annotation.Nonnull
  public Boolean getAllowAdditionalProperties() {
    return allowAdditionalProperties;
  }

  public void setAllowAdditionalProperties(Boolean allowAdditionalProperties) {
    this.allowAdditionalProperties = allowAdditionalProperties;
  }


  public FullTemplate defaults(FullTemplateDefaults defaults) {
    this.defaults = defaults;
    return this;
  }

  /**
   * Get defaults
   * @return defaults
   */
  @javax.annotation.Nonnull
  public FullTemplateDefaults getDefaults() {
    return defaults;
  }

  public void setDefaults(FullTemplateDefaults defaults) {
    this.defaults = defaults;
  }


  public FullTemplate demo(Boolean demo) {
    this.demo = demo;
    return this;
  }

  /**
   * Get demo
   * @return demo
   */
  @javax.annotation.Nonnull
  public Boolean getDemo() {
    return demo;
  }

  public void setDemo(Boolean demo) {
    this.demo = demo;
  }


  public FullTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FullTemplate documentFilename(String documentFilename) {
    this.documentFilename = documentFilename;
    return this;
  }

  /**
   * Get documentFilename
   * @return documentFilename
   */
  @javax.annotation.Nullable
  public String getDocumentFilename() {
    return documentFilename;
  }

  public void setDocumentFilename(String documentFilename) {
    this.documentFilename = documentFilename;
  }


  public FullTemplate documentMd5(String documentMd5) {
    this.documentMd5 = documentMd5;
    return this;
  }

  /**
   * Get documentMd5
   * @return documentMd5
   */
  @javax.annotation.Nullable
  public String getDocumentMd5() {
    return documentMd5;
  }

  public void setDocumentMd5(String documentMd5) {
    this.documentMd5 = documentMd5;
  }


  public FullTemplate documentParseError(Boolean documentParseError) {
    this.documentParseError = documentParseError;
    return this;
  }

  /**
   * Get documentParseError
   * @return documentParseError
   */
  @javax.annotation.Nonnull
  public Boolean getDocumentParseError() {
    return documentParseError;
  }

  public void setDocumentParseError(Boolean documentParseError) {
    this.documentParseError = documentParseError;
  }


  public FullTemplate documentProcessed(Boolean documentProcessed) {
    this.documentProcessed = documentProcessed;
    return this;
  }

  /**
   * Get documentProcessed
   * @return documentProcessed
   */
  @javax.annotation.Nonnull
  public Boolean getDocumentProcessed() {
    return documentProcessed;
  }

  public void setDocumentProcessed(Boolean documentProcessed) {
    this.documentProcessed = documentProcessed;
  }


  public FullTemplate documentState(String documentState) {
    this.documentState = documentState;
    return this;
  }

  /**
   * Get documentState
   * @return documentState
   */
  @javax.annotation.Nonnull
  public String getDocumentState() {
    return documentState;
  }

  public void setDocumentState(String documentState) {
    this.documentState = documentState;
  }


  public FullTemplate documentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
    return this;
  }

  /**
   * Get documentUrl
   * @return documentUrl
   */
  @javax.annotation.Nullable
  public String getDocumentUrl() {
    return documentUrl;
  }

  public void setDocumentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
  }


  public FullTemplate editableSubmissions(Boolean editableSubmissions) {
    this.editableSubmissions = editableSubmissions;
    return this;
  }

  /**
   * Get editableSubmissions
   * @return editableSubmissions
   */
  @javax.annotation.Nonnull
  public Boolean getEditableSubmissions() {
    return editableSubmissions;
  }

  public void setEditableSubmissions(Boolean editableSubmissions) {
    this.editableSubmissions = editableSubmissions;
  }


  public FullTemplate embedDomains(List<String> embedDomains) {
    this.embedDomains = embedDomains;
    return this;
  }

  public FullTemplate addEmbedDomainsItem(String embedDomainsItem) {
    if (this.embedDomains == null) {
      this.embedDomains = new ArrayList<>();
    }
    this.embedDomains.add(embedDomainsItem);
    return this;
  }

  /**
   * Get embedDomains
   * @return embedDomains
   */
  @javax.annotation.Nullable
  public List<String> getEmbedDomains() {
    return embedDomains;
  }

  public void setEmbedDomains(List<String> embedDomains) {
    this.embedDomains = embedDomains;
  }


  public FullTemplate encryptPdfs(Boolean encryptPdfs) {
    this.encryptPdfs = encryptPdfs;
    return this;
  }

  /**
   * Get encryptPdfs
   * @return encryptPdfs
   */
  @javax.annotation.Nonnull
  public Boolean getEncryptPdfs() {
    return encryptPdfs;
  }

  public void setEncryptPdfs(Boolean encryptPdfs) {
    this.encryptPdfs = encryptPdfs;
  }


  public FullTemplate encryptPdfsPassword(String encryptPdfsPassword) {
    this.encryptPdfsPassword = encryptPdfsPassword;
    return this;
  }

  /**
   * Get encryptPdfsPassword
   * @return encryptPdfsPassword
   */
  @javax.annotation.Nullable
  public String getEncryptPdfsPassword() {
    return encryptPdfsPassword;
  }

  public void setEncryptPdfsPassword(String encryptPdfsPassword) {
    this.encryptPdfsPassword = encryptPdfsPassword;
  }


  public FullTemplate expirationInterval(ExpirationIntervalEnum expirationInterval) {
    this.expirationInterval = expirationInterval;
    return this;
  }

  /**
   * Get expirationInterval
   * @return expirationInterval
   */
  @javax.annotation.Nonnull
  public ExpirationIntervalEnum getExpirationInterval() {
    return expirationInterval;
  }

  public void setExpirationInterval(ExpirationIntervalEnum expirationInterval) {
    this.expirationInterval = expirationInterval;
  }


  public FullTemplate expireAfter(BigDecimal expireAfter) {
    this.expireAfter = expireAfter;
    return this;
  }

  /**
   * Get expireAfter
   * @return expireAfter
   */
  @javax.annotation.Nonnull
  public BigDecimal getExpireAfter() {
    return expireAfter;
  }

  public void setExpireAfter(BigDecimal expireAfter) {
    this.expireAfter = expireAfter;
  }


  public FullTemplate expireSubmissions(Boolean expireSubmissions) {
    this.expireSubmissions = expireSubmissions;
    return this;
  }

  /**
   * Get expireSubmissions
   * @return expireSubmissions
   */
  @javax.annotation.Nonnull
  public Boolean getExpireSubmissions() {
    return expireSubmissions;
  }

  public void setExpireSubmissions(Boolean expireSubmissions) {
    this.expireSubmissions = expireSubmissions;
  }


  public FullTemplate fieldOrder(List<List<BigDecimal>> fieldOrder) {
    this.fieldOrder = fieldOrder;
    return this;
  }

  public FullTemplate addFieldOrderItem(List<BigDecimal> fieldOrderItem) {
    if (this.fieldOrder == null) {
      this.fieldOrder = new ArrayList<>();
    }
    this.fieldOrder.add(fieldOrderItem);
    return this;
  }

  /**
   * Get fieldOrder
   * @return fieldOrder
   */
  @javax.annotation.Nonnull
  public List<List<BigDecimal>> getFieldOrder() {
    return fieldOrder;
  }

  public void setFieldOrder(List<List<BigDecimal>> fieldOrder) {
    this.fieldOrder = fieldOrder;
  }


  public FullTemplate fields(Object fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nonnull
  public Object getFields() {
    return fields;
  }

  public void setFields(Object fields) {
    this.fields = fields;
  }


  public FullTemplate firstTemplate(Boolean firstTemplate) {
    this.firstTemplate = firstTemplate;
    return this;
  }

  /**
   * Get firstTemplate
   * @return firstTemplate
   */
  @javax.annotation.Nonnull
  public Boolean getFirstTemplate() {
    return firstTemplate;
  }

  public void setFirstTemplate(Boolean firstTemplate) {
    this.firstTemplate = firstTemplate;
  }


  public FullTemplate footerHtml(String footerHtml) {
    this.footerHtml = footerHtml;
    return this;
  }

  /**
   * Get footerHtml
   * @return footerHtml
   */
  @javax.annotation.Nullable
  public String getFooterHtml() {
    return footerHtml;
  }

  public void setFooterHtml(String footerHtml) {
    this.footerHtml = footerHtml;
  }


  public FullTemplate headerHtml(String headerHtml) {
    this.headerHtml = headerHtml;
    return this;
  }

  /**
   * Get headerHtml
   * @return headerHtml
   */
  @javax.annotation.Nullable
  public String getHeaderHtml() {
    return headerHtml;
  }

  public void setHeaderHtml(String headerHtml) {
    this.headerHtml = headerHtml;
  }


  public FullTemplate html(String html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public FullTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FullTemplate locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nonnull
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public FullTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FullTemplate pageCount(BigDecimal pageCount) {
    this.pageCount = pageCount;
    return this;
  }

  /**
   * Get pageCount
   * @return pageCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getPageCount() {
    return pageCount;
  }

  public void setPageCount(BigDecimal pageCount) {
    this.pageCount = pageCount;
  }


  public FullTemplate pageDimensions(List<List<BigDecimal>> pageDimensions) {
    this.pageDimensions = pageDimensions;
    return this;
  }

  public FullTemplate addPageDimensionsItem(List<BigDecimal> pageDimensionsItem) {
    if (this.pageDimensions == null) {
      this.pageDimensions = new ArrayList<>();
    }
    this.pageDimensions.add(pageDimensionsItem);
    return this;
  }

  /**
   * Get pageDimensions
   * @return pageDimensions
   */
  @javax.annotation.Nullable
  public List<List<BigDecimal>> getPageDimensions() {
    return pageDimensions;
  }

  public void setPageDimensions(List<List<BigDecimal>> pageDimensions) {
    this.pageDimensions = pageDimensions;
  }


  public FullTemplate parentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * Get parentFolderId
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public FullTemplate path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public FullTemplate permanentDocumentUrl(String permanentDocumentUrl) {
    this.permanentDocumentUrl = permanentDocumentUrl;
    return this;
  }

  /**
   * Get permanentDocumentUrl
   * @return permanentDocumentUrl
   */
  @javax.annotation.Nullable
  public String getPermanentDocumentUrl() {
    return permanentDocumentUrl;
  }

  public void setPermanentDocumentUrl(String permanentDocumentUrl) {
    this.permanentDocumentUrl = permanentDocumentUrl;
  }


  public FullTemplate publicSubmissions(Boolean publicSubmissions) {
    this.publicSubmissions = publicSubmissions;
    return this;
  }

  /**
   * Get publicSubmissions
   * @return publicSubmissions
   */
  @javax.annotation.Nonnull
  public Boolean getPublicSubmissions() {
    return publicSubmissions;
  }

  public void setPublicSubmissions(Boolean publicSubmissions) {
    this.publicSubmissions = publicSubmissions;
  }


  public FullTemplate publicWebForm(Boolean publicWebForm) {
    this.publicWebForm = publicWebForm;
    return this;
  }

  /**
   * Get publicWebForm
   * @return publicWebForm
   */
  @javax.annotation.Nonnull
  public Boolean getPublicWebForm() {
    return publicWebForm;
  }

  public void setPublicWebForm(Boolean publicWebForm) {
    this.publicWebForm = publicWebForm;
  }


  public FullTemplate redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public FullTemplate scss(String scss) {
    this.scss = scss;
    return this;
  }

  /**
   * Get scss
   * @return scss
   */
  @javax.annotation.Nullable
  public String getScss() {
    return scss;
  }

  public void setScss(String scss) {
    this.scss = scss;
  }


  public FullTemplate sharedFieldData(Object sharedFieldData) {
    this.sharedFieldData = sharedFieldData;
    return this;
  }

  /**
   * Get sharedFieldData
   * @return sharedFieldData
   */
  @javax.annotation.Nonnull
  public Object getSharedFieldData() {
    return sharedFieldData;
  }

  public void setSharedFieldData(Object sharedFieldData) {
    this.sharedFieldData = sharedFieldData;
  }


  public FullTemplate slackWebhookUrl(String slackWebhookUrl) {
    this.slackWebhookUrl = slackWebhookUrl;
    return this;
  }

  /**
   * Get slackWebhookUrl
   * @return slackWebhookUrl
   */
  @javax.annotation.Nullable
  public String getSlackWebhookUrl() {
    return slackWebhookUrl;
  }

  public void setSlackWebhookUrl(String slackWebhookUrl) {
    this.slackWebhookUrl = slackWebhookUrl;
  }


  public FullTemplate templateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Get templateType
   * @return templateType
   */
  @javax.annotation.Nonnull
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }


  public FullTemplate webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nullable
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullTemplate fullTemplate = (FullTemplate) o;
    return Objects.equals(this.allowAdditionalProperties, fullTemplate.allowAdditionalProperties) &&
        Objects.equals(this.defaults, fullTemplate.defaults) &&
        Objects.equals(this.demo, fullTemplate.demo) &&
        Objects.equals(this.description, fullTemplate.description) &&
        Objects.equals(this.documentFilename, fullTemplate.documentFilename) &&
        Objects.equals(this.documentMd5, fullTemplate.documentMd5) &&
        Objects.equals(this.documentParseError, fullTemplate.documentParseError) &&
        Objects.equals(this.documentProcessed, fullTemplate.documentProcessed) &&
        Objects.equals(this.documentState, fullTemplate.documentState) &&
        Objects.equals(this.documentUrl, fullTemplate.documentUrl) &&
        Objects.equals(this.editableSubmissions, fullTemplate.editableSubmissions) &&
        Objects.equals(this.embedDomains, fullTemplate.embedDomains) &&
        Objects.equals(this.encryptPdfs, fullTemplate.encryptPdfs) &&
        Objects.equals(this.encryptPdfsPassword, fullTemplate.encryptPdfsPassword) &&
        Objects.equals(this.expirationInterval, fullTemplate.expirationInterval) &&
        Objects.equals(this.expireAfter, fullTemplate.expireAfter) &&
        Objects.equals(this.expireSubmissions, fullTemplate.expireSubmissions) &&
        Objects.equals(this.fieldOrder, fullTemplate.fieldOrder) &&
        Objects.equals(this.fields, fullTemplate.fields) &&
        Objects.equals(this.firstTemplate, fullTemplate.firstTemplate) &&
        Objects.equals(this.footerHtml, fullTemplate.footerHtml) &&
        Objects.equals(this.headerHtml, fullTemplate.headerHtml) &&
        Objects.equals(this.html, fullTemplate.html) &&
        Objects.equals(this.id, fullTemplate.id) &&
        Objects.equals(this.locked, fullTemplate.locked) &&
        Objects.equals(this.name, fullTemplate.name) &&
        Objects.equals(this.pageCount, fullTemplate.pageCount) &&
        Objects.equals(this.pageDimensions, fullTemplate.pageDimensions) &&
        Objects.equals(this.parentFolderId, fullTemplate.parentFolderId) &&
        Objects.equals(this.path, fullTemplate.path) &&
        Objects.equals(this.permanentDocumentUrl, fullTemplate.permanentDocumentUrl) &&
        Objects.equals(this.publicSubmissions, fullTemplate.publicSubmissions) &&
        Objects.equals(this.publicWebForm, fullTemplate.publicWebForm) &&
        Objects.equals(this.redirectUrl, fullTemplate.redirectUrl) &&
        Objects.equals(this.scss, fullTemplate.scss) &&
        Objects.equals(this.sharedFieldData, fullTemplate.sharedFieldData) &&
        Objects.equals(this.slackWebhookUrl, fullTemplate.slackWebhookUrl) &&
        Objects.equals(this.templateType, fullTemplate.templateType) &&
        Objects.equals(this.webhookUrl, fullTemplate.webhookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAdditionalProperties, defaults, demo, description, documentFilename, documentMd5, documentParseError, documentProcessed, documentState, documentUrl, editableSubmissions, embedDomains, encryptPdfs, encryptPdfsPassword, expirationInterval, expireAfter, expireSubmissions, fieldOrder, fields, firstTemplate, footerHtml, headerHtml, html, id, locked, name, pageCount, pageDimensions, parentFolderId, path, permanentDocumentUrl, publicSubmissions, publicWebForm, redirectUrl, scss, sharedFieldData, slackWebhookUrl, templateType, webhookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullTemplate {\n");
    sb.append("    allowAdditionalProperties: ").append(toIndentedString(allowAdditionalProperties)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("    demo: ").append(toIndentedString(demo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentFilename: ").append(toIndentedString(documentFilename)).append("\n");
    sb.append("    documentMd5: ").append(toIndentedString(documentMd5)).append("\n");
    sb.append("    documentParseError: ").append(toIndentedString(documentParseError)).append("\n");
    sb.append("    documentProcessed: ").append(toIndentedString(documentProcessed)).append("\n");
    sb.append("    documentState: ").append(toIndentedString(documentState)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    editableSubmissions: ").append(toIndentedString(editableSubmissions)).append("\n");
    sb.append("    embedDomains: ").append(toIndentedString(embedDomains)).append("\n");
    sb.append("    encryptPdfs: ").append(toIndentedString(encryptPdfs)).append("\n");
    sb.append("    encryptPdfsPassword: ").append(toIndentedString(encryptPdfsPassword)).append("\n");
    sb.append("    expirationInterval: ").append(toIndentedString(expirationInterval)).append("\n");
    sb.append("    expireAfter: ").append(toIndentedString(expireAfter)).append("\n");
    sb.append("    expireSubmissions: ").append(toIndentedString(expireSubmissions)).append("\n");
    sb.append("    fieldOrder: ").append(toIndentedString(fieldOrder)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    firstTemplate: ").append(toIndentedString(firstTemplate)).append("\n");
    sb.append("    footerHtml: ").append(toIndentedString(footerHtml)).append("\n");
    sb.append("    headerHtml: ").append(toIndentedString(headerHtml)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    pageDimensions: ").append(toIndentedString(pageDimensions)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    permanentDocumentUrl: ").append(toIndentedString(permanentDocumentUrl)).append("\n");
    sb.append("    publicSubmissions: ").append(toIndentedString(publicSubmissions)).append("\n");
    sb.append("    publicWebForm: ").append(toIndentedString(publicWebForm)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    scss: ").append(toIndentedString(scss)).append("\n");
    sb.append("    sharedFieldData: ").append(toIndentedString(sharedFieldData)).append("\n");
    sb.append("    slackWebhookUrl: ").append(toIndentedString(slackWebhookUrl)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_additional_properties");
    openapiFields.add("defaults");
    openapiFields.add("demo");
    openapiFields.add("description");
    openapiFields.add("document_filename");
    openapiFields.add("document_md5");
    openapiFields.add("document_parse_error");
    openapiFields.add("document_processed");
    openapiFields.add("document_state");
    openapiFields.add("document_url");
    openapiFields.add("editable_submissions");
    openapiFields.add("embed_domains");
    openapiFields.add("encrypt_pdfs");
    openapiFields.add("encrypt_pdfs_password");
    openapiFields.add("expiration_interval");
    openapiFields.add("expire_after");
    openapiFields.add("expire_submissions");
    openapiFields.add("field_order");
    openapiFields.add("fields");
    openapiFields.add("first_template");
    openapiFields.add("footer_html");
    openapiFields.add("header_html");
    openapiFields.add("html");
    openapiFields.add("id");
    openapiFields.add("locked");
    openapiFields.add("name");
    openapiFields.add("page_count");
    openapiFields.add("page_dimensions");
    openapiFields.add("parent_folder_id");
    openapiFields.add("path");
    openapiFields.add("permanent_document_url");
    openapiFields.add("public_submissions");
    openapiFields.add("public_web_form");
    openapiFields.add("redirect_url");
    openapiFields.add("scss");
    openapiFields.add("shared_field_data");
    openapiFields.add("slack_webhook_url");
    openapiFields.add("template_type");
    openapiFields.add("webhook_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allow_additional_properties");
    openapiRequiredFields.add("defaults");
    openapiRequiredFields.add("demo");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("document_filename");
    openapiRequiredFields.add("document_md5");
    openapiRequiredFields.add("document_parse_error");
    openapiRequiredFields.add("document_processed");
    openapiRequiredFields.add("document_state");
    openapiRequiredFields.add("document_url");
    openapiRequiredFields.add("editable_submissions");
    openapiRequiredFields.add("embed_domains");
    openapiRequiredFields.add("encrypt_pdfs");
    openapiRequiredFields.add("encrypt_pdfs_password");
    openapiRequiredFields.add("expiration_interval");
    openapiRequiredFields.add("expire_after");
    openapiRequiredFields.add("expire_submissions");
    openapiRequiredFields.add("field_order");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("first_template");
    openapiRequiredFields.add("footer_html");
    openapiRequiredFields.add("header_html");
    openapiRequiredFields.add("html");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("page_count");
    openapiRequiredFields.add("page_dimensions");
    openapiRequiredFields.add("parent_folder_id");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("permanent_document_url");
    openapiRequiredFields.add("public_submissions");
    openapiRequiredFields.add("public_web_form");
    openapiRequiredFields.add("redirect_url");
    openapiRequiredFields.add("scss");
    openapiRequiredFields.add("shared_field_data");
    openapiRequiredFields.add("slack_webhook_url");
    openapiRequiredFields.add("template_type");
    openapiRequiredFields.add("webhook_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FullTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FullTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FullTemplate is not found in the empty JSON string", FullTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FullTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FullTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FullTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `defaults`
      FullTemplateDefaults.validateJsonElement(jsonObj.get("defaults"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("document_filename") != null && !jsonObj.get("document_filename").isJsonNull()) && !jsonObj.get("document_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_filename").toString()));
      }
      if ((jsonObj.get("document_md5") != null && !jsonObj.get("document_md5").isJsonNull()) && !jsonObj.get("document_md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_md5").toString()));
      }
      if (!jsonObj.get("document_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_state").toString()));
      }
      if ((jsonObj.get("document_url") != null && !jsonObj.get("document_url").isJsonNull()) && !jsonObj.get("document_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("embed_domains") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("embed_domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_domains` to be an array in the JSON string but got `%s`", jsonObj.get("embed_domains").toString()));
      }
      if ((jsonObj.get("encrypt_pdfs_password") != null && !jsonObj.get("encrypt_pdfs_password").isJsonNull()) && !jsonObj.get("encrypt_pdfs_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encrypt_pdfs_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encrypt_pdfs_password").toString()));
      }
      if (!jsonObj.get("expiration_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_interval").toString()));
      }
      // validate the required field `expiration_interval`
      ExpirationIntervalEnum.validateJsonElement(jsonObj.get("expiration_interval"));
      // ensure the required json array is present
      if (jsonObj.get("field_order") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("field_order").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_order` to be an array in the JSON string but got `%s`", jsonObj.get("field_order").toString()));
      }
      if ((jsonObj.get("footer_html") != null && !jsonObj.get("footer_html").isJsonNull()) && !jsonObj.get("footer_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_html").toString()));
      }
      if ((jsonObj.get("header_html") != null && !jsonObj.get("header_html").isJsonNull()) && !jsonObj.get("header_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_html").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("page_dimensions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("page_dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("page_dimensions").toString()));
      }
      if ((jsonObj.get("parent_folder_id") != null && !jsonObj.get("parent_folder_id").isJsonNull()) && !jsonObj.get("parent_folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_folder_id").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("permanent_document_url") != null && !jsonObj.get("permanent_document_url").isJsonNull()) && !jsonObj.get("permanent_document_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_document_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_document_url").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("scss") != null && !jsonObj.get("scss").isJsonNull()) && !jsonObj.get("scss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scss").toString()));
      }
      if ((jsonObj.get("slack_webhook_url") != null && !jsonObj.get("slack_webhook_url").isJsonNull()) && !jsonObj.get("slack_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_webhook_url").toString()));
      }
      if (!jsonObj.get("template_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_type").toString()));
      }
      if ((jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonNull()) && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FullTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FullTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FullTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FullTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<FullTemplate>() {
           @Override
           public void write(JsonWriter out, FullTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FullTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FullTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FullTemplate
   * @throws IOException if the JSON string is invalid with respect to FullTemplate
   */
  public static FullTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FullTemplate.class);
  }

  /**
   * Convert an instance of FullTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

