/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_submission_data_request_token_response_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_submission_data_request_token_response_token::OAICreate_submission_data_request_token_response_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_submission_data_request_token_response_token::OAICreate_submission_data_request_token_response_token() {
    this->initializeModel();
}

OAICreate_submission_data_request_token_response_token::~OAICreate_submission_data_request_token_response_token() {}

void OAICreate_submission_data_request_token_response_token::initializeModel() {

    m_data_request_url_isSet = false;
    m_data_request_url_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAICreate_submission_data_request_token_response_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_submission_data_request_token_response_token::fromJsonObject(QJsonObject json) {

    m_data_request_url_isValid = ::OpenAPI::fromJsonValue(m_data_request_url, json[QString("data_request_url")]);
    m_data_request_url_isSet = !json[QString("data_request_url")].isNull() && m_data_request_url_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAICreate_submission_data_request_token_response_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_submission_data_request_token_response_token::asJsonObject() const {
    QJsonObject obj;
    if (m_data_request_url_isSet) {
        obj.insert(QString("data_request_url"), ::OpenAPI::toJsonValue(m_data_request_url));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAICreate_submission_data_request_token_response_token::getDataRequestUrl() const {
    return m_data_request_url;
}
void OAICreate_submission_data_request_token_response_token::setDataRequestUrl(const QString &data_request_url) {
    m_data_request_url = data_request_url;
    m_data_request_url_isSet = true;
}

bool OAICreate_submission_data_request_token_response_token::is_data_request_url_Set() const{
    return m_data_request_url_isSet;
}

bool OAICreate_submission_data_request_token_response_token::is_data_request_url_Valid() const{
    return m_data_request_url_isValid;
}

QString OAICreate_submission_data_request_token_response_token::getExpiresAt() const {
    return m_expires_at;
}
void OAICreate_submission_data_request_token_response_token::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreate_submission_data_request_token_response_token::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreate_submission_data_request_token_response_token::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAICreate_submission_data_request_token_response_token::getId() const {
    return m_id;
}
void OAICreate_submission_data_request_token_response_token::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreate_submission_data_request_token_response_token::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreate_submission_data_request_token_response_token::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreate_submission_data_request_token_response_token::getSecret() const {
    return m_secret;
}
void OAICreate_submission_data_request_token_response_token::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICreate_submission_data_request_token_response_token::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICreate_submission_data_request_token_response_token::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAICreate_submission_data_request_token_response_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_submission_data_request_token_response_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_request_url_isValid && m_expires_at_isValid && m_id_isValid && m_secret_isValid && true;
}

} // namespace OpenAPI
