/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPDFApi_H
#define OAI_OAIPDFApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_fields_data.h"
#include "OAIAdd_fields_template_response.h"
#include "OAIAuthentication_error.h"
#include "OAIAuthentication_success_response.h"
#include "OAICombine_pdfs_data.h"
#include "OAICombined_submission.h"
#include "OAICombined_submission_data.h"
#include "OAICopy_template_data.h"
#include "OAICreate_combined_submission_response.h"
#include "OAICreate_custom_file_data.h"
#include "OAICreate_custom_file_response.h"
#include "OAICreate_folder_data.h"
#include "OAICreate_html_template_data.h"
#include "OAICreate_submission_batch_response.h"
#include "OAICreate_submission_data_request_token_response.h"
#include "OAICreate_submission_response.h"
#include "OAICreate_submission_response_1.h"
#include "OAICreate_template_from_upload_data.h"
#include "OAIError.h"
#include "OAIFolder.h"
#include "OAIFull_template.h"
#include "OAIHttpFileElement.h"
#include "OAIInvalid_request.h"
#include "OAIList_submissions_response.h"
#include "OAIMove_folder_data.h"
#include "OAIMove_template_data.h"
#include "OAIObject.h"
#include "OAIPending_template.h"
#include "OAIRename_folder_data.h"
#include "OAISubmission.h"
#include "OAISubmission_batch.h"
#include "OAISubmission_batch_data.h"
#include "OAISubmission_data.h"
#include "OAISubmission_data_request.h"
#include "OAITemplate.h"
#include "OAITemplate_schema.h"
#include "OAIUpdate_data_request_response.h"
#include "OAIUpdate_submission_data_request_data.h"
#include "OAIUpdate_template_data.h"
#include "OAIUpdate_template_response.h"
#include "OAIUpload_presign.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPDFApi : public QObject {
    Q_OBJECT

public:
    OAIPDFApi(const int timeOut = 0);
    ~OAIPDFApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_add_fields_data OAIAdd_fields_data [required]
    */
    virtual void addFieldsToTemplate(const QString &template_id, const OAIAdd_fields_data &oai_add_fields_data);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  request_body QList<OAIObject> [required]
    */
    virtual void batchGeneratePdfV1(const QString &template_id, const QList<OAIObject> &request_body);

    /**
    * @param[in]  oai_submission_batch_data OAISubmission_batch_data [required]
    */
    virtual void batchGeneratePdfs(const OAISubmission_batch_data &oai_submission_batch_data);

    /**
    * @param[in]  oai_combine_pdfs_data OAICombine_pdfs_data [required]
    */
    virtual void combinePdfs(const OAICombine_pdfs_data &oai_combine_pdfs_data);

    /**
    * @param[in]  oai_combined_submission_data OAICombined_submission_data [required]
    */
    virtual void combineSubmissions(const OAICombined_submission_data &oai_combined_submission_data);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_copy_template_data OAICopy_template_data [optional]
    */
    virtual void copyTemplate(const QString &template_id, const ::OpenAPI::OptionalParam<OAICopy_template_data> &oai_copy_template_data = ::OpenAPI::OptionalParam<OAICopy_template_data>());

    /**
    * @param[in]  oai_create_custom_file_data OAICreate_custom_file_data [required]
    */
    virtual void createCustomFileFromUpload(const OAICreate_custom_file_data &oai_create_custom_file_data);

    /**
    * @param[in]  data_request_id QString [required]
    */
    virtual void createDataRequestToken(const QString &data_request_id);

    /**
    * @param[in]  oai_create_folder_data OAICreate_folder_data [required]
    */
    virtual void createFolder(const OAICreate_folder_data &oai_create_folder_data);

    /**
    * @param[in]  oai_create_html_template_data OAICreate_html_template_data [required]
    */
    virtual void createHTMLTemplate(const OAICreate_html_template_data &oai_create_html_template_data);

    /**
    * @param[in]  template_document OAIHttpFileElement [required]
    * @param[in]  template_name QString [required]
    * @param[in]  template_parent_folder_id QString [optional]
    */
    virtual void createPDFTemplate(const OAIHttpFileElement &template_document, const QString &template_name, const ::OpenAPI::OptionalParam<QString> &template_parent_folder_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_template_from_upload_data OAICreate_template_from_upload_data [required]
    */
    virtual void createPDFTemplateFromUpload(const OAICreate_template_from_upload_data &oai_create_template_from_upload_data);

    /**
    * @param[in]  folder_id QString [required]
    */
    virtual void deleteFolder(const QString &folder_id);

    /**
    * @param[in]  combined_submission_id QString [required]
    */
    virtual void expireCombinedSubmission(const QString &combined_submission_id);

    /**
    * @param[in]  submission_id QString [required]
    */
    virtual void expireSubmission(const QString &submission_id);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_submission_data OAISubmission_data [required]
    */
    virtual void generatePDF(const QString &template_id, const OAISubmission_data &oai_submission_data);

    /**
    * @param[in]  combined_submission_id QString [required]
    */
    virtual void getCombinedSubmission(const QString &combined_submission_id);

    /**
    * @param[in]  data_request_id QString [required]
    */
    virtual void getDataRequest(const QString &data_request_id);

    /**
    * @param[in]  template_id QString [required]
    */
    virtual void getFullTemplate(const QString &template_id);


    virtual void getPresignUrl();

    /**
    * @param[in]  submission_id QString [required]
    * @param[in]  include_data bool [optional]
    */
    virtual void getSubmission(const QString &submission_id, const ::OpenAPI::OptionalParam<bool> &include_data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  submission_batch_id QString [required]
    * @param[in]  include_submissions bool [optional]
    */
    virtual void getSubmissionBatch(const QString &submission_batch_id, const ::OpenAPI::OptionalParam<bool> &include_submissions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  template_id QString [required]
    */
    virtual void getTemplate(const QString &template_id);

    /**
    * @param[in]  template_id QString [required]
    */
    virtual void getTemplateSchema(const QString &template_id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listCombinedSubmissions(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent_folder_id QString [optional]
    */
    virtual void listFolders(const ::OpenAPI::OptionalParam<QString> &parent_folder_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit double [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  include_data bool [optional]
    */
    virtual void listSubmissions(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  parent_folder_id QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listTemplates(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_folder_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_move_folder_data OAIMove_folder_data [required]
    */
    virtual void moveFolderToFolder(const QString &folder_id, const OAIMove_folder_data &oai_move_folder_data);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_move_template_data OAIMove_template_data [required]
    */
    virtual void moveTemplateToFolder(const QString &template_id, const OAIMove_template_data &oai_move_template_data);

    /**
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_rename_folder_data OAIRename_folder_data [required]
    */
    virtual void renameFolder(const QString &folder_id, const OAIRename_folder_data &oai_rename_folder_data);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit double [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  include_data bool [optional]
    */
    virtual void templatesTemplateIdSubmissionsGet(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_data = ::OpenAPI::OptionalParam<bool>());


    virtual void testAuthentication();

    /**
    * @param[in]  data_request_id QString [required]
    * @param[in]  oai_update_submission_data_request_data OAIUpdate_submission_data_request_data [required]
    */
    virtual void updateDataRequest(const QString &data_request_id, const OAIUpdate_submission_data_request_data &oai_update_submission_data_request_data);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_update_template_data OAIUpdate_template_data [required]
    */
    virtual void updateTemplate(const QString &template_id, const OAIUpdate_template_data &oai_update_template_data);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFieldsToTemplateCallback(OAIHttpRequestWorker *worker);
    void batchGeneratePdfV1Callback(OAIHttpRequestWorker *worker);
    void batchGeneratePdfsCallback(OAIHttpRequestWorker *worker);
    void combinePdfsCallback(OAIHttpRequestWorker *worker);
    void combineSubmissionsCallback(OAIHttpRequestWorker *worker);
    void copyTemplateCallback(OAIHttpRequestWorker *worker);
    void createCustomFileFromUploadCallback(OAIHttpRequestWorker *worker);
    void createDataRequestTokenCallback(OAIHttpRequestWorker *worker);
    void createFolderCallback(OAIHttpRequestWorker *worker);
    void createHTMLTemplateCallback(OAIHttpRequestWorker *worker);
    void createPDFTemplateCallback(OAIHttpRequestWorker *worker);
    void createPDFTemplateFromUploadCallback(OAIHttpRequestWorker *worker);
    void deleteFolderCallback(OAIHttpRequestWorker *worker);
    void expireCombinedSubmissionCallback(OAIHttpRequestWorker *worker);
    void expireSubmissionCallback(OAIHttpRequestWorker *worker);
    void generatePDFCallback(OAIHttpRequestWorker *worker);
    void getCombinedSubmissionCallback(OAIHttpRequestWorker *worker);
    void getDataRequestCallback(OAIHttpRequestWorker *worker);
    void getFullTemplateCallback(OAIHttpRequestWorker *worker);
    void getPresignUrlCallback(OAIHttpRequestWorker *worker);
    void getSubmissionCallback(OAIHttpRequestWorker *worker);
    void getSubmissionBatchCallback(OAIHttpRequestWorker *worker);
    void getTemplateCallback(OAIHttpRequestWorker *worker);
    void getTemplateSchemaCallback(OAIHttpRequestWorker *worker);
    void listCombinedSubmissionsCallback(OAIHttpRequestWorker *worker);
    void listFoldersCallback(OAIHttpRequestWorker *worker);
    void listSubmissionsCallback(OAIHttpRequestWorker *worker);
    void listTemplatesCallback(OAIHttpRequestWorker *worker);
    void moveFolderToFolderCallback(OAIHttpRequestWorker *worker);
    void moveTemplateToFolderCallback(OAIHttpRequestWorker *worker);
    void renameFolderCallback(OAIHttpRequestWorker *worker);
    void templatesTemplateIdSubmissionsGetCallback(OAIHttpRequestWorker *worker);
    void testAuthenticationCallback(OAIHttpRequestWorker *worker);
    void updateDataRequestCallback(OAIHttpRequestWorker *worker);
    void updateTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFieldsToTemplateSignal(OAIAdd_fields_template_response summary);
    void batchGeneratePdfV1Signal(QList<OAICreate_submission_response_1> summary);
    void batchGeneratePdfsSignal(OAICreate_submission_batch_response summary);
    void combinePdfsSignal(OAICreate_combined_submission_response summary);
    void combineSubmissionsSignal(OAICreate_combined_submission_response summary);
    void copyTemplateSignal(OAITemplate summary);
    void createCustomFileFromUploadSignal(OAICreate_custom_file_response summary);
    void createDataRequestTokenSignal(OAICreate_submission_data_request_token_response summary);
    void createFolderSignal(OAIFolder summary);
    void createHTMLTemplateSignal(OAIPending_template summary);
    void createPDFTemplateSignal(OAIPending_template summary);
    void createPDFTemplateFromUploadSignal(OAIPending_template summary);
    void deleteFolderSignal(OAIFolder summary);
    void expireCombinedSubmissionSignal(OAICombined_submission summary);
    void expireSubmissionSignal(OAISubmission summary);
    void generatePDFSignal(OAICreate_submission_response summary);
    void getCombinedSubmissionSignal(OAICombined_submission summary);
    void getDataRequestSignal(OAISubmission_data_request summary);
    void getFullTemplateSignal(OAIFull_template summary);
    void getPresignUrlSignal(OAIUpload_presign summary);
    void getSubmissionSignal(OAISubmission summary);
    void getSubmissionBatchSignal(OAISubmission_batch summary);
    void getTemplateSignal(OAITemplate summary);
    void getTemplateSchemaSignal(OAITemplate_schema summary);
    void listCombinedSubmissionsSignal(QList<OAICombined_submission> summary);
    void listFoldersSignal(QList<OAIFolder> summary);
    void listSubmissionsSignal(OAIList_submissions_response summary);
    void listTemplatesSignal(QList<OAITemplate> summary);
    void moveFolderToFolderSignal(OAIFolder summary);
    void moveTemplateToFolderSignal(OAITemplate summary);
    void renameFolderSignal();
    void templatesTemplateIdSubmissionsGetSignal(OAIList_submissions_response summary);
    void testAuthenticationSignal(OAIAuthentication_success_response summary);
    void updateDataRequestSignal(OAIUpdate_data_request_response summary);
    void updateTemplateSignal(OAIUpdate_template_response summary);


    void addFieldsToTemplateSignalFull(OAIHttpRequestWorker *worker, OAIAdd_fields_template_response summary);
    void batchGeneratePdfV1SignalFull(OAIHttpRequestWorker *worker, QList<OAICreate_submission_response_1> summary);
    void batchGeneratePdfsSignalFull(OAIHttpRequestWorker *worker, OAICreate_submission_batch_response summary);
    void combinePdfsSignalFull(OAIHttpRequestWorker *worker, OAICreate_combined_submission_response summary);
    void combineSubmissionsSignalFull(OAIHttpRequestWorker *worker, OAICreate_combined_submission_response summary);
    void copyTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void createCustomFileFromUploadSignalFull(OAIHttpRequestWorker *worker, OAICreate_custom_file_response summary);
    void createDataRequestTokenSignalFull(OAIHttpRequestWorker *worker, OAICreate_submission_data_request_token_response summary);
    void createFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void createHTMLTemplateSignalFull(OAIHttpRequestWorker *worker, OAIPending_template summary);
    void createPDFTemplateSignalFull(OAIHttpRequestWorker *worker, OAIPending_template summary);
    void createPDFTemplateFromUploadSignalFull(OAIHttpRequestWorker *worker, OAIPending_template summary);
    void deleteFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void expireCombinedSubmissionSignalFull(OAIHttpRequestWorker *worker, OAICombined_submission summary);
    void expireSubmissionSignalFull(OAIHttpRequestWorker *worker, OAISubmission summary);
    void generatePDFSignalFull(OAIHttpRequestWorker *worker, OAICreate_submission_response summary);
    void getCombinedSubmissionSignalFull(OAIHttpRequestWorker *worker, OAICombined_submission summary);
    void getDataRequestSignalFull(OAIHttpRequestWorker *worker, OAISubmission_data_request summary);
    void getFullTemplateSignalFull(OAIHttpRequestWorker *worker, OAIFull_template summary);
    void getPresignUrlSignalFull(OAIHttpRequestWorker *worker, OAIUpload_presign summary);
    void getSubmissionSignalFull(OAIHttpRequestWorker *worker, OAISubmission summary);
    void getSubmissionBatchSignalFull(OAIHttpRequestWorker *worker, OAISubmission_batch summary);
    void getTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void getTemplateSchemaSignalFull(OAIHttpRequestWorker *worker, OAITemplate_schema summary);
    void listCombinedSubmissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICombined_submission> summary);
    void listFoldersSignalFull(OAIHttpRequestWorker *worker, QList<OAIFolder> summary);
    void listSubmissionsSignalFull(OAIHttpRequestWorker *worker, OAIList_submissions_response summary);
    void listTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate> summary);
    void moveFolderToFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void moveTemplateToFolderSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void renameFolderSignalFull(OAIHttpRequestWorker *worker);
    void templatesTemplateIdSubmissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIList_submissions_response summary);
    void testAuthenticationSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_success_response summary);
    void updateDataRequestSignalFull(OAIHttpRequestWorker *worker, OAIUpdate_data_request_response summary);
    void updateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdate_template_response summary);

    Q_DECL_DEPRECATED_X("Use addFieldsToTemplateSignalError() instead")
    void addFieldsToTemplateSignalE(OAIAdd_fields_template_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldsToTemplateSignalError(OAIAdd_fields_template_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchGeneratePdfV1SignalError() instead")
    void batchGeneratePdfV1SignalE(QList<OAICreate_submission_response_1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchGeneratePdfV1SignalError(QList<OAICreate_submission_response_1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchGeneratePdfsSignalError() instead")
    void batchGeneratePdfsSignalE(OAICreate_submission_batch_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchGeneratePdfsSignalError(OAICreate_submission_batch_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combinePdfsSignalError() instead")
    void combinePdfsSignalE(OAICreate_combined_submission_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combinePdfsSignalError(OAICreate_combined_submission_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineSubmissionsSignalError() instead")
    void combineSubmissionsSignalE(OAICreate_combined_submission_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combineSubmissionsSignalError(OAICreate_combined_submission_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyTemplateSignalError() instead")
    void copyTemplateSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyTemplateSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFileFromUploadSignalError() instead")
    void createCustomFileFromUploadSignalE(OAICreate_custom_file_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFileFromUploadSignalError(OAICreate_custom_file_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataRequestTokenSignalError() instead")
    void createDataRequestTokenSignalE(OAICreate_submission_data_request_token_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataRequestTokenSignalError(OAICreate_submission_data_request_token_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalError() instead")
    void createFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHTMLTemplateSignalError() instead")
    void createHTMLTemplateSignalE(OAIPending_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHTMLTemplateSignalError(OAIPending_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPDFTemplateSignalError() instead")
    void createPDFTemplateSignalE(OAIPending_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPDFTemplateSignalError(OAIPending_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPDFTemplateFromUploadSignalError() instead")
    void createPDFTemplateFromUploadSignalE(OAIPending_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPDFTemplateFromUploadSignalError(OAIPending_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalError() instead")
    void deleteFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireCombinedSubmissionSignalError() instead")
    void expireCombinedSubmissionSignalE(OAICombined_submission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expireCombinedSubmissionSignalError(OAICombined_submission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireSubmissionSignalError() instead")
    void expireSubmissionSignalE(OAISubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expireSubmissionSignalError(OAISubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePDFSignalError() instead")
    void generatePDFSignalE(OAICreate_submission_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePDFSignalError(OAICreate_submission_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCombinedSubmissionSignalError() instead")
    void getCombinedSubmissionSignalE(OAICombined_submission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCombinedSubmissionSignalError(OAICombined_submission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataRequestSignalError() instead")
    void getDataRequestSignalE(OAISubmission_data_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataRequestSignalError(OAISubmission_data_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFullTemplateSignalError() instead")
    void getFullTemplateSignalE(OAIFull_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFullTemplateSignalError(OAIFull_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPresignUrlSignalError() instead")
    void getPresignUrlSignalE(OAIUpload_presign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPresignUrlSignalError(OAIUpload_presign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionSignalError() instead")
    void getSubmissionSignalE(OAISubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionSignalError(OAISubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionBatchSignalError() instead")
    void getSubmissionBatchSignalE(OAISubmission_batch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionBatchSignalError(OAISubmission_batch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateSignalError() instead")
    void getTemplateSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateSchemaSignalError() instead")
    void getTemplateSchemaSignalE(OAITemplate_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateSchemaSignalError(OAITemplate_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCombinedSubmissionsSignalError() instead")
    void listCombinedSubmissionsSignalE(QList<OAICombined_submission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCombinedSubmissionsSignalError(QList<OAICombined_submission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalError() instead")
    void listFoldersSignalE(QList<OAIFolder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalError(QList<OAIFolder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubmissionsSignalError() instead")
    void listSubmissionsSignalE(OAIList_submissions_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubmissionsSignalError(OAIList_submissions_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalError() instead")
    void listTemplatesSignalE(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalError(QList<OAITemplate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveFolderToFolderSignalError() instead")
    void moveFolderToFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveFolderToFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveTemplateToFolderSignalError() instead")
    void moveTemplateToFolderSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveTemplateToFolderSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameFolderSignalError() instead")
    void renameFolderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameFolderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesTemplateIdSubmissionsGetSignalError() instead")
    void templatesTemplateIdSubmissionsGetSignalE(OAIList_submissions_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesTemplateIdSubmissionsGetSignalError(OAIList_submissions_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testAuthenticationSignalError() instead")
    void testAuthenticationSignalE(OAIAuthentication_success_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testAuthenticationSignalError(OAIAuthentication_success_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataRequestSignalError() instead")
    void updateDataRequestSignalE(OAIUpdate_data_request_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataRequestSignalError(OAIUpdate_data_request_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalError() instead")
    void updateTemplateSignalE(OAIUpdate_template_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalError(OAIUpdate_template_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFieldsToTemplateSignalErrorFull() instead")
    void addFieldsToTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldsToTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchGeneratePdfV1SignalErrorFull() instead")
    void batchGeneratePdfV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchGeneratePdfV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchGeneratePdfsSignalErrorFull() instead")
    void batchGeneratePdfsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchGeneratePdfsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combinePdfsSignalErrorFull() instead")
    void combinePdfsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combinePdfsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineSubmissionsSignalErrorFull() instead")
    void combineSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combineSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyTemplateSignalErrorFull() instead")
    void copyTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFileFromUploadSignalErrorFull() instead")
    void createCustomFileFromUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFileFromUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataRequestTokenSignalErrorFull() instead")
    void createDataRequestTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataRequestTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalErrorFull() instead")
    void createFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createHTMLTemplateSignalErrorFull() instead")
    void createHTMLTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHTMLTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPDFTemplateSignalErrorFull() instead")
    void createPDFTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPDFTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPDFTemplateFromUploadSignalErrorFull() instead")
    void createPDFTemplateFromUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPDFTemplateFromUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalErrorFull() instead")
    void deleteFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireCombinedSubmissionSignalErrorFull() instead")
    void expireCombinedSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expireCombinedSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireSubmissionSignalErrorFull() instead")
    void expireSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expireSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePDFSignalErrorFull() instead")
    void generatePDFSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePDFSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCombinedSubmissionSignalErrorFull() instead")
    void getCombinedSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCombinedSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataRequestSignalErrorFull() instead")
    void getDataRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFullTemplateSignalErrorFull() instead")
    void getFullTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFullTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPresignUrlSignalErrorFull() instead")
    void getPresignUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPresignUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionSignalErrorFull() instead")
    void getSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionBatchSignalErrorFull() instead")
    void getSubmissionBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateSignalErrorFull() instead")
    void getTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTemplateSchemaSignalErrorFull() instead")
    void getTemplateSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTemplateSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCombinedSubmissionsSignalErrorFull() instead")
    void listCombinedSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCombinedSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalErrorFull() instead")
    void listFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubmissionsSignalErrorFull() instead")
    void listSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalErrorFull() instead")
    void listTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveFolderToFolderSignalErrorFull() instead")
    void moveFolderToFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveFolderToFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveTemplateToFolderSignalErrorFull() instead")
    void moveTemplateToFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveTemplateToFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameFolderSignalErrorFull() instead")
    void renameFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesTemplateIdSubmissionsGetSignalErrorFull() instead")
    void templatesTemplateIdSubmissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesTemplateIdSubmissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testAuthenticationSignalErrorFull() instead")
    void testAuthenticationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testAuthenticationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataRequestSignalErrorFull() instead")
    void updateDataRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalErrorFull() instead")
    void updateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
