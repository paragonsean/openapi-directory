/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombined_submission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombined_submission::OAICombined_submission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombined_submission::OAICombined_submission() {
    this->initializeModel();
}

OAICombined_submission::~OAICombined_submission() {}

void OAICombined_submission::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pdf_hash_isSet = false;
    m_pdf_hash_isValid = false;

    m_source_pdfs_isSet = false;
    m_source_pdfs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submission_ids_isSet = false;
    m_submission_ids_isValid = false;
}

void OAICombined_submission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombined_submission::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pdf_hash_isValid = ::OpenAPI::fromJsonValue(m_pdf_hash, json[QString("pdf_hash")]);
    m_pdf_hash_isSet = !json[QString("pdf_hash")].isNull() && m_pdf_hash_isValid;

    m_source_pdfs_isValid = ::OpenAPI::fromJsonValue(m_source_pdfs, json[QString("source_pdfs")]);
    m_source_pdfs_isSet = !json[QString("source_pdfs")].isNull() && m_source_pdfs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submission_ids_isValid = ::OpenAPI::fromJsonValue(m_submission_ids, json[QString("submission_ids")]);
    m_submission_ids_isSet = !json[QString("submission_ids")].isNull() && m_submission_ids_isValid;
}

QString OAICombined_submission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombined_submission::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pdf_hash_isSet) {
        obj.insert(QString("pdf_hash"), ::OpenAPI::toJsonValue(m_pdf_hash));
    }
    if (m_source_pdfs.size() > 0) {
        obj.insert(QString("source_pdfs"), ::OpenAPI::toJsonValue(m_source_pdfs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submission_ids.size() > 0) {
        obj.insert(QString("submission_ids"), ::OpenAPI::toJsonValue(m_submission_ids));
    }
    return obj;
}

QList<OAICombined_submission_action> OAICombined_submission::getActions() const {
    return m_actions;
}
void OAICombined_submission::setActions(const QList<OAICombined_submission_action> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICombined_submission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICombined_submission::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAICombined_submission::getDownloadUrl() const {
    return m_download_url;
}
void OAICombined_submission::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAICombined_submission::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAICombined_submission::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAICombined_submission::getErrorMessage() const {
    return m_error_message;
}
void OAICombined_submission::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAICombined_submission::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAICombined_submission::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAICombined_submission::isExpired() const {
    return m_expired;
}
void OAICombined_submission::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAICombined_submission::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAICombined_submission::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAICombined_submission::getExpiresAt() const {
    return m_expires_at;
}
void OAICombined_submission::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICombined_submission::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICombined_submission::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint32 OAICombined_submission::getExpiresIn() const {
    return m_expires_in;
}
void OAICombined_submission::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAICombined_submission::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAICombined_submission::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAICombined_submission::getId() const {
    return m_id;
}
void OAICombined_submission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICombined_submission::is_id_Set() const{
    return m_id_isSet;
}

bool OAICombined_submission::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAICombined_submission::getMetadata() const {
    return m_metadata;
}
void OAICombined_submission::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICombined_submission::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICombined_submission::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICombined_submission::getPassword() const {
    return m_password;
}
void OAICombined_submission::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICombined_submission::is_password_Set() const{
    return m_password_isSet;
}

bool OAICombined_submission::is_password_Valid() const{
    return m_password_isValid;
}

QString OAICombined_submission::getPdfHash() const {
    return m_pdf_hash;
}
void OAICombined_submission::setPdfHash(const QString &pdf_hash) {
    m_pdf_hash = pdf_hash;
    m_pdf_hash_isSet = true;
}

bool OAICombined_submission::is_pdf_hash_Set() const{
    return m_pdf_hash_isSet;
}

bool OAICombined_submission::is_pdf_hash_Valid() const{
    return m_pdf_hash_isValid;
}

QList<OAICombined_submission_source_pdfs_inner> OAICombined_submission::getSourcePdfs() const {
    return m_source_pdfs;
}
void OAICombined_submission::setSourcePdfs(const QList<OAICombined_submission_source_pdfs_inner> &source_pdfs) {
    m_source_pdfs = source_pdfs;
    m_source_pdfs_isSet = true;
}

bool OAICombined_submission::is_source_pdfs_Set() const{
    return m_source_pdfs_isSet;
}

bool OAICombined_submission::is_source_pdfs_Valid() const{
    return m_source_pdfs_isValid;
}

QString OAICombined_submission::getState() const {
    return m_state;
}
void OAICombined_submission::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICombined_submission::is_state_Set() const{
    return m_state_isSet;
}

bool OAICombined_submission::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAICombined_submission::getSubmissionIds() const {
    return m_submission_ids;
}
void OAICombined_submission::setSubmissionIds(const QList<QString> &submission_ids) {
    m_submission_ids = submission_ids;
    m_submission_ids_isSet = true;
}

bool OAICombined_submission::is_submission_ids_Set() const{
    return m_submission_ids_isSet;
}

bool OAICombined_submission::is_submission_ids_Valid() const{
    return m_submission_ids_isValid;
}

bool OAICombined_submission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_pdfs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombined_submission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expired_isValid && m_id_isValid && m_source_pdfs_isValid && m_state_isValid && m_submission_ids_isValid && true;
}

} // namespace OpenAPI
