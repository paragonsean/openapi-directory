/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombine_pdfs_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombine_pdfs_data::OAICombine_pdfs_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombine_pdfs_data::OAICombine_pdfs_data() {
    this->initializeModel();
}

OAICombine_pdfs_data::~OAICombine_pdfs_data() {}

void OAICombine_pdfs_data::initializeModel() {

    m_delete_custom_files_isSet = false;
    m_delete_custom_files_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_source_pdfs_isSet = false;
    m_source_pdfs_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAICombine_pdfs_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombine_pdfs_data::fromJsonObject(QJsonObject json) {

    m_delete_custom_files_isValid = ::OpenAPI::fromJsonValue(m_delete_custom_files, json[QString("delete_custom_files")]);
    m_delete_custom_files_isSet = !json[QString("delete_custom_files")].isNull() && m_delete_custom_files_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_source_pdfs_isValid = ::OpenAPI::fromJsonValue(m_source_pdfs, json[QString("source_pdfs")]);
    m_source_pdfs_isSet = !json[QString("source_pdfs")].isNull() && m_source_pdfs_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAICombine_pdfs_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombine_pdfs_data::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_custom_files_isSet) {
        obj.insert(QString("delete_custom_files"), ::OpenAPI::toJsonValue(m_delete_custom_files));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_source_pdfs.size() > 0) {
        obj.insert(QString("source_pdfs"), ::OpenAPI::toJsonValue(m_source_pdfs));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

bool OAICombine_pdfs_data::isDeleteCustomFiles() const {
    return m_delete_custom_files;
}
void OAICombine_pdfs_data::setDeleteCustomFiles(const bool &delete_custom_files) {
    m_delete_custom_files = delete_custom_files;
    m_delete_custom_files_isSet = true;
}

bool OAICombine_pdfs_data::is_delete_custom_files_Set() const{
    return m_delete_custom_files_isSet;
}

bool OAICombine_pdfs_data::is_delete_custom_files_Valid() const{
    return m_delete_custom_files_isValid;
}

qint32 OAICombine_pdfs_data::getExpiresIn() const {
    return m_expires_in;
}
void OAICombine_pdfs_data::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAICombine_pdfs_data::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAICombine_pdfs_data::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

OAIObject OAICombine_pdfs_data::getMetadata() const {
    return m_metadata;
}
void OAICombine_pdfs_data::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICombine_pdfs_data::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICombine_pdfs_data::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICombine_pdfs_data::getPassword() const {
    return m_password;
}
void OAICombine_pdfs_data::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICombine_pdfs_data::is_password_Set() const{
    return m_password_isSet;
}

bool OAICombine_pdfs_data::is_password_Valid() const{
    return m_password_isValid;
}

QList<OAICombined_submission_source_pdfs_inner> OAICombine_pdfs_data::getSourcePdfs() const {
    return m_source_pdfs;
}
void OAICombine_pdfs_data::setSourcePdfs(const QList<OAICombined_submission_source_pdfs_inner> &source_pdfs) {
    m_source_pdfs = source_pdfs;
    m_source_pdfs_isSet = true;
}

bool OAICombine_pdfs_data::is_source_pdfs_Set() const{
    return m_source_pdfs_isSet;
}

bool OAICombine_pdfs_data::is_source_pdfs_Valid() const{
    return m_source_pdfs_isValid;
}

bool OAICombine_pdfs_data::isTest() const {
    return m_test;
}
void OAICombine_pdfs_data::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICombine_pdfs_data::is_test_Set() const{
    return m_test_isSet;
}

bool OAICombine_pdfs_data::is_test_Valid() const{
    return m_test_isValid;
}

bool OAICombine_pdfs_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_custom_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_pdfs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombine_pdfs_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_pdfs_isValid && true;
}

} // namespace OpenAPI
