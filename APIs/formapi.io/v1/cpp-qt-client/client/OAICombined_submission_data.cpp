/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombined_submission_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombined_submission_data::OAICombined_submission_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombined_submission_data::OAICombined_submission_data() {
    this->initializeModel();
}

OAICombined_submission_data::~OAICombined_submission_data() {}

void OAICombined_submission_data::initializeModel() {

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_submission_ids_isSet = false;
    m_submission_ids_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAICombined_submission_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombined_submission_data::fromJsonObject(QJsonObject json) {

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_submission_ids_isValid = ::OpenAPI::fromJsonValue(m_submission_ids, json[QString("submission_ids")]);
    m_submission_ids_isSet = !json[QString("submission_ids")].isNull() && m_submission_ids_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAICombined_submission_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombined_submission_data::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_submission_ids.size() > 0) {
        obj.insert(QString("submission_ids"), ::OpenAPI::toJsonValue(m_submission_ids));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

qint32 OAICombined_submission_data::getExpiresIn() const {
    return m_expires_in;
}
void OAICombined_submission_data::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAICombined_submission_data::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAICombined_submission_data::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

OAIObject OAICombined_submission_data::getMetadata() const {
    return m_metadata;
}
void OAICombined_submission_data::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICombined_submission_data::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICombined_submission_data::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICombined_submission_data::getPassword() const {
    return m_password;
}
void OAICombined_submission_data::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICombined_submission_data::is_password_Set() const{
    return m_password_isSet;
}

bool OAICombined_submission_data::is_password_Valid() const{
    return m_password_isValid;
}

QList<QString> OAICombined_submission_data::getSubmissionIds() const {
    return m_submission_ids;
}
void OAICombined_submission_data::setSubmissionIds(const QList<QString> &submission_ids) {
    m_submission_ids = submission_ids;
    m_submission_ids_isSet = true;
}

bool OAICombined_submission_data::is_submission_ids_Set() const{
    return m_submission_ids_isSet;
}

bool OAICombined_submission_data::is_submission_ids_Valid() const{
    return m_submission_ids_isValid;
}

bool OAICombined_submission_data::isTest() const {
    return m_test;
}
void OAICombined_submission_data::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICombined_submission_data::is_test_Set() const{
    return m_test_isSet;
}

bool OAICombined_submission_data::is_test_Valid() const{
    return m_test_isValid;
}

bool OAICombined_submission_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombined_submission_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_submission_ids_isValid && true;
}

} // namespace OpenAPI
