/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPending_template.h
 *
 * 
 */

#ifndef OAIPending_template_H
#define OAIPending_template_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPending_template : public OAIObject {
public:
    OAIPending_template();
    OAIPending_template(QString json);
    ~OAIPending_template() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowAdditionalProperties() const;
    void setAllowAdditionalProperties(const bool &allow_additional_properties);
    bool is_allow_additional_properties_Set() const;
    bool is_allow_additional_properties_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEditableSubmissions() const;
    void setEditableSubmissions(const bool &editable_submissions);
    bool is_editable_submissions_Set() const;
    bool is_editable_submissions_Valid() const;

    QString getExpirationInterval() const;
    void setExpirationInterval(const QString &expiration_interval);
    bool is_expiration_interval_Set() const;
    bool is_expiration_interval_Valid() const;

    double getExpireAfter() const;
    void setExpireAfter(const double &expire_after);
    bool is_expire_after_Set() const;
    bool is_expire_after_Valid() const;

    bool isExpireSubmissions() const;
    void setExpireSubmissions(const bool &expire_submissions);
    bool is_expire_submissions_Set() const;
    bool is_expire_submissions_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isLocked() const;
    void setLocked(const bool &locked);
    bool is_locked_Set() const;
    bool is_locked_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getParentFolderId() const;
    void setParentFolderId(const QString &parent_folder_id);
    bool is_parent_folder_id_Set() const;
    bool is_parent_folder_id_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    bool isPublicSubmissions() const;
    void setPublicSubmissions(const bool &public_submissions);
    bool is_public_submissions_Set() const;
    bool is_public_submissions_Valid() const;

    bool isPublicWebForm() const;
    void setPublicWebForm(const bool &public_web_form);
    bool is_public_web_form_Set() const;
    bool is_public_web_form_Valid() const;

    QString getRedirectUrl() const;
    void setRedirectUrl(const QString &redirect_url);
    bool is_redirect_url_Set() const;
    bool is_redirect_url_Valid() const;

    QString getSlackWebhookUrl() const;
    void setSlackWebhookUrl(const QString &slack_webhook_url);
    bool is_slack_webhook_url_Set() const;
    bool is_slack_webhook_url_Valid() const;

    QString getTemplateType() const;
    void setTemplateType(const QString &template_type);
    bool is_template_type_Set() const;
    bool is_template_type_Valid() const;

    QString getWebhookUrl() const;
    void setWebhookUrl(const QString &webhook_url);
    bool is_webhook_url_Set() const;
    bool is_webhook_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_additional_properties;
    bool m_allow_additional_properties_isSet;
    bool m_allow_additional_properties_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_editable_submissions;
    bool m_editable_submissions_isSet;
    bool m_editable_submissions_isValid;

    QString m_expiration_interval;
    bool m_expiration_interval_isSet;
    bool m_expiration_interval_isValid;

    double m_expire_after;
    bool m_expire_after_isSet;
    bool m_expire_after_isValid;

    bool m_expire_submissions;
    bool m_expire_submissions_isSet;
    bool m_expire_submissions_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_locked;
    bool m_locked_isSet;
    bool m_locked_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_parent_folder_id;
    bool m_parent_folder_id_isSet;
    bool m_parent_folder_id_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    bool m_public_submissions;
    bool m_public_submissions_isSet;
    bool m_public_submissions_isValid;

    bool m_public_web_form;
    bool m_public_web_form_isSet;
    bool m_public_web_form_isValid;

    QString m_redirect_url;
    bool m_redirect_url_isSet;
    bool m_redirect_url_isValid;

    QString m_slack_webhook_url;
    bool m_slack_webhook_url_isSet;
    bool m_slack_webhook_url_isValid;

    QString m_template_type;
    bool m_template_type_isSet;
    bool m_template_type_isValid;

    QString m_webhook_url;
    bool m_webhook_url_isSet;
    bool m_webhook_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPending_template)

#endif // OAIPending_template_H
