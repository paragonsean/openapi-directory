/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission_action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission_action::OAISubmission_action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission_action::OAISubmission_action() {
    this->initializeModel();
}

OAISubmission_action::~OAISubmission_action() {}

void OAISubmission_action::initializeModel() {

    m_action_category_isSet = false;
    m_action_category_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_integration_id_isSet = false;
    m_integration_id_isValid = false;

    m_result_data_isSet = false;
    m_result_data_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISubmission_action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission_action::fromJsonObject(QJsonObject json) {

    m_action_category_isValid = ::OpenAPI::fromJsonValue(m_action_category, json[QString("action_category")]);
    m_action_category_isSet = !json[QString("action_category")].isNull() && m_action_category_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("action_type")]);
    m_action_type_isSet = !json[QString("action_type")].isNull() && m_action_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_integration_id_isValid = ::OpenAPI::fromJsonValue(m_integration_id, json[QString("integration_id")]);
    m_integration_id_isSet = !json[QString("integration_id")].isNull() && m_integration_id_isValid;

    m_result_data_isValid = ::OpenAPI::fromJsonValue(m_result_data, json[QString("result_data")]);
    m_result_data_isSet = !json[QString("result_data")].isNull() && m_result_data_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISubmission_action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission_action::asJsonObject() const {
    QJsonObject obj;
    if (m_action_category_isSet) {
        obj.insert(QString("action_category"), ::OpenAPI::toJsonValue(m_action_category));
    }
    if (m_action_type_isSet) {
        obj.insert(QString("action_type"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_integration_id_isSet) {
        obj.insert(QString("integration_id"), ::OpenAPI::toJsonValue(m_integration_id));
    }
    if (m_result_data_isSet) {
        obj.insert(QString("result_data"), ::OpenAPI::toJsonValue(m_result_data));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAISubmission_action::getActionCategory() const {
    return m_action_category;
}
void OAISubmission_action::setActionCategory(const QString &action_category) {
    m_action_category = action_category;
    m_action_category_isSet = true;
}

bool OAISubmission_action::is_action_category_Set() const{
    return m_action_category_isSet;
}

bool OAISubmission_action::is_action_category_Valid() const{
    return m_action_category_isValid;
}

QString OAISubmission_action::getActionType() const {
    return m_action_type;
}
void OAISubmission_action::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAISubmission_action::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAISubmission_action::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAISubmission_action::getId() const {
    return m_id;
}
void OAISubmission_action::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubmission_action::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubmission_action::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubmission_action::getIntegrationId() const {
    return m_integration_id;
}
void OAISubmission_action::setIntegrationId(const QString &integration_id) {
    m_integration_id = integration_id;
    m_integration_id_isSet = true;
}

bool OAISubmission_action::is_integration_id_Set() const{
    return m_integration_id_isSet;
}

bool OAISubmission_action::is_integration_id_Valid() const{
    return m_integration_id_isValid;
}

OAIObject OAISubmission_action::getResultData() const {
    return m_result_data;
}
void OAISubmission_action::setResultData(const OAIObject &result_data) {
    m_result_data = result_data;
    m_result_data_isSet = true;
}

bool OAISubmission_action::is_result_data_Set() const{
    return m_result_data_isSet;
}

bool OAISubmission_action::is_result_data_Valid() const{
    return m_result_data_isValid;
}

QString OAISubmission_action::getState() const {
    return m_state;
}
void OAISubmission_action::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubmission_action::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubmission_action::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISubmission_action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission_action::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_category_isValid && m_action_type_isValid && m_id_isValid && m_integration_id_isValid && m_result_data_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
