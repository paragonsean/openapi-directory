/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission_batch_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission_batch_data::OAISubmission_batch_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission_batch_data::OAISubmission_batch_data() {
    this->initializeModel();
}

OAISubmission_batch_data::~OAISubmission_batch_data() {}

void OAISubmission_batch_data::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_submissions_isSet = false;
    m_submissions_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAISubmission_batch_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission_batch_data::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_submissions_isValid = ::OpenAPI::fromJsonValue(m_submissions, json[QString("submissions")]);
    m_submissions_isSet = !json[QString("submissions")].isNull() && m_submissions_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAISubmission_batch_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission_batch_data::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_submissions.size() > 0) {
        obj.insert(QString("submissions"), ::OpenAPI::toJsonValue(m_submissions));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

OAIObject OAISubmission_batch_data::getMetadata() const {
    return m_metadata;
}
void OAISubmission_batch_data::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubmission_batch_data::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubmission_batch_data::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAISubmission_data_batch_request> OAISubmission_batch_data::getSubmissions() const {
    return m_submissions;
}
void OAISubmission_batch_data::setSubmissions(const QList<OAISubmission_data_batch_request> &submissions) {
    m_submissions = submissions;
    m_submissions_isSet = true;
}

bool OAISubmission_batch_data::is_submissions_Set() const{
    return m_submissions_isSet;
}

bool OAISubmission_batch_data::is_submissions_Valid() const{
    return m_submissions_isValid;
}

QString OAISubmission_batch_data::getTemplateId() const {
    return m_template_id;
}
void OAISubmission_batch_data::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAISubmission_batch_data::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISubmission_batch_data::is_template_id_Valid() const{
    return m_template_id_isValid;
}

bool OAISubmission_batch_data::isTest() const {
    return m_test;
}
void OAISubmission_batch_data::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAISubmission_batch_data::is_test_Set() const{
    return m_test_isSet;
}

bool OAISubmission_batch_data::is_test_Valid() const{
    return m_test_isValid;
}

bool OAISubmission_batch_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission_batch_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_submissions_isValid && true;
}

} // namespace OpenAPI
