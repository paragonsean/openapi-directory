/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission_batch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission_batch::OAISubmission_batch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission_batch::OAISubmission_batch() {
    this->initializeModel();
}

OAISubmission_batch::~OAISubmission_batch() {}

void OAISubmission_batch::initializeModel() {

    m_completion_percentage_isSet = false;
    m_completion_percentage_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_pending_count_isSet = false;
    m_pending_count_isValid = false;

    m_processed_at_isSet = false;
    m_processed_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submissions_isSet = false;
    m_submissions_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAISubmission_batch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission_batch::fromJsonObject(QJsonObject json) {

    m_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_completion_percentage, json[QString("completion_percentage")]);
    m_completion_percentage_isSet = !json[QString("completion_percentage")].isNull() && m_completion_percentage_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("error_count")]);
    m_error_count_isSet = !json[QString("error_count")].isNull() && m_error_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_pending_count_isValid = ::OpenAPI::fromJsonValue(m_pending_count, json[QString("pending_count")]);
    m_pending_count_isSet = !json[QString("pending_count")].isNull() && m_pending_count_isValid;

    m_processed_at_isValid = ::OpenAPI::fromJsonValue(m_processed_at, json[QString("processed_at")]);
    m_processed_at_isSet = !json[QString("processed_at")].isNull() && m_processed_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submissions_isValid = ::OpenAPI::fromJsonValue(m_submissions, json[QString("submissions")]);
    m_submissions_isSet = !json[QString("submissions")].isNull() && m_submissions_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAISubmission_batch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission_batch::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_percentage_isSet) {
        obj.insert(QString("completion_percentage"), ::OpenAPI::toJsonValue(m_completion_percentage));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("error_count"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_pending_count_isSet) {
        obj.insert(QString("pending_count"), ::OpenAPI::toJsonValue(m_pending_count));
    }
    if (m_processed_at_isSet) {
        obj.insert(QString("processed_at"), ::OpenAPI::toJsonValue(m_processed_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submissions.size() > 0) {
        obj.insert(QString("submissions"), ::OpenAPI::toJsonValue(m_submissions));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAISubmission_batch::getCompletionPercentage() const {
    return m_completion_percentage;
}
void OAISubmission_batch::setCompletionPercentage(const qint32 &completion_percentage) {
    m_completion_percentage = completion_percentage;
    m_completion_percentage_isSet = true;
}

bool OAISubmission_batch::is_completion_percentage_Set() const{
    return m_completion_percentage_isSet;
}

bool OAISubmission_batch::is_completion_percentage_Valid() const{
    return m_completion_percentage_isValid;
}

qint32 OAISubmission_batch::getErrorCount() const {
    return m_error_count;
}
void OAISubmission_batch::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAISubmission_batch::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAISubmission_batch::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAISubmission_batch::getId() const {
    return m_id;
}
void OAISubmission_batch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubmission_batch::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubmission_batch::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAISubmission_batch::getMetadata() const {
    return m_metadata;
}
void OAISubmission_batch::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubmission_batch::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubmission_batch::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAISubmission_batch::getPendingCount() const {
    return m_pending_count;
}
void OAISubmission_batch::setPendingCount(const qint32 &pending_count) {
    m_pending_count = pending_count;
    m_pending_count_isSet = true;
}

bool OAISubmission_batch::is_pending_count_Set() const{
    return m_pending_count_isSet;
}

bool OAISubmission_batch::is_pending_count_Valid() const{
    return m_pending_count_isValid;
}

QString OAISubmission_batch::getProcessedAt() const {
    return m_processed_at;
}
void OAISubmission_batch::setProcessedAt(const QString &processed_at) {
    m_processed_at = processed_at;
    m_processed_at_isSet = true;
}

bool OAISubmission_batch::is_processed_at_Set() const{
    return m_processed_at_isSet;
}

bool OAISubmission_batch::is_processed_at_Valid() const{
    return m_processed_at_isValid;
}

QString OAISubmission_batch::getState() const {
    return m_state;
}
void OAISubmission_batch::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubmission_batch::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubmission_batch::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISubmission> OAISubmission_batch::getSubmissions() const {
    return m_submissions;
}
void OAISubmission_batch::setSubmissions(const QList<OAISubmission> &submissions) {
    m_submissions = submissions;
    m_submissions_isSet = true;
}

bool OAISubmission_batch::is_submissions_Set() const{
    return m_submissions_isSet;
}

bool OAISubmission_batch::is_submissions_Valid() const{
    return m_submissions_isValid;
}

qint32 OAISubmission_batch::getTotalCount() const {
    return m_total_count;
}
void OAISubmission_batch::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAISubmission_batch::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAISubmission_batch::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAISubmission_batch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission_batch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_completion_percentage_isValid && m_error_count_isValid && m_id_isValid && m_metadata_isValid && m_pending_count_isValid && m_processed_at_isValid && m_state_isValid && m_total_count_isValid && true;
}

} // namespace OpenAPI
