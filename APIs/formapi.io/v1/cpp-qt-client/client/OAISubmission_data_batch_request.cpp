/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission_data_batch_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission_data_batch_request::OAISubmission_data_batch_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission_data_batch_request::OAISubmission_data_batch_request() {
    this->initializeModel();
}

OAISubmission_data_batch_request::~OAISubmission_data_batch_request() {}

void OAISubmission_data_batch_request::initializeModel() {

    m_css_isSet = false;
    m_css_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAISubmission_data_batch_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission_data_batch_request::fromJsonObject(QJsonObject json) {

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAISubmission_data_batch_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission_data_batch_request::asJsonObject() const {
    QJsonObject obj;
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

QString OAISubmission_data_batch_request::getCss() const {
    return m_css;
}
void OAISubmission_data_batch_request::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAISubmission_data_batch_request::is_css_Set() const{
    return m_css_isSet;
}

bool OAISubmission_data_batch_request::is_css_Valid() const{
    return m_css_isValid;
}

OAIObject OAISubmission_data_batch_request::getData() const {
    return m_data;
}
void OAISubmission_data_batch_request::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISubmission_data_batch_request::is_data_Set() const{
    return m_data_isSet;
}

bool OAISubmission_data_batch_request::is_data_Valid() const{
    return m_data_isValid;
}

QString OAISubmission_data_batch_request::getHtml() const {
    return m_html;
}
void OAISubmission_data_batch_request::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAISubmission_data_batch_request::is_html_Set() const{
    return m_html_isSet;
}

bool OAISubmission_data_batch_request::is_html_Valid() const{
    return m_html_isValid;
}

OAIObject OAISubmission_data_batch_request::getMetadata() const {
    return m_metadata;
}
void OAISubmission_data_batch_request::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubmission_data_batch_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubmission_data_batch_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISubmission_data_batch_request::getTemplateId() const {
    return m_template_id;
}
void OAISubmission_data_batch_request::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAISubmission_data_batch_request::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISubmission_data_batch_request::is_template_id_Valid() const{
    return m_template_id_isValid;
}

bool OAISubmission_data_batch_request::isTest() const {
    return m_test;
}
void OAISubmission_data_batch_request::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAISubmission_data_batch_request::is_test_Set() const{
    return m_test_isSet;
}

bool OAISubmission_data_batch_request::is_test_Valid() const{
    return m_test_isValid;
}

bool OAISubmission_data_batch_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission_data_batch_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_template_id_isValid && true;
}

} // namespace OpenAPI
