/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdd_fields_data_fields_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdd_fields_data_fields_inner::OAIAdd_fields_data_fields_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdd_fields_data_fields_inner::OAIAdd_fields_data_fields_inner() {
    this->initializeModel();
}

OAIAdd_fields_data_fields_inner::~OAIAdd_fields_data_fields_inner() {}

void OAIAdd_fields_data_fields_inner::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_auto_calculate_max_length_isSet = false;
    m_auto_calculate_max_length_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_color_field_name_isSet = false;
    m_background_color_field_name_isValid = false;

    m_background_color_field_required_isSet = false;
    m_background_color_field_required_isValid = false;

    m_barcode_symbology_isSet = false;
    m_barcode_symbology_isValid = false;

    m_bold_isSet = false;
    m_bold_isValid = false;

    m_character_spacing_isSet = false;
    m_character_spacing_isValid = false;

    m_check_character_isSet = false;
    m_check_character_isValid = false;

    m_check_color_isSet = false;
    m_check_color_isValid = false;

    m_check_color_field_name_isSet = false;
    m_check_color_field_name_isValid = false;

    m_check_color_field_required_isSet = false;
    m_check_color_field_required_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_color_field_name_isSet = false;
    m_color_field_name_isValid = false;

    m_color_field_required_isSet = false;
    m_color_field_required_isValid = false;

    m_comb_isSet = false;
    m_comb_isValid = false;

    m_comb_number_of_cells_isSet = false;
    m_comb_number_of_cells_isValid = false;

    m_comb_value_offset_isSet = false;
    m_comb_value_offset_isValid = false;

    m_combined_field_format_isSet = false;
    m_combined_field_format_isValid = false;

    m_combined_field_names_isSet = false;
    m_combined_field_names_isValid = false;

    m_combined_field_separator_isSet = false;
    m_combined_field_separator_isValid = false;

    m_combined_field_type_isSet = false;
    m_combined_field_type_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_time_format_isSet = false;
    m_date_time_format_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_type_isSet = false;
    m_display_type_isValid = false;

    m_exclusive_maximum_isSet = false;
    m_exclusive_maximum_isValid = false;

    m_exclusive_minimum_isSet = false;
    m_exclusive_minimum_isValid = false;

    m_false_text_isSet = false;
    m_false_text_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_gravity_isSet = false;
    m_image_gravity_isValid = false;

    m_image_scale_type_isSet = false;
    m_image_scale_type_isValid = false;

    m_include_time_isSet = false;
    m_include_time_isValid = false;

    m_integer_isSet = false;
    m_integer_isValid = false;

    m_invert_boolean_condition_isSet = false;
    m_invert_boolean_condition_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_multiline_isSet = false;
    m_multiline_isValid = false;

    m_multiline_lines_isSet = false;
    m_multiline_lines_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_condition_range_exclusive_max_isSet = false;
    m_number_condition_range_exclusive_max_isValid = false;

    m_number_condition_range_exclusive_min_isSet = false;
    m_number_condition_range_exclusive_min_isValid = false;

    m_number_condition_range_max_isSet = false;
    m_number_condition_range_max_isValid = false;

    m_number_condition_range_min_isSet = false;
    m_number_condition_range_min_isValid = false;

    m_number_condition_type_isSet = false;
    m_number_condition_type_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_option_list_isSet = false;
    m_option_list_isValid = false;

    m_overflow_isSet = false;
    m_overflow_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_placeholder_isSet = false;
    m_placeholder_isValid = false;

    m_qrcode_color_isSet = false;
    m_qrcode_color_isValid = false;

    m_qrcode_color_field_name_isSet = false;
    m_qrcode_color_field_name_isValid = false;

    m_qrcode_color_field_required_isSet = false;
    m_qrcode_color_field_required_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_shape_border_color_isSet = false;
    m_shape_border_color_isValid = false;

    m_shape_border_color_field_name_isSet = false;
    m_shape_border_color_field_name_isValid = false;

    m_shape_border_color_field_required_isSet = false;
    m_shape_border_color_field_required_isValid = false;

    m_shape_border_width_isSet = false;
    m_shape_border_width_isValid = false;

    m_shape_fill_color_isSet = false;
    m_shape_fill_color_isValid = false;

    m_shape_fill_color_field_name_isSet = false;
    m_shape_fill_color_field_name_isValid = false;

    m_shape_fill_color_field_required_isSet = false;
    m_shape_fill_color_field_required_isValid = false;

    m_shape_type_isSet = false;
    m_shape_type_isValid = false;

    m_signature_allow_draw_isSet = false;
    m_signature_allow_draw_isValid = false;

    m_signature_allow_type_isSet = false;
    m_signature_allow_type_isValid = false;

    m_r_static_isSet = false;
    m_r_static_isValid = false;

    m_strikethrough_isSet = false;
    m_strikethrough_isValid = false;

    m_string_condition_type_isSet = false;
    m_string_condition_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_true_text_isSet = false;
    m_true_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_typeface_isSet = false;
    m_typeface_isValid = false;

    m_uppercase_isSet = false;
    m_uppercase_isValid = false;

    m_v_alignment_isSet = false;
    m_v_alignment_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIAdd_fields_data_fields_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdd_fields_data_fields_inner::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_auto_calculate_max_length_isValid = ::OpenAPI::fromJsonValue(m_auto_calculate_max_length, json[QString("autoCalculateMaxLength")]);
    m_auto_calculate_max_length_isSet = !json[QString("autoCalculateMaxLength")].isNull() && m_auto_calculate_max_length_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_background_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_background_color_field_name, json[QString("backgroundColorFieldName")]);
    m_background_color_field_name_isSet = !json[QString("backgroundColorFieldName")].isNull() && m_background_color_field_name_isValid;

    m_background_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_background_color_field_required, json[QString("backgroundColorFieldRequired")]);
    m_background_color_field_required_isSet = !json[QString("backgroundColorFieldRequired")].isNull() && m_background_color_field_required_isValid;

    m_barcode_symbology_isValid = ::OpenAPI::fromJsonValue(m_barcode_symbology, json[QString("barcodeSymbology")]);
    m_barcode_symbology_isSet = !json[QString("barcodeSymbology")].isNull() && m_barcode_symbology_isValid;

    m_bold_isValid = ::OpenAPI::fromJsonValue(m_bold, json[QString("bold")]);
    m_bold_isSet = !json[QString("bold")].isNull() && m_bold_isValid;

    m_character_spacing_isValid = ::OpenAPI::fromJsonValue(m_character_spacing, json[QString("characterSpacing")]);
    m_character_spacing_isSet = !json[QString("characterSpacing")].isNull() && m_character_spacing_isValid;

    m_check_character_isValid = ::OpenAPI::fromJsonValue(m_check_character, json[QString("checkCharacter")]);
    m_check_character_isSet = !json[QString("checkCharacter")].isNull() && m_check_character_isValid;

    m_check_color_isValid = ::OpenAPI::fromJsonValue(m_check_color, json[QString("checkColor")]);
    m_check_color_isSet = !json[QString("checkColor")].isNull() && m_check_color_isValid;

    m_check_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_check_color_field_name, json[QString("checkColorFieldName")]);
    m_check_color_field_name_isSet = !json[QString("checkColorFieldName")].isNull() && m_check_color_field_name_isValid;

    m_check_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_check_color_field_required, json[QString("checkColorFieldRequired")]);
    m_check_color_field_required_isSet = !json[QString("checkColorFieldRequired")].isNull() && m_check_color_field_required_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_color_field_name, json[QString("colorFieldName")]);
    m_color_field_name_isSet = !json[QString("colorFieldName")].isNull() && m_color_field_name_isValid;

    m_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_color_field_required, json[QString("colorFieldRequired")]);
    m_color_field_required_isSet = !json[QString("colorFieldRequired")].isNull() && m_color_field_required_isValid;

    m_comb_isValid = ::OpenAPI::fromJsonValue(m_comb, json[QString("comb")]);
    m_comb_isSet = !json[QString("comb")].isNull() && m_comb_isValid;

    m_comb_number_of_cells_isValid = ::OpenAPI::fromJsonValue(m_comb_number_of_cells, json[QString("combNumberOfCells")]);
    m_comb_number_of_cells_isSet = !json[QString("combNumberOfCells")].isNull() && m_comb_number_of_cells_isValid;

    m_comb_value_offset_isValid = ::OpenAPI::fromJsonValue(m_comb_value_offset, json[QString("combValueOffset")]);
    m_comb_value_offset_isSet = !json[QString("combValueOffset")].isNull() && m_comb_value_offset_isValid;

    m_combined_field_format_isValid = ::OpenAPI::fromJsonValue(m_combined_field_format, json[QString("combinedFieldFormat")]);
    m_combined_field_format_isSet = !json[QString("combinedFieldFormat")].isNull() && m_combined_field_format_isValid;

    m_combined_field_names_isValid = ::OpenAPI::fromJsonValue(m_combined_field_names, json[QString("combinedFieldNames")]);
    m_combined_field_names_isSet = !json[QString("combinedFieldNames")].isNull() && m_combined_field_names_isValid;

    m_combined_field_separator_isValid = ::OpenAPI::fromJsonValue(m_combined_field_separator, json[QString("combinedFieldSeparator")]);
    m_combined_field_separator_isSet = !json[QString("combinedFieldSeparator")].isNull() && m_combined_field_separator_isValid;

    m_combined_field_type_isValid = ::OpenAPI::fromJsonValue(m_combined_field_type, json[QString("combinedFieldType")]);
    m_combined_field_type_isSet = !json[QString("combinedFieldType")].isNull() && m_combined_field_type_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_time_format_isValid = ::OpenAPI::fromJsonValue(m_date_time_format, json[QString("dateTimeFormat")]);
    m_date_time_format_isSet = !json[QString("dateTimeFormat")].isNull() && m_date_time_format_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimalPlaces")]);
    m_decimal_places_isSet = !json[QString("decimalPlaces")].isNull() && m_decimal_places_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_type_isValid = ::OpenAPI::fromJsonValue(m_display_type, json[QString("displayType")]);
    m_display_type_isSet = !json[QString("displayType")].isNull() && m_display_type_isValid;

    m_exclusive_maximum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_maximum, json[QString("exclusiveMaximum")]);
    m_exclusive_maximum_isSet = !json[QString("exclusiveMaximum")].isNull() && m_exclusive_maximum_isValid;

    m_exclusive_minimum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_minimum, json[QString("exclusiveMinimum")]);
    m_exclusive_minimum_isSet = !json[QString("exclusiveMinimum")].isNull() && m_exclusive_minimum_isValid;

    m_false_text_isValid = ::OpenAPI::fromJsonValue(m_false_text, json[QString("falseText")]);
    m_false_text_isSet = !json[QString("falseText")].isNull() && m_false_text_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_gravity_isValid = ::OpenAPI::fromJsonValue(m_image_gravity, json[QString("imageGravity")]);
    m_image_gravity_isSet = !json[QString("imageGravity")].isNull() && m_image_gravity_isValid;

    m_image_scale_type_isValid = ::OpenAPI::fromJsonValue(m_image_scale_type, json[QString("imageScaleType")]);
    m_image_scale_type_isSet = !json[QString("imageScaleType")].isNull() && m_image_scale_type_isValid;

    m_include_time_isValid = ::OpenAPI::fromJsonValue(m_include_time, json[QString("includeTime")]);
    m_include_time_isSet = !json[QString("includeTime")].isNull() && m_include_time_isValid;

    m_integer_isValid = ::OpenAPI::fromJsonValue(m_integer, json[QString("integer")]);
    m_integer_isSet = !json[QString("integer")].isNull() && m_integer_isValid;

    m_invert_boolean_condition_isValid = ::OpenAPI::fromJsonValue(m_invert_boolean_condition, json[QString("invertBooleanCondition")]);
    m_invert_boolean_condition_isSet = !json[QString("invertBooleanCondition")].isNull() && m_invert_boolean_condition_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("minLength")]);
    m_min_length_isSet = !json[QString("minLength")].isNull() && m_min_length_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_multiline_isValid = ::OpenAPI::fromJsonValue(m_multiline, json[QString("multiline")]);
    m_multiline_isSet = !json[QString("multiline")].isNull() && m_multiline_isValid;

    m_multiline_lines_isValid = ::OpenAPI::fromJsonValue(m_multiline_lines, json[QString("multilineLines")]);
    m_multiline_lines_isSet = !json[QString("multilineLines")].isNull() && m_multiline_lines_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_condition_range_exclusive_max_isValid = ::OpenAPI::fromJsonValue(m_number_condition_range_exclusive_max, json[QString("numberConditionRangeExclusiveMax")]);
    m_number_condition_range_exclusive_max_isSet = !json[QString("numberConditionRangeExclusiveMax")].isNull() && m_number_condition_range_exclusive_max_isValid;

    m_number_condition_range_exclusive_min_isValid = ::OpenAPI::fromJsonValue(m_number_condition_range_exclusive_min, json[QString("numberConditionRangeExclusiveMin")]);
    m_number_condition_range_exclusive_min_isSet = !json[QString("numberConditionRangeExclusiveMin")].isNull() && m_number_condition_range_exclusive_min_isValid;

    m_number_condition_range_max_isValid = ::OpenAPI::fromJsonValue(m_number_condition_range_max, json[QString("numberConditionRangeMax")]);
    m_number_condition_range_max_isSet = !json[QString("numberConditionRangeMax")].isNull() && m_number_condition_range_max_isValid;

    m_number_condition_range_min_isValid = ::OpenAPI::fromJsonValue(m_number_condition_range_min, json[QString("numberConditionRangeMin")]);
    m_number_condition_range_min_isSet = !json[QString("numberConditionRangeMin")].isNull() && m_number_condition_range_min_isValid;

    m_number_condition_type_isValid = ::OpenAPI::fromJsonValue(m_number_condition_type, json[QString("numberConditionType")]);
    m_number_condition_type_isSet = !json[QString("numberConditionType")].isNull() && m_number_condition_type_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_option_list_isValid = ::OpenAPI::fromJsonValue(m_option_list, json[QString("optionList")]);
    m_option_list_isSet = !json[QString("optionList")].isNull() && m_option_list_isValid;

    m_overflow_isValid = ::OpenAPI::fromJsonValue(m_overflow, json[QString("overflow")]);
    m_overflow_isSet = !json[QString("overflow")].isNull() && m_overflow_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_placeholder_isValid = ::OpenAPI::fromJsonValue(m_placeholder, json[QString("placeholder")]);
    m_placeholder_isSet = !json[QString("placeholder")].isNull() && m_placeholder_isValid;

    m_qrcode_color_isValid = ::OpenAPI::fromJsonValue(m_qrcode_color, json[QString("qrcodeColor")]);
    m_qrcode_color_isSet = !json[QString("qrcodeColor")].isNull() && m_qrcode_color_isValid;

    m_qrcode_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_qrcode_color_field_name, json[QString("qrcodeColorFieldName")]);
    m_qrcode_color_field_name_isSet = !json[QString("qrcodeColorFieldName")].isNull() && m_qrcode_color_field_name_isValid;

    m_qrcode_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_qrcode_color_field_required, json[QString("qrcodeColorFieldRequired")]);
    m_qrcode_color_field_required_isSet = !json[QString("qrcodeColorFieldRequired")].isNull() && m_qrcode_color_field_required_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_shape_border_color_isValid = ::OpenAPI::fromJsonValue(m_shape_border_color, json[QString("shapeBorderColor")]);
    m_shape_border_color_isSet = !json[QString("shapeBorderColor")].isNull() && m_shape_border_color_isValid;

    m_shape_border_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_shape_border_color_field_name, json[QString("shapeBorderColorFieldName")]);
    m_shape_border_color_field_name_isSet = !json[QString("shapeBorderColorFieldName")].isNull() && m_shape_border_color_field_name_isValid;

    m_shape_border_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_shape_border_color_field_required, json[QString("shapeBorderColorFieldRequired")]);
    m_shape_border_color_field_required_isSet = !json[QString("shapeBorderColorFieldRequired")].isNull() && m_shape_border_color_field_required_isValid;

    m_shape_border_width_isValid = ::OpenAPI::fromJsonValue(m_shape_border_width, json[QString("shapeBorderWidth")]);
    m_shape_border_width_isSet = !json[QString("shapeBorderWidth")].isNull() && m_shape_border_width_isValid;

    m_shape_fill_color_isValid = ::OpenAPI::fromJsonValue(m_shape_fill_color, json[QString("shapeFillColor")]);
    m_shape_fill_color_isSet = !json[QString("shapeFillColor")].isNull() && m_shape_fill_color_isValid;

    m_shape_fill_color_field_name_isValid = ::OpenAPI::fromJsonValue(m_shape_fill_color_field_name, json[QString("shapeFillColorFieldName")]);
    m_shape_fill_color_field_name_isSet = !json[QString("shapeFillColorFieldName")].isNull() && m_shape_fill_color_field_name_isValid;

    m_shape_fill_color_field_required_isValid = ::OpenAPI::fromJsonValue(m_shape_fill_color_field_required, json[QString("shapeFillColorFieldRequired")]);
    m_shape_fill_color_field_required_isSet = !json[QString("shapeFillColorFieldRequired")].isNull() && m_shape_fill_color_field_required_isValid;

    m_shape_type_isValid = ::OpenAPI::fromJsonValue(m_shape_type, json[QString("shapeType")]);
    m_shape_type_isSet = !json[QString("shapeType")].isNull() && m_shape_type_isValid;

    m_signature_allow_draw_isValid = ::OpenAPI::fromJsonValue(m_signature_allow_draw, json[QString("signatureAllowDraw")]);
    m_signature_allow_draw_isSet = !json[QString("signatureAllowDraw")].isNull() && m_signature_allow_draw_isValid;

    m_signature_allow_type_isValid = ::OpenAPI::fromJsonValue(m_signature_allow_type, json[QString("signatureAllowType")]);
    m_signature_allow_type_isSet = !json[QString("signatureAllowType")].isNull() && m_signature_allow_type_isValid;

    m_r_static_isValid = ::OpenAPI::fromJsonValue(m_r_static, json[QString("static")]);
    m_r_static_isSet = !json[QString("static")].isNull() && m_r_static_isValid;

    m_strikethrough_isValid = ::OpenAPI::fromJsonValue(m_strikethrough, json[QString("strikethrough")]);
    m_strikethrough_isSet = !json[QString("strikethrough")].isNull() && m_strikethrough_isValid;

    m_string_condition_type_isValid = ::OpenAPI::fromJsonValue(m_string_condition_type, json[QString("stringConditionType")]);
    m_string_condition_type_isSet = !json[QString("stringConditionType")].isNull() && m_string_condition_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_true_text_isValid = ::OpenAPI::fromJsonValue(m_true_text, json[QString("trueText")]);
    m_true_text_isSet = !json[QString("trueText")].isNull() && m_true_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_typeface_isValid = ::OpenAPI::fromJsonValue(m_typeface, json[QString("typeface")]);
    m_typeface_isSet = !json[QString("typeface")].isNull() && m_typeface_isValid;

    m_uppercase_isValid = ::OpenAPI::fromJsonValue(m_uppercase, json[QString("uppercase")]);
    m_uppercase_isSet = !json[QString("uppercase")].isNull() && m_uppercase_isValid;

    m_v_alignment_isValid = ::OpenAPI::fromJsonValue(m_v_alignment, json[QString("vAlignment")]);
    m_v_alignment_isSet = !json[QString("vAlignment")].isNull() && m_v_alignment_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIAdd_fields_data_fields_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdd_fields_data_fields_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_auto_calculate_max_length_isSet) {
        obj.insert(QString("autoCalculateMaxLength"), ::OpenAPI::toJsonValue(m_auto_calculate_max_length));
    }
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_color_field_name_isSet) {
        obj.insert(QString("backgroundColorFieldName"), ::OpenAPI::toJsonValue(m_background_color_field_name));
    }
    if (m_background_color_field_required_isSet) {
        obj.insert(QString("backgroundColorFieldRequired"), ::OpenAPI::toJsonValue(m_background_color_field_required));
    }
    if (m_barcode_symbology_isSet) {
        obj.insert(QString("barcodeSymbology"), ::OpenAPI::toJsonValue(m_barcode_symbology));
    }
    if (m_bold_isSet) {
        obj.insert(QString("bold"), ::OpenAPI::toJsonValue(m_bold));
    }
    if (m_character_spacing_isSet) {
        obj.insert(QString("characterSpacing"), ::OpenAPI::toJsonValue(m_character_spacing));
    }
    if (m_check_character_isSet) {
        obj.insert(QString("checkCharacter"), ::OpenAPI::toJsonValue(m_check_character));
    }
    if (m_check_color_isSet) {
        obj.insert(QString("checkColor"), ::OpenAPI::toJsonValue(m_check_color));
    }
    if (m_check_color_field_name_isSet) {
        obj.insert(QString("checkColorFieldName"), ::OpenAPI::toJsonValue(m_check_color_field_name));
    }
    if (m_check_color_field_required_isSet) {
        obj.insert(QString("checkColorFieldRequired"), ::OpenAPI::toJsonValue(m_check_color_field_required));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_color_field_name_isSet) {
        obj.insert(QString("colorFieldName"), ::OpenAPI::toJsonValue(m_color_field_name));
    }
    if (m_color_field_required_isSet) {
        obj.insert(QString("colorFieldRequired"), ::OpenAPI::toJsonValue(m_color_field_required));
    }
    if (m_comb_isSet) {
        obj.insert(QString("comb"), ::OpenAPI::toJsonValue(m_comb));
    }
    if (m_comb_number_of_cells_isSet) {
        obj.insert(QString("combNumberOfCells"), ::OpenAPI::toJsonValue(m_comb_number_of_cells));
    }
    if (m_comb_value_offset_isSet) {
        obj.insert(QString("combValueOffset"), ::OpenAPI::toJsonValue(m_comb_value_offset));
    }
    if (m_combined_field_format_isSet) {
        obj.insert(QString("combinedFieldFormat"), ::OpenAPI::toJsonValue(m_combined_field_format));
    }
    if (m_combined_field_names_isSet) {
        obj.insert(QString("combinedFieldNames"), ::OpenAPI::toJsonValue(m_combined_field_names));
    }
    if (m_combined_field_separator_isSet) {
        obj.insert(QString("combinedFieldSeparator"), ::OpenAPI::toJsonValue(m_combined_field_separator));
    }
    if (m_combined_field_type_isSet) {
        obj.insert(QString("combinedFieldType"), ::OpenAPI::toJsonValue(m_combined_field_type));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_time_format_isSet) {
        obj.insert(QString("dateTimeFormat"), ::OpenAPI::toJsonValue(m_date_time_format));
    }
    if (m_decimal_places_isSet) {
        obj.insert(QString("decimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_type_isSet) {
        obj.insert(QString("displayType"), ::OpenAPI::toJsonValue(m_display_type));
    }
    if (m_exclusive_maximum_isSet) {
        obj.insert(QString("exclusiveMaximum"), ::OpenAPI::toJsonValue(m_exclusive_maximum));
    }
    if (m_exclusive_minimum_isSet) {
        obj.insert(QString("exclusiveMinimum"), ::OpenAPI::toJsonValue(m_exclusive_minimum));
    }
    if (m_false_text_isSet) {
        obj.insert(QString("falseText"), ::OpenAPI::toJsonValue(m_false_text));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_gravity_isSet) {
        obj.insert(QString("imageGravity"), ::OpenAPI::toJsonValue(m_image_gravity));
    }
    if (m_image_scale_type_isSet) {
        obj.insert(QString("imageScaleType"), ::OpenAPI::toJsonValue(m_image_scale_type));
    }
    if (m_include_time_isSet) {
        obj.insert(QString("includeTime"), ::OpenAPI::toJsonValue(m_include_time));
    }
    if (m_integer_isSet) {
        obj.insert(QString("integer"), ::OpenAPI::toJsonValue(m_integer));
    }
    if (m_invert_boolean_condition_isSet) {
        obj.insert(QString("invertBooleanCondition"), ::OpenAPI::toJsonValue(m_invert_boolean_condition));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("minLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_multiline_isSet) {
        obj.insert(QString("multiline"), ::OpenAPI::toJsonValue(m_multiline));
    }
    if (m_multiline_lines_isSet) {
        obj.insert(QString("multilineLines"), ::OpenAPI::toJsonValue(m_multiline_lines));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_condition_range_exclusive_max_isSet) {
        obj.insert(QString("numberConditionRangeExclusiveMax"), ::OpenAPI::toJsonValue(m_number_condition_range_exclusive_max));
    }
    if (m_number_condition_range_exclusive_min_isSet) {
        obj.insert(QString("numberConditionRangeExclusiveMin"), ::OpenAPI::toJsonValue(m_number_condition_range_exclusive_min));
    }
    if (m_number_condition_range_max_isSet) {
        obj.insert(QString("numberConditionRangeMax"), ::OpenAPI::toJsonValue(m_number_condition_range_max));
    }
    if (m_number_condition_range_min_isSet) {
        obj.insert(QString("numberConditionRangeMin"), ::OpenAPI::toJsonValue(m_number_condition_range_min));
    }
    if (m_number_condition_type_isSet) {
        obj.insert(QString("numberConditionType"), ::OpenAPI::toJsonValue(m_number_condition_type));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_option_list_isSet) {
        obj.insert(QString("optionList"), ::OpenAPI::toJsonValue(m_option_list));
    }
    if (m_overflow_isSet) {
        obj.insert(QString("overflow"), ::OpenAPI::toJsonValue(m_overflow));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_placeholder_isSet) {
        obj.insert(QString("placeholder"), ::OpenAPI::toJsonValue(m_placeholder));
    }
    if (m_qrcode_color_isSet) {
        obj.insert(QString("qrcodeColor"), ::OpenAPI::toJsonValue(m_qrcode_color));
    }
    if (m_qrcode_color_field_name_isSet) {
        obj.insert(QString("qrcodeColorFieldName"), ::OpenAPI::toJsonValue(m_qrcode_color_field_name));
    }
    if (m_qrcode_color_field_required_isSet) {
        obj.insert(QString("qrcodeColorFieldRequired"), ::OpenAPI::toJsonValue(m_qrcode_color_field_required));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_shape_border_color_isSet) {
        obj.insert(QString("shapeBorderColor"), ::OpenAPI::toJsonValue(m_shape_border_color));
    }
    if (m_shape_border_color_field_name_isSet) {
        obj.insert(QString("shapeBorderColorFieldName"), ::OpenAPI::toJsonValue(m_shape_border_color_field_name));
    }
    if (m_shape_border_color_field_required_isSet) {
        obj.insert(QString("shapeBorderColorFieldRequired"), ::OpenAPI::toJsonValue(m_shape_border_color_field_required));
    }
    if (m_shape_border_width_isSet) {
        obj.insert(QString("shapeBorderWidth"), ::OpenAPI::toJsonValue(m_shape_border_width));
    }
    if (m_shape_fill_color_isSet) {
        obj.insert(QString("shapeFillColor"), ::OpenAPI::toJsonValue(m_shape_fill_color));
    }
    if (m_shape_fill_color_field_name_isSet) {
        obj.insert(QString("shapeFillColorFieldName"), ::OpenAPI::toJsonValue(m_shape_fill_color_field_name));
    }
    if (m_shape_fill_color_field_required_isSet) {
        obj.insert(QString("shapeFillColorFieldRequired"), ::OpenAPI::toJsonValue(m_shape_fill_color_field_required));
    }
    if (m_shape_type_isSet) {
        obj.insert(QString("shapeType"), ::OpenAPI::toJsonValue(m_shape_type));
    }
    if (m_signature_allow_draw_isSet) {
        obj.insert(QString("signatureAllowDraw"), ::OpenAPI::toJsonValue(m_signature_allow_draw));
    }
    if (m_signature_allow_type_isSet) {
        obj.insert(QString("signatureAllowType"), ::OpenAPI::toJsonValue(m_signature_allow_type));
    }
    if (m_r_static_isSet) {
        obj.insert(QString("static"), ::OpenAPI::toJsonValue(m_r_static));
    }
    if (m_strikethrough_isSet) {
        obj.insert(QString("strikethrough"), ::OpenAPI::toJsonValue(m_strikethrough));
    }
    if (m_string_condition_type_isSet) {
        obj.insert(QString("stringConditionType"), ::OpenAPI::toJsonValue(m_string_condition_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_true_text_isSet) {
        obj.insert(QString("trueText"), ::OpenAPI::toJsonValue(m_true_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_typeface_isSet) {
        obj.insert(QString("typeface"), ::OpenAPI::toJsonValue(m_typeface));
    }
    if (m_uppercase_isSet) {
        obj.insert(QString("uppercase"), ::OpenAPI::toJsonValue(m_uppercase));
    }
    if (m_v_alignment_isSet) {
        obj.insert(QString("vAlignment"), ::OpenAPI::toJsonValue(m_v_alignment));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

QString OAIAdd_fields_data_fields_inner::getAlignment() const {
    return m_alignment;
}
void OAIAdd_fields_data_fields_inner::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_alignment_Valid() const{
    return m_alignment_isValid;
}

bool OAIAdd_fields_data_fields_inner::isAutoCalculateMaxLength() const {
    return m_auto_calculate_max_length;
}
void OAIAdd_fields_data_fields_inner::setAutoCalculateMaxLength(const bool &auto_calculate_max_length) {
    m_auto_calculate_max_length = auto_calculate_max_length;
    m_auto_calculate_max_length_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_auto_calculate_max_length_Set() const{
    return m_auto_calculate_max_length_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_auto_calculate_max_length_Valid() const{
    return m_auto_calculate_max_length_isValid;
}

QString OAIAdd_fields_data_fields_inner::getBackgroundColor() const {
    return m_background_color;
}
void OAIAdd_fields_data_fields_inner::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getBackgroundColorFieldName() const {
    return m_background_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setBackgroundColorFieldName(const QString &background_color_field_name) {
    m_background_color_field_name = background_color_field_name;
    m_background_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_field_name_Set() const{
    return m_background_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_field_name_Valid() const{
    return m_background_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isBackgroundColorFieldRequired() const {
    return m_background_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setBackgroundColorFieldRequired(const bool &background_color_field_required) {
    m_background_color_field_required = background_color_field_required;
    m_background_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_field_required_Set() const{
    return m_background_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_background_color_field_required_Valid() const{
    return m_background_color_field_required_isValid;
}

QString OAIAdd_fields_data_fields_inner::getBarcodeSymbology() const {
    return m_barcode_symbology;
}
void OAIAdd_fields_data_fields_inner::setBarcodeSymbology(const QString &barcode_symbology) {
    m_barcode_symbology = barcode_symbology;
    m_barcode_symbology_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_barcode_symbology_Set() const{
    return m_barcode_symbology_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_barcode_symbology_Valid() const{
    return m_barcode_symbology_isValid;
}

bool OAIAdd_fields_data_fields_inner::isBold() const {
    return m_bold;
}
void OAIAdd_fields_data_fields_inner::setBold(const bool &bold) {
    m_bold = bold;
    m_bold_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_bold_Set() const{
    return m_bold_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_bold_Valid() const{
    return m_bold_isValid;
}

double OAIAdd_fields_data_fields_inner::getCharacterSpacing() const {
    return m_character_spacing;
}
void OAIAdd_fields_data_fields_inner::setCharacterSpacing(const double &character_spacing) {
    m_character_spacing = character_spacing;
    m_character_spacing_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_character_spacing_Set() const{
    return m_character_spacing_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_character_spacing_Valid() const{
    return m_character_spacing_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCheckCharacter() const {
    return m_check_character;
}
void OAIAdd_fields_data_fields_inner::setCheckCharacter(const QString &check_character) {
    m_check_character = check_character;
    m_check_character_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_check_character_Set() const{
    return m_check_character_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_check_character_Valid() const{
    return m_check_character_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCheckColor() const {
    return m_check_color;
}
void OAIAdd_fields_data_fields_inner::setCheckColor(const QString &check_color) {
    m_check_color = check_color;
    m_check_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_Set() const{
    return m_check_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_Valid() const{
    return m_check_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCheckColorFieldName() const {
    return m_check_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setCheckColorFieldName(const QString &check_color_field_name) {
    m_check_color_field_name = check_color_field_name;
    m_check_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_field_name_Set() const{
    return m_check_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_field_name_Valid() const{
    return m_check_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isCheckColorFieldRequired() const {
    return m_check_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setCheckColorFieldRequired(const bool &check_color_field_required) {
    m_check_color_field_required = check_color_field_required;
    m_check_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_field_required_Set() const{
    return m_check_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_check_color_field_required_Valid() const{
    return m_check_color_field_required_isValid;
}

QString OAIAdd_fields_data_fields_inner::getColor() const {
    return m_color;
}
void OAIAdd_fields_data_fields_inner::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_color_Set() const{
    return m_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getColorFieldName() const {
    return m_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setColorFieldName(const QString &color_field_name) {
    m_color_field_name = color_field_name;
    m_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_color_field_name_Set() const{
    return m_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_color_field_name_Valid() const{
    return m_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isColorFieldRequired() const {
    return m_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setColorFieldRequired(const bool &color_field_required) {
    m_color_field_required = color_field_required;
    m_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_color_field_required_Set() const{
    return m_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_color_field_required_Valid() const{
    return m_color_field_required_isValid;
}

bool OAIAdd_fields_data_fields_inner::isComb() const {
    return m_comb;
}
void OAIAdd_fields_data_fields_inner::setComb(const bool &comb) {
    m_comb = comb;
    m_comb_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_comb_Set() const{
    return m_comb_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_comb_Valid() const{
    return m_comb_isValid;
}

double OAIAdd_fields_data_fields_inner::getCombNumberOfCells() const {
    return m_comb_number_of_cells;
}
void OAIAdd_fields_data_fields_inner::setCombNumberOfCells(const double &comb_number_of_cells) {
    m_comb_number_of_cells = comb_number_of_cells;
    m_comb_number_of_cells_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_comb_number_of_cells_Set() const{
    return m_comb_number_of_cells_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_comb_number_of_cells_Valid() const{
    return m_comb_number_of_cells_isValid;
}

double OAIAdd_fields_data_fields_inner::getCombValueOffset() const {
    return m_comb_value_offset;
}
void OAIAdd_fields_data_fields_inner::setCombValueOffset(const double &comb_value_offset) {
    m_comb_value_offset = comb_value_offset;
    m_comb_value_offset_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_comb_value_offset_Set() const{
    return m_comb_value_offset_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_comb_value_offset_Valid() const{
    return m_comb_value_offset_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCombinedFieldFormat() const {
    return m_combined_field_format;
}
void OAIAdd_fields_data_fields_inner::setCombinedFieldFormat(const QString &combined_field_format) {
    m_combined_field_format = combined_field_format;
    m_combined_field_format_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_format_Set() const{
    return m_combined_field_format_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_format_Valid() const{
    return m_combined_field_format_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCombinedFieldNames() const {
    return m_combined_field_names;
}
void OAIAdd_fields_data_fields_inner::setCombinedFieldNames(const QString &combined_field_names) {
    m_combined_field_names = combined_field_names;
    m_combined_field_names_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_names_Set() const{
    return m_combined_field_names_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_names_Valid() const{
    return m_combined_field_names_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCombinedFieldSeparator() const {
    return m_combined_field_separator;
}
void OAIAdd_fields_data_fields_inner::setCombinedFieldSeparator(const QString &combined_field_separator) {
    m_combined_field_separator = combined_field_separator;
    m_combined_field_separator_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_separator_Set() const{
    return m_combined_field_separator_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_separator_Valid() const{
    return m_combined_field_separator_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCombinedFieldType() const {
    return m_combined_field_type;
}
void OAIAdd_fields_data_fields_inner::setCombinedFieldType(const QString &combined_field_type) {
    m_combined_field_type = combined_field_type;
    m_combined_field_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_type_Set() const{
    return m_combined_field_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_combined_field_type_Valid() const{
    return m_combined_field_type_isValid;
}

QString OAIAdd_fields_data_fields_inner::getCondition() const {
    return m_condition;
}
void OAIAdd_fields_data_fields_inner::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIAdd_fields_data_fields_inner::isCurrency() const {
    return m_currency;
}
void OAIAdd_fields_data_fields_inner::setCurrency(const bool &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIAdd_fields_data_fields_inner::getDateTimeFormat() const {
    return m_date_time_format;
}
void OAIAdd_fields_data_fields_inner::setDateTimeFormat(const QString &date_time_format) {
    m_date_time_format = date_time_format;
    m_date_time_format_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_date_time_format_Set() const{
    return m_date_time_format_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_date_time_format_Valid() const{
    return m_date_time_format_isValid;
}

double OAIAdd_fields_data_fields_inner::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAIAdd_fields_data_fields_inner::setDecimalPlaces(const double &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

QString OAIAdd_fields_data_fields_inner::getRDefault() const {
    return m_r_default;
}
void OAIAdd_fields_data_fields_inner::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIAdd_fields_data_fields_inner::getDescription() const {
    return m_description;
}
void OAIAdd_fields_data_fields_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAdd_fields_data_fields_inner::getDisplayType() const {
    return m_display_type;
}
void OAIAdd_fields_data_fields_inner::setDisplayType(const QString &display_type) {
    m_display_type = display_type;
    m_display_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_display_type_Set() const{
    return m_display_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_display_type_Valid() const{
    return m_display_type_isValid;
}

bool OAIAdd_fields_data_fields_inner::isExclusiveMaximum() const {
    return m_exclusive_maximum;
}
void OAIAdd_fields_data_fields_inner::setExclusiveMaximum(const bool &exclusive_maximum) {
    m_exclusive_maximum = exclusive_maximum;
    m_exclusive_maximum_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_exclusive_maximum_Set() const{
    return m_exclusive_maximum_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_exclusive_maximum_Valid() const{
    return m_exclusive_maximum_isValid;
}

bool OAIAdd_fields_data_fields_inner::isExclusiveMinimum() const {
    return m_exclusive_minimum;
}
void OAIAdd_fields_data_fields_inner::setExclusiveMinimum(const bool &exclusive_minimum) {
    m_exclusive_minimum = exclusive_minimum;
    m_exclusive_minimum_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_exclusive_minimum_Set() const{
    return m_exclusive_minimum_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_exclusive_minimum_Valid() const{
    return m_exclusive_minimum_isValid;
}

QString OAIAdd_fields_data_fields_inner::getFalseText() const {
    return m_false_text;
}
void OAIAdd_fields_data_fields_inner::setFalseText(const QString &false_text) {
    m_false_text = false_text;
    m_false_text_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_false_text_Set() const{
    return m_false_text_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_false_text_Valid() const{
    return m_false_text_isValid;
}

double OAIAdd_fields_data_fields_inner::getFontSize() const {
    return m_font_size;
}
void OAIAdd_fields_data_fields_inner::setFontSize(const double &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_font_size_Valid() const{
    return m_font_size_isValid;
}

double OAIAdd_fields_data_fields_inner::getHeight() const {
    return m_height;
}
void OAIAdd_fields_data_fields_inner::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIAdd_fields_data_fields_inner::isHidden() const {
    return m_hidden;
}
void OAIAdd_fields_data_fields_inner::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_hidden_Valid() const{
    return m_hidden_isValid;
}

double OAIAdd_fields_data_fields_inner::getId() const {
    return m_id;
}
void OAIAdd_fields_data_fields_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdd_fields_data_fields_inner::getImageGravity() const {
    return m_image_gravity;
}
void OAIAdd_fields_data_fields_inner::setImageGravity(const QString &image_gravity) {
    m_image_gravity = image_gravity;
    m_image_gravity_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_image_gravity_Set() const{
    return m_image_gravity_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_image_gravity_Valid() const{
    return m_image_gravity_isValid;
}

QString OAIAdd_fields_data_fields_inner::getImageScaleType() const {
    return m_image_scale_type;
}
void OAIAdd_fields_data_fields_inner::setImageScaleType(const QString &image_scale_type) {
    m_image_scale_type = image_scale_type;
    m_image_scale_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_image_scale_type_Set() const{
    return m_image_scale_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_image_scale_type_Valid() const{
    return m_image_scale_type_isValid;
}

bool OAIAdd_fields_data_fields_inner::isIncludeTime() const {
    return m_include_time;
}
void OAIAdd_fields_data_fields_inner::setIncludeTime(const bool &include_time) {
    m_include_time = include_time;
    m_include_time_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_include_time_Set() const{
    return m_include_time_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_include_time_Valid() const{
    return m_include_time_isValid;
}

bool OAIAdd_fields_data_fields_inner::isInteger() const {
    return m_integer;
}
void OAIAdd_fields_data_fields_inner::setInteger(const bool &integer) {
    m_integer = integer;
    m_integer_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_integer_Set() const{
    return m_integer_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_integer_Valid() const{
    return m_integer_isValid;
}

bool OAIAdd_fields_data_fields_inner::isInvertBooleanCondition() const {
    return m_invert_boolean_condition;
}
void OAIAdd_fields_data_fields_inner::setInvertBooleanCondition(const bool &invert_boolean_condition) {
    m_invert_boolean_condition = invert_boolean_condition;
    m_invert_boolean_condition_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_invert_boolean_condition_Set() const{
    return m_invert_boolean_condition_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_invert_boolean_condition_Valid() const{
    return m_invert_boolean_condition_isValid;
}

double OAIAdd_fields_data_fields_inner::getMaxLength() const {
    return m_max_length;
}
void OAIAdd_fields_data_fields_inner::setMaxLength(const double &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_max_length_Valid() const{
    return m_max_length_isValid;
}

double OAIAdd_fields_data_fields_inner::getMaximum() const {
    return m_maximum;
}
void OAIAdd_fields_data_fields_inner::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_maximum_Valid() const{
    return m_maximum_isValid;
}

QString OAIAdd_fields_data_fields_inner::getMetadata() const {
    return m_metadata;
}
void OAIAdd_fields_data_fields_inner::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIAdd_fields_data_fields_inner::getMinLength() const {
    return m_min_length;
}
void OAIAdd_fields_data_fields_inner::setMinLength(const double &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_min_length_Valid() const{
    return m_min_length_isValid;
}

double OAIAdd_fields_data_fields_inner::getMinimum() const {
    return m_minimum;
}
void OAIAdd_fields_data_fields_inner::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIAdd_fields_data_fields_inner::isMultiline() const {
    return m_multiline;
}
void OAIAdd_fields_data_fields_inner::setMultiline(const bool &multiline) {
    m_multiline = multiline;
    m_multiline_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_multiline_Set() const{
    return m_multiline_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_multiline_Valid() const{
    return m_multiline_isValid;
}

double OAIAdd_fields_data_fields_inner::getMultilineLines() const {
    return m_multiline_lines;
}
void OAIAdd_fields_data_fields_inner::setMultilineLines(const double &multiline_lines) {
    m_multiline_lines = multiline_lines;
    m_multiline_lines_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_multiline_lines_Set() const{
    return m_multiline_lines_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_multiline_lines_Valid() const{
    return m_multiline_lines_isValid;
}

QString OAIAdd_fields_data_fields_inner::getName() const {
    return m_name;
}
void OAIAdd_fields_data_fields_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isNumberConditionRangeExclusiveMax() const {
    return m_number_condition_range_exclusive_max;
}
void OAIAdd_fields_data_fields_inner::setNumberConditionRangeExclusiveMax(const bool &number_condition_range_exclusive_max) {
    m_number_condition_range_exclusive_max = number_condition_range_exclusive_max;
    m_number_condition_range_exclusive_max_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_exclusive_max_Set() const{
    return m_number_condition_range_exclusive_max_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_exclusive_max_Valid() const{
    return m_number_condition_range_exclusive_max_isValid;
}

bool OAIAdd_fields_data_fields_inner::isNumberConditionRangeExclusiveMin() const {
    return m_number_condition_range_exclusive_min;
}
void OAIAdd_fields_data_fields_inner::setNumberConditionRangeExclusiveMin(const bool &number_condition_range_exclusive_min) {
    m_number_condition_range_exclusive_min = number_condition_range_exclusive_min;
    m_number_condition_range_exclusive_min_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_exclusive_min_Set() const{
    return m_number_condition_range_exclusive_min_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_exclusive_min_Valid() const{
    return m_number_condition_range_exclusive_min_isValid;
}

double OAIAdd_fields_data_fields_inner::getNumberConditionRangeMax() const {
    return m_number_condition_range_max;
}
void OAIAdd_fields_data_fields_inner::setNumberConditionRangeMax(const double &number_condition_range_max) {
    m_number_condition_range_max = number_condition_range_max;
    m_number_condition_range_max_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_max_Set() const{
    return m_number_condition_range_max_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_max_Valid() const{
    return m_number_condition_range_max_isValid;
}

double OAIAdd_fields_data_fields_inner::getNumberConditionRangeMin() const {
    return m_number_condition_range_min;
}
void OAIAdd_fields_data_fields_inner::setNumberConditionRangeMin(const double &number_condition_range_min) {
    m_number_condition_range_min = number_condition_range_min;
    m_number_condition_range_min_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_min_Set() const{
    return m_number_condition_range_min_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_range_min_Valid() const{
    return m_number_condition_range_min_isValid;
}

QString OAIAdd_fields_data_fields_inner::getNumberConditionType() const {
    return m_number_condition_type;
}
void OAIAdd_fields_data_fields_inner::setNumberConditionType(const QString &number_condition_type) {
    m_number_condition_type = number_condition_type;
    m_number_condition_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_type_Set() const{
    return m_number_condition_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_number_condition_type_Valid() const{
    return m_number_condition_type_isValid;
}

double OAIAdd_fields_data_fields_inner::getOpacity() const {
    return m_opacity;
}
void OAIAdd_fields_data_fields_inner::setOpacity(const double &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_opacity_Valid() const{
    return m_opacity_isValid;
}

QString OAIAdd_fields_data_fields_inner::getOptionList() const {
    return m_option_list;
}
void OAIAdd_fields_data_fields_inner::setOptionList(const QString &option_list) {
    m_option_list = option_list;
    m_option_list_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_option_list_Set() const{
    return m_option_list_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_option_list_Valid() const{
    return m_option_list_isValid;
}

QString OAIAdd_fields_data_fields_inner::getOverflow() const {
    return m_overflow;
}
void OAIAdd_fields_data_fields_inner::setOverflow(const QString &overflow) {
    m_overflow = overflow;
    m_overflow_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_overflow_Set() const{
    return m_overflow_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_overflow_Valid() const{
    return m_overflow_isValid;
}

double OAIAdd_fields_data_fields_inner::getPage() const {
    return m_page;
}
void OAIAdd_fields_data_fields_inner::setPage(const double &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_page_Set() const{
    return m_page_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIAdd_fields_data_fields_inner::getPlaceholder() const {
    return m_placeholder;
}
void OAIAdd_fields_data_fields_inner::setPlaceholder(const QString &placeholder) {
    m_placeholder = placeholder;
    m_placeholder_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_placeholder_Set() const{
    return m_placeholder_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_placeholder_Valid() const{
    return m_placeholder_isValid;
}

QString OAIAdd_fields_data_fields_inner::getQrcodeColor() const {
    return m_qrcode_color;
}
void OAIAdd_fields_data_fields_inner::setQrcodeColor(const QString &qrcode_color) {
    m_qrcode_color = qrcode_color;
    m_qrcode_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_Set() const{
    return m_qrcode_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_Valid() const{
    return m_qrcode_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getQrcodeColorFieldName() const {
    return m_qrcode_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setQrcodeColorFieldName(const QString &qrcode_color_field_name) {
    m_qrcode_color_field_name = qrcode_color_field_name;
    m_qrcode_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_field_name_Set() const{
    return m_qrcode_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_field_name_Valid() const{
    return m_qrcode_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isQrcodeColorFieldRequired() const {
    return m_qrcode_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setQrcodeColorFieldRequired(const bool &qrcode_color_field_required) {
    m_qrcode_color_field_required = qrcode_color_field_required;
    m_qrcode_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_field_required_Set() const{
    return m_qrcode_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_qrcode_color_field_required_Valid() const{
    return m_qrcode_color_field_required_isValid;
}

bool OAIAdd_fields_data_fields_inner::isRequired() const {
    return m_required;
}
void OAIAdd_fields_data_fields_inner::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_required_Set() const{
    return m_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_required_Valid() const{
    return m_required_isValid;
}

double OAIAdd_fields_data_fields_inner::getRotation() const {
    return m_rotation;
}
void OAIAdd_fields_data_fields_inner::setRotation(const double &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_rotation_Valid() const{
    return m_rotation_isValid;
}

QString OAIAdd_fields_data_fields_inner::getShapeBorderColor() const {
    return m_shape_border_color;
}
void OAIAdd_fields_data_fields_inner::setShapeBorderColor(const QString &shape_border_color) {
    m_shape_border_color = shape_border_color;
    m_shape_border_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_Set() const{
    return m_shape_border_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_Valid() const{
    return m_shape_border_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getShapeBorderColorFieldName() const {
    return m_shape_border_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setShapeBorderColorFieldName(const QString &shape_border_color_field_name) {
    m_shape_border_color_field_name = shape_border_color_field_name;
    m_shape_border_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_field_name_Set() const{
    return m_shape_border_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_field_name_Valid() const{
    return m_shape_border_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isShapeBorderColorFieldRequired() const {
    return m_shape_border_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setShapeBorderColorFieldRequired(const bool &shape_border_color_field_required) {
    m_shape_border_color_field_required = shape_border_color_field_required;
    m_shape_border_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_field_required_Set() const{
    return m_shape_border_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_color_field_required_Valid() const{
    return m_shape_border_color_field_required_isValid;
}

double OAIAdd_fields_data_fields_inner::getShapeBorderWidth() const {
    return m_shape_border_width;
}
void OAIAdd_fields_data_fields_inner::setShapeBorderWidth(const double &shape_border_width) {
    m_shape_border_width = shape_border_width;
    m_shape_border_width_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_width_Set() const{
    return m_shape_border_width_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_border_width_Valid() const{
    return m_shape_border_width_isValid;
}

QString OAIAdd_fields_data_fields_inner::getShapeFillColor() const {
    return m_shape_fill_color;
}
void OAIAdd_fields_data_fields_inner::setShapeFillColor(const QString &shape_fill_color) {
    m_shape_fill_color = shape_fill_color;
    m_shape_fill_color_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_Set() const{
    return m_shape_fill_color_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_Valid() const{
    return m_shape_fill_color_isValid;
}

QString OAIAdd_fields_data_fields_inner::getShapeFillColorFieldName() const {
    return m_shape_fill_color_field_name;
}
void OAIAdd_fields_data_fields_inner::setShapeFillColorFieldName(const QString &shape_fill_color_field_name) {
    m_shape_fill_color_field_name = shape_fill_color_field_name;
    m_shape_fill_color_field_name_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_field_name_Set() const{
    return m_shape_fill_color_field_name_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_field_name_Valid() const{
    return m_shape_fill_color_field_name_isValid;
}

bool OAIAdd_fields_data_fields_inner::isShapeFillColorFieldRequired() const {
    return m_shape_fill_color_field_required;
}
void OAIAdd_fields_data_fields_inner::setShapeFillColorFieldRequired(const bool &shape_fill_color_field_required) {
    m_shape_fill_color_field_required = shape_fill_color_field_required;
    m_shape_fill_color_field_required_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_field_required_Set() const{
    return m_shape_fill_color_field_required_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_fill_color_field_required_Valid() const{
    return m_shape_fill_color_field_required_isValid;
}

QString OAIAdd_fields_data_fields_inner::getShapeType() const {
    return m_shape_type;
}
void OAIAdd_fields_data_fields_inner::setShapeType(const QString &shape_type) {
    m_shape_type = shape_type;
    m_shape_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_shape_type_Set() const{
    return m_shape_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_shape_type_Valid() const{
    return m_shape_type_isValid;
}

bool OAIAdd_fields_data_fields_inner::isSignatureAllowDraw() const {
    return m_signature_allow_draw;
}
void OAIAdd_fields_data_fields_inner::setSignatureAllowDraw(const bool &signature_allow_draw) {
    m_signature_allow_draw = signature_allow_draw;
    m_signature_allow_draw_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_signature_allow_draw_Set() const{
    return m_signature_allow_draw_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_signature_allow_draw_Valid() const{
    return m_signature_allow_draw_isValid;
}

bool OAIAdd_fields_data_fields_inner::isSignatureAllowType() const {
    return m_signature_allow_type;
}
void OAIAdd_fields_data_fields_inner::setSignatureAllowType(const bool &signature_allow_type) {
    m_signature_allow_type = signature_allow_type;
    m_signature_allow_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_signature_allow_type_Set() const{
    return m_signature_allow_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_signature_allow_type_Valid() const{
    return m_signature_allow_type_isValid;
}

bool OAIAdd_fields_data_fields_inner::isRStatic() const {
    return m_r_static;
}
void OAIAdd_fields_data_fields_inner::setRStatic(const bool &r_static) {
    m_r_static = r_static;
    m_r_static_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_r_static_Set() const{
    return m_r_static_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_r_static_Valid() const{
    return m_r_static_isValid;
}

bool OAIAdd_fields_data_fields_inner::isStrikethrough() const {
    return m_strikethrough;
}
void OAIAdd_fields_data_fields_inner::setStrikethrough(const bool &strikethrough) {
    m_strikethrough = strikethrough;
    m_strikethrough_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_strikethrough_Set() const{
    return m_strikethrough_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_strikethrough_Valid() const{
    return m_strikethrough_isValid;
}

QString OAIAdd_fields_data_fields_inner::getStringConditionType() const {
    return m_string_condition_type;
}
void OAIAdd_fields_data_fields_inner::setStringConditionType(const QString &string_condition_type) {
    m_string_condition_type = string_condition_type;
    m_string_condition_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_string_condition_type_Set() const{
    return m_string_condition_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_string_condition_type_Valid() const{
    return m_string_condition_type_isValid;
}

QString OAIAdd_fields_data_fields_inner::getTitle() const {
    return m_title;
}
void OAIAdd_fields_data_fields_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAdd_fields_data_fields_inner::getTrueText() const {
    return m_true_text;
}
void OAIAdd_fields_data_fields_inner::setTrueText(const QString &true_text) {
    m_true_text = true_text;
    m_true_text_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_true_text_Set() const{
    return m_true_text_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_true_text_Valid() const{
    return m_true_text_isValid;
}

QString OAIAdd_fields_data_fields_inner::getType() const {
    return m_type;
}
void OAIAdd_fields_data_fields_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAdd_fields_data_fields_inner::getTypeface() const {
    return m_typeface;
}
void OAIAdd_fields_data_fields_inner::setTypeface(const QString &typeface) {
    m_typeface = typeface;
    m_typeface_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_typeface_Set() const{
    return m_typeface_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_typeface_Valid() const{
    return m_typeface_isValid;
}

bool OAIAdd_fields_data_fields_inner::isUppercase() const {
    return m_uppercase;
}
void OAIAdd_fields_data_fields_inner::setUppercase(const bool &uppercase) {
    m_uppercase = uppercase;
    m_uppercase_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_uppercase_Set() const{
    return m_uppercase_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_uppercase_Valid() const{
    return m_uppercase_isValid;
}

QString OAIAdd_fields_data_fields_inner::getVAlignment() const {
    return m_v_alignment;
}
void OAIAdd_fields_data_fields_inner::setVAlignment(const QString &v_alignment) {
    m_v_alignment = v_alignment;
    m_v_alignment_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_v_alignment_Set() const{
    return m_v_alignment_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_v_alignment_Valid() const{
    return m_v_alignment_isValid;
}

double OAIAdd_fields_data_fields_inner::getWidth() const {
    return m_width;
}
void OAIAdd_fields_data_fields_inner::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_width_Valid() const{
    return m_width_isValid;
}

double OAIAdd_fields_data_fields_inner::getX() const {
    return m_x;
}
void OAIAdd_fields_data_fields_inner::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_x_Set() const{
    return m_x_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_x_Valid() const{
    return m_x_isValid;
}

double OAIAdd_fields_data_fields_inner::getY() const {
    return m_y;
}
void OAIAdd_fields_data_fields_inner::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIAdd_fields_data_fields_inner::is_y_Set() const{
    return m_y_isSet;
}

bool OAIAdd_fields_data_fields_inner::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIAdd_fields_data_fields_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_calculate_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_symbology_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_spacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comb_number_of_cells_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comb_value_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_field_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_field_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_field_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_gravity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_scale_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invert_boolean_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiline_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_condition_range_exclusive_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_condition_range_exclusive_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_condition_range_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_condition_range_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_condition_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overflow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrcode_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrcode_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrcode_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_border_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_border_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_border_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_border_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_fill_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_fill_color_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_fill_color_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_allow_draw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_allow_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_static_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikethrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_condition_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typeface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uppercase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdd_fields_data_fields_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_page_isValid && true;
}

} // namespace OpenAPI
