/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission_data_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission_data_request::OAISubmission_data_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission_data_request::OAISubmission_data_request() {
    this->initializeModel();
}

OAISubmission_data_request::~OAISubmission_data_request() {}

void OAISubmission_data_request::initializeModel() {

    m_auth_phone_number_hash_isSet = false;
    m_auth_phone_number_hash_isValid = false;

    m_auth_provider_isSet = false;
    m_auth_provider_isValid = false;

    m_auth_second_factor_type_isSet = false;
    m_auth_second_factor_type_isValid = false;

    m_auth_session_id_hash_isSet = false;
    m_auth_session_id_hash_isValid = false;

    m_auth_session_started_at_isSet = false;
    m_auth_session_started_at_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_auth_user_id_hash_isSet = false;
    m_auth_user_id_hash_isValid = false;

    m_auth_username_hash_isSet = false;
    m_auth_username_hash_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submission_id_isSet = false;
    m_submission_id_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_viewed_at_isSet = false;
    m_viewed_at_isValid = false;
}

void OAISubmission_data_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission_data_request::fromJsonObject(QJsonObject json) {

    m_auth_phone_number_hash_isValid = ::OpenAPI::fromJsonValue(m_auth_phone_number_hash, json[QString("auth_phone_number_hash")]);
    m_auth_phone_number_hash_isSet = !json[QString("auth_phone_number_hash")].isNull() && m_auth_phone_number_hash_isValid;

    m_auth_provider_isValid = ::OpenAPI::fromJsonValue(m_auth_provider, json[QString("auth_provider")]);
    m_auth_provider_isSet = !json[QString("auth_provider")].isNull() && m_auth_provider_isValid;

    m_auth_second_factor_type_isValid = ::OpenAPI::fromJsonValue(m_auth_second_factor_type, json[QString("auth_second_factor_type")]);
    m_auth_second_factor_type_isSet = !json[QString("auth_second_factor_type")].isNull() && m_auth_second_factor_type_isValid;

    m_auth_session_id_hash_isValid = ::OpenAPI::fromJsonValue(m_auth_session_id_hash, json[QString("auth_session_id_hash")]);
    m_auth_session_id_hash_isSet = !json[QString("auth_session_id_hash")].isNull() && m_auth_session_id_hash_isValid;

    m_auth_session_started_at_isValid = ::OpenAPI::fromJsonValue(m_auth_session_started_at, json[QString("auth_session_started_at")]);
    m_auth_session_started_at_isSet = !json[QString("auth_session_started_at")].isNull() && m_auth_session_started_at_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("auth_type")]);
    m_auth_type_isSet = !json[QString("auth_type")].isNull() && m_auth_type_isValid;

    m_auth_user_id_hash_isValid = ::OpenAPI::fromJsonValue(m_auth_user_id_hash, json[QString("auth_user_id_hash")]);
    m_auth_user_id_hash_isSet = !json[QString("auth_user_id_hash")].isNull() && m_auth_user_id_hash_isValid;

    m_auth_username_hash_isValid = ::OpenAPI::fromJsonValue(m_auth_username_hash, json[QString("auth_username_hash")]);
    m_auth_username_hash_isSet = !json[QString("auth_username_hash")].isNull() && m_auth_username_hash_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submission_id_isValid = ::OpenAPI::fromJsonValue(m_submission_id, json[QString("submission_id")]);
    m_submission_id_isSet = !json[QString("submission_id")].isNull() && m_submission_id_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_viewed_at_isValid = ::OpenAPI::fromJsonValue(m_viewed_at, json[QString("viewed_at")]);
    m_viewed_at_isSet = !json[QString("viewed_at")].isNull() && m_viewed_at_isValid;
}

QString OAISubmission_data_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission_data_request::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_phone_number_hash_isSet) {
        obj.insert(QString("auth_phone_number_hash"), ::OpenAPI::toJsonValue(m_auth_phone_number_hash));
    }
    if (m_auth_provider_isSet) {
        obj.insert(QString("auth_provider"), ::OpenAPI::toJsonValue(m_auth_provider));
    }
    if (m_auth_second_factor_type_isSet) {
        obj.insert(QString("auth_second_factor_type"), ::OpenAPI::toJsonValue(m_auth_second_factor_type));
    }
    if (m_auth_session_id_hash_isSet) {
        obj.insert(QString("auth_session_id_hash"), ::OpenAPI::toJsonValue(m_auth_session_id_hash));
    }
    if (m_auth_session_started_at_isSet) {
        obj.insert(QString("auth_session_started_at"), ::OpenAPI::toJsonValue(m_auth_session_started_at));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("auth_type"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_auth_user_id_hash_isSet) {
        obj.insert(QString("auth_user_id_hash"), ::OpenAPI::toJsonValue(m_auth_user_id_hash));
    }
    if (m_auth_username_hash_isSet) {
        obj.insert(QString("auth_username_hash"), ::OpenAPI::toJsonValue(m_auth_username_hash));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submission_id_isSet) {
        obj.insert(QString("submission_id"), ::OpenAPI::toJsonValue(m_submission_id));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_viewed_at_isSet) {
        obj.insert(QString("viewed_at"), ::OpenAPI::toJsonValue(m_viewed_at));
    }
    return obj;
}

QString OAISubmission_data_request::getAuthPhoneNumberHash() const {
    return m_auth_phone_number_hash;
}
void OAISubmission_data_request::setAuthPhoneNumberHash(const QString &auth_phone_number_hash) {
    m_auth_phone_number_hash = auth_phone_number_hash;
    m_auth_phone_number_hash_isSet = true;
}

bool OAISubmission_data_request::is_auth_phone_number_hash_Set() const{
    return m_auth_phone_number_hash_isSet;
}

bool OAISubmission_data_request::is_auth_phone_number_hash_Valid() const{
    return m_auth_phone_number_hash_isValid;
}

QString OAISubmission_data_request::getAuthProvider() const {
    return m_auth_provider;
}
void OAISubmission_data_request::setAuthProvider(const QString &auth_provider) {
    m_auth_provider = auth_provider;
    m_auth_provider_isSet = true;
}

bool OAISubmission_data_request::is_auth_provider_Set() const{
    return m_auth_provider_isSet;
}

bool OAISubmission_data_request::is_auth_provider_Valid() const{
    return m_auth_provider_isValid;
}

QString OAISubmission_data_request::getAuthSecondFactorType() const {
    return m_auth_second_factor_type;
}
void OAISubmission_data_request::setAuthSecondFactorType(const QString &auth_second_factor_type) {
    m_auth_second_factor_type = auth_second_factor_type;
    m_auth_second_factor_type_isSet = true;
}

bool OAISubmission_data_request::is_auth_second_factor_type_Set() const{
    return m_auth_second_factor_type_isSet;
}

bool OAISubmission_data_request::is_auth_second_factor_type_Valid() const{
    return m_auth_second_factor_type_isValid;
}

QString OAISubmission_data_request::getAuthSessionIdHash() const {
    return m_auth_session_id_hash;
}
void OAISubmission_data_request::setAuthSessionIdHash(const QString &auth_session_id_hash) {
    m_auth_session_id_hash = auth_session_id_hash;
    m_auth_session_id_hash_isSet = true;
}

bool OAISubmission_data_request::is_auth_session_id_hash_Set() const{
    return m_auth_session_id_hash_isSet;
}

bool OAISubmission_data_request::is_auth_session_id_hash_Valid() const{
    return m_auth_session_id_hash_isValid;
}

QString OAISubmission_data_request::getAuthSessionStartedAt() const {
    return m_auth_session_started_at;
}
void OAISubmission_data_request::setAuthSessionStartedAt(const QString &auth_session_started_at) {
    m_auth_session_started_at = auth_session_started_at;
    m_auth_session_started_at_isSet = true;
}

bool OAISubmission_data_request::is_auth_session_started_at_Set() const{
    return m_auth_session_started_at_isSet;
}

bool OAISubmission_data_request::is_auth_session_started_at_Valid() const{
    return m_auth_session_started_at_isValid;
}

QString OAISubmission_data_request::getAuthType() const {
    return m_auth_type;
}
void OAISubmission_data_request::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAISubmission_data_request::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAISubmission_data_request::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAISubmission_data_request::getAuthUserIdHash() const {
    return m_auth_user_id_hash;
}
void OAISubmission_data_request::setAuthUserIdHash(const QString &auth_user_id_hash) {
    m_auth_user_id_hash = auth_user_id_hash;
    m_auth_user_id_hash_isSet = true;
}

bool OAISubmission_data_request::is_auth_user_id_hash_Set() const{
    return m_auth_user_id_hash_isSet;
}

bool OAISubmission_data_request::is_auth_user_id_hash_Valid() const{
    return m_auth_user_id_hash_isValid;
}

QString OAISubmission_data_request::getAuthUsernameHash() const {
    return m_auth_username_hash;
}
void OAISubmission_data_request::setAuthUsernameHash(const QString &auth_username_hash) {
    m_auth_username_hash = auth_username_hash;
    m_auth_username_hash_isSet = true;
}

bool OAISubmission_data_request::is_auth_username_hash_Set() const{
    return m_auth_username_hash_isSet;
}

bool OAISubmission_data_request::is_auth_username_hash_Valid() const{
    return m_auth_username_hash_isValid;
}

QString OAISubmission_data_request::getCompletedAt() const {
    return m_completed_at;
}
void OAISubmission_data_request::setCompletedAt(const QString &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAISubmission_data_request::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAISubmission_data_request::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAISubmission_data_request::getEmail() const {
    return m_email;
}
void OAISubmission_data_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubmission_data_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubmission_data_request::is_email_Valid() const{
    return m_email_isValid;
}

QList<QString> OAISubmission_data_request::getFields() const {
    return m_fields;
}
void OAISubmission_data_request::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISubmission_data_request::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISubmission_data_request::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAISubmission_data_request::getId() const {
    return m_id;
}
void OAISubmission_data_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubmission_data_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubmission_data_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubmission_data_request::getIpAddress() const {
    return m_ip_address;
}
void OAISubmission_data_request::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAISubmission_data_request::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAISubmission_data_request::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIObject OAISubmission_data_request::getMetadata() const {
    return m_metadata;
}
void OAISubmission_data_request::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubmission_data_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubmission_data_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISubmission_data_request::getName() const {
    return m_name;
}
void OAISubmission_data_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubmission_data_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubmission_data_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISubmission_data_request::getOrder() const {
    return m_order;
}
void OAISubmission_data_request::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISubmission_data_request::is_order_Set() const{
    return m_order_isSet;
}

bool OAISubmission_data_request::is_order_Valid() const{
    return m_order_isValid;
}

qint32 OAISubmission_data_request::getSortOrder() const {
    return m_sort_order;
}
void OAISubmission_data_request::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISubmission_data_request::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISubmission_data_request::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAISubmission_data_request::getState() const {
    return m_state;
}
void OAISubmission_data_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubmission_data_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubmission_data_request::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubmission_data_request::getSubmissionId() const {
    return m_submission_id;
}
void OAISubmission_data_request::setSubmissionId(const QString &submission_id) {
    m_submission_id = submission_id;
    m_submission_id_isSet = true;
}

bool OAISubmission_data_request::is_submission_id_Set() const{
    return m_submission_id_isSet;
}

bool OAISubmission_data_request::is_submission_id_Valid() const{
    return m_submission_id_isValid;
}

QString OAISubmission_data_request::getUserAgent() const {
    return m_user_agent;
}
void OAISubmission_data_request::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAISubmission_data_request::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAISubmission_data_request::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAISubmission_data_request::getViewedAt() const {
    return m_viewed_at;
}
void OAISubmission_data_request::setViewedAt(const QString &viewed_at) {
    m_viewed_at = viewed_at;
    m_viewed_at_isSet = true;
}

bool OAISubmission_data_request::is_viewed_at_Set() const{
    return m_viewed_at_isSet;
}

bool OAISubmission_data_request::is_viewed_at_Valid() const{
    return m_viewed_at_isValid;
}

bool OAISubmission_data_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_phone_number_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_second_factor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_session_id_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_session_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_user_id_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_username_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewed_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission_data_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_fields_isValid && m_id_isValid && m_metadata_isValid && m_name_isValid && m_order_isValid && m_sort_order_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
