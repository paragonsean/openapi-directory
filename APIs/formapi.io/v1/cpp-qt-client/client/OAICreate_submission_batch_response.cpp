/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_submission_batch_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_submission_batch_response::OAICreate_submission_batch_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_submission_batch_response::OAICreate_submission_batch_response() {
    this->initializeModel();
}

OAICreate_submission_batch_response::~OAICreate_submission_batch_response() {}

void OAICreate_submission_batch_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submission_batch_isSet = false;
    m_submission_batch_isValid = false;

    m_submissions_isSet = false;
    m_submissions_isValid = false;
}

void OAICreate_submission_batch_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_submission_batch_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submission_batch_isValid = ::OpenAPI::fromJsonValue(m_submission_batch, json[QString("submission_batch")]);
    m_submission_batch_isSet = !json[QString("submission_batch")].isNull() && m_submission_batch_isValid;

    m_submissions_isValid = ::OpenAPI::fromJsonValue(m_submissions, json[QString("submissions")]);
    m_submissions_isSet = !json[QString("submissions")].isNull() && m_submissions_isValid;
}

QString OAICreate_submission_batch_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_submission_batch_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submission_batch.isSet()) {
        obj.insert(QString("submission_batch"), ::OpenAPI::toJsonValue(m_submission_batch));
    }
    if (m_submissions.size() > 0) {
        obj.insert(QString("submissions"), ::OpenAPI::toJsonValue(m_submissions));
    }
    return obj;
}

QString OAICreate_submission_batch_response::getError() const {
    return m_error;
}
void OAICreate_submission_batch_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICreate_submission_batch_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAICreate_submission_batch_response::is_error_Valid() const{
    return m_error_isValid;
}

QList<QString> OAICreate_submission_batch_response::getErrors() const {
    return m_errors;
}
void OAICreate_submission_batch_response::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICreate_submission_batch_response::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICreate_submission_batch_response::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICreate_submission_batch_response::getStatus() const {
    return m_status;
}
void OAICreate_submission_batch_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreate_submission_batch_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreate_submission_batch_response::is_status_Valid() const{
    return m_status_isValid;
}

OAISubmission_batch OAICreate_submission_batch_response::getSubmissionBatch() const {
    return m_submission_batch;
}
void OAICreate_submission_batch_response::setSubmissionBatch(const OAISubmission_batch &submission_batch) {
    m_submission_batch = submission_batch;
    m_submission_batch_isSet = true;
}

bool OAICreate_submission_batch_response::is_submission_batch_Set() const{
    return m_submission_batch_isSet;
}

bool OAICreate_submission_batch_response::is_submission_batch_Valid() const{
    return m_submission_batch_isValid;
}

QList<OAICreate_submission_batch_submissions_response> OAICreate_submission_batch_response::getSubmissions() const {
    return m_submissions;
}
void OAICreate_submission_batch_response::setSubmissions(const QList<OAICreate_submission_batch_submissions_response> &submissions) {
    m_submissions = submissions;
    m_submissions_isSet = true;
}

bool OAICreate_submission_batch_response::is_submissions_Set() const{
    return m_submissions_isSet;
}

bool OAICreate_submission_batch_response::is_submissions_Valid() const{
    return m_submissions_isValid;
}

bool OAICreate_submission_batch_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_submission_batch_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_submission_batch_isValid && m_submissions_isValid && true;
}

} // namespace OpenAPI
