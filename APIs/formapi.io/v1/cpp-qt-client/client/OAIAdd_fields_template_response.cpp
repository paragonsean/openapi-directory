/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdd_fields_template_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdd_fields_template_response::OAIAdd_fields_template_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdd_fields_template_response::OAIAdd_fields_template_response() {
    this->initializeModel();
}

OAIAdd_fields_template_response::~OAIAdd_fields_template_response() {}

void OAIAdd_fields_template_response::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_new_field_ids_isSet = false;
    m_new_field_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAdd_fields_template_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdd_fields_template_response::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_new_field_ids_isValid = ::OpenAPI::fromJsonValue(m_new_field_ids, json[QString("new_field_ids")]);
    m_new_field_ids_isSet = !json[QString("new_field_ids")].isNull() && m_new_field_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAdd_fields_template_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdd_fields_template_response::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_new_field_ids.size() > 0) {
        obj.insert(QString("new_field_ids"), ::OpenAPI::toJsonValue(m_new_field_ids));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<QString> OAIAdd_fields_template_response::getErrors() const {
    return m_errors;
}
void OAIAdd_fields_template_response::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIAdd_fields_template_response::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIAdd_fields_template_response::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<qint32> OAIAdd_fields_template_response::getNewFieldIds() const {
    return m_new_field_ids;
}
void OAIAdd_fields_template_response::setNewFieldIds(const QList<qint32> &new_field_ids) {
    m_new_field_ids = new_field_ids;
    m_new_field_ids_isSet = true;
}

bool OAIAdd_fields_template_response::is_new_field_ids_Set() const{
    return m_new_field_ids_isSet;
}

bool OAIAdd_fields_template_response::is_new_field_ids_Valid() const{
    return m_new_field_ids_isValid;
}

QString OAIAdd_fields_template_response::getStatus() const {
    return m_status;
}
void OAIAdd_fields_template_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdd_fields_template_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdd_fields_template_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAdd_fields_template_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_field_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdd_fields_template_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
