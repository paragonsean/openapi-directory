/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPending_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPending_template::OAIPending_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPending_template::OAIPending_template() {
    this->initializeModel();
}

OAIPending_template::~OAIPending_template() {}

void OAIPending_template::initializeModel() {

    m_allow_additional_properties_isSet = false;
    m_allow_additional_properties_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_editable_submissions_isSet = false;
    m_editable_submissions_isValid = false;

    m_expiration_interval_isSet = false;
    m_expiration_interval_isValid = false;

    m_expire_after_isSet = false;
    m_expire_after_isValid = false;

    m_expire_submissions_isSet = false;
    m_expire_submissions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_public_submissions_isSet = false;
    m_public_submissions_isValid = false;

    m_public_web_form_isSet = false;
    m_public_web_form_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_slack_webhook_url_isSet = false;
    m_slack_webhook_url_isValid = false;

    m_template_type_isSet = false;
    m_template_type_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIPending_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPending_template::fromJsonObject(QJsonObject json) {

    m_allow_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_allow_additional_properties, json[QString("allow_additional_properties")]);
    m_allow_additional_properties_isSet = !json[QString("allow_additional_properties")].isNull() && m_allow_additional_properties_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_editable_submissions_isValid = ::OpenAPI::fromJsonValue(m_editable_submissions, json[QString("editable_submissions")]);
    m_editable_submissions_isSet = !json[QString("editable_submissions")].isNull() && m_editable_submissions_isValid;

    m_expiration_interval_isValid = ::OpenAPI::fromJsonValue(m_expiration_interval, json[QString("expiration_interval")]);
    m_expiration_interval_isSet = !json[QString("expiration_interval")].isNull() && m_expiration_interval_isValid;

    m_expire_after_isValid = ::OpenAPI::fromJsonValue(m_expire_after, json[QString("expire_after")]);
    m_expire_after_isSet = !json[QString("expire_after")].isNull() && m_expire_after_isValid;

    m_expire_submissions_isValid = ::OpenAPI::fromJsonValue(m_expire_submissions, json[QString("expire_submissions")]);
    m_expire_submissions_isSet = !json[QString("expire_submissions")].isNull() && m_expire_submissions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parent_folder_id")]);
    m_parent_folder_id_isSet = !json[QString("parent_folder_id")].isNull() && m_parent_folder_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_public_submissions_isValid = ::OpenAPI::fromJsonValue(m_public_submissions, json[QString("public_submissions")]);
    m_public_submissions_isSet = !json[QString("public_submissions")].isNull() && m_public_submissions_isValid;

    m_public_web_form_isValid = ::OpenAPI::fromJsonValue(m_public_web_form, json[QString("public_web_form")]);
    m_public_web_form_isSet = !json[QString("public_web_form")].isNull() && m_public_web_form_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_slack_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_slack_webhook_url, json[QString("slack_webhook_url")]);
    m_slack_webhook_url_isSet = !json[QString("slack_webhook_url")].isNull() && m_slack_webhook_url_isValid;

    m_template_type_isValid = ::OpenAPI::fromJsonValue(m_template_type, json[QString("template_type")]);
    m_template_type_isSet = !json[QString("template_type")].isNull() && m_template_type_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIPending_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPending_template::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_additional_properties_isSet) {
        obj.insert(QString("allow_additional_properties"), ::OpenAPI::toJsonValue(m_allow_additional_properties));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_editable_submissions_isSet) {
        obj.insert(QString("editable_submissions"), ::OpenAPI::toJsonValue(m_editable_submissions));
    }
    if (m_expiration_interval_isSet) {
        obj.insert(QString("expiration_interval"), ::OpenAPI::toJsonValue(m_expiration_interval));
    }
    if (m_expire_after_isSet) {
        obj.insert(QString("expire_after"), ::OpenAPI::toJsonValue(m_expire_after));
    }
    if (m_expire_submissions_isSet) {
        obj.insert(QString("expire_submissions"), ::OpenAPI::toJsonValue(m_expire_submissions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parent_folder_id"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_public_submissions_isSet) {
        obj.insert(QString("public_submissions"), ::OpenAPI::toJsonValue(m_public_submissions));
    }
    if (m_public_web_form_isSet) {
        obj.insert(QString("public_web_form"), ::OpenAPI::toJsonValue(m_public_web_form));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_slack_webhook_url_isSet) {
        obj.insert(QString("slack_webhook_url"), ::OpenAPI::toJsonValue(m_slack_webhook_url));
    }
    if (m_template_type_isSet) {
        obj.insert(QString("template_type"), ::OpenAPI::toJsonValue(m_template_type));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

bool OAIPending_template::isAllowAdditionalProperties() const {
    return m_allow_additional_properties;
}
void OAIPending_template::setAllowAdditionalProperties(const bool &allow_additional_properties) {
    m_allow_additional_properties = allow_additional_properties;
    m_allow_additional_properties_isSet = true;
}

bool OAIPending_template::is_allow_additional_properties_Set() const{
    return m_allow_additional_properties_isSet;
}

bool OAIPending_template::is_allow_additional_properties_Valid() const{
    return m_allow_additional_properties_isValid;
}

QString OAIPending_template::getDescription() const {
    return m_description;
}
void OAIPending_template::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPending_template::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPending_template::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPending_template::isEditableSubmissions() const {
    return m_editable_submissions;
}
void OAIPending_template::setEditableSubmissions(const bool &editable_submissions) {
    m_editable_submissions = editable_submissions;
    m_editable_submissions_isSet = true;
}

bool OAIPending_template::is_editable_submissions_Set() const{
    return m_editable_submissions_isSet;
}

bool OAIPending_template::is_editable_submissions_Valid() const{
    return m_editable_submissions_isValid;
}

QString OAIPending_template::getExpirationInterval() const {
    return m_expiration_interval;
}
void OAIPending_template::setExpirationInterval(const QString &expiration_interval) {
    m_expiration_interval = expiration_interval;
    m_expiration_interval_isSet = true;
}

bool OAIPending_template::is_expiration_interval_Set() const{
    return m_expiration_interval_isSet;
}

bool OAIPending_template::is_expiration_interval_Valid() const{
    return m_expiration_interval_isValid;
}

double OAIPending_template::getExpireAfter() const {
    return m_expire_after;
}
void OAIPending_template::setExpireAfter(const double &expire_after) {
    m_expire_after = expire_after;
    m_expire_after_isSet = true;
}

bool OAIPending_template::is_expire_after_Set() const{
    return m_expire_after_isSet;
}

bool OAIPending_template::is_expire_after_Valid() const{
    return m_expire_after_isValid;
}

bool OAIPending_template::isExpireSubmissions() const {
    return m_expire_submissions;
}
void OAIPending_template::setExpireSubmissions(const bool &expire_submissions) {
    m_expire_submissions = expire_submissions;
    m_expire_submissions_isSet = true;
}

bool OAIPending_template::is_expire_submissions_Set() const{
    return m_expire_submissions_isSet;
}

bool OAIPending_template::is_expire_submissions_Valid() const{
    return m_expire_submissions_isValid;
}

QString OAIPending_template::getId() const {
    return m_id;
}
void OAIPending_template::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPending_template::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPending_template::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPending_template::isLocked() const {
    return m_locked;
}
void OAIPending_template::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIPending_template::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIPending_template::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIPending_template::getName() const {
    return m_name;
}
void OAIPending_template::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPending_template::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPending_template::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPending_template::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIPending_template::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIPending_template::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIPending_template::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

QString OAIPending_template::getPath() const {
    return m_path;
}
void OAIPending_template::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPending_template::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPending_template::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIPending_template::isPublicSubmissions() const {
    return m_public_submissions;
}
void OAIPending_template::setPublicSubmissions(const bool &public_submissions) {
    m_public_submissions = public_submissions;
    m_public_submissions_isSet = true;
}

bool OAIPending_template::is_public_submissions_Set() const{
    return m_public_submissions_isSet;
}

bool OAIPending_template::is_public_submissions_Valid() const{
    return m_public_submissions_isValid;
}

bool OAIPending_template::isPublicWebForm() const {
    return m_public_web_form;
}
void OAIPending_template::setPublicWebForm(const bool &public_web_form) {
    m_public_web_form = public_web_form;
    m_public_web_form_isSet = true;
}

bool OAIPending_template::is_public_web_form_Set() const{
    return m_public_web_form_isSet;
}

bool OAIPending_template::is_public_web_form_Valid() const{
    return m_public_web_form_isValid;
}

QString OAIPending_template::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIPending_template::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIPending_template::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIPending_template::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIPending_template::getSlackWebhookUrl() const {
    return m_slack_webhook_url;
}
void OAIPending_template::setSlackWebhookUrl(const QString &slack_webhook_url) {
    m_slack_webhook_url = slack_webhook_url;
    m_slack_webhook_url_isSet = true;
}

bool OAIPending_template::is_slack_webhook_url_Set() const{
    return m_slack_webhook_url_isSet;
}

bool OAIPending_template::is_slack_webhook_url_Valid() const{
    return m_slack_webhook_url_isValid;
}

QString OAIPending_template::getTemplateType() const {
    return m_template_type;
}
void OAIPending_template::setTemplateType(const QString &template_type) {
    m_template_type = template_type;
    m_template_type_isSet = true;
}

bool OAIPending_template::is_template_type_Set() const{
    return m_template_type_isSet;
}

bool OAIPending_template::is_template_type_Valid() const{
    return m_template_type_isValid;
}

QString OAIPending_template::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIPending_template::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIPending_template::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIPending_template::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIPending_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editable_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_web_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPending_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_additional_properties_isValid && m_description_isValid && m_editable_submissions_isValid && m_expire_submissions_isValid && m_id_isValid && m_locked_isValid && m_name_isValid && m_public_submissions_isValid && m_public_web_form_isValid && m_redirect_url_isValid && m_slack_webhook_url_isValid && m_template_type_isValid && m_webhook_url_isValid && true;
}

} // namespace OpenAPI
