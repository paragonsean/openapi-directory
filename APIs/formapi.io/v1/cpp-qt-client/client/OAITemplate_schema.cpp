/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate_schema::OAITemplate_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate_schema::OAITemplate_schema() {
    this->initializeModel();
}

OAITemplate_schema::~OAITemplate_schema() {}

void OAITemplate_schema::initializeModel() {

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_definitions_isSet = false;
    m_definitions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITemplate_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate_schema::fromJsonObject(QJsonObject json) {

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("$schema")]);
    m_schema_isSet = !json[QString("$schema")].isNull() && m_schema_isValid;

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_definitions_isValid = ::OpenAPI::fromJsonValue(m_definitions, json[QString("definitions")]);
    m_definitions_isSet = !json[QString("definitions")].isNull() && m_definitions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITemplate_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_isSet) {
        obj.insert(QString("$schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_definitions_isSet) {
        obj.insert(QString("definitions"), ::OpenAPI::toJsonValue(m_definitions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITemplate_schema::getSchema() const {
    return m_schema;
}
void OAITemplate_schema::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITemplate_schema::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITemplate_schema::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAITemplate_schema::isAdditionalProperties() const {
    return m_additional_properties;
}
void OAITemplate_schema::setAdditionalProperties(const bool &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAITemplate_schema::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAITemplate_schema::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

OAIObject OAITemplate_schema::getDefinitions() const {
    return m_definitions;
}
void OAITemplate_schema::setDefinitions(const OAIObject &definitions) {
    m_definitions = definitions;
    m_definitions_isSet = true;
}

bool OAITemplate_schema::is_definitions_Set() const{
    return m_definitions_isSet;
}

bool OAITemplate_schema::is_definitions_Valid() const{
    return m_definitions_isValid;
}

QString OAITemplate_schema::getDescription() const {
    return m_description;
}
void OAITemplate_schema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplate_schema::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplate_schema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplate_schema::getId() const {
    return m_id;
}
void OAITemplate_schema::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITemplate_schema::is_id_Set() const{
    return m_id_isSet;
}

bool OAITemplate_schema::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAITemplate_schema::getProperties() const {
    return m_properties;
}
void OAITemplate_schema::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAITemplate_schema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAITemplate_schema::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QJsonValue> OAITemplate_schema::getRequired() const {
    return m_required;
}
void OAITemplate_schema::setRequired(const QList<QJsonValue> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAITemplate_schema::is_required_Set() const{
    return m_required_isSet;
}

bool OAITemplate_schema::is_required_Valid() const{
    return m_required_isValid;
}

QString OAITemplate_schema::getTitle() const {
    return m_title;
}
void OAITemplate_schema::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITemplate_schema::is_title_Set() const{
    return m_title_isSet;
}

bool OAITemplate_schema::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITemplate_schema::getType() const {
    return m_type;
}
void OAITemplate_schema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITemplate_schema::is_type_Set() const{
    return m_type_isSet;
}

bool OAITemplate_schema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITemplate_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definitions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
