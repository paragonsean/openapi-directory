/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload_presign_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload_presign_fields::OAIUpload_presign_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload_presign_fields::OAIUpload_presign_fields() {
    this->initializeModel();
}

OAIUpload_presign_fields::~OAIUpload_presign_fields() {}

void OAIUpload_presign_fields::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_x_amz_algorithm_isSet = false;
    m_x_amz_algorithm_isValid = false;

    m_x_amz_credential_isSet = false;
    m_x_amz_credential_isValid = false;

    m_x_amz_date_isSet = false;
    m_x_amz_date_isValid = false;

    m_x_amz_signature_isSet = false;
    m_x_amz_signature_isValid = false;
}

void OAIUpload_presign_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload_presign_fields::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_x_amz_algorithm_isValid = ::OpenAPI::fromJsonValue(m_x_amz_algorithm, json[QString("x-amz-algorithm")]);
    m_x_amz_algorithm_isSet = !json[QString("x-amz-algorithm")].isNull() && m_x_amz_algorithm_isValid;

    m_x_amz_credential_isValid = ::OpenAPI::fromJsonValue(m_x_amz_credential, json[QString("x-amz-credential")]);
    m_x_amz_credential_isSet = !json[QString("x-amz-credential")].isNull() && m_x_amz_credential_isValid;

    m_x_amz_date_isValid = ::OpenAPI::fromJsonValue(m_x_amz_date, json[QString("x-amz-date")]);
    m_x_amz_date_isSet = !json[QString("x-amz-date")].isNull() && m_x_amz_date_isValid;

    m_x_amz_signature_isValid = ::OpenAPI::fromJsonValue(m_x_amz_signature, json[QString("x-amz-signature")]);
    m_x_amz_signature_isSet = !json[QString("x-amz-signature")].isNull() && m_x_amz_signature_isValid;
}

QString OAIUpload_presign_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload_presign_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_x_amz_algorithm_isSet) {
        obj.insert(QString("x-amz-algorithm"), ::OpenAPI::toJsonValue(m_x_amz_algorithm));
    }
    if (m_x_amz_credential_isSet) {
        obj.insert(QString("x-amz-credential"), ::OpenAPI::toJsonValue(m_x_amz_credential));
    }
    if (m_x_amz_date_isSet) {
        obj.insert(QString("x-amz-date"), ::OpenAPI::toJsonValue(m_x_amz_date));
    }
    if (m_x_amz_signature_isSet) {
        obj.insert(QString("x-amz-signature"), ::OpenAPI::toJsonValue(m_x_amz_signature));
    }
    return obj;
}

QString OAIUpload_presign_fields::getKey() const {
    return m_key;
}
void OAIUpload_presign_fields::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUpload_presign_fields::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUpload_presign_fields::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUpload_presign_fields::getPolicy() const {
    return m_policy;
}
void OAIUpload_presign_fields::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUpload_presign_fields::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUpload_presign_fields::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIUpload_presign_fields::getXAmzAlgorithm() const {
    return m_x_amz_algorithm;
}
void OAIUpload_presign_fields::setXAmzAlgorithm(const QString &x_amz_algorithm) {
    m_x_amz_algorithm = x_amz_algorithm;
    m_x_amz_algorithm_isSet = true;
}

bool OAIUpload_presign_fields::is_x_amz_algorithm_Set() const{
    return m_x_amz_algorithm_isSet;
}

bool OAIUpload_presign_fields::is_x_amz_algorithm_Valid() const{
    return m_x_amz_algorithm_isValid;
}

QString OAIUpload_presign_fields::getXAmzCredential() const {
    return m_x_amz_credential;
}
void OAIUpload_presign_fields::setXAmzCredential(const QString &x_amz_credential) {
    m_x_amz_credential = x_amz_credential;
    m_x_amz_credential_isSet = true;
}

bool OAIUpload_presign_fields::is_x_amz_credential_Set() const{
    return m_x_amz_credential_isSet;
}

bool OAIUpload_presign_fields::is_x_amz_credential_Valid() const{
    return m_x_amz_credential_isValid;
}

QString OAIUpload_presign_fields::getXAmzDate() const {
    return m_x_amz_date;
}
void OAIUpload_presign_fields::setXAmzDate(const QString &x_amz_date) {
    m_x_amz_date = x_amz_date;
    m_x_amz_date_isSet = true;
}

bool OAIUpload_presign_fields::is_x_amz_date_Set() const{
    return m_x_amz_date_isSet;
}

bool OAIUpload_presign_fields::is_x_amz_date_Valid() const{
    return m_x_amz_date_isValid;
}

QString OAIUpload_presign_fields::getXAmzSignature() const {
    return m_x_amz_signature;
}
void OAIUpload_presign_fields::setXAmzSignature(const QString &x_amz_signature) {
    m_x_amz_signature = x_amz_signature;
    m_x_amz_signature_isSet = true;
}

bool OAIUpload_presign_fields::is_x_amz_signature_Set() const{
    return m_x_amz_signature_isSet;
}

bool OAIUpload_presign_fields::is_x_amz_signature_Valid() const{
    return m_x_amz_signature_isValid;
}

bool OAIUpload_presign_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload_presign_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_policy_isValid && m_x_amz_algorithm_isValid && m_x_amz_credential_isValid && m_x_amz_date_isValid && m_x_amz_signature_isValid && true;
}

} // namespace OpenAPI
