/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload_presign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload_presign::OAIUpload_presign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload_presign::OAIUpload_presign() {
    this->initializeModel();
}

OAIUpload_presign::~OAIUpload_presign() {}

void OAIUpload_presign::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUpload_presign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload_presign::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUpload_presign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload_presign::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIUpload_presign_fields OAIUpload_presign::getFields() const {
    return m_fields;
}
void OAIUpload_presign::setFields(const OAIUpload_presign_fields &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIUpload_presign::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIUpload_presign::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIObject OAIUpload_presign::getHeaders() const {
    return m_headers;
}
void OAIUpload_presign::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIUpload_presign::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIUpload_presign::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIUpload_presign::getMethod() const {
    return m_method;
}
void OAIUpload_presign::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIUpload_presign::is_method_Set() const{
    return m_method_isSet;
}

bool OAIUpload_presign::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIUpload_presign::getUrl() const {
    return m_url;
}
void OAIUpload_presign::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUpload_presign::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUpload_presign::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUpload_presign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload_presign::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fields_isValid && m_headers_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
