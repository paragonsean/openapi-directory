/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFull_template_defaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFull_template_defaults::OAIFull_template_defaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFull_template_defaults::OAIFull_template_defaults() {
    this->initializeModel();
}

OAIFull_template_defaults::~OAIFull_template_defaults() {}

void OAIFull_template_defaults::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_typeface_isSet = false;
    m_typeface_isValid = false;
}

void OAIFull_template_defaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFull_template_defaults::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_typeface_isValid = ::OpenAPI::fromJsonValue(m_typeface, json[QString("typeface")]);
    m_typeface_isSet = !json[QString("typeface")].isNull() && m_typeface_isValid;
}

QString OAIFull_template_defaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFull_template_defaults::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_typeface_isSet) {
        obj.insert(QString("typeface"), ::OpenAPI::toJsonValue(m_typeface));
    }
    return obj;
}

QString OAIFull_template_defaults::getColor() const {
    return m_color;
}
void OAIFull_template_defaults::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIFull_template_defaults::is_color_Set() const{
    return m_color_isSet;
}

bool OAIFull_template_defaults::is_color_Valid() const{
    return m_color_isValid;
}

double OAIFull_template_defaults::getFontSize() const {
    return m_font_size;
}
void OAIFull_template_defaults::setFontSize(const double &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIFull_template_defaults::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIFull_template_defaults::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIFull_template_defaults::getTypeface() const {
    return m_typeface;
}
void OAIFull_template_defaults::setTypeface(const QString &typeface) {
    m_typeface = typeface;
    m_typeface_isSet = true;
}

bool OAIFull_template_defaults::is_typeface_Set() const{
    return m_typeface_isSet;
}

bool OAIFull_template_defaults::is_typeface_Valid() const{
    return m_typeface_isValid;
}

bool OAIFull_template_defaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typeface_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFull_template_defaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_color_isValid && m_font_size_isValid && m_typeface_isValid && true;
}

} // namespace OpenAPI
