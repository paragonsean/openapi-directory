/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission::OAISubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission::OAISubmission() {
    this->initializeModel();
}

OAISubmission::~OAISubmission() {}

void OAISubmission::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_requests_isSet = false;
    m_data_requests_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_editable_isSet = false;
    m_editable_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_pdf_hash_isSet = false;
    m_pdf_hash_isValid = false;

    m_permanent_download_url_isSet = false;
    m_permanent_download_url_isValid = false;

    m_processed_at_isSet = false;
    m_processed_at_isValid = false;

    m_referrer_isSet = false;
    m_referrer_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_truncated_text_isSet = false;
    m_truncated_text_isValid = false;
}

void OAISubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batch_id")]);
    m_batch_id_isSet = !json[QString("batch_id")].isNull() && m_batch_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_requests_isValid = ::OpenAPI::fromJsonValue(m_data_requests, json[QString("data_requests")]);
    m_data_requests_isSet = !json[QString("data_requests")].isNull() && m_data_requests_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_editable_isValid = ::OpenAPI::fromJsonValue(m_editable, json[QString("editable")]);
    m_editable_isSet = !json[QString("editable")].isNull() && m_editable_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_pdf_hash_isValid = ::OpenAPI::fromJsonValue(m_pdf_hash, json[QString("pdf_hash")]);
    m_pdf_hash_isSet = !json[QString("pdf_hash")].isNull() && m_pdf_hash_isValid;

    m_permanent_download_url_isValid = ::OpenAPI::fromJsonValue(m_permanent_download_url, json[QString("permanent_download_url")]);
    m_permanent_download_url_isSet = !json[QString("permanent_download_url")].isNull() && m_permanent_download_url_isValid;

    m_processed_at_isValid = ::OpenAPI::fromJsonValue(m_processed_at, json[QString("processed_at")]);
    m_processed_at_isSet = !json[QString("processed_at")].isNull() && m_processed_at_isValid;

    m_referrer_isValid = ::OpenAPI::fromJsonValue(m_referrer, json[QString("referrer")]);
    m_referrer_isSet = !json[QString("referrer")].isNull() && m_referrer_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_truncated_text_isValid = ::OpenAPI::fromJsonValue(m_truncated_text, json[QString("truncated_text")]);
    m_truncated_text_isSet = !json[QString("truncated_text")].isNull() && m_truncated_text_isValid;
}

QString OAISubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batch_id"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_requests.size() > 0) {
        obj.insert(QString("data_requests"), ::OpenAPI::toJsonValue(m_data_requests));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_editable_isSet) {
        obj.insert(QString("editable"), ::OpenAPI::toJsonValue(m_editable));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_pdf_hash_isSet) {
        obj.insert(QString("pdf_hash"), ::OpenAPI::toJsonValue(m_pdf_hash));
    }
    if (m_permanent_download_url_isSet) {
        obj.insert(QString("permanent_download_url"), ::OpenAPI::toJsonValue(m_permanent_download_url));
    }
    if (m_processed_at_isSet) {
        obj.insert(QString("processed_at"), ::OpenAPI::toJsonValue(m_processed_at));
    }
    if (m_referrer_isSet) {
        obj.insert(QString("referrer"), ::OpenAPI::toJsonValue(m_referrer));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_truncated_text_isSet) {
        obj.insert(QString("truncated_text"), ::OpenAPI::toJsonValue(m_truncated_text));
    }
    return obj;
}

QList<OAISubmission_action> OAISubmission::getActions() const {
    return m_actions;
}
void OAISubmission::setActions(const QList<OAISubmission_action> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAISubmission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAISubmission::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAISubmission::getBatchId() const {
    return m_batch_id;
}
void OAISubmission::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAISubmission::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAISubmission::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

OAIObject OAISubmission::getData() const {
    return m_data;
}
void OAISubmission::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISubmission::is_data_Set() const{
    return m_data_isSet;
}

bool OAISubmission::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAISubmission_data_request> OAISubmission::getDataRequests() const {
    return m_data_requests;
}
void OAISubmission::setDataRequests(const QList<OAISubmission_data_request> &data_requests) {
    m_data_requests = data_requests;
    m_data_requests_isSet = true;
}

bool OAISubmission::is_data_requests_Set() const{
    return m_data_requests_isSet;
}

bool OAISubmission::is_data_requests_Valid() const{
    return m_data_requests_isValid;
}

QString OAISubmission::getDownloadUrl() const {
    return m_download_url;
}
void OAISubmission::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAISubmission::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAISubmission::is_download_url_Valid() const{
    return m_download_url_isValid;
}

bool OAISubmission::isEditable() const {
    return m_editable;
}
void OAISubmission::setEditable(const bool &editable) {
    m_editable = editable;
    m_editable_isSet = true;
}

bool OAISubmission::is_editable_Set() const{
    return m_editable_isSet;
}

bool OAISubmission::is_editable_Valid() const{
    return m_editable_isValid;
}

bool OAISubmission::isExpired() const {
    return m_expired;
}
void OAISubmission::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAISubmission::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAISubmission::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAISubmission::getExpiresAt() const {
    return m_expires_at;
}
void OAISubmission::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAISubmission::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAISubmission::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAISubmission::getId() const {
    return m_id;
}
void OAISubmission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubmission::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubmission::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAISubmission::getMetadata() const {
    return m_metadata;
}
void OAISubmission::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubmission::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubmission::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISubmission::getPdfHash() const {
    return m_pdf_hash;
}
void OAISubmission::setPdfHash(const QString &pdf_hash) {
    m_pdf_hash = pdf_hash;
    m_pdf_hash_isSet = true;
}

bool OAISubmission::is_pdf_hash_Set() const{
    return m_pdf_hash_isSet;
}

bool OAISubmission::is_pdf_hash_Valid() const{
    return m_pdf_hash_isValid;
}

QString OAISubmission::getPermanentDownloadUrl() const {
    return m_permanent_download_url;
}
void OAISubmission::setPermanentDownloadUrl(const QString &permanent_download_url) {
    m_permanent_download_url = permanent_download_url;
    m_permanent_download_url_isSet = true;
}

bool OAISubmission::is_permanent_download_url_Set() const{
    return m_permanent_download_url_isSet;
}

bool OAISubmission::is_permanent_download_url_Valid() const{
    return m_permanent_download_url_isValid;
}

QString OAISubmission::getProcessedAt() const {
    return m_processed_at;
}
void OAISubmission::setProcessedAt(const QString &processed_at) {
    m_processed_at = processed_at;
    m_processed_at_isSet = true;
}

bool OAISubmission::is_processed_at_Set() const{
    return m_processed_at_isSet;
}

bool OAISubmission::is_processed_at_Valid() const{
    return m_processed_at_isValid;
}

QString OAISubmission::getReferrer() const {
    return m_referrer;
}
void OAISubmission::setReferrer(const QString &referrer) {
    m_referrer = referrer;
    m_referrer_isSet = true;
}

bool OAISubmission::is_referrer_Set() const{
    return m_referrer_isSet;
}

bool OAISubmission::is_referrer_Valid() const{
    return m_referrer_isValid;
}

QString OAISubmission::getSource() const {
    return m_source;
}
void OAISubmission::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISubmission::is_source_Set() const{
    return m_source_isSet;
}

bool OAISubmission::is_source_Valid() const{
    return m_source_isValid;
}

QString OAISubmission::getState() const {
    return m_state;
}
void OAISubmission::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubmission::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubmission::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubmission::getTemplateId() const {
    return m_template_id;
}
void OAISubmission::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAISubmission::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISubmission::is_template_id_Valid() const{
    return m_template_id_isValid;
}

bool OAISubmission::isTest() const {
    return m_test;
}
void OAISubmission::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAISubmission::is_test_Set() const{
    return m_test_isSet;
}

bool OAISubmission::is_test_Valid() const{
    return m_test_isValid;
}

OAIObject OAISubmission::getTruncatedText() const {
    return m_truncated_text;
}
void OAISubmission::setTruncatedText(const OAIObject &truncated_text) {
    m_truncated_text = truncated_text;
    m_truncated_text_isSet = true;
}

bool OAISubmission::is_truncated_text_Set() const{
    return m_truncated_text_isSet;
}

bool OAISubmission::is_truncated_text_Valid() const{
    return m_truncated_text_isValid;
}

bool OAISubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanent_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expired_isValid && m_id_isValid && m_state_isValid && m_test_isValid && true;
}

} // namespace OpenAPI
