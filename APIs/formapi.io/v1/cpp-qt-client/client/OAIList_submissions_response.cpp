/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_submissions_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_submissions_response::OAIList_submissions_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_submissions_response::OAIList_submissions_response() {
    this->initializeModel();
}

OAIList_submissions_response::~OAIList_submissions_response() {}

void OAIList_submissions_response::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_cursor_isSet = false;
    m_next_cursor_isValid = false;

    m_submissions_isSet = false;
    m_submissions_isValid = false;
}

void OAIList_submissions_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_submissions_response::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_cursor_isValid = ::OpenAPI::fromJsonValue(m_next_cursor, json[QString("next_cursor")]);
    m_next_cursor_isSet = !json[QString("next_cursor")].isNull() && m_next_cursor_isValid;

    m_submissions_isValid = ::OpenAPI::fromJsonValue(m_submissions, json[QString("submissions")]);
    m_submissions_isSet = !json[QString("submissions")].isNull() && m_submissions_isValid;
}

QString OAIList_submissions_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_submissions_response::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_cursor_isSet) {
        obj.insert(QString("next_cursor"), ::OpenAPI::toJsonValue(m_next_cursor));
    }
    if (m_submissions.size() > 0) {
        obj.insert(QString("submissions"), ::OpenAPI::toJsonValue(m_submissions));
    }
    return obj;
}

double OAIList_submissions_response::getLimit() const {
    return m_limit;
}
void OAIList_submissions_response::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIList_submissions_response::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIList_submissions_response::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIList_submissions_response::getNextCursor() const {
    return m_next_cursor;
}
void OAIList_submissions_response::setNextCursor(const QString &next_cursor) {
    m_next_cursor = next_cursor;
    m_next_cursor_isSet = true;
}

bool OAIList_submissions_response::is_next_cursor_Set() const{
    return m_next_cursor_isSet;
}

bool OAIList_submissions_response::is_next_cursor_Valid() const{
    return m_next_cursor_isValid;
}

QList<OAISubmission> OAIList_submissions_response::getSubmissions() const {
    return m_submissions;
}
void OAIList_submissions_response::setSubmissions(const QList<OAISubmission> &submissions) {
    m_submissions = submissions;
    m_submissions_isSet = true;
}

bool OAIList_submissions_response::is_submissions_Set() const{
    return m_submissions_isSet;
}

bool OAIList_submissions_response::is_submissions_Valid() const{
    return m_submissions_isValid;
}

bool OAIList_submissions_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_submissions_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_limit_isValid && m_next_cursor_isValid && m_submissions_isValid && true;
}

} // namespace OpenAPI
