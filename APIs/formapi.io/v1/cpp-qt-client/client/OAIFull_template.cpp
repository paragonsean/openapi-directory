/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFull_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFull_template::OAIFull_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFull_template::OAIFull_template() {
    this->initializeModel();
}

OAIFull_template::~OAIFull_template() {}

void OAIFull_template::initializeModel() {

    m_allow_additional_properties_isSet = false;
    m_allow_additional_properties_isValid = false;

    m_defaults_isSet = false;
    m_defaults_isValid = false;

    m_demo_isSet = false;
    m_demo_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_filename_isSet = false;
    m_document_filename_isValid = false;

    m_document_md5_isSet = false;
    m_document_md5_isValid = false;

    m_document_parse_error_isSet = false;
    m_document_parse_error_isValid = false;

    m_document_processed_isSet = false;
    m_document_processed_isValid = false;

    m_document_state_isSet = false;
    m_document_state_isValid = false;

    m_document_url_isSet = false;
    m_document_url_isValid = false;

    m_editable_submissions_isSet = false;
    m_editable_submissions_isValid = false;

    m_embed_domains_isSet = false;
    m_embed_domains_isValid = false;

    m_encrypt_pdfs_isSet = false;
    m_encrypt_pdfs_isValid = false;

    m_encrypt_pdfs_password_isSet = false;
    m_encrypt_pdfs_password_isValid = false;

    m_expiration_interval_isSet = false;
    m_expiration_interval_isValid = false;

    m_expire_after_isSet = false;
    m_expire_after_isValid = false;

    m_expire_submissions_isSet = false;
    m_expire_submissions_isValid = false;

    m_field_order_isSet = false;
    m_field_order_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_first_template_isSet = false;
    m_first_template_isValid = false;

    m_footer_html_isSet = false;
    m_footer_html_isValid = false;

    m_header_html_isSet = false;
    m_header_html_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;

    m_page_dimensions_isSet = false;
    m_page_dimensions_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_permanent_document_url_isSet = false;
    m_permanent_document_url_isValid = false;

    m_public_submissions_isSet = false;
    m_public_submissions_isValid = false;

    m_public_web_form_isSet = false;
    m_public_web_form_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_scss_isSet = false;
    m_scss_isValid = false;

    m_shared_field_data_isSet = false;
    m_shared_field_data_isValid = false;

    m_slack_webhook_url_isSet = false;
    m_slack_webhook_url_isValid = false;

    m_template_type_isSet = false;
    m_template_type_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIFull_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFull_template::fromJsonObject(QJsonObject json) {

    m_allow_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_allow_additional_properties, json[QString("allow_additional_properties")]);
    m_allow_additional_properties_isSet = !json[QString("allow_additional_properties")].isNull() && m_allow_additional_properties_isValid;

    m_defaults_isValid = ::OpenAPI::fromJsonValue(m_defaults, json[QString("defaults")]);
    m_defaults_isSet = !json[QString("defaults")].isNull() && m_defaults_isValid;

    m_demo_isValid = ::OpenAPI::fromJsonValue(m_demo, json[QString("demo")]);
    m_demo_isSet = !json[QString("demo")].isNull() && m_demo_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_filename_isValid = ::OpenAPI::fromJsonValue(m_document_filename, json[QString("document_filename")]);
    m_document_filename_isSet = !json[QString("document_filename")].isNull() && m_document_filename_isValid;

    m_document_md5_isValid = ::OpenAPI::fromJsonValue(m_document_md5, json[QString("document_md5")]);
    m_document_md5_isSet = !json[QString("document_md5")].isNull() && m_document_md5_isValid;

    m_document_parse_error_isValid = ::OpenAPI::fromJsonValue(m_document_parse_error, json[QString("document_parse_error")]);
    m_document_parse_error_isSet = !json[QString("document_parse_error")].isNull() && m_document_parse_error_isValid;

    m_document_processed_isValid = ::OpenAPI::fromJsonValue(m_document_processed, json[QString("document_processed")]);
    m_document_processed_isSet = !json[QString("document_processed")].isNull() && m_document_processed_isValid;

    m_document_state_isValid = ::OpenAPI::fromJsonValue(m_document_state, json[QString("document_state")]);
    m_document_state_isSet = !json[QString("document_state")].isNull() && m_document_state_isValid;

    m_document_url_isValid = ::OpenAPI::fromJsonValue(m_document_url, json[QString("document_url")]);
    m_document_url_isSet = !json[QString("document_url")].isNull() && m_document_url_isValid;

    m_editable_submissions_isValid = ::OpenAPI::fromJsonValue(m_editable_submissions, json[QString("editable_submissions")]);
    m_editable_submissions_isSet = !json[QString("editable_submissions")].isNull() && m_editable_submissions_isValid;

    m_embed_domains_isValid = ::OpenAPI::fromJsonValue(m_embed_domains, json[QString("embed_domains")]);
    m_embed_domains_isSet = !json[QString("embed_domains")].isNull() && m_embed_domains_isValid;

    m_encrypt_pdfs_isValid = ::OpenAPI::fromJsonValue(m_encrypt_pdfs, json[QString("encrypt_pdfs")]);
    m_encrypt_pdfs_isSet = !json[QString("encrypt_pdfs")].isNull() && m_encrypt_pdfs_isValid;

    m_encrypt_pdfs_password_isValid = ::OpenAPI::fromJsonValue(m_encrypt_pdfs_password, json[QString("encrypt_pdfs_password")]);
    m_encrypt_pdfs_password_isSet = !json[QString("encrypt_pdfs_password")].isNull() && m_encrypt_pdfs_password_isValid;

    m_expiration_interval_isValid = ::OpenAPI::fromJsonValue(m_expiration_interval, json[QString("expiration_interval")]);
    m_expiration_interval_isSet = !json[QString("expiration_interval")].isNull() && m_expiration_interval_isValid;

    m_expire_after_isValid = ::OpenAPI::fromJsonValue(m_expire_after, json[QString("expire_after")]);
    m_expire_after_isSet = !json[QString("expire_after")].isNull() && m_expire_after_isValid;

    m_expire_submissions_isValid = ::OpenAPI::fromJsonValue(m_expire_submissions, json[QString("expire_submissions")]);
    m_expire_submissions_isSet = !json[QString("expire_submissions")].isNull() && m_expire_submissions_isValid;

    if(json["field_order"].isArray()){
        auto arr = json["field_order"].toArray();
        m_field_order_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_field_order_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_field_order_isSet = !jval.isNull() && m_field_order_isValid;
                m_field_order.push_back(item);
            }
        }
    }

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_first_template_isValid = ::OpenAPI::fromJsonValue(m_first_template, json[QString("first_template")]);
    m_first_template_isSet = !json[QString("first_template")].isNull() && m_first_template_isValid;

    m_footer_html_isValid = ::OpenAPI::fromJsonValue(m_footer_html, json[QString("footer_html")]);
    m_footer_html_isSet = !json[QString("footer_html")].isNull() && m_footer_html_isValid;

    m_header_html_isValid = ::OpenAPI::fromJsonValue(m_header_html, json[QString("header_html")]);
    m_header_html_isSet = !json[QString("header_html")].isNull() && m_header_html_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("page_count")]);
    m_page_count_isSet = !json[QString("page_count")].isNull() && m_page_count_isValid;

    if(json["page_dimensions"].isArray()){
        auto arr = json["page_dimensions"].toArray();
        m_page_dimensions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_page_dimensions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_page_dimensions_isSet = !jval.isNull() && m_page_dimensions_isValid;
                m_page_dimensions.push_back(item);
            }
        }
    }

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parent_folder_id")]);
    m_parent_folder_id_isSet = !json[QString("parent_folder_id")].isNull() && m_parent_folder_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_permanent_document_url_isValid = ::OpenAPI::fromJsonValue(m_permanent_document_url, json[QString("permanent_document_url")]);
    m_permanent_document_url_isSet = !json[QString("permanent_document_url")].isNull() && m_permanent_document_url_isValid;

    m_public_submissions_isValid = ::OpenAPI::fromJsonValue(m_public_submissions, json[QString("public_submissions")]);
    m_public_submissions_isSet = !json[QString("public_submissions")].isNull() && m_public_submissions_isValid;

    m_public_web_form_isValid = ::OpenAPI::fromJsonValue(m_public_web_form, json[QString("public_web_form")]);
    m_public_web_form_isSet = !json[QString("public_web_form")].isNull() && m_public_web_form_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_scss_isValid = ::OpenAPI::fromJsonValue(m_scss, json[QString("scss")]);
    m_scss_isSet = !json[QString("scss")].isNull() && m_scss_isValid;

    m_shared_field_data_isValid = ::OpenAPI::fromJsonValue(m_shared_field_data, json[QString("shared_field_data")]);
    m_shared_field_data_isSet = !json[QString("shared_field_data")].isNull() && m_shared_field_data_isValid;

    m_slack_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_slack_webhook_url, json[QString("slack_webhook_url")]);
    m_slack_webhook_url_isSet = !json[QString("slack_webhook_url")].isNull() && m_slack_webhook_url_isValid;

    m_template_type_isValid = ::OpenAPI::fromJsonValue(m_template_type, json[QString("template_type")]);
    m_template_type_isSet = !json[QString("template_type")].isNull() && m_template_type_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIFull_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFull_template::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_additional_properties_isSet) {
        obj.insert(QString("allow_additional_properties"), ::OpenAPI::toJsonValue(m_allow_additional_properties));
    }
    if (m_defaults.isSet()) {
        obj.insert(QString("defaults"), ::OpenAPI::toJsonValue(m_defaults));
    }
    if (m_demo_isSet) {
        obj.insert(QString("demo"), ::OpenAPI::toJsonValue(m_demo));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_filename_isSet) {
        obj.insert(QString("document_filename"), ::OpenAPI::toJsonValue(m_document_filename));
    }
    if (m_document_md5_isSet) {
        obj.insert(QString("document_md5"), ::OpenAPI::toJsonValue(m_document_md5));
    }
    if (m_document_parse_error_isSet) {
        obj.insert(QString("document_parse_error"), ::OpenAPI::toJsonValue(m_document_parse_error));
    }
    if (m_document_processed_isSet) {
        obj.insert(QString("document_processed"), ::OpenAPI::toJsonValue(m_document_processed));
    }
    if (m_document_state_isSet) {
        obj.insert(QString("document_state"), ::OpenAPI::toJsonValue(m_document_state));
    }
    if (m_document_url_isSet) {
        obj.insert(QString("document_url"), ::OpenAPI::toJsonValue(m_document_url));
    }
    if (m_editable_submissions_isSet) {
        obj.insert(QString("editable_submissions"), ::OpenAPI::toJsonValue(m_editable_submissions));
    }
    if (m_embed_domains.size() > 0) {
        obj.insert(QString("embed_domains"), ::OpenAPI::toJsonValue(m_embed_domains));
    }
    if (m_encrypt_pdfs_isSet) {
        obj.insert(QString("encrypt_pdfs"), ::OpenAPI::toJsonValue(m_encrypt_pdfs));
    }
    if (m_encrypt_pdfs_password_isSet) {
        obj.insert(QString("encrypt_pdfs_password"), ::OpenAPI::toJsonValue(m_encrypt_pdfs_password));
    }
    if (m_expiration_interval_isSet) {
        obj.insert(QString("expiration_interval"), ::OpenAPI::toJsonValue(m_expiration_interval));
    }
    if (m_expire_after_isSet) {
        obj.insert(QString("expire_after"), ::OpenAPI::toJsonValue(m_expire_after));
    }
    if (m_expire_submissions_isSet) {
        obj.insert(QString("expire_submissions"), ::OpenAPI::toJsonValue(m_expire_submissions));
    }
    if (m_field_order.size() > 0) {
        
        obj.insert(QString("field_order"), toJsonValue(m_field_order));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_first_template_isSet) {
        obj.insert(QString("first_template"), ::OpenAPI::toJsonValue(m_first_template));
    }
    if (m_footer_html_isSet) {
        obj.insert(QString("footer_html"), ::OpenAPI::toJsonValue(m_footer_html));
    }
    if (m_header_html_isSet) {
        obj.insert(QString("header_html"), ::OpenAPI::toJsonValue(m_header_html));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("page_count"), ::OpenAPI::toJsonValue(m_page_count));
    }
    if (m_page_dimensions.size() > 0) {
        
        obj.insert(QString("page_dimensions"), toJsonValue(m_page_dimensions));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parent_folder_id"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_permanent_document_url_isSet) {
        obj.insert(QString("permanent_document_url"), ::OpenAPI::toJsonValue(m_permanent_document_url));
    }
    if (m_public_submissions_isSet) {
        obj.insert(QString("public_submissions"), ::OpenAPI::toJsonValue(m_public_submissions));
    }
    if (m_public_web_form_isSet) {
        obj.insert(QString("public_web_form"), ::OpenAPI::toJsonValue(m_public_web_form));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_scss_isSet) {
        obj.insert(QString("scss"), ::OpenAPI::toJsonValue(m_scss));
    }
    if (m_shared_field_data_isSet) {
        obj.insert(QString("shared_field_data"), ::OpenAPI::toJsonValue(m_shared_field_data));
    }
    if (m_slack_webhook_url_isSet) {
        obj.insert(QString("slack_webhook_url"), ::OpenAPI::toJsonValue(m_slack_webhook_url));
    }
    if (m_template_type_isSet) {
        obj.insert(QString("template_type"), ::OpenAPI::toJsonValue(m_template_type));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

bool OAIFull_template::isAllowAdditionalProperties() const {
    return m_allow_additional_properties;
}
void OAIFull_template::setAllowAdditionalProperties(const bool &allow_additional_properties) {
    m_allow_additional_properties = allow_additional_properties;
    m_allow_additional_properties_isSet = true;
}

bool OAIFull_template::is_allow_additional_properties_Set() const{
    return m_allow_additional_properties_isSet;
}

bool OAIFull_template::is_allow_additional_properties_Valid() const{
    return m_allow_additional_properties_isValid;
}

OAIFull_template_defaults OAIFull_template::getDefaults() const {
    return m_defaults;
}
void OAIFull_template::setDefaults(const OAIFull_template_defaults &defaults) {
    m_defaults = defaults;
    m_defaults_isSet = true;
}

bool OAIFull_template::is_defaults_Set() const{
    return m_defaults_isSet;
}

bool OAIFull_template::is_defaults_Valid() const{
    return m_defaults_isValid;
}

bool OAIFull_template::isDemo() const {
    return m_demo;
}
void OAIFull_template::setDemo(const bool &demo) {
    m_demo = demo;
    m_demo_isSet = true;
}

bool OAIFull_template::is_demo_Set() const{
    return m_demo_isSet;
}

bool OAIFull_template::is_demo_Valid() const{
    return m_demo_isValid;
}

QString OAIFull_template::getDescription() const {
    return m_description;
}
void OAIFull_template::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFull_template::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFull_template::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFull_template::getDocumentFilename() const {
    return m_document_filename;
}
void OAIFull_template::setDocumentFilename(const QString &document_filename) {
    m_document_filename = document_filename;
    m_document_filename_isSet = true;
}

bool OAIFull_template::is_document_filename_Set() const{
    return m_document_filename_isSet;
}

bool OAIFull_template::is_document_filename_Valid() const{
    return m_document_filename_isValid;
}

QString OAIFull_template::getDocumentMd5() const {
    return m_document_md5;
}
void OAIFull_template::setDocumentMd5(const QString &document_md5) {
    m_document_md5 = document_md5;
    m_document_md5_isSet = true;
}

bool OAIFull_template::is_document_md5_Set() const{
    return m_document_md5_isSet;
}

bool OAIFull_template::is_document_md5_Valid() const{
    return m_document_md5_isValid;
}

bool OAIFull_template::isDocumentParseError() const {
    return m_document_parse_error;
}
void OAIFull_template::setDocumentParseError(const bool &document_parse_error) {
    m_document_parse_error = document_parse_error;
    m_document_parse_error_isSet = true;
}

bool OAIFull_template::is_document_parse_error_Set() const{
    return m_document_parse_error_isSet;
}

bool OAIFull_template::is_document_parse_error_Valid() const{
    return m_document_parse_error_isValid;
}

bool OAIFull_template::isDocumentProcessed() const {
    return m_document_processed;
}
void OAIFull_template::setDocumentProcessed(const bool &document_processed) {
    m_document_processed = document_processed;
    m_document_processed_isSet = true;
}

bool OAIFull_template::is_document_processed_Set() const{
    return m_document_processed_isSet;
}

bool OAIFull_template::is_document_processed_Valid() const{
    return m_document_processed_isValid;
}

QString OAIFull_template::getDocumentState() const {
    return m_document_state;
}
void OAIFull_template::setDocumentState(const QString &document_state) {
    m_document_state = document_state;
    m_document_state_isSet = true;
}

bool OAIFull_template::is_document_state_Set() const{
    return m_document_state_isSet;
}

bool OAIFull_template::is_document_state_Valid() const{
    return m_document_state_isValid;
}

QString OAIFull_template::getDocumentUrl() const {
    return m_document_url;
}
void OAIFull_template::setDocumentUrl(const QString &document_url) {
    m_document_url = document_url;
    m_document_url_isSet = true;
}

bool OAIFull_template::is_document_url_Set() const{
    return m_document_url_isSet;
}

bool OAIFull_template::is_document_url_Valid() const{
    return m_document_url_isValid;
}

bool OAIFull_template::isEditableSubmissions() const {
    return m_editable_submissions;
}
void OAIFull_template::setEditableSubmissions(const bool &editable_submissions) {
    m_editable_submissions = editable_submissions;
    m_editable_submissions_isSet = true;
}

bool OAIFull_template::is_editable_submissions_Set() const{
    return m_editable_submissions_isSet;
}

bool OAIFull_template::is_editable_submissions_Valid() const{
    return m_editable_submissions_isValid;
}

QList<QString> OAIFull_template::getEmbedDomains() const {
    return m_embed_domains;
}
void OAIFull_template::setEmbedDomains(const QList<QString> &embed_domains) {
    m_embed_domains = embed_domains;
    m_embed_domains_isSet = true;
}

bool OAIFull_template::is_embed_domains_Set() const{
    return m_embed_domains_isSet;
}

bool OAIFull_template::is_embed_domains_Valid() const{
    return m_embed_domains_isValid;
}

bool OAIFull_template::isEncryptPdfs() const {
    return m_encrypt_pdfs;
}
void OAIFull_template::setEncryptPdfs(const bool &encrypt_pdfs) {
    m_encrypt_pdfs = encrypt_pdfs;
    m_encrypt_pdfs_isSet = true;
}

bool OAIFull_template::is_encrypt_pdfs_Set() const{
    return m_encrypt_pdfs_isSet;
}

bool OAIFull_template::is_encrypt_pdfs_Valid() const{
    return m_encrypt_pdfs_isValid;
}

QString OAIFull_template::getEncryptPdfsPassword() const {
    return m_encrypt_pdfs_password;
}
void OAIFull_template::setEncryptPdfsPassword(const QString &encrypt_pdfs_password) {
    m_encrypt_pdfs_password = encrypt_pdfs_password;
    m_encrypt_pdfs_password_isSet = true;
}

bool OAIFull_template::is_encrypt_pdfs_password_Set() const{
    return m_encrypt_pdfs_password_isSet;
}

bool OAIFull_template::is_encrypt_pdfs_password_Valid() const{
    return m_encrypt_pdfs_password_isValid;
}

QString OAIFull_template::getExpirationInterval() const {
    return m_expiration_interval;
}
void OAIFull_template::setExpirationInterval(const QString &expiration_interval) {
    m_expiration_interval = expiration_interval;
    m_expiration_interval_isSet = true;
}

bool OAIFull_template::is_expiration_interval_Set() const{
    return m_expiration_interval_isSet;
}

bool OAIFull_template::is_expiration_interval_Valid() const{
    return m_expiration_interval_isValid;
}

double OAIFull_template::getExpireAfter() const {
    return m_expire_after;
}
void OAIFull_template::setExpireAfter(const double &expire_after) {
    m_expire_after = expire_after;
    m_expire_after_isSet = true;
}

bool OAIFull_template::is_expire_after_Set() const{
    return m_expire_after_isSet;
}

bool OAIFull_template::is_expire_after_Valid() const{
    return m_expire_after_isValid;
}

bool OAIFull_template::isExpireSubmissions() const {
    return m_expire_submissions;
}
void OAIFull_template::setExpireSubmissions(const bool &expire_submissions) {
    m_expire_submissions = expire_submissions;
    m_expire_submissions_isSet = true;
}

bool OAIFull_template::is_expire_submissions_Set() const{
    return m_expire_submissions_isSet;
}

bool OAIFull_template::is_expire_submissions_Valid() const{
    return m_expire_submissions_isValid;
}

QList<QList<double>> OAIFull_template::getFieldOrder() const {
    return m_field_order;
}
void OAIFull_template::setFieldOrder(const QList<QList<double>> &field_order) {
    m_field_order = field_order;
    m_field_order_isSet = true;
}

bool OAIFull_template::is_field_order_Set() const{
    return m_field_order_isSet;
}

bool OAIFull_template::is_field_order_Valid() const{
    return m_field_order_isValid;
}

OAIObject OAIFull_template::getFields() const {
    return m_fields;
}
void OAIFull_template::setFields(const OAIObject &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIFull_template::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIFull_template::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIFull_template::isFirstTemplate() const {
    return m_first_template;
}
void OAIFull_template::setFirstTemplate(const bool &first_template) {
    m_first_template = first_template;
    m_first_template_isSet = true;
}

bool OAIFull_template::is_first_template_Set() const{
    return m_first_template_isSet;
}

bool OAIFull_template::is_first_template_Valid() const{
    return m_first_template_isValid;
}

QString OAIFull_template::getFooterHtml() const {
    return m_footer_html;
}
void OAIFull_template::setFooterHtml(const QString &footer_html) {
    m_footer_html = footer_html;
    m_footer_html_isSet = true;
}

bool OAIFull_template::is_footer_html_Set() const{
    return m_footer_html_isSet;
}

bool OAIFull_template::is_footer_html_Valid() const{
    return m_footer_html_isValid;
}

QString OAIFull_template::getHeaderHtml() const {
    return m_header_html;
}
void OAIFull_template::setHeaderHtml(const QString &header_html) {
    m_header_html = header_html;
    m_header_html_isSet = true;
}

bool OAIFull_template::is_header_html_Set() const{
    return m_header_html_isSet;
}

bool OAIFull_template::is_header_html_Valid() const{
    return m_header_html_isValid;
}

QString OAIFull_template::getHtml() const {
    return m_html;
}
void OAIFull_template::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIFull_template::is_html_Set() const{
    return m_html_isSet;
}

bool OAIFull_template::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIFull_template::getId() const {
    return m_id;
}
void OAIFull_template::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFull_template::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFull_template::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFull_template::isLocked() const {
    return m_locked;
}
void OAIFull_template::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIFull_template::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIFull_template::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIFull_template::getName() const {
    return m_name;
}
void OAIFull_template::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFull_template::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFull_template::is_name_Valid() const{
    return m_name_isValid;
}

double OAIFull_template::getPageCount() const {
    return m_page_count;
}
void OAIFull_template::setPageCount(const double &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIFull_template::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIFull_template::is_page_count_Valid() const{
    return m_page_count_isValid;
}

QList<QList<double>> OAIFull_template::getPageDimensions() const {
    return m_page_dimensions;
}
void OAIFull_template::setPageDimensions(const QList<QList<double>> &page_dimensions) {
    m_page_dimensions = page_dimensions;
    m_page_dimensions_isSet = true;
}

bool OAIFull_template::is_page_dimensions_Set() const{
    return m_page_dimensions_isSet;
}

bool OAIFull_template::is_page_dimensions_Valid() const{
    return m_page_dimensions_isValid;
}

QString OAIFull_template::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIFull_template::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIFull_template::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIFull_template::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

QString OAIFull_template::getPath() const {
    return m_path;
}
void OAIFull_template::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFull_template::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFull_template::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIFull_template::getPermanentDocumentUrl() const {
    return m_permanent_document_url;
}
void OAIFull_template::setPermanentDocumentUrl(const QString &permanent_document_url) {
    m_permanent_document_url = permanent_document_url;
    m_permanent_document_url_isSet = true;
}

bool OAIFull_template::is_permanent_document_url_Set() const{
    return m_permanent_document_url_isSet;
}

bool OAIFull_template::is_permanent_document_url_Valid() const{
    return m_permanent_document_url_isValid;
}

bool OAIFull_template::isPublicSubmissions() const {
    return m_public_submissions;
}
void OAIFull_template::setPublicSubmissions(const bool &public_submissions) {
    m_public_submissions = public_submissions;
    m_public_submissions_isSet = true;
}

bool OAIFull_template::is_public_submissions_Set() const{
    return m_public_submissions_isSet;
}

bool OAIFull_template::is_public_submissions_Valid() const{
    return m_public_submissions_isValid;
}

bool OAIFull_template::isPublicWebForm() const {
    return m_public_web_form;
}
void OAIFull_template::setPublicWebForm(const bool &public_web_form) {
    m_public_web_form = public_web_form;
    m_public_web_form_isSet = true;
}

bool OAIFull_template::is_public_web_form_Set() const{
    return m_public_web_form_isSet;
}

bool OAIFull_template::is_public_web_form_Valid() const{
    return m_public_web_form_isValid;
}

QString OAIFull_template::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIFull_template::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIFull_template::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIFull_template::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIFull_template::getScss() const {
    return m_scss;
}
void OAIFull_template::setScss(const QString &scss) {
    m_scss = scss;
    m_scss_isSet = true;
}

bool OAIFull_template::is_scss_Set() const{
    return m_scss_isSet;
}

bool OAIFull_template::is_scss_Valid() const{
    return m_scss_isValid;
}

OAIObject OAIFull_template::getSharedFieldData() const {
    return m_shared_field_data;
}
void OAIFull_template::setSharedFieldData(const OAIObject &shared_field_data) {
    m_shared_field_data = shared_field_data;
    m_shared_field_data_isSet = true;
}

bool OAIFull_template::is_shared_field_data_Set() const{
    return m_shared_field_data_isSet;
}

bool OAIFull_template::is_shared_field_data_Valid() const{
    return m_shared_field_data_isValid;
}

QString OAIFull_template::getSlackWebhookUrl() const {
    return m_slack_webhook_url;
}
void OAIFull_template::setSlackWebhookUrl(const QString &slack_webhook_url) {
    m_slack_webhook_url = slack_webhook_url;
    m_slack_webhook_url_isSet = true;
}

bool OAIFull_template::is_slack_webhook_url_Set() const{
    return m_slack_webhook_url_isSet;
}

bool OAIFull_template::is_slack_webhook_url_Valid() const{
    return m_slack_webhook_url_isValid;
}

QString OAIFull_template::getTemplateType() const {
    return m_template_type;
}
void OAIFull_template::setTemplateType(const QString &template_type) {
    m_template_type = template_type;
    m_template_type_isSet = true;
}

bool OAIFull_template::is_template_type_Set() const{
    return m_template_type_isSet;
}

bool OAIFull_template::is_template_type_Valid() const{
    return m_template_type_isValid;
}

QString OAIFull_template::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIFull_template::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIFull_template::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIFull_template::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIFull_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_demo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_parse_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editable_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypt_pdfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypt_pdfs_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanent_document_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_submissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_web_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_field_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFull_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_additional_properties_isValid && m_defaults_isValid && m_demo_isValid && m_description_isValid && m_document_filename_isValid && m_document_md5_isValid && m_document_parse_error_isValid && m_document_processed_isValid && m_document_state_isValid && m_document_url_isValid && m_editable_submissions_isValid && m_embed_domains_isValid && m_encrypt_pdfs_isValid && m_encrypt_pdfs_password_isValid && m_expiration_interval_isValid && m_expire_after_isValid && m_expire_submissions_isValid && m_field_order_isValid && m_fields_isValid && m_first_template_isValid && m_footer_html_isValid && m_header_html_isValid && m_html_isValid && m_id_isValid && m_locked_isValid && m_name_isValid && m_page_count_isValid && m_page_dimensions_isValid && m_parent_folder_id_isValid && m_path_isValid && m_permanent_document_url_isValid && m_public_submissions_isValid && m_public_web_form_isValid && m_redirect_url_isValid && m_scss_isValid && m_shared_field_data_isValid && m_slack_webhook_url_isValid && m_template_type_isValid && m_webhook_url_isValid && true;
}

} // namespace OpenAPI
