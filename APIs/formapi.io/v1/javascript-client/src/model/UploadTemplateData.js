/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadTemplateDataDocument from './UploadTemplateDataDocument';

/**
 * The UploadTemplateData model module.
 * @module model/UploadTemplateData
 * @version v1
 */
class UploadTemplateData {
    /**
     * Constructs a new <code>UploadTemplateData</code>.
     * @alias module:model/UploadTemplateData
     * @param name {String} 
     */
    constructor(name) { 
        
        UploadTemplateData.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>UploadTemplateData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadTemplateData} obj Optional instance to populate.
     * @return {module:model/UploadTemplateData} The populated <code>UploadTemplateData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadTemplateData();

            if (data.hasOwnProperty('allow_additional_properties')) {
                obj['allow_additional_properties'] = ApiClient.convertToType(data['allow_additional_properties'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = UploadTemplateDataDocument.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('editable_submissions')) {
                obj['editable_submissions'] = ApiClient.convertToType(data['editable_submissions'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration_interval')) {
                obj['expiration_interval'] = ApiClient.convertToType(data['expiration_interval'], 'String');
            }
            if (data.hasOwnProperty('expire_after')) {
                obj['expire_after'] = ApiClient.convertToType(data['expire_after'], 'Number');
            }
            if (data.hasOwnProperty('expire_submissions')) {
                obj['expire_submissions'] = ApiClient.convertToType(data['expire_submissions'], 'Boolean');
            }
            if (data.hasOwnProperty('footer_html')) {
                obj['footer_html'] = ApiClient.convertToType(data['footer_html'], 'String');
            }
            if (data.hasOwnProperty('header_html')) {
                obj['header_html'] = ApiClient.convertToType(data['header_html'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('public_submissions')) {
                obj['public_submissions'] = ApiClient.convertToType(data['public_submissions'], 'Boolean');
            }
            if (data.hasOwnProperty('public_web_form')) {
                obj['public_web_form'] = ApiClient.convertToType(data['public_web_form'], 'Boolean');
            }
            if (data.hasOwnProperty('redirect_url')) {
                obj['redirect_url'] = ApiClient.convertToType(data['redirect_url'], 'String');
            }
            if (data.hasOwnProperty('scss')) {
                obj['scss'] = ApiClient.convertToType(data['scss'], 'String');
            }
            if (data.hasOwnProperty('slack_webhook_url')) {
                obj['slack_webhook_url'] = ApiClient.convertToType(data['slack_webhook_url'], 'String');
            }
            if (data.hasOwnProperty('template_type')) {
                obj['template_type'] = ApiClient.convertToType(data['template_type'], 'String');
            }
            if (data.hasOwnProperty('webhook_url')) {
                obj['webhook_url'] = ApiClient.convertToType(data['webhook_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadTemplateData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadTemplateData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadTemplateData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          UploadTemplateDataDocument.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['expiration_interval'] && !(typeof data['expiration_interval'] === 'string' || data['expiration_interval'] instanceof String)) {
            throw new Error("Expected the field `expiration_interval` to be a primitive type in the JSON string but got " + data['expiration_interval']);
        }
        // ensure the json data is a string
        if (data['footer_html'] && !(typeof data['footer_html'] === 'string' || data['footer_html'] instanceof String)) {
            throw new Error("Expected the field `footer_html` to be a primitive type in the JSON string but got " + data['footer_html']);
        }
        // ensure the json data is a string
        if (data['header_html'] && !(typeof data['header_html'] === 'string' || data['header_html'] instanceof String)) {
            throw new Error("Expected the field `header_html` to be a primitive type in the JSON string but got " + data['header_html']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['redirect_url'] && !(typeof data['redirect_url'] === 'string' || data['redirect_url'] instanceof String)) {
            throw new Error("Expected the field `redirect_url` to be a primitive type in the JSON string but got " + data['redirect_url']);
        }
        // ensure the json data is a string
        if (data['scss'] && !(typeof data['scss'] === 'string' || data['scss'] instanceof String)) {
            throw new Error("Expected the field `scss` to be a primitive type in the JSON string but got " + data['scss']);
        }
        // ensure the json data is a string
        if (data['slack_webhook_url'] && !(typeof data['slack_webhook_url'] === 'string' || data['slack_webhook_url'] instanceof String)) {
            throw new Error("Expected the field `slack_webhook_url` to be a primitive type in the JSON string but got " + data['slack_webhook_url']);
        }
        // ensure the json data is a string
        if (data['template_type'] && !(typeof data['template_type'] === 'string' || data['template_type'] instanceof String)) {
            throw new Error("Expected the field `template_type` to be a primitive type in the JSON string but got " + data['template_type']);
        }
        // ensure the json data is a string
        if (data['webhook_url'] && !(typeof data['webhook_url'] === 'string' || data['webhook_url'] instanceof String)) {
            throw new Error("Expected the field `webhook_url` to be a primitive type in the JSON string but got " + data['webhook_url']);
        }

        return true;
    }


}

UploadTemplateData.RequiredProperties = ["name"];

/**
 * @member {Boolean} allow_additional_properties
 */
UploadTemplateData.prototype['allow_additional_properties'] = undefined;

/**
 * @member {String} description
 */
UploadTemplateData.prototype['description'] = undefined;

/**
 * @member {module:model/UploadTemplateDataDocument} document
 */
UploadTemplateData.prototype['document'] = undefined;

/**
 * @member {Boolean} editable_submissions
 */
UploadTemplateData.prototype['editable_submissions'] = undefined;

/**
 * @member {module:model/UploadTemplateData.ExpirationIntervalEnum} expiration_interval
 */
UploadTemplateData.prototype['expiration_interval'] = undefined;

/**
 * @member {Number} expire_after
 */
UploadTemplateData.prototype['expire_after'] = undefined;

/**
 * @member {Boolean} expire_submissions
 */
UploadTemplateData.prototype['expire_submissions'] = undefined;

/**
 * @member {String} footer_html
 */
UploadTemplateData.prototype['footer_html'] = undefined;

/**
 * @member {String} header_html
 */
UploadTemplateData.prototype['header_html'] = undefined;

/**
 * @member {String} html
 */
UploadTemplateData.prototype['html'] = undefined;

/**
 * @member {String} name
 */
UploadTemplateData.prototype['name'] = undefined;

/**
 * @member {Boolean} public_submissions
 */
UploadTemplateData.prototype['public_submissions'] = undefined;

/**
 * @member {Boolean} public_web_form
 */
UploadTemplateData.prototype['public_web_form'] = undefined;

/**
 * @member {String} redirect_url
 */
UploadTemplateData.prototype['redirect_url'] = undefined;

/**
 * @member {String} scss
 */
UploadTemplateData.prototype['scss'] = undefined;

/**
 * @member {String} slack_webhook_url
 */
UploadTemplateData.prototype['slack_webhook_url'] = undefined;

/**
 * @member {module:model/UploadTemplateData.TemplateTypeEnum} template_type
 */
UploadTemplateData.prototype['template_type'] = undefined;

/**
 * @member {String} webhook_url
 */
UploadTemplateData.prototype['webhook_url'] = undefined;





/**
 * Allowed values for the <code>expiration_interval</code> property.
 * @enum {String}
 * @readonly
 */
UploadTemplateData['ExpirationIntervalEnum'] = {

    /**
     * value: "minutes"
     * @const
     */
    "minutes": "minutes",

    /**
     * value: "hours"
     * @const
     */
    "hours": "hours",

    /**
     * value: "days"
     * @const
     */
    "days": "days"
};


/**
 * Allowed values for the <code>template_type</code> property.
 * @enum {String}
 * @readonly
 */
UploadTemplateData['TemplateTypeEnum'] = {

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf",

    /**
     * value: "html"
     * @const
     */
    "html": "html"
};



export default UploadTemplateData;

