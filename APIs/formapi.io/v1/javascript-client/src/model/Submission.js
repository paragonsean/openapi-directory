/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubmissionAction from './SubmissionAction';
import SubmissionDataRequest from './SubmissionDataRequest';

/**
 * The Submission model module.
 * @module model/Submission
 * @version v1
 */
class Submission {
    /**
     * Constructs a new <code>Submission</code>.
     * @alias module:model/Submission
     * @param expired {Boolean} 
     * @param id {String} 
     * @param state {module:model/Submission.StateEnum} 
     * @param test {Boolean} 
     */
    constructor(expired, id, state, test) { 
        
        Submission.initialize(this, expired, id, state, test);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expired, id, state, test) { 
        obj['expired'] = expired;
        obj['id'] = id;
        obj['state'] = state;
        obj['test'] = test;
    }

    /**
     * Constructs a <code>Submission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Submission} obj Optional instance to populate.
     * @return {module:model/Submission} The populated <code>Submission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Submission();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [SubmissionAction]);
            }
            if (data.hasOwnProperty('batch_id')) {
                obj['batch_id'] = ApiClient.convertToType(data['batch_id'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('data_requests')) {
                obj['data_requests'] = ApiClient.convertToType(data['data_requests'], [SubmissionDataRequest]);
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('pdf_hash')) {
                obj['pdf_hash'] = ApiClient.convertToType(data['pdf_hash'], 'String');
            }
            if (data.hasOwnProperty('permanent_download_url')) {
                obj['permanent_download_url'] = ApiClient.convertToType(data['permanent_download_url'], 'String');
            }
            if (data.hasOwnProperty('processed_at')) {
                obj['processed_at'] = ApiClient.convertToType(data['processed_at'], 'String');
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = ApiClient.convertToType(data['referrer'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('truncated_text')) {
                obj['truncated_text'] = ApiClient.convertToType(data['truncated_text'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Submission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Submission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Submission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                SubmissionAction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['batch_id'] && !(typeof data['batch_id'] === 'string' || data['batch_id'] instanceof String)) {
            throw new Error("Expected the field `batch_id` to be a primitive type in the JSON string but got " + data['batch_id']);
        }
        if (data['data_requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data_requests'])) {
                throw new Error("Expected the field `data_requests` to be an array in the JSON data but got " + data['data_requests']);
            }
            // validate the optional field `data_requests` (array)
            for (const item of data['data_requests']) {
                SubmissionDataRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['expires_at'] && !(typeof data['expires_at'] === 'string' || data['expires_at'] instanceof String)) {
            throw new Error("Expected the field `expires_at` to be a primitive type in the JSON string but got " + data['expires_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['pdf_hash'] && !(typeof data['pdf_hash'] === 'string' || data['pdf_hash'] instanceof String)) {
            throw new Error("Expected the field `pdf_hash` to be a primitive type in the JSON string but got " + data['pdf_hash']);
        }
        // ensure the json data is a string
        if (data['permanent_download_url'] && !(typeof data['permanent_download_url'] === 'string' || data['permanent_download_url'] instanceof String)) {
            throw new Error("Expected the field `permanent_download_url` to be a primitive type in the JSON string but got " + data['permanent_download_url']);
        }
        // ensure the json data is a string
        if (data['processed_at'] && !(typeof data['processed_at'] === 'string' || data['processed_at'] instanceof String)) {
            throw new Error("Expected the field `processed_at` to be a primitive type in the JSON string but got " + data['processed_at']);
        }
        // ensure the json data is a string
        if (data['referrer'] && !(typeof data['referrer'] === 'string' || data['referrer'] instanceof String)) {
            throw new Error("Expected the field `referrer` to be a primitive type in the JSON string but got " + data['referrer']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['template_id'] && !(typeof data['template_id'] === 'string' || data['template_id'] instanceof String)) {
            throw new Error("Expected the field `template_id` to be a primitive type in the JSON string but got " + data['template_id']);
        }

        return true;
    }


}

Submission.RequiredProperties = ["expired", "id", "state", "test"];

/**
 * @member {Array.<module:model/SubmissionAction>} actions
 */
Submission.prototype['actions'] = undefined;

/**
 * @member {String} batch_id
 */
Submission.prototype['batch_id'] = undefined;

/**
 * @member {Object} data
 */
Submission.prototype['data'] = undefined;

/**
 * @member {Array.<module:model/SubmissionDataRequest>} data_requests
 */
Submission.prototype['data_requests'] = undefined;

/**
 * @member {String} download_url
 */
Submission.prototype['download_url'] = undefined;

/**
 * @member {Boolean} editable
 */
Submission.prototype['editable'] = undefined;

/**
 * @member {Boolean} expired
 */
Submission.prototype['expired'] = undefined;

/**
 * @member {String} expires_at
 */
Submission.prototype['expires_at'] = undefined;

/**
 * @member {String} id
 */
Submission.prototype['id'] = undefined;

/**
 * @member {Object} metadata
 */
Submission.prototype['metadata'] = undefined;

/**
 * @member {String} pdf_hash
 */
Submission.prototype['pdf_hash'] = undefined;

/**
 * @member {String} permanent_download_url
 */
Submission.prototype['permanent_download_url'] = undefined;

/**
 * @member {String} processed_at
 */
Submission.prototype['processed_at'] = undefined;

/**
 * @member {String} referrer
 */
Submission.prototype['referrer'] = undefined;

/**
 * @member {String} source
 */
Submission.prototype['source'] = undefined;

/**
 * @member {module:model/Submission.StateEnum} state
 */
Submission.prototype['state'] = undefined;

/**
 * @member {String} template_id
 */
Submission.prototype['template_id'] = undefined;

/**
 * @member {Boolean} test
 */
Submission.prototype['test'] = undefined;

/**
 * @member {Object} truncated_text
 */
Submission.prototype['truncated_text'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Submission['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "invalid_data"
     * @const
     */
    "invalid_data": "invalid_data",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "image_download_failed"
     * @const
     */
    "image_download_failed": "image_download_failed",

    /**
     * value: "image_processing_failed"
     * @const
     */
    "image_processing_failed": "image_processing_failed",

    /**
     * value: "waiting_for_data_requests"
     * @const
     */
    "waiting_for_data_requests": "waiting_for_data_requests",

    /**
     * value: "syntax_error"
     * @const
     */
    "syntax_error": "syntax_error",

    /**
     * value: "account_suspended"
     * @const
     */
    "account_suspended": "account_suspended",

    /**
     * value: "license_revoked"
     * @const
     */
    "license_revoked": "license_revoked",

    /**
     * value: "accidental"
     * @const
     */
    "accidental": "accidental"
};



export default Submission;

