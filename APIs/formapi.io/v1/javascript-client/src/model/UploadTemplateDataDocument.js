/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadTemplateDataDocumentMetadata from './UploadTemplateDataDocumentMetadata';

/**
 * The UploadTemplateDataDocument model module.
 * @module model/UploadTemplateDataDocument
 * @version v1
 */
class UploadTemplateDataDocument {
    /**
     * Constructs a new <code>UploadTemplateDataDocument</code>.
     * @alias module:model/UploadTemplateDataDocument
     * @param id {String} 
     * @param metadata {module:model/UploadTemplateDataDocumentMetadata} 
     * @param storage {module:model/UploadTemplateDataDocument.StorageEnum} 
     */
    constructor(id, metadata, storage) { 
        
        UploadTemplateDataDocument.initialize(this, id, metadata, storage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, metadata, storage) { 
        obj['id'] = id;
        obj['metadata'] = metadata;
        obj['storage'] = storage;
    }

    /**
     * Constructs a <code>UploadTemplateDataDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadTemplateDataDocument} obj Optional instance to populate.
     * @return {module:model/UploadTemplateDataDocument} The populated <code>UploadTemplateDataDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadTemplateDataDocument();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = UploadTemplateDataDocumentMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadTemplateDataDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadTemplateDataDocument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadTemplateDataDocument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          UploadTemplateDataDocumentMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['storage'] && !(typeof data['storage'] === 'string' || data['storage'] instanceof String)) {
            throw new Error("Expected the field `storage` to be a primitive type in the JSON string but got " + data['storage']);
        }

        return true;
    }


}

UploadTemplateDataDocument.RequiredProperties = ["id", "metadata", "storage"];

/**
 * @member {String} id
 */
UploadTemplateDataDocument.prototype['id'] = undefined;

/**
 * @member {module:model/UploadTemplateDataDocumentMetadata} metadata
 */
UploadTemplateDataDocument.prototype['metadata'] = undefined;

/**
 * @member {module:model/UploadTemplateDataDocument.StorageEnum} storage
 */
UploadTemplateDataDocument.prototype['storage'] = undefined;





/**
 * Allowed values for the <code>storage</code> property.
 * @enum {String}
 * @readonly
 */
UploadTemplateDataDocument['StorageEnum'] = {

    /**
     * value: "cache"
     * @const
     */
    "cache": "cache"
};



export default UploadTemplateDataDocument;

