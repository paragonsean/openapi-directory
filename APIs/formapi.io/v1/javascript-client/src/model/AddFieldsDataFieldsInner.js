/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddFieldsDataFieldsInner model module.
 * @module model/AddFieldsDataFieldsInner
 * @version v1
 */
class AddFieldsDataFieldsInner {
    /**
     * Constructs a new <code>AddFieldsDataFieldsInner</code>.
     * @alias module:model/AddFieldsDataFieldsInner
     * @param name {String} 
     * @param page {Number} 
     */
    constructor(name, page) { 
        
        AddFieldsDataFieldsInner.initialize(this, name, page);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, page) { 
        obj['name'] = name;
        obj['page'] = page;
    }

    /**
     * Constructs a <code>AddFieldsDataFieldsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddFieldsDataFieldsInner} obj Optional instance to populate.
     * @return {module:model/AddFieldsDataFieldsInner} The populated <code>AddFieldsDataFieldsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddFieldsDataFieldsInner();

            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
            if (data.hasOwnProperty('autoCalculateMaxLength')) {
                obj['autoCalculateMaxLength'] = ApiClient.convertToType(data['autoCalculateMaxLength'], 'Boolean');
            }
            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('backgroundColorFieldName')) {
                obj['backgroundColorFieldName'] = ApiClient.convertToType(data['backgroundColorFieldName'], 'String');
            }
            if (data.hasOwnProperty('backgroundColorFieldRequired')) {
                obj['backgroundColorFieldRequired'] = ApiClient.convertToType(data['backgroundColorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('barcodeSymbology')) {
                obj['barcodeSymbology'] = ApiClient.convertToType(data['barcodeSymbology'], 'String');
            }
            if (data.hasOwnProperty('bold')) {
                obj['bold'] = ApiClient.convertToType(data['bold'], 'Boolean');
            }
            if (data.hasOwnProperty('characterSpacing')) {
                obj['characterSpacing'] = ApiClient.convertToType(data['characterSpacing'], 'Number');
            }
            if (data.hasOwnProperty('checkCharacter')) {
                obj['checkCharacter'] = ApiClient.convertToType(data['checkCharacter'], 'String');
            }
            if (data.hasOwnProperty('checkColor')) {
                obj['checkColor'] = ApiClient.convertToType(data['checkColor'], 'String');
            }
            if (data.hasOwnProperty('checkColorFieldName')) {
                obj['checkColorFieldName'] = ApiClient.convertToType(data['checkColorFieldName'], 'String');
            }
            if (data.hasOwnProperty('checkColorFieldRequired')) {
                obj['checkColorFieldRequired'] = ApiClient.convertToType(data['checkColorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('colorFieldName')) {
                obj['colorFieldName'] = ApiClient.convertToType(data['colorFieldName'], 'String');
            }
            if (data.hasOwnProperty('colorFieldRequired')) {
                obj['colorFieldRequired'] = ApiClient.convertToType(data['colorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('comb')) {
                obj['comb'] = ApiClient.convertToType(data['comb'], 'Boolean');
            }
            if (data.hasOwnProperty('combNumberOfCells')) {
                obj['combNumberOfCells'] = ApiClient.convertToType(data['combNumberOfCells'], 'Number');
            }
            if (data.hasOwnProperty('combValueOffset')) {
                obj['combValueOffset'] = ApiClient.convertToType(data['combValueOffset'], 'Number');
            }
            if (data.hasOwnProperty('combinedFieldFormat')) {
                obj['combinedFieldFormat'] = ApiClient.convertToType(data['combinedFieldFormat'], 'String');
            }
            if (data.hasOwnProperty('combinedFieldNames')) {
                obj['combinedFieldNames'] = ApiClient.convertToType(data['combinedFieldNames'], 'String');
            }
            if (data.hasOwnProperty('combinedFieldSeparator')) {
                obj['combinedFieldSeparator'] = ApiClient.convertToType(data['combinedFieldSeparator'], 'String');
            }
            if (data.hasOwnProperty('combinedFieldType')) {
                obj['combinedFieldType'] = ApiClient.convertToType(data['combinedFieldType'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'Boolean');
            }
            if (data.hasOwnProperty('dateTimeFormat')) {
                obj['dateTimeFormat'] = ApiClient.convertToType(data['dateTimeFormat'], 'String');
            }
            if (data.hasOwnProperty('decimalPlaces')) {
                obj['decimalPlaces'] = ApiClient.convertToType(data['decimalPlaces'], 'Number');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayType')) {
                obj['displayType'] = ApiClient.convertToType(data['displayType'], 'String');
            }
            if (data.hasOwnProperty('exclusiveMaximum')) {
                obj['exclusiveMaximum'] = ApiClient.convertToType(data['exclusiveMaximum'], 'Boolean');
            }
            if (data.hasOwnProperty('exclusiveMinimum')) {
                obj['exclusiveMinimum'] = ApiClient.convertToType(data['exclusiveMinimum'], 'Boolean');
            }
            if (data.hasOwnProperty('falseText')) {
                obj['falseText'] = ApiClient.convertToType(data['falseText'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('imageGravity')) {
                obj['imageGravity'] = ApiClient.convertToType(data['imageGravity'], 'String');
            }
            if (data.hasOwnProperty('imageScaleType')) {
                obj['imageScaleType'] = ApiClient.convertToType(data['imageScaleType'], 'String');
            }
            if (data.hasOwnProperty('includeTime')) {
                obj['includeTime'] = ApiClient.convertToType(data['includeTime'], 'Boolean');
            }
            if (data.hasOwnProperty('integer')) {
                obj['integer'] = ApiClient.convertToType(data['integer'], 'Boolean');
            }
            if (data.hasOwnProperty('invertBooleanCondition')) {
                obj['invertBooleanCondition'] = ApiClient.convertToType(data['invertBooleanCondition'], 'Boolean');
            }
            if (data.hasOwnProperty('maxLength')) {
                obj['maxLength'] = ApiClient.convertToType(data['maxLength'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('minLength')) {
                obj['minLength'] = ApiClient.convertToType(data['minLength'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('multiline')) {
                obj['multiline'] = ApiClient.convertToType(data['multiline'], 'Boolean');
            }
            if (data.hasOwnProperty('multilineLines')) {
                obj['multilineLines'] = ApiClient.convertToType(data['multilineLines'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberConditionRangeExclusiveMax')) {
                obj['numberConditionRangeExclusiveMax'] = ApiClient.convertToType(data['numberConditionRangeExclusiveMax'], 'Boolean');
            }
            if (data.hasOwnProperty('numberConditionRangeExclusiveMin')) {
                obj['numberConditionRangeExclusiveMin'] = ApiClient.convertToType(data['numberConditionRangeExclusiveMin'], 'Boolean');
            }
            if (data.hasOwnProperty('numberConditionRangeMax')) {
                obj['numberConditionRangeMax'] = ApiClient.convertToType(data['numberConditionRangeMax'], 'Number');
            }
            if (data.hasOwnProperty('numberConditionRangeMin')) {
                obj['numberConditionRangeMin'] = ApiClient.convertToType(data['numberConditionRangeMin'], 'Number');
            }
            if (data.hasOwnProperty('numberConditionType')) {
                obj['numberConditionType'] = ApiClient.convertToType(data['numberConditionType'], 'String');
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'Number');
            }
            if (data.hasOwnProperty('optionList')) {
                obj['optionList'] = ApiClient.convertToType(data['optionList'], 'String');
            }
            if (data.hasOwnProperty('overflow')) {
                obj['overflow'] = ApiClient.convertToType(data['overflow'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('placeholder')) {
                obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
            }
            if (data.hasOwnProperty('qrcodeColor')) {
                obj['qrcodeColor'] = ApiClient.convertToType(data['qrcodeColor'], 'String');
            }
            if (data.hasOwnProperty('qrcodeColorFieldName')) {
                obj['qrcodeColorFieldName'] = ApiClient.convertToType(data['qrcodeColorFieldName'], 'String');
            }
            if (data.hasOwnProperty('qrcodeColorFieldRequired')) {
                obj['qrcodeColorFieldRequired'] = ApiClient.convertToType(data['qrcodeColorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'Number');
            }
            if (data.hasOwnProperty('shapeBorderColor')) {
                obj['shapeBorderColor'] = ApiClient.convertToType(data['shapeBorderColor'], 'String');
            }
            if (data.hasOwnProperty('shapeBorderColorFieldName')) {
                obj['shapeBorderColorFieldName'] = ApiClient.convertToType(data['shapeBorderColorFieldName'], 'String');
            }
            if (data.hasOwnProperty('shapeBorderColorFieldRequired')) {
                obj['shapeBorderColorFieldRequired'] = ApiClient.convertToType(data['shapeBorderColorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('shapeBorderWidth')) {
                obj['shapeBorderWidth'] = ApiClient.convertToType(data['shapeBorderWidth'], 'Number');
            }
            if (data.hasOwnProperty('shapeFillColor')) {
                obj['shapeFillColor'] = ApiClient.convertToType(data['shapeFillColor'], 'String');
            }
            if (data.hasOwnProperty('shapeFillColorFieldName')) {
                obj['shapeFillColorFieldName'] = ApiClient.convertToType(data['shapeFillColorFieldName'], 'String');
            }
            if (data.hasOwnProperty('shapeFillColorFieldRequired')) {
                obj['shapeFillColorFieldRequired'] = ApiClient.convertToType(data['shapeFillColorFieldRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('shapeType')) {
                obj['shapeType'] = ApiClient.convertToType(data['shapeType'], 'String');
            }
            if (data.hasOwnProperty('signatureAllowDraw')) {
                obj['signatureAllowDraw'] = ApiClient.convertToType(data['signatureAllowDraw'], 'Boolean');
            }
            if (data.hasOwnProperty('signatureAllowType')) {
                obj['signatureAllowType'] = ApiClient.convertToType(data['signatureAllowType'], 'Boolean');
            }
            if (data.hasOwnProperty('static')) {
                obj['static'] = ApiClient.convertToType(data['static'], 'Boolean');
            }
            if (data.hasOwnProperty('strikethrough')) {
                obj['strikethrough'] = ApiClient.convertToType(data['strikethrough'], 'Boolean');
            }
            if (data.hasOwnProperty('stringConditionType')) {
                obj['stringConditionType'] = ApiClient.convertToType(data['stringConditionType'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trueText')) {
                obj['trueText'] = ApiClient.convertToType(data['trueText'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeface')) {
                obj['typeface'] = ApiClient.convertToType(data['typeface'], 'String');
            }
            if (data.hasOwnProperty('uppercase')) {
                obj['uppercase'] = ApiClient.convertToType(data['uppercase'], 'Boolean');
            }
            if (data.hasOwnProperty('vAlignment')) {
                obj['vAlignment'] = ApiClient.convertToType(data['vAlignment'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddFieldsDataFieldsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddFieldsDataFieldsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddFieldsDataFieldsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alignment'] && !(typeof data['alignment'] === 'string' || data['alignment'] instanceof String)) {
            throw new Error("Expected the field `alignment` to be a primitive type in the JSON string but got " + data['alignment']);
        }
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['backgroundColorFieldName'] && !(typeof data['backgroundColorFieldName'] === 'string' || data['backgroundColorFieldName'] instanceof String)) {
            throw new Error("Expected the field `backgroundColorFieldName` to be a primitive type in the JSON string but got " + data['backgroundColorFieldName']);
        }
        // ensure the json data is a string
        if (data['barcodeSymbology'] && !(typeof data['barcodeSymbology'] === 'string' || data['barcodeSymbology'] instanceof String)) {
            throw new Error("Expected the field `barcodeSymbology` to be a primitive type in the JSON string but got " + data['barcodeSymbology']);
        }
        // ensure the json data is a string
        if (data['checkCharacter'] && !(typeof data['checkCharacter'] === 'string' || data['checkCharacter'] instanceof String)) {
            throw new Error("Expected the field `checkCharacter` to be a primitive type in the JSON string but got " + data['checkCharacter']);
        }
        // ensure the json data is a string
        if (data['checkColor'] && !(typeof data['checkColor'] === 'string' || data['checkColor'] instanceof String)) {
            throw new Error("Expected the field `checkColor` to be a primitive type in the JSON string but got " + data['checkColor']);
        }
        // ensure the json data is a string
        if (data['checkColorFieldName'] && !(typeof data['checkColorFieldName'] === 'string' || data['checkColorFieldName'] instanceof String)) {
            throw new Error("Expected the field `checkColorFieldName` to be a primitive type in the JSON string but got " + data['checkColorFieldName']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['colorFieldName'] && !(typeof data['colorFieldName'] === 'string' || data['colorFieldName'] instanceof String)) {
            throw new Error("Expected the field `colorFieldName` to be a primitive type in the JSON string but got " + data['colorFieldName']);
        }
        // ensure the json data is a string
        if (data['combinedFieldFormat'] && !(typeof data['combinedFieldFormat'] === 'string' || data['combinedFieldFormat'] instanceof String)) {
            throw new Error("Expected the field `combinedFieldFormat` to be a primitive type in the JSON string but got " + data['combinedFieldFormat']);
        }
        // ensure the json data is a string
        if (data['combinedFieldNames'] && !(typeof data['combinedFieldNames'] === 'string' || data['combinedFieldNames'] instanceof String)) {
            throw new Error("Expected the field `combinedFieldNames` to be a primitive type in the JSON string but got " + data['combinedFieldNames']);
        }
        // ensure the json data is a string
        if (data['combinedFieldSeparator'] && !(typeof data['combinedFieldSeparator'] === 'string' || data['combinedFieldSeparator'] instanceof String)) {
            throw new Error("Expected the field `combinedFieldSeparator` to be a primitive type in the JSON string but got " + data['combinedFieldSeparator']);
        }
        // ensure the json data is a string
        if (data['combinedFieldType'] && !(typeof data['combinedFieldType'] === 'string' || data['combinedFieldType'] instanceof String)) {
            throw new Error("Expected the field `combinedFieldType` to be a primitive type in the JSON string but got " + data['combinedFieldType']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['dateTimeFormat'] && !(typeof data['dateTimeFormat'] === 'string' || data['dateTimeFormat'] instanceof String)) {
            throw new Error("Expected the field `dateTimeFormat` to be a primitive type in the JSON string but got " + data['dateTimeFormat']);
        }
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayType'] && !(typeof data['displayType'] === 'string' || data['displayType'] instanceof String)) {
            throw new Error("Expected the field `displayType` to be a primitive type in the JSON string but got " + data['displayType']);
        }
        // ensure the json data is a string
        if (data['falseText'] && !(typeof data['falseText'] === 'string' || data['falseText'] instanceof String)) {
            throw new Error("Expected the field `falseText` to be a primitive type in the JSON string but got " + data['falseText']);
        }
        // ensure the json data is a string
        if (data['imageGravity'] && !(typeof data['imageGravity'] === 'string' || data['imageGravity'] instanceof String)) {
            throw new Error("Expected the field `imageGravity` to be a primitive type in the JSON string but got " + data['imageGravity']);
        }
        // ensure the json data is a string
        if (data['imageScaleType'] && !(typeof data['imageScaleType'] === 'string' || data['imageScaleType'] instanceof String)) {
            throw new Error("Expected the field `imageScaleType` to be a primitive type in the JSON string but got " + data['imageScaleType']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['numberConditionType'] && !(typeof data['numberConditionType'] === 'string' || data['numberConditionType'] instanceof String)) {
            throw new Error("Expected the field `numberConditionType` to be a primitive type in the JSON string but got " + data['numberConditionType']);
        }
        // ensure the json data is a string
        if (data['optionList'] && !(typeof data['optionList'] === 'string' || data['optionList'] instanceof String)) {
            throw new Error("Expected the field `optionList` to be a primitive type in the JSON string but got " + data['optionList']);
        }
        // ensure the json data is a string
        if (data['overflow'] && !(typeof data['overflow'] === 'string' || data['overflow'] instanceof String)) {
            throw new Error("Expected the field `overflow` to be a primitive type in the JSON string but got " + data['overflow']);
        }
        // ensure the json data is a string
        if (data['placeholder'] && !(typeof data['placeholder'] === 'string' || data['placeholder'] instanceof String)) {
            throw new Error("Expected the field `placeholder` to be a primitive type in the JSON string but got " + data['placeholder']);
        }
        // ensure the json data is a string
        if (data['qrcodeColor'] && !(typeof data['qrcodeColor'] === 'string' || data['qrcodeColor'] instanceof String)) {
            throw new Error("Expected the field `qrcodeColor` to be a primitive type in the JSON string but got " + data['qrcodeColor']);
        }
        // ensure the json data is a string
        if (data['qrcodeColorFieldName'] && !(typeof data['qrcodeColorFieldName'] === 'string' || data['qrcodeColorFieldName'] instanceof String)) {
            throw new Error("Expected the field `qrcodeColorFieldName` to be a primitive type in the JSON string but got " + data['qrcodeColorFieldName']);
        }
        // ensure the json data is a string
        if (data['shapeBorderColor'] && !(typeof data['shapeBorderColor'] === 'string' || data['shapeBorderColor'] instanceof String)) {
            throw new Error("Expected the field `shapeBorderColor` to be a primitive type in the JSON string but got " + data['shapeBorderColor']);
        }
        // ensure the json data is a string
        if (data['shapeBorderColorFieldName'] && !(typeof data['shapeBorderColorFieldName'] === 'string' || data['shapeBorderColorFieldName'] instanceof String)) {
            throw new Error("Expected the field `shapeBorderColorFieldName` to be a primitive type in the JSON string but got " + data['shapeBorderColorFieldName']);
        }
        // ensure the json data is a string
        if (data['shapeFillColor'] && !(typeof data['shapeFillColor'] === 'string' || data['shapeFillColor'] instanceof String)) {
            throw new Error("Expected the field `shapeFillColor` to be a primitive type in the JSON string but got " + data['shapeFillColor']);
        }
        // ensure the json data is a string
        if (data['shapeFillColorFieldName'] && !(typeof data['shapeFillColorFieldName'] === 'string' || data['shapeFillColorFieldName'] instanceof String)) {
            throw new Error("Expected the field `shapeFillColorFieldName` to be a primitive type in the JSON string but got " + data['shapeFillColorFieldName']);
        }
        // ensure the json data is a string
        if (data['shapeType'] && !(typeof data['shapeType'] === 'string' || data['shapeType'] instanceof String)) {
            throw new Error("Expected the field `shapeType` to be a primitive type in the JSON string but got " + data['shapeType']);
        }
        // ensure the json data is a string
        if (data['stringConditionType'] && !(typeof data['stringConditionType'] === 'string' || data['stringConditionType'] instanceof String)) {
            throw new Error("Expected the field `stringConditionType` to be a primitive type in the JSON string but got " + data['stringConditionType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trueText'] && !(typeof data['trueText'] === 'string' || data['trueText'] instanceof String)) {
            throw new Error("Expected the field `trueText` to be a primitive type in the JSON string but got " + data['trueText']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeface'] && !(typeof data['typeface'] === 'string' || data['typeface'] instanceof String)) {
            throw new Error("Expected the field `typeface` to be a primitive type in the JSON string but got " + data['typeface']);
        }
        // ensure the json data is a string
        if (data['vAlignment'] && !(typeof data['vAlignment'] === 'string' || data['vAlignment'] instanceof String)) {
            throw new Error("Expected the field `vAlignment` to be a primitive type in the JSON string but got " + data['vAlignment']);
        }

        return true;
    }


}

AddFieldsDataFieldsInner.RequiredProperties = ["name", "page"];

/**
 * @member {module:model/AddFieldsDataFieldsInner.AlignmentEnum} alignment
 */
AddFieldsDataFieldsInner.prototype['alignment'] = undefined;

/**
 * @member {Boolean} autoCalculateMaxLength
 */
AddFieldsDataFieldsInner.prototype['autoCalculateMaxLength'] = undefined;

/**
 * @member {String} backgroundColor
 */
AddFieldsDataFieldsInner.prototype['backgroundColor'] = undefined;

/**
 * @member {String} backgroundColorFieldName
 */
AddFieldsDataFieldsInner.prototype['backgroundColorFieldName'] = undefined;

/**
 * @member {Boolean} backgroundColorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['backgroundColorFieldRequired'] = undefined;

/**
 * @member {String} barcodeSymbology
 */
AddFieldsDataFieldsInner.prototype['barcodeSymbology'] = undefined;

/**
 * @member {Boolean} bold
 */
AddFieldsDataFieldsInner.prototype['bold'] = undefined;

/**
 * @member {Number} characterSpacing
 */
AddFieldsDataFieldsInner.prototype['characterSpacing'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.CheckCharacterEnum} checkCharacter
 */
AddFieldsDataFieldsInner.prototype['checkCharacter'] = undefined;

/**
 * @member {String} checkColor
 */
AddFieldsDataFieldsInner.prototype['checkColor'] = undefined;

/**
 * @member {String} checkColorFieldName
 */
AddFieldsDataFieldsInner.prototype['checkColorFieldName'] = undefined;

/**
 * @member {Boolean} checkColorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['checkColorFieldRequired'] = undefined;

/**
 * @member {String} color
 */
AddFieldsDataFieldsInner.prototype['color'] = undefined;

/**
 * @member {String} colorFieldName
 */
AddFieldsDataFieldsInner.prototype['colorFieldName'] = undefined;

/**
 * @member {Boolean} colorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['colorFieldRequired'] = undefined;

/**
 * @member {Boolean} comb
 */
AddFieldsDataFieldsInner.prototype['comb'] = undefined;

/**
 * @member {Number} combNumberOfCells
 */
AddFieldsDataFieldsInner.prototype['combNumberOfCells'] = undefined;

/**
 * @member {Number} combValueOffset
 */
AddFieldsDataFieldsInner.prototype['combValueOffset'] = undefined;

/**
 * @member {String} combinedFieldFormat
 */
AddFieldsDataFieldsInner.prototype['combinedFieldFormat'] = undefined;

/**
 * @member {String} combinedFieldNames
 */
AddFieldsDataFieldsInner.prototype['combinedFieldNames'] = undefined;

/**
 * @member {String} combinedFieldSeparator
 */
AddFieldsDataFieldsInner.prototype['combinedFieldSeparator'] = undefined;

/**
 * @member {String} combinedFieldType
 */
AddFieldsDataFieldsInner.prototype['combinedFieldType'] = undefined;

/**
 * @member {String} condition
 */
AddFieldsDataFieldsInner.prototype['condition'] = undefined;

/**
 * @member {Boolean} currency
 */
AddFieldsDataFieldsInner.prototype['currency'] = undefined;

/**
 * @member {String} dateTimeFormat
 */
AddFieldsDataFieldsInner.prototype['dateTimeFormat'] = undefined;

/**
 * @member {Number} decimalPlaces
 */
AddFieldsDataFieldsInner.prototype['decimalPlaces'] = undefined;

/**
 * @member {String} default
 */
AddFieldsDataFieldsInner.prototype['default'] = undefined;

/**
 * @member {String} description
 */
AddFieldsDataFieldsInner.prototype['description'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.DisplayTypeEnum} displayType
 */
AddFieldsDataFieldsInner.prototype['displayType'] = undefined;

/**
 * @member {Boolean} exclusiveMaximum
 */
AddFieldsDataFieldsInner.prototype['exclusiveMaximum'] = undefined;

/**
 * @member {Boolean} exclusiveMinimum
 */
AddFieldsDataFieldsInner.prototype['exclusiveMinimum'] = undefined;

/**
 * @member {String} falseText
 */
AddFieldsDataFieldsInner.prototype['falseText'] = undefined;

/**
 * @member {Number} fontSize
 */
AddFieldsDataFieldsInner.prototype['fontSize'] = undefined;

/**
 * @member {Number} height
 */
AddFieldsDataFieldsInner.prototype['height'] = undefined;

/**
 * @member {Boolean} hidden
 */
AddFieldsDataFieldsInner.prototype['hidden'] = undefined;

/**
 * @member {Number} id
 */
AddFieldsDataFieldsInner.prototype['id'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.ImageGravityEnum} imageGravity
 */
AddFieldsDataFieldsInner.prototype['imageGravity'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.ImageScaleTypeEnum} imageScaleType
 */
AddFieldsDataFieldsInner.prototype['imageScaleType'] = undefined;

/**
 * @member {Boolean} includeTime
 */
AddFieldsDataFieldsInner.prototype['includeTime'] = undefined;

/**
 * @member {Boolean} integer
 */
AddFieldsDataFieldsInner.prototype['integer'] = undefined;

/**
 * @member {Boolean} invertBooleanCondition
 */
AddFieldsDataFieldsInner.prototype['invertBooleanCondition'] = undefined;

/**
 * @member {Number} maxLength
 */
AddFieldsDataFieldsInner.prototype['maxLength'] = undefined;

/**
 * @member {Number} maximum
 */
AddFieldsDataFieldsInner.prototype['maximum'] = undefined;

/**
 * @member {String} metadata
 */
AddFieldsDataFieldsInner.prototype['metadata'] = undefined;

/**
 * @member {Number} minLength
 */
AddFieldsDataFieldsInner.prototype['minLength'] = undefined;

/**
 * @member {Number} minimum
 */
AddFieldsDataFieldsInner.prototype['minimum'] = undefined;

/**
 * @member {Boolean} multiline
 */
AddFieldsDataFieldsInner.prototype['multiline'] = undefined;

/**
 * @member {Number} multilineLines
 */
AddFieldsDataFieldsInner.prototype['multilineLines'] = undefined;

/**
 * @member {String} name
 */
AddFieldsDataFieldsInner.prototype['name'] = undefined;

/**
 * @member {Boolean} numberConditionRangeExclusiveMax
 */
AddFieldsDataFieldsInner.prototype['numberConditionRangeExclusiveMax'] = undefined;

/**
 * @member {Boolean} numberConditionRangeExclusiveMin
 */
AddFieldsDataFieldsInner.prototype['numberConditionRangeExclusiveMin'] = undefined;

/**
 * @member {Number} numberConditionRangeMax
 */
AddFieldsDataFieldsInner.prototype['numberConditionRangeMax'] = undefined;

/**
 * @member {Number} numberConditionRangeMin
 */
AddFieldsDataFieldsInner.prototype['numberConditionRangeMin'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.NumberConditionTypeEnum} numberConditionType
 */
AddFieldsDataFieldsInner.prototype['numberConditionType'] = undefined;

/**
 * @member {Number} opacity
 */
AddFieldsDataFieldsInner.prototype['opacity'] = undefined;

/**
 * @member {String} optionList
 */
AddFieldsDataFieldsInner.prototype['optionList'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.OverflowEnum} overflow
 */
AddFieldsDataFieldsInner.prototype['overflow'] = undefined;

/**
 * @member {Number} page
 */
AddFieldsDataFieldsInner.prototype['page'] = undefined;

/**
 * @member {String} placeholder
 */
AddFieldsDataFieldsInner.prototype['placeholder'] = undefined;

/**
 * @member {String} qrcodeColor
 */
AddFieldsDataFieldsInner.prototype['qrcodeColor'] = undefined;

/**
 * @member {String} qrcodeColorFieldName
 */
AddFieldsDataFieldsInner.prototype['qrcodeColorFieldName'] = undefined;

/**
 * @member {Boolean} qrcodeColorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['qrcodeColorFieldRequired'] = undefined;

/**
 * @member {Boolean} required
 */
AddFieldsDataFieldsInner.prototype['required'] = undefined;

/**
 * @member {Number} rotation
 */
AddFieldsDataFieldsInner.prototype['rotation'] = undefined;

/**
 * @member {String} shapeBorderColor
 */
AddFieldsDataFieldsInner.prototype['shapeBorderColor'] = undefined;

/**
 * @member {String} shapeBorderColorFieldName
 */
AddFieldsDataFieldsInner.prototype['shapeBorderColorFieldName'] = undefined;

/**
 * @member {Boolean} shapeBorderColorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['shapeBorderColorFieldRequired'] = undefined;

/**
 * @member {Number} shapeBorderWidth
 */
AddFieldsDataFieldsInner.prototype['shapeBorderWidth'] = undefined;

/**
 * @member {String} shapeFillColor
 */
AddFieldsDataFieldsInner.prototype['shapeFillColor'] = undefined;

/**
 * @member {String} shapeFillColorFieldName
 */
AddFieldsDataFieldsInner.prototype['shapeFillColorFieldName'] = undefined;

/**
 * @member {Boolean} shapeFillColorFieldRequired
 */
AddFieldsDataFieldsInner.prototype['shapeFillColorFieldRequired'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.ShapeTypeEnum} shapeType
 */
AddFieldsDataFieldsInner.prototype['shapeType'] = undefined;

/**
 * @member {Boolean} signatureAllowDraw
 */
AddFieldsDataFieldsInner.prototype['signatureAllowDraw'] = undefined;

/**
 * @member {Boolean} signatureAllowType
 */
AddFieldsDataFieldsInner.prototype['signatureAllowType'] = undefined;

/**
 * @member {Boolean} static
 */
AddFieldsDataFieldsInner.prototype['static'] = undefined;

/**
 * @member {Boolean} strikethrough
 */
AddFieldsDataFieldsInner.prototype['strikethrough'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.StringConditionTypeEnum} stringConditionType
 */
AddFieldsDataFieldsInner.prototype['stringConditionType'] = undefined;

/**
 * @member {String} title
 */
AddFieldsDataFieldsInner.prototype['title'] = undefined;

/**
 * @member {String} trueText
 */
AddFieldsDataFieldsInner.prototype['trueText'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.TypeEnum} type
 */
AddFieldsDataFieldsInner.prototype['type'] = undefined;

/**
 * @member {String} typeface
 */
AddFieldsDataFieldsInner.prototype['typeface'] = undefined;

/**
 * @member {Boolean} uppercase
 */
AddFieldsDataFieldsInner.prototype['uppercase'] = undefined;

/**
 * @member {module:model/AddFieldsDataFieldsInner.VAlignmentEnum} vAlignment
 */
AddFieldsDataFieldsInner.prototype['vAlignment'] = undefined;

/**
 * @member {Number} width
 */
AddFieldsDataFieldsInner.prototype['width'] = undefined;

/**
 * @member {Number} x
 */
AddFieldsDataFieldsInner.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
AddFieldsDataFieldsInner.prototype['y'] = undefined;





/**
 * Allowed values for the <code>alignment</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['AlignmentEnum'] = {

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "center"
     * @const
     */
    "center": "center",

    /**
     * value: "right"
     * @const
     */
    "right": "right"
};


/**
 * Allowed values for the <code>checkCharacter</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['CheckCharacterEnum'] = {

    /**
     * value: "&#10003;"
     * @const
     */
    "10003;": "&#10003;",

    /**
     * value: "&#10004;"
     * @const
     */
    "10004;": "&#10004;",

    /**
     * value: "&#10006;"
     * @const
     */
    "10006;": "&#10006;",

    /**
     * value: "&#10007;"
     * @const
     */
    "10007;": "&#10007;",

    /**
     * value: "&#10008;"
     * @const
     */
    "10008;": "&#10008;"
};


/**
 * Allowed values for the <code>displayType</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['DisplayTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "check"
     * @const
     */
    "check": "check",

    /**
     * value: "qrcode"
     * @const
     */
    "qrcode": "qrcode",

    /**
     * value: "barcode"
     * @const
     */
    "barcode": "barcode",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "shape"
     * @const
     */
    "shape": "shape"
};


/**
 * Allowed values for the <code>imageGravity</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['ImageGravityEnum'] = {

    /**
     * value: "NorthWest"
     * @const
     */
    "NorthWest": "NorthWest",

    /**
     * value: "North"
     * @const
     */
    "North": "North",

    /**
     * value: "NorthEast"
     * @const
     */
    "NorthEast": "NorthEast",

    /**
     * value: "West"
     * @const
     */
    "West": "West",

    /**
     * value: "Center"
     * @const
     */
    "Center": "Center",

    /**
     * value: "East"
     * @const
     */
    "East": "East",

    /**
     * value: "SouthWest"
     * @const
     */
    "SouthWest": "SouthWest",

    /**
     * value: "South"
     * @const
     */
    "South": "South",

    /**
     * value: "SouthEast"
     * @const
     */
    "SouthEast": "SouthEast"
};


/**
 * Allowed values for the <code>imageScaleType</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['ImageScaleTypeEnum'] = {

    /**
     * value: "fit"
     * @const
     */
    "fit": "fit",

    /**
     * value: "fill"
     * @const
     */
    "fill": "fill",

    /**
     * value: "stretch"
     * @const
     */
    "stretch": "stretch"
};


/**
 * Allowed values for the <code>numberConditionType</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['NumberConditionTypeEnum'] = {

    /**
     * value: "equals"
     * @const
     */
    "equals": "equals",

    /**
     * value: "range"
     * @const
     */
    "range": "range",

    /**
     * value: "gte"
     * @const
     */
    "gte": "gte",

    /**
     * value: "gt"
     * @const
     */
    "gt": "gt",

    /**
     * value: "lte"
     * @const
     */
    "lte": "lte",

    /**
     * value: "lt"
     * @const
     */
    "lt": "lt"
};


/**
 * Allowed values for the <code>overflow</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['OverflowEnum'] = {

    /**
     * value: "shrink_to_fit"
     * @const
     */
    "shrink_to_fit": "shrink_to_fit",

    /**
     * value: "truncate"
     * @const
     */
    "truncate": "truncate"
};


/**
 * Allowed values for the <code>shapeType</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['ShapeTypeEnum'] = {

    /**
     * value: "square"
     * @const
     */
    "square": "square",

    /**
     * value: "rectangle"
     * @const
     */
    "rectangle": "rectangle",

    /**
     * value: "circle"
     * @const
     */
    "circle": "circle",

    /**
     * value: "ellipse"
     * @const
     */
    "ellipse": "ellipse"
};


/**
 * Allowed values for the <code>stringConditionType</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['StringConditionTypeEnum'] = {

    /**
     * value: "equals"
     * @const
     */
    "equals": "equals",

    /**
     * value: "contains"
     * @const
     */
    "contains": "contains",

    /**
     * value: "starts_with"
     * @const
     */
    "starts_with": "starts_with",

    /**
     * value: "ends_with"
     * @const
     */
    "ends_with": "ends_with",

    /**
     * value: "regex"
     * @const
     */
    "regex": "regex"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['TypeEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "address"
     * @const
     */
    "address": "address",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "url"
     * @const
     */
    "url": "url",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "signature"
     * @const
     */
    "signature": "signature",

    /**
     * value: "barcode"
     * @const
     */
    "barcode": "barcode",

    /**
     * value: "combined"
     * @const
     */
    "combined": "combined"
};


/**
 * Allowed values for the <code>vAlignment</code> property.
 * @enum {String}
 * @readonly
 */
AddFieldsDataFieldsInner['VAlignmentEnum'] = {

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "center"
     * @const
     */
    "center": "center",

    /**
     * value: "top"
     * @const
     */
    "top": "top"
};



export default AddFieldsDataFieldsInner;

