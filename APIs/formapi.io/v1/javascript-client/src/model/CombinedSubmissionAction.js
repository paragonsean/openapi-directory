/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CombinedSubmissionAction model module.
 * @module model/CombinedSubmissionAction
 * @version v1
 */
class CombinedSubmissionAction {
    /**
     * Constructs a new <code>CombinedSubmissionAction</code>.
     * @alias module:model/CombinedSubmissionAction
     * @param actionCategory {module:model/CombinedSubmissionAction.ActionCategoryEnum} 
     * @param actionType {module:model/CombinedSubmissionAction.ActionTypeEnum} 
     * @param id {String} 
     * @param integrationId {String} 
     * @param resultData {Object} 
     * @param state {module:model/CombinedSubmissionAction.StateEnum} 
     */
    constructor(actionCategory, actionType, id, integrationId, resultData, state) { 
        
        CombinedSubmissionAction.initialize(this, actionCategory, actionType, id, integrationId, resultData, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionCategory, actionType, id, integrationId, resultData, state) { 
        obj['action_category'] = actionCategory;
        obj['action_type'] = actionType;
        obj['id'] = id;
        obj['integration_id'] = integrationId;
        obj['result_data'] = resultData;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>CombinedSubmissionAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CombinedSubmissionAction} obj Optional instance to populate.
     * @return {module:model/CombinedSubmissionAction} The populated <code>CombinedSubmissionAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CombinedSubmissionAction();

            if (data.hasOwnProperty('action_category')) {
                obj['action_category'] = ApiClient.convertToType(data['action_category'], 'String');
            }
            if (data.hasOwnProperty('action_type')) {
                obj['action_type'] = ApiClient.convertToType(data['action_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('integration_id')) {
                obj['integration_id'] = ApiClient.convertToType(data['integration_id'], 'String');
            }
            if (data.hasOwnProperty('result_data')) {
                obj['result_data'] = ApiClient.convertToType(data['result_data'], Object);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CombinedSubmissionAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CombinedSubmissionAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CombinedSubmissionAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action_category'] && !(typeof data['action_category'] === 'string' || data['action_category'] instanceof String)) {
            throw new Error("Expected the field `action_category` to be a primitive type in the JSON string but got " + data['action_category']);
        }
        // ensure the json data is a string
        if (data['action_type'] && !(typeof data['action_type'] === 'string' || data['action_type'] instanceof String)) {
            throw new Error("Expected the field `action_type` to be a primitive type in the JSON string but got " + data['action_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['integration_id'] && !(typeof data['integration_id'] === 'string' || data['integration_id'] instanceof String)) {
            throw new Error("Expected the field `integration_id` to be a primitive type in the JSON string but got " + data['integration_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

CombinedSubmissionAction.RequiredProperties = ["action_category", "action_type", "id", "integration_id", "result_data", "state"];

/**
 * @member {module:model/CombinedSubmissionAction.ActionCategoryEnum} action_category
 */
CombinedSubmissionAction.prototype['action_category'] = undefined;

/**
 * @member {module:model/CombinedSubmissionAction.ActionTypeEnum} action_type
 */
CombinedSubmissionAction.prototype['action_type'] = undefined;

/**
 * @member {String} id
 */
CombinedSubmissionAction.prototype['id'] = undefined;

/**
 * @member {String} integration_id
 */
CombinedSubmissionAction.prototype['integration_id'] = undefined;

/**
 * @member {Object} result_data
 */
CombinedSubmissionAction.prototype['result_data'] = undefined;

/**
 * @member {module:model/CombinedSubmissionAction.StateEnum} state
 */
CombinedSubmissionAction.prototype['state'] = undefined;





/**
 * Allowed values for the <code>action_category</code> property.
 * @enum {String}
 * @readonly
 */
CombinedSubmissionAction['ActionCategoryEnum'] = {

    /**
     * value: "notification"
     * @const
     */
    "notification": "notification",

    /**
     * value: "file_upload"
     * @const
     */
    "file_upload": "file_upload"
};


/**
 * Allowed values for the <code>action_type</code> property.
 * @enum {String}
 * @readonly
 */
CombinedSubmissionAction['ActionTypeEnum'] = {

    /**
     * value: "webhook"
     * @const
     */
    "webhook": "webhook",

    /**
     * value: "slack_webhook"
     * @const
     */
    "slack_webhook": "slack_webhook",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "aws_s3_upload"
     * @const
     */
    "aws_s3_upload": "aws_s3_upload"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CombinedSubmissionAction['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default CombinedSubmissionAction;

