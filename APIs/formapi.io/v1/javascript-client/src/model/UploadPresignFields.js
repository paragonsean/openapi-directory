/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadPresignFields model module.
 * @module model/UploadPresignFields
 * @version v1
 */
class UploadPresignFields {
    /**
     * Constructs a new <code>UploadPresignFields</code>.
     * @alias module:model/UploadPresignFields
     * @param key {String} 
     * @param policy {String} 
     * @param xAmzAlgorithm {String} 
     * @param xAmzCredential {String} 
     * @param xAmzDate {String} 
     * @param xAmzSignature {String} 
     */
    constructor(key, policy, xAmzAlgorithm, xAmzCredential, xAmzDate, xAmzSignature) { 
        
        UploadPresignFields.initialize(this, key, policy, xAmzAlgorithm, xAmzCredential, xAmzDate, xAmzSignature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, policy, xAmzAlgorithm, xAmzCredential, xAmzDate, xAmzSignature) { 
        obj['key'] = key;
        obj['policy'] = policy;
        obj['x-amz-algorithm'] = xAmzAlgorithm;
        obj['x-amz-credential'] = xAmzCredential;
        obj['x-amz-date'] = xAmzDate;
        obj['x-amz-signature'] = xAmzSignature;
    }

    /**
     * Constructs a <code>UploadPresignFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadPresignFields} obj Optional instance to populate.
     * @return {module:model/UploadPresignFields} The populated <code>UploadPresignFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadPresignFields();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('x-amz-algorithm')) {
                obj['x-amz-algorithm'] = ApiClient.convertToType(data['x-amz-algorithm'], 'String');
            }
            if (data.hasOwnProperty('x-amz-credential')) {
                obj['x-amz-credential'] = ApiClient.convertToType(data['x-amz-credential'], 'String');
            }
            if (data.hasOwnProperty('x-amz-date')) {
                obj['x-amz-date'] = ApiClient.convertToType(data['x-amz-date'], 'String');
            }
            if (data.hasOwnProperty('x-amz-signature')) {
                obj['x-amz-signature'] = ApiClient.convertToType(data['x-amz-signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadPresignFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadPresignFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadPresignFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['policy'] && !(typeof data['policy'] === 'string' || data['policy'] instanceof String)) {
            throw new Error("Expected the field `policy` to be a primitive type in the JSON string but got " + data['policy']);
        }
        // ensure the json data is a string
        if (data['x-amz-algorithm'] && !(typeof data['x-amz-algorithm'] === 'string' || data['x-amz-algorithm'] instanceof String)) {
            throw new Error("Expected the field `x-amz-algorithm` to be a primitive type in the JSON string but got " + data['x-amz-algorithm']);
        }
        // ensure the json data is a string
        if (data['x-amz-credential'] && !(typeof data['x-amz-credential'] === 'string' || data['x-amz-credential'] instanceof String)) {
            throw new Error("Expected the field `x-amz-credential` to be a primitive type in the JSON string but got " + data['x-amz-credential']);
        }
        // ensure the json data is a string
        if (data['x-amz-date'] && !(typeof data['x-amz-date'] === 'string' || data['x-amz-date'] instanceof String)) {
            throw new Error("Expected the field `x-amz-date` to be a primitive type in the JSON string but got " + data['x-amz-date']);
        }
        // ensure the json data is a string
        if (data['x-amz-signature'] && !(typeof data['x-amz-signature'] === 'string' || data['x-amz-signature'] instanceof String)) {
            throw new Error("Expected the field `x-amz-signature` to be a primitive type in the JSON string but got " + data['x-amz-signature']);
        }

        return true;
    }


}

UploadPresignFields.RequiredProperties = ["key", "policy", "x-amz-algorithm", "x-amz-credential", "x-amz-date", "x-amz-signature"];

/**
 * @member {String} key
 */
UploadPresignFields.prototype['key'] = undefined;

/**
 * @member {String} policy
 */
UploadPresignFields.prototype['policy'] = undefined;

/**
 * @member {String} x-amz-algorithm
 */
UploadPresignFields.prototype['x-amz-algorithm'] = undefined;

/**
 * @member {String} x-amz-credential
 */
UploadPresignFields.prototype['x-amz-credential'] = undefined;

/**
 * @member {String} x-amz-date
 */
UploadPresignFields.prototype['x-amz-date'] = undefined;

/**
 * @member {String} x-amz-signature
 */
UploadPresignFields.prototype['x-amz-signature'] = undefined;






export default UploadPresignFields;

