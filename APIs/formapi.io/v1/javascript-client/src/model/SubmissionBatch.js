/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Submission from './Submission';

/**
 * The SubmissionBatch model module.
 * @module model/SubmissionBatch
 * @version v1
 */
class SubmissionBatch {
    /**
     * Constructs a new <code>SubmissionBatch</code>.
     * @alias module:model/SubmissionBatch
     * @param completionPercentage {Number} 
     * @param errorCount {Number} 
     * @param id {String} 
     * @param metadata {Object} 
     * @param pendingCount {Number} 
     * @param processedAt {String} 
     * @param state {module:model/SubmissionBatch.StateEnum} 
     * @param totalCount {Number} 
     */
    constructor(completionPercentage, errorCount, id, metadata, pendingCount, processedAt, state, totalCount) { 
        
        SubmissionBatch.initialize(this, completionPercentage, errorCount, id, metadata, pendingCount, processedAt, state, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, completionPercentage, errorCount, id, metadata, pendingCount, processedAt, state, totalCount) { 
        obj['completion_percentage'] = completionPercentage;
        obj['error_count'] = errorCount;
        obj['id'] = id;
        obj['metadata'] = metadata;
        obj['pending_count'] = pendingCount;
        obj['processed_at'] = processedAt;
        obj['state'] = state;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>SubmissionBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmissionBatch} obj Optional instance to populate.
     * @return {module:model/SubmissionBatch} The populated <code>SubmissionBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmissionBatch();

            if (data.hasOwnProperty('completion_percentage')) {
                obj['completion_percentage'] = ApiClient.convertToType(data['completion_percentage'], 'Number');
            }
            if (data.hasOwnProperty('error_count')) {
                obj['error_count'] = ApiClient.convertToType(data['error_count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('pending_count')) {
                obj['pending_count'] = ApiClient.convertToType(data['pending_count'], 'Number');
            }
            if (data.hasOwnProperty('processed_at')) {
                obj['processed_at'] = ApiClient.convertToType(data['processed_at'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submissions')) {
                obj['submissions'] = ApiClient.convertToType(data['submissions'], [Submission]);
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmissionBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmissionBatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmissionBatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['processed_at'] && !(typeof data['processed_at'] === 'string' || data['processed_at'] instanceof String)) {
            throw new Error("Expected the field `processed_at` to be a primitive type in the JSON string but got " + data['processed_at']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['submissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['submissions'])) {
                throw new Error("Expected the field `submissions` to be an array in the JSON data but got " + data['submissions']);
            }
            // validate the optional field `submissions` (array)
            for (const item of data['submissions']) {
                Submission.validateJSON(item);
            };
        }

        return true;
    }


}

SubmissionBatch.RequiredProperties = ["completion_percentage", "error_count", "id", "metadata", "pending_count", "processed_at", "state", "total_count"];

/**
 * @member {Number} completion_percentage
 */
SubmissionBatch.prototype['completion_percentage'] = undefined;

/**
 * @member {Number} error_count
 */
SubmissionBatch.prototype['error_count'] = undefined;

/**
 * @member {String} id
 */
SubmissionBatch.prototype['id'] = undefined;

/**
 * @member {Object} metadata
 */
SubmissionBatch.prototype['metadata'] = undefined;

/**
 * @member {Number} pending_count
 */
SubmissionBatch.prototype['pending_count'] = undefined;

/**
 * @member {String} processed_at
 */
SubmissionBatch.prototype['processed_at'] = undefined;

/**
 * @member {module:model/SubmissionBatch.StateEnum} state
 */
SubmissionBatch.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/Submission>} submissions
 */
SubmissionBatch.prototype['submissions'] = undefined;

/**
 * @member {Number} total_count
 */
SubmissionBatch.prototype['total_count'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SubmissionBatch['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default SubmissionBatch;

