/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubmissionDataBatchRequest model module.
 * @module model/SubmissionDataBatchRequest
 * @version v1
 */
class SubmissionDataBatchRequest {
    /**
     * Constructs a new <code>SubmissionDataBatchRequest</code>.
     * @alias module:model/SubmissionDataBatchRequest
     * @param data {Object} 
     * @param templateId {String} 
     */
    constructor(data, templateId) { 
        
        SubmissionDataBatchRequest.initialize(this, data, templateId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, templateId) { 
        obj['data'] = data;
        obj['template_id'] = templateId;
    }

    /**
     * Constructs a <code>SubmissionDataBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmissionDataBatchRequest} obj Optional instance to populate.
     * @return {module:model/SubmissionDataBatchRequest} The populated <code>SubmissionDataBatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmissionDataBatchRequest();

            if (data.hasOwnProperty('css')) {
                obj['css'] = ApiClient.convertToType(data['css'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmissionDataBatchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmissionDataBatchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmissionDataBatchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['css'] && !(typeof data['css'] === 'string' || data['css'] instanceof String)) {
            throw new Error("Expected the field `css` to be a primitive type in the JSON string but got " + data['css']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['template_id'] && !(typeof data['template_id'] === 'string' || data['template_id'] instanceof String)) {
            throw new Error("Expected the field `template_id` to be a primitive type in the JSON string but got " + data['template_id']);
        }

        return true;
    }


}

SubmissionDataBatchRequest.RequiredProperties = ["data", "template_id"];

/**
 * @member {String} css
 */
SubmissionDataBatchRequest.prototype['css'] = undefined;

/**
 * @member {Object} data
 */
SubmissionDataBatchRequest.prototype['data'] = undefined;

/**
 * @member {String} html
 */
SubmissionDataBatchRequest.prototype['html'] = undefined;

/**
 * @member {Object} metadata
 */
SubmissionDataBatchRequest.prototype['metadata'] = undefined;

/**
 * @member {String} template_id
 */
SubmissionDataBatchRequest.prototype['template_id'] = undefined;

/**
 * @member {Boolean} test
 */
SubmissionDataBatchRequest.prototype['test'] = undefined;






export default SubmissionDataBatchRequest;

