/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FullTemplateDefaults model module.
 * @module model/FullTemplateDefaults
 * @version v1
 */
class FullTemplateDefaults {
    /**
     * Constructs a new <code>FullTemplateDefaults</code>.
     * @alias module:model/FullTemplateDefaults
     * @param color {String} 
     * @param fontSize {Number} 
     * @param typeface {String} 
     */
    constructor(color, fontSize, typeface) { 
        
        FullTemplateDefaults.initialize(this, color, fontSize, typeface);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, fontSize, typeface) { 
        obj['color'] = color;
        obj['fontSize'] = fontSize;
        obj['typeface'] = typeface;
    }

    /**
     * Constructs a <code>FullTemplateDefaults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FullTemplateDefaults} obj Optional instance to populate.
     * @return {module:model/FullTemplateDefaults} The populated <code>FullTemplateDefaults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FullTemplateDefaults();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
            }
            if (data.hasOwnProperty('typeface')) {
                obj['typeface'] = ApiClient.convertToType(data['typeface'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FullTemplateDefaults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FullTemplateDefaults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FullTemplateDefaults.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['typeface'] && !(typeof data['typeface'] === 'string' || data['typeface'] instanceof String)) {
            throw new Error("Expected the field `typeface` to be a primitive type in the JSON string but got " + data['typeface']);
        }

        return true;
    }


}

FullTemplateDefaults.RequiredProperties = ["color", "fontSize", "typeface"];

/**
 * @member {String} color
 */
FullTemplateDefaults.prototype['color'] = undefined;

/**
 * @member {Number} fontSize
 */
FullTemplateDefaults.prototype['fontSize'] = undefined;

/**
 * @member {String} typeface
 */
FullTemplateDefaults.prototype['typeface'] = undefined;






export default FullTemplateDefaults;

