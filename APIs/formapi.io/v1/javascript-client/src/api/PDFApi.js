/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddFieldsData from '../model/AddFieldsData';
import AddFieldsTemplateResponse from '../model/AddFieldsTemplateResponse';
import AuthenticationError from '../model/AuthenticationError';
import AuthenticationSuccessResponse from '../model/AuthenticationSuccessResponse';
import CombinePdfsData from '../model/CombinePdfsData';
import CombinedSubmission from '../model/CombinedSubmission';
import CombinedSubmissionData from '../model/CombinedSubmissionData';
import CopyTemplateData from '../model/CopyTemplateData';
import CreateCombinedSubmissionResponse from '../model/CreateCombinedSubmissionResponse';
import CreateCustomFileData from '../model/CreateCustomFileData';
import CreateCustomFileResponse from '../model/CreateCustomFileResponse';
import CreateFolderData from '../model/CreateFolderData';
import CreateHtmlTemplateData from '../model/CreateHtmlTemplateData';
import CreateSubmissionBatchResponse from '../model/CreateSubmissionBatchResponse';
import CreateSubmissionDataRequestTokenResponse from '../model/CreateSubmissionDataRequestTokenResponse';
import CreateSubmissionResponse from '../model/CreateSubmissionResponse';
import CreateSubmissionResponse1 from '../model/CreateSubmissionResponse1';
import CreateTemplateFromUploadData from '../model/CreateTemplateFromUploadData';
import Error from '../model/Error';
import Folder from '../model/Folder';
import FullTemplate from '../model/FullTemplate';
import InvalidRequest from '../model/InvalidRequest';
import ListSubmissionsResponse from '../model/ListSubmissionsResponse';
import MoveFolderData from '../model/MoveFolderData';
import MoveTemplateData from '../model/MoveTemplateData';
import PendingTemplate from '../model/PendingTemplate';
import RenameFolderData from '../model/RenameFolderData';
import Submission from '../model/Submission';
import SubmissionBatch from '../model/SubmissionBatch';
import SubmissionBatchData from '../model/SubmissionBatchData';
import SubmissionData from '../model/SubmissionData';
import SubmissionDataRequest from '../model/SubmissionDataRequest';
import Template from '../model/Template';
import TemplateSchema from '../model/TemplateSchema';
import UpdateDataRequestResponse from '../model/UpdateDataRequestResponse';
import UpdateSubmissionDataRequestData from '../model/UpdateSubmissionDataRequestData';
import UpdateTemplateData from '../model/UpdateTemplateData';
import UpdateTemplateResponse from '../model/UpdateTemplateResponse';
import UploadPresign from '../model/UploadPresign';

/**
* PDF service.
* @module api/PDFApi
* @version v1
*/
export default class PDFApi {

    /**
    * Constructs a new PDFApi. 
    * @alias module:api/PDFApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFieldsToTemplate operation.
     * @callback module:api/PDFApi~addFieldsToTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFieldsTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new fields to a Template
     * @param {String} templateId 
     * @param {module:model/AddFieldsData} addFieldsData 
     * @param {module:api/PDFApi~addFieldsToTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFieldsTemplateResponse}
     */
    addFieldsToTemplate(templateId, addFieldsData, callback) {
      let postBody = addFieldsData;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling addFieldsToTemplate");
      }
      // verify the required parameter 'addFieldsData' is set
      if (addFieldsData === undefined || addFieldsData === null) {
        throw new Error("Missing the required parameter 'addFieldsData' when calling addFieldsToTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFieldsTemplateResponse;
      return this.apiClient.callApi(
        '/templates/{template_id}/add_fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGeneratePdfV1 operation.
     * @callback module:api/PDFApi~batchGeneratePdfV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateSubmissionResponse1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates multiple PDFs
     * @param {String} templateId 
     * @param {Object} requestBody 
     * @param {module:api/PDFApi~batchGeneratePdfV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateSubmissionResponse1>}
     */
    batchGeneratePdfV1(templateId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling batchGeneratePdfV1");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling batchGeneratePdfV1");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreateSubmissionResponse1];
      return this.apiClient.callApi(
        '/templates/{template_id}/submissions/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGeneratePdfs operation.
     * @callback module:api/PDFApi~batchGeneratePdfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates multiple PDFs
     * @param {module:model/SubmissionBatchData} submissionBatchData 
     * @param {module:api/PDFApi~batchGeneratePdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionBatchResponse}
     */
    batchGeneratePdfs(submissionBatchData, callback) {
      let postBody = submissionBatchData;
      // verify the required parameter 'submissionBatchData' is set
      if (submissionBatchData === undefined || submissionBatchData === null) {
        throw new Error("Missing the required parameter 'submissionBatchData' when calling batchGeneratePdfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSubmissionBatchResponse;
      return this.apiClient.callApi(
        '/submissions/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combinePdfs operation.
     * @callback module:api/PDFApi~combinePdfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCombinedSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge submission PDFs, template PDFs, or custom files
     * @param {module:model/CombinePdfsData} combinePdfsData 
     * @param {module:api/PDFApi~combinePdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCombinedSubmissionResponse}
     */
    combinePdfs(combinePdfsData, callback) {
      let postBody = combinePdfsData;
      // verify the required parameter 'combinePdfsData' is set
      if (combinePdfsData === undefined || combinePdfsData === null) {
        throw new Error("Missing the required parameter 'combinePdfsData' when calling combinePdfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCombinedSubmissionResponse;
      return this.apiClient.callApi(
        '/combined_submissions?v=2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the combineSubmissions operation.
     * @callback module:api/PDFApi~combineSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCombinedSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge generated PDFs together
     * @param {module:model/CombinedSubmissionData} combinedSubmissionData 
     * @param {module:api/PDFApi~combineSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCombinedSubmissionResponse}
     */
    combineSubmissions(combinedSubmissionData, callback) {
      let postBody = combinedSubmissionData;
      // verify the required parameter 'combinedSubmissionData' is set
      if (combinedSubmissionData === undefined || combinedSubmissionData === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionData' when calling combineSubmissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCombinedSubmissionResponse;
      return this.apiClient.callApi(
        '/combined_submissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyTemplate operation.
     * @callback module:api/PDFApi~copyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a Template
     * @param {String} templateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CopyTemplateData} [copyTemplateData] 
     * @param {module:api/PDFApi~copyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    copyTemplate(templateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyTemplateData'];
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling copyTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/{template_id}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomFileFromUpload operation.
     * @callback module:api/PDFApi~createCustomFileFromUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new custom file from a cached presign upload
     * @param {module:model/CreateCustomFileData} createCustomFileData 
     * @param {module:api/PDFApi~createCustomFileFromUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomFileResponse}
     */
    createCustomFileFromUpload(createCustomFileData, callback) {
      let postBody = createCustomFileData;
      // verify the required parameter 'createCustomFileData' is set
      if (createCustomFileData === undefined || createCustomFileData === null) {
        throw new Error("Missing the required parameter 'createCustomFileData' when calling createCustomFileFromUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomFileResponse;
      return this.apiClient.callApi(
        '/custom_files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataRequestToken operation.
     * @callback module:api/PDFApi~createDataRequestTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionDataRequestTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new data request token for form authentication
     * @param {String} dataRequestId 
     * @param {module:api/PDFApi~createDataRequestTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionDataRequestTokenResponse}
     */
    createDataRequestToken(dataRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'dataRequestId' is set
      if (dataRequestId === undefined || dataRequestId === null) {
        throw new Error("Missing the required parameter 'dataRequestId' when calling createDataRequestToken");
      }

      let pathParams = {
        'data_request_id': dataRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateSubmissionDataRequestTokenResponse;
      return this.apiClient.callApi(
        '/data_requests/{data_request_id}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/PDFApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a folder
     * @param {module:model/CreateFolderData} createFolderData 
     * @param {module:api/PDFApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    createFolder(createFolderData, callback) {
      let postBody = createFolderData;
      // verify the required parameter 'createFolderData' is set
      if (createFolderData === undefined || createFolderData === null) {
        throw new Error("Missing the required parameter 'createFolderData' when calling createFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/folders/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHTMLTemplate operation.
     * @callback module:api/PDFApi~createHTMLTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new HTML template
     * @param {module:model/CreateHtmlTemplateData} createHtmlTemplateData 
     * @param {module:api/PDFApi~createHTMLTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTemplate}
     */
    createHTMLTemplate(createHtmlTemplateData, callback) {
      let postBody = createHtmlTemplateData;
      // verify the required parameter 'createHtmlTemplateData' is set
      if (createHtmlTemplateData === undefined || createHtmlTemplateData === null) {
        throw new Error("Missing the required parameter 'createHtmlTemplateData' when calling createHTMLTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PendingTemplate;
      return this.apiClient.callApi(
        '/templates?desc=html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPDFTemplate operation.
     * @callback module:api/PDFApi~createPDFTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new PDF template with a form POST file upload
     * @param {File} templateDocument 
     * @param {String} templateName 
     * @param {Object} opts Optional parameters
     * @param {String} [templateParentFolderId] 
     * @param {module:api/PDFApi~createPDFTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTemplate}
     */
    createPDFTemplate(templateDocument, templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateDocument' is set
      if (templateDocument === undefined || templateDocument === null) {
        throw new Error("Missing the required parameter 'templateDocument' when calling createPDFTemplate");
      }
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createPDFTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'template[document]': templateDocument,
        'template[name]': templateName,
        'template[parent_folder_id]': opts['templateParentFolderId']
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PendingTemplate;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPDFTemplateFromUpload operation.
     * @callback module:api/PDFApi~createPDFTemplateFromUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new PDF template from a cached presign upload
     * @param {module:model/CreateTemplateFromUploadData} createTemplateFromUploadData 
     * @param {module:api/PDFApi~createPDFTemplateFromUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTemplate}
     */
    createPDFTemplateFromUpload(createTemplateFromUploadData, callback) {
      let postBody = createTemplateFromUploadData;
      // verify the required parameter 'createTemplateFromUploadData' is set
      if (createTemplateFromUploadData === undefined || createTemplateFromUploadData === null) {
        throw new Error("Missing the required parameter 'createTemplateFromUploadData' when calling createPDFTemplateFromUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PendingTemplate;
      return this.apiClient.callApi(
        '/templates?desc=cached_upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolder operation.
     * @callback module:api/PDFApi~deleteFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a folder
     * @param {String} folderId 
     * @param {module:api/PDFApi~deleteFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    deleteFolder(folderId, callback) {
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteFolder");
      }

      let pathParams = {
        'folder_id': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/folders/{folder_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expireCombinedSubmission operation.
     * @callback module:api/PDFApi~expireCombinedSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombinedSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire a combined submission
     * @param {String} combinedSubmissionId 
     * @param {module:api/PDFApi~expireCombinedSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombinedSubmission}
     */
    expireCombinedSubmission(combinedSubmissionId, callback) {
      let postBody = null;
      // verify the required parameter 'combinedSubmissionId' is set
      if (combinedSubmissionId === undefined || combinedSubmissionId === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionId' when calling expireCombinedSubmission");
      }

      let pathParams = {
        'combined_submission_id': combinedSubmissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CombinedSubmission;
      return this.apiClient.callApi(
        '/combined_submissions/{combined_submission_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expireSubmission operation.
     * @callback module:api/PDFApi~expireSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire a PDF submission
     * @param {String} submissionId 
     * @param {module:api/PDFApi~expireSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    expireSubmission(submissionId, callback) {
      let postBody = null;
      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling expireSubmission");
      }

      let pathParams = {
        'submission_id': submissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Submission;
      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePDF operation.
     * @callback module:api/PDFApi~generatePDFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new PDF
     * @param {String} templateId 
     * @param {module:model/SubmissionData} submissionData 
     * @param {module:api/PDFApi~generatePDFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionResponse}
     */
    generatePDF(templateId, submissionData, callback) {
      let postBody = submissionData;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling generatePDF");
      }
      // verify the required parameter 'submissionData' is set
      if (submissionData === undefined || submissionData === null) {
        throw new Error("Missing the required parameter 'submissionData' when calling generatePDF");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSubmissionResponse;
      return this.apiClient.callApi(
        '/templates/{template_id}/submissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCombinedSubmission operation.
     * @callback module:api/PDFApi~getCombinedSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombinedSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a combined submission (merged PDFs)
     * @param {String} combinedSubmissionId 
     * @param {module:api/PDFApi~getCombinedSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombinedSubmission}
     */
    getCombinedSubmission(combinedSubmissionId, callback) {
      let postBody = null;
      // verify the required parameter 'combinedSubmissionId' is set
      if (combinedSubmissionId === undefined || combinedSubmissionId === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionId' when calling getCombinedSubmission");
      }

      let pathParams = {
        'combined_submission_id': combinedSubmissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CombinedSubmission;
      return this.apiClient.callApi(
        '/combined_submissions/{combined_submission_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataRequest operation.
     * @callback module:api/PDFApi~getDataRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionDataRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Look up a submission data request
     * @param {String} dataRequestId 
     * @param {module:api/PDFApi~getDataRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmissionDataRequest}
     */
    getDataRequest(dataRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'dataRequestId' is set
      if (dataRequestId === undefined || dataRequestId === null) {
        throw new Error("Missing the required parameter 'dataRequestId' when calling getDataRequest");
      }

      let pathParams = {
        'data_request_id': dataRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubmissionDataRequest;
      return this.apiClient.callApi(
        '/data_requests/{data_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullTemplate operation.
     * @callback module:api/PDFApi~getFullTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the full template attributes
     * @param {String} templateId 
     * @param {module:api/PDFApi~getFullTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullTemplate}
     */
    getFullTemplate(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getFullTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullTemplate;
      return this.apiClient.callApi(
        '/templates/{template_id}?full=true', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPresignUrl operation.
     * @callback module:api/PDFApi~getPresignUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadPresign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket
     * @param {module:api/PDFApi~getPresignUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadPresign}
     */
    getPresignUrl(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadPresign;
      return this.apiClient.callApi(
        '/uploads/presign', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmission operation.
     * @callback module:api/PDFApi~getSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a PDF
     * @param {String} submissionId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeData] 
     * @param {module:api/PDFApi~getSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    getSubmission(submissionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmission");
      }

      let pathParams = {
        'submission_id': submissionId
      };
      let queryParams = {
        'include_data': opts['includeData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Submission;
      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionBatch operation.
     * @callback module:api/PDFApi~getSubmissionBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a submission batch job
     * @param {String} submissionBatchId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeSubmissions] 
     * @param {module:api/PDFApi~getSubmissionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmissionBatch}
     */
    getSubmissionBatch(submissionBatchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'submissionBatchId' is set
      if (submissionBatchId === undefined || submissionBatchId === null) {
        throw new Error("Missing the required parameter 'submissionBatchId' when calling getSubmissionBatch");
      }

      let pathParams = {
        'submission_batch_id': submissionBatchId
      };
      let queryParams = {
        'include_submissions': opts['includeSubmissions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubmissionBatch;
      return this.apiClient.callApi(
        '/submissions/batches/{submission_batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplate operation.
     * @callback module:api/PDFApi~getTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of an uploaded template
     * @param {String} templateId 
     * @param {module:api/PDFApi~getTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    getTemplate(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/{template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateSchema operation.
     * @callback module:api/PDFApi~getTemplateSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the JSON schema for a template
     * @param {String} templateId 
     * @param {module:api/PDFApi~getTemplateSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateSchema}
     */
    getTemplateSchema(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateSchema");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateSchema;
      return this.apiClient.callApi(
        '/templates/{template_id}/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCombinedSubmissions operation.
     * @callback module:api/PDFApi~listCombinedSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CombinedSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all combined submissions
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Default: 1
     * @param {Number} [perPage] Default: 50
     * @param {module:api/PDFApi~listCombinedSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CombinedSubmission>}
     */
    listCombinedSubmissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CombinedSubmission];
      return this.apiClient.callApi(
        '/combined_submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFolders operation.
     * @callback module:api/PDFApi~listFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Folder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all folders
     * @param {Object} opts Optional parameters
     * @param {String} [parentFolderId] Filter By Folder Id
     * @param {module:api/PDFApi~listFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Folder>}
     */
    listFolders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'parent_folder_id': opts['parentFolderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Folder];
      return this.apiClient.callApi(
        '/folders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubmissions operation.
     * @callback module:api/PDFApi~listSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all submissions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [createdAfter] 
     * @param {String} [createdBefore] 
     * @param {String} [type] 
     * @param {Boolean} [includeData] 
     * @param {module:api/PDFApi~listSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubmissionsResponse}
     */
    listSubmissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'type': opts['type'],
        'include_data': opts['includeData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubmissionsResponse;
      return this.apiClient.callApi(
        '/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplates operation.
     * @callback module:api/PDFApi~listTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all templates
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search By Name
     * @param {String} [parentFolderId] Filter By Folder Id
     * @param {Number} [page] Default: 1
     * @param {Number} [perPage] Default: 50
     * @param {module:api/PDFApi~listTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    listTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'parent_folder_id': opts['parentFolderId'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFolderToFolder operation.
     * @callback module:api/PDFApi~moveFolderToFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a folder
     * @param {String} folderId 
     * @param {module:model/MoveFolderData} moveFolderData 
     * @param {module:api/PDFApi~moveFolderToFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    moveFolderToFolder(folderId, moveFolderData, callback) {
      let postBody = moveFolderData;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling moveFolderToFolder");
      }
      // verify the required parameter 'moveFolderData' is set
      if (moveFolderData === undefined || moveFolderData === null) {
        throw new Error("Missing the required parameter 'moveFolderData' when calling moveFolderToFolder");
      }

      let pathParams = {
        'folder_id': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/folders/{folder_id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveTemplateToFolder operation.
     * @callback module:api/PDFApi~moveTemplateToFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move Template to folder
     * @param {String} templateId 
     * @param {module:model/MoveTemplateData} moveTemplateData 
     * @param {module:api/PDFApi~moveTemplateToFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    moveTemplateToFolder(templateId, moveTemplateData, callback) {
      let postBody = moveTemplateData;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling moveTemplateToFolder");
      }
      // verify the required parameter 'moveTemplateData' is set
      if (moveTemplateData === undefined || moveTemplateData === null) {
        throw new Error("Missing the required parameter 'moveTemplateData' when calling moveTemplateToFolder");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/templates/{template_id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameFolder operation.
     * @callback module:api/PDFApi~renameFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a folder
     * @param {String} folderId 
     * @param {module:model/RenameFolderData} renameFolderData 
     * @param {module:api/PDFApi~renameFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameFolder(folderId, renameFolderData, callback) {
      let postBody = renameFolderData;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling renameFolder");
      }
      // verify the required parameter 'renameFolderData' is set
      if (renameFolderData === undefined || renameFolderData === null) {
        throw new Error("Missing the required parameter 'renameFolderData' when calling renameFolder");
      }

      let pathParams = {
        'folder_id': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/folders/{folder_id}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTemplateIdSubmissionsGet operation.
     * @callback module:api/PDFApi~templatesTemplateIdSubmissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all submissions for a given template
     * @param {String} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [createdAfter] 
     * @param {String} [createdBefore] 
     * @param {String} [type] 
     * @param {Boolean} [includeData] 
     * @param {module:api/PDFApi~templatesTemplateIdSubmissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubmissionsResponse}
     */
    templatesTemplateIdSubmissionsGet(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatesTemplateIdSubmissionsGet");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'type': opts['type'],
        'include_data': opts['includeData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubmissionsResponse;
      return this.apiClient.callApi(
        '/templates/{template_id}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testAuthentication operation.
     * @callback module:api/PDFApi~testAuthenticationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Authentication
     * @param {module:api/PDFApi~testAuthenticationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationSuccessResponse}
     */
    testAuthentication(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationSuccessResponse;
      return this.apiClient.callApi(
        '/authentication', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataRequest operation.
     * @callback module:api/PDFApi~updateDataRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDataRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a submission data request
     * @param {String} dataRequestId 
     * @param {module:model/UpdateSubmissionDataRequestData} updateSubmissionDataRequestData 
     * @param {module:api/PDFApi~updateDataRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDataRequestResponse}
     */
    updateDataRequest(dataRequestId, updateSubmissionDataRequestData, callback) {
      let postBody = updateSubmissionDataRequestData;
      // verify the required parameter 'dataRequestId' is set
      if (dataRequestId === undefined || dataRequestId === null) {
        throw new Error("Missing the required parameter 'dataRequestId' when calling updateDataRequest");
      }
      // verify the required parameter 'updateSubmissionDataRequestData' is set
      if (updateSubmissionDataRequestData === undefined || updateSubmissionDataRequestData === null) {
        throw new Error("Missing the required parameter 'updateSubmissionDataRequestData' when calling updateDataRequest");
      }

      let pathParams = {
        'data_request_id': dataRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDataRequestResponse;
      return this.apiClient.callApi(
        '/data_requests/{data_request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplate operation.
     * @callback module:api/PDFApi~updateTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Template
     * @param {String} templateId 
     * @param {module:model/UpdateTemplateData} updateTemplateData 
     * @param {module:api/PDFApi~updateTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTemplateResponse}
     */
    updateTemplate(templateId, updateTemplateData, callback) {
      let postBody = updateTemplateData;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling updateTemplate");
      }
      // verify the required parameter 'updateTemplateData' is set
      if (updateTemplateData === undefined || updateTemplateData === null) {
        throw new Error("Missing the required parameter 'updateTemplateData' when calling updateTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_token_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTemplateResponse;
      return this.apiClient.callApi(
        '/templates/{template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
