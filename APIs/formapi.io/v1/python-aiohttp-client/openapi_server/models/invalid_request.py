# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvalidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[str]=None, status: str=None):
        """InvalidRequest - a model defined in OpenAPI

        :param errors: The errors of this InvalidRequest.
        :param status: The status of this InvalidRequest.
        """
        self.openapi_types = {
            'errors': List[str],
            'status': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'status': 'status'
        }

        self._errors = errors
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvalidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The invalid_request of this InvalidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this InvalidRequest.


        :return: The errors of this InvalidRequest.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InvalidRequest.


        :param errors: The errors of this InvalidRequest.
        :type errors: List[str]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this InvalidRequest.


        :return: The status of this InvalidRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvalidRequest.


        :param status: The status of this InvalidRequest.
        :type status: str
        """
        allowed_values = ["error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
