# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.submission import Submission
from openapi_server import util


class ListSubmissionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: float=None, next_cursor: str=None, submissions: List[Submission]=None):
        """ListSubmissionsResponse - a model defined in OpenAPI

        :param limit: The limit of this ListSubmissionsResponse.
        :param next_cursor: The next_cursor of this ListSubmissionsResponse.
        :param submissions: The submissions of this ListSubmissionsResponse.
        """
        self.openapi_types = {
            'limit': float,
            'next_cursor': str,
            'submissions': List[Submission]
        }

        self.attribute_map = {
            'limit': 'limit',
            'next_cursor': 'next_cursor',
            'submissions': 'submissions'
        }

        self._limit = limit
        self._next_cursor = next_cursor
        self._submissions = submissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListSubmissionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_submissions_response of this ListSubmissionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this ListSubmissionsResponse.


        :return: The limit of this ListSubmissionsResponse.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListSubmissionsResponse.


        :param limit: The limit of this ListSubmissionsResponse.
        :type limit: float
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def next_cursor(self):
        """Gets the next_cursor of this ListSubmissionsResponse.


        :return: The next_cursor of this ListSubmissionsResponse.
        :rtype: str
        """
        return self._next_cursor

    @next_cursor.setter
    def next_cursor(self, next_cursor):
        """Sets the next_cursor of this ListSubmissionsResponse.


        :param next_cursor: The next_cursor of this ListSubmissionsResponse.
        :type next_cursor: str
        """
        if next_cursor is None:
            raise ValueError("Invalid value for `next_cursor`, must not be `None`")

        self._next_cursor = next_cursor

    @property
    def submissions(self):
        """Gets the submissions of this ListSubmissionsResponse.


        :return: The submissions of this ListSubmissionsResponse.
        :rtype: List[Submission]
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this ListSubmissionsResponse.


        :param submissions: The submissions of this ListSubmissionsResponse.
        :type submissions: List[Submission]
        """
        if submissions is None:
            raise ValueError("Invalid value for `submissions`, must not be `None`")

        self._submissions = submissions
