# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_data import TemplateData
from openapi_server import util


class UpdateTemplateData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template: TemplateData=None):
        """UpdateTemplateData - a model defined in OpenAPI

        :param template: The template of this UpdateTemplateData.
        """
        self.openapi_types = {
            'template': TemplateData
        }

        self.attribute_map = {
            'template': 'template'
        }

        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTemplateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The update_template_data of this UpdateTemplateData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self):
        """Gets the template of this UpdateTemplateData.


        :return: The template of this UpdateTemplateData.
        :rtype: TemplateData
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this UpdateTemplateData.


        :param template: The template of this UpdateTemplateData.
        :type template: TemplateData
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template
