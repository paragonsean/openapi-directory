# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _schema: str=None, additional_properties: bool=None, definitions: object=None, description: str=None, id: str=None, properties: object=None, required: List[object]=None, title: str=None, type: str=None):
        """TemplateSchema - a model defined in OpenAPI

        :param _schema: The _schema of this TemplateSchema.
        :param additional_properties: The additional_properties of this TemplateSchema.
        :param definitions: The definitions of this TemplateSchema.
        :param description: The description of this TemplateSchema.
        :param id: The id of this TemplateSchema.
        :param properties: The properties of this TemplateSchema.
        :param required: The required of this TemplateSchema.
        :param title: The title of this TemplateSchema.
        :param type: The type of this TemplateSchema.
        """
        self.openapi_types = {
            '_schema': str,
            'additional_properties': bool,
            'definitions': object,
            'description': str,
            'id': str,
            'properties': object,
            'required': List[object],
            'title': str,
            'type': str
        }

        self.attribute_map = {
            '_schema': '$schema',
            'additional_properties': 'additionalProperties',
            'definitions': 'definitions',
            'description': 'description',
            'id': 'id',
            'properties': 'properties',
            'required': 'required',
            'title': 'title',
            'type': 'type'
        }

        self.__schema = _schema
        self._additional_properties = additional_properties
        self._definitions = definitions
        self._description = description
        self._id = id
        self._properties = properties
        self._required = required
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The template_schema of this TemplateSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _schema(self):
        """Gets the _schema of this TemplateSchema.


        :return: The _schema of this TemplateSchema.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this TemplateSchema.


        :param _schema: The _schema of this TemplateSchema.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def additional_properties(self):
        """Gets the additional_properties of this TemplateSchema.


        :return: The additional_properties of this TemplateSchema.
        :rtype: bool
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this TemplateSchema.


        :param additional_properties: The additional_properties of this TemplateSchema.
        :type additional_properties: bool
        """

        self._additional_properties = additional_properties

    @property
    def definitions(self):
        """Gets the definitions of this TemplateSchema.


        :return: The definitions of this TemplateSchema.
        :rtype: object
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this TemplateSchema.


        :param definitions: The definitions of this TemplateSchema.
        :type definitions: object
        """

        self._definitions = definitions

    @property
    def description(self):
        """Gets the description of this TemplateSchema.


        :return: The description of this TemplateSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateSchema.


        :param description: The description of this TemplateSchema.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TemplateSchema.


        :return: The id of this TemplateSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateSchema.


        :param id: The id of this TemplateSchema.
        :type id: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this TemplateSchema.


        :return: The properties of this TemplateSchema.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TemplateSchema.


        :param properties: The properties of this TemplateSchema.
        :type properties: object
        """

        self._properties = properties

    @property
    def required(self):
        """Gets the required of this TemplateSchema.


        :return: The required of this TemplateSchema.
        :rtype: List[object]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TemplateSchema.


        :param required: The required of this TemplateSchema.
        :type required: List[object]
        """

        self._required = required

    @property
    def title(self):
        """Gets the title of this TemplateSchema.


        :return: The title of this TemplateSchema.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplateSchema.


        :param title: The title of this TemplateSchema.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this TemplateSchema.


        :return: The type of this TemplateSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TemplateSchema.


        :param type: The type of this TemplateSchema.
        :type type: str
        """

        self._type = type
