# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadTemplateDataDocumentMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename: str=None, mime_type: str=None, size: int=None):
        """UploadTemplateDataDocumentMetadata - a model defined in OpenAPI

        :param filename: The filename of this UploadTemplateDataDocumentMetadata.
        :param mime_type: The mime_type of this UploadTemplateDataDocumentMetadata.
        :param size: The size of this UploadTemplateDataDocumentMetadata.
        """
        self.openapi_types = {
            'filename': str,
            'mime_type': str,
            'size': int
        }

        self.attribute_map = {
            'filename': 'filename',
            'mime_type': 'mime_type',
            'size': 'size'
        }

        self._filename = filename
        self._mime_type = mime_type
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadTemplateDataDocumentMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_template_data_document_metadata of this UploadTemplateDataDocumentMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this UploadTemplateDataDocumentMetadata.


        :return: The filename of this UploadTemplateDataDocumentMetadata.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UploadTemplateDataDocumentMetadata.


        :param filename: The filename of this UploadTemplateDataDocumentMetadata.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def mime_type(self):
        """Gets the mime_type of this UploadTemplateDataDocumentMetadata.


        :return: The mime_type of this UploadTemplateDataDocumentMetadata.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this UploadTemplateDataDocumentMetadata.


        :param mime_type: The mime_type of this UploadTemplateDataDocumentMetadata.
        :type mime_type: str
        """
        allowed_values = ["application/pdf"]  # noqa: E501
        if mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_type` ({0}), must be one of {1}"
                .format(mime_type, allowed_values)
            )

        self._mime_type = mime_type

    @property
    def size(self):
        """Gets the size of this UploadTemplateDataDocumentMetadata.


        :return: The size of this UploadTemplateDataDocumentMetadata.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadTemplateDataDocumentMetadata.


        :param size: The size of this UploadTemplateDataDocumentMetadata.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
