# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_submission_data_request_data import CreateSubmissionDataRequestData
from openapi_server import util


class SubmissionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css: str=None, data: object=None, data_requests: List[CreateSubmissionDataRequestData]=None, expires_in: int=None, field_overrides: object=None, html: str=None, metadata: object=None, password: str=None, test: bool=None):
        """SubmissionData - a model defined in OpenAPI

        :param css: The css of this SubmissionData.
        :param data: The data of this SubmissionData.
        :param data_requests: The data_requests of this SubmissionData.
        :param expires_in: The expires_in of this SubmissionData.
        :param field_overrides: The field_overrides of this SubmissionData.
        :param html: The html of this SubmissionData.
        :param metadata: The metadata of this SubmissionData.
        :param password: The password of this SubmissionData.
        :param test: The test of this SubmissionData.
        """
        self.openapi_types = {
            'css': str,
            'data': object,
            'data_requests': List[CreateSubmissionDataRequestData],
            'expires_in': int,
            'field_overrides': object,
            'html': str,
            'metadata': object,
            'password': str,
            'test': bool
        }

        self.attribute_map = {
            'css': 'css',
            'data': 'data',
            'data_requests': 'data_requests',
            'expires_in': 'expires_in',
            'field_overrides': 'field_overrides',
            'html': 'html',
            'metadata': 'metadata',
            'password': 'password',
            'test': 'test'
        }

        self._css = css
        self._data = data
        self._data_requests = data_requests
        self._expires_in = expires_in
        self._field_overrides = field_overrides
        self._html = html
        self._metadata = metadata
        self._password = password
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission_data of this SubmissionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self):
        """Gets the css of this SubmissionData.


        :return: The css of this SubmissionData.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this SubmissionData.


        :param css: The css of this SubmissionData.
        :type css: str
        """

        self._css = css

    @property
    def data(self):
        """Gets the data of this SubmissionData.


        :return: The data of this SubmissionData.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SubmissionData.


        :param data: The data of this SubmissionData.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def data_requests(self):
        """Gets the data_requests of this SubmissionData.


        :return: The data_requests of this SubmissionData.
        :rtype: List[CreateSubmissionDataRequestData]
        """
        return self._data_requests

    @data_requests.setter
    def data_requests(self, data_requests):
        """Sets the data_requests of this SubmissionData.


        :param data_requests: The data_requests of this SubmissionData.
        :type data_requests: List[CreateSubmissionDataRequestData]
        """

        self._data_requests = data_requests

    @property
    def expires_in(self):
        """Gets the expires_in of this SubmissionData.


        :return: The expires_in of this SubmissionData.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this SubmissionData.


        :param expires_in: The expires_in of this SubmissionData.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def field_overrides(self):
        """Gets the field_overrides of this SubmissionData.


        :return: The field_overrides of this SubmissionData.
        :rtype: object
        """
        return self._field_overrides

    @field_overrides.setter
    def field_overrides(self, field_overrides):
        """Sets the field_overrides of this SubmissionData.


        :param field_overrides: The field_overrides of this SubmissionData.
        :type field_overrides: object
        """

        self._field_overrides = field_overrides

    @property
    def html(self):
        """Gets the html of this SubmissionData.


        :return: The html of this SubmissionData.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this SubmissionData.


        :param html: The html of this SubmissionData.
        :type html: str
        """

        self._html = html

    @property
    def metadata(self):
        """Gets the metadata of this SubmissionData.


        :return: The metadata of this SubmissionData.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SubmissionData.


        :param metadata: The metadata of this SubmissionData.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def password(self):
        """Gets the password of this SubmissionData.


        :return: The password of this SubmissionData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SubmissionData.


        :param password: The password of this SubmissionData.
        :type password: str
        """

        self._password = password

    @property
    def test(self):
        """Gets the test of this SubmissionData.


        :return: The test of this SubmissionData.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this SubmissionData.


        :param test: The test of this SubmissionData.
        :type test: bool
        """

        self._test = test
