# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CombinedSubmissionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_in: int=None, metadata: object=None, password: str=None, submission_ids: List[str]=None, test: bool=None):
        """CombinedSubmissionData - a model defined in OpenAPI

        :param expires_in: The expires_in of this CombinedSubmissionData.
        :param metadata: The metadata of this CombinedSubmissionData.
        :param password: The password of this CombinedSubmissionData.
        :param submission_ids: The submission_ids of this CombinedSubmissionData.
        :param test: The test of this CombinedSubmissionData.
        """
        self.openapi_types = {
            'expires_in': int,
            'metadata': object,
            'password': str,
            'submission_ids': List[str],
            'test': bool
        }

        self.attribute_map = {
            'expires_in': 'expires_in',
            'metadata': 'metadata',
            'password': 'password',
            'submission_ids': 'submission_ids',
            'test': 'test'
        }

        self._expires_in = expires_in
        self._metadata = metadata
        self._password = password
        self._submission_ids = submission_ids
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinedSubmissionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combined_submission_data of this CombinedSubmissionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_in(self):
        """Gets the expires_in of this CombinedSubmissionData.


        :return: The expires_in of this CombinedSubmissionData.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this CombinedSubmissionData.


        :param expires_in: The expires_in of this CombinedSubmissionData.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def metadata(self):
        """Gets the metadata of this CombinedSubmissionData.


        :return: The metadata of this CombinedSubmissionData.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CombinedSubmissionData.


        :param metadata: The metadata of this CombinedSubmissionData.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def password(self):
        """Gets the password of this CombinedSubmissionData.


        :return: The password of this CombinedSubmissionData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CombinedSubmissionData.


        :param password: The password of this CombinedSubmissionData.
        :type password: str
        """

        self._password = password

    @property
    def submission_ids(self):
        """Gets the submission_ids of this CombinedSubmissionData.


        :return: The submission_ids of this CombinedSubmissionData.
        :rtype: List[str]
        """
        return self._submission_ids

    @submission_ids.setter
    def submission_ids(self, submission_ids):
        """Sets the submission_ids of this CombinedSubmissionData.


        :param submission_ids: The submission_ids of this CombinedSubmissionData.
        :type submission_ids: List[str]
        """
        if submission_ids is None:
            raise ValueError("Invalid value for `submission_ids`, must not be `None`")

        self._submission_ids = submission_ids

    @property
    def test(self):
        """Gets the test of this CombinedSubmissionData.


        :return: The test of this CombinedSubmissionData.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CombinedSubmissionData.


        :param test: The test of this CombinedSubmissionData.
        :type test: bool
        """

        self._test = test
