# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_presign_fields import UploadPresignFields
from openapi_server import util


class UploadPresign(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: UploadPresignFields=None, headers: object=None, method: str=None, url: str=None):
        """UploadPresign - a model defined in OpenAPI

        :param fields: The fields of this UploadPresign.
        :param headers: The headers of this UploadPresign.
        :param method: The method of this UploadPresign.
        :param url: The url of this UploadPresign.
        """
        self.openapi_types = {
            'fields': UploadPresignFields,
            'headers': object,
            'method': str,
            'url': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'headers': 'headers',
            'method': 'method',
            'url': 'url'
        }

        self._fields = fields
        self._headers = headers
        self._method = method
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadPresign':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_presign of this UploadPresign.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this UploadPresign.


        :return: The fields of this UploadPresign.
        :rtype: UploadPresignFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UploadPresign.


        :param fields: The fields of this UploadPresign.
        :type fields: UploadPresignFields
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def headers(self):
        """Gets the headers of this UploadPresign.


        :return: The headers of this UploadPresign.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this UploadPresign.


        :param headers: The headers of this UploadPresign.
        :type headers: object
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this UploadPresign.


        :return: The method of this UploadPresign.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this UploadPresign.


        :param method: The method of this UploadPresign.
        :type method: str
        """
        allowed_values = ["post"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def url(self):
        """Gets the url of this UploadPresign.


        :return: The url of this UploadPresign.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UploadPresign.


        :param url: The url of this UploadPresign.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
