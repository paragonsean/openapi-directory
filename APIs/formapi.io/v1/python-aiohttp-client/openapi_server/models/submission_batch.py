# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.submission import Submission
from openapi_server import util


class SubmissionBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_percentage: int=None, error_count: int=None, id: str=None, metadata: object=None, pending_count: int=None, processed_at: str=None, state: str=None, submissions: List[Submission]=None, total_count: int=None):
        """SubmissionBatch - a model defined in OpenAPI

        :param completion_percentage: The completion_percentage of this SubmissionBatch.
        :param error_count: The error_count of this SubmissionBatch.
        :param id: The id of this SubmissionBatch.
        :param metadata: The metadata of this SubmissionBatch.
        :param pending_count: The pending_count of this SubmissionBatch.
        :param processed_at: The processed_at of this SubmissionBatch.
        :param state: The state of this SubmissionBatch.
        :param submissions: The submissions of this SubmissionBatch.
        :param total_count: The total_count of this SubmissionBatch.
        """
        self.openapi_types = {
            'completion_percentage': int,
            'error_count': int,
            'id': str,
            'metadata': object,
            'pending_count': int,
            'processed_at': str,
            'state': str,
            'submissions': List[Submission],
            'total_count': int
        }

        self.attribute_map = {
            'completion_percentage': 'completion_percentage',
            'error_count': 'error_count',
            'id': 'id',
            'metadata': 'metadata',
            'pending_count': 'pending_count',
            'processed_at': 'processed_at',
            'state': 'state',
            'submissions': 'submissions',
            'total_count': 'total_count'
        }

        self._completion_percentage = completion_percentage
        self._error_count = error_count
        self._id = id
        self._metadata = metadata
        self._pending_count = pending_count
        self._processed_at = processed_at
        self._state = state
        self._submissions = submissions
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission_batch of this SubmissionBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this SubmissionBatch.


        :return: The completion_percentage of this SubmissionBatch.
        :rtype: int
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this SubmissionBatch.


        :param completion_percentage: The completion_percentage of this SubmissionBatch.
        :type completion_percentage: int
        """
        if completion_percentage is None:
            raise ValueError("Invalid value for `completion_percentage`, must not be `None`")

        self._completion_percentage = completion_percentage

    @property
    def error_count(self):
        """Gets the error_count of this SubmissionBatch.


        :return: The error_count of this SubmissionBatch.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this SubmissionBatch.


        :param error_count: The error_count of this SubmissionBatch.
        :type error_count: int
        """
        if error_count is None:
            raise ValueError("Invalid value for `error_count`, must not be `None`")

        self._error_count = error_count

    @property
    def id(self):
        """Gets the id of this SubmissionBatch.


        :return: The id of this SubmissionBatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionBatch.


        :param id: The id of this SubmissionBatch.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this SubmissionBatch.


        :return: The metadata of this SubmissionBatch.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SubmissionBatch.


        :param metadata: The metadata of this SubmissionBatch.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def pending_count(self):
        """Gets the pending_count of this SubmissionBatch.


        :return: The pending_count of this SubmissionBatch.
        :rtype: int
        """
        return self._pending_count

    @pending_count.setter
    def pending_count(self, pending_count):
        """Sets the pending_count of this SubmissionBatch.


        :param pending_count: The pending_count of this SubmissionBatch.
        :type pending_count: int
        """
        if pending_count is None:
            raise ValueError("Invalid value for `pending_count`, must not be `None`")

        self._pending_count = pending_count

    @property
    def processed_at(self):
        """Gets the processed_at of this SubmissionBatch.


        :return: The processed_at of this SubmissionBatch.
        :rtype: str
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this SubmissionBatch.


        :param processed_at: The processed_at of this SubmissionBatch.
        :type processed_at: str
        """
        if processed_at is None:
            raise ValueError("Invalid value for `processed_at`, must not be `None`")

        self._processed_at = processed_at

    @property
    def state(self):
        """Gets the state of this SubmissionBatch.


        :return: The state of this SubmissionBatch.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmissionBatch.


        :param state: The state of this SubmissionBatch.
        :type state: str
        """
        allowed_values = ["pending", "processed", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submissions(self):
        """Gets the submissions of this SubmissionBatch.


        :return: The submissions of this SubmissionBatch.
        :rtype: List[Submission]
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this SubmissionBatch.


        :param submissions: The submissions of this SubmissionBatch.
        :type submissions: List[Submission]
        """

        self._submissions = submissions

    @property
    def total_count(self):
        """Gets the total_count of this SubmissionBatch.


        :return: The total_count of this SubmissionBatch.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SubmissionBatch.


        :param total_count: The total_count of this SubmissionBatch.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
