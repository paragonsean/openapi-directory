# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.combined_submission_source_pdfs_inner import CombinedSubmissionSourcePdfsInner
from openapi_server import util


class CombinePdfsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_custom_files: bool=None, expires_in: int=None, metadata: object=None, password: str=None, source_pdfs: List[CombinedSubmissionSourcePdfsInner]=None, test: bool=None):
        """CombinePdfsData - a model defined in OpenAPI

        :param delete_custom_files: The delete_custom_files of this CombinePdfsData.
        :param expires_in: The expires_in of this CombinePdfsData.
        :param metadata: The metadata of this CombinePdfsData.
        :param password: The password of this CombinePdfsData.
        :param source_pdfs: The source_pdfs of this CombinePdfsData.
        :param test: The test of this CombinePdfsData.
        """
        self.openapi_types = {
            'delete_custom_files': bool,
            'expires_in': int,
            'metadata': object,
            'password': str,
            'source_pdfs': List[CombinedSubmissionSourcePdfsInner],
            'test': bool
        }

        self.attribute_map = {
            'delete_custom_files': 'delete_custom_files',
            'expires_in': 'expires_in',
            'metadata': 'metadata',
            'password': 'password',
            'source_pdfs': 'source_pdfs',
            'test': 'test'
        }

        self._delete_custom_files = delete_custom_files
        self._expires_in = expires_in
        self._metadata = metadata
        self._password = password
        self._source_pdfs = source_pdfs
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinePdfsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combine_pdfs_data of this CombinePdfsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_custom_files(self):
        """Gets the delete_custom_files of this CombinePdfsData.


        :return: The delete_custom_files of this CombinePdfsData.
        :rtype: bool
        """
        return self._delete_custom_files

    @delete_custom_files.setter
    def delete_custom_files(self, delete_custom_files):
        """Sets the delete_custom_files of this CombinePdfsData.


        :param delete_custom_files: The delete_custom_files of this CombinePdfsData.
        :type delete_custom_files: bool
        """

        self._delete_custom_files = delete_custom_files

    @property
    def expires_in(self):
        """Gets the expires_in of this CombinePdfsData.


        :return: The expires_in of this CombinePdfsData.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this CombinePdfsData.


        :param expires_in: The expires_in of this CombinePdfsData.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def metadata(self):
        """Gets the metadata of this CombinePdfsData.


        :return: The metadata of this CombinePdfsData.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CombinePdfsData.


        :param metadata: The metadata of this CombinePdfsData.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def password(self):
        """Gets the password of this CombinePdfsData.


        :return: The password of this CombinePdfsData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CombinePdfsData.


        :param password: The password of this CombinePdfsData.
        :type password: str
        """

        self._password = password

    @property
    def source_pdfs(self):
        """Gets the source_pdfs of this CombinePdfsData.


        :return: The source_pdfs of this CombinePdfsData.
        :rtype: List[CombinedSubmissionSourcePdfsInner]
        """
        return self._source_pdfs

    @source_pdfs.setter
    def source_pdfs(self, source_pdfs):
        """Sets the source_pdfs of this CombinePdfsData.


        :param source_pdfs: The source_pdfs of this CombinePdfsData.
        :type source_pdfs: List[CombinedSubmissionSourcePdfsInner]
        """
        if source_pdfs is None:
            raise ValueError("Invalid value for `source_pdfs`, must not be `None`")

        self._source_pdfs = source_pdfs

    @property
    def test(self):
        """Gets the test of this CombinePdfsData.


        :return: The test of this CombinePdfsData.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CombinePdfsData.


        :param test: The test of this CombinePdfsData.
        :type test: bool
        """

        self._test = test
