# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddFieldsDataFieldsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, auto_calculate_max_length: bool=None, background_color: str=None, background_color_field_name: str=None, background_color_field_required: bool=None, barcode_symbology: str=None, bold: bool=None, character_spacing: float=None, check_character: str=None, check_color: str=None, check_color_field_name: str=None, check_color_field_required: bool=None, color: str=None, color_field_name: str=None, color_field_required: bool=None, comb: bool=None, comb_number_of_cells: float=None, comb_value_offset: float=None, combined_field_format: str=None, combined_field_names: str=None, combined_field_separator: str=None, combined_field_type: str=None, condition: str=None, currency: bool=None, date_time_format: str=None, decimal_places: float=None, default: str=None, description: str=None, display_type: str=None, exclusive_maximum: bool=None, exclusive_minimum: bool=None, false_text: str=None, font_size: float=None, height: float=None, hidden: bool=None, id: float=None, image_gravity: str=None, image_scale_type: str=None, include_time: bool=None, integer: bool=None, invert_boolean_condition: bool=None, max_length: float=None, maximum: float=None, metadata: str=None, min_length: float=None, minimum: float=None, multiline: bool=None, multiline_lines: float=None, name: str=None, number_condition_range_exclusive_max: bool=None, number_condition_range_exclusive_min: bool=None, number_condition_range_max: float=None, number_condition_range_min: float=None, number_condition_type: str=None, opacity: float=None, option_list: str=None, overflow: str=None, page: float=None, placeholder: str=None, qrcode_color: str=None, qrcode_color_field_name: str=None, qrcode_color_field_required: bool=None, required: bool=None, rotation: float=None, shape_border_color: str=None, shape_border_color_field_name: str=None, shape_border_color_field_required: bool=None, shape_border_width: float=None, shape_fill_color: str=None, shape_fill_color_field_name: str=None, shape_fill_color_field_required: bool=None, shape_type: str=None, signature_allow_draw: bool=None, signature_allow_type: bool=None, static: bool=None, strikethrough: bool=None, string_condition_type: str=None, title: str=None, true_text: str=None, type: str=None, typeface: str=None, uppercase: bool=None, v_alignment: str=None, width: float=None, x: float=None, y: float=None):
        """AddFieldsDataFieldsInner - a model defined in OpenAPI

        :param alignment: The alignment of this AddFieldsDataFieldsInner.
        :param auto_calculate_max_length: The auto_calculate_max_length of this AddFieldsDataFieldsInner.
        :param background_color: The background_color of this AddFieldsDataFieldsInner.
        :param background_color_field_name: The background_color_field_name of this AddFieldsDataFieldsInner.
        :param background_color_field_required: The background_color_field_required of this AddFieldsDataFieldsInner.
        :param barcode_symbology: The barcode_symbology of this AddFieldsDataFieldsInner.
        :param bold: The bold of this AddFieldsDataFieldsInner.
        :param character_spacing: The character_spacing of this AddFieldsDataFieldsInner.
        :param check_character: The check_character of this AddFieldsDataFieldsInner.
        :param check_color: The check_color of this AddFieldsDataFieldsInner.
        :param check_color_field_name: The check_color_field_name of this AddFieldsDataFieldsInner.
        :param check_color_field_required: The check_color_field_required of this AddFieldsDataFieldsInner.
        :param color: The color of this AddFieldsDataFieldsInner.
        :param color_field_name: The color_field_name of this AddFieldsDataFieldsInner.
        :param color_field_required: The color_field_required of this AddFieldsDataFieldsInner.
        :param comb: The comb of this AddFieldsDataFieldsInner.
        :param comb_number_of_cells: The comb_number_of_cells of this AddFieldsDataFieldsInner.
        :param comb_value_offset: The comb_value_offset of this AddFieldsDataFieldsInner.
        :param combined_field_format: The combined_field_format of this AddFieldsDataFieldsInner.
        :param combined_field_names: The combined_field_names of this AddFieldsDataFieldsInner.
        :param combined_field_separator: The combined_field_separator of this AddFieldsDataFieldsInner.
        :param combined_field_type: The combined_field_type of this AddFieldsDataFieldsInner.
        :param condition: The condition of this AddFieldsDataFieldsInner.
        :param currency: The currency of this AddFieldsDataFieldsInner.
        :param date_time_format: The date_time_format of this AddFieldsDataFieldsInner.
        :param decimal_places: The decimal_places of this AddFieldsDataFieldsInner.
        :param default: The default of this AddFieldsDataFieldsInner.
        :param description: The description of this AddFieldsDataFieldsInner.
        :param display_type: The display_type of this AddFieldsDataFieldsInner.
        :param exclusive_maximum: The exclusive_maximum of this AddFieldsDataFieldsInner.
        :param exclusive_minimum: The exclusive_minimum of this AddFieldsDataFieldsInner.
        :param false_text: The false_text of this AddFieldsDataFieldsInner.
        :param font_size: The font_size of this AddFieldsDataFieldsInner.
        :param height: The height of this AddFieldsDataFieldsInner.
        :param hidden: The hidden of this AddFieldsDataFieldsInner.
        :param id: The id of this AddFieldsDataFieldsInner.
        :param image_gravity: The image_gravity of this AddFieldsDataFieldsInner.
        :param image_scale_type: The image_scale_type of this AddFieldsDataFieldsInner.
        :param include_time: The include_time of this AddFieldsDataFieldsInner.
        :param integer: The integer of this AddFieldsDataFieldsInner.
        :param invert_boolean_condition: The invert_boolean_condition of this AddFieldsDataFieldsInner.
        :param max_length: The max_length of this AddFieldsDataFieldsInner.
        :param maximum: The maximum of this AddFieldsDataFieldsInner.
        :param metadata: The metadata of this AddFieldsDataFieldsInner.
        :param min_length: The min_length of this AddFieldsDataFieldsInner.
        :param minimum: The minimum of this AddFieldsDataFieldsInner.
        :param multiline: The multiline of this AddFieldsDataFieldsInner.
        :param multiline_lines: The multiline_lines of this AddFieldsDataFieldsInner.
        :param name: The name of this AddFieldsDataFieldsInner.
        :param number_condition_range_exclusive_max: The number_condition_range_exclusive_max of this AddFieldsDataFieldsInner.
        :param number_condition_range_exclusive_min: The number_condition_range_exclusive_min of this AddFieldsDataFieldsInner.
        :param number_condition_range_max: The number_condition_range_max of this AddFieldsDataFieldsInner.
        :param number_condition_range_min: The number_condition_range_min of this AddFieldsDataFieldsInner.
        :param number_condition_type: The number_condition_type of this AddFieldsDataFieldsInner.
        :param opacity: The opacity of this AddFieldsDataFieldsInner.
        :param option_list: The option_list of this AddFieldsDataFieldsInner.
        :param overflow: The overflow of this AddFieldsDataFieldsInner.
        :param page: The page of this AddFieldsDataFieldsInner.
        :param placeholder: The placeholder of this AddFieldsDataFieldsInner.
        :param qrcode_color: The qrcode_color of this AddFieldsDataFieldsInner.
        :param qrcode_color_field_name: The qrcode_color_field_name of this AddFieldsDataFieldsInner.
        :param qrcode_color_field_required: The qrcode_color_field_required of this AddFieldsDataFieldsInner.
        :param required: The required of this AddFieldsDataFieldsInner.
        :param rotation: The rotation of this AddFieldsDataFieldsInner.
        :param shape_border_color: The shape_border_color of this AddFieldsDataFieldsInner.
        :param shape_border_color_field_name: The shape_border_color_field_name of this AddFieldsDataFieldsInner.
        :param shape_border_color_field_required: The shape_border_color_field_required of this AddFieldsDataFieldsInner.
        :param shape_border_width: The shape_border_width of this AddFieldsDataFieldsInner.
        :param shape_fill_color: The shape_fill_color of this AddFieldsDataFieldsInner.
        :param shape_fill_color_field_name: The shape_fill_color_field_name of this AddFieldsDataFieldsInner.
        :param shape_fill_color_field_required: The shape_fill_color_field_required of this AddFieldsDataFieldsInner.
        :param shape_type: The shape_type of this AddFieldsDataFieldsInner.
        :param signature_allow_draw: The signature_allow_draw of this AddFieldsDataFieldsInner.
        :param signature_allow_type: The signature_allow_type of this AddFieldsDataFieldsInner.
        :param static: The static of this AddFieldsDataFieldsInner.
        :param strikethrough: The strikethrough of this AddFieldsDataFieldsInner.
        :param string_condition_type: The string_condition_type of this AddFieldsDataFieldsInner.
        :param title: The title of this AddFieldsDataFieldsInner.
        :param true_text: The true_text of this AddFieldsDataFieldsInner.
        :param type: The type of this AddFieldsDataFieldsInner.
        :param typeface: The typeface of this AddFieldsDataFieldsInner.
        :param uppercase: The uppercase of this AddFieldsDataFieldsInner.
        :param v_alignment: The v_alignment of this AddFieldsDataFieldsInner.
        :param width: The width of this AddFieldsDataFieldsInner.
        :param x: The x of this AddFieldsDataFieldsInner.
        :param y: The y of this AddFieldsDataFieldsInner.
        """
        self.openapi_types = {
            'alignment': str,
            'auto_calculate_max_length': bool,
            'background_color': str,
            'background_color_field_name': str,
            'background_color_field_required': bool,
            'barcode_symbology': str,
            'bold': bool,
            'character_spacing': float,
            'check_character': str,
            'check_color': str,
            'check_color_field_name': str,
            'check_color_field_required': bool,
            'color': str,
            'color_field_name': str,
            'color_field_required': bool,
            'comb': bool,
            'comb_number_of_cells': float,
            'comb_value_offset': float,
            'combined_field_format': str,
            'combined_field_names': str,
            'combined_field_separator': str,
            'combined_field_type': str,
            'condition': str,
            'currency': bool,
            'date_time_format': str,
            'decimal_places': float,
            'default': str,
            'description': str,
            'display_type': str,
            'exclusive_maximum': bool,
            'exclusive_minimum': bool,
            'false_text': str,
            'font_size': float,
            'height': float,
            'hidden': bool,
            'id': float,
            'image_gravity': str,
            'image_scale_type': str,
            'include_time': bool,
            'integer': bool,
            'invert_boolean_condition': bool,
            'max_length': float,
            'maximum': float,
            'metadata': str,
            'min_length': float,
            'minimum': float,
            'multiline': bool,
            'multiline_lines': float,
            'name': str,
            'number_condition_range_exclusive_max': bool,
            'number_condition_range_exclusive_min': bool,
            'number_condition_range_max': float,
            'number_condition_range_min': float,
            'number_condition_type': str,
            'opacity': float,
            'option_list': str,
            'overflow': str,
            'page': float,
            'placeholder': str,
            'qrcode_color': str,
            'qrcode_color_field_name': str,
            'qrcode_color_field_required': bool,
            'required': bool,
            'rotation': float,
            'shape_border_color': str,
            'shape_border_color_field_name': str,
            'shape_border_color_field_required': bool,
            'shape_border_width': float,
            'shape_fill_color': str,
            'shape_fill_color_field_name': str,
            'shape_fill_color_field_required': bool,
            'shape_type': str,
            'signature_allow_draw': bool,
            'signature_allow_type': bool,
            'static': bool,
            'strikethrough': bool,
            'string_condition_type': str,
            'title': str,
            'true_text': str,
            'type': str,
            'typeface': str,
            'uppercase': bool,
            'v_alignment': str,
            'width': float,
            'x': float,
            'y': float
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'auto_calculate_max_length': 'autoCalculateMaxLength',
            'background_color': 'backgroundColor',
            'background_color_field_name': 'backgroundColorFieldName',
            'background_color_field_required': 'backgroundColorFieldRequired',
            'barcode_symbology': 'barcodeSymbology',
            'bold': 'bold',
            'character_spacing': 'characterSpacing',
            'check_character': 'checkCharacter',
            'check_color': 'checkColor',
            'check_color_field_name': 'checkColorFieldName',
            'check_color_field_required': 'checkColorFieldRequired',
            'color': 'color',
            'color_field_name': 'colorFieldName',
            'color_field_required': 'colorFieldRequired',
            'comb': 'comb',
            'comb_number_of_cells': 'combNumberOfCells',
            'comb_value_offset': 'combValueOffset',
            'combined_field_format': 'combinedFieldFormat',
            'combined_field_names': 'combinedFieldNames',
            'combined_field_separator': 'combinedFieldSeparator',
            'combined_field_type': 'combinedFieldType',
            'condition': 'condition',
            'currency': 'currency',
            'date_time_format': 'dateTimeFormat',
            'decimal_places': 'decimalPlaces',
            'default': 'default',
            'description': 'description',
            'display_type': 'displayType',
            'exclusive_maximum': 'exclusiveMaximum',
            'exclusive_minimum': 'exclusiveMinimum',
            'false_text': 'falseText',
            'font_size': 'fontSize',
            'height': 'height',
            'hidden': 'hidden',
            'id': 'id',
            'image_gravity': 'imageGravity',
            'image_scale_type': 'imageScaleType',
            'include_time': 'includeTime',
            'integer': 'integer',
            'invert_boolean_condition': 'invertBooleanCondition',
            'max_length': 'maxLength',
            'maximum': 'maximum',
            'metadata': 'metadata',
            'min_length': 'minLength',
            'minimum': 'minimum',
            'multiline': 'multiline',
            'multiline_lines': 'multilineLines',
            'name': 'name',
            'number_condition_range_exclusive_max': 'numberConditionRangeExclusiveMax',
            'number_condition_range_exclusive_min': 'numberConditionRangeExclusiveMin',
            'number_condition_range_max': 'numberConditionRangeMax',
            'number_condition_range_min': 'numberConditionRangeMin',
            'number_condition_type': 'numberConditionType',
            'opacity': 'opacity',
            'option_list': 'optionList',
            'overflow': 'overflow',
            'page': 'page',
            'placeholder': 'placeholder',
            'qrcode_color': 'qrcodeColor',
            'qrcode_color_field_name': 'qrcodeColorFieldName',
            'qrcode_color_field_required': 'qrcodeColorFieldRequired',
            'required': 'required',
            'rotation': 'rotation',
            'shape_border_color': 'shapeBorderColor',
            'shape_border_color_field_name': 'shapeBorderColorFieldName',
            'shape_border_color_field_required': 'shapeBorderColorFieldRequired',
            'shape_border_width': 'shapeBorderWidth',
            'shape_fill_color': 'shapeFillColor',
            'shape_fill_color_field_name': 'shapeFillColorFieldName',
            'shape_fill_color_field_required': 'shapeFillColorFieldRequired',
            'shape_type': 'shapeType',
            'signature_allow_draw': 'signatureAllowDraw',
            'signature_allow_type': 'signatureAllowType',
            'static': 'static',
            'strikethrough': 'strikethrough',
            'string_condition_type': 'stringConditionType',
            'title': 'title',
            'true_text': 'trueText',
            'type': 'type',
            'typeface': 'typeface',
            'uppercase': 'uppercase',
            'v_alignment': 'vAlignment',
            'width': 'width',
            'x': 'x',
            'y': 'y'
        }

        self._alignment = alignment
        self._auto_calculate_max_length = auto_calculate_max_length
        self._background_color = background_color
        self._background_color_field_name = background_color_field_name
        self._background_color_field_required = background_color_field_required
        self._barcode_symbology = barcode_symbology
        self._bold = bold
        self._character_spacing = character_spacing
        self._check_character = check_character
        self._check_color = check_color
        self._check_color_field_name = check_color_field_name
        self._check_color_field_required = check_color_field_required
        self._color = color
        self._color_field_name = color_field_name
        self._color_field_required = color_field_required
        self._comb = comb
        self._comb_number_of_cells = comb_number_of_cells
        self._comb_value_offset = comb_value_offset
        self._combined_field_format = combined_field_format
        self._combined_field_names = combined_field_names
        self._combined_field_separator = combined_field_separator
        self._combined_field_type = combined_field_type
        self._condition = condition
        self._currency = currency
        self._date_time_format = date_time_format
        self._decimal_places = decimal_places
        self._default = default
        self._description = description
        self._display_type = display_type
        self._exclusive_maximum = exclusive_maximum
        self._exclusive_minimum = exclusive_minimum
        self._false_text = false_text
        self._font_size = font_size
        self._height = height
        self._hidden = hidden
        self._id = id
        self._image_gravity = image_gravity
        self._image_scale_type = image_scale_type
        self._include_time = include_time
        self._integer = integer
        self._invert_boolean_condition = invert_boolean_condition
        self._max_length = max_length
        self._maximum = maximum
        self._metadata = metadata
        self._min_length = min_length
        self._minimum = minimum
        self._multiline = multiline
        self._multiline_lines = multiline_lines
        self._name = name
        self._number_condition_range_exclusive_max = number_condition_range_exclusive_max
        self._number_condition_range_exclusive_min = number_condition_range_exclusive_min
        self._number_condition_range_max = number_condition_range_max
        self._number_condition_range_min = number_condition_range_min
        self._number_condition_type = number_condition_type
        self._opacity = opacity
        self._option_list = option_list
        self._overflow = overflow
        self._page = page
        self._placeholder = placeholder
        self._qrcode_color = qrcode_color
        self._qrcode_color_field_name = qrcode_color_field_name
        self._qrcode_color_field_required = qrcode_color_field_required
        self._required = required
        self._rotation = rotation
        self._shape_border_color = shape_border_color
        self._shape_border_color_field_name = shape_border_color_field_name
        self._shape_border_color_field_required = shape_border_color_field_required
        self._shape_border_width = shape_border_width
        self._shape_fill_color = shape_fill_color
        self._shape_fill_color_field_name = shape_fill_color_field_name
        self._shape_fill_color_field_required = shape_fill_color_field_required
        self._shape_type = shape_type
        self._signature_allow_draw = signature_allow_draw
        self._signature_allow_type = signature_allow_type
        self._static = static
        self._strikethrough = strikethrough
        self._string_condition_type = string_condition_type
        self._title = title
        self._true_text = true_text
        self._type = type
        self._typeface = typeface
        self._uppercase = uppercase
        self._v_alignment = v_alignment
        self._width = width
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddFieldsDataFieldsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The add_fields_data_fields_inner of this AddFieldsDataFieldsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this AddFieldsDataFieldsInner.


        :return: The alignment of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this AddFieldsDataFieldsInner.


        :param alignment: The alignment of this AddFieldsDataFieldsInner.
        :type alignment: str
        """
        allowed_values = ["left", "center", "right"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def auto_calculate_max_length(self):
        """Gets the auto_calculate_max_length of this AddFieldsDataFieldsInner.


        :return: The auto_calculate_max_length of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._auto_calculate_max_length

    @auto_calculate_max_length.setter
    def auto_calculate_max_length(self, auto_calculate_max_length):
        """Sets the auto_calculate_max_length of this AddFieldsDataFieldsInner.


        :param auto_calculate_max_length: The auto_calculate_max_length of this AddFieldsDataFieldsInner.
        :type auto_calculate_max_length: bool
        """

        self._auto_calculate_max_length = auto_calculate_max_length

    @property
    def background_color(self):
        """Gets the background_color of this AddFieldsDataFieldsInner.


        :return: The background_color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this AddFieldsDataFieldsInner.


        :param background_color: The background_color of this AddFieldsDataFieldsInner.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def background_color_field_name(self):
        """Gets the background_color_field_name of this AddFieldsDataFieldsInner.


        :return: The background_color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._background_color_field_name

    @background_color_field_name.setter
    def background_color_field_name(self, background_color_field_name):
        """Sets the background_color_field_name of this AddFieldsDataFieldsInner.


        :param background_color_field_name: The background_color_field_name of this AddFieldsDataFieldsInner.
        :type background_color_field_name: str
        """

        self._background_color_field_name = background_color_field_name

    @property
    def background_color_field_required(self):
        """Gets the background_color_field_required of this AddFieldsDataFieldsInner.


        :return: The background_color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._background_color_field_required

    @background_color_field_required.setter
    def background_color_field_required(self, background_color_field_required):
        """Sets the background_color_field_required of this AddFieldsDataFieldsInner.


        :param background_color_field_required: The background_color_field_required of this AddFieldsDataFieldsInner.
        :type background_color_field_required: bool
        """

        self._background_color_field_required = background_color_field_required

    @property
    def barcode_symbology(self):
        """Gets the barcode_symbology of this AddFieldsDataFieldsInner.


        :return: The barcode_symbology of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._barcode_symbology

    @barcode_symbology.setter
    def barcode_symbology(self, barcode_symbology):
        """Sets the barcode_symbology of this AddFieldsDataFieldsInner.


        :param barcode_symbology: The barcode_symbology of this AddFieldsDataFieldsInner.
        :type barcode_symbology: str
        """

        self._barcode_symbology = barcode_symbology

    @property
    def bold(self):
        """Gets the bold of this AddFieldsDataFieldsInner.


        :return: The bold of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this AddFieldsDataFieldsInner.


        :param bold: The bold of this AddFieldsDataFieldsInner.
        :type bold: bool
        """

        self._bold = bold

    @property
    def character_spacing(self):
        """Gets the character_spacing of this AddFieldsDataFieldsInner.


        :return: The character_spacing of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._character_spacing

    @character_spacing.setter
    def character_spacing(self, character_spacing):
        """Sets the character_spacing of this AddFieldsDataFieldsInner.


        :param character_spacing: The character_spacing of this AddFieldsDataFieldsInner.
        :type character_spacing: float
        """

        self._character_spacing = character_spacing

    @property
    def check_character(self):
        """Gets the check_character of this AddFieldsDataFieldsInner.


        :return: The check_character of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._check_character

    @check_character.setter
    def check_character(self, check_character):
        """Sets the check_character of this AddFieldsDataFieldsInner.


        :param check_character: The check_character of this AddFieldsDataFieldsInner.
        :type check_character: str
        """
        allowed_values = ["&#10003;", "&#10004;", "&#10006;", "&#10007;", "&#10008;"]  # noqa: E501
        if check_character not in allowed_values:
            raise ValueError(
                "Invalid value for `check_character` ({0}), must be one of {1}"
                .format(check_character, allowed_values)
            )

        self._check_character = check_character

    @property
    def check_color(self):
        """Gets the check_color of this AddFieldsDataFieldsInner.


        :return: The check_color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._check_color

    @check_color.setter
    def check_color(self, check_color):
        """Sets the check_color of this AddFieldsDataFieldsInner.


        :param check_color: The check_color of this AddFieldsDataFieldsInner.
        :type check_color: str
        """

        self._check_color = check_color

    @property
    def check_color_field_name(self):
        """Gets the check_color_field_name of this AddFieldsDataFieldsInner.


        :return: The check_color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._check_color_field_name

    @check_color_field_name.setter
    def check_color_field_name(self, check_color_field_name):
        """Sets the check_color_field_name of this AddFieldsDataFieldsInner.


        :param check_color_field_name: The check_color_field_name of this AddFieldsDataFieldsInner.
        :type check_color_field_name: str
        """

        self._check_color_field_name = check_color_field_name

    @property
    def check_color_field_required(self):
        """Gets the check_color_field_required of this AddFieldsDataFieldsInner.


        :return: The check_color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._check_color_field_required

    @check_color_field_required.setter
    def check_color_field_required(self, check_color_field_required):
        """Sets the check_color_field_required of this AddFieldsDataFieldsInner.


        :param check_color_field_required: The check_color_field_required of this AddFieldsDataFieldsInner.
        :type check_color_field_required: bool
        """

        self._check_color_field_required = check_color_field_required

    @property
    def color(self):
        """Gets the color of this AddFieldsDataFieldsInner.


        :return: The color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AddFieldsDataFieldsInner.


        :param color: The color of this AddFieldsDataFieldsInner.
        :type color: str
        """

        self._color = color

    @property
    def color_field_name(self):
        """Gets the color_field_name of this AddFieldsDataFieldsInner.


        :return: The color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._color_field_name

    @color_field_name.setter
    def color_field_name(self, color_field_name):
        """Sets the color_field_name of this AddFieldsDataFieldsInner.


        :param color_field_name: The color_field_name of this AddFieldsDataFieldsInner.
        :type color_field_name: str
        """

        self._color_field_name = color_field_name

    @property
    def color_field_required(self):
        """Gets the color_field_required of this AddFieldsDataFieldsInner.


        :return: The color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._color_field_required

    @color_field_required.setter
    def color_field_required(self, color_field_required):
        """Sets the color_field_required of this AddFieldsDataFieldsInner.


        :param color_field_required: The color_field_required of this AddFieldsDataFieldsInner.
        :type color_field_required: bool
        """

        self._color_field_required = color_field_required

    @property
    def comb(self):
        """Gets the comb of this AddFieldsDataFieldsInner.


        :return: The comb of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._comb

    @comb.setter
    def comb(self, comb):
        """Sets the comb of this AddFieldsDataFieldsInner.


        :param comb: The comb of this AddFieldsDataFieldsInner.
        :type comb: bool
        """

        self._comb = comb

    @property
    def comb_number_of_cells(self):
        """Gets the comb_number_of_cells of this AddFieldsDataFieldsInner.


        :return: The comb_number_of_cells of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._comb_number_of_cells

    @comb_number_of_cells.setter
    def comb_number_of_cells(self, comb_number_of_cells):
        """Sets the comb_number_of_cells of this AddFieldsDataFieldsInner.


        :param comb_number_of_cells: The comb_number_of_cells of this AddFieldsDataFieldsInner.
        :type comb_number_of_cells: float
        """
        if comb_number_of_cells is not None and comb_number_of_cells < 0:
            raise ValueError("Invalid value for `comb_number_of_cells`, must be a value greater than or equal to `0`")

        self._comb_number_of_cells = comb_number_of_cells

    @property
    def comb_value_offset(self):
        """Gets the comb_value_offset of this AddFieldsDataFieldsInner.


        :return: The comb_value_offset of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._comb_value_offset

    @comb_value_offset.setter
    def comb_value_offset(self, comb_value_offset):
        """Sets the comb_value_offset of this AddFieldsDataFieldsInner.


        :param comb_value_offset: The comb_value_offset of this AddFieldsDataFieldsInner.
        :type comb_value_offset: float
        """

        self._comb_value_offset = comb_value_offset

    @property
    def combined_field_format(self):
        """Gets the combined_field_format of this AddFieldsDataFieldsInner.


        :return: The combined_field_format of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._combined_field_format

    @combined_field_format.setter
    def combined_field_format(self, combined_field_format):
        """Sets the combined_field_format of this AddFieldsDataFieldsInner.


        :param combined_field_format: The combined_field_format of this AddFieldsDataFieldsInner.
        :type combined_field_format: str
        """

        self._combined_field_format = combined_field_format

    @property
    def combined_field_names(self):
        """Gets the combined_field_names of this AddFieldsDataFieldsInner.


        :return: The combined_field_names of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._combined_field_names

    @combined_field_names.setter
    def combined_field_names(self, combined_field_names):
        """Sets the combined_field_names of this AddFieldsDataFieldsInner.


        :param combined_field_names: The combined_field_names of this AddFieldsDataFieldsInner.
        :type combined_field_names: str
        """

        self._combined_field_names = combined_field_names

    @property
    def combined_field_separator(self):
        """Gets the combined_field_separator of this AddFieldsDataFieldsInner.


        :return: The combined_field_separator of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._combined_field_separator

    @combined_field_separator.setter
    def combined_field_separator(self, combined_field_separator):
        """Sets the combined_field_separator of this AddFieldsDataFieldsInner.


        :param combined_field_separator: The combined_field_separator of this AddFieldsDataFieldsInner.
        :type combined_field_separator: str
        """

        self._combined_field_separator = combined_field_separator

    @property
    def combined_field_type(self):
        """Gets the combined_field_type of this AddFieldsDataFieldsInner.


        :return: The combined_field_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._combined_field_type

    @combined_field_type.setter
    def combined_field_type(self, combined_field_type):
        """Sets the combined_field_type of this AddFieldsDataFieldsInner.


        :param combined_field_type: The combined_field_type of this AddFieldsDataFieldsInner.
        :type combined_field_type: str
        """

        self._combined_field_type = combined_field_type

    @property
    def condition(self):
        """Gets the condition of this AddFieldsDataFieldsInner.


        :return: The condition of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AddFieldsDataFieldsInner.


        :param condition: The condition of this AddFieldsDataFieldsInner.
        :type condition: str
        """

        self._condition = condition

    @property
    def currency(self):
        """Gets the currency of this AddFieldsDataFieldsInner.


        :return: The currency of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddFieldsDataFieldsInner.


        :param currency: The currency of this AddFieldsDataFieldsInner.
        :type currency: bool
        """

        self._currency = currency

    @property
    def date_time_format(self):
        """Gets the date_time_format of this AddFieldsDataFieldsInner.


        :return: The date_time_format of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._date_time_format

    @date_time_format.setter
    def date_time_format(self, date_time_format):
        """Sets the date_time_format of this AddFieldsDataFieldsInner.


        :param date_time_format: The date_time_format of this AddFieldsDataFieldsInner.
        :type date_time_format: str
        """

        self._date_time_format = date_time_format

    @property
    def decimal_places(self):
        """Gets the decimal_places of this AddFieldsDataFieldsInner.


        :return: The decimal_places of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this AddFieldsDataFieldsInner.


        :param decimal_places: The decimal_places of this AddFieldsDataFieldsInner.
        :type decimal_places: float
        """
        if decimal_places is not None and decimal_places < 0:
            raise ValueError("Invalid value for `decimal_places`, must be a value greater than or equal to `0`")

        self._decimal_places = decimal_places

    @property
    def default(self):
        """Gets the default of this AddFieldsDataFieldsInner.


        :return: The default of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this AddFieldsDataFieldsInner.


        :param default: The default of this AddFieldsDataFieldsInner.
        :type default: str
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this AddFieldsDataFieldsInner.


        :return: The description of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddFieldsDataFieldsInner.


        :param description: The description of this AddFieldsDataFieldsInner.
        :type description: str
        """

        self._description = description

    @property
    def display_type(self):
        """Gets the display_type of this AddFieldsDataFieldsInner.


        :return: The display_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this AddFieldsDataFieldsInner.


        :param display_type: The display_type of this AddFieldsDataFieldsInner.
        :type display_type: str
        """
        allowed_values = ["text", "check", "qrcode", "barcode", "image", "shape"]  # noqa: E501
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def exclusive_maximum(self):
        """Gets the exclusive_maximum of this AddFieldsDataFieldsInner.


        :return: The exclusive_maximum of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._exclusive_maximum

    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum):
        """Sets the exclusive_maximum of this AddFieldsDataFieldsInner.


        :param exclusive_maximum: The exclusive_maximum of this AddFieldsDataFieldsInner.
        :type exclusive_maximum: bool
        """

        self._exclusive_maximum = exclusive_maximum

    @property
    def exclusive_minimum(self):
        """Gets the exclusive_minimum of this AddFieldsDataFieldsInner.


        :return: The exclusive_minimum of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._exclusive_minimum

    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum):
        """Sets the exclusive_minimum of this AddFieldsDataFieldsInner.


        :param exclusive_minimum: The exclusive_minimum of this AddFieldsDataFieldsInner.
        :type exclusive_minimum: bool
        """

        self._exclusive_minimum = exclusive_minimum

    @property
    def false_text(self):
        """Gets the false_text of this AddFieldsDataFieldsInner.


        :return: The false_text of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._false_text

    @false_text.setter
    def false_text(self, false_text):
        """Sets the false_text of this AddFieldsDataFieldsInner.


        :param false_text: The false_text of this AddFieldsDataFieldsInner.
        :type false_text: str
        """

        self._false_text = false_text

    @property
    def font_size(self):
        """Gets the font_size of this AddFieldsDataFieldsInner.


        :return: The font_size of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this AddFieldsDataFieldsInner.


        :param font_size: The font_size of this AddFieldsDataFieldsInner.
        :type font_size: float
        """
        if font_size is not None and font_size < 0:
            raise ValueError("Invalid value for `font_size`, must be a value greater than or equal to `0`")

        self._font_size = font_size

    @property
    def height(self):
        """Gets the height of this AddFieldsDataFieldsInner.


        :return: The height of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AddFieldsDataFieldsInner.


        :param height: The height of this AddFieldsDataFieldsInner.
        :type height: float
        """
        if height is not None and height < 0:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")

        self._height = height

    @property
    def hidden(self):
        """Gets the hidden of this AddFieldsDataFieldsInner.


        :return: The hidden of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AddFieldsDataFieldsInner.


        :param hidden: The hidden of this AddFieldsDataFieldsInner.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this AddFieldsDataFieldsInner.


        :return: The id of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddFieldsDataFieldsInner.


        :param id: The id of this AddFieldsDataFieldsInner.
        :type id: float
        """
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def image_gravity(self):
        """Gets the image_gravity of this AddFieldsDataFieldsInner.


        :return: The image_gravity of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._image_gravity

    @image_gravity.setter
    def image_gravity(self, image_gravity):
        """Sets the image_gravity of this AddFieldsDataFieldsInner.


        :param image_gravity: The image_gravity of this AddFieldsDataFieldsInner.
        :type image_gravity: str
        """
        allowed_values = ["NorthWest", "North", "NorthEast", "West", "Center", "East", "SouthWest", "South", "SouthEast"]  # noqa: E501
        if image_gravity not in allowed_values:
            raise ValueError(
                "Invalid value for `image_gravity` ({0}), must be one of {1}"
                .format(image_gravity, allowed_values)
            )

        self._image_gravity = image_gravity

    @property
    def image_scale_type(self):
        """Gets the image_scale_type of this AddFieldsDataFieldsInner.


        :return: The image_scale_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._image_scale_type

    @image_scale_type.setter
    def image_scale_type(self, image_scale_type):
        """Sets the image_scale_type of this AddFieldsDataFieldsInner.


        :param image_scale_type: The image_scale_type of this AddFieldsDataFieldsInner.
        :type image_scale_type: str
        """
        allowed_values = ["fit", "fill", "stretch"]  # noqa: E501
        if image_scale_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_scale_type` ({0}), must be one of {1}"
                .format(image_scale_type, allowed_values)
            )

        self._image_scale_type = image_scale_type

    @property
    def include_time(self):
        """Gets the include_time of this AddFieldsDataFieldsInner.


        :return: The include_time of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._include_time

    @include_time.setter
    def include_time(self, include_time):
        """Sets the include_time of this AddFieldsDataFieldsInner.


        :param include_time: The include_time of this AddFieldsDataFieldsInner.
        :type include_time: bool
        """

        self._include_time = include_time

    @property
    def integer(self):
        """Gets the integer of this AddFieldsDataFieldsInner.


        :return: The integer of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this AddFieldsDataFieldsInner.


        :param integer: The integer of this AddFieldsDataFieldsInner.
        :type integer: bool
        """

        self._integer = integer

    @property
    def invert_boolean_condition(self):
        """Gets the invert_boolean_condition of this AddFieldsDataFieldsInner.


        :return: The invert_boolean_condition of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._invert_boolean_condition

    @invert_boolean_condition.setter
    def invert_boolean_condition(self, invert_boolean_condition):
        """Sets the invert_boolean_condition of this AddFieldsDataFieldsInner.


        :param invert_boolean_condition: The invert_boolean_condition of this AddFieldsDataFieldsInner.
        :type invert_boolean_condition: bool
        """

        self._invert_boolean_condition = invert_boolean_condition

    @property
    def max_length(self):
        """Gets the max_length of this AddFieldsDataFieldsInner.


        :return: The max_length of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this AddFieldsDataFieldsInner.


        :param max_length: The max_length of this AddFieldsDataFieldsInner.
        :type max_length: float
        """

        self._max_length = max_length

    @property
    def maximum(self):
        """Gets the maximum of this AddFieldsDataFieldsInner.


        :return: The maximum of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this AddFieldsDataFieldsInner.


        :param maximum: The maximum of this AddFieldsDataFieldsInner.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def metadata(self):
        """Gets the metadata of this AddFieldsDataFieldsInner.


        :return: The metadata of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AddFieldsDataFieldsInner.


        :param metadata: The metadata of this AddFieldsDataFieldsInner.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def min_length(self):
        """Gets the min_length of this AddFieldsDataFieldsInner.


        :return: The min_length of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this AddFieldsDataFieldsInner.


        :param min_length: The min_length of this AddFieldsDataFieldsInner.
        :type min_length: float
        """

        self._min_length = min_length

    @property
    def minimum(self):
        """Gets the minimum of this AddFieldsDataFieldsInner.


        :return: The minimum of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this AddFieldsDataFieldsInner.


        :param minimum: The minimum of this AddFieldsDataFieldsInner.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def multiline(self):
        """Gets the multiline of this AddFieldsDataFieldsInner.


        :return: The multiline of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._multiline

    @multiline.setter
    def multiline(self, multiline):
        """Sets the multiline of this AddFieldsDataFieldsInner.


        :param multiline: The multiline of this AddFieldsDataFieldsInner.
        :type multiline: bool
        """

        self._multiline = multiline

    @property
    def multiline_lines(self):
        """Gets the multiline_lines of this AddFieldsDataFieldsInner.


        :return: The multiline_lines of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._multiline_lines

    @multiline_lines.setter
    def multiline_lines(self, multiline_lines):
        """Sets the multiline_lines of this AddFieldsDataFieldsInner.


        :param multiline_lines: The multiline_lines of this AddFieldsDataFieldsInner.
        :type multiline_lines: float
        """
        if multiline_lines is not None and multiline_lines < 0:
            raise ValueError("Invalid value for `multiline_lines`, must be a value greater than or equal to `0`")

        self._multiline_lines = multiline_lines

    @property
    def name(self):
        """Gets the name of this AddFieldsDataFieldsInner.


        :return: The name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddFieldsDataFieldsInner.


        :param name: The name of this AddFieldsDataFieldsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_condition_range_exclusive_max(self):
        """Gets the number_condition_range_exclusive_max of this AddFieldsDataFieldsInner.


        :return: The number_condition_range_exclusive_max of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._number_condition_range_exclusive_max

    @number_condition_range_exclusive_max.setter
    def number_condition_range_exclusive_max(self, number_condition_range_exclusive_max):
        """Sets the number_condition_range_exclusive_max of this AddFieldsDataFieldsInner.


        :param number_condition_range_exclusive_max: The number_condition_range_exclusive_max of this AddFieldsDataFieldsInner.
        :type number_condition_range_exclusive_max: bool
        """

        self._number_condition_range_exclusive_max = number_condition_range_exclusive_max

    @property
    def number_condition_range_exclusive_min(self):
        """Gets the number_condition_range_exclusive_min of this AddFieldsDataFieldsInner.


        :return: The number_condition_range_exclusive_min of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._number_condition_range_exclusive_min

    @number_condition_range_exclusive_min.setter
    def number_condition_range_exclusive_min(self, number_condition_range_exclusive_min):
        """Sets the number_condition_range_exclusive_min of this AddFieldsDataFieldsInner.


        :param number_condition_range_exclusive_min: The number_condition_range_exclusive_min of this AddFieldsDataFieldsInner.
        :type number_condition_range_exclusive_min: bool
        """

        self._number_condition_range_exclusive_min = number_condition_range_exclusive_min

    @property
    def number_condition_range_max(self):
        """Gets the number_condition_range_max of this AddFieldsDataFieldsInner.


        :return: The number_condition_range_max of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._number_condition_range_max

    @number_condition_range_max.setter
    def number_condition_range_max(self, number_condition_range_max):
        """Sets the number_condition_range_max of this AddFieldsDataFieldsInner.


        :param number_condition_range_max: The number_condition_range_max of this AddFieldsDataFieldsInner.
        :type number_condition_range_max: float
        """

        self._number_condition_range_max = number_condition_range_max

    @property
    def number_condition_range_min(self):
        """Gets the number_condition_range_min of this AddFieldsDataFieldsInner.


        :return: The number_condition_range_min of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._number_condition_range_min

    @number_condition_range_min.setter
    def number_condition_range_min(self, number_condition_range_min):
        """Sets the number_condition_range_min of this AddFieldsDataFieldsInner.


        :param number_condition_range_min: The number_condition_range_min of this AddFieldsDataFieldsInner.
        :type number_condition_range_min: float
        """

        self._number_condition_range_min = number_condition_range_min

    @property
    def number_condition_type(self):
        """Gets the number_condition_type of this AddFieldsDataFieldsInner.


        :return: The number_condition_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._number_condition_type

    @number_condition_type.setter
    def number_condition_type(self, number_condition_type):
        """Sets the number_condition_type of this AddFieldsDataFieldsInner.


        :param number_condition_type: The number_condition_type of this AddFieldsDataFieldsInner.
        :type number_condition_type: str
        """
        allowed_values = ["equals", "range", "gte", "gt", "lte", "lt"]  # noqa: E501
        if number_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_condition_type` ({0}), must be one of {1}"
                .format(number_condition_type, allowed_values)
            )

        self._number_condition_type = number_condition_type

    @property
    def opacity(self):
        """Gets the opacity of this AddFieldsDataFieldsInner.


        :return: The opacity of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this AddFieldsDataFieldsInner.


        :param opacity: The opacity of this AddFieldsDataFieldsInner.
        :type opacity: float
        """
        if opacity is not None and opacity > 1:
            raise ValueError("Invalid value for `opacity`, must be a value less than or equal to `1`")
        if opacity is not None and opacity < 0:
            raise ValueError("Invalid value for `opacity`, must be a value greater than or equal to `0`")

        self._opacity = opacity

    @property
    def option_list(self):
        """Gets the option_list of this AddFieldsDataFieldsInner.


        :return: The option_list of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._option_list

    @option_list.setter
    def option_list(self, option_list):
        """Sets the option_list of this AddFieldsDataFieldsInner.


        :param option_list: The option_list of this AddFieldsDataFieldsInner.
        :type option_list: str
        """

        self._option_list = option_list

    @property
    def overflow(self):
        """Gets the overflow of this AddFieldsDataFieldsInner.


        :return: The overflow of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._overflow

    @overflow.setter
    def overflow(self, overflow):
        """Sets the overflow of this AddFieldsDataFieldsInner.


        :param overflow: The overflow of this AddFieldsDataFieldsInner.
        :type overflow: str
        """
        allowed_values = ["shrink_to_fit", "truncate"]  # noqa: E501
        if overflow not in allowed_values:
            raise ValueError(
                "Invalid value for `overflow` ({0}), must be one of {1}"
                .format(overflow, allowed_values)
            )

        self._overflow = overflow

    @property
    def page(self):
        """Gets the page of this AddFieldsDataFieldsInner.


        :return: The page of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AddFieldsDataFieldsInner.


        :param page: The page of this AddFieldsDataFieldsInner.
        :type page: float
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def placeholder(self):
        """Gets the placeholder of this AddFieldsDataFieldsInner.


        :return: The placeholder of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this AddFieldsDataFieldsInner.


        :param placeholder: The placeholder of this AddFieldsDataFieldsInner.
        :type placeholder: str
        """

        self._placeholder = placeholder

    @property
    def qrcode_color(self):
        """Gets the qrcode_color of this AddFieldsDataFieldsInner.


        :return: The qrcode_color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._qrcode_color

    @qrcode_color.setter
    def qrcode_color(self, qrcode_color):
        """Sets the qrcode_color of this AddFieldsDataFieldsInner.


        :param qrcode_color: The qrcode_color of this AddFieldsDataFieldsInner.
        :type qrcode_color: str
        """

        self._qrcode_color = qrcode_color

    @property
    def qrcode_color_field_name(self):
        """Gets the qrcode_color_field_name of this AddFieldsDataFieldsInner.


        :return: The qrcode_color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._qrcode_color_field_name

    @qrcode_color_field_name.setter
    def qrcode_color_field_name(self, qrcode_color_field_name):
        """Sets the qrcode_color_field_name of this AddFieldsDataFieldsInner.


        :param qrcode_color_field_name: The qrcode_color_field_name of this AddFieldsDataFieldsInner.
        :type qrcode_color_field_name: str
        """

        self._qrcode_color_field_name = qrcode_color_field_name

    @property
    def qrcode_color_field_required(self):
        """Gets the qrcode_color_field_required of this AddFieldsDataFieldsInner.


        :return: The qrcode_color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._qrcode_color_field_required

    @qrcode_color_field_required.setter
    def qrcode_color_field_required(self, qrcode_color_field_required):
        """Sets the qrcode_color_field_required of this AddFieldsDataFieldsInner.


        :param qrcode_color_field_required: The qrcode_color_field_required of this AddFieldsDataFieldsInner.
        :type qrcode_color_field_required: bool
        """

        self._qrcode_color_field_required = qrcode_color_field_required

    @property
    def required(self):
        """Gets the required of this AddFieldsDataFieldsInner.


        :return: The required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AddFieldsDataFieldsInner.


        :param required: The required of this AddFieldsDataFieldsInner.
        :type required: bool
        """

        self._required = required

    @property
    def rotation(self):
        """Gets the rotation of this AddFieldsDataFieldsInner.


        :return: The rotation of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this AddFieldsDataFieldsInner.


        :param rotation: The rotation of this AddFieldsDataFieldsInner.
        :type rotation: float
        """
        if rotation is not None and rotation > 360:
            raise ValueError("Invalid value for `rotation`, must be a value less than or equal to `360`")
        if rotation is not None and rotation < 0:
            raise ValueError("Invalid value for `rotation`, must be a value greater than or equal to `0`")

        self._rotation = rotation

    @property
    def shape_border_color(self):
        """Gets the shape_border_color of this AddFieldsDataFieldsInner.


        :return: The shape_border_color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._shape_border_color

    @shape_border_color.setter
    def shape_border_color(self, shape_border_color):
        """Sets the shape_border_color of this AddFieldsDataFieldsInner.


        :param shape_border_color: The shape_border_color of this AddFieldsDataFieldsInner.
        :type shape_border_color: str
        """

        self._shape_border_color = shape_border_color

    @property
    def shape_border_color_field_name(self):
        """Gets the shape_border_color_field_name of this AddFieldsDataFieldsInner.


        :return: The shape_border_color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._shape_border_color_field_name

    @shape_border_color_field_name.setter
    def shape_border_color_field_name(self, shape_border_color_field_name):
        """Sets the shape_border_color_field_name of this AddFieldsDataFieldsInner.


        :param shape_border_color_field_name: The shape_border_color_field_name of this AddFieldsDataFieldsInner.
        :type shape_border_color_field_name: str
        """

        self._shape_border_color_field_name = shape_border_color_field_name

    @property
    def shape_border_color_field_required(self):
        """Gets the shape_border_color_field_required of this AddFieldsDataFieldsInner.


        :return: The shape_border_color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._shape_border_color_field_required

    @shape_border_color_field_required.setter
    def shape_border_color_field_required(self, shape_border_color_field_required):
        """Sets the shape_border_color_field_required of this AddFieldsDataFieldsInner.


        :param shape_border_color_field_required: The shape_border_color_field_required of this AddFieldsDataFieldsInner.
        :type shape_border_color_field_required: bool
        """

        self._shape_border_color_field_required = shape_border_color_field_required

    @property
    def shape_border_width(self):
        """Gets the shape_border_width of this AddFieldsDataFieldsInner.


        :return: The shape_border_width of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._shape_border_width

    @shape_border_width.setter
    def shape_border_width(self, shape_border_width):
        """Sets the shape_border_width of this AddFieldsDataFieldsInner.


        :param shape_border_width: The shape_border_width of this AddFieldsDataFieldsInner.
        :type shape_border_width: float
        """
        if shape_border_width is not None and shape_border_width < 0:
            raise ValueError("Invalid value for `shape_border_width`, must be a value greater than or equal to `0`")

        self._shape_border_width = shape_border_width

    @property
    def shape_fill_color(self):
        """Gets the shape_fill_color of this AddFieldsDataFieldsInner.


        :return: The shape_fill_color of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._shape_fill_color

    @shape_fill_color.setter
    def shape_fill_color(self, shape_fill_color):
        """Sets the shape_fill_color of this AddFieldsDataFieldsInner.


        :param shape_fill_color: The shape_fill_color of this AddFieldsDataFieldsInner.
        :type shape_fill_color: str
        """

        self._shape_fill_color = shape_fill_color

    @property
    def shape_fill_color_field_name(self):
        """Gets the shape_fill_color_field_name of this AddFieldsDataFieldsInner.


        :return: The shape_fill_color_field_name of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._shape_fill_color_field_name

    @shape_fill_color_field_name.setter
    def shape_fill_color_field_name(self, shape_fill_color_field_name):
        """Sets the shape_fill_color_field_name of this AddFieldsDataFieldsInner.


        :param shape_fill_color_field_name: The shape_fill_color_field_name of this AddFieldsDataFieldsInner.
        :type shape_fill_color_field_name: str
        """

        self._shape_fill_color_field_name = shape_fill_color_field_name

    @property
    def shape_fill_color_field_required(self):
        """Gets the shape_fill_color_field_required of this AddFieldsDataFieldsInner.


        :return: The shape_fill_color_field_required of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._shape_fill_color_field_required

    @shape_fill_color_field_required.setter
    def shape_fill_color_field_required(self, shape_fill_color_field_required):
        """Sets the shape_fill_color_field_required of this AddFieldsDataFieldsInner.


        :param shape_fill_color_field_required: The shape_fill_color_field_required of this AddFieldsDataFieldsInner.
        :type shape_fill_color_field_required: bool
        """

        self._shape_fill_color_field_required = shape_fill_color_field_required

    @property
    def shape_type(self):
        """Gets the shape_type of this AddFieldsDataFieldsInner.


        :return: The shape_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._shape_type

    @shape_type.setter
    def shape_type(self, shape_type):
        """Sets the shape_type of this AddFieldsDataFieldsInner.


        :param shape_type: The shape_type of this AddFieldsDataFieldsInner.
        :type shape_type: str
        """
        allowed_values = ["square", "rectangle", "circle", "ellipse"]  # noqa: E501
        if shape_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shape_type` ({0}), must be one of {1}"
                .format(shape_type, allowed_values)
            )

        self._shape_type = shape_type

    @property
    def signature_allow_draw(self):
        """Gets the signature_allow_draw of this AddFieldsDataFieldsInner.


        :return: The signature_allow_draw of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._signature_allow_draw

    @signature_allow_draw.setter
    def signature_allow_draw(self, signature_allow_draw):
        """Sets the signature_allow_draw of this AddFieldsDataFieldsInner.


        :param signature_allow_draw: The signature_allow_draw of this AddFieldsDataFieldsInner.
        :type signature_allow_draw: bool
        """

        self._signature_allow_draw = signature_allow_draw

    @property
    def signature_allow_type(self):
        """Gets the signature_allow_type of this AddFieldsDataFieldsInner.


        :return: The signature_allow_type of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._signature_allow_type

    @signature_allow_type.setter
    def signature_allow_type(self, signature_allow_type):
        """Sets the signature_allow_type of this AddFieldsDataFieldsInner.


        :param signature_allow_type: The signature_allow_type of this AddFieldsDataFieldsInner.
        :type signature_allow_type: bool
        """

        self._signature_allow_type = signature_allow_type

    @property
    def static(self):
        """Gets the static of this AddFieldsDataFieldsInner.


        :return: The static of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this AddFieldsDataFieldsInner.


        :param static: The static of this AddFieldsDataFieldsInner.
        :type static: bool
        """

        self._static = static

    @property
    def strikethrough(self):
        """Gets the strikethrough of this AddFieldsDataFieldsInner.


        :return: The strikethrough of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this AddFieldsDataFieldsInner.


        :param strikethrough: The strikethrough of this AddFieldsDataFieldsInner.
        :type strikethrough: bool
        """

        self._strikethrough = strikethrough

    @property
    def string_condition_type(self):
        """Gets the string_condition_type of this AddFieldsDataFieldsInner.


        :return: The string_condition_type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._string_condition_type

    @string_condition_type.setter
    def string_condition_type(self, string_condition_type):
        """Sets the string_condition_type of this AddFieldsDataFieldsInner.


        :param string_condition_type: The string_condition_type of this AddFieldsDataFieldsInner.
        :type string_condition_type: str
        """
        allowed_values = ["equals", "contains", "starts_with", "ends_with", "regex"]  # noqa: E501
        if string_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `string_condition_type` ({0}), must be one of {1}"
                .format(string_condition_type, allowed_values)
            )

        self._string_condition_type = string_condition_type

    @property
    def title(self):
        """Gets the title of this AddFieldsDataFieldsInner.


        :return: The title of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddFieldsDataFieldsInner.


        :param title: The title of this AddFieldsDataFieldsInner.
        :type title: str
        """

        self._title = title

    @property
    def true_text(self):
        """Gets the true_text of this AddFieldsDataFieldsInner.


        :return: The true_text of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._true_text

    @true_text.setter
    def true_text(self, true_text):
        """Sets the true_text of this AddFieldsDataFieldsInner.


        :param true_text: The true_text of this AddFieldsDataFieldsInner.
        :type true_text: str
        """

        self._true_text = true_text

    @property
    def type(self):
        """Gets the type of this AddFieldsDataFieldsInner.


        :return: The type of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddFieldsDataFieldsInner.


        :param type: The type of this AddFieldsDataFieldsInner.
        :type type: str
        """
        allowed_values = ["string", "number", "boolean", "date", "address", "country", "email", "url", "image", "signature", "barcode", "combined"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def typeface(self):
        """Gets the typeface of this AddFieldsDataFieldsInner.


        :return: The typeface of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._typeface

    @typeface.setter
    def typeface(self, typeface):
        """Sets the typeface of this AddFieldsDataFieldsInner.


        :param typeface: The typeface of this AddFieldsDataFieldsInner.
        :type typeface: str
        """

        self._typeface = typeface

    @property
    def uppercase(self):
        """Gets the uppercase of this AddFieldsDataFieldsInner.


        :return: The uppercase of this AddFieldsDataFieldsInner.
        :rtype: bool
        """
        return self._uppercase

    @uppercase.setter
    def uppercase(self, uppercase):
        """Sets the uppercase of this AddFieldsDataFieldsInner.


        :param uppercase: The uppercase of this AddFieldsDataFieldsInner.
        :type uppercase: bool
        """

        self._uppercase = uppercase

    @property
    def v_alignment(self):
        """Gets the v_alignment of this AddFieldsDataFieldsInner.


        :return: The v_alignment of this AddFieldsDataFieldsInner.
        :rtype: str
        """
        return self._v_alignment

    @v_alignment.setter
    def v_alignment(self, v_alignment):
        """Sets the v_alignment of this AddFieldsDataFieldsInner.


        :param v_alignment: The v_alignment of this AddFieldsDataFieldsInner.
        :type v_alignment: str
        """
        allowed_values = ["bottom", "center", "top"]  # noqa: E501
        if v_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `v_alignment` ({0}), must be one of {1}"
                .format(v_alignment, allowed_values)
            )

        self._v_alignment = v_alignment

    @property
    def width(self):
        """Gets the width of this AddFieldsDataFieldsInner.


        :return: The width of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AddFieldsDataFieldsInner.


        :param width: The width of this AddFieldsDataFieldsInner.
        :type width: float
        """
        if width is not None and width < 0:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")

        self._width = width

    @property
    def x(self):
        """Gets the x of this AddFieldsDataFieldsInner.


        :return: The x of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this AddFieldsDataFieldsInner.


        :param x: The x of this AddFieldsDataFieldsInner.
        :type x: float
        """
        if x is not None and x < 0:
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this AddFieldsDataFieldsInner.


        :return: The y of this AddFieldsDataFieldsInner.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this AddFieldsDataFieldsInner.


        :param y: The y of this AddFieldsDataFieldsInner.
        :type y: float
        """
        if y is not None and y < 0:
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0`")

        self._y = y
