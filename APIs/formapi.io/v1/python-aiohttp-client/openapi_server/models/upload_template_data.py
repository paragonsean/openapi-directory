# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_template_data_document import UploadTemplateDataDocument
from openapi_server import util


class UploadTemplateData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_additional_properties: bool=None, description: str=None, document: UploadTemplateDataDocument=None, editable_submissions: bool=None, expiration_interval: str=None, expire_after: float=None, expire_submissions: bool=None, footer_html: str=None, header_html: str=None, html: str=None, name: str=None, public_submissions: bool=None, public_web_form: bool=None, redirect_url: str=None, scss: str=None, slack_webhook_url: str=None, template_type: str=None, webhook_url: str=None):
        """UploadTemplateData - a model defined in OpenAPI

        :param allow_additional_properties: The allow_additional_properties of this UploadTemplateData.
        :param description: The description of this UploadTemplateData.
        :param document: The document of this UploadTemplateData.
        :param editable_submissions: The editable_submissions of this UploadTemplateData.
        :param expiration_interval: The expiration_interval of this UploadTemplateData.
        :param expire_after: The expire_after of this UploadTemplateData.
        :param expire_submissions: The expire_submissions of this UploadTemplateData.
        :param footer_html: The footer_html of this UploadTemplateData.
        :param header_html: The header_html of this UploadTemplateData.
        :param html: The html of this UploadTemplateData.
        :param name: The name of this UploadTemplateData.
        :param public_submissions: The public_submissions of this UploadTemplateData.
        :param public_web_form: The public_web_form of this UploadTemplateData.
        :param redirect_url: The redirect_url of this UploadTemplateData.
        :param scss: The scss of this UploadTemplateData.
        :param slack_webhook_url: The slack_webhook_url of this UploadTemplateData.
        :param template_type: The template_type of this UploadTemplateData.
        :param webhook_url: The webhook_url of this UploadTemplateData.
        """
        self.openapi_types = {
            'allow_additional_properties': bool,
            'description': str,
            'document': UploadTemplateDataDocument,
            'editable_submissions': bool,
            'expiration_interval': str,
            'expire_after': float,
            'expire_submissions': bool,
            'footer_html': str,
            'header_html': str,
            'html': str,
            'name': str,
            'public_submissions': bool,
            'public_web_form': bool,
            'redirect_url': str,
            'scss': str,
            'slack_webhook_url': str,
            'template_type': str,
            'webhook_url': str
        }

        self.attribute_map = {
            'allow_additional_properties': 'allow_additional_properties',
            'description': 'description',
            'document': 'document',
            'editable_submissions': 'editable_submissions',
            'expiration_interval': 'expiration_interval',
            'expire_after': 'expire_after',
            'expire_submissions': 'expire_submissions',
            'footer_html': 'footer_html',
            'header_html': 'header_html',
            'html': 'html',
            'name': 'name',
            'public_submissions': 'public_submissions',
            'public_web_form': 'public_web_form',
            'redirect_url': 'redirect_url',
            'scss': 'scss',
            'slack_webhook_url': 'slack_webhook_url',
            'template_type': 'template_type',
            'webhook_url': 'webhook_url'
        }

        self._allow_additional_properties = allow_additional_properties
        self._description = description
        self._document = document
        self._editable_submissions = editable_submissions
        self._expiration_interval = expiration_interval
        self._expire_after = expire_after
        self._expire_submissions = expire_submissions
        self._footer_html = footer_html
        self._header_html = header_html
        self._html = html
        self._name = name
        self._public_submissions = public_submissions
        self._public_web_form = public_web_form
        self._redirect_url = redirect_url
        self._scss = scss
        self._slack_webhook_url = slack_webhook_url
        self._template_type = template_type
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadTemplateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_template_data of this UploadTemplateData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_additional_properties(self):
        """Gets the allow_additional_properties of this UploadTemplateData.


        :return: The allow_additional_properties of this UploadTemplateData.
        :rtype: bool
        """
        return self._allow_additional_properties

    @allow_additional_properties.setter
    def allow_additional_properties(self, allow_additional_properties):
        """Sets the allow_additional_properties of this UploadTemplateData.


        :param allow_additional_properties: The allow_additional_properties of this UploadTemplateData.
        :type allow_additional_properties: bool
        """

        self._allow_additional_properties = allow_additional_properties

    @property
    def description(self):
        """Gets the description of this UploadTemplateData.


        :return: The description of this UploadTemplateData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UploadTemplateData.


        :param description: The description of this UploadTemplateData.
        :type description: str
        """

        self._description = description

    @property
    def document(self):
        """Gets the document of this UploadTemplateData.


        :return: The document of this UploadTemplateData.
        :rtype: UploadTemplateDataDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this UploadTemplateData.


        :param document: The document of this UploadTemplateData.
        :type document: UploadTemplateDataDocument
        """

        self._document = document

    @property
    def editable_submissions(self):
        """Gets the editable_submissions of this UploadTemplateData.


        :return: The editable_submissions of this UploadTemplateData.
        :rtype: bool
        """
        return self._editable_submissions

    @editable_submissions.setter
    def editable_submissions(self, editable_submissions):
        """Sets the editable_submissions of this UploadTemplateData.


        :param editable_submissions: The editable_submissions of this UploadTemplateData.
        :type editable_submissions: bool
        """

        self._editable_submissions = editable_submissions

    @property
    def expiration_interval(self):
        """Gets the expiration_interval of this UploadTemplateData.


        :return: The expiration_interval of this UploadTemplateData.
        :rtype: str
        """
        return self._expiration_interval

    @expiration_interval.setter
    def expiration_interval(self, expiration_interval):
        """Sets the expiration_interval of this UploadTemplateData.


        :param expiration_interval: The expiration_interval of this UploadTemplateData.
        :type expiration_interval: str
        """
        allowed_values = ["minutes", "hours", "days"]  # noqa: E501
        if expiration_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration_interval` ({0}), must be one of {1}"
                .format(expiration_interval, allowed_values)
            )

        self._expiration_interval = expiration_interval

    @property
    def expire_after(self):
        """Gets the expire_after of this UploadTemplateData.


        :return: The expire_after of this UploadTemplateData.
        :rtype: float
        """
        return self._expire_after

    @expire_after.setter
    def expire_after(self, expire_after):
        """Sets the expire_after of this UploadTemplateData.


        :param expire_after: The expire_after of this UploadTemplateData.
        :type expire_after: float
        """

        self._expire_after = expire_after

    @property
    def expire_submissions(self):
        """Gets the expire_submissions of this UploadTemplateData.


        :return: The expire_submissions of this UploadTemplateData.
        :rtype: bool
        """
        return self._expire_submissions

    @expire_submissions.setter
    def expire_submissions(self, expire_submissions):
        """Sets the expire_submissions of this UploadTemplateData.


        :param expire_submissions: The expire_submissions of this UploadTemplateData.
        :type expire_submissions: bool
        """

        self._expire_submissions = expire_submissions

    @property
    def footer_html(self):
        """Gets the footer_html of this UploadTemplateData.


        :return: The footer_html of this UploadTemplateData.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this UploadTemplateData.


        :param footer_html: The footer_html of this UploadTemplateData.
        :type footer_html: str
        """

        self._footer_html = footer_html

    @property
    def header_html(self):
        """Gets the header_html of this UploadTemplateData.


        :return: The header_html of this UploadTemplateData.
        :rtype: str
        """
        return self._header_html

    @header_html.setter
    def header_html(self, header_html):
        """Sets the header_html of this UploadTemplateData.


        :param header_html: The header_html of this UploadTemplateData.
        :type header_html: str
        """

        self._header_html = header_html

    @property
    def html(self):
        """Gets the html of this UploadTemplateData.


        :return: The html of this UploadTemplateData.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this UploadTemplateData.


        :param html: The html of this UploadTemplateData.
        :type html: str
        """

        self._html = html

    @property
    def name(self):
        """Gets the name of this UploadTemplateData.


        :return: The name of this UploadTemplateData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadTemplateData.


        :param name: The name of this UploadTemplateData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def public_submissions(self):
        """Gets the public_submissions of this UploadTemplateData.


        :return: The public_submissions of this UploadTemplateData.
        :rtype: bool
        """
        return self._public_submissions

    @public_submissions.setter
    def public_submissions(self, public_submissions):
        """Sets the public_submissions of this UploadTemplateData.


        :param public_submissions: The public_submissions of this UploadTemplateData.
        :type public_submissions: bool
        """

        self._public_submissions = public_submissions

    @property
    def public_web_form(self):
        """Gets the public_web_form of this UploadTemplateData.


        :return: The public_web_form of this UploadTemplateData.
        :rtype: bool
        """
        return self._public_web_form

    @public_web_form.setter
    def public_web_form(self, public_web_form):
        """Sets the public_web_form of this UploadTemplateData.


        :param public_web_form: The public_web_form of this UploadTemplateData.
        :type public_web_form: bool
        """

        self._public_web_form = public_web_form

    @property
    def redirect_url(self):
        """Gets the redirect_url of this UploadTemplateData.


        :return: The redirect_url of this UploadTemplateData.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this UploadTemplateData.


        :param redirect_url: The redirect_url of this UploadTemplateData.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def scss(self):
        """Gets the scss of this UploadTemplateData.


        :return: The scss of this UploadTemplateData.
        :rtype: str
        """
        return self._scss

    @scss.setter
    def scss(self, scss):
        """Sets the scss of this UploadTemplateData.


        :param scss: The scss of this UploadTemplateData.
        :type scss: str
        """

        self._scss = scss

    @property
    def slack_webhook_url(self):
        """Gets the slack_webhook_url of this UploadTemplateData.


        :return: The slack_webhook_url of this UploadTemplateData.
        :rtype: str
        """
        return self._slack_webhook_url

    @slack_webhook_url.setter
    def slack_webhook_url(self, slack_webhook_url):
        """Sets the slack_webhook_url of this UploadTemplateData.


        :param slack_webhook_url: The slack_webhook_url of this UploadTemplateData.
        :type slack_webhook_url: str
        """

        self._slack_webhook_url = slack_webhook_url

    @property
    def template_type(self):
        """Gets the template_type of this UploadTemplateData.


        :return: The template_type of this UploadTemplateData.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this UploadTemplateData.


        :param template_type: The template_type of this UploadTemplateData.
        :type template_type: str
        """
        allowed_values = ["pdf", "html"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    @property
    def webhook_url(self):
        """Gets the webhook_url of this UploadTemplateData.


        :return: The webhook_url of this UploadTemplateData.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this UploadTemplateData.


        :param webhook_url: The webhook_url of this UploadTemplateData.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
