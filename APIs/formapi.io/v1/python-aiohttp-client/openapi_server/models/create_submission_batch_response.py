# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_submission_batch_submissions_response import CreateSubmissionBatchSubmissionsResponse
from openapi_server.models.submission_batch import SubmissionBatch
from openapi_server import util


class CreateSubmissionBatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, errors: List[str]=None, status: str=None, submission_batch: SubmissionBatch=None, submissions: List[CreateSubmissionBatchSubmissionsResponse]=None):
        """CreateSubmissionBatchResponse - a model defined in OpenAPI

        :param error: The error of this CreateSubmissionBatchResponse.
        :param errors: The errors of this CreateSubmissionBatchResponse.
        :param status: The status of this CreateSubmissionBatchResponse.
        :param submission_batch: The submission_batch of this CreateSubmissionBatchResponse.
        :param submissions: The submissions of this CreateSubmissionBatchResponse.
        """
        self.openapi_types = {
            'error': str,
            'errors': List[str],
            'status': str,
            'submission_batch': SubmissionBatch,
            'submissions': List[CreateSubmissionBatchSubmissionsResponse]
        }

        self.attribute_map = {
            'error': 'error',
            'errors': 'errors',
            'status': 'status',
            'submission_batch': 'submission_batch',
            'submissions': 'submissions'
        }

        self._error = error
        self._errors = errors
        self._status = status
        self._submission_batch = submission_batch
        self._submissions = submissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubmissionBatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_submission_batch_response of this CreateSubmissionBatchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this CreateSubmissionBatchResponse.


        :return: The error of this CreateSubmissionBatchResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CreateSubmissionBatchResponse.


        :param error: The error of this CreateSubmissionBatchResponse.
        :type error: str
        """

        self._error = error

    @property
    def errors(self):
        """Gets the errors of this CreateSubmissionBatchResponse.


        :return: The errors of this CreateSubmissionBatchResponse.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateSubmissionBatchResponse.


        :param errors: The errors of this CreateSubmissionBatchResponse.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this CreateSubmissionBatchResponse.


        :return: The status of this CreateSubmissionBatchResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateSubmissionBatchResponse.


        :param status: The status of this CreateSubmissionBatchResponse.
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission_batch(self):
        """Gets the submission_batch of this CreateSubmissionBatchResponse.


        :return: The submission_batch of this CreateSubmissionBatchResponse.
        :rtype: SubmissionBatch
        """
        return self._submission_batch

    @submission_batch.setter
    def submission_batch(self, submission_batch):
        """Sets the submission_batch of this CreateSubmissionBatchResponse.


        :param submission_batch: The submission_batch of this CreateSubmissionBatchResponse.
        :type submission_batch: SubmissionBatch
        """
        if submission_batch is None:
            raise ValueError("Invalid value for `submission_batch`, must not be `None`")

        self._submission_batch = submission_batch

    @property
    def submissions(self):
        """Gets the submissions of this CreateSubmissionBatchResponse.


        :return: The submissions of this CreateSubmissionBatchResponse.
        :rtype: List[CreateSubmissionBatchSubmissionsResponse]
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this CreateSubmissionBatchResponse.


        :param submissions: The submissions of this CreateSubmissionBatchResponse.
        :type submissions: List[CreateSubmissionBatchSubmissionsResponse]
        """
        if submissions is None:
            raise ValueError("Invalid value for `submissions`, must not be `None`")

        self._submissions = submissions
