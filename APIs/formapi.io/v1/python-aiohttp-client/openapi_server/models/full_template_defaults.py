# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FullTemplateDefaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, font_size: float=None, typeface: str=None):
        """FullTemplateDefaults - a model defined in OpenAPI

        :param color: The color of this FullTemplateDefaults.
        :param font_size: The font_size of this FullTemplateDefaults.
        :param typeface: The typeface of this FullTemplateDefaults.
        """
        self.openapi_types = {
            'color': str,
            'font_size': float,
            'typeface': str
        }

        self.attribute_map = {
            'color': 'color',
            'font_size': 'fontSize',
            'typeface': 'typeface'
        }

        self._color = color
        self._font_size = font_size
        self._typeface = typeface

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullTemplateDefaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The full_template_defaults of this FullTemplateDefaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this FullTemplateDefaults.


        :return: The color of this FullTemplateDefaults.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FullTemplateDefaults.


        :param color: The color of this FullTemplateDefaults.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def font_size(self):
        """Gets the font_size of this FullTemplateDefaults.


        :return: The font_size of this FullTemplateDefaults.
        :rtype: float
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this FullTemplateDefaults.


        :param font_size: The font_size of this FullTemplateDefaults.
        :type font_size: float
        """
        if font_size is None:
            raise ValueError("Invalid value for `font_size`, must not be `None`")

        self._font_size = font_size

    @property
    def typeface(self):
        """Gets the typeface of this FullTemplateDefaults.


        :return: The typeface of this FullTemplateDefaults.
        :rtype: str
        """
        return self._typeface

    @typeface.setter
    def typeface(self, typeface):
        """Sets the typeface of this FullTemplateDefaults.


        :param typeface: The typeface of this FullTemplateDefaults.
        :type typeface: str
        """
        if typeface is None:
            raise ValueError("Invalid value for `typeface`, must not be `None`")

        self._typeface = typeface
