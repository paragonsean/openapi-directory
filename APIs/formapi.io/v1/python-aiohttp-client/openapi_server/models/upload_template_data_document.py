# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_template_data_document_metadata import UploadTemplateDataDocumentMetadata
from openapi_server import util


class UploadTemplateDataDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, metadata: UploadTemplateDataDocumentMetadata=None, storage: str=None):
        """UploadTemplateDataDocument - a model defined in OpenAPI

        :param id: The id of this UploadTemplateDataDocument.
        :param metadata: The metadata of this UploadTemplateDataDocument.
        :param storage: The storage of this UploadTemplateDataDocument.
        """
        self.openapi_types = {
            'id': str,
            'metadata': UploadTemplateDataDocumentMetadata,
            'storage': str
        }

        self.attribute_map = {
            'id': 'id',
            'metadata': 'metadata',
            'storage': 'storage'
        }

        self._id = id
        self._metadata = metadata
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadTemplateDataDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_template_data_document of this UploadTemplateDataDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UploadTemplateDataDocument.


        :return: The id of this UploadTemplateDataDocument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UploadTemplateDataDocument.


        :param id: The id of this UploadTemplateDataDocument.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this UploadTemplateDataDocument.


        :return: The metadata of this UploadTemplateDataDocument.
        :rtype: UploadTemplateDataDocumentMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UploadTemplateDataDocument.


        :param metadata: The metadata of this UploadTemplateDataDocument.
        :type metadata: UploadTemplateDataDocumentMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def storage(self):
        """Gets the storage of this UploadTemplateDataDocument.


        :return: The storage of this UploadTemplateDataDocument.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this UploadTemplateDataDocument.


        :param storage: The storage of this UploadTemplateDataDocument.
        :type storage: str
        """
        allowed_values = ["cache"]  # noqa: E501
        if storage not in allowed_values:
            raise ValueError(
                "Invalid value for `storage` ({0}), must be one of {1}"
                .format(storage, allowed_values)
            )

        self._storage = storage
