# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubmissionAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_category: str=None, action_type: str=None, id: str=None, integration_id: str=None, result_data: object=None, state: str=None):
        """SubmissionAction - a model defined in OpenAPI

        :param action_category: The action_category of this SubmissionAction.
        :param action_type: The action_type of this SubmissionAction.
        :param id: The id of this SubmissionAction.
        :param integration_id: The integration_id of this SubmissionAction.
        :param result_data: The result_data of this SubmissionAction.
        :param state: The state of this SubmissionAction.
        """
        self.openapi_types = {
            'action_category': str,
            'action_type': str,
            'id': str,
            'integration_id': str,
            'result_data': object,
            'state': str
        }

        self.attribute_map = {
            'action_category': 'action_category',
            'action_type': 'action_type',
            'id': 'id',
            'integration_id': 'integration_id',
            'result_data': 'result_data',
            'state': 'state'
        }

        self._action_category = action_category
        self._action_type = action_type
        self._id = id
        self._integration_id = integration_id
        self._result_data = result_data
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission_action of this SubmissionAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_category(self):
        """Gets the action_category of this SubmissionAction.


        :return: The action_category of this SubmissionAction.
        :rtype: str
        """
        return self._action_category

    @action_category.setter
    def action_category(self, action_category):
        """Sets the action_category of this SubmissionAction.


        :param action_category: The action_category of this SubmissionAction.
        :type action_category: str
        """
        allowed_values = ["notification", "file_upload"]  # noqa: E501
        if action_category not in allowed_values:
            raise ValueError(
                "Invalid value for `action_category` ({0}), must be one of {1}"
                .format(action_category, allowed_values)
            )

        self._action_category = action_category

    @property
    def action_type(self):
        """Gets the action_type of this SubmissionAction.


        :return: The action_type of this SubmissionAction.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this SubmissionAction.


        :param action_type: The action_type of this SubmissionAction.
        :type action_type: str
        """
        allowed_values = ["webhook", "slack_webhook", "email", "aws_s3_upload"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def id(self):
        """Gets the id of this SubmissionAction.


        :return: The id of this SubmissionAction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionAction.


        :param id: The id of this SubmissionAction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def integration_id(self):
        """Gets the integration_id of this SubmissionAction.


        :return: The integration_id of this SubmissionAction.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this SubmissionAction.


        :param integration_id: The integration_id of this SubmissionAction.
        :type integration_id: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")

        self._integration_id = integration_id

    @property
    def result_data(self):
        """Gets the result_data of this SubmissionAction.


        :return: The result_data of this SubmissionAction.
        :rtype: object
        """
        return self._result_data

    @result_data.setter
    def result_data(self, result_data):
        """Sets the result_data of this SubmissionAction.


        :param result_data: The result_data of this SubmissionAction.
        :type result_data: object
        """
        if result_data is None:
            raise ValueError("Invalid value for `result_data`, must not be `None`")

        self._result_data = result_data

    @property
    def state(self):
        """Gets the state of this SubmissionAction.


        :return: The state of this SubmissionAction.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmissionAction.


        :param state: The state of this SubmissionAction.
        :type state: str
        """
        allowed_values = ["pending", "processed", "failed", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
