# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomFileData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_id: str=None):
        """CreateCustomFileData - a model defined in OpenAPI

        :param cache_id: The cache_id of this CreateCustomFileData.
        """
        self.openapi_types = {
            'cache_id': str
        }

        self.attribute_map = {
            'cache_id': 'cache_id'
        }

        self._cache_id = cache_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomFileData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_custom_file_data of this CreateCustomFileData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_id(self):
        """Gets the cache_id of this CreateCustomFileData.


        :return: The cache_id of this CreateCustomFileData.
        :rtype: str
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this CreateCustomFileData.


        :param cache_id: The cache_id of this CreateCustomFileData.
        :type cache_id: str
        """
        if cache_id is None:
            raise ValueError("Invalid value for `cache_id`, must not be `None`")
        if cache_id is not None and len(cache_id) < 1:
            raise ValueError("Invalid value for `cache_id`, length must be greater than or equal to `1`")

        self._cache_id = cache_id
