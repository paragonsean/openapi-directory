# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.submission_action import SubmissionAction
from openapi_server.models.submission_data_request import SubmissionDataRequest
from openapi_server import util


class Submission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[SubmissionAction]=None, batch_id: str=None, data: object=None, data_requests: List[SubmissionDataRequest]=None, download_url: str=None, editable: bool=None, expired: bool=None, expires_at: str=None, id: str=None, metadata: object=None, pdf_hash: str=None, permanent_download_url: str=None, processed_at: str=None, referrer: str=None, source: str=None, state: str=None, template_id: str=None, test: bool=None, truncated_text: object=None):
        """Submission - a model defined in OpenAPI

        :param actions: The actions of this Submission.
        :param batch_id: The batch_id of this Submission.
        :param data: The data of this Submission.
        :param data_requests: The data_requests of this Submission.
        :param download_url: The download_url of this Submission.
        :param editable: The editable of this Submission.
        :param expired: The expired of this Submission.
        :param expires_at: The expires_at of this Submission.
        :param id: The id of this Submission.
        :param metadata: The metadata of this Submission.
        :param pdf_hash: The pdf_hash of this Submission.
        :param permanent_download_url: The permanent_download_url of this Submission.
        :param processed_at: The processed_at of this Submission.
        :param referrer: The referrer of this Submission.
        :param source: The source of this Submission.
        :param state: The state of this Submission.
        :param template_id: The template_id of this Submission.
        :param test: The test of this Submission.
        :param truncated_text: The truncated_text of this Submission.
        """
        self.openapi_types = {
            'actions': List[SubmissionAction],
            'batch_id': str,
            'data': object,
            'data_requests': List[SubmissionDataRequest],
            'download_url': str,
            'editable': bool,
            'expired': bool,
            'expires_at': str,
            'id': str,
            'metadata': object,
            'pdf_hash': str,
            'permanent_download_url': str,
            'processed_at': str,
            'referrer': str,
            'source': str,
            'state': str,
            'template_id': str,
            'test': bool,
            'truncated_text': object
        }

        self.attribute_map = {
            'actions': 'actions',
            'batch_id': 'batch_id',
            'data': 'data',
            'data_requests': 'data_requests',
            'download_url': 'download_url',
            'editable': 'editable',
            'expired': 'expired',
            'expires_at': 'expires_at',
            'id': 'id',
            'metadata': 'metadata',
            'pdf_hash': 'pdf_hash',
            'permanent_download_url': 'permanent_download_url',
            'processed_at': 'processed_at',
            'referrer': 'referrer',
            'source': 'source',
            'state': 'state',
            'template_id': 'template_id',
            'test': 'test',
            'truncated_text': 'truncated_text'
        }

        self._actions = actions
        self._batch_id = batch_id
        self._data = data
        self._data_requests = data_requests
        self._download_url = download_url
        self._editable = editable
        self._expired = expired
        self._expires_at = expires_at
        self._id = id
        self._metadata = metadata
        self._pdf_hash = pdf_hash
        self._permanent_download_url = permanent_download_url
        self._processed_at = processed_at
        self._referrer = referrer
        self._source = source
        self._state = state
        self._template_id = template_id
        self._test = test
        self._truncated_text = truncated_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Submission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission of this Submission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Submission.


        :return: The actions of this Submission.
        :rtype: List[SubmissionAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Submission.


        :param actions: The actions of this Submission.
        :type actions: List[SubmissionAction]
        """

        self._actions = actions

    @property
    def batch_id(self):
        """Gets the batch_id of this Submission.


        :return: The batch_id of this Submission.
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this Submission.


        :param batch_id: The batch_id of this Submission.
        :type batch_id: str
        """

        self._batch_id = batch_id

    @property
    def data(self):
        """Gets the data of this Submission.


        :return: The data of this Submission.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Submission.


        :param data: The data of this Submission.
        :type data: object
        """

        self._data = data

    @property
    def data_requests(self):
        """Gets the data_requests of this Submission.


        :return: The data_requests of this Submission.
        :rtype: List[SubmissionDataRequest]
        """
        return self._data_requests

    @data_requests.setter
    def data_requests(self, data_requests):
        """Sets the data_requests of this Submission.


        :param data_requests: The data_requests of this Submission.
        :type data_requests: List[SubmissionDataRequest]
        """

        self._data_requests = data_requests

    @property
    def download_url(self):
        """Gets the download_url of this Submission.


        :return: The download_url of this Submission.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Submission.


        :param download_url: The download_url of this Submission.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def editable(self):
        """Gets the editable of this Submission.


        :return: The editable of this Submission.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Submission.


        :param editable: The editable of this Submission.
        :type editable: bool
        """

        self._editable = editable

    @property
    def expired(self):
        """Gets the expired of this Submission.


        :return: The expired of this Submission.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Submission.


        :param expired: The expired of this Submission.
        :type expired: bool
        """
        if expired is None:
            raise ValueError("Invalid value for `expired`, must not be `None`")

        self._expired = expired

    @property
    def expires_at(self):
        """Gets the expires_at of this Submission.


        :return: The expires_at of this Submission.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Submission.


        :param expires_at: The expires_at of this Submission.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this Submission.


        :return: The id of this Submission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Submission.


        :param id: The id of this Submission.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Submission.


        :return: The metadata of this Submission.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Submission.


        :param metadata: The metadata of this Submission.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def pdf_hash(self):
        """Gets the pdf_hash of this Submission.


        :return: The pdf_hash of this Submission.
        :rtype: str
        """
        return self._pdf_hash

    @pdf_hash.setter
    def pdf_hash(self, pdf_hash):
        """Sets the pdf_hash of this Submission.


        :param pdf_hash: The pdf_hash of this Submission.
        :type pdf_hash: str
        """

        self._pdf_hash = pdf_hash

    @property
    def permanent_download_url(self):
        """Gets the permanent_download_url of this Submission.


        :return: The permanent_download_url of this Submission.
        :rtype: str
        """
        return self._permanent_download_url

    @permanent_download_url.setter
    def permanent_download_url(self, permanent_download_url):
        """Sets the permanent_download_url of this Submission.


        :param permanent_download_url: The permanent_download_url of this Submission.
        :type permanent_download_url: str
        """

        self._permanent_download_url = permanent_download_url

    @property
    def processed_at(self):
        """Gets the processed_at of this Submission.


        :return: The processed_at of this Submission.
        :rtype: str
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this Submission.


        :param processed_at: The processed_at of this Submission.
        :type processed_at: str
        """

        self._processed_at = processed_at

    @property
    def referrer(self):
        """Gets the referrer of this Submission.


        :return: The referrer of this Submission.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Submission.


        :param referrer: The referrer of this Submission.
        :type referrer: str
        """

        self._referrer = referrer

    @property
    def source(self):
        """Gets the source of this Submission.


        :return: The source of this Submission.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Submission.


        :param source: The source of this Submission.
        :type source: str
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this Submission.


        :return: The state of this Submission.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Submission.


        :param state: The state of this Submission.
        :type state: str
        """
        allowed_values = ["pending", "processed", "invalid_data", "error", "image_download_failed", "image_processing_failed", "waiting_for_data_requests", "syntax_error", "account_suspended", "license_revoked", "accidental"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def template_id(self):
        """Gets the template_id of this Submission.


        :return: The template_id of this Submission.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Submission.


        :param template_id: The template_id of this Submission.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def test(self):
        """Gets the test of this Submission.


        :return: The test of this Submission.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Submission.


        :param test: The test of this Submission.
        :type test: bool
        """
        if test is None:
            raise ValueError("Invalid value for `test`, must not be `None`")

        self._test = test

    @property
    def truncated_text(self):
        """Gets the truncated_text of this Submission.


        :return: The truncated_text of this Submission.
        :rtype: object
        """
        return self._truncated_text

    @truncated_text.setter
    def truncated_text(self, truncated_text):
        """Sets the truncated_text of this Submission.


        :param truncated_text: The truncated_text of this Submission.
        :type truncated_text: object
        """

        self._truncated_text = truncated_text
