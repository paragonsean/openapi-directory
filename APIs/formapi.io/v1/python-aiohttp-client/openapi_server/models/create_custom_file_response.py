# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_file import CustomFile
from openapi_server import util


class CreateCustomFileResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_file: CustomFile=None, errors: List[str]=None, status: str=None):
        """CreateCustomFileResponse - a model defined in OpenAPI

        :param custom_file: The custom_file of this CreateCustomFileResponse.
        :param errors: The errors of this CreateCustomFileResponse.
        :param status: The status of this CreateCustomFileResponse.
        """
        self.openapi_types = {
            'custom_file': CustomFile,
            'errors': List[str],
            'status': str
        }

        self.attribute_map = {
            'custom_file': 'custom_file',
            'errors': 'errors',
            'status': 'status'
        }

        self._custom_file = custom_file
        self._errors = errors
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomFileResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_custom_file_response of this CreateCustomFileResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_file(self):
        """Gets the custom_file of this CreateCustomFileResponse.


        :return: The custom_file of this CreateCustomFileResponse.
        :rtype: CustomFile
        """
        return self._custom_file

    @custom_file.setter
    def custom_file(self, custom_file):
        """Sets the custom_file of this CreateCustomFileResponse.


        :param custom_file: The custom_file of this CreateCustomFileResponse.
        :type custom_file: CustomFile
        """
        if custom_file is None:
            raise ValueError("Invalid value for `custom_file`, must not be `None`")

        self._custom_file = custom_file

    @property
    def errors(self):
        """Gets the errors of this CreateCustomFileResponse.


        :return: The errors of this CreateCustomFileResponse.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateCustomFileResponse.


        :param errors: The errors of this CreateCustomFileResponse.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this CreateCustomFileResponse.


        :return: The status of this CreateCustomFileResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateCustomFileResponse.


        :param status: The status of this CreateCustomFileResponse.
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
