# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.full_template_defaults import FullTemplateDefaults
from openapi_server import util


class FullTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_additional_properties: bool=None, defaults: FullTemplateDefaults=None, demo: bool=None, description: str=None, document_filename: str=None, document_md5: str=None, document_parse_error: bool=None, document_processed: bool=None, document_state: str=None, document_url: str=None, editable_submissions: bool=None, embed_domains: List[str]=None, encrypt_pdfs: bool=None, encrypt_pdfs_password: str=None, expiration_interval: str=None, expire_after: float=None, expire_submissions: bool=None, field_order: List[List[float]]=None, fields: object=None, first_template: bool=None, footer_html: str=None, header_html: str=None, html: str=None, id: str=None, locked: bool=None, name: str=None, page_count: float=None, page_dimensions: List[List[float]]=None, parent_folder_id: str=None, path: str=None, permanent_document_url: str=None, public_submissions: bool=None, public_web_form: bool=None, redirect_url: str=None, scss: str=None, shared_field_data: object=None, slack_webhook_url: str=None, template_type: str=None, webhook_url: str=None):
        """FullTemplate - a model defined in OpenAPI

        :param allow_additional_properties: The allow_additional_properties of this FullTemplate.
        :param defaults: The defaults of this FullTemplate.
        :param demo: The demo of this FullTemplate.
        :param description: The description of this FullTemplate.
        :param document_filename: The document_filename of this FullTemplate.
        :param document_md5: The document_md5 of this FullTemplate.
        :param document_parse_error: The document_parse_error of this FullTemplate.
        :param document_processed: The document_processed of this FullTemplate.
        :param document_state: The document_state of this FullTemplate.
        :param document_url: The document_url of this FullTemplate.
        :param editable_submissions: The editable_submissions of this FullTemplate.
        :param embed_domains: The embed_domains of this FullTemplate.
        :param encrypt_pdfs: The encrypt_pdfs of this FullTemplate.
        :param encrypt_pdfs_password: The encrypt_pdfs_password of this FullTemplate.
        :param expiration_interval: The expiration_interval of this FullTemplate.
        :param expire_after: The expire_after of this FullTemplate.
        :param expire_submissions: The expire_submissions of this FullTemplate.
        :param field_order: The field_order of this FullTemplate.
        :param fields: The fields of this FullTemplate.
        :param first_template: The first_template of this FullTemplate.
        :param footer_html: The footer_html of this FullTemplate.
        :param header_html: The header_html of this FullTemplate.
        :param html: The html of this FullTemplate.
        :param id: The id of this FullTemplate.
        :param locked: The locked of this FullTemplate.
        :param name: The name of this FullTemplate.
        :param page_count: The page_count of this FullTemplate.
        :param page_dimensions: The page_dimensions of this FullTemplate.
        :param parent_folder_id: The parent_folder_id of this FullTemplate.
        :param path: The path of this FullTemplate.
        :param permanent_document_url: The permanent_document_url of this FullTemplate.
        :param public_submissions: The public_submissions of this FullTemplate.
        :param public_web_form: The public_web_form of this FullTemplate.
        :param redirect_url: The redirect_url of this FullTemplate.
        :param scss: The scss of this FullTemplate.
        :param shared_field_data: The shared_field_data of this FullTemplate.
        :param slack_webhook_url: The slack_webhook_url of this FullTemplate.
        :param template_type: The template_type of this FullTemplate.
        :param webhook_url: The webhook_url of this FullTemplate.
        """
        self.openapi_types = {
            'allow_additional_properties': bool,
            'defaults': FullTemplateDefaults,
            'demo': bool,
            'description': str,
            'document_filename': str,
            'document_md5': str,
            'document_parse_error': bool,
            'document_processed': bool,
            'document_state': str,
            'document_url': str,
            'editable_submissions': bool,
            'embed_domains': List[str],
            'encrypt_pdfs': bool,
            'encrypt_pdfs_password': str,
            'expiration_interval': str,
            'expire_after': float,
            'expire_submissions': bool,
            'field_order': List[List[float]],
            'fields': object,
            'first_template': bool,
            'footer_html': str,
            'header_html': str,
            'html': str,
            'id': str,
            'locked': bool,
            'name': str,
            'page_count': float,
            'page_dimensions': List[List[float]],
            'parent_folder_id': str,
            'path': str,
            'permanent_document_url': str,
            'public_submissions': bool,
            'public_web_form': bool,
            'redirect_url': str,
            'scss': str,
            'shared_field_data': object,
            'slack_webhook_url': str,
            'template_type': str,
            'webhook_url': str
        }

        self.attribute_map = {
            'allow_additional_properties': 'allow_additional_properties',
            'defaults': 'defaults',
            'demo': 'demo',
            'description': 'description',
            'document_filename': 'document_filename',
            'document_md5': 'document_md5',
            'document_parse_error': 'document_parse_error',
            'document_processed': 'document_processed',
            'document_state': 'document_state',
            'document_url': 'document_url',
            'editable_submissions': 'editable_submissions',
            'embed_domains': 'embed_domains',
            'encrypt_pdfs': 'encrypt_pdfs',
            'encrypt_pdfs_password': 'encrypt_pdfs_password',
            'expiration_interval': 'expiration_interval',
            'expire_after': 'expire_after',
            'expire_submissions': 'expire_submissions',
            'field_order': 'field_order',
            'fields': 'fields',
            'first_template': 'first_template',
            'footer_html': 'footer_html',
            'header_html': 'header_html',
            'html': 'html',
            'id': 'id',
            'locked': 'locked',
            'name': 'name',
            'page_count': 'page_count',
            'page_dimensions': 'page_dimensions',
            'parent_folder_id': 'parent_folder_id',
            'path': 'path',
            'permanent_document_url': 'permanent_document_url',
            'public_submissions': 'public_submissions',
            'public_web_form': 'public_web_form',
            'redirect_url': 'redirect_url',
            'scss': 'scss',
            'shared_field_data': 'shared_field_data',
            'slack_webhook_url': 'slack_webhook_url',
            'template_type': 'template_type',
            'webhook_url': 'webhook_url'
        }

        self._allow_additional_properties = allow_additional_properties
        self._defaults = defaults
        self._demo = demo
        self._description = description
        self._document_filename = document_filename
        self._document_md5 = document_md5
        self._document_parse_error = document_parse_error
        self._document_processed = document_processed
        self._document_state = document_state
        self._document_url = document_url
        self._editable_submissions = editable_submissions
        self._embed_domains = embed_domains
        self._encrypt_pdfs = encrypt_pdfs
        self._encrypt_pdfs_password = encrypt_pdfs_password
        self._expiration_interval = expiration_interval
        self._expire_after = expire_after
        self._expire_submissions = expire_submissions
        self._field_order = field_order
        self._fields = fields
        self._first_template = first_template
        self._footer_html = footer_html
        self._header_html = header_html
        self._html = html
        self._id = id
        self._locked = locked
        self._name = name
        self._page_count = page_count
        self._page_dimensions = page_dimensions
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._permanent_document_url = permanent_document_url
        self._public_submissions = public_submissions
        self._public_web_form = public_web_form
        self._redirect_url = redirect_url
        self._scss = scss
        self._shared_field_data = shared_field_data
        self._slack_webhook_url = slack_webhook_url
        self._template_type = template_type
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The full_template of this FullTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_additional_properties(self):
        """Gets the allow_additional_properties of this FullTemplate.


        :return: The allow_additional_properties of this FullTemplate.
        :rtype: bool
        """
        return self._allow_additional_properties

    @allow_additional_properties.setter
    def allow_additional_properties(self, allow_additional_properties):
        """Sets the allow_additional_properties of this FullTemplate.


        :param allow_additional_properties: The allow_additional_properties of this FullTemplate.
        :type allow_additional_properties: bool
        """
        if allow_additional_properties is None:
            raise ValueError("Invalid value for `allow_additional_properties`, must not be `None`")

        self._allow_additional_properties = allow_additional_properties

    @property
    def defaults(self):
        """Gets the defaults of this FullTemplate.


        :return: The defaults of this FullTemplate.
        :rtype: FullTemplateDefaults
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this FullTemplate.


        :param defaults: The defaults of this FullTemplate.
        :type defaults: FullTemplateDefaults
        """
        if defaults is None:
            raise ValueError("Invalid value for `defaults`, must not be `None`")

        self._defaults = defaults

    @property
    def demo(self):
        """Gets the demo of this FullTemplate.


        :return: The demo of this FullTemplate.
        :rtype: bool
        """
        return self._demo

    @demo.setter
    def demo(self, demo):
        """Sets the demo of this FullTemplate.


        :param demo: The demo of this FullTemplate.
        :type demo: bool
        """
        if demo is None:
            raise ValueError("Invalid value for `demo`, must not be `None`")

        self._demo = demo

    @property
    def description(self):
        """Gets the description of this FullTemplate.


        :return: The description of this FullTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FullTemplate.


        :param description: The description of this FullTemplate.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def document_filename(self):
        """Gets the document_filename of this FullTemplate.


        :return: The document_filename of this FullTemplate.
        :rtype: str
        """
        return self._document_filename

    @document_filename.setter
    def document_filename(self, document_filename):
        """Sets the document_filename of this FullTemplate.


        :param document_filename: The document_filename of this FullTemplate.
        :type document_filename: str
        """
        if document_filename is None:
            raise ValueError("Invalid value for `document_filename`, must not be `None`")

        self._document_filename = document_filename

    @property
    def document_md5(self):
        """Gets the document_md5 of this FullTemplate.


        :return: The document_md5 of this FullTemplate.
        :rtype: str
        """
        return self._document_md5

    @document_md5.setter
    def document_md5(self, document_md5):
        """Sets the document_md5 of this FullTemplate.


        :param document_md5: The document_md5 of this FullTemplate.
        :type document_md5: str
        """
        if document_md5 is None:
            raise ValueError("Invalid value for `document_md5`, must not be `None`")

        self._document_md5 = document_md5

    @property
    def document_parse_error(self):
        """Gets the document_parse_error of this FullTemplate.


        :return: The document_parse_error of this FullTemplate.
        :rtype: bool
        """
        return self._document_parse_error

    @document_parse_error.setter
    def document_parse_error(self, document_parse_error):
        """Sets the document_parse_error of this FullTemplate.


        :param document_parse_error: The document_parse_error of this FullTemplate.
        :type document_parse_error: bool
        """
        if document_parse_error is None:
            raise ValueError("Invalid value for `document_parse_error`, must not be `None`")

        self._document_parse_error = document_parse_error

    @property
    def document_processed(self):
        """Gets the document_processed of this FullTemplate.


        :return: The document_processed of this FullTemplate.
        :rtype: bool
        """
        return self._document_processed

    @document_processed.setter
    def document_processed(self, document_processed):
        """Sets the document_processed of this FullTemplate.


        :param document_processed: The document_processed of this FullTemplate.
        :type document_processed: bool
        """
        if document_processed is None:
            raise ValueError("Invalid value for `document_processed`, must not be `None`")

        self._document_processed = document_processed

    @property
    def document_state(self):
        """Gets the document_state of this FullTemplate.


        :return: The document_state of this FullTemplate.
        :rtype: str
        """
        return self._document_state

    @document_state.setter
    def document_state(self, document_state):
        """Sets the document_state of this FullTemplate.


        :param document_state: The document_state of this FullTemplate.
        :type document_state: str
        """
        if document_state is None:
            raise ValueError("Invalid value for `document_state`, must not be `None`")

        self._document_state = document_state

    @property
    def document_url(self):
        """Gets the document_url of this FullTemplate.


        :return: The document_url of this FullTemplate.
        :rtype: str
        """
        return self._document_url

    @document_url.setter
    def document_url(self, document_url):
        """Sets the document_url of this FullTemplate.


        :param document_url: The document_url of this FullTemplate.
        :type document_url: str
        """
        if document_url is None:
            raise ValueError("Invalid value for `document_url`, must not be `None`")

        self._document_url = document_url

    @property
    def editable_submissions(self):
        """Gets the editable_submissions of this FullTemplate.


        :return: The editable_submissions of this FullTemplate.
        :rtype: bool
        """
        return self._editable_submissions

    @editable_submissions.setter
    def editable_submissions(self, editable_submissions):
        """Sets the editable_submissions of this FullTemplate.


        :param editable_submissions: The editable_submissions of this FullTemplate.
        :type editable_submissions: bool
        """
        if editable_submissions is None:
            raise ValueError("Invalid value for `editable_submissions`, must not be `None`")

        self._editable_submissions = editable_submissions

    @property
    def embed_domains(self):
        """Gets the embed_domains of this FullTemplate.


        :return: The embed_domains of this FullTemplate.
        :rtype: List[str]
        """
        return self._embed_domains

    @embed_domains.setter
    def embed_domains(self, embed_domains):
        """Sets the embed_domains of this FullTemplate.


        :param embed_domains: The embed_domains of this FullTemplate.
        :type embed_domains: List[str]
        """
        if embed_domains is None:
            raise ValueError("Invalid value for `embed_domains`, must not be `None`")

        self._embed_domains = embed_domains

    @property
    def encrypt_pdfs(self):
        """Gets the encrypt_pdfs of this FullTemplate.


        :return: The encrypt_pdfs of this FullTemplate.
        :rtype: bool
        """
        return self._encrypt_pdfs

    @encrypt_pdfs.setter
    def encrypt_pdfs(self, encrypt_pdfs):
        """Sets the encrypt_pdfs of this FullTemplate.


        :param encrypt_pdfs: The encrypt_pdfs of this FullTemplate.
        :type encrypt_pdfs: bool
        """
        if encrypt_pdfs is None:
            raise ValueError("Invalid value for `encrypt_pdfs`, must not be `None`")

        self._encrypt_pdfs = encrypt_pdfs

    @property
    def encrypt_pdfs_password(self):
        """Gets the encrypt_pdfs_password of this FullTemplate.


        :return: The encrypt_pdfs_password of this FullTemplate.
        :rtype: str
        """
        return self._encrypt_pdfs_password

    @encrypt_pdfs_password.setter
    def encrypt_pdfs_password(self, encrypt_pdfs_password):
        """Sets the encrypt_pdfs_password of this FullTemplate.


        :param encrypt_pdfs_password: The encrypt_pdfs_password of this FullTemplate.
        :type encrypt_pdfs_password: str
        """
        if encrypt_pdfs_password is None:
            raise ValueError("Invalid value for `encrypt_pdfs_password`, must not be `None`")

        self._encrypt_pdfs_password = encrypt_pdfs_password

    @property
    def expiration_interval(self):
        """Gets the expiration_interval of this FullTemplate.


        :return: The expiration_interval of this FullTemplate.
        :rtype: str
        """
        return self._expiration_interval

    @expiration_interval.setter
    def expiration_interval(self, expiration_interval):
        """Sets the expiration_interval of this FullTemplate.


        :param expiration_interval: The expiration_interval of this FullTemplate.
        :type expiration_interval: str
        """
        allowed_values = ["minutes", "hours", "days"]  # noqa: E501
        if expiration_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration_interval` ({0}), must be one of {1}"
                .format(expiration_interval, allowed_values)
            )

        self._expiration_interval = expiration_interval

    @property
    def expire_after(self):
        """Gets the expire_after of this FullTemplate.


        :return: The expire_after of this FullTemplate.
        :rtype: float
        """
        return self._expire_after

    @expire_after.setter
    def expire_after(self, expire_after):
        """Sets the expire_after of this FullTemplate.


        :param expire_after: The expire_after of this FullTemplate.
        :type expire_after: float
        """
        if expire_after is None:
            raise ValueError("Invalid value for `expire_after`, must not be `None`")

        self._expire_after = expire_after

    @property
    def expire_submissions(self):
        """Gets the expire_submissions of this FullTemplate.


        :return: The expire_submissions of this FullTemplate.
        :rtype: bool
        """
        return self._expire_submissions

    @expire_submissions.setter
    def expire_submissions(self, expire_submissions):
        """Sets the expire_submissions of this FullTemplate.


        :param expire_submissions: The expire_submissions of this FullTemplate.
        :type expire_submissions: bool
        """
        if expire_submissions is None:
            raise ValueError("Invalid value for `expire_submissions`, must not be `None`")

        self._expire_submissions = expire_submissions

    @property
    def field_order(self):
        """Gets the field_order of this FullTemplate.


        :return: The field_order of this FullTemplate.
        :rtype: List[List[float]]
        """
        return self._field_order

    @field_order.setter
    def field_order(self, field_order):
        """Sets the field_order of this FullTemplate.


        :param field_order: The field_order of this FullTemplate.
        :type field_order: List[List[float]]
        """
        if field_order is None:
            raise ValueError("Invalid value for `field_order`, must not be `None`")

        self._field_order = field_order

    @property
    def fields(self):
        """Gets the fields of this FullTemplate.


        :return: The fields of this FullTemplate.
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FullTemplate.


        :param fields: The fields of this FullTemplate.
        :type fields: object
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def first_template(self):
        """Gets the first_template of this FullTemplate.


        :return: The first_template of this FullTemplate.
        :rtype: bool
        """
        return self._first_template

    @first_template.setter
    def first_template(self, first_template):
        """Sets the first_template of this FullTemplate.


        :param first_template: The first_template of this FullTemplate.
        :type first_template: bool
        """
        if first_template is None:
            raise ValueError("Invalid value for `first_template`, must not be `None`")

        self._first_template = first_template

    @property
    def footer_html(self):
        """Gets the footer_html of this FullTemplate.


        :return: The footer_html of this FullTemplate.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this FullTemplate.


        :param footer_html: The footer_html of this FullTemplate.
        :type footer_html: str
        """
        if footer_html is None:
            raise ValueError("Invalid value for `footer_html`, must not be `None`")

        self._footer_html = footer_html

    @property
    def header_html(self):
        """Gets the header_html of this FullTemplate.


        :return: The header_html of this FullTemplate.
        :rtype: str
        """
        return self._header_html

    @header_html.setter
    def header_html(self, header_html):
        """Sets the header_html of this FullTemplate.


        :param header_html: The header_html of this FullTemplate.
        :type header_html: str
        """
        if header_html is None:
            raise ValueError("Invalid value for `header_html`, must not be `None`")

        self._header_html = header_html

    @property
    def html(self):
        """Gets the html of this FullTemplate.


        :return: The html of this FullTemplate.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this FullTemplate.


        :param html: The html of this FullTemplate.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def id(self):
        """Gets the id of this FullTemplate.


        :return: The id of this FullTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FullTemplate.


        :param id: The id of this FullTemplate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def locked(self):
        """Gets the locked of this FullTemplate.


        :return: The locked of this FullTemplate.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this FullTemplate.


        :param locked: The locked of this FullTemplate.
        :type locked: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this FullTemplate.


        :return: The name of this FullTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FullTemplate.


        :param name: The name of this FullTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def page_count(self):
        """Gets the page_count of this FullTemplate.


        :return: The page_count of this FullTemplate.
        :rtype: float
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this FullTemplate.


        :param page_count: The page_count of this FullTemplate.
        :type page_count: float
        """
        if page_count is None:
            raise ValueError("Invalid value for `page_count`, must not be `None`")

        self._page_count = page_count

    @property
    def page_dimensions(self):
        """Gets the page_dimensions of this FullTemplate.


        :return: The page_dimensions of this FullTemplate.
        :rtype: List[List[float]]
        """
        return self._page_dimensions

    @page_dimensions.setter
    def page_dimensions(self, page_dimensions):
        """Sets the page_dimensions of this FullTemplate.


        :param page_dimensions: The page_dimensions of this FullTemplate.
        :type page_dimensions: List[List[float]]
        """
        if page_dimensions is None:
            raise ValueError("Invalid value for `page_dimensions`, must not be `None`")

        self._page_dimensions = page_dimensions

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FullTemplate.


        :return: The parent_folder_id of this FullTemplate.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FullTemplate.


        :param parent_folder_id: The parent_folder_id of this FullTemplate.
        :type parent_folder_id: str
        """
        if parent_folder_id is None:
            raise ValueError("Invalid value for `parent_folder_id`, must not be `None`")

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this FullTemplate.


        :return: The path of this FullTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FullTemplate.


        :param path: The path of this FullTemplate.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def permanent_document_url(self):
        """Gets the permanent_document_url of this FullTemplate.


        :return: The permanent_document_url of this FullTemplate.
        :rtype: str
        """
        return self._permanent_document_url

    @permanent_document_url.setter
    def permanent_document_url(self, permanent_document_url):
        """Sets the permanent_document_url of this FullTemplate.


        :param permanent_document_url: The permanent_document_url of this FullTemplate.
        :type permanent_document_url: str
        """
        if permanent_document_url is None:
            raise ValueError("Invalid value for `permanent_document_url`, must not be `None`")

        self._permanent_document_url = permanent_document_url

    @property
    def public_submissions(self):
        """Gets the public_submissions of this FullTemplate.


        :return: The public_submissions of this FullTemplate.
        :rtype: bool
        """
        return self._public_submissions

    @public_submissions.setter
    def public_submissions(self, public_submissions):
        """Sets the public_submissions of this FullTemplate.


        :param public_submissions: The public_submissions of this FullTemplate.
        :type public_submissions: bool
        """
        if public_submissions is None:
            raise ValueError("Invalid value for `public_submissions`, must not be `None`")

        self._public_submissions = public_submissions

    @property
    def public_web_form(self):
        """Gets the public_web_form of this FullTemplate.


        :return: The public_web_form of this FullTemplate.
        :rtype: bool
        """
        return self._public_web_form

    @public_web_form.setter
    def public_web_form(self, public_web_form):
        """Sets the public_web_form of this FullTemplate.


        :param public_web_form: The public_web_form of this FullTemplate.
        :type public_web_form: bool
        """
        if public_web_form is None:
            raise ValueError("Invalid value for `public_web_form`, must not be `None`")

        self._public_web_form = public_web_form

    @property
    def redirect_url(self):
        """Gets the redirect_url of this FullTemplate.


        :return: The redirect_url of this FullTemplate.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this FullTemplate.


        :param redirect_url: The redirect_url of this FullTemplate.
        :type redirect_url: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")

        self._redirect_url = redirect_url

    @property
    def scss(self):
        """Gets the scss of this FullTemplate.


        :return: The scss of this FullTemplate.
        :rtype: str
        """
        return self._scss

    @scss.setter
    def scss(self, scss):
        """Sets the scss of this FullTemplate.


        :param scss: The scss of this FullTemplate.
        :type scss: str
        """
        if scss is None:
            raise ValueError("Invalid value for `scss`, must not be `None`")

        self._scss = scss

    @property
    def shared_field_data(self):
        """Gets the shared_field_data of this FullTemplate.


        :return: The shared_field_data of this FullTemplate.
        :rtype: object
        """
        return self._shared_field_data

    @shared_field_data.setter
    def shared_field_data(self, shared_field_data):
        """Sets the shared_field_data of this FullTemplate.


        :param shared_field_data: The shared_field_data of this FullTemplate.
        :type shared_field_data: object
        """
        if shared_field_data is None:
            raise ValueError("Invalid value for `shared_field_data`, must not be `None`")

        self._shared_field_data = shared_field_data

    @property
    def slack_webhook_url(self):
        """Gets the slack_webhook_url of this FullTemplate.


        :return: The slack_webhook_url of this FullTemplate.
        :rtype: str
        """
        return self._slack_webhook_url

    @slack_webhook_url.setter
    def slack_webhook_url(self, slack_webhook_url):
        """Sets the slack_webhook_url of this FullTemplate.


        :param slack_webhook_url: The slack_webhook_url of this FullTemplate.
        :type slack_webhook_url: str
        """
        if slack_webhook_url is None:
            raise ValueError("Invalid value for `slack_webhook_url`, must not be `None`")

        self._slack_webhook_url = slack_webhook_url

    @property
    def template_type(self):
        """Gets the template_type of this FullTemplate.


        :return: The template_type of this FullTemplate.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this FullTemplate.


        :param template_type: The template_type of this FullTemplate.
        :type template_type: str
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type

    @property
    def webhook_url(self):
        """Gets the webhook_url of this FullTemplate.


        :return: The webhook_url of this FullTemplate.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this FullTemplate.


        :param webhook_url: The webhook_url of this FullTemplate.
        :type webhook_url: str
        """
        if webhook_url is None:
            raise ValueError("Invalid value for `webhook_url`, must not be `None`")

        self._webhook_url = webhook_url
