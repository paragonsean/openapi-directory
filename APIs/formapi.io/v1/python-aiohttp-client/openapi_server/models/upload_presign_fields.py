# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadPresignFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, policy: str=None, x_amz_algorithm: str=None, x_amz_credential: str=None, x_amz_date: str=None, x_amz_signature: str=None):
        """UploadPresignFields - a model defined in OpenAPI

        :param key: The key of this UploadPresignFields.
        :param policy: The policy of this UploadPresignFields.
        :param x_amz_algorithm: The x_amz_algorithm of this UploadPresignFields.
        :param x_amz_credential: The x_amz_credential of this UploadPresignFields.
        :param x_amz_date: The x_amz_date of this UploadPresignFields.
        :param x_amz_signature: The x_amz_signature of this UploadPresignFields.
        """
        self.openapi_types = {
            'key': str,
            'policy': str,
            'x_amz_algorithm': str,
            'x_amz_credential': str,
            'x_amz_date': str,
            'x_amz_signature': str
        }

        self.attribute_map = {
            'key': 'key',
            'policy': 'policy',
            'x_amz_algorithm': 'x-amz-algorithm',
            'x_amz_credential': 'x-amz-credential',
            'x_amz_date': 'x-amz-date',
            'x_amz_signature': 'x-amz-signature'
        }

        self._key = key
        self._policy = policy
        self._x_amz_algorithm = x_amz_algorithm
        self._x_amz_credential = x_amz_credential
        self._x_amz_date = x_amz_date
        self._x_amz_signature = x_amz_signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadPresignFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_presign_fields of this UploadPresignFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this UploadPresignFields.


        :return: The key of this UploadPresignFields.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UploadPresignFields.


        :param key: The key of this UploadPresignFields.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def policy(self):
        """Gets the policy of this UploadPresignFields.


        :return: The policy of this UploadPresignFields.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UploadPresignFields.


        :param policy: The policy of this UploadPresignFields.
        :type policy: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy

    @property
    def x_amz_algorithm(self):
        """Gets the x_amz_algorithm of this UploadPresignFields.


        :return: The x_amz_algorithm of this UploadPresignFields.
        :rtype: str
        """
        return self._x_amz_algorithm

    @x_amz_algorithm.setter
    def x_amz_algorithm(self, x_amz_algorithm):
        """Sets the x_amz_algorithm of this UploadPresignFields.


        :param x_amz_algorithm: The x_amz_algorithm of this UploadPresignFields.
        :type x_amz_algorithm: str
        """
        if x_amz_algorithm is None:
            raise ValueError("Invalid value for `x_amz_algorithm`, must not be `None`")

        self._x_amz_algorithm = x_amz_algorithm

    @property
    def x_amz_credential(self):
        """Gets the x_amz_credential of this UploadPresignFields.


        :return: The x_amz_credential of this UploadPresignFields.
        :rtype: str
        """
        return self._x_amz_credential

    @x_amz_credential.setter
    def x_amz_credential(self, x_amz_credential):
        """Sets the x_amz_credential of this UploadPresignFields.


        :param x_amz_credential: The x_amz_credential of this UploadPresignFields.
        :type x_amz_credential: str
        """
        if x_amz_credential is None:
            raise ValueError("Invalid value for `x_amz_credential`, must not be `None`")

        self._x_amz_credential = x_amz_credential

    @property
    def x_amz_date(self):
        """Gets the x_amz_date of this UploadPresignFields.


        :return: The x_amz_date of this UploadPresignFields.
        :rtype: str
        """
        return self._x_amz_date

    @x_amz_date.setter
    def x_amz_date(self, x_amz_date):
        """Sets the x_amz_date of this UploadPresignFields.


        :param x_amz_date: The x_amz_date of this UploadPresignFields.
        :type x_amz_date: str
        """
        if x_amz_date is None:
            raise ValueError("Invalid value for `x_amz_date`, must not be `None`")

        self._x_amz_date = x_amz_date

    @property
    def x_amz_signature(self):
        """Gets the x_amz_signature of this UploadPresignFields.


        :return: The x_amz_signature of this UploadPresignFields.
        :rtype: str
        """
        return self._x_amz_signature

    @x_amz_signature.setter
    def x_amz_signature(self, x_amz_signature):
        """Sets the x_amz_signature of this UploadPresignFields.


        :param x_amz_signature: The x_amz_signature of this UploadPresignFields.
        :type x_amz_signature: str
        """
        if x_amz_signature is None:
            raise ValueError("Invalid value for `x_amz_signature`, must not be `None`")

        self._x_amz_signature = x_amz_signature
