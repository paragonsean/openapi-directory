# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSubmissionDataRequestTokenResponseToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_request_url: str=None, expires_at: str=None, id: str=None, secret: str=None):
        """CreateSubmissionDataRequestTokenResponseToken - a model defined in OpenAPI

        :param data_request_url: The data_request_url of this CreateSubmissionDataRequestTokenResponseToken.
        :param expires_at: The expires_at of this CreateSubmissionDataRequestTokenResponseToken.
        :param id: The id of this CreateSubmissionDataRequestTokenResponseToken.
        :param secret: The secret of this CreateSubmissionDataRequestTokenResponseToken.
        """
        self.openapi_types = {
            'data_request_url': str,
            'expires_at': str,
            'id': str,
            'secret': str
        }

        self.attribute_map = {
            'data_request_url': 'data_request_url',
            'expires_at': 'expires_at',
            'id': 'id',
            'secret': 'secret'
        }

        self._data_request_url = data_request_url
        self._expires_at = expires_at
        self._id = id
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubmissionDataRequestTokenResponseToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_submission_data_request_token_response_token of this CreateSubmissionDataRequestTokenResponseToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_request_url(self):
        """Gets the data_request_url of this CreateSubmissionDataRequestTokenResponseToken.


        :return: The data_request_url of this CreateSubmissionDataRequestTokenResponseToken.
        :rtype: str
        """
        return self._data_request_url

    @data_request_url.setter
    def data_request_url(self, data_request_url):
        """Sets the data_request_url of this CreateSubmissionDataRequestTokenResponseToken.


        :param data_request_url: The data_request_url of this CreateSubmissionDataRequestTokenResponseToken.
        :type data_request_url: str
        """
        if data_request_url is None:
            raise ValueError("Invalid value for `data_request_url`, must not be `None`")

        self._data_request_url = data_request_url

    @property
    def expires_at(self):
        """Gets the expires_at of this CreateSubmissionDataRequestTokenResponseToken.


        :return: The expires_at of this CreateSubmissionDataRequestTokenResponseToken.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CreateSubmissionDataRequestTokenResponseToken.


        :param expires_at: The expires_at of this CreateSubmissionDataRequestTokenResponseToken.
        :type expires_at: str
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this CreateSubmissionDataRequestTokenResponseToken.


        :return: The id of this CreateSubmissionDataRequestTokenResponseToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateSubmissionDataRequestTokenResponseToken.


        :param id: The id of this CreateSubmissionDataRequestTokenResponseToken.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def secret(self):
        """Gets the secret of this CreateSubmissionDataRequestTokenResponseToken.


        :return: The secret of this CreateSubmissionDataRequestTokenResponseToken.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateSubmissionDataRequestTokenResponseToken.


        :param secret: The secret of this CreateSubmissionDataRequestTokenResponseToken.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
