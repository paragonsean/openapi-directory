# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.submission import Submission
from openapi_server import util


class CreateSubmissionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[str]=None, status: str=None, submission: Submission=None):
        """CreateSubmissionResponse - a model defined in OpenAPI

        :param errors: The errors of this CreateSubmissionResponse.
        :param status: The status of this CreateSubmissionResponse.
        :param submission: The submission of this CreateSubmissionResponse.
        """
        self.openapi_types = {
            'errors': List[str],
            'status': str,
            'submission': Submission
        }

        self.attribute_map = {
            'errors': 'errors',
            'status': 'status',
            'submission': 'submission'
        }

        self._errors = errors
        self._status = status
        self._submission = submission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubmissionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_submission_response of this CreateSubmissionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this CreateSubmissionResponse.


        :return: The errors of this CreateSubmissionResponse.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateSubmissionResponse.


        :param errors: The errors of this CreateSubmissionResponse.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this CreateSubmissionResponse.


        :return: The status of this CreateSubmissionResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateSubmissionResponse.


        :param status: The status of this CreateSubmissionResponse.
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this CreateSubmissionResponse.


        :return: The submission of this CreateSubmissionResponse.
        :rtype: Submission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this CreateSubmissionResponse.


        :param submission: The submission of this CreateSubmissionResponse.
        :type submission: Submission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission
