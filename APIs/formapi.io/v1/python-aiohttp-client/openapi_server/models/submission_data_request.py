# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubmissionDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_phone_number_hash: str=None, auth_provider: str=None, auth_second_factor_type: str=None, auth_session_id_hash: str=None, auth_session_started_at: str=None, auth_type: str=None, auth_user_id_hash: str=None, auth_username_hash: str=None, completed_at: str=None, email: str=None, fields: List[str]=None, id: str=None, ip_address: str=None, metadata: object=None, name: str=None, order: int=None, sort_order: int=None, state: str=None, submission_id: str=None, user_agent: str=None, viewed_at: str=None):
        """SubmissionDataRequest - a model defined in OpenAPI

        :param auth_phone_number_hash: The auth_phone_number_hash of this SubmissionDataRequest.
        :param auth_provider: The auth_provider of this SubmissionDataRequest.
        :param auth_second_factor_type: The auth_second_factor_type of this SubmissionDataRequest.
        :param auth_session_id_hash: The auth_session_id_hash of this SubmissionDataRequest.
        :param auth_session_started_at: The auth_session_started_at of this SubmissionDataRequest.
        :param auth_type: The auth_type of this SubmissionDataRequest.
        :param auth_user_id_hash: The auth_user_id_hash of this SubmissionDataRequest.
        :param auth_username_hash: The auth_username_hash of this SubmissionDataRequest.
        :param completed_at: The completed_at of this SubmissionDataRequest.
        :param email: The email of this SubmissionDataRequest.
        :param fields: The fields of this SubmissionDataRequest.
        :param id: The id of this SubmissionDataRequest.
        :param ip_address: The ip_address of this SubmissionDataRequest.
        :param metadata: The metadata of this SubmissionDataRequest.
        :param name: The name of this SubmissionDataRequest.
        :param order: The order of this SubmissionDataRequest.
        :param sort_order: The sort_order of this SubmissionDataRequest.
        :param state: The state of this SubmissionDataRequest.
        :param submission_id: The submission_id of this SubmissionDataRequest.
        :param user_agent: The user_agent of this SubmissionDataRequest.
        :param viewed_at: The viewed_at of this SubmissionDataRequest.
        """
        self.openapi_types = {
            'auth_phone_number_hash': str,
            'auth_provider': str,
            'auth_second_factor_type': str,
            'auth_session_id_hash': str,
            'auth_session_started_at': str,
            'auth_type': str,
            'auth_user_id_hash': str,
            'auth_username_hash': str,
            'completed_at': str,
            'email': str,
            'fields': List[str],
            'id': str,
            'ip_address': str,
            'metadata': object,
            'name': str,
            'order': int,
            'sort_order': int,
            'state': str,
            'submission_id': str,
            'user_agent': str,
            'viewed_at': str
        }

        self.attribute_map = {
            'auth_phone_number_hash': 'auth_phone_number_hash',
            'auth_provider': 'auth_provider',
            'auth_second_factor_type': 'auth_second_factor_type',
            'auth_session_id_hash': 'auth_session_id_hash',
            'auth_session_started_at': 'auth_session_started_at',
            'auth_type': 'auth_type',
            'auth_user_id_hash': 'auth_user_id_hash',
            'auth_username_hash': 'auth_username_hash',
            'completed_at': 'completed_at',
            'email': 'email',
            'fields': 'fields',
            'id': 'id',
            'ip_address': 'ip_address',
            'metadata': 'metadata',
            'name': 'name',
            'order': 'order',
            'sort_order': 'sort_order',
            'state': 'state',
            'submission_id': 'submission_id',
            'user_agent': 'user_agent',
            'viewed_at': 'viewed_at'
        }

        self._auth_phone_number_hash = auth_phone_number_hash
        self._auth_provider = auth_provider
        self._auth_second_factor_type = auth_second_factor_type
        self._auth_session_id_hash = auth_session_id_hash
        self._auth_session_started_at = auth_session_started_at
        self._auth_type = auth_type
        self._auth_user_id_hash = auth_user_id_hash
        self._auth_username_hash = auth_username_hash
        self._completed_at = completed_at
        self._email = email
        self._fields = fields
        self._id = id
        self._ip_address = ip_address
        self._metadata = metadata
        self._name = name
        self._order = order
        self._sort_order = sort_order
        self._state = state
        self._submission_id = submission_id
        self._user_agent = user_agent
        self._viewed_at = viewed_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission_data_request of this SubmissionDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_phone_number_hash(self):
        """Gets the auth_phone_number_hash of this SubmissionDataRequest.


        :return: The auth_phone_number_hash of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_phone_number_hash

    @auth_phone_number_hash.setter
    def auth_phone_number_hash(self, auth_phone_number_hash):
        """Sets the auth_phone_number_hash of this SubmissionDataRequest.


        :param auth_phone_number_hash: The auth_phone_number_hash of this SubmissionDataRequest.
        :type auth_phone_number_hash: str
        """

        self._auth_phone_number_hash = auth_phone_number_hash

    @property
    def auth_provider(self):
        """Gets the auth_provider of this SubmissionDataRequest.


        :return: The auth_provider of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_provider

    @auth_provider.setter
    def auth_provider(self, auth_provider):
        """Sets the auth_provider of this SubmissionDataRequest.


        :param auth_provider: The auth_provider of this SubmissionDataRequest.
        :type auth_provider: str
        """

        self._auth_provider = auth_provider

    @property
    def auth_second_factor_type(self):
        """Gets the auth_second_factor_type of this SubmissionDataRequest.


        :return: The auth_second_factor_type of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_second_factor_type

    @auth_second_factor_type.setter
    def auth_second_factor_type(self, auth_second_factor_type):
        """Sets the auth_second_factor_type of this SubmissionDataRequest.


        :param auth_second_factor_type: The auth_second_factor_type of this SubmissionDataRequest.
        :type auth_second_factor_type: str
        """
        allowed_values = ["none", "phone_number", "totp", "mobile_push", "security_key", "fingerprint"]  # noqa: E501
        if auth_second_factor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_second_factor_type` ({0}), must be one of {1}"
                .format(auth_second_factor_type, allowed_values)
            )

        self._auth_second_factor_type = auth_second_factor_type

    @property
    def auth_session_id_hash(self):
        """Gets the auth_session_id_hash of this SubmissionDataRequest.


        :return: The auth_session_id_hash of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_session_id_hash

    @auth_session_id_hash.setter
    def auth_session_id_hash(self, auth_session_id_hash):
        """Sets the auth_session_id_hash of this SubmissionDataRequest.


        :param auth_session_id_hash: The auth_session_id_hash of this SubmissionDataRequest.
        :type auth_session_id_hash: str
        """

        self._auth_session_id_hash = auth_session_id_hash

    @property
    def auth_session_started_at(self):
        """Gets the auth_session_started_at of this SubmissionDataRequest.


        :return: The auth_session_started_at of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_session_started_at

    @auth_session_started_at.setter
    def auth_session_started_at(self, auth_session_started_at):
        """Sets the auth_session_started_at of this SubmissionDataRequest.


        :param auth_session_started_at: The auth_session_started_at of this SubmissionDataRequest.
        :type auth_session_started_at: str
        """

        self._auth_session_started_at = auth_session_started_at

    @property
    def auth_type(self):
        """Gets the auth_type of this SubmissionDataRequest.


        :return: The auth_type of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this SubmissionDataRequest.


        :param auth_type: The auth_type of this SubmissionDataRequest.
        :type auth_type: str
        """
        allowed_values = ["none", "password", "oauth", "email_link", "phone_number", "ldap", "saml"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def auth_user_id_hash(self):
        """Gets the auth_user_id_hash of this SubmissionDataRequest.


        :return: The auth_user_id_hash of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_user_id_hash

    @auth_user_id_hash.setter
    def auth_user_id_hash(self, auth_user_id_hash):
        """Sets the auth_user_id_hash of this SubmissionDataRequest.


        :param auth_user_id_hash: The auth_user_id_hash of this SubmissionDataRequest.
        :type auth_user_id_hash: str
        """

        self._auth_user_id_hash = auth_user_id_hash

    @property
    def auth_username_hash(self):
        """Gets the auth_username_hash of this SubmissionDataRequest.


        :return: The auth_username_hash of this SubmissionDataRequest.
        :rtype: str
        """
        return self._auth_username_hash

    @auth_username_hash.setter
    def auth_username_hash(self, auth_username_hash):
        """Sets the auth_username_hash of this SubmissionDataRequest.


        :param auth_username_hash: The auth_username_hash of this SubmissionDataRequest.
        :type auth_username_hash: str
        """

        self._auth_username_hash = auth_username_hash

    @property
    def completed_at(self):
        """Gets the completed_at of this SubmissionDataRequest.


        :return: The completed_at of this SubmissionDataRequest.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this SubmissionDataRequest.


        :param completed_at: The completed_at of this SubmissionDataRequest.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def email(self):
        """Gets the email of this SubmissionDataRequest.


        :return: The email of this SubmissionDataRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubmissionDataRequest.


        :param email: The email of this SubmissionDataRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def fields(self):
        """Gets the fields of this SubmissionDataRequest.


        :return: The fields of this SubmissionDataRequest.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SubmissionDataRequest.


        :param fields: The fields of this SubmissionDataRequest.
        :type fields: List[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this SubmissionDataRequest.


        :return: The id of this SubmissionDataRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionDataRequest.


        :param id: The id of this SubmissionDataRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this SubmissionDataRequest.


        :return: The ip_address of this SubmissionDataRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SubmissionDataRequest.


        :param ip_address: The ip_address of this SubmissionDataRequest.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def metadata(self):
        """Gets the metadata of this SubmissionDataRequest.


        :return: The metadata of this SubmissionDataRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SubmissionDataRequest.


        :param metadata: The metadata of this SubmissionDataRequest.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this SubmissionDataRequest.


        :return: The name of this SubmissionDataRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubmissionDataRequest.


        :param name: The name of this SubmissionDataRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """Gets the order of this SubmissionDataRequest.


        :return: The order of this SubmissionDataRequest.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SubmissionDataRequest.


        :param order: The order of this SubmissionDataRequest.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def sort_order(self):
        """Gets the sort_order of this SubmissionDataRequest.


        :return: The sort_order of this SubmissionDataRequest.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SubmissionDataRequest.


        :param sort_order: The sort_order of this SubmissionDataRequest.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def state(self):
        """Gets the state of this SubmissionDataRequest.


        :return: The state of this SubmissionDataRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmissionDataRequest.


        :param state: The state of this SubmissionDataRequest.
        :type state: str
        """
        allowed_values = ["pending", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submission_id(self):
        """Gets the submission_id of this SubmissionDataRequest.


        :return: The submission_id of this SubmissionDataRequest.
        :rtype: str
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """Sets the submission_id of this SubmissionDataRequest.


        :param submission_id: The submission_id of this SubmissionDataRequest.
        :type submission_id: str
        """

        self._submission_id = submission_id

    @property
    def user_agent(self):
        """Gets the user_agent of this SubmissionDataRequest.


        :return: The user_agent of this SubmissionDataRequest.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this SubmissionDataRequest.


        :param user_agent: The user_agent of this SubmissionDataRequest.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def viewed_at(self):
        """Gets the viewed_at of this SubmissionDataRequest.


        :return: The viewed_at of this SubmissionDataRequest.
        :rtype: str
        """
        return self._viewed_at

    @viewed_at.setter
    def viewed_at(self, viewed_at):
        """Sets the viewed_at of this SubmissionDataRequest.


        :param viewed_at: The viewed_at of this SubmissionDataRequest.
        :type viewed_at: str
        """

        self._viewed_at = viewed_at
