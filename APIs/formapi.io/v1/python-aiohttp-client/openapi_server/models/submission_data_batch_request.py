# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubmissionDataBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css: str=None, data: object=None, html: str=None, metadata: object=None, template_id: str=None, test: bool=None):
        """SubmissionDataBatchRequest - a model defined in OpenAPI

        :param css: The css of this SubmissionDataBatchRequest.
        :param data: The data of this SubmissionDataBatchRequest.
        :param html: The html of this SubmissionDataBatchRequest.
        :param metadata: The metadata of this SubmissionDataBatchRequest.
        :param template_id: The template_id of this SubmissionDataBatchRequest.
        :param test: The test of this SubmissionDataBatchRequest.
        """
        self.openapi_types = {
            'css': str,
            'data': object,
            'html': str,
            'metadata': object,
            'template_id': str,
            'test': bool
        }

        self.attribute_map = {
            'css': 'css',
            'data': 'data',
            'html': 'html',
            'metadata': 'metadata',
            'template_id': 'template_id',
            'test': 'test'
        }

        self._css = css
        self._data = data
        self._html = html
        self._metadata = metadata
        self._template_id = template_id
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmissionDataBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The submission_data_batch_request of this SubmissionDataBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self):
        """Gets the css of this SubmissionDataBatchRequest.


        :return: The css of this SubmissionDataBatchRequest.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this SubmissionDataBatchRequest.


        :param css: The css of this SubmissionDataBatchRequest.
        :type css: str
        """

        self._css = css

    @property
    def data(self):
        """Gets the data of this SubmissionDataBatchRequest.


        :return: The data of this SubmissionDataBatchRequest.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SubmissionDataBatchRequest.


        :param data: The data of this SubmissionDataBatchRequest.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def html(self):
        """Gets the html of this SubmissionDataBatchRequest.


        :return: The html of this SubmissionDataBatchRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this SubmissionDataBatchRequest.


        :param html: The html of this SubmissionDataBatchRequest.
        :type html: str
        """

        self._html = html

    @property
    def metadata(self):
        """Gets the metadata of this SubmissionDataBatchRequest.


        :return: The metadata of this SubmissionDataBatchRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SubmissionDataBatchRequest.


        :param metadata: The metadata of this SubmissionDataBatchRequest.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def template_id(self):
        """Gets the template_id of this SubmissionDataBatchRequest.


        :return: The template_id of this SubmissionDataBatchRequest.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this SubmissionDataBatchRequest.


        :param template_id: The template_id of this SubmissionDataBatchRequest.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")

        self._template_id = template_id

    @property
    def test(self):
        """Gets the test of this SubmissionDataBatchRequest.


        :return: The test of this SubmissionDataBatchRequest.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this SubmissionDataBatchRequest.


        :param test: The test of this SubmissionDataBatchRequest.
        :type test: bool
        """

        self._test = test
