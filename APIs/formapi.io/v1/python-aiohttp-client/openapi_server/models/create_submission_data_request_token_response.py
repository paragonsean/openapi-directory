# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_submission_data_request_token_response_token import CreateSubmissionDataRequestTokenResponseToken
from openapi_server import util


class CreateSubmissionDataRequestTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[str]=None, status: str=None, token: CreateSubmissionDataRequestTokenResponseToken=None):
        """CreateSubmissionDataRequestTokenResponse - a model defined in OpenAPI

        :param errors: The errors of this CreateSubmissionDataRequestTokenResponse.
        :param status: The status of this CreateSubmissionDataRequestTokenResponse.
        :param token: The token of this CreateSubmissionDataRequestTokenResponse.
        """
        self.openapi_types = {
            'errors': List[str],
            'status': str,
            'token': CreateSubmissionDataRequestTokenResponseToken
        }

        self.attribute_map = {
            'errors': 'errors',
            'status': 'status',
            'token': 'token'
        }

        self._errors = errors
        self._status = status
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubmissionDataRequestTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_submission_data_request_token_response of this CreateSubmissionDataRequestTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this CreateSubmissionDataRequestTokenResponse.


        :return: The errors of this CreateSubmissionDataRequestTokenResponse.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateSubmissionDataRequestTokenResponse.


        :param errors: The errors of this CreateSubmissionDataRequestTokenResponse.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this CreateSubmissionDataRequestTokenResponse.


        :return: The status of this CreateSubmissionDataRequestTokenResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateSubmissionDataRequestTokenResponse.


        :param status: The status of this CreateSubmissionDataRequestTokenResponse.
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def token(self):
        """Gets the token of this CreateSubmissionDataRequestTokenResponse.


        :return: The token of this CreateSubmissionDataRequestTokenResponse.
        :rtype: CreateSubmissionDataRequestTokenResponseToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreateSubmissionDataRequestTokenResponse.


        :param token: The token of this CreateSubmissionDataRequestTokenResponse.
        :type token: CreateSubmissionDataRequestTokenResponseToken
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
