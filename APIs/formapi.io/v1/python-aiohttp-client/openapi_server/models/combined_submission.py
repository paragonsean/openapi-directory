# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.combined_submission_action import CombinedSubmissionAction
from openapi_server.models.combined_submission_source_pdfs_inner import CombinedSubmissionSourcePdfsInner
from openapi_server import util


class CombinedSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[CombinedSubmissionAction]=None, download_url: str=None, error_message: str=None, expired: bool=None, expires_at: str=None, expires_in: int=None, id: str=None, metadata: object=None, password: str=None, pdf_hash: str=None, source_pdfs: List[CombinedSubmissionSourcePdfsInner]=None, state: str=None, submission_ids: List[str]=None):
        """CombinedSubmission - a model defined in OpenAPI

        :param actions: The actions of this CombinedSubmission.
        :param download_url: The download_url of this CombinedSubmission.
        :param error_message: The error_message of this CombinedSubmission.
        :param expired: The expired of this CombinedSubmission.
        :param expires_at: The expires_at of this CombinedSubmission.
        :param expires_in: The expires_in of this CombinedSubmission.
        :param id: The id of this CombinedSubmission.
        :param metadata: The metadata of this CombinedSubmission.
        :param password: The password of this CombinedSubmission.
        :param pdf_hash: The pdf_hash of this CombinedSubmission.
        :param source_pdfs: The source_pdfs of this CombinedSubmission.
        :param state: The state of this CombinedSubmission.
        :param submission_ids: The submission_ids of this CombinedSubmission.
        """
        self.openapi_types = {
            'actions': List[CombinedSubmissionAction],
            'download_url': str,
            'error_message': str,
            'expired': bool,
            'expires_at': str,
            'expires_in': int,
            'id': str,
            'metadata': object,
            'password': str,
            'pdf_hash': str,
            'source_pdfs': List[CombinedSubmissionSourcePdfsInner],
            'state': str,
            'submission_ids': List[str]
        }

        self.attribute_map = {
            'actions': 'actions',
            'download_url': 'download_url',
            'error_message': 'error_message',
            'expired': 'expired',
            'expires_at': 'expires_at',
            'expires_in': 'expires_in',
            'id': 'id',
            'metadata': 'metadata',
            'password': 'password',
            'pdf_hash': 'pdf_hash',
            'source_pdfs': 'source_pdfs',
            'state': 'state',
            'submission_ids': 'submission_ids'
        }

        self._actions = actions
        self._download_url = download_url
        self._error_message = error_message
        self._expired = expired
        self._expires_at = expires_at
        self._expires_in = expires_in
        self._id = id
        self._metadata = metadata
        self._password = password
        self._pdf_hash = pdf_hash
        self._source_pdfs = source_pdfs
        self._state = state
        self._submission_ids = submission_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinedSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combined_submission of this CombinedSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CombinedSubmission.


        :return: The actions of this CombinedSubmission.
        :rtype: List[CombinedSubmissionAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CombinedSubmission.


        :param actions: The actions of this CombinedSubmission.
        :type actions: List[CombinedSubmissionAction]
        """

        self._actions = actions

    @property
    def download_url(self):
        """Gets the download_url of this CombinedSubmission.


        :return: The download_url of this CombinedSubmission.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this CombinedSubmission.


        :param download_url: The download_url of this CombinedSubmission.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def error_message(self):
        """Gets the error_message of this CombinedSubmission.


        :return: The error_message of this CombinedSubmission.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CombinedSubmission.


        :param error_message: The error_message of this CombinedSubmission.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def expired(self):
        """Gets the expired of this CombinedSubmission.


        :return: The expired of this CombinedSubmission.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this CombinedSubmission.


        :param expired: The expired of this CombinedSubmission.
        :type expired: bool
        """
        if expired is None:
            raise ValueError("Invalid value for `expired`, must not be `None`")

        self._expired = expired

    @property
    def expires_at(self):
        """Gets the expires_at of this CombinedSubmission.


        :return: The expires_at of this CombinedSubmission.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CombinedSubmission.


        :param expires_at: The expires_at of this CombinedSubmission.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def expires_in(self):
        """Gets the expires_in of this CombinedSubmission.


        :return: The expires_in of this CombinedSubmission.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this CombinedSubmission.


        :param expires_in: The expires_in of this CombinedSubmission.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def id(self):
        """Gets the id of this CombinedSubmission.


        :return: The id of this CombinedSubmission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CombinedSubmission.


        :param id: The id of this CombinedSubmission.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this CombinedSubmission.


        :return: The metadata of this CombinedSubmission.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CombinedSubmission.


        :param metadata: The metadata of this CombinedSubmission.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def password(self):
        """Gets the password of this CombinedSubmission.


        :return: The password of this CombinedSubmission.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CombinedSubmission.


        :param password: The password of this CombinedSubmission.
        :type password: str
        """

        self._password = password

    @property
    def pdf_hash(self):
        """Gets the pdf_hash of this CombinedSubmission.


        :return: The pdf_hash of this CombinedSubmission.
        :rtype: str
        """
        return self._pdf_hash

    @pdf_hash.setter
    def pdf_hash(self, pdf_hash):
        """Sets the pdf_hash of this CombinedSubmission.


        :param pdf_hash: The pdf_hash of this CombinedSubmission.
        :type pdf_hash: str
        """

        self._pdf_hash = pdf_hash

    @property
    def source_pdfs(self):
        """Gets the source_pdfs of this CombinedSubmission.


        :return: The source_pdfs of this CombinedSubmission.
        :rtype: List[CombinedSubmissionSourcePdfsInner]
        """
        return self._source_pdfs

    @source_pdfs.setter
    def source_pdfs(self, source_pdfs):
        """Sets the source_pdfs of this CombinedSubmission.


        :param source_pdfs: The source_pdfs of this CombinedSubmission.
        :type source_pdfs: List[CombinedSubmissionSourcePdfsInner]
        """
        if source_pdfs is None:
            raise ValueError("Invalid value for `source_pdfs`, must not be `None`")

        self._source_pdfs = source_pdfs

    @property
    def state(self):
        """Gets the state of this CombinedSubmission.


        :return: The state of this CombinedSubmission.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CombinedSubmission.


        :param state: The state of this CombinedSubmission.
        :type state: str
        """
        allowed_values = ["pending", "processed", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submission_ids(self):
        """Gets the submission_ids of this CombinedSubmission.


        :return: The submission_ids of this CombinedSubmission.
        :rtype: List[str]
        """
        return self._submission_ids

    @submission_ids.setter
    def submission_ids(self, submission_ids):
        """Sets the submission_ids of this CombinedSubmission.


        :param submission_ids: The submission_ids of this CombinedSubmission.
        :type submission_ids: List[str]
        """
        if submission_ids is None:
            raise ValueError("Invalid value for `submission_ids`, must not be `None`")

        self._submission_ids = submission_ids
