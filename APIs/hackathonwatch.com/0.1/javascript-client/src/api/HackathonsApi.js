/**
 * HackathonWatch
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Hackathons service.
* @module api/HackathonsApi
* @version 0.1
*/
export default class HackathonsApi {

    /**
    * Constructs a new HackathonsApi. 
    * @alias module:api/HackathonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETHackathonsComingFormat operation.
     * @callback module:api/HackathonsApi~gETHackathonsComingFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of coming hackathons
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Specify the page of coming hackathons.
     * @param {module:api/HackathonsApi~gETHackathonsComingFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETHackathonsComingFormat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/hackathons/coming.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETHackathonsIdFormat operation.
     * @callback module:api/HackathonsApi~gETHackathonsIdFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the detail of a given hackathon
     * @param {Number} id ID of the hackathon for detail information
     * @param {module:api/HackathonsApi~gETHackathonsIdFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETHackathonsIdFormat(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETHackathonsIdFormat");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/hackathons/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
