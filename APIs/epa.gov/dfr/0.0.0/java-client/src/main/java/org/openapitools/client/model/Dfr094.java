/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Spatial Metadata Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr094 {
  public static final String SERIALIZED_NAME_CALCULATED_ACCURACY = "CalculatedAccuracy";
  @SerializedName(SERIALIZED_NAME_CALCULATED_ACCURACY)
  private String calculatedAccuracy;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "CollectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_COORDINATE_SOURCE_SYSTEM = "CoordinateSourceSystem";
  @SerializedName(SERIALIZED_NAME_COORDINATE_SOURCE_SYSTEM)
  private String coordinateSourceSystem;

  public static final String SERIALIZED_NAME_COORDINATE_SOURCE_SYSTEM_ID = "CoordinateSourceSystemId";
  @SerializedName(SERIALIZED_NAME_COORDINATE_SOURCE_SYSTEM_ID)
  private String coordinateSourceSystemId;

  public static final String SERIALIZED_NAME_LATITUDE83 = "Latitude83";
  @SerializedName(SERIALIZED_NAME_LATITUDE83)
  private Double latitude83;

  public static final String SERIALIZED_NAME_LONGITUDE83 = "Longitude83";
  @SerializedName(SERIALIZED_NAME_LONGITUDE83)
  private Double longitude83;

  public static final String SERIALIZED_NAME_REFERENCE_POINT = "ReferencePoint";
  @SerializedName(SERIALIZED_NAME_REFERENCE_POINT)
  private String referencePoint;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public Dfr094() {
  }

  public Dfr094 calculatedAccuracy(String calculatedAccuracy) {
    this.calculatedAccuracy = calculatedAccuracy;
    return this;
  }

  /**
   * ??
   * @return calculatedAccuracy
   */
  @javax.annotation.Nonnull
  public String getCalculatedAccuracy() {
    return calculatedAccuracy;
  }

  public void setCalculatedAccuracy(String calculatedAccuracy) {
    this.calculatedAccuracy = calculatedAccuracy;
  }


  public Dfr094 collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * ??
   * @return collectionMethod
   */
  @javax.annotation.Nonnull
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public Dfr094 coordinateSourceSystem(String coordinateSourceSystem) {
    this.coordinateSourceSystem = coordinateSourceSystem;
    return this;
  }

  /**
   * ??
   * @return coordinateSourceSystem
   */
  @javax.annotation.Nonnull
  public String getCoordinateSourceSystem() {
    return coordinateSourceSystem;
  }

  public void setCoordinateSourceSystem(String coordinateSourceSystem) {
    this.coordinateSourceSystem = coordinateSourceSystem;
  }


  public Dfr094 coordinateSourceSystemId(String coordinateSourceSystemId) {
    this.coordinateSourceSystemId = coordinateSourceSystemId;
    return this;
  }

  /**
   * ??
   * @return coordinateSourceSystemId
   */
  @javax.annotation.Nonnull
  public String getCoordinateSourceSystemId() {
    return coordinateSourceSystemId;
  }

  public void setCoordinateSourceSystemId(String coordinateSourceSystemId) {
    this.coordinateSourceSystemId = coordinateSourceSystemId;
  }


  public Dfr094 latitude83(Double latitude83) {
    this.latitude83 = latitude83;
    return this;
  }

  /**
   * The latitude of the facility or permit holder as maintained in each data system.
   * @return latitude83
   */
  @javax.annotation.Nonnull
  public Double getLatitude83() {
    return latitude83;
  }

  public void setLatitude83(Double latitude83) {
    this.latitude83 = latitude83;
  }


  public Dfr094 longitude83(Double longitude83) {
    this.longitude83 = longitude83;
    return this;
  }

  /**
   * The longitude of the facility or permit holder as maintained in each data system
   * @return longitude83
   */
  @javax.annotation.Nonnull
  public Double getLongitude83() {
    return longitude83;
  }

  public void setLongitude83(Double longitude83) {
    this.longitude83 = longitude83;
  }


  public Dfr094 referencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
    return this;
  }

  /**
   * ??
   * @return referencePoint
   */
  @javax.annotation.Nonnull
  public String getReferencePoint() {
    return referencePoint;
  }

  public void setReferencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
  }


  public Dfr094 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr094 dfr094 = (Dfr094) o;
    return Objects.equals(this.calculatedAccuracy, dfr094.calculatedAccuracy) &&
        Objects.equals(this.collectionMethod, dfr094.collectionMethod) &&
        Objects.equals(this.coordinateSourceSystem, dfr094.coordinateSourceSystem) &&
        Objects.equals(this.coordinateSourceSystemId, dfr094.coordinateSourceSystemId) &&
        Objects.equals(this.latitude83, dfr094.latitude83) &&
        Objects.equals(this.longitude83, dfr094.longitude83) &&
        Objects.equals(this.referencePoint, dfr094.referencePoint) &&
        Objects.equals(this.registryID, dfr094.registryID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedAccuracy, collectionMethod, coordinateSourceSystem, coordinateSourceSystemId, latitude83, longitude83, referencePoint, registryID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr094 {\n");
    sb.append("    calculatedAccuracy: ").append(toIndentedString(calculatedAccuracy)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    coordinateSourceSystem: ").append(toIndentedString(coordinateSourceSystem)).append("\n");
    sb.append("    coordinateSourceSystemId: ").append(toIndentedString(coordinateSourceSystemId)).append("\n");
    sb.append("    latitude83: ").append(toIndentedString(latitude83)).append("\n");
    sb.append("    longitude83: ").append(toIndentedString(longitude83)).append("\n");
    sb.append("    referencePoint: ").append(toIndentedString(referencePoint)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CalculatedAccuracy");
    openapiFields.add("CollectionMethod");
    openapiFields.add("CoordinateSourceSystem");
    openapiFields.add("CoordinateSourceSystemId");
    openapiFields.add("Latitude83");
    openapiFields.add("Longitude83");
    openapiFields.add("ReferencePoint");
    openapiFields.add("RegistryID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CalculatedAccuracy");
    openapiRequiredFields.add("CollectionMethod");
    openapiRequiredFields.add("CoordinateSourceSystem");
    openapiRequiredFields.add("CoordinateSourceSystemId");
    openapiRequiredFields.add("Latitude83");
    openapiRequiredFields.add("Longitude83");
    openapiRequiredFields.add("ReferencePoint");
    openapiRequiredFields.add("RegistryID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr094
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr094.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr094 is not found in the empty JSON string", Dfr094.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr094.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr094` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr094.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CalculatedAccuracy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CalculatedAccuracy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CalculatedAccuracy").toString()));
      }
      if (!jsonObj.get("CollectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectionMethod").toString()));
      }
      if (!jsonObj.get("CoordinateSourceSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoordinateSourceSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoordinateSourceSystem").toString()));
      }
      if (!jsonObj.get("CoordinateSourceSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoordinateSourceSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoordinateSourceSystemId").toString()));
      }
      if (!jsonObj.get("Latitude83").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Latitude83` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Latitude83").toString()));
      }
      if (!jsonObj.get("Longitude83").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Longitude83` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Longitude83").toString()));
      }
      if (!jsonObj.get("ReferencePoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencePoint").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr094.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr094' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr094> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr094.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr094>() {
           @Override
           public void write(JsonWriter out, Dfr094 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr094 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr094 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr094
   * @throws IOException if the JSON string is invalid with respect to Dfr094
   */
  public static Dfr094 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr094.class);
  }

  /**
   * Convert an instance of Dfr094 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

