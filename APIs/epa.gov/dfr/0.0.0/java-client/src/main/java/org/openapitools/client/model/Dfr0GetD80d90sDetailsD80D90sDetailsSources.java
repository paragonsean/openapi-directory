/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sources Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr0GetD80d90sDetailsD80D90sDetailsSources {
  public static final String SERIALIZED_NAME_DAYS_LATE = "DaysLate";
  @SerializedName(SERIALIZED_NAME_DAYS_LATE)
  private String daysLate;

  public static final String SERIALIZED_NAME_DMR_DUE_DATE = "DmrDueDate";
  @SerializedName(SERIALIZED_NAME_DMR_DUE_DATE)
  private String dmrDueDate;

  public static final String SERIALIZED_NAME_LIMIT_BEGIN_DATE = "LimitBeginDate";
  @SerializedName(SERIALIZED_NAME_LIMIT_BEGIN_DATE)
  private String limitBeginDate;

  public static final String SERIALIZED_NAME_LIMIT_END_DATE = "LimitEndDate";
  @SerializedName(SERIALIZED_NAME_LIMIT_END_DATE)
  private String limitEndDate;

  public static final String SERIALIZED_NAME_LIMIT_ID = "LimitId";
  @SerializedName(SERIALIZED_NAME_LIMIT_ID)
  private String limitId;

  public static final String SERIALIZED_NAME_LIMIT_SET_NAME = "LimitSetName";
  @SerializedName(SERIALIZED_NAME_LIMIT_SET_NAME)
  private String limitSetName;

  public static final String SERIALIZED_NAME_MISSING_LATE = "MissingLate";
  @SerializedName(SERIALIZED_NAME_MISSING_LATE)
  private String missingLate;

  public static final String SERIALIZED_NAME_MONITORING_LOCATION_CODE = "MonitoringLocationCode";
  @SerializedName(SERIALIZED_NAME_MONITORING_LOCATION_CODE)
  private String monitoringLocationCode;

  public static final String SERIALIZED_NAME_MONITORING_LOCATION_DESC = "MonitoringLocationDesc";
  @SerializedName(SERIALIZED_NAME_MONITORING_LOCATION_DESC)
  private String monitoringLocationDesc;

  public static final String SERIALIZED_NAME_MONITORING_PERIOD_END_DATE = "MonitoringPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_MONITORING_PERIOD_END_DATE)
  private String monitoringPeriodEndDate;

  public static final String SERIALIZED_NAME_NP_D_E_S_ID = "NPDESId";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_ID)
  private String npDESId;

  public static final String SERIALIZED_NAME_NODI_CODE = "NodiCode";
  @SerializedName(SERIALIZED_NAME_NODI_CODE)
  private String nodiCode;

  public static final String SERIALIZED_NAME_NODI_DESC = "NodiDesc";
  @SerializedName(SERIALIZED_NAME_NODI_DESC)
  private String nodiDesc;

  public static final String SERIALIZED_NAME_NODI_VALIDATION_FLAG = "NodiValidationFlag";
  @SerializedName(SERIALIZED_NAME_NODI_VALIDATION_FLAG)
  private String nodiValidationFlag;

  public static final String SERIALIZED_NAME_NPDES_VIOLATION_ID = "NpdesViolationId";
  @SerializedName(SERIALIZED_NAME_NPDES_VIOLATION_ID)
  private String npdesViolationId;

  public static final String SERIALIZED_NAME_PARAMETER_CODE = "ParameterCode";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CODE)
  private String parameterCode;

  public static final String SERIALIZED_NAME_PARAMETER_DESC = "ParameterDesc";
  @SerializedName(SERIALIZED_NAME_PARAMETER_DESC)
  private String parameterDesc;

  public static final String SERIALIZED_NAME_PERM_FEATURE_NMBR = "PermFeatureNmbr";
  @SerializedName(SERIALIZED_NAME_PERM_FEATURE_NMBR)
  private String permFeatureNmbr;

  public static final String SERIALIZED_NAME_RNC_DETECTION_CODE = "RncDetectionCode";
  @SerializedName(SERIALIZED_NAME_RNC_DETECTION_CODE)
  private String rncDetectionCode;

  public static final String SERIALIZED_NAME_RNC_DETECTION_DATE = "RncDetectionDate";
  @SerializedName(SERIALIZED_NAME_RNC_DETECTION_DATE)
  private String rncDetectionDate;

  public static final String SERIALIZED_NAME_RNC_DETECTION_DESC = "RncDetectionDesc";
  @SerializedName(SERIALIZED_NAME_RNC_DETECTION_DESC)
  private String rncDetectionDesc;

  public static final String SERIALIZED_NAME_RNC_RESOLUTION_CODE = "RncResolutionCode";
  @SerializedName(SERIALIZED_NAME_RNC_RESOLUTION_CODE)
  private String rncResolutionCode;

  public static final String SERIALIZED_NAME_RNC_RESOLUTION_DATE = "RncResolutionDate";
  @SerializedName(SERIALIZED_NAME_RNC_RESOLUTION_DATE)
  private String rncResolutionDate;

  public static final String SERIALIZED_NAME_RNC_RESOLUTION_DESC = "RncResolutionDesc";
  @SerializedName(SERIALIZED_NAME_RNC_RESOLUTION_DESC)
  private String rncResolutionDesc;

  public static final String SERIALIZED_NAME_STATISTICAL_BASE_MONTHLY_AVG = "StatisticalBaseMonthlyAvg";
  @SerializedName(SERIALIZED_NAME_STATISTICAL_BASE_MONTHLY_AVG)
  private String statisticalBaseMonthlyAvg;

  public static final String SERIALIZED_NAME_VALUE_RECEIVED_DATE = "ValueReceivedDate";
  @SerializedName(SERIALIZED_NAME_VALUE_RECEIVED_DATE)
  private String valueReceivedDate;

  public static final String SERIALIZED_NAME_VALUE_TYPE_CODE = "ValueTypeCode";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE_CODE)
  private String valueTypeCode;

  public static final String SERIALIZED_NAME_VERSION_NMBR = "VersionNmbr";
  @SerializedName(SERIALIZED_NAME_VERSION_NMBR)
  private String versionNmbr;

  public static final String SERIALIZED_NAME_VIOLATION_CODE = "ViolationCode";
  @SerializedName(SERIALIZED_NAME_VIOLATION_CODE)
  private String violationCode;

  public Dfr0GetD80d90sDetailsD80D90sDetailsSources() {
  }

  public Dfr0GetD80d90sDetailsD80D90sDetailsSources daysLate(String daysLate) {
    this.daysLate = daysLate;
    return this;
  }

  /**
   * The number of days the DMR value is late, as generated in ICIS-NPDES
   * @return daysLate
   */
  @javax.annotation.Nonnull
  public String getDaysLate() {
    return daysLate;
  }

  public void setDaysLate(String daysLate) {
    this.daysLate = daysLate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources dmrDueDate(String dmrDueDate) {
    this.dmrDueDate = dmrDueDate;
    return this;
  }

  /**
   * The due date for the DMR to the NPDES program authority (e.g., EPA or state environmental agency) (MM/DD/YYYY).ï¿½
   * @return dmrDueDate
   */
  @javax.annotation.Nonnull
  public String getDmrDueDate() {
    return dmrDueDate;
  }

  public void setDmrDueDate(String dmrDueDate) {
    this.dmrDueDate = dmrDueDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources limitBeginDate(String limitBeginDate) {
    this.limitBeginDate = limitBeginDate;
    return this;
  }

  /**
   * The date on which a limit becomes in effect for a particular parameter in a limit set
   * @return limitBeginDate
   */
  @javax.annotation.Nonnull
  public String getLimitBeginDate() {
    return limitBeginDate;
  }

  public void setLimitBeginDate(String limitBeginDate) {
    this.limitBeginDate = limitBeginDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources limitEndDate(String limitEndDate) {
    this.limitEndDate = limitEndDate;
    return this;
  }

  /**
   * The date on which a limit stops being in effect for a particular parameter in a limit set
   * @return limitEndDate
   */
  @javax.annotation.Nonnull
  public String getLimitEndDate() {
    return limitEndDate;
  }

  public void setLimitEndDate(String limitEndDate) {
    this.limitEndDate = limitEndDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources limitId(String limitId) {
    this.limitId = limitId;
    return this;
  }

  /**
   * The unique identifier for a limit parameter record
   * @return limitId
   */
  @javax.annotation.Nonnull
  public String getLimitId() {
    return limitId;
  }

  public void setLimitId(String limitId) {
    this.limitId = limitId;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources limitSetName(String limitSetName) {
    this.limitSetName = limitSetName;
    return this;
  }

  /**
   * The name associated with a group of parameter permit limits.
   * @return limitSetName
   */
  @javax.annotation.Nonnull
  public String getLimitSetName() {
    return limitSetName;
  }

  public void setLimitSetName(String limitSetName) {
    this.limitSetName = limitSetName;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources missingLate(String missingLate) {
    this.missingLate = missingLate;
    return this;
  }

  /**
   * Indicates if the permitted facility submitted missing or late DMRS to the NPDES permitting authority within the past three years.
   * @return missingLate
   */
  @javax.annotation.Nonnull
  public String getMissingLate() {
    return missingLate;
  }

  public void setMissingLate(String missingLate) {
    this.missingLate = missingLate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources monitoringLocationCode(String monitoringLocationCode) {
    this.monitoringLocationCode = monitoringLocationCode;
    return this;
  }

  /**
   * The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature
   * @return monitoringLocationCode
   */
  @javax.annotation.Nonnull
  public String getMonitoringLocationCode() {
    return monitoringLocationCode;
  }

  public void setMonitoringLocationCode(String monitoringLocationCode) {
    this.monitoringLocationCode = monitoringLocationCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources monitoringLocationDesc(String monitoringLocationDesc) {
    this.monitoringLocationDesc = monitoringLocationDesc;
    return this;
  }

  /**
   * The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies
   * @return monitoringLocationDesc
   */
  @javax.annotation.Nonnull
  public String getMonitoringLocationDesc() {
    return monitoringLocationDesc;
  }

  public void setMonitoringLocationDesc(String monitoringLocationDesc) {
    this.monitoringLocationDesc = monitoringLocationDesc;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources monitoringPeriodEndDate(String monitoringPeriodEndDate) {
    this.monitoringPeriodEndDate = monitoringPeriodEndDate;
    return this;
  }

  /**
   * The date that the monitoring period for the values covered by the DMR Form ends
   * @return monitoringPeriodEndDate
   */
  @javax.annotation.Nonnull
  public String getMonitoringPeriodEndDate() {
    return monitoringPeriodEndDate;
  }

  public void setMonitoringPeriodEndDate(String monitoringPeriodEndDate) {
    this.monitoringPeriodEndDate = monitoringPeriodEndDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources npDESId(String npDESId) {
    this.npDESId = npDESId;
    return this;
  }

  /**
   * A unique ID assigned for each record/permit/site/facility within ICIS-NPDES.
   * @return npDESId
   */
  @javax.annotation.Nonnull
  public String getNpDESId() {
    return npDESId;
  }

  public void setNpDESId(String npDESId) {
    this.npDESId = npDESId;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources nodiCode(String nodiCode) {
    this.nodiCode = nodiCode;
    return this;
  }

  /**
   * The no data indicator code for DMRs where no measurements are reported.
   * @return nodiCode
   */
  @javax.annotation.Nonnull
  public String getNodiCode() {
    return nodiCode;
  }

  public void setNodiCode(String nodiCode) {
    this.nodiCode = nodiCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources nodiDesc(String nodiDesc) {
    this.nodiDesc = nodiDesc;
    return this;
  }

  /**
   * The description of the NODI code explaining why no data are reported (e.g., no discharge, not quantifiable, conditional monitoring).
   * @return nodiDesc
   */
  @javax.annotation.Nonnull
  public String getNodiDesc() {
    return nodiDesc;
  }

  public void setNodiDesc(String nodiDesc) {
    this.nodiDesc = nodiDesc;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources nodiValidationFlag(String nodiValidationFlag) {
    this.nodiValidationFlag = nodiValidationFlag;
    return this;
  }

  /**
   * Indicates whether the NODI is considered valid (Y) or invalid (N) for compliance determination purposes.
   * @return nodiValidationFlag
   */
  @javax.annotation.Nonnull
  public String getNodiValidationFlag() {
    return nodiValidationFlag;
  }

  public void setNodiValidationFlag(String nodiValidationFlag) {
    this.nodiValidationFlag = nodiValidationFlag;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources npdesViolationId(String npdesViolationId) {
    this.npdesViolationId = npdesViolationId;
    return this;
  }

  /**
   * The unique identifier for the violation related to a particular site.
   * @return npdesViolationId
   */
  @javax.annotation.Nonnull
  public String getNpdesViolationId() {
    return npdesViolationId;
  }

  public void setNpdesViolationId(String npdesViolationId) {
    this.npdesViolationId = npdesViolationId;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources parameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
    return this;
  }

  /**
   * The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)
   * @return parameterCode
   */
  @javax.annotation.Nonnull
  public String getParameterCode() {
    return parameterCode;
  }

  public void setParameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources parameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
    return this;
  }

  /**
   * The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code
   * @return parameterDesc
   */
  @javax.annotation.Nonnull
  public String getParameterDesc() {
    return parameterDesc;
  }

  public void setParameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources permFeatureNmbr(String permFeatureNmbr) {
    this.permFeatureNmbr = permFeatureNmbr;
    return this;
  }

  /**
   * A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
   * @return permFeatureNmbr
   */
  @javax.annotation.Nonnull
  public String getPermFeatureNmbr() {
    return permFeatureNmbr;
  }

  public void setPermFeatureNmbr(String permFeatureNmbr) {
    this.permFeatureNmbr = permFeatureNmbr;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncDetectionCode(String rncDetectionCode) {
    this.rncDetectionCode = rncDetectionCode;
    return this;
  }

  /**
   * The reportable noncompliance detection code.
   * @return rncDetectionCode
   */
  @javax.annotation.Nonnull
  public String getRncDetectionCode() {
    return rncDetectionCode;
  }

  public void setRncDetectionCode(String rncDetectionCode) {
    this.rncDetectionCode = rncDetectionCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncDetectionDate(String rncDetectionDate) {
    this.rncDetectionDate = rncDetectionDate;
    return this;
  }

  /**
   * The date that RNC was detected. It can be entered manually or automatically. In cases in which RNC is detected by ICIS-NPDES, the detection date entered will vary according to the type of violation detected (MM/DD/YYY).
   * @return rncDetectionDate
   */
  @javax.annotation.Nonnull
  public String getRncDetectionDate() {
    return rncDetectionDate;
  }

  public void setRncDetectionDate(String rncDetectionDate) {
    this.rncDetectionDate = rncDetectionDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncDetectionDesc(String rncDetectionDesc) {
    this.rncDetectionDesc = rncDetectionDesc;
    return this;
  }

  /**
   * The reportable noncompliance detection description.
   * @return rncDetectionDesc
   */
  @javax.annotation.Nonnull
  public String getRncDetectionDesc() {
    return rncDetectionDesc;
  }

  public void setRncDetectionDesc(String rncDetectionDesc) {
    this.rncDetectionDesc = rncDetectionDesc;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncResolutionCode(String rncResolutionCode) {
    this.rncResolutionCode = rncResolutionCode;
    return this;
  }

  /**
   * The reportable noncompliance resolution code.
   * @return rncResolutionCode
   */
  @javax.annotation.Nonnull
  public String getRncResolutionCode() {
    return rncResolutionCode;
  }

  public void setRncResolutionCode(String rncResolutionCode) {
    this.rncResolutionCode = rncResolutionCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncResolutionDate(String rncResolutionDate) {
    this.rncResolutionDate = rncResolutionDate;
    return this;
  }

  /**
   * The reportable noncompliance resolution date.
   * @return rncResolutionDate
   */
  @javax.annotation.Nonnull
  public String getRncResolutionDate() {
    return rncResolutionDate;
  }

  public void setRncResolutionDate(String rncResolutionDate) {
    this.rncResolutionDate = rncResolutionDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources rncResolutionDesc(String rncResolutionDesc) {
    this.rncResolutionDesc = rncResolutionDesc;
    return this;
  }

  /**
   * The reportable noncompliance resolution description.
   * @return rncResolutionDesc
   */
  @javax.annotation.Nonnull
  public String getRncResolutionDesc() {
    return rncResolutionDesc;
  }

  public void setRncResolutionDesc(String rncResolutionDesc) {
    this.rncResolutionDesc = rncResolutionDesc;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources statisticalBaseMonthlyAvg(String statisticalBaseMonthlyAvg) {
    this.statisticalBaseMonthlyAvg = statisticalBaseMonthlyAvg;
    return this;
  }

  /**
   * Get statisticalBaseMonthlyAvg
   * @return statisticalBaseMonthlyAvg
   */
  @javax.annotation.Nonnull
  public String getStatisticalBaseMonthlyAvg() {
    return statisticalBaseMonthlyAvg;
  }

  public void setStatisticalBaseMonthlyAvg(String statisticalBaseMonthlyAvg) {
    this.statisticalBaseMonthlyAvg = statisticalBaseMonthlyAvg;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources valueReceivedDate(String valueReceivedDate) {
    this.valueReceivedDate = valueReceivedDate;
    return this;
  }

  /**
   * The date the DMR value was received by the regulatory authority
   * @return valueReceivedDate
   */
  @javax.annotation.Nonnull
  public String getValueReceivedDate() {
    return valueReceivedDate;
  }

  public void setValueReceivedDate(String valueReceivedDate) {
    this.valueReceivedDate = valueReceivedDate;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources valueTypeCode(String valueTypeCode) {
    this.valueTypeCode = valueTypeCode;
    return this;
  }

  /**
   * The indication of the limit value type (e.g., Quantity 1, Concentration 2)
   * @return valueTypeCode
   */
  @javax.annotation.Nonnull
  public String getValueTypeCode() {
    return valueTypeCode;
  }

  public void setValueTypeCode(String valueTypeCode) {
    this.valueTypeCode = valueTypeCode;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources versionNmbr(String versionNmbr) {
    this.versionNmbr = versionNmbr;
    return this;
  }

  /**
   * The version of the permit when a modification or reissuance is applied to the permit. Version &#x3D; 0 indicates the original permit issuance
   * @return versionNmbr
   */
  @javax.annotation.Nonnull
  public String getVersionNmbr() {
    return versionNmbr;
  }

  public void setVersionNmbr(String versionNmbr) {
    this.versionNmbr = versionNmbr;
  }


  public Dfr0GetD80d90sDetailsD80D90sDetailsSources violationCode(String violationCode) {
    this.violationCode = violationCode;
    return this;
  }

  /**
   * The code identifying which type of Violation has occurred (e.g., D80 &#x3D; Required Monitoring DMR Value Non-Receipt, E90 &#x3D; Effluent Violation, C20 &#x3D; Schedule Event Achieved Late)
   * @return violationCode
   */
  @javax.annotation.Nonnull
  public String getViolationCode() {
    return violationCode;
  }

  public void setViolationCode(String violationCode) {
    this.violationCode = violationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr0GetD80d90sDetailsD80D90sDetailsSources dfr0GetD80d90sDetailsD80D90sDetailsSources = (Dfr0GetD80d90sDetailsD80D90sDetailsSources) o;
    return Objects.equals(this.daysLate, dfr0GetD80d90sDetailsD80D90sDetailsSources.daysLate) &&
        Objects.equals(this.dmrDueDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.dmrDueDate) &&
        Objects.equals(this.limitBeginDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.limitBeginDate) &&
        Objects.equals(this.limitEndDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.limitEndDate) &&
        Objects.equals(this.limitId, dfr0GetD80d90sDetailsD80D90sDetailsSources.limitId) &&
        Objects.equals(this.limitSetName, dfr0GetD80d90sDetailsD80D90sDetailsSources.limitSetName) &&
        Objects.equals(this.missingLate, dfr0GetD80d90sDetailsD80D90sDetailsSources.missingLate) &&
        Objects.equals(this.monitoringLocationCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.monitoringLocationCode) &&
        Objects.equals(this.monitoringLocationDesc, dfr0GetD80d90sDetailsD80D90sDetailsSources.monitoringLocationDesc) &&
        Objects.equals(this.monitoringPeriodEndDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.monitoringPeriodEndDate) &&
        Objects.equals(this.npDESId, dfr0GetD80d90sDetailsD80D90sDetailsSources.npDESId) &&
        Objects.equals(this.nodiCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.nodiCode) &&
        Objects.equals(this.nodiDesc, dfr0GetD80d90sDetailsD80D90sDetailsSources.nodiDesc) &&
        Objects.equals(this.nodiValidationFlag, dfr0GetD80d90sDetailsD80D90sDetailsSources.nodiValidationFlag) &&
        Objects.equals(this.npdesViolationId, dfr0GetD80d90sDetailsD80D90sDetailsSources.npdesViolationId) &&
        Objects.equals(this.parameterCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.parameterCode) &&
        Objects.equals(this.parameterDesc, dfr0GetD80d90sDetailsD80D90sDetailsSources.parameterDesc) &&
        Objects.equals(this.permFeatureNmbr, dfr0GetD80d90sDetailsD80D90sDetailsSources.permFeatureNmbr) &&
        Objects.equals(this.rncDetectionCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncDetectionCode) &&
        Objects.equals(this.rncDetectionDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncDetectionDate) &&
        Objects.equals(this.rncDetectionDesc, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncDetectionDesc) &&
        Objects.equals(this.rncResolutionCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncResolutionCode) &&
        Objects.equals(this.rncResolutionDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncResolutionDate) &&
        Objects.equals(this.rncResolutionDesc, dfr0GetD80d90sDetailsD80D90sDetailsSources.rncResolutionDesc) &&
        Objects.equals(this.statisticalBaseMonthlyAvg, dfr0GetD80d90sDetailsD80D90sDetailsSources.statisticalBaseMonthlyAvg) &&
        Objects.equals(this.valueReceivedDate, dfr0GetD80d90sDetailsD80D90sDetailsSources.valueReceivedDate) &&
        Objects.equals(this.valueTypeCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.valueTypeCode) &&
        Objects.equals(this.versionNmbr, dfr0GetD80d90sDetailsD80D90sDetailsSources.versionNmbr) &&
        Objects.equals(this.violationCode, dfr0GetD80d90sDetailsD80D90sDetailsSources.violationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysLate, dmrDueDate, limitBeginDate, limitEndDate, limitId, limitSetName, missingLate, monitoringLocationCode, monitoringLocationDesc, monitoringPeriodEndDate, npDESId, nodiCode, nodiDesc, nodiValidationFlag, npdesViolationId, parameterCode, parameterDesc, permFeatureNmbr, rncDetectionCode, rncDetectionDate, rncDetectionDesc, rncResolutionCode, rncResolutionDate, rncResolutionDesc, statisticalBaseMonthlyAvg, valueReceivedDate, valueTypeCode, versionNmbr, violationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr0GetD80d90sDetailsD80D90sDetailsSources {\n");
    sb.append("    daysLate: ").append(toIndentedString(daysLate)).append("\n");
    sb.append("    dmrDueDate: ").append(toIndentedString(dmrDueDate)).append("\n");
    sb.append("    limitBeginDate: ").append(toIndentedString(limitBeginDate)).append("\n");
    sb.append("    limitEndDate: ").append(toIndentedString(limitEndDate)).append("\n");
    sb.append("    limitId: ").append(toIndentedString(limitId)).append("\n");
    sb.append("    limitSetName: ").append(toIndentedString(limitSetName)).append("\n");
    sb.append("    missingLate: ").append(toIndentedString(missingLate)).append("\n");
    sb.append("    monitoringLocationCode: ").append(toIndentedString(monitoringLocationCode)).append("\n");
    sb.append("    monitoringLocationDesc: ").append(toIndentedString(monitoringLocationDesc)).append("\n");
    sb.append("    monitoringPeriodEndDate: ").append(toIndentedString(monitoringPeriodEndDate)).append("\n");
    sb.append("    npDESId: ").append(toIndentedString(npDESId)).append("\n");
    sb.append("    nodiCode: ").append(toIndentedString(nodiCode)).append("\n");
    sb.append("    nodiDesc: ").append(toIndentedString(nodiDesc)).append("\n");
    sb.append("    nodiValidationFlag: ").append(toIndentedString(nodiValidationFlag)).append("\n");
    sb.append("    npdesViolationId: ").append(toIndentedString(npdesViolationId)).append("\n");
    sb.append("    parameterCode: ").append(toIndentedString(parameterCode)).append("\n");
    sb.append("    parameterDesc: ").append(toIndentedString(parameterDesc)).append("\n");
    sb.append("    permFeatureNmbr: ").append(toIndentedString(permFeatureNmbr)).append("\n");
    sb.append("    rncDetectionCode: ").append(toIndentedString(rncDetectionCode)).append("\n");
    sb.append("    rncDetectionDate: ").append(toIndentedString(rncDetectionDate)).append("\n");
    sb.append("    rncDetectionDesc: ").append(toIndentedString(rncDetectionDesc)).append("\n");
    sb.append("    rncResolutionCode: ").append(toIndentedString(rncResolutionCode)).append("\n");
    sb.append("    rncResolutionDate: ").append(toIndentedString(rncResolutionDate)).append("\n");
    sb.append("    rncResolutionDesc: ").append(toIndentedString(rncResolutionDesc)).append("\n");
    sb.append("    statisticalBaseMonthlyAvg: ").append(toIndentedString(statisticalBaseMonthlyAvg)).append("\n");
    sb.append("    valueReceivedDate: ").append(toIndentedString(valueReceivedDate)).append("\n");
    sb.append("    valueTypeCode: ").append(toIndentedString(valueTypeCode)).append("\n");
    sb.append("    versionNmbr: ").append(toIndentedString(versionNmbr)).append("\n");
    sb.append("    violationCode: ").append(toIndentedString(violationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DaysLate");
    openapiFields.add("DmrDueDate");
    openapiFields.add("LimitBeginDate");
    openapiFields.add("LimitEndDate");
    openapiFields.add("LimitId");
    openapiFields.add("LimitSetName");
    openapiFields.add("MissingLate");
    openapiFields.add("MonitoringLocationCode");
    openapiFields.add("MonitoringLocationDesc");
    openapiFields.add("MonitoringPeriodEndDate");
    openapiFields.add("NPDESId");
    openapiFields.add("NodiCode");
    openapiFields.add("NodiDesc");
    openapiFields.add("NodiValidationFlag");
    openapiFields.add("NpdesViolationId");
    openapiFields.add("ParameterCode");
    openapiFields.add("ParameterDesc");
    openapiFields.add("PermFeatureNmbr");
    openapiFields.add("RncDetectionCode");
    openapiFields.add("RncDetectionDate");
    openapiFields.add("RncDetectionDesc");
    openapiFields.add("RncResolutionCode");
    openapiFields.add("RncResolutionDate");
    openapiFields.add("RncResolutionDesc");
    openapiFields.add("StatisticalBaseMonthlyAvg");
    openapiFields.add("ValueReceivedDate");
    openapiFields.add("ValueTypeCode");
    openapiFields.add("VersionNmbr");
    openapiFields.add("ViolationCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DaysLate");
    openapiRequiredFields.add("DmrDueDate");
    openapiRequiredFields.add("LimitBeginDate");
    openapiRequiredFields.add("LimitEndDate");
    openapiRequiredFields.add("LimitId");
    openapiRequiredFields.add("LimitSetName");
    openapiRequiredFields.add("MissingLate");
    openapiRequiredFields.add("MonitoringLocationCode");
    openapiRequiredFields.add("MonitoringLocationDesc");
    openapiRequiredFields.add("MonitoringPeriodEndDate");
    openapiRequiredFields.add("NPDESId");
    openapiRequiredFields.add("NodiCode");
    openapiRequiredFields.add("NodiDesc");
    openapiRequiredFields.add("NodiValidationFlag");
    openapiRequiredFields.add("NpdesViolationId");
    openapiRequiredFields.add("ParameterCode");
    openapiRequiredFields.add("ParameterDesc");
    openapiRequiredFields.add("PermFeatureNmbr");
    openapiRequiredFields.add("RncDetectionCode");
    openapiRequiredFields.add("RncDetectionDate");
    openapiRequiredFields.add("RncDetectionDesc");
    openapiRequiredFields.add("RncResolutionCode");
    openapiRequiredFields.add("RncResolutionDate");
    openapiRequiredFields.add("RncResolutionDesc");
    openapiRequiredFields.add("StatisticalBaseMonthlyAvg");
    openapiRequiredFields.add("ValueReceivedDate");
    openapiRequiredFields.add("ValueTypeCode");
    openapiRequiredFields.add("VersionNmbr");
    openapiRequiredFields.add("ViolationCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr0GetD80d90sDetailsD80D90sDetailsSources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr0GetD80d90sDetailsD80D90sDetailsSources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr0GetD80d90sDetailsD80D90sDetailsSources is not found in the empty JSON string", Dfr0GetD80d90sDetailsD80D90sDetailsSources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr0GetD80d90sDetailsD80D90sDetailsSources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr0GetD80d90sDetailsD80D90sDetailsSources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr0GetD80d90sDetailsD80D90sDetailsSources.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DaysLate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DaysLate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DaysLate").toString()));
      }
      if (!jsonObj.get("DmrDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DmrDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DmrDueDate").toString()));
      }
      if (!jsonObj.get("LimitBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitBeginDate").toString()));
      }
      if (!jsonObj.get("LimitEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitEndDate").toString()));
      }
      if (!jsonObj.get("LimitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitId").toString()));
      }
      if (!jsonObj.get("LimitSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitSetName").toString()));
      }
      if (!jsonObj.get("MissingLate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MissingLate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MissingLate").toString()));
      }
      if (!jsonObj.get("MonitoringLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringLocationCode").toString()));
      }
      if (!jsonObj.get("MonitoringLocationDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringLocationDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringLocationDesc").toString()));
      }
      if (!jsonObj.get("MonitoringPeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringPeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringPeriodEndDate").toString()));
      }
      if (!jsonObj.get("NPDESId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESId").toString()));
      }
      if (!jsonObj.get("NodiCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodiCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodiCode").toString()));
      }
      if (!jsonObj.get("NodiDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodiDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodiDesc").toString()));
      }
      if (!jsonObj.get("NodiValidationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodiValidationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodiValidationFlag").toString()));
      }
      if (!jsonObj.get("NpdesViolationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NpdesViolationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NpdesViolationId").toString()));
      }
      if (!jsonObj.get("ParameterCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterCode").toString()));
      }
      if (!jsonObj.get("ParameterDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterDesc").toString()));
      }
      if (!jsonObj.get("PermFeatureNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermFeatureNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermFeatureNmbr").toString()));
      }
      if (!jsonObj.get("RncDetectionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncDetectionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncDetectionCode").toString()));
      }
      if (!jsonObj.get("RncDetectionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncDetectionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncDetectionDate").toString()));
      }
      if (!jsonObj.get("RncDetectionDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncDetectionDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncDetectionDesc").toString()));
      }
      if (!jsonObj.get("RncResolutionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncResolutionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncResolutionCode").toString()));
      }
      if (!jsonObj.get("RncResolutionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncResolutionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncResolutionDate").toString()));
      }
      if (!jsonObj.get("RncResolutionDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RncResolutionDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RncResolutionDesc").toString()));
      }
      if (!jsonObj.get("StatisticalBaseMonthlyAvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatisticalBaseMonthlyAvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatisticalBaseMonthlyAvg").toString()));
      }
      if (!jsonObj.get("ValueReceivedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValueReceivedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValueReceivedDate").toString()));
      }
      if (!jsonObj.get("ValueTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValueTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValueTypeCode").toString()));
      }
      if (!jsonObj.get("VersionNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VersionNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VersionNmbr").toString()));
      }
      if (!jsonObj.get("ViolationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr0GetD80d90sDetailsD80D90sDetailsSources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr0GetD80d90sDetailsD80D90sDetailsSources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr0GetD80d90sDetailsD80D90sDetailsSources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr0GetD80d90sDetailsD80D90sDetailsSources.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr0GetD80d90sDetailsD80D90sDetailsSources>() {
           @Override
           public void write(JsonWriter out, Dfr0GetD80d90sDetailsD80D90sDetailsSources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr0GetD80d90sDetailsD80D90sDetailsSources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr0GetD80d90sDetailsD80D90sDetailsSources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr0GetD80d90sDetailsD80D90sDetailsSources
   * @throws IOException if the JSON string is invalid with respect to Dfr0GetD80d90sDetailsD80D90sDetailsSources
   */
  public static Dfr0GetD80d90sDetailsD80D90sDetailsSources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr0GetD80d90sDetailsD80D90sDetailsSources.class);
  }

  /**
   * Convert an instance of Dfr0GetD80d90sDetailsD80D90sDetailsSources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

