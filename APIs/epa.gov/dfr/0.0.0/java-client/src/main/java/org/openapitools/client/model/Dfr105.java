/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tribes Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr105 {
  public static final String SERIALIZED_NAME_AREA_NAME = "AreaName";
  @SerializedName(SERIALIZED_NAME_AREA_NAME)
  private String areaName;

  public static final String SERIALIZED_NAME_DISTANCE_TO_AREA = "DistanceToArea";
  @SerializedName(SERIALIZED_NAME_DISTANCE_TO_AREA)
  private String distanceToArea;

  public static final String SERIALIZED_NAME_EP_A_ID = "EPAId";
  @SerializedName(SERIALIZED_NAME_EP_A_ID)
  private String epAId;

  public static final String SERIALIZED_NAME_TRIBE_NAME = "TribeName";
  @SerializedName(SERIALIZED_NAME_TRIBE_NAME)
  private String tribeName;

  public Dfr105() {
  }

  public Dfr105 areaName(String areaName) {
    this.areaName = areaName;
    return this;
  }

  /**
   * Displays Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.
   * @return areaName
   */
  @javax.annotation.Nonnull
  public String getAreaName() {
    return areaName;
  }

  public void setAreaName(String areaName) {
    this.areaName = areaName;
  }


  public Dfr105 distanceToArea(String distanceToArea) {
    this.distanceToArea = distanceToArea;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return distanceToArea
   */
  @javax.annotation.Nonnull
  public String getDistanceToArea() {
    return distanceToArea;
  }

  public void setDistanceToArea(String distanceToArea) {
    this.distanceToArea = distanceToArea;
  }


  public Dfr105 epAId(String epAId) {
    this.epAId = epAId;
    return this;
  }

  /**
   * This is the EPA Identifier for substances.
   * @return epAId
   */
  @javax.annotation.Nonnull
  public String getEpAId() {
    return epAId;
  }

  public void setEpAId(String epAId) {
    this.epAId = epAId;
  }


  public Dfr105 tribeName(String tribeName) {
    this.tribeName = tribeName;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return tribeName
   */
  @javax.annotation.Nonnull
  public String getTribeName() {
    return tribeName;
  }

  public void setTribeName(String tribeName) {
    this.tribeName = tribeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr105 dfr105 = (Dfr105) o;
    return Objects.equals(this.areaName, dfr105.areaName) &&
        Objects.equals(this.distanceToArea, dfr105.distanceToArea) &&
        Objects.equals(this.epAId, dfr105.epAId) &&
        Objects.equals(this.tribeName, dfr105.tribeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaName, distanceToArea, epAId, tribeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr105 {\n");
    sb.append("    areaName: ").append(toIndentedString(areaName)).append("\n");
    sb.append("    distanceToArea: ").append(toIndentedString(distanceToArea)).append("\n");
    sb.append("    epAId: ").append(toIndentedString(epAId)).append("\n");
    sb.append("    tribeName: ").append(toIndentedString(tribeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AreaName");
    openapiFields.add("DistanceToArea");
    openapiFields.add("EPAId");
    openapiFields.add("TribeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AreaName");
    openapiRequiredFields.add("DistanceToArea");
    openapiRequiredFields.add("EPAId");
    openapiRequiredFields.add("TribeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr105
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr105.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr105 is not found in the empty JSON string", Dfr105.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr105.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr105` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr105.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AreaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AreaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AreaName").toString()));
      }
      if (!jsonObj.get("DistanceToArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DistanceToArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DistanceToArea").toString()));
      }
      if (!jsonObj.get("EPAId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPAId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPAId").toString()));
      }
      if (!jsonObj.get("TribeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TribeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TribeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr105.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr105' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr105> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr105.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr105>() {
           @Override
           public void write(JsonWriter out, Dfr105 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr105 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr105 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr105
   * @throws IOException if the JSON string is invalid with respect to Dfr105
   */
  public static Dfr105 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr105.class);
  }

  /**
   * Convert an instance of Dfr105 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

