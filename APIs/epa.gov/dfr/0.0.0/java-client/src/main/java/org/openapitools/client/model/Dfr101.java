/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Release Year Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr101 {
  public static final String SERIALIZED_NAME_OFF_SITE_TRANSFERS_P_O_T_W_S = "OffSiteTransfersPOTWS";
  @SerializedName(SERIALIZED_NAME_OFF_SITE_TRANSFERS_P_O_T_W_S)
  private String offSiteTransfersPOTWS;

  public static final String SERIALIZED_NAME_RELEASES_TO_LAND = "ReleasesToLand";
  @SerializedName(SERIALIZED_NAME_RELEASES_TO_LAND)
  private String releasesToLand;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_SURFACE_WATER_DISCHARGES = "SurfaceWaterDischarges";
  @SerializedName(SERIALIZED_NAME_SURFACE_WATER_DISCHARGES)
  private String surfaceWaterDischarges;

  public static final String SERIALIZED_NAME_TOTAL_AIR_EMISSIONS = "TotalAirEmissions";
  @SerializedName(SERIALIZED_NAME_TOTAL_AIR_EMISSIONS)
  private String totalAirEmissions;

  public static final String SERIALIZED_NAME_TOTAL_OFF_SITE_RELEASES = "TotalOffSiteReleases";
  @SerializedName(SERIALIZED_NAME_TOTAL_OFF_SITE_RELEASES)
  private String totalOffSiteReleases;

  public static final String SERIALIZED_NAME_TOTAL_ON_SITE_RELEASES = "TotalOnSiteReleases";
  @SerializedName(SERIALIZED_NAME_TOTAL_ON_SITE_RELEASES)
  private String totalOnSiteReleases;

  public static final String SERIALIZED_NAME_TOTAL_RELEASES_TRANSFERS = "TotalReleasesTransfers";
  @SerializedName(SERIALIZED_NAME_TOTAL_RELEASES_TRANSFERS)
  private String totalReleasesTransfers;

  public static final String SERIALIZED_NAME_UNDERGROUND_INJECTIONS = "UndergroundInjections";
  @SerializedName(SERIALIZED_NAME_UNDERGROUND_INJECTIONS)
  private String undergroundInjections;

  public static final String SERIALIZED_NAME_YEAR = "Year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public Dfr101() {
  }

  public Dfr101 offSiteTransfersPOTWS(String offSiteTransfersPOTWS) {
    this.offSiteTransfersPOTWS = offSiteTransfersPOTWS;
    return this;
  }

  /**
   * The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs).
   * @return offSiteTransfersPOTWS
   */
  @javax.annotation.Nonnull
  public String getOffSiteTransfersPOTWS() {
    return offSiteTransfersPOTWS;
  }

  public void setOffSiteTransfersPOTWS(String offSiteTransfersPOTWS) {
    this.offSiteTransfersPOTWS = offSiteTransfersPOTWS;
  }


  public Dfr101 releasesToLand(String releasesToLand) {
    this.releasesToLand = releasesToLand;
    return this;
  }

  /**
   * Total releases to land on-site (includes landfills), in pounds per year.
   * @return releasesToLand
   */
  @javax.annotation.Nonnull
  public String getReleasesToLand() {
    return releasesToLand;
  }

  public void setReleasesToLand(String releasesToLand) {
    this.releasesToLand = releasesToLand;
  }


  public Dfr101 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr101 surfaceWaterDischarges(String surfaceWaterDischarges) {
    this.surfaceWaterDischarges = surfaceWaterDischarges;
    return this;
  }

  /**
   * The total direct discharges to receiving streams or water bodies, in pounds per year.
   * @return surfaceWaterDischarges
   */
  @javax.annotation.Nonnull
  public String getSurfaceWaterDischarges() {
    return surfaceWaterDischarges;
  }

  public void setSurfaceWaterDischarges(String surfaceWaterDischarges) {
    this.surfaceWaterDischarges = surfaceWaterDischarges;
  }


  public Dfr101 totalAirEmissions(String totalAirEmissions) {
    this.totalAirEmissions = totalAirEmissions;
    return this;
  }

  /**
   * The total fugitive (non-point air emissions) and stack or point air emissions, in pounds per year.
   * @return totalAirEmissions
   */
  @javax.annotation.Nonnull
  public String getTotalAirEmissions() {
    return totalAirEmissions;
  }

  public void setTotalAirEmissions(String totalAirEmissions) {
    this.totalAirEmissions = totalAirEmissions;
  }


  public Dfr101 totalOffSiteReleases(String totalOffSiteReleases) {
    this.totalOffSiteReleases = totalOffSiteReleases;
    return this;
  }

  /**
   * The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs) and other off-site locations.
   * @return totalOffSiteReleases
   */
  @javax.annotation.Nonnull
  public String getTotalOffSiteReleases() {
    return totalOffSiteReleases;
  }

  public void setTotalOffSiteReleases(String totalOffSiteReleases) {
    this.totalOffSiteReleases = totalOffSiteReleases;
  }


  public Dfr101 totalOnSiteReleases(String totalOnSiteReleases) {
    this.totalOnSiteReleases = totalOnSiteReleases;
    return this;
  }

  /**
   * Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
   * @return totalOnSiteReleases
   */
  @javax.annotation.Nonnull
  public String getTotalOnSiteReleases() {
    return totalOnSiteReleases;
  }

  public void setTotalOnSiteReleases(String totalOnSiteReleases) {
    this.totalOnSiteReleases = totalOnSiteReleases;
  }


  public Dfr101 totalReleasesTransfers(String totalReleasesTransfers) {
    this.totalReleasesTransfers = totalReleasesTransfers;
    return this;
  }

  /**
   * Grand total for Air Emissions, Surface Water Discharges, Underground Injections, Releases to Land, On-Site Releases and Off-Site Transfers in pounds per year for all types of chemicals.
   * @return totalReleasesTransfers
   */
  @javax.annotation.Nonnull
  public String getTotalReleasesTransfers() {
    return totalReleasesTransfers;
  }

  public void setTotalReleasesTransfers(String totalReleasesTransfers) {
    this.totalReleasesTransfers = totalReleasesTransfers;
  }


  public Dfr101 undergroundInjections(String undergroundInjections) {
    this.undergroundInjections = undergroundInjections;
    return this;
  }

  /**
   * The total underground injections to wells on-site, in pounds per year.
   * @return undergroundInjections
   */
  @javax.annotation.Nonnull
  public String getUndergroundInjections() {
    return undergroundInjections;
  }

  public void setUndergroundInjections(String undergroundInjections) {
    this.undergroundInjections = undergroundInjections;
  }


  public Dfr101 year(String year) {
    this.year = year;
    return this;
  }

  /**
   * The calendar year of a time dimension (reporting table) record.
   * @return year
   */
  @javax.annotation.Nonnull
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr101 dfr101 = (Dfr101) o;
    return Objects.equals(this.offSiteTransfersPOTWS, dfr101.offSiteTransfersPOTWS) &&
        Objects.equals(this.releasesToLand, dfr101.releasesToLand) &&
        Objects.equals(this.sourceID, dfr101.sourceID) &&
        Objects.equals(this.surfaceWaterDischarges, dfr101.surfaceWaterDischarges) &&
        Objects.equals(this.totalAirEmissions, dfr101.totalAirEmissions) &&
        Objects.equals(this.totalOffSiteReleases, dfr101.totalOffSiteReleases) &&
        Objects.equals(this.totalOnSiteReleases, dfr101.totalOnSiteReleases) &&
        Objects.equals(this.totalReleasesTransfers, dfr101.totalReleasesTransfers) &&
        Objects.equals(this.undergroundInjections, dfr101.undergroundInjections) &&
        Objects.equals(this.year, dfr101.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offSiteTransfersPOTWS, releasesToLand, sourceID, surfaceWaterDischarges, totalAirEmissions, totalOffSiteReleases, totalOnSiteReleases, totalReleasesTransfers, undergroundInjections, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr101 {\n");
    sb.append("    offSiteTransfersPOTWS: ").append(toIndentedString(offSiteTransfersPOTWS)).append("\n");
    sb.append("    releasesToLand: ").append(toIndentedString(releasesToLand)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    surfaceWaterDischarges: ").append(toIndentedString(surfaceWaterDischarges)).append("\n");
    sb.append("    totalAirEmissions: ").append(toIndentedString(totalAirEmissions)).append("\n");
    sb.append("    totalOffSiteReleases: ").append(toIndentedString(totalOffSiteReleases)).append("\n");
    sb.append("    totalOnSiteReleases: ").append(toIndentedString(totalOnSiteReleases)).append("\n");
    sb.append("    totalReleasesTransfers: ").append(toIndentedString(totalReleasesTransfers)).append("\n");
    sb.append("    undergroundInjections: ").append(toIndentedString(undergroundInjections)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OffSiteTransfersPOTWS");
    openapiFields.add("ReleasesToLand");
    openapiFields.add("SourceID");
    openapiFields.add("SurfaceWaterDischarges");
    openapiFields.add("TotalAirEmissions");
    openapiFields.add("TotalOffSiteReleases");
    openapiFields.add("TotalOnSiteReleases");
    openapiFields.add("TotalReleasesTransfers");
    openapiFields.add("UndergroundInjections");
    openapiFields.add("Year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OffSiteTransfersPOTWS");
    openapiRequiredFields.add("ReleasesToLand");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("SurfaceWaterDischarges");
    openapiRequiredFields.add("TotalAirEmissions");
    openapiRequiredFields.add("TotalOffSiteReleases");
    openapiRequiredFields.add("TotalOnSiteReleases");
    openapiRequiredFields.add("TotalReleasesTransfers");
    openapiRequiredFields.add("UndergroundInjections");
    openapiRequiredFields.add("Year");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr101
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr101.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr101 is not found in the empty JSON string", Dfr101.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr101.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr101` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr101.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("OffSiteTransfersPOTWS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OffSiteTransfersPOTWS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OffSiteTransfersPOTWS").toString()));
      }
      if (!jsonObj.get("ReleasesToLand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleasesToLand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleasesToLand").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("SurfaceWaterDischarges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SurfaceWaterDischarges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SurfaceWaterDischarges").toString()));
      }
      if (!jsonObj.get("TotalAirEmissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalAirEmissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalAirEmissions").toString()));
      }
      if (!jsonObj.get("TotalOffSiteReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalOffSiteReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalOffSiteReleases").toString()));
      }
      if (!jsonObj.get("TotalOnSiteReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalOnSiteReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalOnSiteReleases").toString()));
      }
      if (!jsonObj.get("TotalReleasesTransfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalReleasesTransfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalReleasesTransfers").toString()));
      }
      if (!jsonObj.get("UndergroundInjections").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UndergroundInjections` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UndergroundInjections").toString()));
      }
      if (!jsonObj.get("Year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr101.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr101' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr101> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr101.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr101>() {
           @Override
           public void write(JsonWriter out, Dfr101 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr101 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr101 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr101
   * @throws IOException if the JSON string is invalid with respect to Dfr101
   */
  public static Dfr101 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr101.class);
  }

  /**
   * Convert an instance of Dfr101 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

