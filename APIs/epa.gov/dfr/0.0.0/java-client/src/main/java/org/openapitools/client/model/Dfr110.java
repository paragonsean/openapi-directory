/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dfr109;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Violations Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr110 {
  public static final String SERIALIZED_NAME_COMPLIANCE_PERIOD_BEGIN_DATE = "CompliancePeriodBeginDate";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_PERIOD_BEGIN_DATE)
  private String compliancePeriodBeginDate;

  public static final String SERIALIZED_NAME_COMPLIANCE_PERIOD_END_DATE = "CompliancePeriodEndDate";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_PERIOD_END_DATE)
  private String compliancePeriodEndDate;

  public static final String SERIALIZED_NAME_CONTAMINANT_NAME = "ContaminantName";
  @SerializedName(SERIALIZED_NAME_CONTAMINANT_NAME)
  private String contaminantName;

  public static final String SERIALIZED_NAME_ENFORCEMENT_ACTIONS = "EnforcementActions";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_ACTIONS)
  private List<Dfr109> enforcementActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEDERAL_M_C_L = "FederalMCL";
  @SerializedName(SERIALIZED_NAME_FEDERAL_M_C_L)
  private String federalMCL;

  public static final String SERIALIZED_NAME_FEDERAL_RULE = "FederalRule";
  @SerializedName(SERIALIZED_NAME_FEDERAL_RULE)
  private String federalRule;

  public static final String SERIALIZED_NAME_RESOLVED_DATE = "ResolvedDate";
  @SerializedName(SERIALIZED_NAME_RESOLVED_DATE)
  private String resolvedDate;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATE_M_C_L = "StateMCL";
  @SerializedName(SERIALIZED_NAME_STATE_M_C_L)
  private String stateMCL;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VIOLATION_CATEGORY_CODE = "ViolationCategoryCode";
  @SerializedName(SERIALIZED_NAME_VIOLATION_CATEGORY_CODE)
  private String violationCategoryCode;

  public static final String SERIALIZED_NAME_VIOLATION_CATEGORY_DESC = "ViolationCategoryDesc";
  @SerializedName(SERIALIZED_NAME_VIOLATION_CATEGORY_DESC)
  private String violationCategoryDesc;

  public static final String SERIALIZED_NAME_VIOLATION_I_D = "ViolationID";
  @SerializedName(SERIALIZED_NAME_VIOLATION_I_D)
  private String violationID;

  public static final String SERIALIZED_NAME_VIOLATION_MEASURE = "ViolationMeasure";
  @SerializedName(SERIALIZED_NAME_VIOLATION_MEASURE)
  private String violationMeasure;

  public Dfr110() {
  }

  public Dfr110 compliancePeriodBeginDate(String compliancePeriodBeginDate) {
    this.compliancePeriodBeginDate = compliancePeriodBeginDate;
    return this;
  }

  /**
   * The beginning date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
   * @return compliancePeriodBeginDate
   */
  @javax.annotation.Nonnull
  public String getCompliancePeriodBeginDate() {
    return compliancePeriodBeginDate;
  }

  public void setCompliancePeriodBeginDate(String compliancePeriodBeginDate) {
    this.compliancePeriodBeginDate = compliancePeriodBeginDate;
  }


  public Dfr110 compliancePeriodEndDate(String compliancePeriodEndDate) {
    this.compliancePeriodEndDate = compliancePeriodEndDate;
    return this;
  }

  /**
   * The end date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
   * @return compliancePeriodEndDate
   */
  @javax.annotation.Nonnull
  public String getCompliancePeriodEndDate() {
    return compliancePeriodEndDate;
  }

  public void setCompliancePeriodEndDate(String compliancePeriodEndDate) {
    this.compliancePeriodEndDate = compliancePeriodEndDate;
  }


  public Dfr110 contaminantName(String contaminantName) {
    this.contaminantName = contaminantName;
    return this;
  }

  /**
   * City
   * @return contaminantName
   */
  @javax.annotation.Nonnull
  public String getContaminantName() {
    return contaminantName;
  }

  public void setContaminantName(String contaminantName) {
    this.contaminantName = contaminantName;
  }


  public Dfr110 enforcementActions(List<Dfr109> enforcementActions) {
    this.enforcementActions = enforcementActions;
    return this;
  }

  public Dfr110 addEnforcementActionsItem(Dfr109 enforcementActionsItem) {
    if (this.enforcementActions == null) {
      this.enforcementActions = new ArrayList<>();
    }
    this.enforcementActions.add(enforcementActionsItem);
    return this;
  }

  /**
   * Get enforcementActions
   * @return enforcementActions
   */
  @javax.annotation.Nonnull
  public List<Dfr109> getEnforcementActions() {
    return enforcementActions;
  }

  public void setEnforcementActions(List<Dfr109> enforcementActions) {
    this.enforcementActions = enforcementActions;
  }


  public Dfr110 federalMCL(String federalMCL) {
    this.federalMCL = federalMCL;
    return this;
  }

  /**
   * Maximum contaminant levels (MCLs) or maximum residual disinfectant levels (MRDLs), which specify the highest concentrations of contaminants or disinfectants, respectively, allowed in drinking water; or of treatment technique (TT) rules, which specify required processes intended to reduce the amounts of contaminants in drinking water.
   * @return federalMCL
   */
  @javax.annotation.Nonnull
  public String getFederalMCL() {
    return federalMCL;
  }

  public void setFederalMCL(String federalMCL) {
    this.federalMCL = federalMCL;
  }


  public Dfr110 federalRule(String federalRule) {
    this.federalRule = federalRule;
    return this;
  }

  /**
   * ???
   * @return federalRule
   */
  @javax.annotation.Nonnull
  public String getFederalRule() {
    return federalRule;
  }

  public void setFederalRule(String federalRule) {
    this.federalRule = federalRule;
  }


  public Dfr110 resolvedDate(String resolvedDate) {
    this.resolvedDate = resolvedDate;
    return this;
  }

  /**
   * The resolved date of the drinking water violation (MM/DD/YYYY)
   * @return resolvedDate
   */
  @javax.annotation.Nonnull
  public String getResolvedDate() {
    return resolvedDate;
  }

  public void setResolvedDate(String resolvedDate) {
    this.resolvedDate = resolvedDate;
  }


  public Dfr110 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr110 stateMCL(String stateMCL) {
    this.stateMCL = stateMCL;
    return this;
  }

  /**
   * County
   * @return stateMCL
   */
  @javax.annotation.Nonnull
  public String getStateMCL() {
    return stateMCL;
  }

  public void setStateMCL(String stateMCL) {
    this.stateMCL = stateMCL;
  }


  public Dfr110 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Describes the status of the drinking water violation. Violation statuses include: - Resolved: The violation has at least one resolving enforcement action. In SDWIS, this indicates that either the system has returned to compliance from the violation, the rule that was violated was no longer applicable, or no further action was needed. - Archived: The violation is not Resolved, but is more than five years past its compliance period end date. In keeping with the Enforcement Response Policy, the violation no longer contributes to the public water system&#39;s overall compliance status. Unresolved violations are also marked as Archived when a system ceases operations (becomes inactive). - Addressed: The violation is not Resolved or Archived, and is addressed by one or more formal enforcement actions. - Unaddressed: The violation is not Resolved or Archived, and has not been addressed by formal enforcement.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Dfr110 violationCategoryCode(String violationCategoryCode) {
    this.violationCategoryCode = violationCategoryCode;
    return this;
  }

  /**
   * Categories of violations that may be reported
   * @return violationCategoryCode
   */
  @javax.annotation.Nonnull
  public String getViolationCategoryCode() {
    return violationCategoryCode;
  }

  public void setViolationCategoryCode(String violationCategoryCode) {
    this.violationCategoryCode = violationCategoryCode;
  }


  public Dfr110 violationCategoryDesc(String violationCategoryDesc) {
    this.violationCategoryDesc = violationCategoryDesc;
    return this;
  }

  /**
   * A description of the violation category.
   * @return violationCategoryDesc
   */
  @javax.annotation.Nonnull
  public String getViolationCategoryDesc() {
    return violationCategoryDesc;
  }

  public void setViolationCategoryDesc(String violationCategoryDesc) {
    this.violationCategoryDesc = violationCategoryDesc;
  }


  public Dfr110 violationID(String violationID) {
    this.violationID = violationID;
    return this;
  }

  /**
   * An identifer from SDWA that uniquely identifies the violation.
   * @return violationID
   */
  @javax.annotation.Nonnull
  public String getViolationID() {
    return violationID;
  }

  public void setViolationID(String violationID) {
    this.violationID = violationID;
  }


  public Dfr110 violationMeasure(String violationMeasure) {
    this.violationMeasure = violationMeasure;
    return this;
  }

  /**
   * A numeric value that represents the analytical result of a contaminant that exceeded the Maximum Contaminant Level (MCL) for that contaminant.
   * @return violationMeasure
   */
  @javax.annotation.Nonnull
  public String getViolationMeasure() {
    return violationMeasure;
  }

  public void setViolationMeasure(String violationMeasure) {
    this.violationMeasure = violationMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr110 dfr110 = (Dfr110) o;
    return Objects.equals(this.compliancePeriodBeginDate, dfr110.compliancePeriodBeginDate) &&
        Objects.equals(this.compliancePeriodEndDate, dfr110.compliancePeriodEndDate) &&
        Objects.equals(this.contaminantName, dfr110.contaminantName) &&
        Objects.equals(this.enforcementActions, dfr110.enforcementActions) &&
        Objects.equals(this.federalMCL, dfr110.federalMCL) &&
        Objects.equals(this.federalRule, dfr110.federalRule) &&
        Objects.equals(this.resolvedDate, dfr110.resolvedDate) &&
        Objects.equals(this.sourceID, dfr110.sourceID) &&
        Objects.equals(this.stateMCL, dfr110.stateMCL) &&
        Objects.equals(this.status, dfr110.status) &&
        Objects.equals(this.violationCategoryCode, dfr110.violationCategoryCode) &&
        Objects.equals(this.violationCategoryDesc, dfr110.violationCategoryDesc) &&
        Objects.equals(this.violationID, dfr110.violationID) &&
        Objects.equals(this.violationMeasure, dfr110.violationMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compliancePeriodBeginDate, compliancePeriodEndDate, contaminantName, enforcementActions, federalMCL, federalRule, resolvedDate, sourceID, stateMCL, status, violationCategoryCode, violationCategoryDesc, violationID, violationMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr110 {\n");
    sb.append("    compliancePeriodBeginDate: ").append(toIndentedString(compliancePeriodBeginDate)).append("\n");
    sb.append("    compliancePeriodEndDate: ").append(toIndentedString(compliancePeriodEndDate)).append("\n");
    sb.append("    contaminantName: ").append(toIndentedString(contaminantName)).append("\n");
    sb.append("    enforcementActions: ").append(toIndentedString(enforcementActions)).append("\n");
    sb.append("    federalMCL: ").append(toIndentedString(federalMCL)).append("\n");
    sb.append("    federalRule: ").append(toIndentedString(federalRule)).append("\n");
    sb.append("    resolvedDate: ").append(toIndentedString(resolvedDate)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    stateMCL: ").append(toIndentedString(stateMCL)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    violationCategoryCode: ").append(toIndentedString(violationCategoryCode)).append("\n");
    sb.append("    violationCategoryDesc: ").append(toIndentedString(violationCategoryDesc)).append("\n");
    sb.append("    violationID: ").append(toIndentedString(violationID)).append("\n");
    sb.append("    violationMeasure: ").append(toIndentedString(violationMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompliancePeriodBeginDate");
    openapiFields.add("CompliancePeriodEndDate");
    openapiFields.add("ContaminantName");
    openapiFields.add("EnforcementActions");
    openapiFields.add("FederalMCL");
    openapiFields.add("FederalRule");
    openapiFields.add("ResolvedDate");
    openapiFields.add("SourceID");
    openapiFields.add("StateMCL");
    openapiFields.add("Status");
    openapiFields.add("ViolationCategoryCode");
    openapiFields.add("ViolationCategoryDesc");
    openapiFields.add("ViolationID");
    openapiFields.add("ViolationMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CompliancePeriodBeginDate");
    openapiRequiredFields.add("CompliancePeriodEndDate");
    openapiRequiredFields.add("ContaminantName");
    openapiRequiredFields.add("EnforcementActions");
    openapiRequiredFields.add("FederalMCL");
    openapiRequiredFields.add("FederalRule");
    openapiRequiredFields.add("ResolvedDate");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("StateMCL");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("ViolationCategoryCode");
    openapiRequiredFields.add("ViolationCategoryDesc");
    openapiRequiredFields.add("ViolationID");
    openapiRequiredFields.add("ViolationMeasure");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr110
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr110.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr110 is not found in the empty JSON string", Dfr110.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr110.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr110` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr110.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CompliancePeriodBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompliancePeriodBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompliancePeriodBeginDate").toString()));
      }
      if (!jsonObj.get("CompliancePeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompliancePeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompliancePeriodEndDate").toString()));
      }
      if (!jsonObj.get("ContaminantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContaminantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContaminantName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("EnforcementActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementActions` to be an array in the JSON string but got `%s`", jsonObj.get("EnforcementActions").toString()));
      }

      JsonArray jsonArrayenforcementActions = jsonObj.getAsJsonArray("EnforcementActions");
      // validate the required field `EnforcementActions` (array)
      for (int i = 0; i < jsonArrayenforcementActions.size(); i++) {
        Dfr109.validateJsonElement(jsonArrayenforcementActions.get(i));
      };
      if (!jsonObj.get("FederalMCL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalMCL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalMCL").toString()));
      }
      if (!jsonObj.get("FederalRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalRule").toString()));
      }
      if (!jsonObj.get("ResolvedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResolvedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResolvedDate").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("StateMCL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateMCL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateMCL").toString()));
      }
      if (!jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if (!jsonObj.get("ViolationCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationCategoryCode").toString()));
      }
      if (!jsonObj.get("ViolationCategoryDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationCategoryDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationCategoryDesc").toString()));
      }
      if (!jsonObj.get("ViolationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationID").toString()));
      }
      if (!jsonObj.get("ViolationMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr110.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr110' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr110> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr110.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr110>() {
           @Override
           public void write(JsonWriter out, Dfr110 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr110 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr110 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr110
   * @throws IOException if the JSON string is invalid with respect to Dfr110
   */
  public static Dfr110 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr110.class);
  }

  /**
   * Convert an instance of Dfr110 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

