/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Header Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr104 {
  public static final String SERIALIZED_NAME_YEAR1 = "Year1";
  @SerializedName(SERIALIZED_NAME_YEAR1)
  private String year1;

  public static final String SERIALIZED_NAME_YEAR2 = "Year2";
  @SerializedName(SERIALIZED_NAME_YEAR2)
  private String year2;

  public static final String SERIALIZED_NAME_YEAR3 = "Year3";
  @SerializedName(SERIALIZED_NAME_YEAR3)
  private String year3;

  public static final String SERIALIZED_NAME_YEAR4 = "Year4";
  @SerializedName(SERIALIZED_NAME_YEAR4)
  private String year4;

  public static final String SERIALIZED_NAME_YEAR5 = "Year5";
  @SerializedName(SERIALIZED_NAME_YEAR5)
  private String year5;

  public static final String SERIALIZED_NAME_YEAR6 = "Year6";
  @SerializedName(SERIALIZED_NAME_YEAR6)
  private String year6;

  public static final String SERIALIZED_NAME_YEAR7 = "Year7";
  @SerializedName(SERIALIZED_NAME_YEAR7)
  private String year7;

  public static final String SERIALIZED_NAME_YEAR8 = "Year8";
  @SerializedName(SERIALIZED_NAME_YEAR8)
  private String year8;

  public static final String SERIALIZED_NAME_YEAR9 = "Year9";
  @SerializedName(SERIALIZED_NAME_YEAR9)
  private String year9;

  public Dfr104() {
  }

  public Dfr104 year1(String year1) {
    this.year1 = year1;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year1
   */
  @javax.annotation.Nonnull
  public String getYear1() {
    return year1;
  }

  public void setYear1(String year1) {
    this.year1 = year1;
  }


  public Dfr104 year2(String year2) {
    this.year2 = year2;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year2
   */
  @javax.annotation.Nonnull
  public String getYear2() {
    return year2;
  }

  public void setYear2(String year2) {
    this.year2 = year2;
  }


  public Dfr104 year3(String year3) {
    this.year3 = year3;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year3
   */
  @javax.annotation.Nonnull
  public String getYear3() {
    return year3;
  }

  public void setYear3(String year3) {
    this.year3 = year3;
  }


  public Dfr104 year4(String year4) {
    this.year4 = year4;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year4
   */
  @javax.annotation.Nonnull
  public String getYear4() {
    return year4;
  }

  public void setYear4(String year4) {
    this.year4 = year4;
  }


  public Dfr104 year5(String year5) {
    this.year5 = year5;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year5
   */
  @javax.annotation.Nonnull
  public String getYear5() {
    return year5;
  }

  public void setYear5(String year5) {
    this.year5 = year5;
  }


  public Dfr104 year6(String year6) {
    this.year6 = year6;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year6
   */
  @javax.annotation.Nonnull
  public String getYear6() {
    return year6;
  }

  public void setYear6(String year6) {
    this.year6 = year6;
  }


  public Dfr104 year7(String year7) {
    this.year7 = year7;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year7
   */
  @javax.annotation.Nonnull
  public String getYear7() {
    return year7;
  }

  public void setYear7(String year7) {
    this.year7 = year7;
  }


  public Dfr104 year8(String year8) {
    this.year8 = year8;
    return this;
  }

  /**
   * The calendar year during which TRI releases and transfers occurred.
   * @return year8
   */
  @javax.annotation.Nonnull
  public String getYear8() {
    return year8;
  }

  public void setYear8(String year8) {
    this.year8 = year8;
  }


  public Dfr104 year9(String year9) {
    this.year9 = year9;
    return this;
  }

  /**
   * The most recent calendar year during which TRI releases and transfer occurred.
   * @return year9
   */
  @javax.annotation.Nonnull
  public String getYear9() {
    return year9;
  }

  public void setYear9(String year9) {
    this.year9 = year9;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr104 dfr104 = (Dfr104) o;
    return Objects.equals(this.year1, dfr104.year1) &&
        Objects.equals(this.year2, dfr104.year2) &&
        Objects.equals(this.year3, dfr104.year3) &&
        Objects.equals(this.year4, dfr104.year4) &&
        Objects.equals(this.year5, dfr104.year5) &&
        Objects.equals(this.year6, dfr104.year6) &&
        Objects.equals(this.year7, dfr104.year7) &&
        Objects.equals(this.year8, dfr104.year8) &&
        Objects.equals(this.year9, dfr104.year9);
  }

  @Override
  public int hashCode() {
    return Objects.hash(year1, year2, year3, year4, year5, year6, year7, year8, year9);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr104 {\n");
    sb.append("    year1: ").append(toIndentedString(year1)).append("\n");
    sb.append("    year2: ").append(toIndentedString(year2)).append("\n");
    sb.append("    year3: ").append(toIndentedString(year3)).append("\n");
    sb.append("    year4: ").append(toIndentedString(year4)).append("\n");
    sb.append("    year5: ").append(toIndentedString(year5)).append("\n");
    sb.append("    year6: ").append(toIndentedString(year6)).append("\n");
    sb.append("    year7: ").append(toIndentedString(year7)).append("\n");
    sb.append("    year8: ").append(toIndentedString(year8)).append("\n");
    sb.append("    year9: ").append(toIndentedString(year9)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Year1");
    openapiFields.add("Year2");
    openapiFields.add("Year3");
    openapiFields.add("Year4");
    openapiFields.add("Year5");
    openapiFields.add("Year6");
    openapiFields.add("Year7");
    openapiFields.add("Year8");
    openapiFields.add("Year9");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Year1");
    openapiRequiredFields.add("Year2");
    openapiRequiredFields.add("Year3");
    openapiRequiredFields.add("Year4");
    openapiRequiredFields.add("Year5");
    openapiRequiredFields.add("Year6");
    openapiRequiredFields.add("Year7");
    openapiRequiredFields.add("Year8");
    openapiRequiredFields.add("Year9");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr104
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr104.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr104 is not found in the empty JSON string", Dfr104.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr104.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr104` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr104.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Year1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year1").toString()));
      }
      if (!jsonObj.get("Year2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year2").toString()));
      }
      if (!jsonObj.get("Year3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year3").toString()));
      }
      if (!jsonObj.get("Year4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year4").toString()));
      }
      if (!jsonObj.get("Year5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year5").toString()));
      }
      if (!jsonObj.get("Year6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year6").toString()));
      }
      if (!jsonObj.get("Year7").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year7` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year7").toString()));
      }
      if (!jsonObj.get("Year8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year8").toString()));
      }
      if (!jsonObj.get("Year9").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year9` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year9").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr104.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr104' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr104> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr104.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr104>() {
           @Override
           public void write(JsonWriter out, Dfr104 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr104 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr104 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr104
   * @throws IOException if the JSON string is invalid with respect to Dfr104
   */
  public static Dfr104 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr104.class);
  }

  /**
   * Convert an instance of Dfr104 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

