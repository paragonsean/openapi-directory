/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summaries Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018Summaries {
  public static final String SERIALIZED_NAME_CASES = "Cases";
  @SerializedName(SERIALIZED_NAME_CASES)
  private String cases;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "CurrentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private String currentStatus;

  public static final String SERIALIZED_NAME_FORMAL_ACTIONS = "FormalActions";
  @SerializedName(SERIALIZED_NAME_FORMAL_ACTIONS)
  private String formalActions;

  public static final String SERIALIZED_NAME_INFORMAL_ACTIONS = "InformalActions";
  @SerializedName(SERIALIZED_NAME_INFORMAL_ACTIONS)
  private String informalActions;

  public static final String SERIALIZED_NAME_INSPECTIONS = "Inspections";
  @SerializedName(SERIALIZED_NAME_INSPECTIONS)
  private String inspections;

  public static final String SERIALIZED_NAME_LAST_INSPECTION = "LastInspection";
  @SerializedName(SERIALIZED_NAME_LAST_INSPECTION)
  private String lastInspection;

  public static final String SERIALIZED_NAME_QTRS_IN_N_C = "QtrsInNC";
  @SerializedName(SERIALIZED_NAME_QTRS_IN_N_C)
  private String qtrsInNC;

  public static final String SERIALIZED_NAME_QTRS_IN_S_N_C = "QtrsInSNC";
  @SerializedName(SERIALIZED_NAME_QTRS_IN_S_N_C)
  private String qtrsInSNC;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public static final String SERIALIZED_NAME_TOTAL_CASE_PENALTIES = "TotalCasePenalties";
  @SerializedName(SERIALIZED_NAME_TOTAL_CASE_PENALTIES)
  private String totalCasePenalties;

  public static final String SERIALIZED_NAME_TOTAL_PENALTIES = "TotalPenalties";
  @SerializedName(SERIALIZED_NAME_TOTAL_PENALTIES)
  private String totalPenalties;

  public Dfr018Summaries() {
  }

  public Dfr018Summaries cases(String cases) {
    this.cases = cases;
    return this;
  }

  /**
   * The number of EPA enforcement cases that have been brought against the facility, under the corresponding statute, within the designated time period.
   * @return cases
   */
  @javax.annotation.Nonnull
  public String getCases() {
    return cases;
  }

  public void setCases(String cases) {
    this.cases = cases;
  }


  public Dfr018Summaries currentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * The current status for the facility during the most current quarter. (No violation, noncompliance)
   * @return currentStatus
   */
  @javax.annotation.Nonnull
  public String getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
  }


  public Dfr018Summaries formalActions(String formalActions) {
    this.formalActions = formalActions;
    return this;
  }

  /**
   * The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
   * @return formalActions
   */
  @javax.annotation.Nonnull
  public String getFormalActions() {
    return formalActions;
  }

  public void setFormalActions(String formalActions) {
    this.formalActions = formalActions;
  }


  public Dfr018Summaries informalActions(String informalActions) {
    this.informalActions = informalActions;
    return this;
  }

  /**
   * The number of informal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
   * @return informalActions
   */
  @javax.annotation.Nonnull
  public String getInformalActions() {
    return informalActions;
  }

  public void setInformalActions(String informalActions) {
    this.informalActions = informalActions;
  }


  public Dfr018Summaries inspections(String inspections) {
    this.inspections = inspections;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations that have occurred at the facility, under the corresponding statute, within the designated time period
   * @return inspections
   */
  @javax.annotation.Nonnull
  public String getInspections() {
    return inspections;
  }

  public void setInspections(String inspections) {
    this.inspections = inspections;
  }


  public Dfr018Summaries lastInspection(String lastInspection) {
    this.lastInspection = lastInspection;
    return this;
  }

  /**
   * The date on which the most recent inspection of the facility took place
   * @return lastInspection
   */
  @javax.annotation.Nonnull
  public String getLastInspection() {
    return lastInspection;
  }

  public void setLastInspection(String lastInspection) {
    this.lastInspection = lastInspection;
  }


  public Dfr018Summaries qtrsInNC(String qtrsInNC) {
    this.qtrsInNC = qtrsInNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status
   * @return qtrsInNC
   */
  @javax.annotation.Nonnull
  public String getQtrsInNC() {
    return qtrsInNC;
  }

  public void setQtrsInNC(String qtrsInNC) {
    this.qtrsInNC = qtrsInNC;
  }


  public Dfr018Summaries qtrsInSNC(String qtrsInSNC) {
    this.qtrsInSNC = qtrsInSNC;
    return this;
  }

  /**
   * The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
   * @return qtrsInSNC
   */
  @javax.annotation.Nonnull
  public String getQtrsInSNC() {
    return qtrsInSNC;
  }

  public void setQtrsInSNC(String qtrsInSNC) {
    this.qtrsInSNC = qtrsInSNC;
  }


  public Dfr018Summaries statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }


  public Dfr018Summaries totalCasePenalties(String totalCasePenalties) {
    this.totalCasePenalties = totalCasePenalties;
    return this;
  }

  /**
   * ??
   * @return totalCasePenalties
   */
  @javax.annotation.Nonnull
  public String getTotalCasePenalties() {
    return totalCasePenalties;
  }

  public void setTotalCasePenalties(String totalCasePenalties) {
    this.totalCasePenalties = totalCasePenalties;
  }


  public Dfr018Summaries totalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
    return this;
  }

  /**
   * The total dollar amount of either assessed or final penalties within the five year time period
   * @return totalPenalties
   */
  @javax.annotation.Nonnull
  public String getTotalPenalties() {
    return totalPenalties;
  }

  public void setTotalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018Summaries dfr018Summaries = (Dfr018Summaries) o;
    return Objects.equals(this.cases, dfr018Summaries.cases) &&
        Objects.equals(this.currentStatus, dfr018Summaries.currentStatus) &&
        Objects.equals(this.formalActions, dfr018Summaries.formalActions) &&
        Objects.equals(this.informalActions, dfr018Summaries.informalActions) &&
        Objects.equals(this.inspections, dfr018Summaries.inspections) &&
        Objects.equals(this.lastInspection, dfr018Summaries.lastInspection) &&
        Objects.equals(this.qtrsInNC, dfr018Summaries.qtrsInNC) &&
        Objects.equals(this.qtrsInSNC, dfr018Summaries.qtrsInSNC) &&
        Objects.equals(this.statute, dfr018Summaries.statute) &&
        Objects.equals(this.totalCasePenalties, dfr018Summaries.totalCasePenalties) &&
        Objects.equals(this.totalPenalties, dfr018Summaries.totalPenalties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cases, currentStatus, formalActions, informalActions, inspections, lastInspection, qtrsInNC, qtrsInSNC, statute, totalCasePenalties, totalPenalties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018Summaries {\n");
    sb.append("    cases: ").append(toIndentedString(cases)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    formalActions: ").append(toIndentedString(formalActions)).append("\n");
    sb.append("    informalActions: ").append(toIndentedString(informalActions)).append("\n");
    sb.append("    inspections: ").append(toIndentedString(inspections)).append("\n");
    sb.append("    lastInspection: ").append(toIndentedString(lastInspection)).append("\n");
    sb.append("    qtrsInNC: ").append(toIndentedString(qtrsInNC)).append("\n");
    sb.append("    qtrsInSNC: ").append(toIndentedString(qtrsInSNC)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("    totalCasePenalties: ").append(toIndentedString(totalCasePenalties)).append("\n");
    sb.append("    totalPenalties: ").append(toIndentedString(totalPenalties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cases");
    openapiFields.add("CurrentStatus");
    openapiFields.add("FormalActions");
    openapiFields.add("InformalActions");
    openapiFields.add("Inspections");
    openapiFields.add("LastInspection");
    openapiFields.add("QtrsInNC");
    openapiFields.add("QtrsInSNC");
    openapiFields.add("Statute");
    openapiFields.add("TotalCasePenalties");
    openapiFields.add("TotalPenalties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Cases");
    openapiRequiredFields.add("CurrentStatus");
    openapiRequiredFields.add("FormalActions");
    openapiRequiredFields.add("InformalActions");
    openapiRequiredFields.add("Inspections");
    openapiRequiredFields.add("LastInspection");
    openapiRequiredFields.add("QtrsInNC");
    openapiRequiredFields.add("QtrsInSNC");
    openapiRequiredFields.add("Statute");
    openapiRequiredFields.add("TotalCasePenalties");
    openapiRequiredFields.add("TotalPenalties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018Summaries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018Summaries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018Summaries is not found in the empty JSON string", Dfr018Summaries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018Summaries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018Summaries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr018Summaries.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Cases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cases").toString()));
      }
      if (!jsonObj.get("CurrentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentStatus").toString()));
      }
      if (!jsonObj.get("FormalActions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FormalActions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FormalActions").toString()));
      }
      if (!jsonObj.get("InformalActions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InformalActions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InformalActions").toString()));
      }
      if (!jsonObj.get("Inspections").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Inspections` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Inspections").toString()));
      }
      if (!jsonObj.get("LastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastInspection").toString()));
      }
      if (!jsonObj.get("QtrsInNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QtrsInNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QtrsInNC").toString()));
      }
      if (!jsonObj.get("QtrsInSNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QtrsInSNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QtrsInSNC").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
      if (!jsonObj.get("TotalCasePenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalCasePenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalCasePenalties").toString()));
      }
      if (!jsonObj.get("TotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPenalties").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018Summaries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018Summaries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018Summaries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018Summaries.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018Summaries>() {
           @Override
           public void write(JsonWriter out, Dfr018Summaries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018Summaries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018Summaries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018Summaries
   * @throws IOException if the JSON string is invalid with respect to Dfr018Summaries
   */
  public static Dfr018Summaries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018Summaries.class);
  }

  /**
   * Convert an instance of Dfr018Summaries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

