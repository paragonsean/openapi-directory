/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dfr079SEvaluations;
import org.openapitools.client.model.Dfr079SStatus;
import org.openapitools.client.model.Dfr079SViolations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Source Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr079S {
  public static final String SERIALIZED_NAME_EVALUATIONS = "Evaluations";
  @SerializedName(SERIALIZED_NAME_EVALUATIONS)
  private List<Dfr079SEvaluations> evaluations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Dfr079SStatus status;

  public static final String SERIALIZED_NAME_VIOLATIONS = "Violations";
  @SerializedName(SERIALIZED_NAME_VIOLATIONS)
  private List<Dfr079SViolations> violations = new ArrayList<>();

  public Dfr079S() {
  }

  public Dfr079S evaluations(List<Dfr079SEvaluations> evaluations) {
    this.evaluations = evaluations;
    return this;
  }

  public Dfr079S addEvaluationsItem(Dfr079SEvaluations evaluationsItem) {
    if (this.evaluations == null) {
      this.evaluations = new ArrayList<>();
    }
    this.evaluations.add(evaluationsItem);
    return this;
  }

  /**
   * Get evaluations
   * @return evaluations
   */
  @javax.annotation.Nullable
  public List<Dfr079SEvaluations> getEvaluations() {
    return evaluations;
  }

  public void setEvaluations(List<Dfr079SEvaluations> evaluations) {
    this.evaluations = evaluations;
  }


  public Dfr079S status(Dfr079SStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Dfr079SStatus getStatus() {
    return status;
  }

  public void setStatus(Dfr079SStatus status) {
    this.status = status;
  }


  public Dfr079S violations(List<Dfr079SViolations> violations) {
    this.violations = violations;
    return this;
  }

  public Dfr079S addViolationsItem(Dfr079SViolations violationsItem) {
    if (this.violations == null) {
      this.violations = new ArrayList<>();
    }
    this.violations.add(violationsItem);
    return this;
  }

  /**
   * Get violations
   * @return violations
   */
  @javax.annotation.Nullable
  public List<Dfr079SViolations> getViolations() {
    return violations;
  }

  public void setViolations(List<Dfr079SViolations> violations) {
    this.violations = violations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr079S dfr079S = (Dfr079S) o;
    return Objects.equals(this.evaluations, dfr079S.evaluations) &&
        Objects.equals(this.status, dfr079S.status) &&
        Objects.equals(this.violations, dfr079S.violations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluations, status, violations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr079S {\n");
    sb.append("    evaluations: ").append(toIndentedString(evaluations)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    violations: ").append(toIndentedString(violations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Evaluations");
    openapiFields.add("Status");
    openapiFields.add("Violations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr079S
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr079S.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr079S is not found in the empty JSON string", Dfr079S.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr079S.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr079S` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Evaluations") != null && !jsonObj.get("Evaluations").isJsonNull()) {
        JsonArray jsonArrayevaluations = jsonObj.getAsJsonArray("Evaluations");
        if (jsonArrayevaluations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Evaluations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Evaluations` to be an array in the JSON string but got `%s`", jsonObj.get("Evaluations").toString()));
          }

          // validate the optional field `Evaluations` (array)
          for (int i = 0; i < jsonArrayevaluations.size(); i++) {
            Dfr079SEvaluations.validateJsonElement(jsonArrayevaluations.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Dfr079SStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("Violations") != null && !jsonObj.get("Violations").isJsonNull()) {
        JsonArray jsonArrayviolations = jsonObj.getAsJsonArray("Violations");
        if (jsonArrayviolations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Violations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Violations` to be an array in the JSON string but got `%s`", jsonObj.get("Violations").toString()));
          }

          // validate the optional field `Violations` (array)
          for (int i = 0; i < jsonArrayviolations.size(); i++) {
            Dfr079SViolations.validateJsonElement(jsonArrayviolations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr079S.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr079S' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr079S> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr079S.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr079S>() {
           @Override
           public void write(JsonWriter out, Dfr079S value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr079S read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr079S given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr079S
   * @throws IOException if the JSON string is invalid with respect to Dfr079S
   */
  public static Dfr079S fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr079S.class);
  }

  /**
   * Convert an instance of Dfr079S to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

