/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EJScreen Index Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018EJScreenIndexes {
  public static final String SERIALIZED_NAME_HAZARD_WASTE_PROXIMITY = "HazardWasteProximity";
  @SerializedName(SERIALIZED_NAME_HAZARD_WASTE_PROXIMITY)
  private String hazardWasteProximity;

  public static final String SERIALIZED_NAME_LEAD_PAINT_INDICATOR = "LeadPaintIndicator";
  @SerializedName(SERIALIZED_NAME_LEAD_PAINT_INDICATOR)
  private String leadPaintIndicator;

  public static final String SERIALIZED_NAME_NA_T_A_CANCER_RISK = "NATACancerRisk";
  @SerializedName(SERIALIZED_NAME_NA_T_A_CANCER_RISK)
  private String naTACancerRisk;

  public static final String SERIALIZED_NAME_NA_T_A_DIESEL_P_M = "NATADieselPM";
  @SerializedName(SERIALIZED_NAME_NA_T_A_DIESEL_P_M)
  private String naTADieselPM;

  public static final String SERIALIZED_NAME_NA_T_A_RESPIRATORY_H_I = "NATARespiratoryHI";
  @SerializedName(SERIALIZED_NAME_NA_T_A_RESPIRATORY_H_I)
  private String naTARespiratoryHI;

  public static final String SERIALIZED_NAME_OVER80_COUNT = "Over80Count";
  @SerializedName(SERIALIZED_NAME_OVER80_COUNT)
  private String over80Count;

  public static final String SERIALIZED_NAME_OZONE = "Ozone";
  @SerializedName(SERIALIZED_NAME_OZONE)
  private String ozone;

  public static final String SERIALIZED_NAME_P_M25 = "PM25";
  @SerializedName(SERIALIZED_NAME_P_M25)
  private String PM25;

  public static final String SERIALIZED_NAME_RM_P_PROXIMITY = "RMPProximity";
  @SerializedName(SERIALIZED_NAME_RM_P_PROXIMITY)
  private String rmPProximity;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_SUPERFUND_PROXIMITY = "SuperfundProximity";
  @SerializedName(SERIALIZED_NAME_SUPERFUND_PROXIMITY)
  private String superfundProximity;

  public static final String SERIALIZED_NAME_TRAFFIC_PROXIMITY = "TrafficProximity";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_PROXIMITY)
  private String trafficProximity;

  public static final String SERIALIZED_NAME_WATER_DISCHARGE_PROXIMITY = "WaterDischargeProximity";
  @SerializedName(SERIALIZED_NAME_WATER_DISCHARGE_PROXIMITY)
  private String waterDischargeProximity;

  public Dfr018EJScreenIndexes() {
  }

  public Dfr018EJScreenIndexes hazardWasteProximity(String hazardWasteProximity) {
    this.hazardWasteProximity = hazardWasteProximity;
    return this;
  }

  /**
   * Get hazardWasteProximity
   * @return hazardWasteProximity
   */
  @javax.annotation.Nonnull
  public String getHazardWasteProximity() {
    return hazardWasteProximity;
  }

  public void setHazardWasteProximity(String hazardWasteProximity) {
    this.hazardWasteProximity = hazardWasteProximity;
  }


  public Dfr018EJScreenIndexes leadPaintIndicator(String leadPaintIndicator) {
    this.leadPaintIndicator = leadPaintIndicator;
    return this;
  }

  /**
   * Get leadPaintIndicator
   * @return leadPaintIndicator
   */
  @javax.annotation.Nonnull
  public String getLeadPaintIndicator() {
    return leadPaintIndicator;
  }

  public void setLeadPaintIndicator(String leadPaintIndicator) {
    this.leadPaintIndicator = leadPaintIndicator;
  }


  public Dfr018EJScreenIndexes naTACancerRisk(String naTACancerRisk) {
    this.naTACancerRisk = naTACancerRisk;
    return this;
  }

  /**
   * Get naTACancerRisk
   * @return naTACancerRisk
   */
  @javax.annotation.Nonnull
  public String getNaTACancerRisk() {
    return naTACancerRisk;
  }

  public void setNaTACancerRisk(String naTACancerRisk) {
    this.naTACancerRisk = naTACancerRisk;
  }


  public Dfr018EJScreenIndexes naTADieselPM(String naTADieselPM) {
    this.naTADieselPM = naTADieselPM;
    return this;
  }

  /**
   * Get naTADieselPM
   * @return naTADieselPM
   */
  @javax.annotation.Nonnull
  public String getNaTADieselPM() {
    return naTADieselPM;
  }

  public void setNaTADieselPM(String naTADieselPM) {
    this.naTADieselPM = naTADieselPM;
  }


  public Dfr018EJScreenIndexes naTARespiratoryHI(String naTARespiratoryHI) {
    this.naTARespiratoryHI = naTARespiratoryHI;
    return this;
  }

  /**
   * Get naTARespiratoryHI
   * @return naTARespiratoryHI
   */
  @javax.annotation.Nonnull
  public String getNaTARespiratoryHI() {
    return naTARespiratoryHI;
  }

  public void setNaTARespiratoryHI(String naTARespiratoryHI) {
    this.naTARespiratoryHI = naTARespiratoryHI;
  }


  public Dfr018EJScreenIndexes over80Count(String over80Count) {
    this.over80Count = over80Count;
    return this;
  }

  /**
   * Get over80Count
   * @return over80Count
   */
  @javax.annotation.Nonnull
  public String getOver80Count() {
    return over80Count;
  }

  public void setOver80Count(String over80Count) {
    this.over80Count = over80Count;
  }


  public Dfr018EJScreenIndexes ozone(String ozone) {
    this.ozone = ozone;
    return this;
  }

  /**
   * Get ozone
   * @return ozone
   */
  @javax.annotation.Nonnull
  public String getOzone() {
    return ozone;
  }

  public void setOzone(String ozone) {
    this.ozone = ozone;
  }


  public Dfr018EJScreenIndexes PM25(String PM25) {
    this.PM25 = PM25;
    return this;
  }

  /**
   * Get PM25
   * @return PM25
   */
  @javax.annotation.Nonnull
  public String getPM25() {
    return PM25;
  }

  public void setPM25(String PM25) {
    this.PM25 = PM25;
  }


  public Dfr018EJScreenIndexes rmPProximity(String rmPProximity) {
    this.rmPProximity = rmPProximity;
    return this;
  }

  /**
   * Get rmPProximity
   * @return rmPProximity
   */
  @javax.annotation.Nonnull
  public String getRmPProximity() {
    return rmPProximity;
  }

  public void setRmPProximity(String rmPProximity) {
    this.rmPProximity = rmPProximity;
  }


  public Dfr018EJScreenIndexes registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Dfr018EJScreenIndexes superfundProximity(String superfundProximity) {
    this.superfundProximity = superfundProximity;
    return this;
  }

  /**
   * Get superfundProximity
   * @return superfundProximity
   */
  @javax.annotation.Nonnull
  public String getSuperfundProximity() {
    return superfundProximity;
  }

  public void setSuperfundProximity(String superfundProximity) {
    this.superfundProximity = superfundProximity;
  }


  public Dfr018EJScreenIndexes trafficProximity(String trafficProximity) {
    this.trafficProximity = trafficProximity;
    return this;
  }

  /**
   * Get trafficProximity
   * @return trafficProximity
   */
  @javax.annotation.Nonnull
  public String getTrafficProximity() {
    return trafficProximity;
  }

  public void setTrafficProximity(String trafficProximity) {
    this.trafficProximity = trafficProximity;
  }


  public Dfr018EJScreenIndexes waterDischargeProximity(String waterDischargeProximity) {
    this.waterDischargeProximity = waterDischargeProximity;
    return this;
  }

  /**
   * Get waterDischargeProximity
   * @return waterDischargeProximity
   */
  @javax.annotation.Nonnull
  public String getWaterDischargeProximity() {
    return waterDischargeProximity;
  }

  public void setWaterDischargeProximity(String waterDischargeProximity) {
    this.waterDischargeProximity = waterDischargeProximity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018EJScreenIndexes dfr018EJScreenIndexes = (Dfr018EJScreenIndexes) o;
    return Objects.equals(this.hazardWasteProximity, dfr018EJScreenIndexes.hazardWasteProximity) &&
        Objects.equals(this.leadPaintIndicator, dfr018EJScreenIndexes.leadPaintIndicator) &&
        Objects.equals(this.naTACancerRisk, dfr018EJScreenIndexes.naTACancerRisk) &&
        Objects.equals(this.naTADieselPM, dfr018EJScreenIndexes.naTADieselPM) &&
        Objects.equals(this.naTARespiratoryHI, dfr018EJScreenIndexes.naTARespiratoryHI) &&
        Objects.equals(this.over80Count, dfr018EJScreenIndexes.over80Count) &&
        Objects.equals(this.ozone, dfr018EJScreenIndexes.ozone) &&
        Objects.equals(this.PM25, dfr018EJScreenIndexes.PM25) &&
        Objects.equals(this.rmPProximity, dfr018EJScreenIndexes.rmPProximity) &&
        Objects.equals(this.registryID, dfr018EJScreenIndexes.registryID) &&
        Objects.equals(this.superfundProximity, dfr018EJScreenIndexes.superfundProximity) &&
        Objects.equals(this.trafficProximity, dfr018EJScreenIndexes.trafficProximity) &&
        Objects.equals(this.waterDischargeProximity, dfr018EJScreenIndexes.waterDischargeProximity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hazardWasteProximity, leadPaintIndicator, naTACancerRisk, naTADieselPM, naTARespiratoryHI, over80Count, ozone, PM25, rmPProximity, registryID, superfundProximity, trafficProximity, waterDischargeProximity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018EJScreenIndexes {\n");
    sb.append("    hazardWasteProximity: ").append(toIndentedString(hazardWasteProximity)).append("\n");
    sb.append("    leadPaintIndicator: ").append(toIndentedString(leadPaintIndicator)).append("\n");
    sb.append("    naTACancerRisk: ").append(toIndentedString(naTACancerRisk)).append("\n");
    sb.append("    naTADieselPM: ").append(toIndentedString(naTADieselPM)).append("\n");
    sb.append("    naTARespiratoryHI: ").append(toIndentedString(naTARespiratoryHI)).append("\n");
    sb.append("    over80Count: ").append(toIndentedString(over80Count)).append("\n");
    sb.append("    ozone: ").append(toIndentedString(ozone)).append("\n");
    sb.append("    PM25: ").append(toIndentedString(PM25)).append("\n");
    sb.append("    rmPProximity: ").append(toIndentedString(rmPProximity)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    superfundProximity: ").append(toIndentedString(superfundProximity)).append("\n");
    sb.append("    trafficProximity: ").append(toIndentedString(trafficProximity)).append("\n");
    sb.append("    waterDischargeProximity: ").append(toIndentedString(waterDischargeProximity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HazardWasteProximity");
    openapiFields.add("LeadPaintIndicator");
    openapiFields.add("NATACancerRisk");
    openapiFields.add("NATADieselPM");
    openapiFields.add("NATARespiratoryHI");
    openapiFields.add("Over80Count");
    openapiFields.add("Ozone");
    openapiFields.add("PM25");
    openapiFields.add("RMPProximity");
    openapiFields.add("RegistryID");
    openapiFields.add("SuperfundProximity");
    openapiFields.add("TrafficProximity");
    openapiFields.add("WaterDischargeProximity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HazardWasteProximity");
    openapiRequiredFields.add("LeadPaintIndicator");
    openapiRequiredFields.add("NATACancerRisk");
    openapiRequiredFields.add("NATADieselPM");
    openapiRequiredFields.add("NATARespiratoryHI");
    openapiRequiredFields.add("Over80Count");
    openapiRequiredFields.add("Ozone");
    openapiRequiredFields.add("PM25");
    openapiRequiredFields.add("RMPProximity");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("SuperfundProximity");
    openapiRequiredFields.add("TrafficProximity");
    openapiRequiredFields.add("WaterDischargeProximity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018EJScreenIndexes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018EJScreenIndexes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018EJScreenIndexes is not found in the empty JSON string", Dfr018EJScreenIndexes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018EJScreenIndexes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018EJScreenIndexes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr018EJScreenIndexes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("HazardWasteProximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HazardWasteProximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HazardWasteProximity").toString()));
      }
      if (!jsonObj.get("LeadPaintIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadPaintIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadPaintIndicator").toString()));
      }
      if (!jsonObj.get("NATACancerRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NATACancerRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NATACancerRisk").toString()));
      }
      if (!jsonObj.get("NATADieselPM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NATADieselPM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NATADieselPM").toString()));
      }
      if (!jsonObj.get("NATARespiratoryHI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NATARespiratoryHI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NATARespiratoryHI").toString()));
      }
      if (!jsonObj.get("Over80Count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Over80Count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Over80Count").toString()));
      }
      if (!jsonObj.get("Ozone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ozone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ozone").toString()));
      }
      if (!jsonObj.get("PM25").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PM25` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PM25").toString()));
      }
      if (!jsonObj.get("RMPProximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RMPProximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RMPProximity").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("SuperfundProximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SuperfundProximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SuperfundProximity").toString()));
      }
      if (!jsonObj.get("TrafficProximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrafficProximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrafficProximity").toString()));
      }
      if (!jsonObj.get("WaterDischargeProximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WaterDischargeProximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WaterDischargeProximity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018EJScreenIndexes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018EJScreenIndexes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018EJScreenIndexes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018EJScreenIndexes.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018EJScreenIndexes>() {
           @Override
           public void write(JsonWriter out, Dfr018EJScreenIndexes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018EJScreenIndexes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018EJScreenIndexes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018EJScreenIndexes
   * @throws IOException if the JSON string is invalid with respect to Dfr018EJScreenIndexes
   */
  public static Dfr018EJScreenIndexes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018EJScreenIndexes.class);
  }

  /**
   * Convert an instance of Dfr018EJScreenIndexes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

