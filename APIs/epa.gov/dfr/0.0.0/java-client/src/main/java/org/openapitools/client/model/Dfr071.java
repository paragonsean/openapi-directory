/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Copper Samples
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr071 {
  public static final String SERIALIZED_NAME_C_U90 = "CU90";
  @SerializedName(SERIALIZED_NAME_C_U90)
  private String CU90;

  public static final String SERIALIZED_NAME_CU90_DATES = "CU90Dates";
  @SerializedName(SERIALIZED_NAME_CU90_DATES)
  private String cu90Dates;

  public static final String SERIALIZED_NAME_CU90_UNITS = "CU90Units";
  @SerializedName(SERIALIZED_NAME_CU90_UNITS)
  private String cu90Units;

  public static final String SERIALIZED_NAME_CU90_VALUE = "CU90Value";
  @SerializedName(SERIALIZED_NAME_CU90_VALUE)
  private String cu90Value;

  public Dfr071() {
  }

  public Dfr071 CU90(String CU90) {
    this.CU90 = CU90;
    return this;
  }

  /**
   * The concentration of copper representing the 90th percentile level of all tap water samples collected for the water system
   * @return CU90
   */
  @javax.annotation.Nonnull
  public String getCU90() {
    return CU90;
  }

  public void setCU90(String CU90) {
    this.CU90 = CU90;
  }


  public Dfr071 cu90Dates(String cu90Dates) {
    this.cu90Dates = cu90Dates;
    return this;
  }

  /**
   * The dates during which tap water samples were collected.
   * @return cu90Dates
   */
  @javax.annotation.Nonnull
  public String getCu90Dates() {
    return cu90Dates;
  }

  public void setCu90Dates(String cu90Dates) {
    this.cu90Dates = cu90Dates;
  }


  public Dfr071 cu90Units(String cu90Units) {
    this.cu90Units = cu90Units;
    return this;
  }

  /**
   * The measurement units.
   * @return cu90Units
   */
  @javax.annotation.Nonnull
  public String getCu90Units() {
    return cu90Units;
  }

  public void setCu90Units(String cu90Units) {
    this.cu90Units = cu90Units;
  }


  public Dfr071 cu90Value(String cu90Value) {
    this.cu90Value = cu90Value;
    return this;
  }

  /**
   * The value of the concentration of copper representing the 90th percentile level of all tap water samples collected for the water system
   * @return cu90Value
   */
  @javax.annotation.Nonnull
  public String getCu90Value() {
    return cu90Value;
  }

  public void setCu90Value(String cu90Value) {
    this.cu90Value = cu90Value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr071 dfr071 = (Dfr071) o;
    return Objects.equals(this.CU90, dfr071.CU90) &&
        Objects.equals(this.cu90Dates, dfr071.cu90Dates) &&
        Objects.equals(this.cu90Units, dfr071.cu90Units) &&
        Objects.equals(this.cu90Value, dfr071.cu90Value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CU90, cu90Dates, cu90Units, cu90Value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr071 {\n");
    sb.append("    CU90: ").append(toIndentedString(CU90)).append("\n");
    sb.append("    cu90Dates: ").append(toIndentedString(cu90Dates)).append("\n");
    sb.append("    cu90Units: ").append(toIndentedString(cu90Units)).append("\n");
    sb.append("    cu90Value: ").append(toIndentedString(cu90Value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CU90");
    openapiFields.add("CU90Dates");
    openapiFields.add("CU90Units");
    openapiFields.add("CU90Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CU90");
    openapiRequiredFields.add("CU90Dates");
    openapiRequiredFields.add("CU90Units");
    openapiRequiredFields.add("CU90Value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr071
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr071.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr071 is not found in the empty JSON string", Dfr071.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr071.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr071` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr071.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CU90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CU90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CU90").toString()));
      }
      if (!jsonObj.get("CU90Dates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CU90Dates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CU90Dates").toString()));
      }
      if (!jsonObj.get("CU90Units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CU90Units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CU90Units").toString()));
      }
      if (!jsonObj.get("CU90Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CU90Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CU90Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr071.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr071' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr071> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr071.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr071>() {
           @Override
           public void write(JsonWriter out, Dfr071 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr071 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr071 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr071
   * @throws IOException if the JSON string is invalid with respect to Dfr071
   */
  public static Dfr071 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr071.class);
  }

  /**
   * Convert an instance of Dfr071 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

