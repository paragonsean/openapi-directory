/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sources Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr112 {
  public static final String SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG = "AttainsAquaticLifeUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG)
  private String attainsAquaticLifeUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_AU_CATEGORY = "AttainsAuCategory";
  @SerializedName(SERIALIZED_NAME_ATTAINS_AU_CATEGORY)
  private String attainsAuCategory;

  public static final String SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS = "AttainsCauseGroups";
  @SerializedName(SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS)
  private String attainsCauseGroups;

  public static final String SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG = "AttainsExceptnlUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG)
  private String attainsExceptnlUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG = "AttainsRecreationUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG)
  private String attainsRecreationUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_SHELLFISH_USE_FLG = "AttainsShellfishUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_SHELLFISH_USE_FLG)
  private String attainsShellfishUseFlg;

  public static final String SERIALIZED_NAME_BEACH_CLOSE_LAST2YRS_FLG = "BeachCloseLast2yrsFlg";
  @SerializedName(SERIALIZED_NAME_BEACH_CLOSE_LAST2YRS_FLG)
  private String beachCloseLast2yrsFlg;

  public static final String SERIALIZED_NAME_BEACH_CLOSE_LAST_YEAR_FLG = "BeachCloseLastYearFlg";
  @SerializedName(SERIALIZED_NAME_BEACH_CLOSE_LAST_YEAR_FLG)
  private String beachCloseLastYearFlg;

  public static final String SERIALIZED_NAME_C_S_S = "CSS";
  @SerializedName(SERIALIZED_NAME_C_S_S)
  private String CSS;

  public static final String SERIALIZED_NAME_CW_P_CSO_OUTFALLS = "CWPCsoOutfalls";
  @SerializedName(SERIALIZED_NAME_CW_P_CSO_OUTFALLS)
  private String cwPCsoOutfalls;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_ESA_AQUATIC_SPECIES_FLG = "EsaAquaticSpeciesFlg";
  @SerializedName(SERIALIZED_NAME_ESA_AQUATIC_SPECIES_FLG)
  private String esaAquaticSpeciesFlg;

  public static final String SERIALIZED_NAME_H_U_C8 = "HUC8";
  @SerializedName(SERIALIZED_NAME_H_U_C8)
  private String HUC8;

  public static final String SERIALIZED_NAME_HU_C8_NAME = "HUC8Name";
  @SerializedName(SERIALIZED_NAME_HU_C8_NAME)
  private String huC8Name;

  public static final String SERIALIZED_NAME_IMPAIRED_WATERS = "ImpairedWaters";
  @SerializedName(SERIALIZED_NAME_IMPAIRED_WATERS)
  private String impairedWaters;

  public static final String SERIALIZED_NAME_RAD_GNIS_NAME = "RadGnisName";
  @SerializedName(SERIALIZED_NAME_RAD_GNIS_NAME)
  private String radGnisName;

  public static final String SERIALIZED_NAME_RAD_REACHCODE = "RadReachcode";
  @SerializedName(SERIALIZED_NAME_RAD_REACHCODE)
  private String radReachcode;

  public static final String SERIALIZED_NAME_RECEIVING_WATERS = "ReceivingWaters";
  @SerializedName(SERIALIZED_NAME_RECEIVING_WATERS)
  private String receivingWaters;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_W_B_D12 = "WBD12";
  @SerializedName(SERIALIZED_NAME_W_B_D12)
  private String WBD12;

  public static final String SERIALIZED_NAME_WB_D12_NAME = "WBD12Name";
  @SerializedName(SERIALIZED_NAME_WB_D12_NAME)
  private String wbD12Name;

  public Dfr112() {
  }

  public Dfr112 attainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
   * @return attainsAquaticLifeUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsAquaticLifeUseFlg() {
    return attainsAquaticLifeUseFlg;
  }

  public void setAttainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
  }


  public Dfr112 attainsAuCategory(String attainsAuCategory) {
    this.attainsAuCategory = attainsAuCategory;
    return this;
  }

  /**
   * The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  &#x3D; Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  &#x3D; Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a &#x3D; TMDL completed. A TMDL has been completed, but impairment still exists. - 4b &#x3D; TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c &#x3D; Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
   * @return attainsAuCategory
   */
  @javax.annotation.Nonnull
  public String getAttainsAuCategory() {
    return attainsAuCategory;
  }

  public void setAttainsAuCategory(String attainsAuCategory) {
    this.attainsAuCategory = attainsAuCategory;
  }


  public Dfr112 attainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
    return this;
  }

  /**
   * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
   * @return attainsCauseGroups
   */
  @javax.annotation.Nonnull
  public String getAttainsCauseGroups() {
    return attainsCauseGroups;
  }

  public void setAttainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
  }


  public Dfr112 attainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
   * @return attainsExceptnlUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsExceptnlUseFlg() {
    return attainsExceptnlUseFlg;
  }

  public void setAttainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
  }


  public Dfr112 attainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
   * @return attainsRecreationUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsRecreationUseFlg() {
    return attainsRecreationUseFlg;
  }

  public void setAttainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
  }


  public Dfr112 attainsShellfishUseFlg(String attainsShellfishUseFlg) {
    this.attainsShellfishUseFlg = attainsShellfishUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
   * @return attainsShellfishUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsShellfishUseFlg() {
    return attainsShellfishUseFlg;
  }

  public void setAttainsShellfishUseFlg(String attainsShellfishUseFlg) {
    this.attainsShellfishUseFlg = attainsShellfishUseFlg;
  }


  public Dfr112 beachCloseLast2yrsFlg(String beachCloseLast2yrsFlg) {
    this.beachCloseLast2yrsFlg = beachCloseLast2yrsFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located on or near a waterbody with a beach closure within the last two years.
   * @return beachCloseLast2yrsFlg
   */
  @javax.annotation.Nonnull
  public String getBeachCloseLast2yrsFlg() {
    return beachCloseLast2yrsFlg;
  }

  public void setBeachCloseLast2yrsFlg(String beachCloseLast2yrsFlg) {
    this.beachCloseLast2yrsFlg = beachCloseLast2yrsFlg;
  }


  public Dfr112 beachCloseLastYearFlg(String beachCloseLastYearFlg) {
    this.beachCloseLastYearFlg = beachCloseLastYearFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located on or near a waterbody with a beach closure within the last year.
   * @return beachCloseLastYearFlg
   */
  @javax.annotation.Nonnull
  public String getBeachCloseLastYearFlg() {
    return beachCloseLastYearFlg;
  }

  public void setBeachCloseLastYearFlg(String beachCloseLastYearFlg) {
    this.beachCloseLastYearFlg = beachCloseLastYearFlg;
  }


  public Dfr112 CSS(String CSS) {
    this.CSS = CSS;
    return this;
  }

  /**
   * Indicates whether or not the facility has a combined sewer system.
   * @return CSS
   */
  @javax.annotation.Nonnull
  public String getCSS() {
    return CSS;
  }

  public void setCSS(String CSS) {
    this.CSS = CSS;
  }


  public Dfr112 cwPCsoOutfalls(String cwPCsoOutfalls) {
    this.cwPCsoOutfalls = cwPCsoOutfalls;
    return this;
  }

  /**
   * The number of discharge outfalls at points prior to the treatment plant.
   * @return cwPCsoOutfalls
   */
  @javax.annotation.Nonnull
  public String getCwPCsoOutfalls() {
    return cwPCsoOutfalls;
  }

  public void setCwPCsoOutfalls(String cwPCsoOutfalls) {
    this.cwPCsoOutfalls = cwPCsoOutfalls;
  }


  public Dfr112 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Dfr112 esaAquaticSpeciesFlg(String esaAquaticSpeciesFlg) {
    this.esaAquaticSpeciesFlg = esaAquaticSpeciesFlg;
    return this;
  }

  /**
   * Indicates if the watershed contains Endangered Species Act (ESA)-listed aquatic species.
   * @return esaAquaticSpeciesFlg
   */
  @javax.annotation.Nonnull
  public String getEsaAquaticSpeciesFlg() {
    return esaAquaticSpeciesFlg;
  }

  public void setEsaAquaticSpeciesFlg(String esaAquaticSpeciesFlg) {
    this.esaAquaticSpeciesFlg = esaAquaticSpeciesFlg;
  }


  public Dfr112 HUC8(String HUC8) {
    this.HUC8 = HUC8;
    return this;
  }

  /**
   * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides.�Cataloguing unit (fourth-level, 8-digit HUC)
   * @return HUC8
   */
  @javax.annotation.Nonnull
  public String getHUC8() {
    return HUC8;
  }

  public void setHUC8(String HUC8) {
    this.HUC8 = HUC8;
  }


  public Dfr112 huC8Name(String huC8Name) {
    this.huC8Name = huC8Name;
    return this;
  }

  /**
   * The name of the watershed in which the facility resides.
   * @return huC8Name
   */
  @javax.annotation.Nonnull
  public String getHuC8Name() {
    return huC8Name;
  }

  public void setHuC8Name(String huC8Name) {
    this.huC8Name = huC8Name;
  }


  public Dfr112 impairedWaters(String impairedWaters) {
    this.impairedWaters = impairedWaters;
    return this;
  }

  /**
   * Field indicates if the permit discharges directly into category 4 or 5 impaired waters.
   * @return impairedWaters
   */
  @javax.annotation.Nonnull
  public String getImpairedWaters() {
    return impairedWaters;
  }

  public void setImpairedWaters(String impairedWaters) {
    this.impairedWaters = impairedWaters;
  }


  public Dfr112 radGnisName(String radGnisName) {
    this.radGnisName = radGnisName;
    return this;
  }

  /**
   * The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
   * @return radGnisName
   */
  @javax.annotation.Nonnull
  public String getRadGnisName() {
    return radGnisName;
  }

  public void setRadGnisName(String radGnisName) {
    this.radGnisName = radGnisName;
  }


  public Dfr112 radReachcode(String radReachcode) {
    this.radReachcode = radReachcode;
    return this;
  }

  /**
   * A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
   * @return radReachcode
   */
  @javax.annotation.Nonnull
  public String getRadReachcode() {
    return radReachcode;
  }

  public void setRadReachcode(String radReachcode) {
    this.radReachcode = radReachcode;
  }


  public Dfr112 receivingWaters(String receivingWaters) {
    this.receivingWaters = receivingWaters;
    return this;
  }

  /**
   * The name of the river, lake, stream, or estuary that receives runoff from the facility.
   * @return receivingWaters
   */
  @javax.annotation.Nonnull
  public String getReceivingWaters() {
    return receivingWaters;
  }

  public void setReceivingWaters(String receivingWaters) {
    this.receivingWaters = receivingWaters;
  }


  public Dfr112 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr112 WBD12(String WBD12) {
    this.WBD12 = WBD12;
    return this;
  }

  /**
   * The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
   * @return WBD12
   */
  @javax.annotation.Nonnull
  public String getWBD12() {
    return WBD12;
  }

  public void setWBD12(String WBD12) {
    this.WBD12 = WBD12;
  }


  public Dfr112 wbD12Name(String wbD12Name) {
    this.wbD12Name = wbD12Name;
    return this;
  }

  /**
   * The name of the watershed in which the facility resides.
   * @return wbD12Name
   */
  @javax.annotation.Nonnull
  public String getWbD12Name() {
    return wbD12Name;
  }

  public void setWbD12Name(String wbD12Name) {
    this.wbD12Name = wbD12Name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr112 dfr112 = (Dfr112) o;
    return Objects.equals(this.attainsAquaticLifeUseFlg, dfr112.attainsAquaticLifeUseFlg) &&
        Objects.equals(this.attainsAuCategory, dfr112.attainsAuCategory) &&
        Objects.equals(this.attainsCauseGroups, dfr112.attainsCauseGroups) &&
        Objects.equals(this.attainsExceptnlUseFlg, dfr112.attainsExceptnlUseFlg) &&
        Objects.equals(this.attainsRecreationUseFlg, dfr112.attainsRecreationUseFlg) &&
        Objects.equals(this.attainsShellfishUseFlg, dfr112.attainsShellfishUseFlg) &&
        Objects.equals(this.beachCloseLast2yrsFlg, dfr112.beachCloseLast2yrsFlg) &&
        Objects.equals(this.beachCloseLastYearFlg, dfr112.beachCloseLastYearFlg) &&
        Objects.equals(this.CSS, dfr112.CSS) &&
        Objects.equals(this.cwPCsoOutfalls, dfr112.cwPCsoOutfalls) &&
        Objects.equals(this.epASystem, dfr112.epASystem) &&
        Objects.equals(this.esaAquaticSpeciesFlg, dfr112.esaAquaticSpeciesFlg) &&
        Objects.equals(this.HUC8, dfr112.HUC8) &&
        Objects.equals(this.huC8Name, dfr112.huC8Name) &&
        Objects.equals(this.impairedWaters, dfr112.impairedWaters) &&
        Objects.equals(this.radGnisName, dfr112.radGnisName) &&
        Objects.equals(this.radReachcode, dfr112.radReachcode) &&
        Objects.equals(this.receivingWaters, dfr112.receivingWaters) &&
        Objects.equals(this.sourceID, dfr112.sourceID) &&
        Objects.equals(this.WBD12, dfr112.WBD12) &&
        Objects.equals(this.wbD12Name, dfr112.wbD12Name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attainsAquaticLifeUseFlg, attainsAuCategory, attainsCauseGroups, attainsExceptnlUseFlg, attainsRecreationUseFlg, attainsShellfishUseFlg, beachCloseLast2yrsFlg, beachCloseLastYearFlg, CSS, cwPCsoOutfalls, epASystem, esaAquaticSpeciesFlg, HUC8, huC8Name, impairedWaters, radGnisName, radReachcode, receivingWaters, sourceID, WBD12, wbD12Name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr112 {\n");
    sb.append("    attainsAquaticLifeUseFlg: ").append(toIndentedString(attainsAquaticLifeUseFlg)).append("\n");
    sb.append("    attainsAuCategory: ").append(toIndentedString(attainsAuCategory)).append("\n");
    sb.append("    attainsCauseGroups: ").append(toIndentedString(attainsCauseGroups)).append("\n");
    sb.append("    attainsExceptnlUseFlg: ").append(toIndentedString(attainsExceptnlUseFlg)).append("\n");
    sb.append("    attainsRecreationUseFlg: ").append(toIndentedString(attainsRecreationUseFlg)).append("\n");
    sb.append("    attainsShellfishUseFlg: ").append(toIndentedString(attainsShellfishUseFlg)).append("\n");
    sb.append("    beachCloseLast2yrsFlg: ").append(toIndentedString(beachCloseLast2yrsFlg)).append("\n");
    sb.append("    beachCloseLastYearFlg: ").append(toIndentedString(beachCloseLastYearFlg)).append("\n");
    sb.append("    CSS: ").append(toIndentedString(CSS)).append("\n");
    sb.append("    cwPCsoOutfalls: ").append(toIndentedString(cwPCsoOutfalls)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    esaAquaticSpeciesFlg: ").append(toIndentedString(esaAquaticSpeciesFlg)).append("\n");
    sb.append("    HUC8: ").append(toIndentedString(HUC8)).append("\n");
    sb.append("    huC8Name: ").append(toIndentedString(huC8Name)).append("\n");
    sb.append("    impairedWaters: ").append(toIndentedString(impairedWaters)).append("\n");
    sb.append("    radGnisName: ").append(toIndentedString(radGnisName)).append("\n");
    sb.append("    radReachcode: ").append(toIndentedString(radReachcode)).append("\n");
    sb.append("    receivingWaters: ").append(toIndentedString(receivingWaters)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    WBD12: ").append(toIndentedString(WBD12)).append("\n");
    sb.append("    wbD12Name: ").append(toIndentedString(wbD12Name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttainsAquaticLifeUseFlg");
    openapiFields.add("AttainsAuCategory");
    openapiFields.add("AttainsCauseGroups");
    openapiFields.add("AttainsExceptnlUseFlg");
    openapiFields.add("AttainsRecreationUseFlg");
    openapiFields.add("AttainsShellfishUseFlg");
    openapiFields.add("BeachCloseLast2yrsFlg");
    openapiFields.add("BeachCloseLastYearFlg");
    openapiFields.add("CSS");
    openapiFields.add("CWPCsoOutfalls");
    openapiFields.add("EPASystem");
    openapiFields.add("EsaAquaticSpeciesFlg");
    openapiFields.add("HUC8");
    openapiFields.add("HUC8Name");
    openapiFields.add("ImpairedWaters");
    openapiFields.add("RadGnisName");
    openapiFields.add("RadReachcode");
    openapiFields.add("ReceivingWaters");
    openapiFields.add("SourceID");
    openapiFields.add("WBD12");
    openapiFields.add("WBD12Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AttainsAquaticLifeUseFlg");
    openapiRequiredFields.add("AttainsAuCategory");
    openapiRequiredFields.add("AttainsCauseGroups");
    openapiRequiredFields.add("AttainsExceptnlUseFlg");
    openapiRequiredFields.add("AttainsRecreationUseFlg");
    openapiRequiredFields.add("AttainsShellfishUseFlg");
    openapiRequiredFields.add("BeachCloseLast2yrsFlg");
    openapiRequiredFields.add("BeachCloseLastYearFlg");
    openapiRequiredFields.add("CSS");
    openapiRequiredFields.add("CWPCsoOutfalls");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("EsaAquaticSpeciesFlg");
    openapiRequiredFields.add("HUC8");
    openapiRequiredFields.add("HUC8Name");
    openapiRequiredFields.add("ImpairedWaters");
    openapiRequiredFields.add("RadGnisName");
    openapiRequiredFields.add("RadReachcode");
    openapiRequiredFields.add("ReceivingWaters");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("WBD12");
    openapiRequiredFields.add("WBD12Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr112
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr112.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr112 is not found in the empty JSON string", Dfr112.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr112.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr112` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr112.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AttainsAquaticLifeUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsAquaticLifeUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsAquaticLifeUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsAuCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsAuCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsAuCategory").toString()));
      }
      if (!jsonObj.get("AttainsCauseGroups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsCauseGroups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsCauseGroups").toString()));
      }
      if (!jsonObj.get("AttainsExceptnlUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsExceptnlUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsExceptnlUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsRecreationUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsRecreationUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsRecreationUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsShellfishUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsShellfishUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsShellfishUseFlg").toString()));
      }
      if (!jsonObj.get("BeachCloseLast2yrsFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BeachCloseLast2yrsFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BeachCloseLast2yrsFlg").toString()));
      }
      if (!jsonObj.get("BeachCloseLastYearFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BeachCloseLastYearFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BeachCloseLastYearFlg").toString()));
      }
      if (!jsonObj.get("CSS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CSS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CSS").toString()));
      }
      if (!jsonObj.get("CWPCsoOutfalls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCsoOutfalls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCsoOutfalls").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("EsaAquaticSpeciesFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EsaAquaticSpeciesFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EsaAquaticSpeciesFlg").toString()));
      }
      if (!jsonObj.get("HUC8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HUC8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HUC8").toString()));
      }
      if (!jsonObj.get("HUC8Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HUC8Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HUC8Name").toString()));
      }
      if (!jsonObj.get("ImpairedWaters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImpairedWaters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImpairedWaters").toString()));
      }
      if (!jsonObj.get("RadGnisName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadGnisName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadGnisName").toString()));
      }
      if (!jsonObj.get("RadReachcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadReachcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadReachcode").toString()));
      }
      if (!jsonObj.get("ReceivingWaters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceivingWaters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceivingWaters").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("WBD12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WBD12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WBD12").toString()));
      }
      if (!jsonObj.get("WBD12Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WBD12Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WBD12Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr112.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr112' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr112> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr112.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr112>() {
           @Override
           public void write(JsonWriter out, Dfr112 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr112 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr112 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr112
   * @throws IOException if the JSON string is invalid with respect to Dfr112
   */
  public static Dfr112 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr112.class);
  }

  /**
   * Convert an instance of Dfr112 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

