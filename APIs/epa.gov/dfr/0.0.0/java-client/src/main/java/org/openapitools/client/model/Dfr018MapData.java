/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Map Data Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018MapData {
  public static final String SERIALIZED_NAME_I_C_O_N = "ICON";
  @SerializedName(SERIALIZED_NAME_I_C_O_N)
  private String ICON;

  public static final String SERIALIZED_NAME_L_A_T = "LAT";
  @SerializedName(SERIALIZED_NAME_L_A_T)
  private String LAT;

  public static final String SERIALIZED_NAME_L_O_N = "LON";
  @SerializedName(SERIALIZED_NAME_L_O_N)
  private String LON;

  public static final String SERIALIZED_NAME_N_A_M_E = "NAME";
  @SerializedName(SERIALIZED_NAME_N_A_M_E)
  private String NAME;

  public static final String SERIALIZED_NAME_P_U_V = "PUV";
  @SerializedName(SERIALIZED_NAME_P_U_V)
  private String PUV;

  public static final String SERIALIZED_NAME_T_Y_P_E = "TYPE";
  @SerializedName(SERIALIZED_NAME_T_Y_P_E)
  private String TYPE;

  public Dfr018MapData() {
  }

  public Dfr018MapData ICON(String ICON) {
    this.ICON = ICON;
    return this;
  }

  /**
   * Name of each individual icon file within the URL base
   * @return ICON
   */
  @javax.annotation.Nonnull
  public String getICON() {
    return ICON;
  }

  public void setICON(String ICON) {
    this.ICON = ICON;
  }


  public Dfr018MapData LAT(String LAT) {
    this.LAT = LAT;
    return this;
  }

  /**
   * The latitude of the facility in degrees, to four decimal places
   * @return LAT
   */
  @javax.annotation.Nonnull
  public String getLAT() {
    return LAT;
  }

  public void setLAT(String LAT) {
    this.LAT = LAT;
  }


  public Dfr018MapData LON(String LON) {
    this.LON = LON;
    return this;
  }

  /**
   * The longitude of the facility in degrees, to four decimal places
   * @return LON
   */
  @javax.annotation.Nonnull
  public String getLON() {
    return LON;
  }

  public void setLON(String LON) {
    this.LON = LON;
  }


  public Dfr018MapData NAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  /**
   * For DFR, this is the Facility name. The name corresponds to the TYPE value
   * @return NAME
   */
  @javax.annotation.Nonnull
  public String getNAME() {
    return NAME;
  }

  public void setNAME(String NAME) {
    this.NAME = NAME;
  }


  public Dfr018MapData PUV(String PUV) {
    this.PUV = PUV;
    return this;
  }

  /**
   * Pop up value. Combine with PopUpBaseURL to give the popup for the facility
   * @return PUV
   */
  @javax.annotation.Nonnull
  public String getPUV() {
    return PUV;
  }

  public void setPUV(String PUV) {
    this.PUV = PUV;
  }


  public Dfr018MapData TYPE(String TYPE) {
    this.TYPE = TYPE;
    return this;
  }

  /**
   * For DFR, this is always facility
   * @return TYPE
   */
  @javax.annotation.Nonnull
  public String getTYPE() {
    return TYPE;
  }

  public void setTYPE(String TYPE) {
    this.TYPE = TYPE;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018MapData dfr018MapData = (Dfr018MapData) o;
    return Objects.equals(this.ICON, dfr018MapData.ICON) &&
        Objects.equals(this.LAT, dfr018MapData.LAT) &&
        Objects.equals(this.LON, dfr018MapData.LON) &&
        Objects.equals(this.NAME, dfr018MapData.NAME) &&
        Objects.equals(this.PUV, dfr018MapData.PUV) &&
        Objects.equals(this.TYPE, dfr018MapData.TYPE);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ICON, LAT, LON, NAME, PUV, TYPE);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018MapData {\n");
    sb.append("    ICON: ").append(toIndentedString(ICON)).append("\n");
    sb.append("    LAT: ").append(toIndentedString(LAT)).append("\n");
    sb.append("    LON: ").append(toIndentedString(LON)).append("\n");
    sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
    sb.append("    PUV: ").append(toIndentedString(PUV)).append("\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ICON");
    openapiFields.add("LAT");
    openapiFields.add("LON");
    openapiFields.add("NAME");
    openapiFields.add("PUV");
    openapiFields.add("TYPE");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ICON");
    openapiRequiredFields.add("LAT");
    openapiRequiredFields.add("LON");
    openapiRequiredFields.add("NAME");
    openapiRequiredFields.add("PUV");
    openapiRequiredFields.add("TYPE");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018MapData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018MapData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018MapData is not found in the empty JSON string", Dfr018MapData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018MapData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018MapData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr018MapData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ICON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICON").toString()));
      }
      if (!jsonObj.get("LAT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LAT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LAT").toString()));
      }
      if (!jsonObj.get("LON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LON").toString()));
      }
      if (!jsonObj.get("NAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAME").toString()));
      }
      if (!jsonObj.get("PUV").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PUV` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PUV").toString()));
      }
      if (!jsonObj.get("TYPE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TYPE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TYPE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018MapData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018MapData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018MapData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018MapData.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018MapData>() {
           @Override
           public void write(JsonWriter out, Dfr018MapData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018MapData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018MapData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018MapData
   * @throws IOException if the JSON string is invalid with respect to Dfr018MapData
   */
  public static Dfr018MapData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018MapData.class);
  }

  /**
   * Convert an instance of Dfr018MapData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

