/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CAED Documents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018CAEDDocuments {
  public static final String SERIALIZED_NAME_DOCUMENT_LINK = "DocumentLink";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LINK)
  private String documentLink;

  public static final String SERIALIZED_NAME_EP_A_PROGRAM = "EPAProgram";
  @SerializedName(SERIALIZED_NAME_EP_A_PROGRAM)
  private String epAProgram;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "FacilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  private String facilityName;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "PublishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private String publishDate;

  public static final String SERIALIZED_NAME_REGISTRY_ID = "RegistryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public Dfr018CAEDDocuments() {
  }

  public Dfr018CAEDDocuments documentLink(String documentLink) {
    this.documentLink = documentLink;
    return this;
  }

  /**
   * URLS for documents that EPA has colleted that are related to this Case.
   * @return documentLink
   */
  @javax.annotation.Nullable
  public String getDocumentLink() {
    return documentLink;
  }

  public void setDocumentLink(String documentLink) {
    this.documentLink = documentLink;
  }


  public Dfr018CAEDDocuments epAProgram(String epAProgram) {
    this.epAProgram = epAProgram;
    return this;
  }

  /**
   * The EPA Program associated with the Document URL
   * @return epAProgram
   */
  @javax.annotation.Nullable
  public String getEpAProgram() {
    return epAProgram;
  }

  public void setEpAProgram(String epAProgram) {
    this.epAProgram = epAProgram;
  }


  public Dfr018CAEDDocuments facilityName(String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * The name of the facility.
   * @return facilityName
   */
  @javax.annotation.Nullable
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(String facilityName) {
    this.facilityName = facilityName;
  }


  public Dfr018CAEDDocuments publishDate(String publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * The date the document was published.
   * @return publishDate
   */
  @javax.annotation.Nullable
  public String getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(String publishDate) {
    this.publishDate = publishDate;
  }


  public Dfr018CAEDDocuments registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * 12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018CAEDDocuments dfr018CAEDDocuments = (Dfr018CAEDDocuments) o;
    return Objects.equals(this.documentLink, dfr018CAEDDocuments.documentLink) &&
        Objects.equals(this.epAProgram, dfr018CAEDDocuments.epAProgram) &&
        Objects.equals(this.facilityName, dfr018CAEDDocuments.facilityName) &&
        Objects.equals(this.publishDate, dfr018CAEDDocuments.publishDate) &&
        Objects.equals(this.registryId, dfr018CAEDDocuments.registryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentLink, epAProgram, facilityName, publishDate, registryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018CAEDDocuments {\n");
    sb.append("    documentLink: ").append(toIndentedString(documentLink)).append("\n");
    sb.append("    epAProgram: ").append(toIndentedString(epAProgram)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentLink");
    openapiFields.add("EPAProgram");
    openapiFields.add("FacilityName");
    openapiFields.add("PublishDate");
    openapiFields.add("RegistryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018CAEDDocuments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018CAEDDocuments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018CAEDDocuments is not found in the empty JSON string", Dfr018CAEDDocuments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018CAEDDocuments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018CAEDDocuments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DocumentLink") != null && !jsonObj.get("DocumentLink").isJsonNull()) && !jsonObj.get("DocumentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentLink").toString()));
      }
      if ((jsonObj.get("EPAProgram") != null && !jsonObj.get("EPAProgram").isJsonNull()) && !jsonObj.get("EPAProgram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPAProgram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPAProgram").toString()));
      }
      if ((jsonObj.get("FacilityName") != null && !jsonObj.get("FacilityName").isJsonNull()) && !jsonObj.get("FacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityName").toString()));
      }
      if ((jsonObj.get("PublishDate") != null && !jsonObj.get("PublishDate").isJsonNull()) && !jsonObj.get("PublishDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublishDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublishDate").toString()));
      }
      if ((jsonObj.get("RegistryId") != null && !jsonObj.get("RegistryId").isJsonNull()) && !jsonObj.get("RegistryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018CAEDDocuments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018CAEDDocuments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018CAEDDocuments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018CAEDDocuments.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018CAEDDocuments>() {
           @Override
           public void write(JsonWriter out, Dfr018CAEDDocuments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018CAEDDocuments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018CAEDDocuments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018CAEDDocuments
   * @throws IOException if the JSON string is invalid with respect to Dfr018CAEDDocuments
   */
  public static Dfr018CAEDDocuments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018CAEDDocuments.class);
  }

  /**
   * Convert an instance of Dfr018CAEDDocuments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

