/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chemicals Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr103 {
  public static final String SERIALIZED_NAME_CHEMICAL_NAME = "ChemicalName";
  @SerializedName(SERIALIZED_NAME_CHEMICAL_NAME)
  private String chemicalName;

  public static final String SERIALIZED_NAME_YEAR1_POUNDS = "Year1Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR1_POUNDS)
  private String year1Pounds;

  public static final String SERIALIZED_NAME_YEAR2_POUNDS = "Year2Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR2_POUNDS)
  private String year2Pounds;

  public static final String SERIALIZED_NAME_YEAR3_POUNDS = "Year3Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR3_POUNDS)
  private String year3Pounds;

  public static final String SERIALIZED_NAME_YEAR4_POUNDS = "Year4Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR4_POUNDS)
  private String year4Pounds;

  public static final String SERIALIZED_NAME_YEAR5_POUNDS = "Year5Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR5_POUNDS)
  private String year5Pounds;

  public static final String SERIALIZED_NAME_YEAR6_POUNDS = "Year6Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR6_POUNDS)
  private String year6Pounds;

  public static final String SERIALIZED_NAME_YEAR7_POUNDS = "Year7Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR7_POUNDS)
  private String year7Pounds;

  public static final String SERIALIZED_NAME_YEAR8_POUNDS = "Year8Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR8_POUNDS)
  private String year8Pounds;

  public static final String SERIALIZED_NAME_YEAR9_POUNDS = "Year9Pounds";
  @SerializedName(SERIALIZED_NAME_YEAR9_POUNDS)
  private String year9Pounds;

  public Dfr103() {
  }

  public Dfr103 chemicalName(String chemicalName) {
    this.chemicalName = chemicalName;
    return this;
  }

  /**
   * The TRI chemical to which the data in this row applies.
   * @return chemicalName
   */
  @javax.annotation.Nonnull
  public String getChemicalName() {
    return chemicalName;
  }

  public void setChemicalName(String chemicalName) {
    this.chemicalName = chemicalName;
  }


  public Dfr103 year1Pounds(String year1Pounds) {
    this.year1Pounds = year1Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year1Pounds
   */
  @javax.annotation.Nonnull
  public String getYear1Pounds() {
    return year1Pounds;
  }

  public void setYear1Pounds(String year1Pounds) {
    this.year1Pounds = year1Pounds;
  }


  public Dfr103 year2Pounds(String year2Pounds) {
    this.year2Pounds = year2Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year2Pounds
   */
  @javax.annotation.Nonnull
  public String getYear2Pounds() {
    return year2Pounds;
  }

  public void setYear2Pounds(String year2Pounds) {
    this.year2Pounds = year2Pounds;
  }


  public Dfr103 year3Pounds(String year3Pounds) {
    this.year3Pounds = year3Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year3Pounds
   */
  @javax.annotation.Nonnull
  public String getYear3Pounds() {
    return year3Pounds;
  }

  public void setYear3Pounds(String year3Pounds) {
    this.year3Pounds = year3Pounds;
  }


  public Dfr103 year4Pounds(String year4Pounds) {
    this.year4Pounds = year4Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year4Pounds
   */
  @javax.annotation.Nonnull
  public String getYear4Pounds() {
    return year4Pounds;
  }

  public void setYear4Pounds(String year4Pounds) {
    this.year4Pounds = year4Pounds;
  }


  public Dfr103 year5Pounds(String year5Pounds) {
    this.year5Pounds = year5Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year5Pounds
   */
  @javax.annotation.Nonnull
  public String getYear5Pounds() {
    return year5Pounds;
  }

  public void setYear5Pounds(String year5Pounds) {
    this.year5Pounds = year5Pounds;
  }


  public Dfr103 year6Pounds(String year6Pounds) {
    this.year6Pounds = year6Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year6Pounds
   */
  @javax.annotation.Nonnull
  public String getYear6Pounds() {
    return year6Pounds;
  }

  public void setYear6Pounds(String year6Pounds) {
    this.year6Pounds = year6Pounds;
  }


  public Dfr103 year7Pounds(String year7Pounds) {
    this.year7Pounds = year7Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year7Pounds
   */
  @javax.annotation.Nonnull
  public String getYear7Pounds() {
    return year7Pounds;
  }

  public void setYear7Pounds(String year7Pounds) {
    this.year7Pounds = year7Pounds;
  }


  public Dfr103 year8Pounds(String year8Pounds) {
    this.year8Pounds = year8Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year8Pounds
   */
  @javax.annotation.Nonnull
  public String getYear8Pounds() {
    return year8Pounds;
  }

  public void setYear8Pounds(String year8Pounds) {
    this.year8Pounds = year8Pounds;
  }


  public Dfr103 year9Pounds(String year9Pounds) {
    this.year9Pounds = year9Pounds;
    return this;
  }

  /**
   * The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.
   * @return year9Pounds
   */
  @javax.annotation.Nonnull
  public String getYear9Pounds() {
    return year9Pounds;
  }

  public void setYear9Pounds(String year9Pounds) {
    this.year9Pounds = year9Pounds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr103 dfr103 = (Dfr103) o;
    return Objects.equals(this.chemicalName, dfr103.chemicalName) &&
        Objects.equals(this.year1Pounds, dfr103.year1Pounds) &&
        Objects.equals(this.year2Pounds, dfr103.year2Pounds) &&
        Objects.equals(this.year3Pounds, dfr103.year3Pounds) &&
        Objects.equals(this.year4Pounds, dfr103.year4Pounds) &&
        Objects.equals(this.year5Pounds, dfr103.year5Pounds) &&
        Objects.equals(this.year6Pounds, dfr103.year6Pounds) &&
        Objects.equals(this.year7Pounds, dfr103.year7Pounds) &&
        Objects.equals(this.year8Pounds, dfr103.year8Pounds) &&
        Objects.equals(this.year9Pounds, dfr103.year9Pounds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chemicalName, year1Pounds, year2Pounds, year3Pounds, year4Pounds, year5Pounds, year6Pounds, year7Pounds, year8Pounds, year9Pounds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr103 {\n");
    sb.append("    chemicalName: ").append(toIndentedString(chemicalName)).append("\n");
    sb.append("    year1Pounds: ").append(toIndentedString(year1Pounds)).append("\n");
    sb.append("    year2Pounds: ").append(toIndentedString(year2Pounds)).append("\n");
    sb.append("    year3Pounds: ").append(toIndentedString(year3Pounds)).append("\n");
    sb.append("    year4Pounds: ").append(toIndentedString(year4Pounds)).append("\n");
    sb.append("    year5Pounds: ").append(toIndentedString(year5Pounds)).append("\n");
    sb.append("    year6Pounds: ").append(toIndentedString(year6Pounds)).append("\n");
    sb.append("    year7Pounds: ").append(toIndentedString(year7Pounds)).append("\n");
    sb.append("    year8Pounds: ").append(toIndentedString(year8Pounds)).append("\n");
    sb.append("    year9Pounds: ").append(toIndentedString(year9Pounds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChemicalName");
    openapiFields.add("Year1Pounds");
    openapiFields.add("Year2Pounds");
    openapiFields.add("Year3Pounds");
    openapiFields.add("Year4Pounds");
    openapiFields.add("Year5Pounds");
    openapiFields.add("Year6Pounds");
    openapiFields.add("Year7Pounds");
    openapiFields.add("Year8Pounds");
    openapiFields.add("Year9Pounds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChemicalName");
    openapiRequiredFields.add("Year1Pounds");
    openapiRequiredFields.add("Year2Pounds");
    openapiRequiredFields.add("Year3Pounds");
    openapiRequiredFields.add("Year4Pounds");
    openapiRequiredFields.add("Year5Pounds");
    openapiRequiredFields.add("Year6Pounds");
    openapiRequiredFields.add("Year7Pounds");
    openapiRequiredFields.add("Year8Pounds");
    openapiRequiredFields.add("Year9Pounds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr103
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr103.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr103 is not found in the empty JSON string", Dfr103.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr103.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr103` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr103.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ChemicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChemicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChemicalName").toString()));
      }
      if (!jsonObj.get("Year1Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year1Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year1Pounds").toString()));
      }
      if (!jsonObj.get("Year2Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year2Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year2Pounds").toString()));
      }
      if (!jsonObj.get("Year3Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year3Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year3Pounds").toString()));
      }
      if (!jsonObj.get("Year4Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year4Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year4Pounds").toString()));
      }
      if (!jsonObj.get("Year5Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year5Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year5Pounds").toString()));
      }
      if (!jsonObj.get("Year6Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year6Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year6Pounds").toString()));
      }
      if (!jsonObj.get("Year7Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year7Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year7Pounds").toString()));
      }
      if (!jsonObj.get("Year8Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year8Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year8Pounds").toString()));
      }
      if (!jsonObj.get("Year9Pounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year9Pounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year9Pounds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr103.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr103' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr103> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr103.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr103>() {
           @Override
           public void write(JsonWriter out, Dfr103 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr103 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr103 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr103
   * @throws IOException if the JSON string is invalid with respect to Dfr103
   */
  public static Dfr103 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr103.class);
  }

  /**
   * Convert an instance of Dfr103 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

