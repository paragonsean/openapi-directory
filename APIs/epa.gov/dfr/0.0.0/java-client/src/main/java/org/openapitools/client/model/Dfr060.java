/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Source Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr060 {
  public static final String SERIALIZED_NAME_CURRENT_AS_OF = "CurrentAsOf";
  @SerializedName(SERIALIZED_NAME_CURRENT_AS_OF)
  private String currentAsOf;

  public static final String SERIALIZED_NAME_CURRENT_S_N_C = "CurrentSNC";
  @SerializedName(SERIALIZED_NAME_CURRENT_S_N_C)
  private String currentSNC;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_QTRS_IN_N_C = "QtrsInNC";
  @SerializedName(SERIALIZED_NAME_QTRS_IN_N_C)
  private String qtrsInNC;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public Dfr060() {
  }

  public Dfr060 currentAsOf(String currentAsOf) {
    this.currentAsOf = currentAsOf;
    return this;
  }

  /**
   * The most recent date or calendar year quarter of record maintained in the data system for which the Current SNC/HPV status applies. A quarter could be any of the following 3-month periods: - January-March - April-June - July-September - October-December
   * @return currentAsOf
   */
  @javax.annotation.Nonnull
  public String getCurrentAsOf() {
    return currentAsOf;
  }

  public void setCurrentAsOf(String currentAsOf) {
    this.currentAsOf = currentAsOf;
  }


  public Dfr060 currentSNC(String currentSNC) {
    this.currentSNC = currentSNC;
    return this;
  }

  /**
   * The current Significant Noncompliance (SNC) or High Priority Violator (HPV) status for the facility during the most current quarter. SNC is used for RCRA and CWA, and HPV is used for CAA. Each program has its own specific criteria for making this determination. The value of Yes indicates the facility is in SNC or HPV for the permit or site in question and may pose a more severe level of environmental threat. The value of No indicates the permit or site is not considered in SNC or HPV. If the facility is Non-Federally Reportable within AFS or if it is classified as minor within PCS, the field reads N/A. The value of N/A in this field indicates Not Applicable because compliance data for these facilities are not required to be reported to the national program database
   * @return currentSNC
   */
  @javax.annotation.Nonnull
  public String getCurrentSNC() {
    return currentSNC;
  }

  public void setCurrentSNC(String currentSNC) {
    this.currentSNC = currentSNC;
  }


  public Dfr060 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The text description for the event that results in the permit or site being in Significant Noncompliance (SNC) or in High Priority Violation (HPV)
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Dfr060 qtrsInNC(String qtrsInNC) {
    this.qtrsInNC = qtrsInNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status
   * @return qtrsInNC
   */
  @javax.annotation.Nonnull
  public String getQtrsInNC() {
    return qtrsInNC;
  }

  public void setQtrsInNC(String qtrsInNC) {
    this.qtrsInNC = qtrsInNC;
  }


  public Dfr060 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr060 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr060 dfr060 = (Dfr060) o;
    return Objects.equals(this.currentAsOf, dfr060.currentAsOf) &&
        Objects.equals(this.currentSNC, dfr060.currentSNC) &&
        Objects.equals(this.description, dfr060.description) &&
        Objects.equals(this.qtrsInNC, dfr060.qtrsInNC) &&
        Objects.equals(this.sourceID, dfr060.sourceID) &&
        Objects.equals(this.statute, dfr060.statute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentAsOf, currentSNC, description, qtrsInNC, sourceID, statute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr060 {\n");
    sb.append("    currentAsOf: ").append(toIndentedString(currentAsOf)).append("\n");
    sb.append("    currentSNC: ").append(toIndentedString(currentSNC)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    qtrsInNC: ").append(toIndentedString(qtrsInNC)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentAsOf");
    openapiFields.add("CurrentSNC");
    openapiFields.add("Description");
    openapiFields.add("QtrsInNC");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentAsOf");
    openapiRequiredFields.add("CurrentSNC");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("QtrsInNC");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr060
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr060.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr060 is not found in the empty JSON string", Dfr060.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr060.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr060` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr060.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CurrentAsOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentAsOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentAsOf").toString()));
      }
      if (!jsonObj.get("CurrentSNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentSNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentSNC").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("QtrsInNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QtrsInNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QtrsInNC").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr060.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr060' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr060> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr060.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr060>() {
           @Override
           public void write(JsonWriter out, Dfr060 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr060 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr060 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr060
   * @throws IOException if the JSON string is invalid with respect to Dfr060
   */
  public static Dfr060 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr060.class);
  }

  /**
   * Convert an instance of Dfr060 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

