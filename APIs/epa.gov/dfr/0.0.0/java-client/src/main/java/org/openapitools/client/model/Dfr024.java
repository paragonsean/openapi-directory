/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Air Quality Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr024 {
  public static final String SERIALIZED_NAME_CARBON_MONOXIDE1971_AREA = "CarbonMonoxide1971Area";
  @SerializedName(SERIALIZED_NAME_CARBON_MONOXIDE1971_AREA)
  private String carbonMonoxide1971Area;

  public static final String SERIALIZED_NAME_LEAD1978_AREA = "Lead1978Area";
  @SerializedName(SERIALIZED_NAME_LEAD1978_AREA)
  private String lead1978Area;

  public static final String SERIALIZED_NAME_LEAD2008_AREA = "Lead2008Area";
  @SerializedName(SERIALIZED_NAME_LEAD2008_AREA)
  private String lead2008Area;

  public static final String SERIALIZED_NAME_NITROGEN_DIOXIDE1971_AREA = "NitrogenDioxide1971Area";
  @SerializedName(SERIALIZED_NAME_NITROGEN_DIOXIDE1971_AREA)
  private String nitrogenDioxide1971Area;

  public static final String SERIALIZED_NAME_OZONE8HR1997_AREA = "Ozone8hr1997Area";
  @SerializedName(SERIALIZED_NAME_OZONE8HR1997_AREA)
  private String ozone8hr1997Area;

  public static final String SERIALIZED_NAME_OZONE8HR2008_AREA = "Ozone8hr2008Area";
  @SerializedName(SERIALIZED_NAME_OZONE8HR2008_AREA)
  private String ozone8hr2008Area;

  public static final String SERIALIZED_NAME_OZONE8HR2015_AREA = "Ozone8hr2015Area";
  @SerializedName(SERIALIZED_NAME_OZONE8HR2015_AREA)
  private String ozone8hr2015Area;

  public static final String SERIALIZED_NAME_PARTICULATE_MATTER1987_AREA = "ParticulateMatter1987Area";
  @SerializedName(SERIALIZED_NAME_PARTICULATE_MATTER1987_AREA)
  private String particulateMatter1987Area;

  public static final String SERIALIZED_NAME_PARTICULATE_MATTER1997_AREA = "ParticulateMatter1997Area";
  @SerializedName(SERIALIZED_NAME_PARTICULATE_MATTER1997_AREA)
  private String particulateMatter1997Area;

  public static final String SERIALIZED_NAME_PARTICULATE_MATTER2006_AREA = "ParticulateMatter2006Area";
  @SerializedName(SERIALIZED_NAME_PARTICULATE_MATTER2006_AREA)
  private String particulateMatter2006Area;

  public static final String SERIALIZED_NAME_PARTICULATE_MATTER2012_AREA = "ParticulateMatter2012Area";
  @SerializedName(SERIALIZED_NAME_PARTICULATE_MATTER2012_AREA)
  private String particulateMatter2012Area;

  public static final String SERIALIZED_NAME_SULFUR_DIOXIDE1971_AREA = "SulfurDioxide1971Area";
  @SerializedName(SERIALIZED_NAME_SULFUR_DIOXIDE1971_AREA)
  private String sulfurDioxide1971Area;

  public static final String SERIALIZED_NAME_SULFUR_DIOXIDE2010_AREA = "SulfurDioxide2010Area";
  @SerializedName(SERIALIZED_NAME_SULFUR_DIOXIDE2010_AREA)
  private String sulfurDioxide2010Area;

  public Dfr024() {
  }

  public Dfr024 carbonMonoxide1971Area(String carbonMonoxide1971Area) {
    this.carbonMonoxide1971Area = carbonMonoxide1971Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Carbon Monoxide (1971).
   * @return carbonMonoxide1971Area
   */
  @javax.annotation.Nullable
  public String getCarbonMonoxide1971Area() {
    return carbonMonoxide1971Area;
  }

  public void setCarbonMonoxide1971Area(String carbonMonoxide1971Area) {
    this.carbonMonoxide1971Area = carbonMonoxide1971Area;
  }


  public Dfr024 lead1978Area(String lead1978Area) {
    this.lead1978Area = lead1978Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Lead (1978).
   * @return lead1978Area
   */
  @javax.annotation.Nullable
  public String getLead1978Area() {
    return lead1978Area;
  }

  public void setLead1978Area(String lead1978Area) {
    this.lead1978Area = lead1978Area;
  }


  public Dfr024 lead2008Area(String lead2008Area) {
    this.lead2008Area = lead2008Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return lead2008Area
   */
  @javax.annotation.Nullable
  public String getLead2008Area() {
    return lead2008Area;
  }

  public void setLead2008Area(String lead2008Area) {
    this.lead2008Area = lead2008Area;
  }


  public Dfr024 nitrogenDioxide1971Area(String nitrogenDioxide1971Area) {
    this.nitrogenDioxide1971Area = nitrogenDioxide1971Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Nitrogen Dioxide (1971).
   * @return nitrogenDioxide1971Area
   */
  @javax.annotation.Nullable
  public String getNitrogenDioxide1971Area() {
    return nitrogenDioxide1971Area;
  }

  public void setNitrogenDioxide1971Area(String nitrogenDioxide1971Area) {
    this.nitrogenDioxide1971Area = nitrogenDioxide1971Area;
  }


  public Dfr024 ozone8hr1997Area(String ozone8hr1997Area) {
    this.ozone8hr1997Area = ozone8hr1997Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return ozone8hr1997Area
   */
  @javax.annotation.Nullable
  public String getOzone8hr1997Area() {
    return ozone8hr1997Area;
  }

  public void setOzone8hr1997Area(String ozone8hr1997Area) {
    this.ozone8hr1997Area = ozone8hr1997Area;
  }


  public Dfr024 ozone8hr2008Area(String ozone8hr2008Area) {
    this.ozone8hr2008Area = ozone8hr2008Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return ozone8hr2008Area
   */
  @javax.annotation.Nullable
  public String getOzone8hr2008Area() {
    return ozone8hr2008Area;
  }

  public void setOzone8hr2008Area(String ozone8hr2008Area) {
    this.ozone8hr2008Area = ozone8hr2008Area;
  }


  public Dfr024 ozone8hr2015Area(String ozone8hr2015Area) {
    this.ozone8hr2015Area = ozone8hr2015Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for 8-Hour Ozone (2005).
   * @return ozone8hr2015Area
   */
  @javax.annotation.Nullable
  public String getOzone8hr2015Area() {
    return ozone8hr2015Area;
  }

  public void setOzone8hr2015Area(String ozone8hr2015Area) {
    this.ozone8hr2015Area = ozone8hr2015Area;
  }


  public Dfr024 particulateMatter1987Area(String particulateMatter1987Area) {
    this.particulateMatter1987Area = particulateMatter1987Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Particulate Matter (1987).
   * @return particulateMatter1987Area
   */
  @javax.annotation.Nullable
  public String getParticulateMatter1987Area() {
    return particulateMatter1987Area;
  }

  public void setParticulateMatter1987Area(String particulateMatter1987Area) {
    this.particulateMatter1987Area = particulateMatter1987Area;
  }


  public Dfr024 particulateMatter1997Area(String particulateMatter1997Area) {
    this.particulateMatter1997Area = particulateMatter1997Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return particulateMatter1997Area
   */
  @javax.annotation.Nullable
  public String getParticulateMatter1997Area() {
    return particulateMatter1997Area;
  }

  public void setParticulateMatter1997Area(String particulateMatter1997Area) {
    this.particulateMatter1997Area = particulateMatter1997Area;
  }


  public Dfr024 particulateMatter2006Area(String particulateMatter2006Area) {
    this.particulateMatter2006Area = particulateMatter2006Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return particulateMatter2006Area
   */
  @javax.annotation.Nullable
  public String getParticulateMatter2006Area() {
    return particulateMatter2006Area;
  }

  public void setParticulateMatter2006Area(String particulateMatter2006Area) {
    this.particulateMatter2006Area = particulateMatter2006Area;
  }


  public Dfr024 particulateMatter2012Area(String particulateMatter2012Area) {
    this.particulateMatter2012Area = particulateMatter2012Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Particulate Matter (2012).
   * @return particulateMatter2012Area
   */
  @javax.annotation.Nullable
  public String getParticulateMatter2012Area() {
    return particulateMatter2012Area;
  }

  public void setParticulateMatter2012Area(String particulateMatter2012Area) {
    this.particulateMatter2012Area = particulateMatter2012Area;
  }


  public Dfr024 sulfurDioxide1971Area(String sulfurDioxide1971Area) {
    this.sulfurDioxide1971Area = sulfurDioxide1971Area;
    return this;
  }

  /**
   * Indicates the relevant National Ambient Air Quality Standards (NAAQS) nontattinment standard for Sulfur Dioxide (1971).
   * @return sulfurDioxide1971Area
   */
  @javax.annotation.Nullable
  public String getSulfurDioxide1971Area() {
    return sulfurDioxide1971Area;
  }

  public void setSulfurDioxide1971Area(String sulfurDioxide1971Area) {
    this.sulfurDioxide1971Area = sulfurDioxide1971Area;
  }


  public Dfr024 sulfurDioxide2010Area(String sulfurDioxide2010Area) {
    this.sulfurDioxide2010Area = sulfurDioxide2010Area;
    return this;
  }

  /**
   * If null, the facility is not located in a designated non-attainment area. If populated, the value is the name of the non-attainment area; normally this is a city or county name
   * @return sulfurDioxide2010Area
   */
  @javax.annotation.Nullable
  public String getSulfurDioxide2010Area() {
    return sulfurDioxide2010Area;
  }

  public void setSulfurDioxide2010Area(String sulfurDioxide2010Area) {
    this.sulfurDioxide2010Area = sulfurDioxide2010Area;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr024 dfr024 = (Dfr024) o;
    return Objects.equals(this.carbonMonoxide1971Area, dfr024.carbonMonoxide1971Area) &&
        Objects.equals(this.lead1978Area, dfr024.lead1978Area) &&
        Objects.equals(this.lead2008Area, dfr024.lead2008Area) &&
        Objects.equals(this.nitrogenDioxide1971Area, dfr024.nitrogenDioxide1971Area) &&
        Objects.equals(this.ozone8hr1997Area, dfr024.ozone8hr1997Area) &&
        Objects.equals(this.ozone8hr2008Area, dfr024.ozone8hr2008Area) &&
        Objects.equals(this.ozone8hr2015Area, dfr024.ozone8hr2015Area) &&
        Objects.equals(this.particulateMatter1987Area, dfr024.particulateMatter1987Area) &&
        Objects.equals(this.particulateMatter1997Area, dfr024.particulateMatter1997Area) &&
        Objects.equals(this.particulateMatter2006Area, dfr024.particulateMatter2006Area) &&
        Objects.equals(this.particulateMatter2012Area, dfr024.particulateMatter2012Area) &&
        Objects.equals(this.sulfurDioxide1971Area, dfr024.sulfurDioxide1971Area) &&
        Objects.equals(this.sulfurDioxide2010Area, dfr024.sulfurDioxide2010Area);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carbonMonoxide1971Area, lead1978Area, lead2008Area, nitrogenDioxide1971Area, ozone8hr1997Area, ozone8hr2008Area, ozone8hr2015Area, particulateMatter1987Area, particulateMatter1997Area, particulateMatter2006Area, particulateMatter2012Area, sulfurDioxide1971Area, sulfurDioxide2010Area);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr024 {\n");
    sb.append("    carbonMonoxide1971Area: ").append(toIndentedString(carbonMonoxide1971Area)).append("\n");
    sb.append("    lead1978Area: ").append(toIndentedString(lead1978Area)).append("\n");
    sb.append("    lead2008Area: ").append(toIndentedString(lead2008Area)).append("\n");
    sb.append("    nitrogenDioxide1971Area: ").append(toIndentedString(nitrogenDioxide1971Area)).append("\n");
    sb.append("    ozone8hr1997Area: ").append(toIndentedString(ozone8hr1997Area)).append("\n");
    sb.append("    ozone8hr2008Area: ").append(toIndentedString(ozone8hr2008Area)).append("\n");
    sb.append("    ozone8hr2015Area: ").append(toIndentedString(ozone8hr2015Area)).append("\n");
    sb.append("    particulateMatter1987Area: ").append(toIndentedString(particulateMatter1987Area)).append("\n");
    sb.append("    particulateMatter1997Area: ").append(toIndentedString(particulateMatter1997Area)).append("\n");
    sb.append("    particulateMatter2006Area: ").append(toIndentedString(particulateMatter2006Area)).append("\n");
    sb.append("    particulateMatter2012Area: ").append(toIndentedString(particulateMatter2012Area)).append("\n");
    sb.append("    sulfurDioxide1971Area: ").append(toIndentedString(sulfurDioxide1971Area)).append("\n");
    sb.append("    sulfurDioxide2010Area: ").append(toIndentedString(sulfurDioxide2010Area)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CarbonMonoxide1971Area");
    openapiFields.add("Lead1978Area");
    openapiFields.add("Lead2008Area");
    openapiFields.add("NitrogenDioxide1971Area");
    openapiFields.add("Ozone8hr1997Area");
    openapiFields.add("Ozone8hr2008Area");
    openapiFields.add("Ozone8hr2015Area");
    openapiFields.add("ParticulateMatter1987Area");
    openapiFields.add("ParticulateMatter1997Area");
    openapiFields.add("ParticulateMatter2006Area");
    openapiFields.add("ParticulateMatter2012Area");
    openapiFields.add("SulfurDioxide1971Area");
    openapiFields.add("SulfurDioxide2010Area");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr024
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr024.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr024 is not found in the empty JSON string", Dfr024.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr024.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr024` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CarbonMonoxide1971Area") != null && !jsonObj.get("CarbonMonoxide1971Area").isJsonNull()) && !jsonObj.get("CarbonMonoxide1971Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CarbonMonoxide1971Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CarbonMonoxide1971Area").toString()));
      }
      if ((jsonObj.get("Lead1978Area") != null && !jsonObj.get("Lead1978Area").isJsonNull()) && !jsonObj.get("Lead1978Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lead1978Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lead1978Area").toString()));
      }
      if ((jsonObj.get("Lead2008Area") != null && !jsonObj.get("Lead2008Area").isJsonNull()) && !jsonObj.get("Lead2008Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lead2008Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lead2008Area").toString()));
      }
      if ((jsonObj.get("NitrogenDioxide1971Area") != null && !jsonObj.get("NitrogenDioxide1971Area").isJsonNull()) && !jsonObj.get("NitrogenDioxide1971Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NitrogenDioxide1971Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NitrogenDioxide1971Area").toString()));
      }
      if ((jsonObj.get("Ozone8hr1997Area") != null && !jsonObj.get("Ozone8hr1997Area").isJsonNull()) && !jsonObj.get("Ozone8hr1997Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ozone8hr1997Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ozone8hr1997Area").toString()));
      }
      if ((jsonObj.get("Ozone8hr2008Area") != null && !jsonObj.get("Ozone8hr2008Area").isJsonNull()) && !jsonObj.get("Ozone8hr2008Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ozone8hr2008Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ozone8hr2008Area").toString()));
      }
      if ((jsonObj.get("Ozone8hr2015Area") != null && !jsonObj.get("Ozone8hr2015Area").isJsonNull()) && !jsonObj.get("Ozone8hr2015Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ozone8hr2015Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ozone8hr2015Area").toString()));
      }
      if ((jsonObj.get("ParticulateMatter1987Area") != null && !jsonObj.get("ParticulateMatter1987Area").isJsonNull()) && !jsonObj.get("ParticulateMatter1987Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParticulateMatter1987Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParticulateMatter1987Area").toString()));
      }
      if ((jsonObj.get("ParticulateMatter1997Area") != null && !jsonObj.get("ParticulateMatter1997Area").isJsonNull()) && !jsonObj.get("ParticulateMatter1997Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParticulateMatter1997Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParticulateMatter1997Area").toString()));
      }
      if ((jsonObj.get("ParticulateMatter2006Area") != null && !jsonObj.get("ParticulateMatter2006Area").isJsonNull()) && !jsonObj.get("ParticulateMatter2006Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParticulateMatter2006Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParticulateMatter2006Area").toString()));
      }
      if ((jsonObj.get("ParticulateMatter2012Area") != null && !jsonObj.get("ParticulateMatter2012Area").isJsonNull()) && !jsonObj.get("ParticulateMatter2012Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParticulateMatter2012Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParticulateMatter2012Area").toString()));
      }
      if ((jsonObj.get("SulfurDioxide1971Area") != null && !jsonObj.get("SulfurDioxide1971Area").isJsonNull()) && !jsonObj.get("SulfurDioxide1971Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SulfurDioxide1971Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SulfurDioxide1971Area").toString()));
      }
      if ((jsonObj.get("SulfurDioxide2010Area") != null && !jsonObj.get("SulfurDioxide2010Area").isJsonNull()) && !jsonObj.get("SulfurDioxide2010Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SulfurDioxide2010Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SulfurDioxide2010Area").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr024.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr024' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr024> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr024.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr024>() {
           @Override
           public void write(JsonWriter out, Dfr024 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr024 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr024 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr024
   * @throws IOException if the JSON string is invalid with respect to Dfr024
   */
  public static Dfr024 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr024.class);
  }

  /**
   * Convert an instance of Dfr024 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

