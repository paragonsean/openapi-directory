/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr067 {
  public static final String SERIALIZED_NAME_ACTIVITY_NAME = "ActivityName";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_NAME)
  private String activityName;

  public static final String SERIALIZED_NAME_CASE_I_D = "CaseID";
  @SerializedName(SERIALIZED_NAME_CASE_I_D)
  private String caseID;

  public static final String SERIALIZED_NAME_CASE_NAME = "CaseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_TYPE = "CaseType";
  @SerializedName(SERIALIZED_NAME_CASE_TYPE)
  private String caseType;

  public static final String SERIALIZED_NAME_COMP_ACTION_COST = "CompActionCost";
  @SerializedName(SERIALIZED_NAME_COMP_ACTION_COST)
  private String compActionCost;

  public static final String SERIALIZED_NAME_FEDERAL_PENALTY = "FederalPenalty";
  @SerializedName(SERIALIZED_NAME_FEDERAL_PENALTY)
  private String federalPenalty;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "IssueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_LATEST_SETTLEMENT_ENTERED_DATE = "LatestSettlementEnteredDate";
  @SerializedName(SERIALIZED_NAME_LATEST_SETTLEMENT_ENTERED_DATE)
  private String latestSettlementEnteredDate;

  public static final String SERIALIZED_NAME_LAW_SECTION_CODE = "LawSectionCode";
  @SerializedName(SERIALIZED_NAME_LAW_SECTION_CODE)
  private String lawSectionCode;

  public static final String SERIALIZED_NAME_LEAD_AGENCY = "LeadAgency";
  @SerializedName(SERIALIZED_NAME_LEAD_AGENCY)
  private String leadAgency;

  public static final String SERIALIZED_NAME_NUMBER_SETTLEMENTS = "NumberSettlements";
  @SerializedName(SERIALIZED_NAME_NUMBER_SETTLEMENTS)
  private String numberSettlements;

  public static final String SERIALIZED_NAME_SEP_COST = "SepCost";
  @SerializedName(SERIALIZED_NAME_SEP_COST)
  private String sepCost;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "SettlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_STATE_LOCAL_PENALTY = "StateLocalPenalty";
  @SerializedName(SERIALIZED_NAME_STATE_LOCAL_PENALTY)
  private String stateLocalPenalty;

  public static final String SERIALIZED_NAME_STATUTE_CODE = "StatuteCode";
  @SerializedName(SERIALIZED_NAME_STATUTE_CODE)
  private String statuteCode;

  public static final String SERIALIZED_NAME_TOTAL_COST_RECOVERY = "TotalCostRecovery";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_RECOVERY)
  private String totalCostRecovery;

  public Dfr067() {
  }

  public Dfr067 activityName(String activityName) {
    this.activityName = activityName;
    return this;
  }

  /**
   * The user-created name for an activity.
   * @return activityName
   */
  @javax.annotation.Nonnull
  public String getActivityName() {
    return activityName;
  }

  public void setActivityName(String activityName) {
    this.activityName = activityName;
  }


  public Dfr067 caseID(String caseID) {
    this.caseID = caseID;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return caseID
   */
  @javax.annotation.Nonnull
  public String getCaseID() {
    return caseID;
  }

  public void setCaseID(String caseID) {
    this.caseID = caseID;
  }


  public Dfr067 caseName(String caseName) {
    this.caseName = caseName;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
   * @return caseName
   */
  @javax.annotation.Nonnull
  public String getCaseName() {
    return caseName;
  }

  public void setCaseName(String caseName) {
    this.caseName = caseName;
  }


  public Dfr067 caseType(String caseType) {
    this.caseType = caseType;
    return this;
  }

  /**
   * The unique code that identifies a type of compliance event or enforcement action.
   * @return caseType
   */
  @javax.annotation.Nonnull
  public String getCaseType() {
    return caseType;
  }

  public void setCaseType(String caseType) {
    this.caseType = caseType;
  }


  public Dfr067 compActionCost(String compActionCost) {
    this.compActionCost = compActionCost;
    return this;
  }

  /**
   * The whole dollar amount of the estimated or actual value of the complying action activities.
   * @return compActionCost
   */
  @javax.annotation.Nonnull
  public String getCompActionCost() {
    return compActionCost;
  }

  public void setCompActionCost(String compActionCost) {
    this.compActionCost = compActionCost;
  }


  public Dfr067 federalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
    return this;
  }

  /**
   * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
   * @return federalPenalty
   */
  @javax.annotation.Nonnull
  public String getFederalPenalty() {
    return federalPenalty;
  }

  public void setFederalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
  }


  public Dfr067 issueDate(String issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.
   * @return issueDate
   */
  @javax.annotation.Nonnull
  public String getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(String issueDate) {
    this.issueDate = issueDate;
  }


  public Dfr067 latestSettlementEnteredDate(String latestSettlementEnteredDate) {
    this.latestSettlementEnteredDate = latestSettlementEnteredDate;
    return this;
  }

  /**
   * The date that the final order is signed and issued by the enforcement authority.
   * @return latestSettlementEnteredDate
   */
  @javax.annotation.Nonnull
  public String getLatestSettlementEnteredDate() {
    return latestSettlementEnteredDate;
  }

  public void setLatestSettlementEnteredDate(String latestSettlementEnteredDate) {
    this.latestSettlementEnteredDate = latestSettlementEnteredDate;
  }


  public Dfr067 lawSectionCode(String lawSectionCode) {
    this.lawSectionCode = lawSectionCode;
    return this;
  }

  /**
   * The unique identifier for the Section(s) of law violated and cited in the activity.
   * @return lawSectionCode
   */
  @javax.annotation.Nonnull
  public String getLawSectionCode() {
    return lawSectionCode;
  }

  public void setLawSectionCode(String lawSectionCode) {
    this.lawSectionCode = lawSectionCode;
  }


  public Dfr067 leadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return leadAgency
   */
  @javax.annotation.Nonnull
  public String getLeadAgency() {
    return leadAgency;
  }

  public void setLeadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
  }


  public Dfr067 numberSettlements(String numberSettlements) {
    this.numberSettlements = numberSettlements;
    return this;
  }

  /**
   * The number of final orders issued under the enforcement action.
   * @return numberSettlements
   */
  @javax.annotation.Nonnull
  public String getNumberSettlements() {
    return numberSettlements;
  }

  public void setNumberSettlements(String numberSettlements) {
    this.numberSettlements = numberSettlements;
  }


  public Dfr067 sepCost(String sepCost) {
    this.sepCost = sepCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return sepCost
   */
  @javax.annotation.Nonnull
  public String getSepCost() {
    return sepCost;
  }

  public void setSepCost(String sepCost) {
    this.sepCost = sepCost;
  }


  public Dfr067 settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

  /**
   * For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
   * @return settlementDate
   */
  @javax.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Dfr067 stateLocalPenalty(String stateLocalPenalty) {
    this.stateLocalPenalty = stateLocalPenalty;
    return this;
  }

  /**
   * The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
   * @return stateLocalPenalty
   */
  @javax.annotation.Nonnull
  public String getStateLocalPenalty() {
    return stateLocalPenalty;
  }

  public void setStateLocalPenalty(String stateLocalPenalty) {
    this.stateLocalPenalty = stateLocalPenalty;
  }


  public Dfr067 statuteCode(String statuteCode) {
    this.statuteCode = statuteCode;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return statuteCode
   */
  @javax.annotation.Nonnull
  public String getStatuteCode() {
    return statuteCode;
  }

  public void setStatuteCode(String statuteCode) {
    this.statuteCode = statuteCode;
  }


  public Dfr067 totalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
    return this;
  }

  /**
   * The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
   * @return totalCostRecovery
   */
  @javax.annotation.Nonnull
  public String getTotalCostRecovery() {
    return totalCostRecovery;
  }

  public void setTotalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr067 dfr067 = (Dfr067) o;
    return Objects.equals(this.activityName, dfr067.activityName) &&
        Objects.equals(this.caseID, dfr067.caseID) &&
        Objects.equals(this.caseName, dfr067.caseName) &&
        Objects.equals(this.caseType, dfr067.caseType) &&
        Objects.equals(this.compActionCost, dfr067.compActionCost) &&
        Objects.equals(this.federalPenalty, dfr067.federalPenalty) &&
        Objects.equals(this.issueDate, dfr067.issueDate) &&
        Objects.equals(this.latestSettlementEnteredDate, dfr067.latestSettlementEnteredDate) &&
        Objects.equals(this.lawSectionCode, dfr067.lawSectionCode) &&
        Objects.equals(this.leadAgency, dfr067.leadAgency) &&
        Objects.equals(this.numberSettlements, dfr067.numberSettlements) &&
        Objects.equals(this.sepCost, dfr067.sepCost) &&
        Objects.equals(this.settlementDate, dfr067.settlementDate) &&
        Objects.equals(this.stateLocalPenalty, dfr067.stateLocalPenalty) &&
        Objects.equals(this.statuteCode, dfr067.statuteCode) &&
        Objects.equals(this.totalCostRecovery, dfr067.totalCostRecovery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityName, caseID, caseName, caseType, compActionCost, federalPenalty, issueDate, latestSettlementEnteredDate, lawSectionCode, leadAgency, numberSettlements, sepCost, settlementDate, stateLocalPenalty, statuteCode, totalCostRecovery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr067 {\n");
    sb.append("    activityName: ").append(toIndentedString(activityName)).append("\n");
    sb.append("    caseID: ").append(toIndentedString(caseID)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseType: ").append(toIndentedString(caseType)).append("\n");
    sb.append("    compActionCost: ").append(toIndentedString(compActionCost)).append("\n");
    sb.append("    federalPenalty: ").append(toIndentedString(federalPenalty)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    latestSettlementEnteredDate: ").append(toIndentedString(latestSettlementEnteredDate)).append("\n");
    sb.append("    lawSectionCode: ").append(toIndentedString(lawSectionCode)).append("\n");
    sb.append("    leadAgency: ").append(toIndentedString(leadAgency)).append("\n");
    sb.append("    numberSettlements: ").append(toIndentedString(numberSettlements)).append("\n");
    sb.append("    sepCost: ").append(toIndentedString(sepCost)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    stateLocalPenalty: ").append(toIndentedString(stateLocalPenalty)).append("\n");
    sb.append("    statuteCode: ").append(toIndentedString(statuteCode)).append("\n");
    sb.append("    totalCostRecovery: ").append(toIndentedString(totalCostRecovery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityName");
    openapiFields.add("CaseID");
    openapiFields.add("CaseName");
    openapiFields.add("CaseType");
    openapiFields.add("CompActionCost");
    openapiFields.add("FederalPenalty");
    openapiFields.add("IssueDate");
    openapiFields.add("LatestSettlementEnteredDate");
    openapiFields.add("LawSectionCode");
    openapiFields.add("LeadAgency");
    openapiFields.add("NumberSettlements");
    openapiFields.add("SepCost");
    openapiFields.add("SettlementDate");
    openapiFields.add("StateLocalPenalty");
    openapiFields.add("StatuteCode");
    openapiFields.add("TotalCostRecovery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActivityName");
    openapiRequiredFields.add("CaseID");
    openapiRequiredFields.add("CaseName");
    openapiRequiredFields.add("CaseType");
    openapiRequiredFields.add("CompActionCost");
    openapiRequiredFields.add("FederalPenalty");
    openapiRequiredFields.add("IssueDate");
    openapiRequiredFields.add("LatestSettlementEnteredDate");
    openapiRequiredFields.add("LawSectionCode");
    openapiRequiredFields.add("LeadAgency");
    openapiRequiredFields.add("NumberSettlements");
    openapiRequiredFields.add("SepCost");
    openapiRequiredFields.add("SettlementDate");
    openapiRequiredFields.add("StateLocalPenalty");
    openapiRequiredFields.add("StatuteCode");
    openapiRequiredFields.add("TotalCostRecovery");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr067
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr067.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr067 is not found in the empty JSON string", Dfr067.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr067.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr067` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr067.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActivityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivityName").toString()));
      }
      if (!jsonObj.get("CaseID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseID").toString()));
      }
      if (!jsonObj.get("CaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseName").toString()));
      }
      if (!jsonObj.get("CaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseType").toString()));
      }
      if (!jsonObj.get("CompActionCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompActionCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompActionCost").toString()));
      }
      if (!jsonObj.get("FederalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalPenalty").toString()));
      }
      if (!jsonObj.get("IssueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssueDate").toString()));
      }
      if (!jsonObj.get("LatestSettlementEnteredDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LatestSettlementEnteredDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LatestSettlementEnteredDate").toString()));
      }
      if (!jsonObj.get("LawSectionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LawSectionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LawSectionCode").toString()));
      }
      if (!jsonObj.get("LeadAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAgency").toString()));
      }
      if (!jsonObj.get("NumberSettlements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumberSettlements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumberSettlements").toString()));
      }
      if (!jsonObj.get("SepCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SepCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SepCost").toString()));
      }
      if (!jsonObj.get("SettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementDate").toString()));
      }
      if (!jsonObj.get("StateLocalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateLocalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateLocalPenalty").toString()));
      }
      if (!jsonObj.get("StatuteCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatuteCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatuteCode").toString()));
      }
      if (!jsonObj.get("TotalCostRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalCostRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalCostRecovery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr067.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr067' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr067> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr067.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr067>() {
           @Override
           public void write(JsonWriter out, Dfr067 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr067 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr067 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr067
   * @throws IOException if the JSON string is invalid with respect to Dfr067
   */
  public static Dfr067 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr067.class);
  }

  /**
   * Convert an instance of Dfr067 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

