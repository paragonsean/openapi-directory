/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dfr054
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr054 {
  public static final String SERIALIZED_NAME_COMP_ACTION_COST = "CompActionCost";
  @SerializedName(SERIALIZED_NAME_COMP_ACTION_COST)
  private String compActionCost;

  public static final String SERIALIZED_NAME_FEDERAL_PENALTY = "FederalPenalty";
  @SerializedName(SERIALIZED_NAME_FEDERAL_PENALTY)
  private String federalPenalty;

  public static final String SERIALIZED_NAME_SEP_COST = "SepCost";
  @SerializedName(SERIALIZED_NAME_SEP_COST)
  private String sepCost;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "SettlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_STATE_LOCAL_PENALTY = "StateLocalPenalty";
  @SerializedName(SERIALIZED_NAME_STATE_LOCAL_PENALTY)
  private String stateLocalPenalty;

  public static final String SERIALIZED_NAME_TOTAL_COST_RECOVERY = "TotalCostRecovery";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_RECOVERY)
  private String totalCostRecovery;

  public Dfr054() {
  }

  public Dfr054 compActionCost(String compActionCost) {
    this.compActionCost = compActionCost;
    return this;
  }

  /**
   * The whole dollar amount of the estimated or actual value of the complying action activities.
   * @return compActionCost
   */
  @javax.annotation.Nonnull
  public String getCompActionCost() {
    return compActionCost;
  }

  public void setCompActionCost(String compActionCost) {
    this.compActionCost = compActionCost;
  }


  public Dfr054 federalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
    return this;
  }

  /**
   * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
   * @return federalPenalty
   */
  @javax.annotation.Nonnull
  public String getFederalPenalty() {
    return federalPenalty;
  }

  public void setFederalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
  }


  public Dfr054 sepCost(String sepCost) {
    this.sepCost = sepCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return sepCost
   */
  @javax.annotation.Nonnull
  public String getSepCost() {
    return sepCost;
  }

  public void setSepCost(String sepCost) {
    this.sepCost = sepCost;
  }


  public Dfr054 settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

  /**
   * For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
   * @return settlementDate
   */
  @javax.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Dfr054 stateLocalPenalty(String stateLocalPenalty) {
    this.stateLocalPenalty = stateLocalPenalty;
    return this;
  }

  /**
   * The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
   * @return stateLocalPenalty
   */
  @javax.annotation.Nonnull
  public String getStateLocalPenalty() {
    return stateLocalPenalty;
  }

  public void setStateLocalPenalty(String stateLocalPenalty) {
    this.stateLocalPenalty = stateLocalPenalty;
  }


  public Dfr054 totalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
    return this;
  }

  /**
   * The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
   * @return totalCostRecovery
   */
  @javax.annotation.Nonnull
  public String getTotalCostRecovery() {
    return totalCostRecovery;
  }

  public void setTotalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr054 dfr054 = (Dfr054) o;
    return Objects.equals(this.compActionCost, dfr054.compActionCost) &&
        Objects.equals(this.federalPenalty, dfr054.federalPenalty) &&
        Objects.equals(this.sepCost, dfr054.sepCost) &&
        Objects.equals(this.settlementDate, dfr054.settlementDate) &&
        Objects.equals(this.stateLocalPenalty, dfr054.stateLocalPenalty) &&
        Objects.equals(this.totalCostRecovery, dfr054.totalCostRecovery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compActionCost, federalPenalty, sepCost, settlementDate, stateLocalPenalty, totalCostRecovery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr054 {\n");
    sb.append("    compActionCost: ").append(toIndentedString(compActionCost)).append("\n");
    sb.append("    federalPenalty: ").append(toIndentedString(federalPenalty)).append("\n");
    sb.append("    sepCost: ").append(toIndentedString(sepCost)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    stateLocalPenalty: ").append(toIndentedString(stateLocalPenalty)).append("\n");
    sb.append("    totalCostRecovery: ").append(toIndentedString(totalCostRecovery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompActionCost");
    openapiFields.add("FederalPenalty");
    openapiFields.add("SepCost");
    openapiFields.add("SettlementDate");
    openapiFields.add("StateLocalPenalty");
    openapiFields.add("TotalCostRecovery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CompActionCost");
    openapiRequiredFields.add("FederalPenalty");
    openapiRequiredFields.add("SepCost");
    openapiRequiredFields.add("SettlementDate");
    openapiRequiredFields.add("StateLocalPenalty");
    openapiRequiredFields.add("TotalCostRecovery");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr054
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr054.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr054 is not found in the empty JSON string", Dfr054.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr054.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr054` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr054.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CompActionCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompActionCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompActionCost").toString()));
      }
      if (!jsonObj.get("FederalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalPenalty").toString()));
      }
      if (!jsonObj.get("SepCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SepCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SepCost").toString()));
      }
      if (!jsonObj.get("SettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementDate").toString()));
      }
      if (!jsonObj.get("StateLocalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateLocalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateLocalPenalty").toString()));
      }
      if (!jsonObj.get("TotalCostRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalCostRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalCostRecovery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr054.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr054' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr054> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr054.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr054>() {
           @Override
           public void write(JsonWriter out, Dfr054 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr054 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr054 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr054
   * @throws IOException if the JSON string is invalid with respect to Dfr054
   */
  public static Dfr054 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr054.class);
  }

  /**
   * Convert an instance of Dfr054 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

