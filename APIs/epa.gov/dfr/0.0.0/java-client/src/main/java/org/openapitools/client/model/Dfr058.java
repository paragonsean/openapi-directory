/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Inspection Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr058 {
  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "ActivityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private String activityType;

  public static final String SERIALIZED_NAME_CM_S_FLAG = "CMSFlag";
  @SerializedName(SERIALIZED_NAME_CM_S_FLAG)
  private String cmSFlag;

  public static final String SERIALIZED_NAME_COMP_MONITOR_I_D = "CompMonitorID";
  @SerializedName(SERIALIZED_NAME_COMP_MONITOR_I_D)
  private String compMonitorID;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_FINDING = "Finding";
  @SerializedName(SERIALIZED_NAME_FINDING)
  private String finding;

  public static final String SERIALIZED_NAME_INSPECTION_TYPE = "InspectionType";
  @SerializedName(SERIALIZED_NAME_INSPECTION_TYPE)
  private String inspectionType;

  public static final String SERIALIZED_NAME_LEAD_AGENCY = "LeadAgency";
  @SerializedName(SERIALIZED_NAME_LEAD_AGENCY)
  private String leadAgency;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public Dfr058() {
  }

  public Dfr058 activityType(String activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * Get activityType
   * @return activityType
   */
  @javax.annotation.Nonnull
  public String getActivityType() {
    return activityType;
  }

  public void setActivityType(String activityType) {
    this.activityType = activityType;
  }


  public Dfr058 cmSFlag(String cmSFlag) {
    this.cmSFlag = cmSFlag;
    return this;
  }

  /**
   * Indicates whether a Corrective Measure Study has been recommended.
   * @return cmSFlag
   */
  @javax.annotation.Nonnull
  public String getCmSFlag() {
    return cmSFlag;
  }

  public void setCmSFlag(String cmSFlag) {
    this.cmSFlag = cmSFlag;
  }


  public Dfr058 compMonitorID(String compMonitorID) {
    this.compMonitorID = compMonitorID;
    return this;
  }

  /**
   * Get compMonitorID
   * @return compMonitorID
   */
  @javax.annotation.Nonnull
  public String getCompMonitorID() {
    return compMonitorID;
  }

  public void setCompMonitorID(String compMonitorID) {
    this.compMonitorID = compMonitorID;
  }


  public Dfr058 date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the listed inspection
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Dfr058 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Dfr058 finding(String finding) {
    this.finding = finding;
    return this;
  }

  /**
   * For CAA, includes results of source or performance stack tests or Title V certification review results when applicable; for CWA and RCRA, includes whether violations or compliance issues were found during an inspection, if entered into an EPA system
   * @return finding
   */
  @javax.annotation.Nonnull
  public String getFinding() {
    return finding;
  }

  public void setFinding(String finding) {
    this.finding = finding;
  }


  public Dfr058 inspectionType(String inspectionType) {
    this.inspectionType = inspectionType;
    return this;
  }

  /**
   * A description of the type of inspection undertaken
   * @return inspectionType
   */
  @javax.annotation.Nonnull
  public String getInspectionType() {
    return inspectionType;
  }

  public void setInspectionType(String inspectionType) {
    this.inspectionType = inspectionType;
  }


  public Dfr058 leadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return leadAgency
   */
  @javax.annotation.Nonnull
  public String getLeadAgency() {
    return leadAgency;
  }

  public void setLeadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
  }


  public Dfr058 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr058 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr058 dfr058 = (Dfr058) o;
    return Objects.equals(this.activityType, dfr058.activityType) &&
        Objects.equals(this.cmSFlag, dfr058.cmSFlag) &&
        Objects.equals(this.compMonitorID, dfr058.compMonitorID) &&
        Objects.equals(this.date, dfr058.date) &&
        Objects.equals(this.epASystem, dfr058.epASystem) &&
        Objects.equals(this.finding, dfr058.finding) &&
        Objects.equals(this.inspectionType, dfr058.inspectionType) &&
        Objects.equals(this.leadAgency, dfr058.leadAgency) &&
        Objects.equals(this.sourceID, dfr058.sourceID) &&
        Objects.equals(this.statute, dfr058.statute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, cmSFlag, compMonitorID, date, epASystem, finding, inspectionType, leadAgency, sourceID, statute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr058 {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    cmSFlag: ").append(toIndentedString(cmSFlag)).append("\n");
    sb.append("    compMonitorID: ").append(toIndentedString(compMonitorID)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    finding: ").append(toIndentedString(finding)).append("\n");
    sb.append("    inspectionType: ").append(toIndentedString(inspectionType)).append("\n");
    sb.append("    leadAgency: ").append(toIndentedString(leadAgency)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityType");
    openapiFields.add("CMSFlag");
    openapiFields.add("CompMonitorID");
    openapiFields.add("Date");
    openapiFields.add("EPASystem");
    openapiFields.add("Finding");
    openapiFields.add("InspectionType");
    openapiFields.add("LeadAgency");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActivityType");
    openapiRequiredFields.add("CMSFlag");
    openapiRequiredFields.add("CompMonitorID");
    openapiRequiredFields.add("Date");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("Finding");
    openapiRequiredFields.add("InspectionType");
    openapiRequiredFields.add("LeadAgency");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr058
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr058.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr058 is not found in the empty JSON string", Dfr058.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr058.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr058` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr058.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActivityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivityType").toString()));
      }
      if (!jsonObj.get("CMSFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CMSFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CMSFlag").toString()));
      }
      if (!jsonObj.get("CompMonitorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompMonitorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompMonitorID").toString()));
      }
      if (!jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("Finding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Finding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Finding").toString()));
      }
      if (!jsonObj.get("InspectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InspectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InspectionType").toString()));
      }
      if (!jsonObj.get("LeadAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAgency").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr058.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr058' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr058> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr058.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr058>() {
           @Override
           public void write(JsonWriter out, Dfr058 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr058 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr058 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr058
   * @throws IOException if the JSON string is invalid with respect to Dfr058
   */
  public static Dfr058 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr058.class);
  }

  /**
   * Convert an instance of Dfr058 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

