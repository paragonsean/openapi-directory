/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dfr018MapData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Map Output Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr073 {
  public static final String SERIALIZED_NAME_CENTER_LATITUDE = "CenterLatitude";
  @SerializedName(SERIALIZED_NAME_CENTER_LATITUDE)
  private String centerLatitude;

  public static final String SERIALIZED_NAME_CENTER_LONGITUDE = "CenterLongitude";
  @SerializedName(SERIALIZED_NAME_CENTER_LONGITUDE)
  private String centerLongitude;

  public static final String SERIALIZED_NAME_ICON_BASE_U_R_L = "IconBaseURL";
  @SerializedName(SERIALIZED_NAME_ICON_BASE_U_R_L)
  private String iconBaseURL;

  public static final String SERIALIZED_NAME_MAP_DATA = "MapData";
  @SerializedName(SERIALIZED_NAME_MAP_DATA)
  private List<Dfr018MapData> mapData = new ArrayList<>();

  public static final String SERIALIZED_NAME_POP_UP_BASE_U_R_L = "PopUpBaseURL";
  @SerializedName(SERIALIZED_NAME_POP_UP_BASE_U_R_L)
  private String popUpBaseURL;

  public Dfr073() {
  }

  public Dfr073 centerLatitude(String centerLatitude) {
    this.centerLatitude = centerLatitude;
    return this;
  }

  /**
   * The latitude of the facility in degrees, to four decimal places.
   * @return centerLatitude
   */
  @javax.annotation.Nonnull
  public String getCenterLatitude() {
    return centerLatitude;
  }

  public void setCenterLatitude(String centerLatitude) {
    this.centerLatitude = centerLatitude;
  }


  public Dfr073 centerLongitude(String centerLongitude) {
    this.centerLongitude = centerLongitude;
    return this;
  }

  /**
   * The longitude of the facility in degrees, to four decimal places.
   * @return centerLongitude
   */
  @javax.annotation.Nonnull
  public String getCenterLongitude() {
    return centerLongitude;
  }

  public void setCenterLongitude(String centerLongitude) {
    this.centerLongitude = centerLongitude;
  }


  public Dfr073 iconBaseURL(String iconBaseURL) {
    this.iconBaseURL = iconBaseURL;
    return this;
  }

  /**
   * URL where all the icons are located
   * @return iconBaseURL
   */
  @javax.annotation.Nonnull
  public String getIconBaseURL() {
    return iconBaseURL;
  }

  public void setIconBaseURL(String iconBaseURL) {
    this.iconBaseURL = iconBaseURL;
  }


  public Dfr073 mapData(List<Dfr018MapData> mapData) {
    this.mapData = mapData;
    return this;
  }

  public Dfr073 addMapDataItem(Dfr018MapData mapDataItem) {
    if (this.mapData == null) {
      this.mapData = new ArrayList<>();
    }
    this.mapData.add(mapDataItem);
    return this;
  }

  /**
   * An array of facility geospatial information.
   * @return mapData
   */
  @javax.annotation.Nonnull
  public List<Dfr018MapData> getMapData() {
    return mapData;
  }

  public void setMapData(List<Dfr018MapData> mapData) {
    this.mapData = mapData;
  }


  public Dfr073 popUpBaseURL(String popUpBaseURL) {
    this.popUpBaseURL = popUpBaseURL;
    return this;
  }

  /**
   * Combine this URL with the PUC to get popup info
   * @return popUpBaseURL
   */
  @javax.annotation.Nonnull
  public String getPopUpBaseURL() {
    return popUpBaseURL;
  }

  public void setPopUpBaseURL(String popUpBaseURL) {
    this.popUpBaseURL = popUpBaseURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr073 dfr073 = (Dfr073) o;
    return Objects.equals(this.centerLatitude, dfr073.centerLatitude) &&
        Objects.equals(this.centerLongitude, dfr073.centerLongitude) &&
        Objects.equals(this.iconBaseURL, dfr073.iconBaseURL) &&
        Objects.equals(this.mapData, dfr073.mapData) &&
        Objects.equals(this.popUpBaseURL, dfr073.popUpBaseURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(centerLatitude, centerLongitude, iconBaseURL, mapData, popUpBaseURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr073 {\n");
    sb.append("    centerLatitude: ").append(toIndentedString(centerLatitude)).append("\n");
    sb.append("    centerLongitude: ").append(toIndentedString(centerLongitude)).append("\n");
    sb.append("    iconBaseURL: ").append(toIndentedString(iconBaseURL)).append("\n");
    sb.append("    mapData: ").append(toIndentedString(mapData)).append("\n");
    sb.append("    popUpBaseURL: ").append(toIndentedString(popUpBaseURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CenterLatitude");
    openapiFields.add("CenterLongitude");
    openapiFields.add("IconBaseURL");
    openapiFields.add("MapData");
    openapiFields.add("PopUpBaseURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CenterLatitude");
    openapiRequiredFields.add("CenterLongitude");
    openapiRequiredFields.add("IconBaseURL");
    openapiRequiredFields.add("MapData");
    openapiRequiredFields.add("PopUpBaseURL");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr073
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr073.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr073 is not found in the empty JSON string", Dfr073.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr073.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr073` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr073.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CenterLatitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CenterLatitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CenterLatitude").toString()));
      }
      if (!jsonObj.get("CenterLongitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CenterLongitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CenterLongitude").toString()));
      }
      if (!jsonObj.get("IconBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconBaseURL").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("MapData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MapData` to be an array in the JSON string but got `%s`", jsonObj.get("MapData").toString()));
      }

      JsonArray jsonArraymapData = jsonObj.getAsJsonArray("MapData");
      // validate the required field `MapData` (array)
      for (int i = 0; i < jsonArraymapData.size(); i++) {
        Dfr018MapData.validateJsonElement(jsonArraymapData.get(i));
      };
      if (!jsonObj.get("PopUpBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PopUpBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PopUpBaseURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr073.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr073' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr073> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr073.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr073>() {
           @Override
           public void write(JsonWriter out, Dfr073 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr073 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr073 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr073
   * @throws IOException if the JSON string is invalid with respect to Dfr073
   */
  public static Dfr073 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr073.class);
  }

  /**
   * Convert an instance of Dfr073 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

