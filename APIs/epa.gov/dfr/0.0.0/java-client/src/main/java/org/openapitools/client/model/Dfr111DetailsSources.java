/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sources Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr111DetailsSources {
  public static final String SERIALIZED_NAME_ASSESSED_OR303D_FLG = "AssessedOr303dFlg";
  @SerializedName(SERIALIZED_NAME_ASSESSED_OR303D_FLG)
  private String assessedOr303dFlg;

  public static final String SERIALIZED_NAME_ASSESSMENT_UNIT_E_P_A_CATEGORY = "AssessmentUnitEPACategory";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_UNIT_E_P_A_CATEGORY)
  private String assessmentUnitEPACategory;

  public static final String SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG = "AttainsAquaticLifeUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG)
  private String attainsAquaticLifeUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS = "AttainsCauseGroups";
  @SerializedName(SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS)
  private String attainsCauseGroups;

  public static final String SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG = "AttainsExceptnlUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG)
  private String attainsExceptnlUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_POSSIBLE_POLLUTANTS = "AttainsPossiblePollutants";
  @SerializedName(SERIALIZED_NAME_ATTAINS_POSSIBLE_POLLUTANTS)
  private String attainsPossiblePollutants;

  public static final String SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG = "AttainsRecreationUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG)
  private String attainsRecreationUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_SHELFFISH_USE_FLG = "AttainsShelffishUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_SHELFFISH_USE_FLG)
  private String attainsShelffishUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_STATE_CAUSES = "AttainsStateCauses";
  @SerializedName(SERIALIZED_NAME_ATTAINS_STATE_CAUSES)
  private String attainsStateCauses;

  public static final String SERIALIZED_NAME_CYCLE_YEAR = "CycleYear";
  @SerializedName(SERIALIZED_NAME_CYCLE_YEAR)
  private String cycleYear;

  public static final String SERIALIZED_NAME_GN_I_S_NAME = "GNISName";
  @SerializedName(SERIALIZED_NAME_GN_I_S_NAME)
  private String gnISName;

  public static final String SERIALIZED_NAME_IMPAIRED_WATERS_FLG = "ImpairedWatersFlg";
  @SerializedName(SERIALIZED_NAME_IMPAIRED_WATERS_FLG)
  private String impairedWatersFlg;

  public static final String SERIALIZED_NAME_REACH_CODE = "ReachCode";
  @SerializedName(SERIALIZED_NAME_REACH_CODE)
  private String reachCode;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_W_B_D12 = "WBD12";
  @SerializedName(SERIALIZED_NAME_W_B_D12)
  private String WBD12;

  public static final String SERIALIZED_NAME_WB_D12_NAME = "WBD12Name";
  @SerializedName(SERIALIZED_NAME_WB_D12_NAME)
  private String wbD12Name;

  public Dfr111DetailsSources() {
  }

  public Dfr111DetailsSources assessedOr303dFlg(String assessedOr303dFlg) {
    this.assessedOr303dFlg = assessedOr303dFlg;
    return this;
  }

  /**
   * Denotes facilities that discharge into an impaired water body for which a plan has not yet been developed (category 5 water body) and facilities that discharge to an impaired water body for which the state has developed a plan to return the water to its designated uses under the Total Maximum Daily Loads (TMDL) program (category 4 water body).
   * @return assessedOr303dFlg
   */
  @javax.annotation.Nonnull
  public String getAssessedOr303dFlg() {
    return assessedOr303dFlg;
  }

  public void setAssessedOr303dFlg(String assessedOr303dFlg) {
    this.assessedOr303dFlg = assessedOr303dFlg;
  }


  public Dfr111DetailsSources assessmentUnitEPACategory(String assessmentUnitEPACategory) {
    this.assessmentUnitEPACategory = assessmentUnitEPACategory;
    return this;
  }

  /**
   * The water quality category under which the water body�or water segment is classified.�Additional information: https://www.epa.gov/wqs-tech/supplemental-module-listing-impaired-waters-and-developing-tmdls
   * @return assessmentUnitEPACategory
   */
  @javax.annotation.Nonnull
  public String getAssessmentUnitEPACategory() {
    return assessmentUnitEPACategory;
  }

  public void setAssessmentUnitEPACategory(String assessmentUnitEPACategory) {
    this.assessmentUnitEPACategory = assessmentUnitEPACategory;
  }


  public Dfr111DetailsSources attainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
   * @return attainsAquaticLifeUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsAquaticLifeUseFlg() {
    return attainsAquaticLifeUseFlg;
  }

  public void setAttainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
  }


  public Dfr111DetailsSources attainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
    return this;
  }

  /**
   * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
   * @return attainsCauseGroups
   */
  @javax.annotation.Nonnull
  public String getAttainsCauseGroups() {
    return attainsCauseGroups;
  }

  public void setAttainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
  }


  public Dfr111DetailsSources attainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
   * @return attainsExceptnlUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsExceptnlUseFlg() {
    return attainsExceptnlUseFlg;
  }

  public void setAttainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
  }


  public Dfr111DetailsSources attainsPossiblePollutants(String attainsPossiblePollutants) {
    this.attainsPossiblePollutants = attainsPossiblePollutants;
    return this;
  }

  /**
   * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody, as indicated in ATTAINS.
   * @return attainsPossiblePollutants
   */
  @javax.annotation.Nonnull
  public String getAttainsPossiblePollutants() {
    return attainsPossiblePollutants;
  }

  public void setAttainsPossiblePollutants(String attainsPossiblePollutants) {
    this.attainsPossiblePollutants = attainsPossiblePollutants;
  }


  public Dfr111DetailsSources attainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
   * @return attainsRecreationUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsRecreationUseFlg() {
    return attainsRecreationUseFlg;
  }

  public void setAttainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
  }


  public Dfr111DetailsSources attainsShelffishUseFlg(String attainsShelffishUseFlg) {
    this.attainsShelffishUseFlg = attainsShelffishUseFlg;
    return this;
  }

  /**
   * Indicates if the waterbody in which the facility resides is designated for shellfish use.
   * @return attainsShelffishUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsShelffishUseFlg() {
    return attainsShelffishUseFlg;
  }

  public void setAttainsShelffishUseFlg(String attainsShelffishUseFlg) {
    this.attainsShelffishUseFlg = attainsShelffishUseFlg;
  }


  public Dfr111DetailsSources attainsStateCauses(String attainsStateCauses) {
    this.attainsStateCauses = attainsStateCauses;
    return this;
  }

  /**
   * Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
   * @return attainsStateCauses
   */
  @javax.annotation.Nonnull
  public String getAttainsStateCauses() {
    return attainsStateCauses;
  }

  public void setAttainsStateCauses(String attainsStateCauses) {
    this.attainsStateCauses = attainsStateCauses;
  }


  public Dfr111DetailsSources cycleYear(String cycleYear) {
    this.cycleYear = cycleYear;
    return this;
  }

  /**
   * The Assessment, Total Maximum Daily Load (TMDL) Tracking and Implementation System (ATTAINS) reporting year.
   * @return cycleYear
   */
  @javax.annotation.Nonnull
  public String getCycleYear() {
    return cycleYear;
  }

  public void setCycleYear(String cycleYear) {
    this.cycleYear = cycleYear;
  }


  public Dfr111DetailsSources gnISName(String gnISName) {
    this.gnISName = gnISName;
    return this;
  }

  /**
   * The name of the waterbody in which the facility is located near or is permitted to discharge directly.
   * @return gnISName
   */
  @javax.annotation.Nonnull
  public String getGnISName() {
    return gnISName;
  }

  public void setGnISName(String gnISName) {
    this.gnISName = gnISName;
  }


  public Dfr111DetailsSources impairedWatersFlg(String impairedWatersFlg) {
    this.impairedWatersFlg = impairedWatersFlg;
    return this;
  }

  /**
   * Indicates if the facility is porentially discharging to impaired waters.
   * @return impairedWatersFlg
   */
  @javax.annotation.Nonnull
  public String getImpairedWatersFlg() {
    return impairedWatersFlg;
  }

  public void setImpairedWatersFlg(String impairedWatersFlg) {
    this.impairedWatersFlg = impairedWatersFlg;
  }


  public Dfr111DetailsSources reachCode(String reachCode) {
    this.reachCode = reachCode;
    return this;
  }

  /**
   * A nationally unique and permanent 14-digit identifier for the waterbody, assigned by the U.S. Geological Survey.
   * @return reachCode
   */
  @javax.annotation.Nonnull
  public String getReachCode() {
    return reachCode;
  }

  public void setReachCode(String reachCode) {
    this.reachCode = reachCode;
  }


  public Dfr111DetailsSources sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr111DetailsSources WBD12(String WBD12) {
    this.WBD12 = WBD12;
    return this;
  }

  /**
   * The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
   * @return WBD12
   */
  @javax.annotation.Nonnull
  public String getWBD12() {
    return WBD12;
  }

  public void setWBD12(String WBD12) {
    this.WBD12 = WBD12;
  }


  public Dfr111DetailsSources wbD12Name(String wbD12Name) {
    this.wbD12Name = wbD12Name;
    return this;
  }

  /**
   * The name of the watershed in which the facility resides.
   * @return wbD12Name
   */
  @javax.annotation.Nonnull
  public String getWbD12Name() {
    return wbD12Name;
  }

  public void setWbD12Name(String wbD12Name) {
    this.wbD12Name = wbD12Name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr111DetailsSources dfr111DetailsSources = (Dfr111DetailsSources) o;
    return Objects.equals(this.assessedOr303dFlg, dfr111DetailsSources.assessedOr303dFlg) &&
        Objects.equals(this.assessmentUnitEPACategory, dfr111DetailsSources.assessmentUnitEPACategory) &&
        Objects.equals(this.attainsAquaticLifeUseFlg, dfr111DetailsSources.attainsAquaticLifeUseFlg) &&
        Objects.equals(this.attainsCauseGroups, dfr111DetailsSources.attainsCauseGroups) &&
        Objects.equals(this.attainsExceptnlUseFlg, dfr111DetailsSources.attainsExceptnlUseFlg) &&
        Objects.equals(this.attainsPossiblePollutants, dfr111DetailsSources.attainsPossiblePollutants) &&
        Objects.equals(this.attainsRecreationUseFlg, dfr111DetailsSources.attainsRecreationUseFlg) &&
        Objects.equals(this.attainsShelffishUseFlg, dfr111DetailsSources.attainsShelffishUseFlg) &&
        Objects.equals(this.attainsStateCauses, dfr111DetailsSources.attainsStateCauses) &&
        Objects.equals(this.cycleYear, dfr111DetailsSources.cycleYear) &&
        Objects.equals(this.gnISName, dfr111DetailsSources.gnISName) &&
        Objects.equals(this.impairedWatersFlg, dfr111DetailsSources.impairedWatersFlg) &&
        Objects.equals(this.reachCode, dfr111DetailsSources.reachCode) &&
        Objects.equals(this.sourceID, dfr111DetailsSources.sourceID) &&
        Objects.equals(this.WBD12, dfr111DetailsSources.WBD12) &&
        Objects.equals(this.wbD12Name, dfr111DetailsSources.wbD12Name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessedOr303dFlg, assessmentUnitEPACategory, attainsAquaticLifeUseFlg, attainsCauseGroups, attainsExceptnlUseFlg, attainsPossiblePollutants, attainsRecreationUseFlg, attainsShelffishUseFlg, attainsStateCauses, cycleYear, gnISName, impairedWatersFlg, reachCode, sourceID, WBD12, wbD12Name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr111DetailsSources {\n");
    sb.append("    assessedOr303dFlg: ").append(toIndentedString(assessedOr303dFlg)).append("\n");
    sb.append("    assessmentUnitEPACategory: ").append(toIndentedString(assessmentUnitEPACategory)).append("\n");
    sb.append("    attainsAquaticLifeUseFlg: ").append(toIndentedString(attainsAquaticLifeUseFlg)).append("\n");
    sb.append("    attainsCauseGroups: ").append(toIndentedString(attainsCauseGroups)).append("\n");
    sb.append("    attainsExceptnlUseFlg: ").append(toIndentedString(attainsExceptnlUseFlg)).append("\n");
    sb.append("    attainsPossiblePollutants: ").append(toIndentedString(attainsPossiblePollutants)).append("\n");
    sb.append("    attainsRecreationUseFlg: ").append(toIndentedString(attainsRecreationUseFlg)).append("\n");
    sb.append("    attainsShelffishUseFlg: ").append(toIndentedString(attainsShelffishUseFlg)).append("\n");
    sb.append("    attainsStateCauses: ").append(toIndentedString(attainsStateCauses)).append("\n");
    sb.append("    cycleYear: ").append(toIndentedString(cycleYear)).append("\n");
    sb.append("    gnISName: ").append(toIndentedString(gnISName)).append("\n");
    sb.append("    impairedWatersFlg: ").append(toIndentedString(impairedWatersFlg)).append("\n");
    sb.append("    reachCode: ").append(toIndentedString(reachCode)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    WBD12: ").append(toIndentedString(WBD12)).append("\n");
    sb.append("    wbD12Name: ").append(toIndentedString(wbD12Name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssessedOr303dFlg");
    openapiFields.add("AssessmentUnitEPACategory");
    openapiFields.add("AttainsAquaticLifeUseFlg");
    openapiFields.add("AttainsCauseGroups");
    openapiFields.add("AttainsExceptnlUseFlg");
    openapiFields.add("AttainsPossiblePollutants");
    openapiFields.add("AttainsRecreationUseFlg");
    openapiFields.add("AttainsShelffishUseFlg");
    openapiFields.add("AttainsStateCauses");
    openapiFields.add("CycleYear");
    openapiFields.add("GNISName");
    openapiFields.add("ImpairedWatersFlg");
    openapiFields.add("ReachCode");
    openapiFields.add("SourceID");
    openapiFields.add("WBD12");
    openapiFields.add("WBD12Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AssessedOr303dFlg");
    openapiRequiredFields.add("AssessmentUnitEPACategory");
    openapiRequiredFields.add("AttainsAquaticLifeUseFlg");
    openapiRequiredFields.add("AttainsCauseGroups");
    openapiRequiredFields.add("AttainsExceptnlUseFlg");
    openapiRequiredFields.add("AttainsPossiblePollutants");
    openapiRequiredFields.add("AttainsRecreationUseFlg");
    openapiRequiredFields.add("AttainsShelffishUseFlg");
    openapiRequiredFields.add("AttainsStateCauses");
    openapiRequiredFields.add("CycleYear");
    openapiRequiredFields.add("GNISName");
    openapiRequiredFields.add("ImpairedWatersFlg");
    openapiRequiredFields.add("ReachCode");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("WBD12");
    openapiRequiredFields.add("WBD12Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr111DetailsSources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr111DetailsSources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr111DetailsSources is not found in the empty JSON string", Dfr111DetailsSources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr111DetailsSources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr111DetailsSources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr111DetailsSources.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AssessedOr303dFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessedOr303dFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessedOr303dFlg").toString()));
      }
      if (!jsonObj.get("AssessmentUnitEPACategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessmentUnitEPACategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessmentUnitEPACategory").toString()));
      }
      if (!jsonObj.get("AttainsAquaticLifeUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsAquaticLifeUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsAquaticLifeUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsCauseGroups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsCauseGroups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsCauseGroups").toString()));
      }
      if (!jsonObj.get("AttainsExceptnlUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsExceptnlUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsExceptnlUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsPossiblePollutants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsPossiblePollutants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsPossiblePollutants").toString()));
      }
      if (!jsonObj.get("AttainsRecreationUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsRecreationUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsRecreationUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsShelffishUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsShelffishUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsShelffishUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsStateCauses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsStateCauses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsStateCauses").toString()));
      }
      if (!jsonObj.get("CycleYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CycleYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CycleYear").toString()));
      }
      if (!jsonObj.get("GNISName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GNISName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GNISName").toString()));
      }
      if (!jsonObj.get("ImpairedWatersFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImpairedWatersFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImpairedWatersFlg").toString()));
      }
      if (!jsonObj.get("ReachCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReachCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReachCode").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("WBD12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WBD12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WBD12").toString()));
      }
      if (!jsonObj.get("WBD12Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WBD12Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WBD12Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr111DetailsSources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr111DetailsSources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr111DetailsSources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr111DetailsSources.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr111DetailsSources>() {
           @Override
           public void write(JsonWriter out, Dfr111DetailsSources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr111DetailsSources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr111DetailsSources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr111DetailsSources
   * @throws IOException if the JSON string is invalid with respect to Dfr111DetailsSources
   */
  public static Dfr111DetailsSources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr111DetailsSources.class);
  }

  /**
   * Convert an instance of Dfr111DetailsSources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

