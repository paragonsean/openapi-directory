/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permits Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018Permits {
  public static final String SERIALIZED_NAME_ACCURACY_SCORE = "AccuracyScore";
  @SerializedName(SERIALIZED_NAME_ACCURACY_SCORE)
  private String accuracyScore;

  public static final String SERIALIZED_NAME_ACCURACY_VALUE = "AccuracyValue";
  @SerializedName(SERIALIZED_NAME_ACCURACY_VALUE)
  private String accuracyValue;

  public static final String SERIALIZED_NAME_AREAS = "Areas";
  @SerializedName(SERIALIZED_NAME_AREAS)
  private String areas;

  public static final String SERIALIZED_NAME_COLLECT_DESC = "CollectDesc";
  @SerializedName(SERIALIZED_NAME_COLLECT_DESC)
  private String collectDesc;

  public static final String SERIALIZED_NAME_D_Q_U_R_L = "DQURL";
  @SerializedName(SERIALIZED_NAME_D_Q_U_R_L)
  private String DQURL;

  public static final String SERIALIZED_NAME_EP_A_REGION = "EPARegion";
  @SerializedName(SERIALIZED_NAME_EP_A_REGION)
  private String epARegion;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_EXP_DATE = "ExpDate";
  @SerializedName(SERIALIZED_NAME_EXP_DATE)
  private String expDate;

  public static final String SERIALIZED_NAME_FACILITY_CITY = "FacilityCity";
  @SerializedName(SERIALIZED_NAME_FACILITY_CITY)
  private String facilityCity;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "FacilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  private String facilityName;

  public static final String SERIALIZED_NAME_FACILITY_STATE = "FacilityState";
  @SerializedName(SERIALIZED_NAME_FACILITY_STATE)
  private String facilityState;

  public static final String SERIALIZED_NAME_FACILITY_STATUS = "FacilityStatus";
  @SerializedName(SERIALIZED_NAME_FACILITY_STATUS)
  private String facilityStatus;

  public static final String SERIALIZED_NAME_FACILITY_STREET = "FacilityStreet";
  @SerializedName(SERIALIZED_NAME_FACILITY_STREET)
  private String facilityStreet;

  public static final String SERIALIZED_NAME_FACILITY_ZIP = "FacilityZip";
  @SerializedName(SERIALIZED_NAME_FACILITY_ZIP)
  private String facilityZip;

  public static final String SERIALIZED_NAME_HAS_BIO_RPT = "HasBioRpt";
  @SerializedName(SERIALIZED_NAME_HAS_BIO_RPT)
  private String hasBioRpt;

  public static final String SERIALIZED_NAME_HAS_ICIS_SSO_RPT = "HasIcisSsoRpt";
  @SerializedName(SERIALIZED_NAME_HAS_ICIS_SSO_RPT)
  private String hasIcisSsoRpt;

  public static final String SERIALIZED_NAME_HDATUM_DESC = "HdatumDesc";
  @SerializedName(SERIALIZED_NAME_HDATUM_DESC)
  private String hdatumDesc;

  public static final String SERIALIZED_NAME_INDIAN_COUNTRY = "IndianCountry";
  @SerializedName(SERIALIZED_NAME_INDIAN_COUNTRY)
  private String indianCountry;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_N_A_I_C_S = "NAICS";
  @SerializedName(SERIALIZED_NAME_N_A_I_C_S)
  private String NAICS;

  public static final String SERIALIZED_NAME_REF_POINT_DESC = "RefPointDesc";
  @SerializedName(SERIALIZED_NAME_REF_POINT_DESC)
  private String refPointDesc;

  public static final String SERIALIZED_NAME_S_I_C = "SIC";
  @SerializedName(SERIALIZED_NAME_S_I_C)
  private String SIC;

  public static final String SERIALIZED_NAME_SCALE = "Scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private String scale;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public static final String SERIALIZED_NAME_UNIVERSE = "Universe";
  @SerializedName(SERIALIZED_NAME_UNIVERSE)
  private String universe;

  public Dfr018Permits() {
  }

  public Dfr018Permits accuracyScore(String accuracyScore) {
    this.accuracyScore = accuracyScore;
    return this;
  }

  /**
   * ??
   * @return accuracyScore
   */
  @javax.annotation.Nonnull
  public String getAccuracyScore() {
    return accuracyScore;
  }

  public void setAccuracyScore(String accuracyScore) {
    this.accuracyScore = accuracyScore;
  }


  public Dfr018Permits accuracyValue(String accuracyValue) {
    this.accuracyValue = accuracyValue;
    return this;
  }

  /**
   * ??
   * @return accuracyValue
   */
  @javax.annotation.Nonnull
  public String getAccuracyValue() {
    return accuracyValue;
  }

  public void setAccuracyValue(String accuracyValue) {
    this.accuracyValue = accuracyValue;
  }


  public Dfr018Permits areas(String areas) {
    this.areas = areas;
    return this;
  }

  /**
   * Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.
   * @return areas
   */
  @javax.annotation.Nonnull
  public String getAreas() {
    return areas;
  }

  public void setAreas(String areas) {
    this.areas = areas;
  }


  public Dfr018Permits collectDesc(String collectDesc) {
    this.collectDesc = collectDesc;
    return this;
  }

  /**
   * ??
   * @return collectDesc
   */
  @javax.annotation.Nonnull
  public String getCollectDesc() {
    return collectDesc;
  }

  public void setCollectDesc(String collectDesc) {
    this.collectDesc = collectDesc;
  }


  public Dfr018Permits DQURL(String DQURL) {
    this.DQURL = DQURL;
    return this;
  }

  /**
   * ??
   * @return DQURL
   */
  @javax.annotation.Nonnull
  public String getDQURL() {
    return DQURL;
  }

  public void setDQURL(String DQURL) {
    this.DQURL = DQURL;
  }


  public Dfr018Permits epARegion(String epARegion) {
    this.epARegion = epARegion;
    return this;
  }

  /**
   * The EPA region in which the facility is located
   * @return epARegion
   */
  @javax.annotation.Nonnull
  public String getEpARegion() {
    return epARegion;
  }

  public void setEpARegion(String epARegion) {
    this.epARegion = epARegion;
  }


  public Dfr018Permits epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Dfr018Permits expDate(String expDate) {
    this.expDate = expDate;
    return this;
  }

  /**
   * Date on which a given permit is scheduled to expire
   * @return expDate
   */
  @javax.annotation.Nonnull
  public String getExpDate() {
    return expDate;
  }

  public void setExpDate(String expDate) {
    this.expDate = expDate;
  }


  public Dfr018Permits facilityCity(String facilityCity) {
    this.facilityCity = facilityCity;
    return this;
  }

  /**
   * The city in which the facility is located
   * @return facilityCity
   */
  @javax.annotation.Nonnull
  public String getFacilityCity() {
    return facilityCity;
  }

  public void setFacilityCity(String facilityCity) {
    this.facilityCity = facilityCity;
  }


  public Dfr018Permits facilityName(String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * The name of the facility.
   * @return facilityName
   */
  @javax.annotation.Nonnull
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(String facilityName) {
    this.facilityName = facilityName;
  }


  public Dfr018Permits facilityState(String facilityState) {
    this.facilityState = facilityState;
    return this;
  }

  /**
   * The state in which the facility is located
   * @return facilityState
   */
  @javax.annotation.Nonnull
  public String getFacilityState() {
    return facilityState;
  }

  public void setFacilityState(String facilityState) {
    this.facilityState = facilityState;
  }


  public Dfr018Permits facilityStatus(String facilityStatus) {
    this.facilityStatus = facilityStatus;
    return this;
  }

  /**
   * The Air Program Status is given for each source ID (Operating; Planned; Under construction; Temporarily closed;  Permanently closed; and Seasonal)  For CWA, the Permit Compliance System (PCS) designates a permitted facility as being Active or Inactive. Under the CWA, all facilities discharging pollutants from a point source (e.g., a pipe) to surface waters must have a NPDES permit. For CWA, ICISNPDES designates a permit as Effective, Administratively Continued, Expired, Not Needed, Pending, Retired, or Terminated. RCRA facilities (sites) are designated as Active or Inactive. The following provides RCRA site activity status definitions and explains site activity status designation.
   * @return facilityStatus
   */
  @javax.annotation.Nonnull
  public String getFacilityStatus() {
    return facilityStatus;
  }

  public void setFacilityStatus(String facilityStatus) {
    this.facilityStatus = facilityStatus;
  }


  public Dfr018Permits facilityStreet(String facilityStreet) {
    this.facilityStreet = facilityStreet;
    return this;
  }

  /**
   * The street address of the facility
   * @return facilityStreet
   */
  @javax.annotation.Nonnull
  public String getFacilityStreet() {
    return facilityStreet;
  }

  public void setFacilityStreet(String facilityStreet) {
    this.facilityStreet = facilityStreet;
  }


  public Dfr018Permits facilityZip(String facilityZip) {
    this.facilityZip = facilityZip;
    return this;
  }

  /**
   * The zip code of the area in which the facility is located
   * @return facilityZip
   */
  @javax.annotation.Nonnull
  public String getFacilityZip() {
    return facilityZip;
  }

  public void setFacilityZip(String facilityZip) {
    this.facilityZip = facilityZip;
  }


  public Dfr018Permits hasBioRpt(String hasBioRpt) {
    this.hasBioRpt = hasBioRpt;
    return this;
  }

  /**
   * Indicates if the facility has an associated Biosolids Facility Report.
   * @return hasBioRpt
   */
  @javax.annotation.Nonnull
  public String getHasBioRpt() {
    return hasBioRpt;
  }

  public void setHasBioRpt(String hasBioRpt) {
    this.hasBioRpt = hasBioRpt;
  }


  public Dfr018Permits hasIcisSsoRpt(String hasIcisSsoRpt) {
    this.hasIcisSsoRpt = hasIcisSsoRpt;
    return this;
  }

  /**
   * ??
   * @return hasIcisSsoRpt
   */
  @javax.annotation.Nonnull
  public String getHasIcisSsoRpt() {
    return hasIcisSsoRpt;
  }

  public void setHasIcisSsoRpt(String hasIcisSsoRpt) {
    this.hasIcisSsoRpt = hasIcisSsoRpt;
  }


  public Dfr018Permits hdatumDesc(String hdatumDesc) {
    this.hdatumDesc = hdatumDesc;
    return this;
  }

  /**
   * ??
   * @return hdatumDesc
   */
  @javax.annotation.Nonnull
  public String getHdatumDesc() {
    return hdatumDesc;
  }

  public void setHdatumDesc(String hdatumDesc) {
    this.hdatumDesc = hdatumDesc;
  }


  public Dfr018Permits indianCountry(String indianCountry) {
    this.indianCountry = indianCountry;
    return this;
  }

  /**
   * Indicates whether the facility is located in Indian Country
   * @return indianCountry
   */
  @javax.annotation.Nonnull
  public String getIndianCountry() {
    return indianCountry;
  }

  public void setIndianCountry(String indianCountry) {
    this.indianCountry = indianCountry;
  }


  public Dfr018Permits latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of the facility or permit holder as maintained in each data system.
   * @return latitude
   */
  @javax.annotation.Nonnull
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public Dfr018Permits longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of the facility or permit holder as maintained in each data system
   * @return longitude
   */
  @javax.annotation.Nonnull
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public Dfr018Permits NAICS(String NAICS) {
    this.NAICS = NAICS;
    return this;
  }

  /**
   * The North American Industry Classification System codes
   * @return NAICS
   */
  @javax.annotation.Nonnull
  public String getNAICS() {
    return NAICS;
  }

  public void setNAICS(String NAICS) {
    this.NAICS = NAICS;
  }


  public Dfr018Permits refPointDesc(String refPointDesc) {
    this.refPointDesc = refPointDesc;
    return this;
  }

  /**
   * ??
   * @return refPointDesc
   */
  @javax.annotation.Nonnull
  public String getRefPointDesc() {
    return refPointDesc;
  }

  public void setRefPointDesc(String refPointDesc) {
    this.refPointDesc = refPointDesc;
  }


  public Dfr018Permits SIC(String SIC) {
    this.SIC = SIC;
    return this;
  }

  /**
   * Standard Industrial Classification codes
   * @return SIC
   */
  @javax.annotation.Nonnull
  public String getSIC() {
    return SIC;
  }

  public void setSIC(String SIC) {
    this.SIC = SIC;
  }


  public Dfr018Permits scale(String scale) {
    this.scale = scale;
    return this;
  }

  /**
   * ??
   * @return scale
   */
  @javax.annotation.Nonnull
  public String getScale() {
    return scale;
  }

  public void setScale(String scale) {
    this.scale = scale;
  }


  public Dfr018Permits sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr018Permits statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }


  public Dfr018Permits universe(String universe) {
    this.universe = universe;
    return this;
  }

  /**
   * This field provides further description on type of permit or record for each data system as follows: - For CAA  &#x3D; The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable sources include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement actions, or included on a Compliance Monitoring Strategy plan. The Clean Air Act requires that delegated agencies and EPA track all federally reportable sources in Air Facility System (AFS). - For CWA  &#x3D; Each CWA Source ID or National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or Minor discharger. - For RCRA &#x3D; RCRA Source ID or permits for Treatment, Storage and Disposal facilities are identified by TSD, Large Quantity Generators are identified by LQG. Other values include Permit Workload (PMT), Closure Workload (CLO), Small Quantity Generator Universe (SQG), Conditionally-Exempt Small Quantity Generator (CESQG), Post-Closure Workload (POST CL), and Transporters.
   * @return universe
   */
  @javax.annotation.Nonnull
  public String getUniverse() {
    return universe;
  }

  public void setUniverse(String universe) {
    this.universe = universe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018Permits dfr018Permits = (Dfr018Permits) o;
    return Objects.equals(this.accuracyScore, dfr018Permits.accuracyScore) &&
        Objects.equals(this.accuracyValue, dfr018Permits.accuracyValue) &&
        Objects.equals(this.areas, dfr018Permits.areas) &&
        Objects.equals(this.collectDesc, dfr018Permits.collectDesc) &&
        Objects.equals(this.DQURL, dfr018Permits.DQURL) &&
        Objects.equals(this.epARegion, dfr018Permits.epARegion) &&
        Objects.equals(this.epASystem, dfr018Permits.epASystem) &&
        Objects.equals(this.expDate, dfr018Permits.expDate) &&
        Objects.equals(this.facilityCity, dfr018Permits.facilityCity) &&
        Objects.equals(this.facilityName, dfr018Permits.facilityName) &&
        Objects.equals(this.facilityState, dfr018Permits.facilityState) &&
        Objects.equals(this.facilityStatus, dfr018Permits.facilityStatus) &&
        Objects.equals(this.facilityStreet, dfr018Permits.facilityStreet) &&
        Objects.equals(this.facilityZip, dfr018Permits.facilityZip) &&
        Objects.equals(this.hasBioRpt, dfr018Permits.hasBioRpt) &&
        Objects.equals(this.hasIcisSsoRpt, dfr018Permits.hasIcisSsoRpt) &&
        Objects.equals(this.hdatumDesc, dfr018Permits.hdatumDesc) &&
        Objects.equals(this.indianCountry, dfr018Permits.indianCountry) &&
        Objects.equals(this.latitude, dfr018Permits.latitude) &&
        Objects.equals(this.longitude, dfr018Permits.longitude) &&
        Objects.equals(this.NAICS, dfr018Permits.NAICS) &&
        Objects.equals(this.refPointDesc, dfr018Permits.refPointDesc) &&
        Objects.equals(this.SIC, dfr018Permits.SIC) &&
        Objects.equals(this.scale, dfr018Permits.scale) &&
        Objects.equals(this.sourceID, dfr018Permits.sourceID) &&
        Objects.equals(this.statute, dfr018Permits.statute) &&
        Objects.equals(this.universe, dfr018Permits.universe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracyScore, accuracyValue, areas, collectDesc, DQURL, epARegion, epASystem, expDate, facilityCity, facilityName, facilityState, facilityStatus, facilityStreet, facilityZip, hasBioRpt, hasIcisSsoRpt, hdatumDesc, indianCountry, latitude, longitude, NAICS, refPointDesc, SIC, scale, sourceID, statute, universe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018Permits {\n");
    sb.append("    accuracyScore: ").append(toIndentedString(accuracyScore)).append("\n");
    sb.append("    accuracyValue: ").append(toIndentedString(accuracyValue)).append("\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    collectDesc: ").append(toIndentedString(collectDesc)).append("\n");
    sb.append("    DQURL: ").append(toIndentedString(DQURL)).append("\n");
    sb.append("    epARegion: ").append(toIndentedString(epARegion)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    expDate: ").append(toIndentedString(expDate)).append("\n");
    sb.append("    facilityCity: ").append(toIndentedString(facilityCity)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    facilityState: ").append(toIndentedString(facilityState)).append("\n");
    sb.append("    facilityStatus: ").append(toIndentedString(facilityStatus)).append("\n");
    sb.append("    facilityStreet: ").append(toIndentedString(facilityStreet)).append("\n");
    sb.append("    facilityZip: ").append(toIndentedString(facilityZip)).append("\n");
    sb.append("    hasBioRpt: ").append(toIndentedString(hasBioRpt)).append("\n");
    sb.append("    hasIcisSsoRpt: ").append(toIndentedString(hasIcisSsoRpt)).append("\n");
    sb.append("    hdatumDesc: ").append(toIndentedString(hdatumDesc)).append("\n");
    sb.append("    indianCountry: ").append(toIndentedString(indianCountry)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    NAICS: ").append(toIndentedString(NAICS)).append("\n");
    sb.append("    refPointDesc: ").append(toIndentedString(refPointDesc)).append("\n");
    sb.append("    SIC: ").append(toIndentedString(SIC)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("    universe: ").append(toIndentedString(universe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccuracyScore");
    openapiFields.add("AccuracyValue");
    openapiFields.add("Areas");
    openapiFields.add("CollectDesc");
    openapiFields.add("DQURL");
    openapiFields.add("EPARegion");
    openapiFields.add("EPASystem");
    openapiFields.add("ExpDate");
    openapiFields.add("FacilityCity");
    openapiFields.add("FacilityName");
    openapiFields.add("FacilityState");
    openapiFields.add("FacilityStatus");
    openapiFields.add("FacilityStreet");
    openapiFields.add("FacilityZip");
    openapiFields.add("HasBioRpt");
    openapiFields.add("HasIcisSsoRpt");
    openapiFields.add("HdatumDesc");
    openapiFields.add("IndianCountry");
    openapiFields.add("Latitude");
    openapiFields.add("Longitude");
    openapiFields.add("NAICS");
    openapiFields.add("RefPointDesc");
    openapiFields.add("SIC");
    openapiFields.add("Scale");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");
    openapiFields.add("Universe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccuracyScore");
    openapiRequiredFields.add("AccuracyValue");
    openapiRequiredFields.add("Areas");
    openapiRequiredFields.add("CollectDesc");
    openapiRequiredFields.add("DQURL");
    openapiRequiredFields.add("EPARegion");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("ExpDate");
    openapiRequiredFields.add("FacilityCity");
    openapiRequiredFields.add("FacilityName");
    openapiRequiredFields.add("FacilityState");
    openapiRequiredFields.add("FacilityStatus");
    openapiRequiredFields.add("FacilityStreet");
    openapiRequiredFields.add("FacilityZip");
    openapiRequiredFields.add("HasBioRpt");
    openapiRequiredFields.add("HasIcisSsoRpt");
    openapiRequiredFields.add("HdatumDesc");
    openapiRequiredFields.add("IndianCountry");
    openapiRequiredFields.add("Latitude");
    openapiRequiredFields.add("Longitude");
    openapiRequiredFields.add("NAICS");
    openapiRequiredFields.add("RefPointDesc");
    openapiRequiredFields.add("SIC");
    openapiRequiredFields.add("Scale");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
    openapiRequiredFields.add("Universe");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018Permits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018Permits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018Permits is not found in the empty JSON string", Dfr018Permits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018Permits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018Permits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr018Permits.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AccuracyScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccuracyScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccuracyScore").toString()));
      }
      if (!jsonObj.get("AccuracyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccuracyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccuracyValue").toString()));
      }
      if (!jsonObj.get("Areas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Areas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Areas").toString()));
      }
      if (!jsonObj.get("CollectDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectDesc").toString()));
      }
      if (!jsonObj.get("DQURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DQURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DQURL").toString()));
      }
      if (!jsonObj.get("EPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPARegion").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("ExpDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpDate").toString()));
      }
      if (!jsonObj.get("FacilityCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityCity").toString()));
      }
      if (!jsonObj.get("FacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityName").toString()));
      }
      if (!jsonObj.get("FacilityState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityState").toString()));
      }
      if (!jsonObj.get("FacilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityStatus").toString()));
      }
      if (!jsonObj.get("FacilityStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityStreet").toString()));
      }
      if (!jsonObj.get("FacilityZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityZip").toString()));
      }
      if (!jsonObj.get("HasBioRpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HasBioRpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasBioRpt").toString()));
      }
      if (!jsonObj.get("HasIcisSsoRpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HasIcisSsoRpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasIcisSsoRpt").toString()));
      }
      if (!jsonObj.get("HdatumDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HdatumDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HdatumDesc").toString()));
      }
      if (!jsonObj.get("IndianCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndianCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndianCountry").toString()));
      }
      if (!jsonObj.get("Latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Latitude").toString()));
      }
      if (!jsonObj.get("Longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Longitude").toString()));
      }
      if (!jsonObj.get("NAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAICS").toString()));
      }
      if (!jsonObj.get("RefPointDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefPointDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RefPointDesc").toString()));
      }
      if (!jsonObj.get("SIC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SIC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SIC").toString()));
      }
      if (!jsonObj.get("Scale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Scale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Scale").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
      if (!jsonObj.get("Universe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Universe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Universe").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018Permits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018Permits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018Permits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018Permits.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018Permits>() {
           @Override
           public void write(JsonWriter out, Dfr018Permits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018Permits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018Permits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018Permits
   * @throws IOException if the JSON string is invalid with respect to Dfr018Permits
   */
  public static Dfr018Permits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018Permits.class);
  }

  /**
   * Convert an instance of Dfr018Permits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

