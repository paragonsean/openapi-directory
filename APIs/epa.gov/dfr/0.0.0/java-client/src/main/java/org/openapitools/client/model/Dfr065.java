/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr065 {
  public static final String SERIALIZED_NAME_ACTION_DATE = "ActionDate";
  @SerializedName(SERIALIZED_NAME_ACTION_DATE)
  private String actionDate;

  public static final String SERIALIZED_NAME_ACTION_TYPE = "ActionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private String actionType;

  public static final String SERIALIZED_NAME_LEAD_AGENCY = "LeadAgency";
  @SerializedName(SERIALIZED_NAME_LEAD_AGENCY)
  private String leadAgency;

  public static final String SERIALIZED_NAME_PENALTY_AMOUNT = "PenaltyAmount";
  @SerializedName(SERIALIZED_NAME_PENALTY_AMOUNT)
  private String penaltyAmount;

  public static final String SERIALIZED_NAME_PENALTY_DESC = "PenaltyDesc";
  @SerializedName(SERIALIZED_NAME_PENALTY_DESC)
  private String penaltyDesc;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public Dfr065() {
  }

  public Dfr065 actionDate(String actionDate) {
    this.actionDate = actionDate;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return actionDate
   */
  @javax.annotation.Nonnull
  public String getActionDate() {
    return actionDate;
  }

  public void setActionDate(String actionDate) {
    this.actionDate = actionDate;
  }


  public Dfr065 actionType(String actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Text description of type of enforcement action. The type of action and description are designated differently in each system, but may be equivalent.
   * @return actionType
   */
  @javax.annotation.Nonnull
  public String getActionType() {
    return actionType;
  }

  public void setActionType(String actionType) {
    this.actionType = actionType;
  }


  public Dfr065 leadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return leadAgency
   */
  @javax.annotation.Nonnull
  public String getLeadAgency() {
    return leadAgency;
  }

  public void setLeadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
  }


  public Dfr065 penaltyAmount(String penaltyAmount) {
    this.penaltyAmount = penaltyAmount;
    return this;
  }

  /**
   * ??
   * @return penaltyAmount
   */
  @javax.annotation.Nonnull
  public String getPenaltyAmount() {
    return penaltyAmount;
  }

  public void setPenaltyAmount(String penaltyAmount) {
    this.penaltyAmount = penaltyAmount;
  }


  public Dfr065 penaltyDesc(String penaltyDesc) {
    this.penaltyDesc = penaltyDesc;
    return this;
  }

  /**
   * ??
   * @return penaltyDesc
   */
  @javax.annotation.Nonnull
  public String getPenaltyDesc() {
    return penaltyDesc;
  }

  public void setPenaltyDesc(String penaltyDesc) {
    this.penaltyDesc = penaltyDesc;
  }


  public Dfr065 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr065 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr065 dfr065 = (Dfr065) o;
    return Objects.equals(this.actionDate, dfr065.actionDate) &&
        Objects.equals(this.actionType, dfr065.actionType) &&
        Objects.equals(this.leadAgency, dfr065.leadAgency) &&
        Objects.equals(this.penaltyAmount, dfr065.penaltyAmount) &&
        Objects.equals(this.penaltyDesc, dfr065.penaltyDesc) &&
        Objects.equals(this.sourceID, dfr065.sourceID) &&
        Objects.equals(this.statute, dfr065.statute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionDate, actionType, leadAgency, penaltyAmount, penaltyDesc, sourceID, statute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr065 {\n");
    sb.append("    actionDate: ").append(toIndentedString(actionDate)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    leadAgency: ").append(toIndentedString(leadAgency)).append("\n");
    sb.append("    penaltyAmount: ").append(toIndentedString(penaltyAmount)).append("\n");
    sb.append("    penaltyDesc: ").append(toIndentedString(penaltyDesc)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionDate");
    openapiFields.add("ActionType");
    openapiFields.add("LeadAgency");
    openapiFields.add("PenaltyAmount");
    openapiFields.add("PenaltyDesc");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActionDate");
    openapiRequiredFields.add("ActionType");
    openapiRequiredFields.add("LeadAgency");
    openapiRequiredFields.add("PenaltyAmount");
    openapiRequiredFields.add("PenaltyDesc");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr065
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr065.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr065 is not found in the empty JSON string", Dfr065.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr065.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr065` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr065.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActionDate").toString()));
      }
      if (!jsonObj.get("ActionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActionType").toString()));
      }
      if (!jsonObj.get("LeadAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAgency").toString()));
      }
      if (!jsonObj.get("PenaltyAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PenaltyAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PenaltyAmount").toString()));
      }
      if (!jsonObj.get("PenaltyDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PenaltyDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PenaltyDesc").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr065.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr065' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr065> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr065.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr065>() {
           @Override
           public void write(JsonWriter out, Dfr065 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr065 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr065 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr065
   * @throws IOException if the JSON string is invalid with respect to Dfr065
   */
  public static Dfr065 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr065.class);
  }

  /**
   * Convert an instance of Dfr065 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

