/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lead Samples
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr072 {
  public static final String SERIALIZED_NAME_P_B90 = "PB90";
  @SerializedName(SERIALIZED_NAME_P_B90)
  private String PB90;

  public static final String SERIALIZED_NAME_PB90_DATES = "PB90Dates";
  @SerializedName(SERIALIZED_NAME_PB90_DATES)
  private String pb90Dates;

  public static final String SERIALIZED_NAME_PB90_UNITS = "PB90Units";
  @SerializedName(SERIALIZED_NAME_PB90_UNITS)
  private String pb90Units;

  public static final String SERIALIZED_NAME_PB90_VALUE = "PB90Value";
  @SerializedName(SERIALIZED_NAME_PB90_VALUE)
  private String pb90Value;

  public Dfr072() {
  }

  public Dfr072 PB90(String PB90) {
    this.PB90 = PB90;
    return this;
  }

  /**
   * The concentration of lead representing the 90th percentile level of all tap water samples collected for the water system
   * @return PB90
   */
  @javax.annotation.Nonnull
  public String getPB90() {
    return PB90;
  }

  public void setPB90(String PB90) {
    this.PB90 = PB90;
  }


  public Dfr072 pb90Dates(String pb90Dates) {
    this.pb90Dates = pb90Dates;
    return this;
  }

  /**
   * The dates during which tap water samples were collected.
   * @return pb90Dates
   */
  @javax.annotation.Nonnull
  public String getPb90Dates() {
    return pb90Dates;
  }

  public void setPb90Dates(String pb90Dates) {
    this.pb90Dates = pb90Dates;
  }


  public Dfr072 pb90Units(String pb90Units) {
    this.pb90Units = pb90Units;
    return this;
  }

  /**
   * The measurement units.
   * @return pb90Units
   */
  @javax.annotation.Nonnull
  public String getPb90Units() {
    return pb90Units;
  }

  public void setPb90Units(String pb90Units) {
    this.pb90Units = pb90Units;
  }


  public Dfr072 pb90Value(String pb90Value) {
    this.pb90Value = pb90Value;
    return this;
  }

  /**
   * The value of the concentration of lead representing the 90th percentile level of all tap water samples collected for the water system
   * @return pb90Value
   */
  @javax.annotation.Nonnull
  public String getPb90Value() {
    return pb90Value;
  }

  public void setPb90Value(String pb90Value) {
    this.pb90Value = pb90Value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr072 dfr072 = (Dfr072) o;
    return Objects.equals(this.PB90, dfr072.PB90) &&
        Objects.equals(this.pb90Dates, dfr072.pb90Dates) &&
        Objects.equals(this.pb90Units, dfr072.pb90Units) &&
        Objects.equals(this.pb90Value, dfr072.pb90Value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(PB90, pb90Dates, pb90Units, pb90Value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr072 {\n");
    sb.append("    PB90: ").append(toIndentedString(PB90)).append("\n");
    sb.append("    pb90Dates: ").append(toIndentedString(pb90Dates)).append("\n");
    sb.append("    pb90Units: ").append(toIndentedString(pb90Units)).append("\n");
    sb.append("    pb90Value: ").append(toIndentedString(pb90Value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PB90");
    openapiFields.add("PB90Dates");
    openapiFields.add("PB90Units");
    openapiFields.add("PB90Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PB90");
    openapiRequiredFields.add("PB90Dates");
    openapiRequiredFields.add("PB90Units");
    openapiRequiredFields.add("PB90Value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr072
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr072.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr072 is not found in the empty JSON string", Dfr072.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr072.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr072` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr072.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PB90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PB90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PB90").toString()));
      }
      if (!jsonObj.get("PB90Dates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PB90Dates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PB90Dates").toString()));
      }
      if (!jsonObj.get("PB90Units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PB90Units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PB90Units").toString()));
      }
      if (!jsonObj.get("PB90Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PB90Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PB90Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr072.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr072' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr072> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr072.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr072>() {
           @Override
           public void write(JsonWriter out, Dfr072 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr072 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr072 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr072
   * @throws IOException if the JSON string is invalid with respect to Dfr072
   */
  public static Dfr072 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr072.class);
  }

  /**
   * Convert an instance of Dfr072 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

