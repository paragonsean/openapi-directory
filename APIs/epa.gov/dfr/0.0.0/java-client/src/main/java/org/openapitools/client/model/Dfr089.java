/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sanitary Survey Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr089 {
  public static final String SERIALIZED_NAME_AGENCY = "Agency";
  @SerializedName(SERIALIZED_NAME_AGENCY)
  private String agency;

  public static final String SERIALIZED_NAME_DATA_VERIFICATION = "DataVerification";
  @SerializedName(SERIALIZED_NAME_DATA_VERIFICATION)
  private String dataVerification;

  public static final String SERIALIZED_NAME_DISTRIBUTION = "Distribution";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION)
  private String distribution;

  public static final String SERIALIZED_NAME_FINANCIAL = "Financial";
  @SerializedName(SERIALIZED_NAME_FINANCIAL)
  private String financial;

  public static final String SERIALIZED_NAME_FINISHED_WATER_STORAGE = "FinishedWaterStorage";
  @SerializedName(SERIALIZED_NAME_FINISHED_WATER_STORAGE)
  private String finishedWaterStorage;

  public static final String SERIALIZED_NAME_MANAGEMENT_OPERATION = "ManagementOperation";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_OPERATION)
  private String managementOperation;

  public static final String SERIALIZED_NAME_OPERATOR_COMPLIANCE = "OperatorCompliance";
  @SerializedName(SERIALIZED_NAME_OPERATOR_COMPLIANCE)
  private String operatorCompliance;

  public static final String SERIALIZED_NAME_OTHER_EVALUATION = "OtherEvaluation";
  @SerializedName(SERIALIZED_NAME_OTHER_EVALUATION)
  private String otherEvaluation;

  public static final String SERIALIZED_NAME_PUMPS = "Pumps";
  @SerializedName(SERIALIZED_NAME_PUMPS)
  private String pumps;

  public static final String SERIALIZED_NAME_SECURITY = "Security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_TREATMENT = "Treatment";
  @SerializedName(SERIALIZED_NAME_TREATMENT)
  private String treatment;

  public static final String SERIALIZED_NAME_VISIT_DATE = "VisitDate";
  @SerializedName(SERIALIZED_NAME_VISIT_DATE)
  private String visitDate;

  public static final String SERIALIZED_NAME_VISIT_TYPE = "VisitType";
  @SerializedName(SERIALIZED_NAME_VISIT_TYPE)
  private String visitType;

  public Dfr089() {
  }

  public Dfr089 agency(String agency) {
    this.agency = agency;
    return this;
  }

  /**
   * Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \&quot;EPA\&quot;
   * @return agency
   */
  @javax.annotation.Nonnull
  public String getAgency() {
    return agency;
  }

  public void setAgency(String agency) {
    this.agency = agency;
  }


  public Dfr089 dataVerification(String dataVerification) {
    this.dataVerification = dataVerification;
    return this;
  }

  /**
   * The sanitary source survey conclusion for data verification operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return dataVerification
   */
  @javax.annotation.Nonnull
  public String getDataVerification() {
    return dataVerification;
  }

  public void setDataVerification(String dataVerification) {
    this.dataVerification = dataVerification;
  }


  public Dfr089 distribution(String distribution) {
    this.distribution = distribution;
    return this;
  }

  /**
   * The sanitary source survey conclusion for distribution operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return distribution
   */
  @javax.annotation.Nonnull
  public String getDistribution() {
    return distribution;
  }

  public void setDistribution(String distribution) {
    this.distribution = distribution;
  }


  public Dfr089 financial(String financial) {
    this.financial = financial;
    return this;
  }

  /**
   * The sanitary source survey conclusion for financial operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return financial
   */
  @javax.annotation.Nonnull
  public String getFinancial() {
    return financial;
  }

  public void setFinancial(String financial) {
    this.financial = financial;
  }


  public Dfr089 finishedWaterStorage(String finishedWaterStorage) {
    this.finishedWaterStorage = finishedWaterStorage;
    return this;
  }

  /**
   * The sanitary source survey conclusion for finished water storage operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return finishedWaterStorage
   */
  @javax.annotation.Nonnull
  public String getFinishedWaterStorage() {
    return finishedWaterStorage;
  }

  public void setFinishedWaterStorage(String finishedWaterStorage) {
    this.finishedWaterStorage = finishedWaterStorage;
  }


  public Dfr089 managementOperation(String managementOperation) {
    this.managementOperation = managementOperation;
    return this;
  }

  /**
   * The sanitary source survey conclusion for management operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return managementOperation
   */
  @javax.annotation.Nonnull
  public String getManagementOperation() {
    return managementOperation;
  }

  public void setManagementOperation(String managementOperation) {
    this.managementOperation = managementOperation;
  }


  public Dfr089 operatorCompliance(String operatorCompliance) {
    this.operatorCompliance = operatorCompliance;
    return this;
  }

  /**
   * The sanitary source survey conclusion for operator compliance. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return operatorCompliance
   */
  @javax.annotation.Nonnull
  public String getOperatorCompliance() {
    return operatorCompliance;
  }

  public void setOperatorCompliance(String operatorCompliance) {
    this.operatorCompliance = operatorCompliance;
  }


  public Dfr089 otherEvaluation(String otherEvaluation) {
    this.otherEvaluation = otherEvaluation;
    return this;
  }

  /**
   * The sanitary source survey conclusion for other evaluation. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return otherEvaluation
   */
  @javax.annotation.Nonnull
  public String getOtherEvaluation() {
    return otherEvaluation;
  }

  public void setOtherEvaluation(String otherEvaluation) {
    this.otherEvaluation = otherEvaluation;
  }


  public Dfr089 pumps(String pumps) {
    this.pumps = pumps;
    return this;
  }

  /**
   * The sanitary source survey conclusion for pump operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return pumps
   */
  @javax.annotation.Nonnull
  public String getPumps() {
    return pumps;
  }

  public void setPumps(String pumps) {
    this.pumps = pumps;
  }


  public Dfr089 security(String security) {
    this.security = security;
    return this;
  }

  /**
   * The sanitary source survey conclusions for security operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return security
   */
  @javax.annotation.Nonnull
  public String getSecurity() {
    return security;
  }

  public void setSecurity(String security) {
    this.security = security;
  }


  public Dfr089 source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The sanitary source survey conclusion for source operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Dfr089 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr089 treatment(String treatment) {
    this.treatment = treatment;
    return this;
  }

  /**
   * The sanitary survey results conclusions for treatment operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
   * @return treatment
   */
  @javax.annotation.Nonnull
  public String getTreatment() {
    return treatment;
  }

  public void setTreatment(String treatment) {
    this.treatment = treatment;
  }


  public Dfr089 visitDate(String visitDate) {
    this.visitDate = visitDate;
    return this;
  }

  /**
   * Date of the sanitary survey.
   * @return visitDate
   */
  @javax.annotation.Nonnull
  public String getVisitDate() {
    return visitDate;
  }

  public void setVisitDate(String visitDate) {
    this.visitDate = visitDate;
  }


  public Dfr089 visitType(String visitType) {
    this.visitType = visitType;
    return this;
  }

  /**
   * A description of the type of site visit conducted.
   * @return visitType
   */
  @javax.annotation.Nonnull
  public String getVisitType() {
    return visitType;
  }

  public void setVisitType(String visitType) {
    this.visitType = visitType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr089 dfr089 = (Dfr089) o;
    return Objects.equals(this.agency, dfr089.agency) &&
        Objects.equals(this.dataVerification, dfr089.dataVerification) &&
        Objects.equals(this.distribution, dfr089.distribution) &&
        Objects.equals(this.financial, dfr089.financial) &&
        Objects.equals(this.finishedWaterStorage, dfr089.finishedWaterStorage) &&
        Objects.equals(this.managementOperation, dfr089.managementOperation) &&
        Objects.equals(this.operatorCompliance, dfr089.operatorCompliance) &&
        Objects.equals(this.otherEvaluation, dfr089.otherEvaluation) &&
        Objects.equals(this.pumps, dfr089.pumps) &&
        Objects.equals(this.security, dfr089.security) &&
        Objects.equals(this.source, dfr089.source) &&
        Objects.equals(this.sourceID, dfr089.sourceID) &&
        Objects.equals(this.treatment, dfr089.treatment) &&
        Objects.equals(this.visitDate, dfr089.visitDate) &&
        Objects.equals(this.visitType, dfr089.visitType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agency, dataVerification, distribution, financial, finishedWaterStorage, managementOperation, operatorCompliance, otherEvaluation, pumps, security, source, sourceID, treatment, visitDate, visitType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr089 {\n");
    sb.append("    agency: ").append(toIndentedString(agency)).append("\n");
    sb.append("    dataVerification: ").append(toIndentedString(dataVerification)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    financial: ").append(toIndentedString(financial)).append("\n");
    sb.append("    finishedWaterStorage: ").append(toIndentedString(finishedWaterStorage)).append("\n");
    sb.append("    managementOperation: ").append(toIndentedString(managementOperation)).append("\n");
    sb.append("    operatorCompliance: ").append(toIndentedString(operatorCompliance)).append("\n");
    sb.append("    otherEvaluation: ").append(toIndentedString(otherEvaluation)).append("\n");
    sb.append("    pumps: ").append(toIndentedString(pumps)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    treatment: ").append(toIndentedString(treatment)).append("\n");
    sb.append("    visitDate: ").append(toIndentedString(visitDate)).append("\n");
    sb.append("    visitType: ").append(toIndentedString(visitType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Agency");
    openapiFields.add("DataVerification");
    openapiFields.add("Distribution");
    openapiFields.add("Financial");
    openapiFields.add("FinishedWaterStorage");
    openapiFields.add("ManagementOperation");
    openapiFields.add("OperatorCompliance");
    openapiFields.add("OtherEvaluation");
    openapiFields.add("Pumps");
    openapiFields.add("Security");
    openapiFields.add("Source");
    openapiFields.add("SourceID");
    openapiFields.add("Treatment");
    openapiFields.add("VisitDate");
    openapiFields.add("VisitType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Agency");
    openapiRequiredFields.add("DataVerification");
    openapiRequiredFields.add("Distribution");
    openapiRequiredFields.add("Financial");
    openapiRequiredFields.add("FinishedWaterStorage");
    openapiRequiredFields.add("ManagementOperation");
    openapiRequiredFields.add("OperatorCompliance");
    openapiRequiredFields.add("OtherEvaluation");
    openapiRequiredFields.add("Pumps");
    openapiRequiredFields.add("Security");
    openapiRequiredFields.add("Source");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Treatment");
    openapiRequiredFields.add("VisitDate");
    openapiRequiredFields.add("VisitType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr089
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr089.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr089 is not found in the empty JSON string", Dfr089.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr089.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr089` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr089.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Agency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Agency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Agency").toString()));
      }
      if (!jsonObj.get("DataVerification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataVerification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataVerification").toString()));
      }
      if (!jsonObj.get("Distribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Distribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Distribution").toString()));
      }
      if (!jsonObj.get("Financial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Financial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Financial").toString()));
      }
      if (!jsonObj.get("FinishedWaterStorage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FinishedWaterStorage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FinishedWaterStorage").toString()));
      }
      if (!jsonObj.get("ManagementOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManagementOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManagementOperation").toString()));
      }
      if (!jsonObj.get("OperatorCompliance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorCompliance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorCompliance").toString()));
      }
      if (!jsonObj.get("OtherEvaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherEvaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OtherEvaluation").toString()));
      }
      if (!jsonObj.get("Pumps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pumps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Pumps").toString()));
      }
      if (!jsonObj.get("Security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Security").toString()));
      }
      if (!jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Treatment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Treatment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Treatment").toString()));
      }
      if (!jsonObj.get("VisitDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VisitDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VisitDate").toString()));
      }
      if (!jsonObj.get("VisitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VisitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VisitType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr089.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr089' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr089> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr089.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr089>() {
           @Override
           public void write(JsonWriter out, Dfr089 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr089 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr089 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr089
   * @throws IOException if the JSON string is invalid with respect to Dfr089
   */
  public static Dfr089 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr089.class);
  }

  /**
   * Convert an instance of Dfr089 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

