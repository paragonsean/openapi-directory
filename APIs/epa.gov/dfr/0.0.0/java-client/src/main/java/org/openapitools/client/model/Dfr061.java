/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Demographics Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr061 {
  public static final String SERIALIZED_NAME_ADULTS = "Adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private String adults;

  public static final String SERIALIZED_NAME_AFRICAN_AMERICAN = "AfricanAmerican";
  @SerializedName(SERIALIZED_NAME_AFRICAN_AMERICAN)
  private String africanAmerican;

  public static final String SERIALIZED_NAME_AMERICAN_INDIAN = "AmericanIndian";
  @SerializedName(SERIALIZED_NAME_AMERICAN_INDIAN)
  private String americanIndian;

  public static final String SERIALIZED_NAME_ASIAN_PACIFIC_ISLANDER = "AsianPacificIslander";
  @SerializedName(SERIALIZED_NAME_ASIAN_PACIFIC_ISLANDER)
  private String asianPacificIslander;

  public static final String SERIALIZED_NAME_B_S_B_A = "BSBA";
  @SerializedName(SERIALIZED_NAME_B_S_B_A)
  private String BSBA;

  public static final String SERIALIZED_NAME_CENTER_LATITUDE = "CenterLatitude";
  @SerializedName(SERIALIZED_NAME_CENTER_LATITUDE)
  private String centerLatitude;

  public static final String SERIALIZED_NAME_CENTER_LONGITUDE = "CenterLongitude";
  @SerializedName(SERIALIZED_NAME_CENTER_LONGITUDE)
  private String centerLongitude;

  public static final String SERIALIZED_NAME_CHILD = "Child";
  @SerializedName(SERIALIZED_NAME_CHILD)
  private String child;

  public static final String SERIALIZED_NAME_GRADES9TO12 = "Grades9to12";
  @SerializedName(SERIALIZED_NAME_GRADES9TO12)
  private String grades9to12;

  public static final String SERIALIZED_NAME_HS_DIPLOMA = "HSDiploma";
  @SerializedName(SERIALIZED_NAME_HS_DIPLOMA)
  private String hsDiploma;

  public static final String SERIALIZED_NAME_HISPANIC_ORIGIN = "HispanicOrigin";
  @SerializedName(SERIALIZED_NAME_HISPANIC_ORIGIN)
  private String hispanicOrigin;

  public static final String SERIALIZED_NAME_HOUSEHOLDS = "Households";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLDS)
  private String households;

  public static final String SERIALIZED_NAME_HOUSEHOLDS_PUBLIC_ASSISTANCE = "HouseholdsPublicAssistance";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLDS_PUBLIC_ASSISTANCE)
  private String householdsPublicAssistance;

  public static final String SERIALIZED_NAME_HOUSING_UNITS = "HousingUnits";
  @SerializedName(SERIALIZED_NAME_HOUSING_UNITS)
  private String housingUnits;

  public static final String SERIALIZED_NAME_INCOME15TO25K = "Income15to25k";
  @SerializedName(SERIALIZED_NAME_INCOME15TO25K)
  private String income15to25k;

  public static final String SERIALIZED_NAME_INCOME25TO50K = "Income25to50k";
  @SerializedName(SERIALIZED_NAME_INCOME25TO50K)
  private String income25to50k;

  public static final String SERIALIZED_NAME_INCOME50TO75K = "Income50to75k";
  @SerializedName(SERIALIZED_NAME_INCOME50TO75K)
  private String income50to75k;

  public static final String SERIALIZED_NAME_INCOME75K_PLUS = "Income75kPlus";
  @SerializedName(SERIALIZED_NAME_INCOME75K_PLUS)
  private String income75kPlus;

  public static final String SERIALIZED_NAME_INCOME_LESS15K = "IncomeLess15k";
  @SerializedName(SERIALIZED_NAME_INCOME_LESS15K)
  private String incomeLess15k;

  public static final String SERIALIZED_NAME_LAND_AREA = "LandArea";
  @SerializedName(SERIALIZED_NAME_LAND_AREA)
  private String landArea;

  public static final String SERIALIZED_NAME_LESS9TH_GRADE = "Less9thGrade";
  @SerializedName(SERIALIZED_NAME_LESS9TH_GRADE)
  private String less9thGrade;

  public static final String SERIALIZED_NAME_MINORS = "Minors";
  @SerializedName(SERIALIZED_NAME_MINORS)
  private String minors;

  public static final String SERIALIZED_NAME_OTHER_MULTIRACIAL = "OtherMultiracial";
  @SerializedName(SERIALIZED_NAME_OTHER_MULTIRACIAL)
  private String otherMultiracial;

  public static final String SERIALIZED_NAME_PERCENT_MINORITY = "PercentMinority";
  @SerializedName(SERIALIZED_NAME_PERCENT_MINORITY)
  private String percentMinority;

  public static final String SERIALIZED_NAME_PERSONS_BELOW_POVERTY_LEVEL = "PersonsBelowPovertyLevel";
  @SerializedName(SERIALIZED_NAME_PERSONS_BELOW_POVERTY_LEVEL)
  private String personsBelowPovertyLevel;

  public static final String SERIALIZED_NAME_POPULATION_DENSITY = "PopulationDensity";
  @SerializedName(SERIALIZED_NAME_POPULATION_DENSITY)
  private String populationDensity;

  public static final String SERIALIZED_NAME_RADIUS = "Radius";
  @SerializedName(SERIALIZED_NAME_RADIUS)
  private String radius;

  public static final String SERIALIZED_NAME_SENIORS = "Seniors";
  @SerializedName(SERIALIZED_NAME_SENIORS)
  private String seniors;

  public static final String SERIALIZED_NAME_SOME_COLLEGE = "SomeCollege";
  @SerializedName(SERIALIZED_NAME_SOME_COLLEGE)
  private String someCollege;

  public static final String SERIALIZED_NAME_TOTAL_PERSONS = "TotalPersons";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERSONS)
  private String totalPersons;

  public static final String SERIALIZED_NAME_WATER_AREA = "WaterArea";
  @SerializedName(SERIALIZED_NAME_WATER_AREA)
  private String waterArea;

  public static final String SERIALIZED_NAME_WHITE = "White";
  @SerializedName(SERIALIZED_NAME_WHITE)
  private String white;

  public Dfr061() {
  }

  public Dfr061 adults(String adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are between eighteen years old and sixty-five years old.
   * @return adults
   */
  @javax.annotation.Nonnull
  public String getAdults() {
    return adults;
  }

  public void setAdults(String adults) {
    this.adults = adults;
  }


  public Dfr061 africanAmerican(String africanAmerican) {
    this.africanAmerican = africanAmerican;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are African American.
   * @return africanAmerican
   */
  @javax.annotation.Nonnull
  public String getAfricanAmerican() {
    return africanAmerican;
  }

  public void setAfricanAmerican(String africanAmerican) {
    this.africanAmerican = africanAmerican;
  }


  public Dfr061 americanIndian(String americanIndian) {
    this.americanIndian = americanIndian;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are of American Indian origin.
   * @return americanIndian
   */
  @javax.annotation.Nonnull
  public String getAmericanIndian() {
    return americanIndian;
  }

  public void setAmericanIndian(String americanIndian) {
    this.americanIndian = americanIndian;
  }


  public Dfr061 asianPacificIslander(String asianPacificIslander) {
    this.asianPacificIslander = asianPacificIslander;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are of Asian Pacific Islander origin.
   * @return asianPacificIslander
   */
  @javax.annotation.Nonnull
  public String getAsianPacificIslander() {
    return asianPacificIslander;
  }

  public void setAsianPacificIslander(String asianPacificIslander) {
    this.asianPacificIslander = asianPacificIslander;
  }


  public Dfr061 BSBA(String BSBA) {
    this.BSBA = BSBA;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who have a bachelor&#39;s degree or higher.
   * @return BSBA
   */
  @javax.annotation.Nonnull
  public String getBSBA() {
    return BSBA;
  }

  public void setBSBA(String BSBA) {
    this.BSBA = BSBA;
  }


  public Dfr061 centerLatitude(String centerLatitude) {
    this.centerLatitude = centerLatitude;
    return this;
  }

  /**
   * The latitude of the facility in degrees, to four decimal places.
   * @return centerLatitude
   */
  @javax.annotation.Nonnull
  public String getCenterLatitude() {
    return centerLatitude;
  }

  public void setCenterLatitude(String centerLatitude) {
    this.centerLatitude = centerLatitude;
  }


  public Dfr061 centerLongitude(String centerLongitude) {
    this.centerLongitude = centerLongitude;
    return this;
  }

  /**
   * The longitude of the facility in degrees, to four decimal places.
   * @return centerLongitude
   */
  @javax.annotation.Nonnull
  public String getCenterLongitude() {
    return centerLongitude;
  }

  public void setCenterLongitude(String centerLongitude) {
    this.centerLongitude = centerLongitude;
  }


  public Dfr061 child(String child) {
    this.child = child;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are five years old or younger.
   * @return child
   */
  @javax.annotation.Nonnull
  public String getChild() {
    return child;
  }

  public void setChild(String child) {
    this.child = child;
  }


  public Dfr061 grades9to12(String grades9to12) {
    this.grades9to12 = grades9to12;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who have completed grades nine through twelve
   * @return grades9to12
   */
  @javax.annotation.Nonnull
  public String getGrades9to12() {
    return grades9to12;
  }

  public void setGrades9to12(String grades9to12) {
    this.grades9to12 = grades9to12;
  }


  public Dfr061 hsDiploma(String hsDiploma) {
    this.hsDiploma = hsDiploma;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who have a high school diploma
   * @return hsDiploma
   */
  @javax.annotation.Nonnull
  public String getHsDiploma() {
    return hsDiploma;
  }

  public void setHsDiploma(String hsDiploma) {
    this.hsDiploma = hsDiploma;
  }


  public Dfr061 hispanicOrigin(String hispanicOrigin) {
    this.hispanicOrigin = hispanicOrigin;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are of Hispanic origin
   * @return hispanicOrigin
   */
  @javax.annotation.Nonnull
  public String getHispanicOrigin() {
    return hispanicOrigin;
  }

  public void setHispanicOrigin(String hispanicOrigin) {
    this.hispanicOrigin = hispanicOrigin;
  }


  public Dfr061 households(String households) {
    this.households = households;
    return this;
  }

  /**
   * The number of households in the area being profiled
   * @return households
   */
  @javax.annotation.Nonnull
  public String getHouseholds() {
    return households;
  }

  public void setHouseholds(String households) {
    this.households = households;
  }


  public Dfr061 householdsPublicAssistance(String householdsPublicAssistance) {
    this.householdsPublicAssistance = householdsPublicAssistance;
    return this;
  }

  /**
   * The number of households that are on any type of public assistance (including subsidized housing, welfare, aid to dependent children, etc.)
   * @return householdsPublicAssistance
   */
  @javax.annotation.Nonnull
  public String getHouseholdsPublicAssistance() {
    return householdsPublicAssistance;
  }

  public void setHouseholdsPublicAssistance(String householdsPublicAssistance) {
    this.householdsPublicAssistance = householdsPublicAssistance;
  }


  public Dfr061 housingUnits(String housingUnits) {
    this.housingUnits = housingUnits;
    return this;
  }

  /**
   * The number of housing units in the area being profiled
   * @return housingUnits
   */
  @javax.annotation.Nonnull
  public String getHousingUnits() {
    return housingUnits;
  }

  public void setHousingUnits(String housingUnits) {
    this.housingUnits = housingUnits;
  }


  public Dfr061 income15to25k(String income15to25k) {
    this.income15to25k = income15to25k;
    return this;
  }

  /**
   * The number and percentage of households who earn greater than or equal to $15,000 but less than $25,000 per year
   * @return income15to25k
   */
  @javax.annotation.Nonnull
  public String getIncome15to25k() {
    return income15to25k;
  }

  public void setIncome15to25k(String income15to25k) {
    this.income15to25k = income15to25k;
  }


  public Dfr061 income25to50k(String income25to50k) {
    this.income25to50k = income25to50k;
    return this;
  }

  /**
   * The number and percentage of households who earn greater than or equal to $25,000 but less than $50,000 per year
   * @return income25to50k
   */
  @javax.annotation.Nonnull
  public String getIncome25to50k() {
    return income25to50k;
  }

  public void setIncome25to50k(String income25to50k) {
    this.income25to50k = income25to50k;
  }


  public Dfr061 income50to75k(String income50to75k) {
    this.income50to75k = income50to75k;
    return this;
  }

  /**
   * The number and percentage of households who earn greater than or equal to $50,000 per year but less than $75,000 per year
   * @return income50to75k
   */
  @javax.annotation.Nonnull
  public String getIncome50to75k() {
    return income50to75k;
  }

  public void setIncome50to75k(String income50to75k) {
    this.income50to75k = income50to75k;
  }


  public Dfr061 income75kPlus(String income75kPlus) {
    this.income75kPlus = income75kPlus;
    return this;
  }

  /**
   * The number and percentage of households who earn greater than or equal to $75,000 per year
   * @return income75kPlus
   */
  @javax.annotation.Nonnull
  public String getIncome75kPlus() {
    return income75kPlus;
  }

  public void setIncome75kPlus(String income75kPlus) {
    this.income75kPlus = income75kPlus;
  }


  public Dfr061 incomeLess15k(String incomeLess15k) {
    this.incomeLess15k = incomeLess15k;
    return this;
  }

  /**
   * The number and percentage of households who earn less than $15,000 per year
   * @return incomeLess15k
   */
  @javax.annotation.Nonnull
  public String getIncomeLess15k() {
    return incomeLess15k;
  }

  public void setIncomeLess15k(String incomeLess15k) {
    this.incomeLess15k = incomeLess15k;
  }


  public Dfr061 landArea(String landArea) {
    this.landArea = landArea;
    return this;
  }

  /**
   * The percentage of the total area that is land (not water). This is calculated using the sum of the land areas of the Census Block Groups (CBG) within the selected radius
   * @return landArea
   */
  @javax.annotation.Nonnull
  public String getLandArea() {
    return landArea;
  }

  public void setLandArea(String landArea) {
    this.landArea = landArea;
  }


  public Dfr061 less9thGrade(String less9thGrade) {
    this.less9thGrade = less9thGrade;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who have less than a ninth grade education
   * @return less9thGrade
   */
  @javax.annotation.Nonnull
  public String getLess9thGrade() {
    return less9thGrade;
  }

  public void setLess9thGrade(String less9thGrade) {
    this.less9thGrade = less9thGrade;
  }


  public Dfr061 minors(String minors) {
    this.minors = minors;
    return this;
  }

  /**
   * The number and percentage of persons living in the area that are seventeen years old or younger
   * @return minors
   */
  @javax.annotation.Nonnull
  public String getMinors() {
    return minors;
  }

  public void setMinors(String minors) {
    this.minors = minors;
  }


  public Dfr061 otherMultiracial(String otherMultiracial) {
    this.otherMultiracial = otherMultiracial;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are not included in the above classifications or are multiracial
   * @return otherMultiracial
   */
  @javax.annotation.Nonnull
  public String getOtherMultiracial() {
    return otherMultiracial;
  }

  public void setOtherMultiracial(String otherMultiracial) {
    this.otherMultiracial = otherMultiracial;
  }


  public Dfr061 percentMinority(String percentMinority) {
    this.percentMinority = percentMinority;
    return this;
  }

  /**
   * The percentage of the population of the given area that is minority. The field is calculated by subtracting the number of persons who are white (and not of Hispanic origin) from the total persons. This number is then divided by the total persons and multiplied by one hundred to determine the percentage.
   * @return percentMinority
   */
  @javax.annotation.Nonnull
  public String getPercentMinority() {
    return percentMinority;
  }

  public void setPercentMinority(String percentMinority) {
    this.percentMinority = percentMinority;
  }


  public Dfr061 personsBelowPovertyLevel(String personsBelowPovertyLevel) {
    this.personsBelowPovertyLevel = personsBelowPovertyLevel;
    return this;
  }

  /**
   * The number of people in the selected area that are below the poverty level
   * @return personsBelowPovertyLevel
   */
  @javax.annotation.Nonnull
  public String getPersonsBelowPovertyLevel() {
    return personsBelowPovertyLevel;
  }

  public void setPersonsBelowPovertyLevel(String personsBelowPovertyLevel) {
    this.personsBelowPovertyLevel = personsBelowPovertyLevel;
  }


  public Dfr061 populationDensity(String populationDensity) {
    this.populationDensity = populationDensity;
    return this;
  }

  /**
   * The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field)
   * @return populationDensity
   */
  @javax.annotation.Nonnull
  public String getPopulationDensity() {
    return populationDensity;
  }

  public void setPopulationDensity(String populationDensity) {
    this.populationDensity = populationDensity;
  }


  public Dfr061 radius(String radius) {
    this.radius = radius;
    return this;
  }

  /**
   * The number of miles, in any direction, from the center point of the facility that is included in the demographic profile
   * @return radius
   */
  @javax.annotation.Nonnull
  public String getRadius() {
    return radius;
  }

  public void setRadius(String radius) {
    this.radius = radius;
  }


  public Dfr061 seniors(String seniors) {
    this.seniors = seniors;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are sixty-five years old or older
   * @return seniors
   */
  @javax.annotation.Nonnull
  public String getSeniors() {
    return seniors;
  }

  public void setSeniors(String seniors) {
    this.seniors = seniors;
  }


  public Dfr061 someCollege(String someCollege) {
    this.someCollege = someCollege;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who have some college or a two year college degree
   * @return someCollege
   */
  @javax.annotation.Nonnull
  public String getSomeCollege() {
    return someCollege;
  }

  public void setSomeCollege(String someCollege) {
    this.someCollege = someCollege;
  }


  public Dfr061 totalPersons(String totalPersons) {
    this.totalPersons = totalPersons;
    return this;
  }

  /**
   * The total number of persons that reside in the area being profiled. The total population within the selected radius of a facility is one indicator of the facility&#39;s surrounding environment and provides context for other facility indicators
   * @return totalPersons
   */
  @javax.annotation.Nonnull
  public String getTotalPersons() {
    return totalPersons;
  }

  public void setTotalPersons(String totalPersons) {
    this.totalPersons = totalPersons;
  }


  public Dfr061 waterArea(String waterArea) {
    this.waterArea = waterArea;
    return this;
  }

  /**
   * The percentage of the total area that is water (not land). This is calculated using the sum of the water areas of the Census Block Groups (CBG) within the selected radius
   * @return waterArea
   */
  @javax.annotation.Nonnull
  public String getWaterArea() {
    return waterArea;
  }

  public void setWaterArea(String waterArea) {
    this.waterArea = waterArea;
  }


  public Dfr061 white(String white) {
    this.white = white;
    return this;
  }

  /**
   * The number and percentage of persons living in the area who are white
   * @return white
   */
  @javax.annotation.Nonnull
  public String getWhite() {
    return white;
  }

  public void setWhite(String white) {
    this.white = white;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr061 dfr061 = (Dfr061) o;
    return Objects.equals(this.adults, dfr061.adults) &&
        Objects.equals(this.africanAmerican, dfr061.africanAmerican) &&
        Objects.equals(this.americanIndian, dfr061.americanIndian) &&
        Objects.equals(this.asianPacificIslander, dfr061.asianPacificIslander) &&
        Objects.equals(this.BSBA, dfr061.BSBA) &&
        Objects.equals(this.centerLatitude, dfr061.centerLatitude) &&
        Objects.equals(this.centerLongitude, dfr061.centerLongitude) &&
        Objects.equals(this.child, dfr061.child) &&
        Objects.equals(this.grades9to12, dfr061.grades9to12) &&
        Objects.equals(this.hsDiploma, dfr061.hsDiploma) &&
        Objects.equals(this.hispanicOrigin, dfr061.hispanicOrigin) &&
        Objects.equals(this.households, dfr061.households) &&
        Objects.equals(this.householdsPublicAssistance, dfr061.householdsPublicAssistance) &&
        Objects.equals(this.housingUnits, dfr061.housingUnits) &&
        Objects.equals(this.income15to25k, dfr061.income15to25k) &&
        Objects.equals(this.income25to50k, dfr061.income25to50k) &&
        Objects.equals(this.income50to75k, dfr061.income50to75k) &&
        Objects.equals(this.income75kPlus, dfr061.income75kPlus) &&
        Objects.equals(this.incomeLess15k, dfr061.incomeLess15k) &&
        Objects.equals(this.landArea, dfr061.landArea) &&
        Objects.equals(this.less9thGrade, dfr061.less9thGrade) &&
        Objects.equals(this.minors, dfr061.minors) &&
        Objects.equals(this.otherMultiracial, dfr061.otherMultiracial) &&
        Objects.equals(this.percentMinority, dfr061.percentMinority) &&
        Objects.equals(this.personsBelowPovertyLevel, dfr061.personsBelowPovertyLevel) &&
        Objects.equals(this.populationDensity, dfr061.populationDensity) &&
        Objects.equals(this.radius, dfr061.radius) &&
        Objects.equals(this.seniors, dfr061.seniors) &&
        Objects.equals(this.someCollege, dfr061.someCollege) &&
        Objects.equals(this.totalPersons, dfr061.totalPersons) &&
        Objects.equals(this.waterArea, dfr061.waterArea) &&
        Objects.equals(this.white, dfr061.white);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adults, africanAmerican, americanIndian, asianPacificIslander, BSBA, centerLatitude, centerLongitude, child, grades9to12, hsDiploma, hispanicOrigin, households, householdsPublicAssistance, housingUnits, income15to25k, income25to50k, income50to75k, income75kPlus, incomeLess15k, landArea, less9thGrade, minors, otherMultiracial, percentMinority, personsBelowPovertyLevel, populationDensity, radius, seniors, someCollege, totalPersons, waterArea, white);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr061 {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    africanAmerican: ").append(toIndentedString(africanAmerican)).append("\n");
    sb.append("    americanIndian: ").append(toIndentedString(americanIndian)).append("\n");
    sb.append("    asianPacificIslander: ").append(toIndentedString(asianPacificIslander)).append("\n");
    sb.append("    BSBA: ").append(toIndentedString(BSBA)).append("\n");
    sb.append("    centerLatitude: ").append(toIndentedString(centerLatitude)).append("\n");
    sb.append("    centerLongitude: ").append(toIndentedString(centerLongitude)).append("\n");
    sb.append("    child: ").append(toIndentedString(child)).append("\n");
    sb.append("    grades9to12: ").append(toIndentedString(grades9to12)).append("\n");
    sb.append("    hsDiploma: ").append(toIndentedString(hsDiploma)).append("\n");
    sb.append("    hispanicOrigin: ").append(toIndentedString(hispanicOrigin)).append("\n");
    sb.append("    households: ").append(toIndentedString(households)).append("\n");
    sb.append("    householdsPublicAssistance: ").append(toIndentedString(householdsPublicAssistance)).append("\n");
    sb.append("    housingUnits: ").append(toIndentedString(housingUnits)).append("\n");
    sb.append("    income15to25k: ").append(toIndentedString(income15to25k)).append("\n");
    sb.append("    income25to50k: ").append(toIndentedString(income25to50k)).append("\n");
    sb.append("    income50to75k: ").append(toIndentedString(income50to75k)).append("\n");
    sb.append("    income75kPlus: ").append(toIndentedString(income75kPlus)).append("\n");
    sb.append("    incomeLess15k: ").append(toIndentedString(incomeLess15k)).append("\n");
    sb.append("    landArea: ").append(toIndentedString(landArea)).append("\n");
    sb.append("    less9thGrade: ").append(toIndentedString(less9thGrade)).append("\n");
    sb.append("    minors: ").append(toIndentedString(minors)).append("\n");
    sb.append("    otherMultiracial: ").append(toIndentedString(otherMultiracial)).append("\n");
    sb.append("    percentMinority: ").append(toIndentedString(percentMinority)).append("\n");
    sb.append("    personsBelowPovertyLevel: ").append(toIndentedString(personsBelowPovertyLevel)).append("\n");
    sb.append("    populationDensity: ").append(toIndentedString(populationDensity)).append("\n");
    sb.append("    radius: ").append(toIndentedString(radius)).append("\n");
    sb.append("    seniors: ").append(toIndentedString(seniors)).append("\n");
    sb.append("    someCollege: ").append(toIndentedString(someCollege)).append("\n");
    sb.append("    totalPersons: ").append(toIndentedString(totalPersons)).append("\n");
    sb.append("    waterArea: ").append(toIndentedString(waterArea)).append("\n");
    sb.append("    white: ").append(toIndentedString(white)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Adults");
    openapiFields.add("AfricanAmerican");
    openapiFields.add("AmericanIndian");
    openapiFields.add("AsianPacificIslander");
    openapiFields.add("BSBA");
    openapiFields.add("CenterLatitude");
    openapiFields.add("CenterLongitude");
    openapiFields.add("Child");
    openapiFields.add("Grades9to12");
    openapiFields.add("HSDiploma");
    openapiFields.add("HispanicOrigin");
    openapiFields.add("Households");
    openapiFields.add("HouseholdsPublicAssistance");
    openapiFields.add("HousingUnits");
    openapiFields.add("Income15to25k");
    openapiFields.add("Income25to50k");
    openapiFields.add("Income50to75k");
    openapiFields.add("Income75kPlus");
    openapiFields.add("IncomeLess15k");
    openapiFields.add("LandArea");
    openapiFields.add("Less9thGrade");
    openapiFields.add("Minors");
    openapiFields.add("OtherMultiracial");
    openapiFields.add("PercentMinority");
    openapiFields.add("PersonsBelowPovertyLevel");
    openapiFields.add("PopulationDensity");
    openapiFields.add("Radius");
    openapiFields.add("Seniors");
    openapiFields.add("SomeCollege");
    openapiFields.add("TotalPersons");
    openapiFields.add("WaterArea");
    openapiFields.add("White");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Adults");
    openapiRequiredFields.add("AfricanAmerican");
    openapiRequiredFields.add("AmericanIndian");
    openapiRequiredFields.add("AsianPacificIslander");
    openapiRequiredFields.add("BSBA");
    openapiRequiredFields.add("CenterLatitude");
    openapiRequiredFields.add("CenterLongitude");
    openapiRequiredFields.add("Child");
    openapiRequiredFields.add("Grades9to12");
    openapiRequiredFields.add("HSDiploma");
    openapiRequiredFields.add("HispanicOrigin");
    openapiRequiredFields.add("Households");
    openapiRequiredFields.add("HouseholdsPublicAssistance");
    openapiRequiredFields.add("HousingUnits");
    openapiRequiredFields.add("Income15to25k");
    openapiRequiredFields.add("Income25to50k");
    openapiRequiredFields.add("Income50to75k");
    openapiRequiredFields.add("Income75kPlus");
    openapiRequiredFields.add("IncomeLess15k");
    openapiRequiredFields.add("LandArea");
    openapiRequiredFields.add("Less9thGrade");
    openapiRequiredFields.add("Minors");
    openapiRequiredFields.add("OtherMultiracial");
    openapiRequiredFields.add("PercentMinority");
    openapiRequiredFields.add("PersonsBelowPovertyLevel");
    openapiRequiredFields.add("PopulationDensity");
    openapiRequiredFields.add("Radius");
    openapiRequiredFields.add("Seniors");
    openapiRequiredFields.add("SomeCollege");
    openapiRequiredFields.add("TotalPersons");
    openapiRequiredFields.add("WaterArea");
    openapiRequiredFields.add("White");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr061
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr061.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr061 is not found in the empty JSON string", Dfr061.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr061.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr061` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr061.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Adults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Adults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Adults").toString()));
      }
      if (!jsonObj.get("AfricanAmerican").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AfricanAmerican` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AfricanAmerican").toString()));
      }
      if (!jsonObj.get("AmericanIndian").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmericanIndian` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmericanIndian").toString()));
      }
      if (!jsonObj.get("AsianPacificIslander").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AsianPacificIslander` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AsianPacificIslander").toString()));
      }
      if (!jsonObj.get("BSBA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BSBA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BSBA").toString()));
      }
      if (!jsonObj.get("CenterLatitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CenterLatitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CenterLatitude").toString()));
      }
      if (!jsonObj.get("CenterLongitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CenterLongitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CenterLongitude").toString()));
      }
      if (!jsonObj.get("Child").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Child` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Child").toString()));
      }
      if (!jsonObj.get("Grades9to12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Grades9to12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Grades9to12").toString()));
      }
      if (!jsonObj.get("HSDiploma").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HSDiploma` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HSDiploma").toString()));
      }
      if (!jsonObj.get("HispanicOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HispanicOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HispanicOrigin").toString()));
      }
      if (!jsonObj.get("Households").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Households` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Households").toString()));
      }
      if (!jsonObj.get("HouseholdsPublicAssistance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HouseholdsPublicAssistance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HouseholdsPublicAssistance").toString()));
      }
      if (!jsonObj.get("HousingUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HousingUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HousingUnits").toString()));
      }
      if (!jsonObj.get("Income15to25k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Income15to25k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Income15to25k").toString()));
      }
      if (!jsonObj.get("Income25to50k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Income25to50k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Income25to50k").toString()));
      }
      if (!jsonObj.get("Income50to75k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Income50to75k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Income50to75k").toString()));
      }
      if (!jsonObj.get("Income75kPlus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Income75kPlus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Income75kPlus").toString()));
      }
      if (!jsonObj.get("IncomeLess15k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncomeLess15k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncomeLess15k").toString()));
      }
      if (!jsonObj.get("LandArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LandArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LandArea").toString()));
      }
      if (!jsonObj.get("Less9thGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Less9thGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Less9thGrade").toString()));
      }
      if (!jsonObj.get("Minors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Minors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Minors").toString()));
      }
      if (!jsonObj.get("OtherMultiracial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherMultiracial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OtherMultiracial").toString()));
      }
      if (!jsonObj.get("PercentMinority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PercentMinority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PercentMinority").toString()));
      }
      if (!jsonObj.get("PersonsBelowPovertyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PersonsBelowPovertyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PersonsBelowPovertyLevel").toString()));
      }
      if (!jsonObj.get("PopulationDensity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PopulationDensity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PopulationDensity").toString()));
      }
      if (!jsonObj.get("Radius").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Radius` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Radius").toString()));
      }
      if (!jsonObj.get("Seniors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seniors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seniors").toString()));
      }
      if (!jsonObj.get("SomeCollege").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SomeCollege` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SomeCollege").toString()));
      }
      if (!jsonObj.get("TotalPersons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPersons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPersons").toString()));
      }
      if (!jsonObj.get("WaterArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WaterArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WaterArea").toString()));
      }
      if (!jsonObj.get("White").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `White` to be a primitive type in the JSON string but got `%s`", jsonObj.get("White").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr061.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr061' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr061> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr061.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr061>() {
           @Override
           public void write(JsonWriter out, Dfr061 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr061 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr061 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr061
   * @throws IOException if the JSON string is invalid with respect to Dfr061
   */
  public static Dfr061 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr061.class);
  }

  /**
   * Convert an instance of Dfr061 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

