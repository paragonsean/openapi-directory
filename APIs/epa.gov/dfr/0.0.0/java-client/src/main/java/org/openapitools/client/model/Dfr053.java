/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dfr055;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Case Formal Action
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr053 {
  public static final String SERIALIZED_NAME_ACTIVITY_NAME = "ActivityName";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_NAME)
  private String activityName;

  public static final String SERIALIZED_NAME_CASE_I_D = "CaseID";
  @SerializedName(SERIALIZED_NAME_CASE_I_D)
  private String caseID;

  public static final String SERIALIZED_NAME_CASE_NAME = "CaseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_TYPE = "CaseType";
  @SerializedName(SERIALIZED_NAME_CASE_TYPE)
  private String caseType;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "IssueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_LAW_SECTION_CODE = "LawSectionCode";
  @SerializedName(SERIALIZED_NAME_LAW_SECTION_CODE)
  private String lawSectionCode;

  public static final String SERIALIZED_NAME_LEAD_AGENCY = "LeadAgency";
  @SerializedName(SERIALIZED_NAME_LEAD_AGENCY)
  private String leadAgency;

  public static final String SERIALIZED_NAME_NUMBER_SETTLEMENTS = "NumberSettlements";
  @SerializedName(SERIALIZED_NAME_NUMBER_SETTLEMENTS)
  private String numberSettlements;

  public static final String SERIALIZED_NAME_SETTLEMENTS = "Settlements";
  @SerializedName(SERIALIZED_NAME_SETTLEMENTS)
  private Dfr055 settlements;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE_CODE = "StatuteCode";
  @SerializedName(SERIALIZED_NAME_STATUTE_CODE)
  private String statuteCode;

  public Dfr053() {
  }

  public Dfr053 activityName(String activityName) {
    this.activityName = activityName;
    return this;
  }

  /**
   * The user-created name for an activity.
   * @return activityName
   */
  @javax.annotation.Nonnull
  public String getActivityName() {
    return activityName;
  }

  public void setActivityName(String activityName) {
    this.activityName = activityName;
  }


  public Dfr053 caseID(String caseID) {
    this.caseID = caseID;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return caseID
   */
  @javax.annotation.Nonnull
  public String getCaseID() {
    return caseID;
  }

  public void setCaseID(String caseID) {
    this.caseID = caseID;
  }


  public Dfr053 caseName(String caseName) {
    this.caseName = caseName;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
   * @return caseName
   */
  @javax.annotation.Nonnull
  public String getCaseName() {
    return caseName;
  }

  public void setCaseName(String caseName) {
    this.caseName = caseName;
  }


  public Dfr053 caseType(String caseType) {
    this.caseType = caseType;
    return this;
  }

  /**
   * The unique code that identifies a type of compliance event or enforcement action.
   * @return caseType
   */
  @javax.annotation.Nonnull
  public String getCaseType() {
    return caseType;
  }

  public void setCaseType(String caseType) {
    this.caseType = caseType;
  }


  public Dfr053 dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public Dfr053 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Dfr053 issueDate(String issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.
   * @return issueDate
   */
  @javax.annotation.Nonnull
  public String getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(String issueDate) {
    this.issueDate = issueDate;
  }


  public Dfr053 lawSectionCode(String lawSectionCode) {
    this.lawSectionCode = lawSectionCode;
    return this;
  }

  /**
   * The unique identifier for the Section(s) of law violated and cited in the activity.
   * @return lawSectionCode
   */
  @javax.annotation.Nonnull
  public String getLawSectionCode() {
    return lawSectionCode;
  }

  public void setLawSectionCode(String lawSectionCode) {
    this.lawSectionCode = lawSectionCode;
  }


  public Dfr053 leadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return leadAgency
   */
  @javax.annotation.Nonnull
  public String getLeadAgency() {
    return leadAgency;
  }

  public void setLeadAgency(String leadAgency) {
    this.leadAgency = leadAgency;
  }


  public Dfr053 numberSettlements(String numberSettlements) {
    this.numberSettlements = numberSettlements;
    return this;
  }

  /**
   * The number of final orders issued under the enforcement action.
   * @return numberSettlements
   */
  @javax.annotation.Nonnull
  public String getNumberSettlements() {
    return numberSettlements;
  }

  public void setNumberSettlements(String numberSettlements) {
    this.numberSettlements = numberSettlements;
  }


  public Dfr053 settlements(Dfr055 settlements) {
    this.settlements = settlements;
    return this;
  }

  /**
   * Get settlements
   * @return settlements
   */
  @javax.annotation.Nonnull
  public Dfr055 getSettlements() {
    return settlements;
  }

  public void setSettlements(Dfr055 settlements) {
    this.settlements = settlements;
  }


  public Dfr053 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr053 statuteCode(String statuteCode) {
    this.statuteCode = statuteCode;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return statuteCode
   */
  @javax.annotation.Nonnull
  public String getStatuteCode() {
    return statuteCode;
  }

  public void setStatuteCode(String statuteCode) {
    this.statuteCode = statuteCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr053 dfr053 = (Dfr053) o;
    return Objects.equals(this.activityName, dfr053.activityName) &&
        Objects.equals(this.caseID, dfr053.caseID) &&
        Objects.equals(this.caseName, dfr053.caseName) &&
        Objects.equals(this.caseType, dfr053.caseType) &&
        Objects.equals(this.dataSource, dfr053.dataSource) &&
        Objects.equals(this.epASystem, dfr053.epASystem) &&
        Objects.equals(this.issueDate, dfr053.issueDate) &&
        Objects.equals(this.lawSectionCode, dfr053.lawSectionCode) &&
        Objects.equals(this.leadAgency, dfr053.leadAgency) &&
        Objects.equals(this.numberSettlements, dfr053.numberSettlements) &&
        Objects.equals(this.settlements, dfr053.settlements) &&
        Objects.equals(this.sourceID, dfr053.sourceID) &&
        Objects.equals(this.statuteCode, dfr053.statuteCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityName, caseID, caseName, caseType, dataSource, epASystem, issueDate, lawSectionCode, leadAgency, numberSettlements, settlements, sourceID, statuteCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr053 {\n");
    sb.append("    activityName: ").append(toIndentedString(activityName)).append("\n");
    sb.append("    caseID: ").append(toIndentedString(caseID)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseType: ").append(toIndentedString(caseType)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    lawSectionCode: ").append(toIndentedString(lawSectionCode)).append("\n");
    sb.append("    leadAgency: ").append(toIndentedString(leadAgency)).append("\n");
    sb.append("    numberSettlements: ").append(toIndentedString(numberSettlements)).append("\n");
    sb.append("    settlements: ").append(toIndentedString(settlements)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statuteCode: ").append(toIndentedString(statuteCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityName");
    openapiFields.add("CaseID");
    openapiFields.add("CaseName");
    openapiFields.add("CaseType");
    openapiFields.add("DataSource");
    openapiFields.add("EPASystem");
    openapiFields.add("IssueDate");
    openapiFields.add("LawSectionCode");
    openapiFields.add("LeadAgency");
    openapiFields.add("NumberSettlements");
    openapiFields.add("Settlements");
    openapiFields.add("SourceID");
    openapiFields.add("StatuteCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActivityName");
    openapiRequiredFields.add("CaseID");
    openapiRequiredFields.add("CaseName");
    openapiRequiredFields.add("CaseType");
    openapiRequiredFields.add("DataSource");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("IssueDate");
    openapiRequiredFields.add("LawSectionCode");
    openapiRequiredFields.add("LeadAgency");
    openapiRequiredFields.add("NumberSettlements");
    openapiRequiredFields.add("Settlements");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("StatuteCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr053
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr053.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr053 is not found in the empty JSON string", Dfr053.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr053.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr053` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr053.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActivityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivityName").toString()));
      }
      if (!jsonObj.get("CaseID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseID").toString()));
      }
      if (!jsonObj.get("CaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseName").toString()));
      }
      if (!jsonObj.get("CaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseType").toString()));
      }
      if (!jsonObj.get("DataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataSource").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("IssueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssueDate").toString()));
      }
      if (!jsonObj.get("LawSectionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LawSectionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LawSectionCode").toString()));
      }
      if (!jsonObj.get("LeadAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAgency").toString()));
      }
      if (!jsonObj.get("NumberSettlements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumberSettlements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumberSettlements").toString()));
      }
      // validate the required field `Settlements`
      Dfr055.validateJsonElement(jsonObj.get("Settlements"));
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("StatuteCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatuteCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatuteCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr053.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr053' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr053> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr053.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr053>() {
           @Override
           public void write(JsonWriter out, Dfr053 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr053 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr053 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr053
   * @throws IOException if the JSON string is invalid with respect to Dfr053
   */
  public static Dfr053 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr053.class);
  }

  /**
   * Convert an instance of Dfr053 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

