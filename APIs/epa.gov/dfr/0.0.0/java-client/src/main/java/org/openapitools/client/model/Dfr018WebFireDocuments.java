/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Web Fire Documents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr018WebFireDocuments {
  public static final String SERIALIZED_NAME_DOCUMENT_LINK = "DocumentLink";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LINK)
  private String documentLink;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "DocumentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "DocumentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "FacilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  private String facilityName;

  public static final String SERIALIZED_NAME_REGISTRY_ID = "RegistryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPORT_DOC_TYPE = "ReportDocType";
  @SerializedName(SERIALIZED_NAME_REPORT_DOC_TYPE)
  private String reportDocType;

  public static final String SERIALIZED_NAME_REPORT_SUBMISSION_DATE = "ReportSubmissionDate";
  @SerializedName(SERIALIZED_NAME_REPORT_SUBMISSION_DATE)
  private String reportSubmissionDate;

  public Dfr018WebFireDocuments() {
  }

  public Dfr018WebFireDocuments documentLink(String documentLink) {
    this.documentLink = documentLink;
    return this;
  }

  /**
   * URLS for documents that EPA has colleted that are related to this Case.
   * @return documentLink
   */
  @javax.annotation.Nonnull
  public String getDocumentLink() {
    return documentLink;
  }

  public void setDocumentLink(String documentLink) {
    this.documentLink = documentLink;
  }


  public Dfr018WebFireDocuments documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the entire selected date range
   * @return documentName
   */
  @javax.annotation.Nonnull
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public Dfr018WebFireDocuments documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the entire selected date range
   * @return documentType
   */
  @javax.annotation.Nonnull
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public Dfr018WebFireDocuments facilityName(String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * The name of the facility.
   * @return facilityName
   */
  @javax.annotation.Nonnull
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(String facilityName) {
    this.facilityName = facilityName;
  }


  public Dfr018WebFireDocuments registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * 12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records
   * @return registryId
   */
  @javax.annotation.Nonnull
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public Dfr018WebFireDocuments reportDocType(String reportDocType) {
    this.reportDocType = reportDocType;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the entire selected date range
   * @return reportDocType
   */
  @javax.annotation.Nonnull
  public String getReportDocType() {
    return reportDocType;
  }

  public void setReportDocType(String reportDocType) {
    this.reportDocType = reportDocType;
  }


  public Dfr018WebFireDocuments reportSubmissionDate(String reportSubmissionDate) {
    this.reportSubmissionDate = reportSubmissionDate;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the entire selected date range
   * @return reportSubmissionDate
   */
  @javax.annotation.Nonnull
  public String getReportSubmissionDate() {
    return reportSubmissionDate;
  }

  public void setReportSubmissionDate(String reportSubmissionDate) {
    this.reportSubmissionDate = reportSubmissionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr018WebFireDocuments dfr018WebFireDocuments = (Dfr018WebFireDocuments) o;
    return Objects.equals(this.documentLink, dfr018WebFireDocuments.documentLink) &&
        Objects.equals(this.documentName, dfr018WebFireDocuments.documentName) &&
        Objects.equals(this.documentType, dfr018WebFireDocuments.documentType) &&
        Objects.equals(this.facilityName, dfr018WebFireDocuments.facilityName) &&
        Objects.equals(this.registryId, dfr018WebFireDocuments.registryId) &&
        Objects.equals(this.reportDocType, dfr018WebFireDocuments.reportDocType) &&
        Objects.equals(this.reportSubmissionDate, dfr018WebFireDocuments.reportSubmissionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentLink, documentName, documentType, facilityName, registryId, reportDocType, reportSubmissionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr018WebFireDocuments {\n");
    sb.append("    documentLink: ").append(toIndentedString(documentLink)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    reportDocType: ").append(toIndentedString(reportDocType)).append("\n");
    sb.append("    reportSubmissionDate: ").append(toIndentedString(reportSubmissionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentLink");
    openapiFields.add("DocumentName");
    openapiFields.add("DocumentType");
    openapiFields.add("FacilityName");
    openapiFields.add("RegistryId");
    openapiFields.add("ReportDocType");
    openapiFields.add("ReportSubmissionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentLink");
    openapiRequiredFields.add("DocumentName");
    openapiRequiredFields.add("DocumentType");
    openapiRequiredFields.add("FacilityName");
    openapiRequiredFields.add("RegistryId");
    openapiRequiredFields.add("ReportDocType");
    openapiRequiredFields.add("ReportSubmissionDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr018WebFireDocuments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr018WebFireDocuments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr018WebFireDocuments is not found in the empty JSON string", Dfr018WebFireDocuments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr018WebFireDocuments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr018WebFireDocuments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr018WebFireDocuments.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DocumentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentLink").toString()));
      }
      if (!jsonObj.get("DocumentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentName").toString()));
      }
      if (!jsonObj.get("DocumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentType").toString()));
      }
      if (!jsonObj.get("FacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityName").toString()));
      }
      if (!jsonObj.get("RegistryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryId").toString()));
      }
      if (!jsonObj.get("ReportDocType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportDocType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportDocType").toString()));
      }
      if (!jsonObj.get("ReportSubmissionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportSubmissionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportSubmissionDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr018WebFireDocuments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr018WebFireDocuments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr018WebFireDocuments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr018WebFireDocuments.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr018WebFireDocuments>() {
           @Override
           public void write(JsonWriter out, Dfr018WebFireDocuments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr018WebFireDocuments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr018WebFireDocuments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr018WebFireDocuments
   * @throws IOException if the JSON string is invalid with respect to Dfr018WebFireDocuments
   */
  public static Dfr018WebFireDocuments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr018WebFireDocuments.class);
  }

  /**
   * Convert an instance of Dfr018WebFireDocuments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

