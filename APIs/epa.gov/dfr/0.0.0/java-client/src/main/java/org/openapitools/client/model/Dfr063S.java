/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Program Date Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr063S {
  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_PROGRAM = "Program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_START_DATE3_YR = "StartDate3Yr";
  @SerializedName(SERIALIZED_NAME_START_DATE3_YR)
  private String startDate3Yr;

  public static final String SERIALIZED_NAME_START_DATE5_YR = "StartDate5Yr";
  @SerializedName(SERIALIZED_NAME_START_DATE5_YR)
  private String startDate5Yr;

  public Dfr063S() {
  }

  public Dfr063S endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date for the date range of interest. Formatted as mm/dd/yyyy
   * @return endDate
   */
  @javax.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Dfr063S program(String program) {
    this.program = program;
    return this;
  }

  /**
   * The source database for the EPA programs information.
   * @return program
   */
  @javax.annotation.Nonnull
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }


  public Dfr063S startDate3Yr(String startDate3Yr) {
    this.startDate3Yr = startDate3Yr;
    return this;
  }

  /**
   * ?? - mm/dd/yyyy
   * @return startDate3Yr
   */
  @javax.annotation.Nonnull
  public String getStartDate3Yr() {
    return startDate3Yr;
  }

  public void setStartDate3Yr(String startDate3Yr) {
    this.startDate3Yr = startDate3Yr;
  }


  public Dfr063S startDate5Yr(String startDate5Yr) {
    this.startDate5Yr = startDate5Yr;
    return this;
  }

  /**
   * ?? - mm/dd/yyyy
   * @return startDate5Yr
   */
  @javax.annotation.Nonnull
  public String getStartDate5Yr() {
    return startDate5Yr;
  }

  public void setStartDate5Yr(String startDate5Yr) {
    this.startDate5Yr = startDate5Yr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr063S dfr063S = (Dfr063S) o;
    return Objects.equals(this.endDate, dfr063S.endDate) &&
        Objects.equals(this.program, dfr063S.program) &&
        Objects.equals(this.startDate3Yr, dfr063S.startDate3Yr) &&
        Objects.equals(this.startDate5Yr, dfr063S.startDate5Yr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, program, startDate3Yr, startDate5Yr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr063S {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    startDate3Yr: ").append(toIndentedString(startDate3Yr)).append("\n");
    sb.append("    startDate5Yr: ").append(toIndentedString(startDate5Yr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndDate");
    openapiFields.add("Program");
    openapiFields.add("StartDate3Yr");
    openapiFields.add("StartDate5Yr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EndDate");
    openapiRequiredFields.add("Program");
    openapiRequiredFields.add("StartDate3Yr");
    openapiRequiredFields.add("StartDate5Yr");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr063S
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr063S.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr063S is not found in the empty JSON string", Dfr063S.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr063S.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr063S` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dfr063S.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndDate").toString()));
      }
      if (!jsonObj.get("Program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Program").toString()));
      }
      if (!jsonObj.get("StartDate3Yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate3Yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate3Yr").toString()));
      }
      if (!jsonObj.get("StartDate5Yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate5Yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate5Yr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr063S.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr063S' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr063S> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr063S.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr063S>() {
           @Override
           public void write(JsonWriter out, Dfr063S value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr063S read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr063S given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr063S
   * @throws IOException if the JSON string is invalid with respect to Dfr063S
   */
  public static Dfr063S fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr063S.class);
  }

  /**
   * Convert an instance of Dfr063S to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

