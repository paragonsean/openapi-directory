/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dfr071;
import org.openapitools.client.model.Dfr072;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lead and Copper Rule Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:18.338738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dfr070 {
  public static final String SERIALIZED_NAME_COPPER_SAMPLES = "CopperSamples";
  @SerializedName(SERIALIZED_NAME_COPPER_SAMPLES)
  private List<Dfr071> copperSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_CU_A_L_E = "CuALE";
  @SerializedName(SERIALIZED_NAME_CU_A_L_E)
  private String cuALE;

  public static final String SERIALIZED_NAME_CU_A_L_E_UNITS = "CuALEUnits";
  @SerializedName(SERIALIZED_NAME_CU_A_L_E_UNITS)
  private String cuALEUnits;

  public static final String SERIALIZED_NAME_CU_A_L_E_VALUE = "CuALEValue";
  @SerializedName(SERIALIZED_NAME_CU_A_L_E_VALUE)
  private String cuALEValue;

  public static final String SERIALIZED_NAME_CU_SAMPLE_DATES = "CuSampleDates";
  @SerializedName(SERIALIZED_NAME_CU_SAMPLE_DATES)
  private String cuSampleDates;

  public static final String SERIALIZED_NAME_CU_VIOL = "CuViol";
  @SerializedName(SERIALIZED_NAME_CU_VIOL)
  private String cuViol;

  public static final String SERIALIZED_NAME_LEAD_AND_COPPER_VIOL = "LeadAndCopperViol";
  @SerializedName(SERIALIZED_NAME_LEAD_AND_COPPER_VIOL)
  private String leadAndCopperViol;

  public static final String SERIALIZED_NAME_LEAD_COPPER_RULE_HEALTH_BASED_VIOL = "LeadCopperRuleHealthBasedViol";
  @SerializedName(SERIALIZED_NAME_LEAD_COPPER_RULE_HEALTH_BASED_VIOL)
  private String leadCopperRuleHealthBasedViol;

  public static final String SERIALIZED_NAME_LEAD_SAMPLES = "LeadSamples";
  @SerializedName(SERIALIZED_NAME_LEAD_SAMPLES)
  private List<Dfr072> leadSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_PB_A_L_E = "PbALE";
  @SerializedName(SERIALIZED_NAME_PB_A_L_E)
  private String pbALE;

  public static final String SERIALIZED_NAME_PB_A_L_E_UNITS = "PbALEUnits";
  @SerializedName(SERIALIZED_NAME_PB_A_L_E_UNITS)
  private String pbALEUnits;

  public static final String SERIALIZED_NAME_PB_A_L_E_VALUE = "PbALEValue";
  @SerializedName(SERIALIZED_NAME_PB_A_L_E_VALUE)
  private String pbALEValue;

  public static final String SERIALIZED_NAME_PB_SAMPLE_DATES = "PbSampleDates";
  @SerializedName(SERIALIZED_NAME_PB_SAMPLE_DATES)
  private String pbSampleDates;

  public static final String SERIALIZED_NAME_PB_VIOL = "PbViol";
  @SerializedName(SERIALIZED_NAME_PB_VIOL)
  private String pbViol;

  public static final String SERIALIZED_NAME_RULE_CODE350_VIOL = "RuleCode350Viol";
  @SerializedName(SERIALIZED_NAME_RULE_CODE350_VIOL)
  private String ruleCode350Viol;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_I_C_U90 = "iCU90";
  @SerializedName(SERIALIZED_NAME_I_C_U90)
  private String iCU90;

  public static final String SERIALIZED_NAME_I_P_B90 = "iPB90";
  @SerializedName(SERIALIZED_NAME_I_P_B90)
  private String iPB90;

  public Dfr070() {
  }

  public Dfr070 copperSamples(List<Dfr071> copperSamples) {
    this.copperSamples = copperSamples;
    return this;
  }

  public Dfr070 addCopperSamplesItem(Dfr071 copperSamplesItem) {
    if (this.copperSamples == null) {
      this.copperSamples = new ArrayList<>();
    }
    this.copperSamples.add(copperSamplesItem);
    return this;
  }

  /**
   * Get copperSamples
   * @return copperSamples
   */
  @javax.annotation.Nullable
  public List<Dfr071> getCopperSamples() {
    return copperSamples;
  }

  public void setCopperSamples(List<Dfr071> copperSamples) {
    this.copperSamples = copperSamples;
  }


  public Dfr070 cuALE(String cuALE) {
    this.cuALE = cuALE;
    return this;
  }

  /**
   * The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.
   * @return cuALE
   */
  @javax.annotation.Nullable
  public String getCuALE() {
    return cuALE;
  }

  public void setCuALE(String cuALE) {
    this.cuALE = cuALE;
  }


  public Dfr070 cuALEUnits(String cuALEUnits) {
    this.cuALEUnits = cuALEUnits;
    return this;
  }

  /**
   * The copper action level exceedances measurement units.
   * @return cuALEUnits
   */
  @javax.annotation.Nullable
  public String getCuALEUnits() {
    return cuALEUnits;
  }

  public void setCuALEUnits(String cuALEUnits) {
    this.cuALEUnits = cuALEUnits;
  }


  public Dfr070 cuALEValue(String cuALEValue) {
    this.cuALEValue = cuALEValue;
    return this;
  }

  /**
   * The copper action level exceedance value.
   * @return cuALEValue
   */
  @javax.annotation.Nullable
  public String getCuALEValue() {
    return cuALEValue;
  }

  public void setCuALEValue(String cuALEValue) {
    this.cuALEValue = cuALEValue;
  }


  public Dfr070 cuSampleDates(String cuSampleDates) {
    this.cuSampleDates = cuSampleDates;
    return this;
  }

  /**
   * The dates during which tap water samples were collected.
   * @return cuSampleDates
   */
  @javax.annotation.Nullable
  public String getCuSampleDates() {
    return cuSampleDates;
  }

  public void setCuSampleDates(String cuSampleDates) {
    this.cuSampleDates = cuSampleDates;
  }


  public Dfr070 cuViol(String cuViol) {
    this.cuViol = cuViol;
    return this;
  }

  /**
   * The number of copper violations in the last five years.
   * @return cuViol
   */
  @javax.annotation.Nullable
  public String getCuViol() {
    return cuViol;
  }

  public void setCuViol(String cuViol) {
    this.cuViol = cuViol;
  }


  public Dfr070 leadAndCopperViol(String leadAndCopperViol) {
    this.leadAndCopperViol = leadAndCopperViol;
    return this;
  }

  /**
   * The number of lead and copper violations.
   * @return leadAndCopperViol
   */
  @javax.annotation.Nullable
  public String getLeadAndCopperViol() {
    return leadAndCopperViol;
  }

  public void setLeadAndCopperViol(String leadAndCopperViol) {
    this.leadAndCopperViol = leadAndCopperViol;
  }


  public Dfr070 leadCopperRuleHealthBasedViol(String leadCopperRuleHealthBasedViol) {
    this.leadCopperRuleHealthBasedViol = leadCopperRuleHealthBasedViol;
    return this;
  }

  /**
   * The count of open health-based violations of the Lead and Copper Rule in the past five years.
   * @return leadCopperRuleHealthBasedViol
   */
  @javax.annotation.Nullable
  public String getLeadCopperRuleHealthBasedViol() {
    return leadCopperRuleHealthBasedViol;
  }

  public void setLeadCopperRuleHealthBasedViol(String leadCopperRuleHealthBasedViol) {
    this.leadCopperRuleHealthBasedViol = leadCopperRuleHealthBasedViol;
  }


  public Dfr070 leadSamples(List<Dfr072> leadSamples) {
    this.leadSamples = leadSamples;
    return this;
  }

  public Dfr070 addLeadSamplesItem(Dfr072 leadSamplesItem) {
    if (this.leadSamples == null) {
      this.leadSamples = new ArrayList<>();
    }
    this.leadSamples.add(leadSamplesItem);
    return this;
  }

  /**
   * Get leadSamples
   * @return leadSamples
   */
  @javax.annotation.Nullable
  public List<Dfr072> getLeadSamples() {
    return leadSamples;
  }

  public void setLeadSamples(List<Dfr072> leadSamples) {
    this.leadSamples = leadSamples;
  }


  public Dfr070 pbALE(String pbALE) {
    this.pbALE = pbALE;
    return this;
  }

  /**
   * The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.
   * @return pbALE
   */
  @javax.annotation.Nullable
  public String getPbALE() {
    return pbALE;
  }

  public void setPbALE(String pbALE) {
    this.pbALE = pbALE;
  }


  public Dfr070 pbALEUnits(String pbALEUnits) {
    this.pbALEUnits = pbALEUnits;
    return this;
  }

  /**
   * The lead action level exceedance measurement units.
   * @return pbALEUnits
   */
  @javax.annotation.Nullable
  public String getPbALEUnits() {
    return pbALEUnits;
  }

  public void setPbALEUnits(String pbALEUnits) {
    this.pbALEUnits = pbALEUnits;
  }


  public Dfr070 pbALEValue(String pbALEValue) {
    this.pbALEValue = pbALEValue;
    return this;
  }

  /**
   * The lead action level exceedance sample value.
   * @return pbALEValue
   */
  @javax.annotation.Nullable
  public String getPbALEValue() {
    return pbALEValue;
  }

  public void setPbALEValue(String pbALEValue) {
    this.pbALEValue = pbALEValue;
  }


  public Dfr070 pbSampleDates(String pbSampleDates) {
    this.pbSampleDates = pbSampleDates;
    return this;
  }

  /**
   * The dates during which tap water samples were collected.
   * @return pbSampleDates
   */
  @javax.annotation.Nullable
  public String getPbSampleDates() {
    return pbSampleDates;
  }

  public void setPbSampleDates(String pbSampleDates) {
    this.pbSampleDates = pbSampleDates;
  }


  public Dfr070 pbViol(String pbViol) {
    this.pbViol = pbViol;
    return this;
  }

  /**
   * The number of lead violations in the last five years.
   * @return pbViol
   */
  @javax.annotation.Nullable
  public String getPbViol() {
    return pbViol;
  }

  public void setPbViol(String pbViol) {
    this.pbViol = pbViol;
  }


  public Dfr070 ruleCode350Viol(String ruleCode350Viol) {
    this.ruleCode350Viol = ruleCode350Viol;
    return this;
  }

  /**
   * The count of open health-based violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules.
   * @return ruleCode350Viol
   */
  @javax.annotation.Nullable
  public String getRuleCode350Viol() {
    return ruleCode350Viol;
  }

  public void setRuleCode350Viol(String ruleCode350Viol) {
    this.ruleCode350Viol = ruleCode350Viol;
  }


  public Dfr070 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nullable
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Dfr070 iCU90(String iCU90) {
    this.iCU90 = iCU90;
    return this;
  }

  /**
   * The number of times samples have been collected for copper in the last five years.
   * @return iCU90
   */
  @javax.annotation.Nullable
  public String getiCU90() {
    return iCU90;
  }

  public void setiCU90(String iCU90) {
    this.iCU90 = iCU90;
  }


  public Dfr070 iPB90(String iPB90) {
    this.iPB90 = iPB90;
    return this;
  }

  /**
   * The number of times samples have been collected for lead in the last five years.
   * @return iPB90
   */
  @javax.annotation.Nullable
  public String getiPB90() {
    return iPB90;
  }

  public void setiPB90(String iPB90) {
    this.iPB90 = iPB90;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dfr070 dfr070 = (Dfr070) o;
    return Objects.equals(this.copperSamples, dfr070.copperSamples) &&
        Objects.equals(this.cuALE, dfr070.cuALE) &&
        Objects.equals(this.cuALEUnits, dfr070.cuALEUnits) &&
        Objects.equals(this.cuALEValue, dfr070.cuALEValue) &&
        Objects.equals(this.cuSampleDates, dfr070.cuSampleDates) &&
        Objects.equals(this.cuViol, dfr070.cuViol) &&
        Objects.equals(this.leadAndCopperViol, dfr070.leadAndCopperViol) &&
        Objects.equals(this.leadCopperRuleHealthBasedViol, dfr070.leadCopperRuleHealthBasedViol) &&
        Objects.equals(this.leadSamples, dfr070.leadSamples) &&
        Objects.equals(this.pbALE, dfr070.pbALE) &&
        Objects.equals(this.pbALEUnits, dfr070.pbALEUnits) &&
        Objects.equals(this.pbALEValue, dfr070.pbALEValue) &&
        Objects.equals(this.pbSampleDates, dfr070.pbSampleDates) &&
        Objects.equals(this.pbViol, dfr070.pbViol) &&
        Objects.equals(this.ruleCode350Viol, dfr070.ruleCode350Viol) &&
        Objects.equals(this.sourceID, dfr070.sourceID) &&
        Objects.equals(this.iCU90, dfr070.iCU90) &&
        Objects.equals(this.iPB90, dfr070.iPB90);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copperSamples, cuALE, cuALEUnits, cuALEValue, cuSampleDates, cuViol, leadAndCopperViol, leadCopperRuleHealthBasedViol, leadSamples, pbALE, pbALEUnits, pbALEValue, pbSampleDates, pbViol, ruleCode350Viol, sourceID, iCU90, iPB90);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dfr070 {\n");
    sb.append("    copperSamples: ").append(toIndentedString(copperSamples)).append("\n");
    sb.append("    cuALE: ").append(toIndentedString(cuALE)).append("\n");
    sb.append("    cuALEUnits: ").append(toIndentedString(cuALEUnits)).append("\n");
    sb.append("    cuALEValue: ").append(toIndentedString(cuALEValue)).append("\n");
    sb.append("    cuSampleDates: ").append(toIndentedString(cuSampleDates)).append("\n");
    sb.append("    cuViol: ").append(toIndentedString(cuViol)).append("\n");
    sb.append("    leadAndCopperViol: ").append(toIndentedString(leadAndCopperViol)).append("\n");
    sb.append("    leadCopperRuleHealthBasedViol: ").append(toIndentedString(leadCopperRuleHealthBasedViol)).append("\n");
    sb.append("    leadSamples: ").append(toIndentedString(leadSamples)).append("\n");
    sb.append("    pbALE: ").append(toIndentedString(pbALE)).append("\n");
    sb.append("    pbALEUnits: ").append(toIndentedString(pbALEUnits)).append("\n");
    sb.append("    pbALEValue: ").append(toIndentedString(pbALEValue)).append("\n");
    sb.append("    pbSampleDates: ").append(toIndentedString(pbSampleDates)).append("\n");
    sb.append("    pbViol: ").append(toIndentedString(pbViol)).append("\n");
    sb.append("    ruleCode350Viol: ").append(toIndentedString(ruleCode350Viol)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    iCU90: ").append(toIndentedString(iCU90)).append("\n");
    sb.append("    iPB90: ").append(toIndentedString(iPB90)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CopperSamples");
    openapiFields.add("CuALE");
    openapiFields.add("CuALEUnits");
    openapiFields.add("CuALEValue");
    openapiFields.add("CuSampleDates");
    openapiFields.add("CuViol");
    openapiFields.add("LeadAndCopperViol");
    openapiFields.add("LeadCopperRuleHealthBasedViol");
    openapiFields.add("LeadSamples");
    openapiFields.add("PbALE");
    openapiFields.add("PbALEUnits");
    openapiFields.add("PbALEValue");
    openapiFields.add("PbSampleDates");
    openapiFields.add("PbViol");
    openapiFields.add("RuleCode350Viol");
    openapiFields.add("SourceID");
    openapiFields.add("iCU90");
    openapiFields.add("iPB90");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dfr070
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dfr070.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dfr070 is not found in the empty JSON string", Dfr070.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dfr070.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dfr070` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("CopperSamples") != null && !jsonObj.get("CopperSamples").isJsonNull()) {
        JsonArray jsonArraycopperSamples = jsonObj.getAsJsonArray("CopperSamples");
        if (jsonArraycopperSamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CopperSamples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CopperSamples` to be an array in the JSON string but got `%s`", jsonObj.get("CopperSamples").toString()));
          }

          // validate the optional field `CopperSamples` (array)
          for (int i = 0; i < jsonArraycopperSamples.size(); i++) {
            Dfr071.validateJsonElement(jsonArraycopperSamples.get(i));
          };
        }
      }
      if ((jsonObj.get("CuALE") != null && !jsonObj.get("CuALE").isJsonNull()) && !jsonObj.get("CuALE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuALE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuALE").toString()));
      }
      if ((jsonObj.get("CuALEUnits") != null && !jsonObj.get("CuALEUnits").isJsonNull()) && !jsonObj.get("CuALEUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuALEUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuALEUnits").toString()));
      }
      if ((jsonObj.get("CuALEValue") != null && !jsonObj.get("CuALEValue").isJsonNull()) && !jsonObj.get("CuALEValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuALEValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuALEValue").toString()));
      }
      if ((jsonObj.get("CuSampleDates") != null && !jsonObj.get("CuSampleDates").isJsonNull()) && !jsonObj.get("CuSampleDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuSampleDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuSampleDates").toString()));
      }
      if ((jsonObj.get("CuViol") != null && !jsonObj.get("CuViol").isJsonNull()) && !jsonObj.get("CuViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuViol").toString()));
      }
      if ((jsonObj.get("LeadAndCopperViol") != null && !jsonObj.get("LeadAndCopperViol").isJsonNull()) && !jsonObj.get("LeadAndCopperViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAndCopperViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAndCopperViol").toString()));
      }
      if ((jsonObj.get("LeadCopperRuleHealthBasedViol") != null && !jsonObj.get("LeadCopperRuleHealthBasedViol").isJsonNull()) && !jsonObj.get("LeadCopperRuleHealthBasedViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadCopperRuleHealthBasedViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadCopperRuleHealthBasedViol").toString()));
      }
      if (jsonObj.get("LeadSamples") != null && !jsonObj.get("LeadSamples").isJsonNull()) {
        JsonArray jsonArrayleadSamples = jsonObj.getAsJsonArray("LeadSamples");
        if (jsonArrayleadSamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeadSamples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeadSamples` to be an array in the JSON string but got `%s`", jsonObj.get("LeadSamples").toString()));
          }

          // validate the optional field `LeadSamples` (array)
          for (int i = 0; i < jsonArrayleadSamples.size(); i++) {
            Dfr072.validateJsonElement(jsonArrayleadSamples.get(i));
          };
        }
      }
      if ((jsonObj.get("PbALE") != null && !jsonObj.get("PbALE").isJsonNull()) && !jsonObj.get("PbALE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbALE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbALE").toString()));
      }
      if ((jsonObj.get("PbALEUnits") != null && !jsonObj.get("PbALEUnits").isJsonNull()) && !jsonObj.get("PbALEUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbALEUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbALEUnits").toString()));
      }
      if ((jsonObj.get("PbALEValue") != null && !jsonObj.get("PbALEValue").isJsonNull()) && !jsonObj.get("PbALEValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbALEValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbALEValue").toString()));
      }
      if ((jsonObj.get("PbSampleDates") != null && !jsonObj.get("PbSampleDates").isJsonNull()) && !jsonObj.get("PbSampleDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbSampleDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbSampleDates").toString()));
      }
      if ((jsonObj.get("PbViol") != null && !jsonObj.get("PbViol").isJsonNull()) && !jsonObj.get("PbViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbViol").toString()));
      }
      if ((jsonObj.get("RuleCode350Viol") != null && !jsonObj.get("RuleCode350Viol").isJsonNull()) && !jsonObj.get("RuleCode350Viol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RuleCode350Viol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RuleCode350Viol").toString()));
      }
      if ((jsonObj.get("SourceID") != null && !jsonObj.get("SourceID").isJsonNull()) && !jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if ((jsonObj.get("iCU90") != null && !jsonObj.get("iCU90").isJsonNull()) && !jsonObj.get("iCU90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iCU90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iCU90").toString()));
      }
      if ((jsonObj.get("iPB90") != null && !jsonObj.get("iPB90").isJsonNull()) && !jsonObj.get("iPB90").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iPB90` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iPB90").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dfr070.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dfr070' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dfr070> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dfr070.class));

       return (TypeAdapter<T>) new TypeAdapter<Dfr070>() {
           @Override
           public void write(JsonWriter out, Dfr070 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dfr070 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dfr070 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dfr070
   * @throws IOException if the JSON string is invalid with respect to Dfr070
   */
  public static Dfr070 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dfr070.class);
  }

  /**
   * Convert an instance of Dfr070 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

