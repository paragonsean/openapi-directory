/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr054 model module.
 * @module model/Dfr054
 * @version 0.0.0
 */
class Dfr054 {
    /**
     * Constructs a new <code>Dfr054</code>.
     * @alias module:model/Dfr054
     * @param compActionCost {String} The whole dollar amount of the estimated or actual value of the complying action activities.
     * @param federalPenalty {String} For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
     * @param sepCost {String} The total value of all SEPs for all settlements at the enforcement case.
     * @param settlementDate {String} For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
     * @param stateLocalPenalty {String} The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
     * @param totalCostRecovery {String} The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
     */
    constructor(compActionCost, federalPenalty, sepCost, settlementDate, stateLocalPenalty, totalCostRecovery) { 
        
        Dfr054.initialize(this, compActionCost, federalPenalty, sepCost, settlementDate, stateLocalPenalty, totalCostRecovery);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, compActionCost, federalPenalty, sepCost, settlementDate, stateLocalPenalty, totalCostRecovery) { 
        obj['CompActionCost'] = compActionCost;
        obj['FederalPenalty'] = federalPenalty;
        obj['SepCost'] = sepCost;
        obj['SettlementDate'] = settlementDate;
        obj['StateLocalPenalty'] = stateLocalPenalty;
        obj['TotalCostRecovery'] = totalCostRecovery;
    }

    /**
     * Constructs a <code>Dfr054</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr054} obj Optional instance to populate.
     * @return {module:model/Dfr054} The populated <code>Dfr054</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr054();

            if (data.hasOwnProperty('CompActionCost')) {
                obj['CompActionCost'] = ApiClient.convertToType(data['CompActionCost'], 'String');
            }
            if (data.hasOwnProperty('FederalPenalty')) {
                obj['FederalPenalty'] = ApiClient.convertToType(data['FederalPenalty'], 'String');
            }
            if (data.hasOwnProperty('SepCost')) {
                obj['SepCost'] = ApiClient.convertToType(data['SepCost'], 'String');
            }
            if (data.hasOwnProperty('SettlementDate')) {
                obj['SettlementDate'] = ApiClient.convertToType(data['SettlementDate'], 'String');
            }
            if (data.hasOwnProperty('StateLocalPenalty')) {
                obj['StateLocalPenalty'] = ApiClient.convertToType(data['StateLocalPenalty'], 'String');
            }
            if (data.hasOwnProperty('TotalCostRecovery')) {
                obj['TotalCostRecovery'] = ApiClient.convertToType(data['TotalCostRecovery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr054</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr054</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr054.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CompActionCost'] && !(typeof data['CompActionCost'] === 'string' || data['CompActionCost'] instanceof String)) {
            throw new Error("Expected the field `CompActionCost` to be a primitive type in the JSON string but got " + data['CompActionCost']);
        }
        // ensure the json data is a string
        if (data['FederalPenalty'] && !(typeof data['FederalPenalty'] === 'string' || data['FederalPenalty'] instanceof String)) {
            throw new Error("Expected the field `FederalPenalty` to be a primitive type in the JSON string but got " + data['FederalPenalty']);
        }
        // ensure the json data is a string
        if (data['SepCost'] && !(typeof data['SepCost'] === 'string' || data['SepCost'] instanceof String)) {
            throw new Error("Expected the field `SepCost` to be a primitive type in the JSON string but got " + data['SepCost']);
        }
        // ensure the json data is a string
        if (data['SettlementDate'] && !(typeof data['SettlementDate'] === 'string' || data['SettlementDate'] instanceof String)) {
            throw new Error("Expected the field `SettlementDate` to be a primitive type in the JSON string but got " + data['SettlementDate']);
        }
        // ensure the json data is a string
        if (data['StateLocalPenalty'] && !(typeof data['StateLocalPenalty'] === 'string' || data['StateLocalPenalty'] instanceof String)) {
            throw new Error("Expected the field `StateLocalPenalty` to be a primitive type in the JSON string but got " + data['StateLocalPenalty']);
        }
        // ensure the json data is a string
        if (data['TotalCostRecovery'] && !(typeof data['TotalCostRecovery'] === 'string' || data['TotalCostRecovery'] instanceof String)) {
            throw new Error("Expected the field `TotalCostRecovery` to be a primitive type in the JSON string but got " + data['TotalCostRecovery']);
        }

        return true;
    }


}

Dfr054.RequiredProperties = ["CompActionCost", "FederalPenalty", "SepCost", "SettlementDate", "StateLocalPenalty", "TotalCostRecovery"];

/**
 * The whole dollar amount of the estimated or actual value of the complying action activities.
 * @member {String} CompActionCost
 */
Dfr054.prototype['CompActionCost'] = undefined;

/**
 * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
 * @member {String} FederalPenalty
 */
Dfr054.prototype['FederalPenalty'] = undefined;

/**
 * The total value of all SEPs for all settlements at the enforcement case.
 * @member {String} SepCost
 */
Dfr054.prototype['SepCost'] = undefined;

/**
 * For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
 * @member {String} SettlementDate
 */
Dfr054.prototype['SettlementDate'] = undefined;

/**
 * The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
 * @member {String} StateLocalPenalty
 */
Dfr054.prototype['StateLocalPenalty'] = undefined;

/**
 * The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
 * @member {String} TotalCostRecovery
 */
Dfr054.prototype['TotalCostRecovery'] = undefined;






export default Dfr054;

