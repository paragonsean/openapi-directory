/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr061 model module.
 * @module model/Dfr061
 * @version 0.0.0
 */
class Dfr061 {
    /**
     * Constructs a new <code>Dfr061</code>.
     * Demographics Object
     * @alias module:model/Dfr061
     * @param adults {String} The number and percentage of persons living in the area who are between eighteen years old and sixty-five years old.
     * @param africanAmerican {String} The number and percentage of persons living in the area who are African American.
     * @param americanIndian {String} The number and percentage of persons living in the area who are of American Indian origin.
     * @param asianPacificIslander {String} The number and percentage of persons living in the area who are of Asian Pacific Islander origin.
     * @param BSBA {String} The number and percentage of persons living in the area who have a bachelor's degree or higher.
     * @param centerLatitude {String} The latitude of the facility in degrees, to four decimal places.
     * @param centerLongitude {String} The longitude of the facility in degrees, to four decimal places.
     * @param child {String} The number and percentage of persons living in the area who are five years old or younger.
     * @param grades9to12 {String} The number and percentage of persons living in the area who have completed grades nine through twelve
     * @param hSDiploma {String} The number and percentage of persons living in the area who have a high school diploma
     * @param hispanicOrigin {String} The number and percentage of persons living in the area who are of Hispanic origin
     * @param households {String} The number of households in the area being profiled
     * @param householdsPublicAssistance {String} The number of households that are on any type of public assistance (including subsidized housing, welfare, aid to dependent children, etc.)
     * @param housingUnits {String} The number of housing units in the area being profiled
     * @param income15to25k {String} The number and percentage of households who earn greater than or equal to $15,000 but less than $25,000 per year
     * @param income25to50k {String} The number and percentage of households who earn greater than or equal to $25,000 but less than $50,000 per year
     * @param income50to75k {String} The number and percentage of households who earn greater than or equal to $50,000 per year but less than $75,000 per year
     * @param income75kPlus {String} The number and percentage of households who earn greater than or equal to $75,000 per year
     * @param incomeLess15k {String} The number and percentage of households who earn less than $15,000 per year
     * @param landArea {String} The percentage of the total area that is land (not water). This is calculated using the sum of the land areas of the Census Block Groups (CBG) within the selected radius
     * @param less9thGrade {String} The number and percentage of persons living in the area who have less than a ninth grade education
     * @param minors {String} The number and percentage of persons living in the area that are seventeen years old or younger
     * @param otherMultiracial {String} The number and percentage of persons living in the area who are not included in the above classifications or are multiracial
     * @param percentMinority {String} The percentage of the population of the given area that is minority. The field is calculated by subtracting the number of persons who are white (and not of Hispanic origin) from the total persons. This number is then divided by the total persons and multiplied by one hundred to determine the percentage.
     * @param personsBelowPovertyLevel {String} The number of people in the selected area that are below the poverty level
     * @param populationDensity {String} The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field)
     * @param radius {String} The number of miles, in any direction, from the center point of the facility that is included in the demographic profile
     * @param seniors {String} The number and percentage of persons living in the area who are sixty-five years old or older
     * @param someCollege {String} The number and percentage of persons living in the area who have some college or a two year college degree
     * @param totalPersons {String} The total number of persons that reside in the area being profiled. The total population within the selected radius of a facility is one indicator of the facility's surrounding environment and provides context for other facility indicators
     * @param waterArea {String} The percentage of the total area that is water (not land). This is calculated using the sum of the water areas of the Census Block Groups (CBG) within the selected radius
     * @param white {String} The number and percentage of persons living in the area who are white
     */
    constructor(adults, africanAmerican, americanIndian, asianPacificIslander, BSBA, centerLatitude, centerLongitude, child, grades9to12, hSDiploma, hispanicOrigin, households, householdsPublicAssistance, housingUnits, income15to25k, income25to50k, income50to75k, income75kPlus, incomeLess15k, landArea, less9thGrade, minors, otherMultiracial, percentMinority, personsBelowPovertyLevel, populationDensity, radius, seniors, someCollege, totalPersons, waterArea, white) { 
        
        Dfr061.initialize(this, adults, africanAmerican, americanIndian, asianPacificIslander, BSBA, centerLatitude, centerLongitude, child, grades9to12, hSDiploma, hispanicOrigin, households, householdsPublicAssistance, housingUnits, income15to25k, income25to50k, income50to75k, income75kPlus, incomeLess15k, landArea, less9thGrade, minors, otherMultiracial, percentMinority, personsBelowPovertyLevel, populationDensity, radius, seniors, someCollege, totalPersons, waterArea, white);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, adults, africanAmerican, americanIndian, asianPacificIslander, BSBA, centerLatitude, centerLongitude, child, grades9to12, hSDiploma, hispanicOrigin, households, householdsPublicAssistance, housingUnits, income15to25k, income25to50k, income50to75k, income75kPlus, incomeLess15k, landArea, less9thGrade, minors, otherMultiracial, percentMinority, personsBelowPovertyLevel, populationDensity, radius, seniors, someCollege, totalPersons, waterArea, white) { 
        obj['Adults'] = adults;
        obj['AfricanAmerican'] = africanAmerican;
        obj['AmericanIndian'] = americanIndian;
        obj['AsianPacificIslander'] = asianPacificIslander;
        obj['BSBA'] = BSBA;
        obj['CenterLatitude'] = centerLatitude;
        obj['CenterLongitude'] = centerLongitude;
        obj['Child'] = child;
        obj['Grades9to12'] = grades9to12;
        obj['HSDiploma'] = hSDiploma;
        obj['HispanicOrigin'] = hispanicOrigin;
        obj['Households'] = households;
        obj['HouseholdsPublicAssistance'] = householdsPublicAssistance;
        obj['HousingUnits'] = housingUnits;
        obj['Income15to25k'] = income15to25k;
        obj['Income25to50k'] = income25to50k;
        obj['Income50to75k'] = income50to75k;
        obj['Income75kPlus'] = income75kPlus;
        obj['IncomeLess15k'] = incomeLess15k;
        obj['LandArea'] = landArea;
        obj['Less9thGrade'] = less9thGrade;
        obj['Minors'] = minors;
        obj['OtherMultiracial'] = otherMultiracial;
        obj['PercentMinority'] = percentMinority;
        obj['PersonsBelowPovertyLevel'] = personsBelowPovertyLevel;
        obj['PopulationDensity'] = populationDensity;
        obj['Radius'] = radius;
        obj['Seniors'] = seniors;
        obj['SomeCollege'] = someCollege;
        obj['TotalPersons'] = totalPersons;
        obj['WaterArea'] = waterArea;
        obj['White'] = white;
    }

    /**
     * Constructs a <code>Dfr061</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr061} obj Optional instance to populate.
     * @return {module:model/Dfr061} The populated <code>Dfr061</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr061();

            if (data.hasOwnProperty('Adults')) {
                obj['Adults'] = ApiClient.convertToType(data['Adults'], 'String');
            }
            if (data.hasOwnProperty('AfricanAmerican')) {
                obj['AfricanAmerican'] = ApiClient.convertToType(data['AfricanAmerican'], 'String');
            }
            if (data.hasOwnProperty('AmericanIndian')) {
                obj['AmericanIndian'] = ApiClient.convertToType(data['AmericanIndian'], 'String');
            }
            if (data.hasOwnProperty('AsianPacificIslander')) {
                obj['AsianPacificIslander'] = ApiClient.convertToType(data['AsianPacificIslander'], 'String');
            }
            if (data.hasOwnProperty('BSBA')) {
                obj['BSBA'] = ApiClient.convertToType(data['BSBA'], 'String');
            }
            if (data.hasOwnProperty('CenterLatitude')) {
                obj['CenterLatitude'] = ApiClient.convertToType(data['CenterLatitude'], 'String');
            }
            if (data.hasOwnProperty('CenterLongitude')) {
                obj['CenterLongitude'] = ApiClient.convertToType(data['CenterLongitude'], 'String');
            }
            if (data.hasOwnProperty('Child')) {
                obj['Child'] = ApiClient.convertToType(data['Child'], 'String');
            }
            if (data.hasOwnProperty('Grades9to12')) {
                obj['Grades9to12'] = ApiClient.convertToType(data['Grades9to12'], 'String');
            }
            if (data.hasOwnProperty('HSDiploma')) {
                obj['HSDiploma'] = ApiClient.convertToType(data['HSDiploma'], 'String');
            }
            if (data.hasOwnProperty('HispanicOrigin')) {
                obj['HispanicOrigin'] = ApiClient.convertToType(data['HispanicOrigin'], 'String');
            }
            if (data.hasOwnProperty('Households')) {
                obj['Households'] = ApiClient.convertToType(data['Households'], 'String');
            }
            if (data.hasOwnProperty('HouseholdsPublicAssistance')) {
                obj['HouseholdsPublicAssistance'] = ApiClient.convertToType(data['HouseholdsPublicAssistance'], 'String');
            }
            if (data.hasOwnProperty('HousingUnits')) {
                obj['HousingUnits'] = ApiClient.convertToType(data['HousingUnits'], 'String');
            }
            if (data.hasOwnProperty('Income15to25k')) {
                obj['Income15to25k'] = ApiClient.convertToType(data['Income15to25k'], 'String');
            }
            if (data.hasOwnProperty('Income25to50k')) {
                obj['Income25to50k'] = ApiClient.convertToType(data['Income25to50k'], 'String');
            }
            if (data.hasOwnProperty('Income50to75k')) {
                obj['Income50to75k'] = ApiClient.convertToType(data['Income50to75k'], 'String');
            }
            if (data.hasOwnProperty('Income75kPlus')) {
                obj['Income75kPlus'] = ApiClient.convertToType(data['Income75kPlus'], 'String');
            }
            if (data.hasOwnProperty('IncomeLess15k')) {
                obj['IncomeLess15k'] = ApiClient.convertToType(data['IncomeLess15k'], 'String');
            }
            if (data.hasOwnProperty('LandArea')) {
                obj['LandArea'] = ApiClient.convertToType(data['LandArea'], 'String');
            }
            if (data.hasOwnProperty('Less9thGrade')) {
                obj['Less9thGrade'] = ApiClient.convertToType(data['Less9thGrade'], 'String');
            }
            if (data.hasOwnProperty('Minors')) {
                obj['Minors'] = ApiClient.convertToType(data['Minors'], 'String');
            }
            if (data.hasOwnProperty('OtherMultiracial')) {
                obj['OtherMultiracial'] = ApiClient.convertToType(data['OtherMultiracial'], 'String');
            }
            if (data.hasOwnProperty('PercentMinority')) {
                obj['PercentMinority'] = ApiClient.convertToType(data['PercentMinority'], 'String');
            }
            if (data.hasOwnProperty('PersonsBelowPovertyLevel')) {
                obj['PersonsBelowPovertyLevel'] = ApiClient.convertToType(data['PersonsBelowPovertyLevel'], 'String');
            }
            if (data.hasOwnProperty('PopulationDensity')) {
                obj['PopulationDensity'] = ApiClient.convertToType(data['PopulationDensity'], 'String');
            }
            if (data.hasOwnProperty('Radius')) {
                obj['Radius'] = ApiClient.convertToType(data['Radius'], 'String');
            }
            if (data.hasOwnProperty('Seniors')) {
                obj['Seniors'] = ApiClient.convertToType(data['Seniors'], 'String');
            }
            if (data.hasOwnProperty('SomeCollege')) {
                obj['SomeCollege'] = ApiClient.convertToType(data['SomeCollege'], 'String');
            }
            if (data.hasOwnProperty('TotalPersons')) {
                obj['TotalPersons'] = ApiClient.convertToType(data['TotalPersons'], 'String');
            }
            if (data.hasOwnProperty('WaterArea')) {
                obj['WaterArea'] = ApiClient.convertToType(data['WaterArea'], 'String');
            }
            if (data.hasOwnProperty('White')) {
                obj['White'] = ApiClient.convertToType(data['White'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr061</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr061</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr061.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Adults'] && !(typeof data['Adults'] === 'string' || data['Adults'] instanceof String)) {
            throw new Error("Expected the field `Adults` to be a primitive type in the JSON string but got " + data['Adults']);
        }
        // ensure the json data is a string
        if (data['AfricanAmerican'] && !(typeof data['AfricanAmerican'] === 'string' || data['AfricanAmerican'] instanceof String)) {
            throw new Error("Expected the field `AfricanAmerican` to be a primitive type in the JSON string but got " + data['AfricanAmerican']);
        }
        // ensure the json data is a string
        if (data['AmericanIndian'] && !(typeof data['AmericanIndian'] === 'string' || data['AmericanIndian'] instanceof String)) {
            throw new Error("Expected the field `AmericanIndian` to be a primitive type in the JSON string but got " + data['AmericanIndian']);
        }
        // ensure the json data is a string
        if (data['AsianPacificIslander'] && !(typeof data['AsianPacificIslander'] === 'string' || data['AsianPacificIslander'] instanceof String)) {
            throw new Error("Expected the field `AsianPacificIslander` to be a primitive type in the JSON string but got " + data['AsianPacificIslander']);
        }
        // ensure the json data is a string
        if (data['BSBA'] && !(typeof data['BSBA'] === 'string' || data['BSBA'] instanceof String)) {
            throw new Error("Expected the field `BSBA` to be a primitive type in the JSON string but got " + data['BSBA']);
        }
        // ensure the json data is a string
        if (data['CenterLatitude'] && !(typeof data['CenterLatitude'] === 'string' || data['CenterLatitude'] instanceof String)) {
            throw new Error("Expected the field `CenterLatitude` to be a primitive type in the JSON string but got " + data['CenterLatitude']);
        }
        // ensure the json data is a string
        if (data['CenterLongitude'] && !(typeof data['CenterLongitude'] === 'string' || data['CenterLongitude'] instanceof String)) {
            throw new Error("Expected the field `CenterLongitude` to be a primitive type in the JSON string but got " + data['CenterLongitude']);
        }
        // ensure the json data is a string
        if (data['Child'] && !(typeof data['Child'] === 'string' || data['Child'] instanceof String)) {
            throw new Error("Expected the field `Child` to be a primitive type in the JSON string but got " + data['Child']);
        }
        // ensure the json data is a string
        if (data['Grades9to12'] && !(typeof data['Grades9to12'] === 'string' || data['Grades9to12'] instanceof String)) {
            throw new Error("Expected the field `Grades9to12` to be a primitive type in the JSON string but got " + data['Grades9to12']);
        }
        // ensure the json data is a string
        if (data['HSDiploma'] && !(typeof data['HSDiploma'] === 'string' || data['HSDiploma'] instanceof String)) {
            throw new Error("Expected the field `HSDiploma` to be a primitive type in the JSON string but got " + data['HSDiploma']);
        }
        // ensure the json data is a string
        if (data['HispanicOrigin'] && !(typeof data['HispanicOrigin'] === 'string' || data['HispanicOrigin'] instanceof String)) {
            throw new Error("Expected the field `HispanicOrigin` to be a primitive type in the JSON string but got " + data['HispanicOrigin']);
        }
        // ensure the json data is a string
        if (data['Households'] && !(typeof data['Households'] === 'string' || data['Households'] instanceof String)) {
            throw new Error("Expected the field `Households` to be a primitive type in the JSON string but got " + data['Households']);
        }
        // ensure the json data is a string
        if (data['HouseholdsPublicAssistance'] && !(typeof data['HouseholdsPublicAssistance'] === 'string' || data['HouseholdsPublicAssistance'] instanceof String)) {
            throw new Error("Expected the field `HouseholdsPublicAssistance` to be a primitive type in the JSON string but got " + data['HouseholdsPublicAssistance']);
        }
        // ensure the json data is a string
        if (data['HousingUnits'] && !(typeof data['HousingUnits'] === 'string' || data['HousingUnits'] instanceof String)) {
            throw new Error("Expected the field `HousingUnits` to be a primitive type in the JSON string but got " + data['HousingUnits']);
        }
        // ensure the json data is a string
        if (data['Income15to25k'] && !(typeof data['Income15to25k'] === 'string' || data['Income15to25k'] instanceof String)) {
            throw new Error("Expected the field `Income15to25k` to be a primitive type in the JSON string but got " + data['Income15to25k']);
        }
        // ensure the json data is a string
        if (data['Income25to50k'] && !(typeof data['Income25to50k'] === 'string' || data['Income25to50k'] instanceof String)) {
            throw new Error("Expected the field `Income25to50k` to be a primitive type in the JSON string but got " + data['Income25to50k']);
        }
        // ensure the json data is a string
        if (data['Income50to75k'] && !(typeof data['Income50to75k'] === 'string' || data['Income50to75k'] instanceof String)) {
            throw new Error("Expected the field `Income50to75k` to be a primitive type in the JSON string but got " + data['Income50to75k']);
        }
        // ensure the json data is a string
        if (data['Income75kPlus'] && !(typeof data['Income75kPlus'] === 'string' || data['Income75kPlus'] instanceof String)) {
            throw new Error("Expected the field `Income75kPlus` to be a primitive type in the JSON string but got " + data['Income75kPlus']);
        }
        // ensure the json data is a string
        if (data['IncomeLess15k'] && !(typeof data['IncomeLess15k'] === 'string' || data['IncomeLess15k'] instanceof String)) {
            throw new Error("Expected the field `IncomeLess15k` to be a primitive type in the JSON string but got " + data['IncomeLess15k']);
        }
        // ensure the json data is a string
        if (data['LandArea'] && !(typeof data['LandArea'] === 'string' || data['LandArea'] instanceof String)) {
            throw new Error("Expected the field `LandArea` to be a primitive type in the JSON string but got " + data['LandArea']);
        }
        // ensure the json data is a string
        if (data['Less9thGrade'] && !(typeof data['Less9thGrade'] === 'string' || data['Less9thGrade'] instanceof String)) {
            throw new Error("Expected the field `Less9thGrade` to be a primitive type in the JSON string but got " + data['Less9thGrade']);
        }
        // ensure the json data is a string
        if (data['Minors'] && !(typeof data['Minors'] === 'string' || data['Minors'] instanceof String)) {
            throw new Error("Expected the field `Minors` to be a primitive type in the JSON string but got " + data['Minors']);
        }
        // ensure the json data is a string
        if (data['OtherMultiracial'] && !(typeof data['OtherMultiracial'] === 'string' || data['OtherMultiracial'] instanceof String)) {
            throw new Error("Expected the field `OtherMultiracial` to be a primitive type in the JSON string but got " + data['OtherMultiracial']);
        }
        // ensure the json data is a string
        if (data['PercentMinority'] && !(typeof data['PercentMinority'] === 'string' || data['PercentMinority'] instanceof String)) {
            throw new Error("Expected the field `PercentMinority` to be a primitive type in the JSON string but got " + data['PercentMinority']);
        }
        // ensure the json data is a string
        if (data['PersonsBelowPovertyLevel'] && !(typeof data['PersonsBelowPovertyLevel'] === 'string' || data['PersonsBelowPovertyLevel'] instanceof String)) {
            throw new Error("Expected the field `PersonsBelowPovertyLevel` to be a primitive type in the JSON string but got " + data['PersonsBelowPovertyLevel']);
        }
        // ensure the json data is a string
        if (data['PopulationDensity'] && !(typeof data['PopulationDensity'] === 'string' || data['PopulationDensity'] instanceof String)) {
            throw new Error("Expected the field `PopulationDensity` to be a primitive type in the JSON string but got " + data['PopulationDensity']);
        }
        // ensure the json data is a string
        if (data['Radius'] && !(typeof data['Radius'] === 'string' || data['Radius'] instanceof String)) {
            throw new Error("Expected the field `Radius` to be a primitive type in the JSON string but got " + data['Radius']);
        }
        // ensure the json data is a string
        if (data['Seniors'] && !(typeof data['Seniors'] === 'string' || data['Seniors'] instanceof String)) {
            throw new Error("Expected the field `Seniors` to be a primitive type in the JSON string but got " + data['Seniors']);
        }
        // ensure the json data is a string
        if (data['SomeCollege'] && !(typeof data['SomeCollege'] === 'string' || data['SomeCollege'] instanceof String)) {
            throw new Error("Expected the field `SomeCollege` to be a primitive type in the JSON string but got " + data['SomeCollege']);
        }
        // ensure the json data is a string
        if (data['TotalPersons'] && !(typeof data['TotalPersons'] === 'string' || data['TotalPersons'] instanceof String)) {
            throw new Error("Expected the field `TotalPersons` to be a primitive type in the JSON string but got " + data['TotalPersons']);
        }
        // ensure the json data is a string
        if (data['WaterArea'] && !(typeof data['WaterArea'] === 'string' || data['WaterArea'] instanceof String)) {
            throw new Error("Expected the field `WaterArea` to be a primitive type in the JSON string but got " + data['WaterArea']);
        }
        // ensure the json data is a string
        if (data['White'] && !(typeof data['White'] === 'string' || data['White'] instanceof String)) {
            throw new Error("Expected the field `White` to be a primitive type in the JSON string but got " + data['White']);
        }

        return true;
    }


}

Dfr061.RequiredProperties = ["Adults", "AfricanAmerican", "AmericanIndian", "AsianPacificIslander", "BSBA", "CenterLatitude", "CenterLongitude", "Child", "Grades9to12", "HSDiploma", "HispanicOrigin", "Households", "HouseholdsPublicAssistance", "HousingUnits", "Income15to25k", "Income25to50k", "Income50to75k", "Income75kPlus", "IncomeLess15k", "LandArea", "Less9thGrade", "Minors", "OtherMultiracial", "PercentMinority", "PersonsBelowPovertyLevel", "PopulationDensity", "Radius", "Seniors", "SomeCollege", "TotalPersons", "WaterArea", "White"];

/**
 * The number and percentage of persons living in the area who are between eighteen years old and sixty-five years old.
 * @member {String} Adults
 */
Dfr061.prototype['Adults'] = undefined;

/**
 * The number and percentage of persons living in the area who are African American.
 * @member {String} AfricanAmerican
 */
Dfr061.prototype['AfricanAmerican'] = undefined;

/**
 * The number and percentage of persons living in the area who are of American Indian origin.
 * @member {String} AmericanIndian
 */
Dfr061.prototype['AmericanIndian'] = undefined;

/**
 * The number and percentage of persons living in the area who are of Asian Pacific Islander origin.
 * @member {String} AsianPacificIslander
 */
Dfr061.prototype['AsianPacificIslander'] = undefined;

/**
 * The number and percentage of persons living in the area who have a bachelor's degree or higher.
 * @member {String} BSBA
 */
Dfr061.prototype['BSBA'] = undefined;

/**
 * The latitude of the facility in degrees, to four decimal places.
 * @member {String} CenterLatitude
 */
Dfr061.prototype['CenterLatitude'] = undefined;

/**
 * The longitude of the facility in degrees, to four decimal places.
 * @member {String} CenterLongitude
 */
Dfr061.prototype['CenterLongitude'] = undefined;

/**
 * The number and percentage of persons living in the area who are five years old or younger.
 * @member {String} Child
 */
Dfr061.prototype['Child'] = undefined;

/**
 * The number and percentage of persons living in the area who have completed grades nine through twelve
 * @member {String} Grades9to12
 */
Dfr061.prototype['Grades9to12'] = undefined;

/**
 * The number and percentage of persons living in the area who have a high school diploma
 * @member {String} HSDiploma
 */
Dfr061.prototype['HSDiploma'] = undefined;

/**
 * The number and percentage of persons living in the area who are of Hispanic origin
 * @member {String} HispanicOrigin
 */
Dfr061.prototype['HispanicOrigin'] = undefined;

/**
 * The number of households in the area being profiled
 * @member {String} Households
 */
Dfr061.prototype['Households'] = undefined;

/**
 * The number of households that are on any type of public assistance (including subsidized housing, welfare, aid to dependent children, etc.)
 * @member {String} HouseholdsPublicAssistance
 */
Dfr061.prototype['HouseholdsPublicAssistance'] = undefined;

/**
 * The number of housing units in the area being profiled
 * @member {String} HousingUnits
 */
Dfr061.prototype['HousingUnits'] = undefined;

/**
 * The number and percentage of households who earn greater than or equal to $15,000 but less than $25,000 per year
 * @member {String} Income15to25k
 */
Dfr061.prototype['Income15to25k'] = undefined;

/**
 * The number and percentage of households who earn greater than or equal to $25,000 but less than $50,000 per year
 * @member {String} Income25to50k
 */
Dfr061.prototype['Income25to50k'] = undefined;

/**
 * The number and percentage of households who earn greater than or equal to $50,000 per year but less than $75,000 per year
 * @member {String} Income50to75k
 */
Dfr061.prototype['Income50to75k'] = undefined;

/**
 * The number and percentage of households who earn greater than or equal to $75,000 per year
 * @member {String} Income75kPlus
 */
Dfr061.prototype['Income75kPlus'] = undefined;

/**
 * The number and percentage of households who earn less than $15,000 per year
 * @member {String} IncomeLess15k
 */
Dfr061.prototype['IncomeLess15k'] = undefined;

/**
 * The percentage of the total area that is land (not water). This is calculated using the sum of the land areas of the Census Block Groups (CBG) within the selected radius
 * @member {String} LandArea
 */
Dfr061.prototype['LandArea'] = undefined;

/**
 * The number and percentage of persons living in the area who have less than a ninth grade education
 * @member {String} Less9thGrade
 */
Dfr061.prototype['Less9thGrade'] = undefined;

/**
 * The number and percentage of persons living in the area that are seventeen years old or younger
 * @member {String} Minors
 */
Dfr061.prototype['Minors'] = undefined;

/**
 * The number and percentage of persons living in the area who are not included in the above classifications or are multiracial
 * @member {String} OtherMultiracial
 */
Dfr061.prototype['OtherMultiracial'] = undefined;

/**
 * The percentage of the population of the given area that is minority. The field is calculated by subtracting the number of persons who are white (and not of Hispanic origin) from the total persons. This number is then divided by the total persons and multiplied by one hundred to determine the percentage.
 * @member {String} PercentMinority
 */
Dfr061.prototype['PercentMinority'] = undefined;

/**
 * The number of people in the selected area that are below the poverty level
 * @member {String} PersonsBelowPovertyLevel
 */
Dfr061.prototype['PersonsBelowPovertyLevel'] = undefined;

/**
 * The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field)
 * @member {String} PopulationDensity
 */
Dfr061.prototype['PopulationDensity'] = undefined;

/**
 * The number of miles, in any direction, from the center point of the facility that is included in the demographic profile
 * @member {String} Radius
 */
Dfr061.prototype['Radius'] = undefined;

/**
 * The number and percentage of persons living in the area who are sixty-five years old or older
 * @member {String} Seniors
 */
Dfr061.prototype['Seniors'] = undefined;

/**
 * The number and percentage of persons living in the area who have some college or a two year college degree
 * @member {String} SomeCollege
 */
Dfr061.prototype['SomeCollege'] = undefined;

/**
 * The total number of persons that reside in the area being profiled. The total population within the selected radius of a facility is one indicator of the facility's surrounding environment and provides context for other facility indicators
 * @member {String} TotalPersons
 */
Dfr061.prototype['TotalPersons'] = undefined;

/**
 * The percentage of the total area that is water (not land). This is calculated using the sum of the water areas of the Census Block Groups (CBG) within the selected radius
 * @member {String} WaterArea
 */
Dfr061.prototype['WaterArea'] = undefined;

/**
 * The number and percentage of persons living in the area who are white
 * @member {String} White
 */
Dfr061.prototype['White'] = undefined;






export default Dfr061;

