/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr089 model module.
 * @module model/Dfr089
 * @version 0.0.0
 */
class Dfr089 {
    /**
     * Constructs a new <code>Dfr089</code>.
     * Sanitary Survey Object
     * @alias module:model/Dfr089
     * @param agency {String} Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"
     * @param dataVerification {String} The sanitary source survey conclusion for data verification operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param distribution {String} The sanitary source survey conclusion for distribution operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param financial {String} The sanitary source survey conclusion for financial operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param finishedWaterStorage {String} The sanitary source survey conclusion for finished water storage operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param managementOperation {String} The sanitary source survey conclusion for management operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param operatorCompliance {String} The sanitary source survey conclusion for operator compliance. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param otherEvaluation {String} The sanitary source survey conclusion for other evaluation. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param pumps {String} The sanitary source survey conclusion for pump operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param security {String} The sanitary source survey conclusions for security operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param source {String} The sanitary source survey conclusion for source operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param treatment {String} The sanitary survey results conclusions for treatment operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
     * @param visitDate {String} Date of the sanitary survey.
     * @param visitType {String} A description of the type of site visit conducted.
     */
    constructor(agency, dataVerification, distribution, financial, finishedWaterStorage, managementOperation, operatorCompliance, otherEvaluation, pumps, security, source, sourceID, treatment, visitDate, visitType) { 
        
        Dfr089.initialize(this, agency, dataVerification, distribution, financial, finishedWaterStorage, managementOperation, operatorCompliance, otherEvaluation, pumps, security, source, sourceID, treatment, visitDate, visitType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, agency, dataVerification, distribution, financial, finishedWaterStorage, managementOperation, operatorCompliance, otherEvaluation, pumps, security, source, sourceID, treatment, visitDate, visitType) { 
        obj['Agency'] = agency;
        obj['DataVerification'] = dataVerification;
        obj['Distribution'] = distribution;
        obj['Financial'] = financial;
        obj['FinishedWaterStorage'] = finishedWaterStorage;
        obj['ManagementOperation'] = managementOperation;
        obj['OperatorCompliance'] = operatorCompliance;
        obj['OtherEvaluation'] = otherEvaluation;
        obj['Pumps'] = pumps;
        obj['Security'] = security;
        obj['Source'] = source;
        obj['SourceID'] = sourceID;
        obj['Treatment'] = treatment;
        obj['VisitDate'] = visitDate;
        obj['VisitType'] = visitType;
    }

    /**
     * Constructs a <code>Dfr089</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr089} obj Optional instance to populate.
     * @return {module:model/Dfr089} The populated <code>Dfr089</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr089();

            if (data.hasOwnProperty('Agency')) {
                obj['Agency'] = ApiClient.convertToType(data['Agency'], 'String');
            }
            if (data.hasOwnProperty('DataVerification')) {
                obj['DataVerification'] = ApiClient.convertToType(data['DataVerification'], 'String');
            }
            if (data.hasOwnProperty('Distribution')) {
                obj['Distribution'] = ApiClient.convertToType(data['Distribution'], 'String');
            }
            if (data.hasOwnProperty('Financial')) {
                obj['Financial'] = ApiClient.convertToType(data['Financial'], 'String');
            }
            if (data.hasOwnProperty('FinishedWaterStorage')) {
                obj['FinishedWaterStorage'] = ApiClient.convertToType(data['FinishedWaterStorage'], 'String');
            }
            if (data.hasOwnProperty('ManagementOperation')) {
                obj['ManagementOperation'] = ApiClient.convertToType(data['ManagementOperation'], 'String');
            }
            if (data.hasOwnProperty('OperatorCompliance')) {
                obj['OperatorCompliance'] = ApiClient.convertToType(data['OperatorCompliance'], 'String');
            }
            if (data.hasOwnProperty('OtherEvaluation')) {
                obj['OtherEvaluation'] = ApiClient.convertToType(data['OtherEvaluation'], 'String');
            }
            if (data.hasOwnProperty('Pumps')) {
                obj['Pumps'] = ApiClient.convertToType(data['Pumps'], 'String');
            }
            if (data.hasOwnProperty('Security')) {
                obj['Security'] = ApiClient.convertToType(data['Security'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('Treatment')) {
                obj['Treatment'] = ApiClient.convertToType(data['Treatment'], 'String');
            }
            if (data.hasOwnProperty('VisitDate')) {
                obj['VisitDate'] = ApiClient.convertToType(data['VisitDate'], 'String');
            }
            if (data.hasOwnProperty('VisitType')) {
                obj['VisitType'] = ApiClient.convertToType(data['VisitType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr089</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr089</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr089.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Agency'] && !(typeof data['Agency'] === 'string' || data['Agency'] instanceof String)) {
            throw new Error("Expected the field `Agency` to be a primitive type in the JSON string but got " + data['Agency']);
        }
        // ensure the json data is a string
        if (data['DataVerification'] && !(typeof data['DataVerification'] === 'string' || data['DataVerification'] instanceof String)) {
            throw new Error("Expected the field `DataVerification` to be a primitive type in the JSON string but got " + data['DataVerification']);
        }
        // ensure the json data is a string
        if (data['Distribution'] && !(typeof data['Distribution'] === 'string' || data['Distribution'] instanceof String)) {
            throw new Error("Expected the field `Distribution` to be a primitive type in the JSON string but got " + data['Distribution']);
        }
        // ensure the json data is a string
        if (data['Financial'] && !(typeof data['Financial'] === 'string' || data['Financial'] instanceof String)) {
            throw new Error("Expected the field `Financial` to be a primitive type in the JSON string but got " + data['Financial']);
        }
        // ensure the json data is a string
        if (data['FinishedWaterStorage'] && !(typeof data['FinishedWaterStorage'] === 'string' || data['FinishedWaterStorage'] instanceof String)) {
            throw new Error("Expected the field `FinishedWaterStorage` to be a primitive type in the JSON string but got " + data['FinishedWaterStorage']);
        }
        // ensure the json data is a string
        if (data['ManagementOperation'] && !(typeof data['ManagementOperation'] === 'string' || data['ManagementOperation'] instanceof String)) {
            throw new Error("Expected the field `ManagementOperation` to be a primitive type in the JSON string but got " + data['ManagementOperation']);
        }
        // ensure the json data is a string
        if (data['OperatorCompliance'] && !(typeof data['OperatorCompliance'] === 'string' || data['OperatorCompliance'] instanceof String)) {
            throw new Error("Expected the field `OperatorCompliance` to be a primitive type in the JSON string but got " + data['OperatorCompliance']);
        }
        // ensure the json data is a string
        if (data['OtherEvaluation'] && !(typeof data['OtherEvaluation'] === 'string' || data['OtherEvaluation'] instanceof String)) {
            throw new Error("Expected the field `OtherEvaluation` to be a primitive type in the JSON string but got " + data['OtherEvaluation']);
        }
        // ensure the json data is a string
        if (data['Pumps'] && !(typeof data['Pumps'] === 'string' || data['Pumps'] instanceof String)) {
            throw new Error("Expected the field `Pumps` to be a primitive type in the JSON string but got " + data['Pumps']);
        }
        // ensure the json data is a string
        if (data['Security'] && !(typeof data['Security'] === 'string' || data['Security'] instanceof String)) {
            throw new Error("Expected the field `Security` to be a primitive type in the JSON string but got " + data['Security']);
        }
        // ensure the json data is a string
        if (data['Source'] && !(typeof data['Source'] === 'string' || data['Source'] instanceof String)) {
            throw new Error("Expected the field `Source` to be a primitive type in the JSON string but got " + data['Source']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['Treatment'] && !(typeof data['Treatment'] === 'string' || data['Treatment'] instanceof String)) {
            throw new Error("Expected the field `Treatment` to be a primitive type in the JSON string but got " + data['Treatment']);
        }
        // ensure the json data is a string
        if (data['VisitDate'] && !(typeof data['VisitDate'] === 'string' || data['VisitDate'] instanceof String)) {
            throw new Error("Expected the field `VisitDate` to be a primitive type in the JSON string but got " + data['VisitDate']);
        }
        // ensure the json data is a string
        if (data['VisitType'] && !(typeof data['VisitType'] === 'string' || data['VisitType'] instanceof String)) {
            throw new Error("Expected the field `VisitType` to be a primitive type in the JSON string but got " + data['VisitType']);
        }

        return true;
    }


}

Dfr089.RequiredProperties = ["Agency", "DataVerification", "Distribution", "Financial", "FinishedWaterStorage", "ManagementOperation", "OperatorCompliance", "OtherEvaluation", "Pumps", "Security", "Source", "SourceID", "Treatment", "VisitDate", "VisitType"];

/**
 * Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"
 * @member {String} Agency
 */
Dfr089.prototype['Agency'] = undefined;

/**
 * The sanitary source survey conclusion for data verification operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} DataVerification
 */
Dfr089.prototype['DataVerification'] = undefined;

/**
 * The sanitary source survey conclusion for distribution operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Distribution
 */
Dfr089.prototype['Distribution'] = undefined;

/**
 * The sanitary source survey conclusion for financial operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Financial
 */
Dfr089.prototype['Financial'] = undefined;

/**
 * The sanitary source survey conclusion for finished water storage operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} FinishedWaterStorage
 */
Dfr089.prototype['FinishedWaterStorage'] = undefined;

/**
 * The sanitary source survey conclusion for management operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} ManagementOperation
 */
Dfr089.prototype['ManagementOperation'] = undefined;

/**
 * The sanitary source survey conclusion for operator compliance. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} OperatorCompliance
 */
Dfr089.prototype['OperatorCompliance'] = undefined;

/**
 * The sanitary source survey conclusion for other evaluation. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} OtherEvaluation
 */
Dfr089.prototype['OtherEvaluation'] = undefined;

/**
 * The sanitary source survey conclusion for pump operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Pumps
 */
Dfr089.prototype['Pumps'] = undefined;

/**
 * The sanitary source survey conclusions for security operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Security
 */
Dfr089.prototype['Security'] = undefined;

/**
 * The sanitary source survey conclusion for source operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Source
 */
Dfr089.prototype['Source'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr089.prototype['SourceID'] = undefined;

/**
 * The sanitary survey results conclusions for treatment operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA
 * @member {String} Treatment
 */
Dfr089.prototype['Treatment'] = undefined;

/**
 * Date of the sanitary survey.
 * @member {String} VisitDate
 */
Dfr089.prototype['VisitDate'] = undefined;

/**
 * A description of the type of site visit conducted.
 * @member {String} VisitType
 */
Dfr089.prototype['VisitType'] = undefined;






export default Dfr089;

