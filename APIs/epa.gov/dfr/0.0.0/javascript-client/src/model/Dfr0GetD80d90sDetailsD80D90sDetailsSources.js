/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr0GetD80d90sDetailsD80D90sDetailsSources model module.
 * @module model/Dfr0GetD80d90sDetailsD80D90sDetailsSources
 * @version 0.0.0
 */
class Dfr0GetD80d90sDetailsD80D90sDetailsSources {
    /**
     * Constructs a new <code>Dfr0GetD80d90sDetailsD80D90sDetailsSources</code>.
     * Sources Object
     * @alias module:model/Dfr0GetD80d90sDetailsD80D90sDetailsSources
     * @param daysLate {String} The number of days the DMR value is late, as generated in ICIS-NPDES
     * @param dmrDueDate {String} The due date for the DMR to the NPDES program authority (e.g., EPA or state environmental agency) (MM/DD/YYYY).ï¿½
     * @param limitBeginDate {String} The date on which a limit becomes in effect for a particular parameter in a limit set
     * @param limitEndDate {String} The date on which a limit stops being in effect for a particular parameter in a limit set
     * @param limitId {String} The unique identifier for a limit parameter record
     * @param limitSetName {String} The name associated with a group of parameter permit limits.
     * @param missingLate {String} Indicates if the permitted facility submitted missing or late DMRS to the NPDES permitting authority within the past three years.
     * @param monitoringLocationCode {String} The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature
     * @param monitoringLocationDesc {String} The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies
     * @param monitoringPeriodEndDate {String} The date that the monitoring period for the values covered by the DMR Form ends
     * @param nPDESId {String} A unique ID assigned for each record/permit/site/facility within ICIS-NPDES.
     * @param nodiCode {String} The no data indicator code for DMRs where no measurements are reported.
     * @param nodiDesc {String} The description of the NODI code explaining why no data are reported (e.g., no discharge, not quantifiable, conditional monitoring).
     * @param nodiValidationFlag {String} Indicates whether the NODI is considered valid (Y) or invalid (N) for compliance determination purposes.
     * @param npdesViolationId {String} The unique identifier for the violation related to a particular site.
     * @param parameterCode {String} The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)
     * @param parameterDesc {String} The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code
     * @param permFeatureNmbr {String} A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
     * @param rncDetectionCode {String} The reportable noncompliance detection code.
     * @param rncDetectionDate {String} The date that RNC was detected. It can be entered manually or automatically. In cases in which RNC is detected by ICIS-NPDES, the detection date entered will vary according to the type of violation detected (MM/DD/YYY).
     * @param rncDetectionDesc {String} The reportable noncompliance detection description.
     * @param rncResolutionCode {String} The reportable noncompliance resolution code.
     * @param rncResolutionDate {String} The reportable noncompliance resolution date.
     * @param rncResolutionDesc {String} The reportable noncompliance resolution description.
     * @param statisticalBaseMonthlyAvg {String} 
     * @param valueReceivedDate {String} The date the DMR value was received by the regulatory authority
     * @param valueTypeCode {String} The indication of the limit value type (e.g., Quantity 1, Concentration 2)
     * @param versionNmbr {String} The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance
     * @param violationCode {String} The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)
     */
    constructor(daysLate, dmrDueDate, limitBeginDate, limitEndDate, limitId, limitSetName, missingLate, monitoringLocationCode, monitoringLocationDesc, monitoringPeriodEndDate, nPDESId, nodiCode, nodiDesc, nodiValidationFlag, npdesViolationId, parameterCode, parameterDesc, permFeatureNmbr, rncDetectionCode, rncDetectionDate, rncDetectionDesc, rncResolutionCode, rncResolutionDate, rncResolutionDesc, statisticalBaseMonthlyAvg, valueReceivedDate, valueTypeCode, versionNmbr, violationCode) { 
        
        Dfr0GetD80d90sDetailsD80D90sDetailsSources.initialize(this, daysLate, dmrDueDate, limitBeginDate, limitEndDate, limitId, limitSetName, missingLate, monitoringLocationCode, monitoringLocationDesc, monitoringPeriodEndDate, nPDESId, nodiCode, nodiDesc, nodiValidationFlag, npdesViolationId, parameterCode, parameterDesc, permFeatureNmbr, rncDetectionCode, rncDetectionDate, rncDetectionDesc, rncResolutionCode, rncResolutionDate, rncResolutionDesc, statisticalBaseMonthlyAvg, valueReceivedDate, valueTypeCode, versionNmbr, violationCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, daysLate, dmrDueDate, limitBeginDate, limitEndDate, limitId, limitSetName, missingLate, monitoringLocationCode, monitoringLocationDesc, monitoringPeriodEndDate, nPDESId, nodiCode, nodiDesc, nodiValidationFlag, npdesViolationId, parameterCode, parameterDesc, permFeatureNmbr, rncDetectionCode, rncDetectionDate, rncDetectionDesc, rncResolutionCode, rncResolutionDate, rncResolutionDesc, statisticalBaseMonthlyAvg, valueReceivedDate, valueTypeCode, versionNmbr, violationCode) { 
        obj['DaysLate'] = daysLate;
        obj['DmrDueDate'] = dmrDueDate;
        obj['LimitBeginDate'] = limitBeginDate;
        obj['LimitEndDate'] = limitEndDate;
        obj['LimitId'] = limitId;
        obj['LimitSetName'] = limitSetName;
        obj['MissingLate'] = missingLate;
        obj['MonitoringLocationCode'] = monitoringLocationCode;
        obj['MonitoringLocationDesc'] = monitoringLocationDesc;
        obj['MonitoringPeriodEndDate'] = monitoringPeriodEndDate;
        obj['NPDESId'] = nPDESId;
        obj['NodiCode'] = nodiCode;
        obj['NodiDesc'] = nodiDesc;
        obj['NodiValidationFlag'] = nodiValidationFlag;
        obj['NpdesViolationId'] = npdesViolationId;
        obj['ParameterCode'] = parameterCode;
        obj['ParameterDesc'] = parameterDesc;
        obj['PermFeatureNmbr'] = permFeatureNmbr;
        obj['RncDetectionCode'] = rncDetectionCode;
        obj['RncDetectionDate'] = rncDetectionDate;
        obj['RncDetectionDesc'] = rncDetectionDesc;
        obj['RncResolutionCode'] = rncResolutionCode;
        obj['RncResolutionDate'] = rncResolutionDate;
        obj['RncResolutionDesc'] = rncResolutionDesc;
        obj['StatisticalBaseMonthlyAvg'] = statisticalBaseMonthlyAvg;
        obj['ValueReceivedDate'] = valueReceivedDate;
        obj['ValueTypeCode'] = valueTypeCode;
        obj['VersionNmbr'] = versionNmbr;
        obj['ViolationCode'] = violationCode;
    }

    /**
     * Constructs a <code>Dfr0GetD80d90sDetailsD80D90sDetailsSources</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr0GetD80d90sDetailsD80D90sDetailsSources} obj Optional instance to populate.
     * @return {module:model/Dfr0GetD80d90sDetailsD80D90sDetailsSources} The populated <code>Dfr0GetD80d90sDetailsD80D90sDetailsSources</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr0GetD80d90sDetailsD80D90sDetailsSources();

            if (data.hasOwnProperty('DaysLate')) {
                obj['DaysLate'] = ApiClient.convertToType(data['DaysLate'], 'String');
            }
            if (data.hasOwnProperty('DmrDueDate')) {
                obj['DmrDueDate'] = ApiClient.convertToType(data['DmrDueDate'], 'String');
            }
            if (data.hasOwnProperty('LimitBeginDate')) {
                obj['LimitBeginDate'] = ApiClient.convertToType(data['LimitBeginDate'], 'String');
            }
            if (data.hasOwnProperty('LimitEndDate')) {
                obj['LimitEndDate'] = ApiClient.convertToType(data['LimitEndDate'], 'String');
            }
            if (data.hasOwnProperty('LimitId')) {
                obj['LimitId'] = ApiClient.convertToType(data['LimitId'], 'String');
            }
            if (data.hasOwnProperty('LimitSetName')) {
                obj['LimitSetName'] = ApiClient.convertToType(data['LimitSetName'], 'String');
            }
            if (data.hasOwnProperty('MissingLate')) {
                obj['MissingLate'] = ApiClient.convertToType(data['MissingLate'], 'String');
            }
            if (data.hasOwnProperty('MonitoringLocationCode')) {
                obj['MonitoringLocationCode'] = ApiClient.convertToType(data['MonitoringLocationCode'], 'String');
            }
            if (data.hasOwnProperty('MonitoringLocationDesc')) {
                obj['MonitoringLocationDesc'] = ApiClient.convertToType(data['MonitoringLocationDesc'], 'String');
            }
            if (data.hasOwnProperty('MonitoringPeriodEndDate')) {
                obj['MonitoringPeriodEndDate'] = ApiClient.convertToType(data['MonitoringPeriodEndDate'], 'String');
            }
            if (data.hasOwnProperty('NPDESId')) {
                obj['NPDESId'] = ApiClient.convertToType(data['NPDESId'], 'String');
            }
            if (data.hasOwnProperty('NodiCode')) {
                obj['NodiCode'] = ApiClient.convertToType(data['NodiCode'], 'String');
            }
            if (data.hasOwnProperty('NodiDesc')) {
                obj['NodiDesc'] = ApiClient.convertToType(data['NodiDesc'], 'String');
            }
            if (data.hasOwnProperty('NodiValidationFlag')) {
                obj['NodiValidationFlag'] = ApiClient.convertToType(data['NodiValidationFlag'], 'String');
            }
            if (data.hasOwnProperty('NpdesViolationId')) {
                obj['NpdesViolationId'] = ApiClient.convertToType(data['NpdesViolationId'], 'String');
            }
            if (data.hasOwnProperty('ParameterCode')) {
                obj['ParameterCode'] = ApiClient.convertToType(data['ParameterCode'], 'String');
            }
            if (data.hasOwnProperty('ParameterDesc')) {
                obj['ParameterDesc'] = ApiClient.convertToType(data['ParameterDesc'], 'String');
            }
            if (data.hasOwnProperty('PermFeatureNmbr')) {
                obj['PermFeatureNmbr'] = ApiClient.convertToType(data['PermFeatureNmbr'], 'String');
            }
            if (data.hasOwnProperty('RncDetectionCode')) {
                obj['RncDetectionCode'] = ApiClient.convertToType(data['RncDetectionCode'], 'String');
            }
            if (data.hasOwnProperty('RncDetectionDate')) {
                obj['RncDetectionDate'] = ApiClient.convertToType(data['RncDetectionDate'], 'String');
            }
            if (data.hasOwnProperty('RncDetectionDesc')) {
                obj['RncDetectionDesc'] = ApiClient.convertToType(data['RncDetectionDesc'], 'String');
            }
            if (data.hasOwnProperty('RncResolutionCode')) {
                obj['RncResolutionCode'] = ApiClient.convertToType(data['RncResolutionCode'], 'String');
            }
            if (data.hasOwnProperty('RncResolutionDate')) {
                obj['RncResolutionDate'] = ApiClient.convertToType(data['RncResolutionDate'], 'String');
            }
            if (data.hasOwnProperty('RncResolutionDesc')) {
                obj['RncResolutionDesc'] = ApiClient.convertToType(data['RncResolutionDesc'], 'String');
            }
            if (data.hasOwnProperty('StatisticalBaseMonthlyAvg')) {
                obj['StatisticalBaseMonthlyAvg'] = ApiClient.convertToType(data['StatisticalBaseMonthlyAvg'], 'String');
            }
            if (data.hasOwnProperty('ValueReceivedDate')) {
                obj['ValueReceivedDate'] = ApiClient.convertToType(data['ValueReceivedDate'], 'String');
            }
            if (data.hasOwnProperty('ValueTypeCode')) {
                obj['ValueTypeCode'] = ApiClient.convertToType(data['ValueTypeCode'], 'String');
            }
            if (data.hasOwnProperty('VersionNmbr')) {
                obj['VersionNmbr'] = ApiClient.convertToType(data['VersionNmbr'], 'String');
            }
            if (data.hasOwnProperty('ViolationCode')) {
                obj['ViolationCode'] = ApiClient.convertToType(data['ViolationCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr0GetD80d90sDetailsD80D90sDetailsSources</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr0GetD80d90sDetailsD80D90sDetailsSources</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr0GetD80d90sDetailsD80D90sDetailsSources.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DaysLate'] && !(typeof data['DaysLate'] === 'string' || data['DaysLate'] instanceof String)) {
            throw new Error("Expected the field `DaysLate` to be a primitive type in the JSON string but got " + data['DaysLate']);
        }
        // ensure the json data is a string
        if (data['DmrDueDate'] && !(typeof data['DmrDueDate'] === 'string' || data['DmrDueDate'] instanceof String)) {
            throw new Error("Expected the field `DmrDueDate` to be a primitive type in the JSON string but got " + data['DmrDueDate']);
        }
        // ensure the json data is a string
        if (data['LimitBeginDate'] && !(typeof data['LimitBeginDate'] === 'string' || data['LimitBeginDate'] instanceof String)) {
            throw new Error("Expected the field `LimitBeginDate` to be a primitive type in the JSON string but got " + data['LimitBeginDate']);
        }
        // ensure the json data is a string
        if (data['LimitEndDate'] && !(typeof data['LimitEndDate'] === 'string' || data['LimitEndDate'] instanceof String)) {
            throw new Error("Expected the field `LimitEndDate` to be a primitive type in the JSON string but got " + data['LimitEndDate']);
        }
        // ensure the json data is a string
        if (data['LimitId'] && !(typeof data['LimitId'] === 'string' || data['LimitId'] instanceof String)) {
            throw new Error("Expected the field `LimitId` to be a primitive type in the JSON string but got " + data['LimitId']);
        }
        // ensure the json data is a string
        if (data['LimitSetName'] && !(typeof data['LimitSetName'] === 'string' || data['LimitSetName'] instanceof String)) {
            throw new Error("Expected the field `LimitSetName` to be a primitive type in the JSON string but got " + data['LimitSetName']);
        }
        // ensure the json data is a string
        if (data['MissingLate'] && !(typeof data['MissingLate'] === 'string' || data['MissingLate'] instanceof String)) {
            throw new Error("Expected the field `MissingLate` to be a primitive type in the JSON string but got " + data['MissingLate']);
        }
        // ensure the json data is a string
        if (data['MonitoringLocationCode'] && !(typeof data['MonitoringLocationCode'] === 'string' || data['MonitoringLocationCode'] instanceof String)) {
            throw new Error("Expected the field `MonitoringLocationCode` to be a primitive type in the JSON string but got " + data['MonitoringLocationCode']);
        }
        // ensure the json data is a string
        if (data['MonitoringLocationDesc'] && !(typeof data['MonitoringLocationDesc'] === 'string' || data['MonitoringLocationDesc'] instanceof String)) {
            throw new Error("Expected the field `MonitoringLocationDesc` to be a primitive type in the JSON string but got " + data['MonitoringLocationDesc']);
        }
        // ensure the json data is a string
        if (data['MonitoringPeriodEndDate'] && !(typeof data['MonitoringPeriodEndDate'] === 'string' || data['MonitoringPeriodEndDate'] instanceof String)) {
            throw new Error("Expected the field `MonitoringPeriodEndDate` to be a primitive type in the JSON string but got " + data['MonitoringPeriodEndDate']);
        }
        // ensure the json data is a string
        if (data['NPDESId'] && !(typeof data['NPDESId'] === 'string' || data['NPDESId'] instanceof String)) {
            throw new Error("Expected the field `NPDESId` to be a primitive type in the JSON string but got " + data['NPDESId']);
        }
        // ensure the json data is a string
        if (data['NodiCode'] && !(typeof data['NodiCode'] === 'string' || data['NodiCode'] instanceof String)) {
            throw new Error("Expected the field `NodiCode` to be a primitive type in the JSON string but got " + data['NodiCode']);
        }
        // ensure the json data is a string
        if (data['NodiDesc'] && !(typeof data['NodiDesc'] === 'string' || data['NodiDesc'] instanceof String)) {
            throw new Error("Expected the field `NodiDesc` to be a primitive type in the JSON string but got " + data['NodiDesc']);
        }
        // ensure the json data is a string
        if (data['NodiValidationFlag'] && !(typeof data['NodiValidationFlag'] === 'string' || data['NodiValidationFlag'] instanceof String)) {
            throw new Error("Expected the field `NodiValidationFlag` to be a primitive type in the JSON string but got " + data['NodiValidationFlag']);
        }
        // ensure the json data is a string
        if (data['NpdesViolationId'] && !(typeof data['NpdesViolationId'] === 'string' || data['NpdesViolationId'] instanceof String)) {
            throw new Error("Expected the field `NpdesViolationId` to be a primitive type in the JSON string but got " + data['NpdesViolationId']);
        }
        // ensure the json data is a string
        if (data['ParameterCode'] && !(typeof data['ParameterCode'] === 'string' || data['ParameterCode'] instanceof String)) {
            throw new Error("Expected the field `ParameterCode` to be a primitive type in the JSON string but got " + data['ParameterCode']);
        }
        // ensure the json data is a string
        if (data['ParameterDesc'] && !(typeof data['ParameterDesc'] === 'string' || data['ParameterDesc'] instanceof String)) {
            throw new Error("Expected the field `ParameterDesc` to be a primitive type in the JSON string but got " + data['ParameterDesc']);
        }
        // ensure the json data is a string
        if (data['PermFeatureNmbr'] && !(typeof data['PermFeatureNmbr'] === 'string' || data['PermFeatureNmbr'] instanceof String)) {
            throw new Error("Expected the field `PermFeatureNmbr` to be a primitive type in the JSON string but got " + data['PermFeatureNmbr']);
        }
        // ensure the json data is a string
        if (data['RncDetectionCode'] && !(typeof data['RncDetectionCode'] === 'string' || data['RncDetectionCode'] instanceof String)) {
            throw new Error("Expected the field `RncDetectionCode` to be a primitive type in the JSON string but got " + data['RncDetectionCode']);
        }
        // ensure the json data is a string
        if (data['RncDetectionDate'] && !(typeof data['RncDetectionDate'] === 'string' || data['RncDetectionDate'] instanceof String)) {
            throw new Error("Expected the field `RncDetectionDate` to be a primitive type in the JSON string but got " + data['RncDetectionDate']);
        }
        // ensure the json data is a string
        if (data['RncDetectionDesc'] && !(typeof data['RncDetectionDesc'] === 'string' || data['RncDetectionDesc'] instanceof String)) {
            throw new Error("Expected the field `RncDetectionDesc` to be a primitive type in the JSON string but got " + data['RncDetectionDesc']);
        }
        // ensure the json data is a string
        if (data['RncResolutionCode'] && !(typeof data['RncResolutionCode'] === 'string' || data['RncResolutionCode'] instanceof String)) {
            throw new Error("Expected the field `RncResolutionCode` to be a primitive type in the JSON string but got " + data['RncResolutionCode']);
        }
        // ensure the json data is a string
        if (data['RncResolutionDate'] && !(typeof data['RncResolutionDate'] === 'string' || data['RncResolutionDate'] instanceof String)) {
            throw new Error("Expected the field `RncResolutionDate` to be a primitive type in the JSON string but got " + data['RncResolutionDate']);
        }
        // ensure the json data is a string
        if (data['RncResolutionDesc'] && !(typeof data['RncResolutionDesc'] === 'string' || data['RncResolutionDesc'] instanceof String)) {
            throw new Error("Expected the field `RncResolutionDesc` to be a primitive type in the JSON string but got " + data['RncResolutionDesc']);
        }
        // ensure the json data is a string
        if (data['StatisticalBaseMonthlyAvg'] && !(typeof data['StatisticalBaseMonthlyAvg'] === 'string' || data['StatisticalBaseMonthlyAvg'] instanceof String)) {
            throw new Error("Expected the field `StatisticalBaseMonthlyAvg` to be a primitive type in the JSON string but got " + data['StatisticalBaseMonthlyAvg']);
        }
        // ensure the json data is a string
        if (data['ValueReceivedDate'] && !(typeof data['ValueReceivedDate'] === 'string' || data['ValueReceivedDate'] instanceof String)) {
            throw new Error("Expected the field `ValueReceivedDate` to be a primitive type in the JSON string but got " + data['ValueReceivedDate']);
        }
        // ensure the json data is a string
        if (data['ValueTypeCode'] && !(typeof data['ValueTypeCode'] === 'string' || data['ValueTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ValueTypeCode` to be a primitive type in the JSON string but got " + data['ValueTypeCode']);
        }
        // ensure the json data is a string
        if (data['VersionNmbr'] && !(typeof data['VersionNmbr'] === 'string' || data['VersionNmbr'] instanceof String)) {
            throw new Error("Expected the field `VersionNmbr` to be a primitive type in the JSON string but got " + data['VersionNmbr']);
        }
        // ensure the json data is a string
        if (data['ViolationCode'] && !(typeof data['ViolationCode'] === 'string' || data['ViolationCode'] instanceof String)) {
            throw new Error("Expected the field `ViolationCode` to be a primitive type in the JSON string but got " + data['ViolationCode']);
        }

        return true;
    }


}

Dfr0GetD80d90sDetailsD80D90sDetailsSources.RequiredProperties = ["DaysLate", "DmrDueDate", "LimitBeginDate", "LimitEndDate", "LimitId", "LimitSetName", "MissingLate", "MonitoringLocationCode", "MonitoringLocationDesc", "MonitoringPeriodEndDate", "NPDESId", "NodiCode", "NodiDesc", "NodiValidationFlag", "NpdesViolationId", "ParameterCode", "ParameterDesc", "PermFeatureNmbr", "RncDetectionCode", "RncDetectionDate", "RncDetectionDesc", "RncResolutionCode", "RncResolutionDate", "RncResolutionDesc", "StatisticalBaseMonthlyAvg", "ValueReceivedDate", "ValueTypeCode", "VersionNmbr", "ViolationCode"];

/**
 * The number of days the DMR value is late, as generated in ICIS-NPDES
 * @member {String} DaysLate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['DaysLate'] = undefined;

/**
 * The due date for the DMR to the NPDES program authority (e.g., EPA or state environmental agency) (MM/DD/YYYY).ï¿½
 * @member {String} DmrDueDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['DmrDueDate'] = undefined;

/**
 * The date on which a limit becomes in effect for a particular parameter in a limit set
 * @member {String} LimitBeginDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['LimitBeginDate'] = undefined;

/**
 * The date on which a limit stops being in effect for a particular parameter in a limit set
 * @member {String} LimitEndDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['LimitEndDate'] = undefined;

/**
 * The unique identifier for a limit parameter record
 * @member {String} LimitId
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['LimitId'] = undefined;

/**
 * The name associated with a group of parameter permit limits.
 * @member {String} LimitSetName
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['LimitSetName'] = undefined;

/**
 * Indicates if the permitted facility submitted missing or late DMRS to the NPDES permitting authority within the past three years.
 * @member {String} MissingLate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['MissingLate'] = undefined;

/**
 * The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature
 * @member {String} MonitoringLocationCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['MonitoringLocationCode'] = undefined;

/**
 * The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies
 * @member {String} MonitoringLocationDesc
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['MonitoringLocationDesc'] = undefined;

/**
 * The date that the monitoring period for the values covered by the DMR Form ends
 * @member {String} MonitoringPeriodEndDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['MonitoringPeriodEndDate'] = undefined;

/**
 * A unique ID assigned for each record/permit/site/facility within ICIS-NPDES.
 * @member {String} NPDESId
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['NPDESId'] = undefined;

/**
 * The no data indicator code for DMRs where no measurements are reported.
 * @member {String} NodiCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['NodiCode'] = undefined;

/**
 * The description of the NODI code explaining why no data are reported (e.g., no discharge, not quantifiable, conditional monitoring).
 * @member {String} NodiDesc
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['NodiDesc'] = undefined;

/**
 * Indicates whether the NODI is considered valid (Y) or invalid (N) for compliance determination purposes.
 * @member {String} NodiValidationFlag
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['NodiValidationFlag'] = undefined;

/**
 * The unique identifier for the violation related to a particular site.
 * @member {String} NpdesViolationId
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['NpdesViolationId'] = undefined;

/**
 * The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)
 * @member {String} ParameterCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['ParameterCode'] = undefined;

/**
 * The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code
 * @member {String} ParameterDesc
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['ParameterDesc'] = undefined;

/**
 * A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
 * @member {String} PermFeatureNmbr
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['PermFeatureNmbr'] = undefined;

/**
 * The reportable noncompliance detection code.
 * @member {String} RncDetectionCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncDetectionCode'] = undefined;

/**
 * The date that RNC was detected. It can be entered manually or automatically. In cases in which RNC is detected by ICIS-NPDES, the detection date entered will vary according to the type of violation detected (MM/DD/YYY).
 * @member {String} RncDetectionDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncDetectionDate'] = undefined;

/**
 * The reportable noncompliance detection description.
 * @member {String} RncDetectionDesc
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncDetectionDesc'] = undefined;

/**
 * The reportable noncompliance resolution code.
 * @member {String} RncResolutionCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncResolutionCode'] = undefined;

/**
 * The reportable noncompliance resolution date.
 * @member {String} RncResolutionDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncResolutionDate'] = undefined;

/**
 * The reportable noncompliance resolution description.
 * @member {String} RncResolutionDesc
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['RncResolutionDesc'] = undefined;

/**
 * @member {String} StatisticalBaseMonthlyAvg
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['StatisticalBaseMonthlyAvg'] = undefined;

/**
 * The date the DMR value was received by the regulatory authority
 * @member {String} ValueReceivedDate
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['ValueReceivedDate'] = undefined;

/**
 * The indication of the limit value type (e.g., Quantity 1, Concentration 2)
 * @member {String} ValueTypeCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['ValueTypeCode'] = undefined;

/**
 * The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance
 * @member {String} VersionNmbr
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['VersionNmbr'] = undefined;

/**
 * The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)
 * @member {String} ViolationCode
 */
Dfr0GetD80d90sDetailsD80D90sDetailsSources.prototype['ViolationCode'] = undefined;






export default Dfr0GetD80d90sDetailsD80D90sDetailsSources;

