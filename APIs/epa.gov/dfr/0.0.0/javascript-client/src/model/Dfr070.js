/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dfr071 from './Dfr071';
import Dfr072 from './Dfr072';

/**
 * The Dfr070 model module.
 * @module model/Dfr070
 * @version 0.0.0
 */
class Dfr070 {
    /**
     * Constructs a new <code>Dfr070</code>.
     * Lead and Copper Rule Object
     * @alias module:model/Dfr070
     */
    constructor() { 
        
        Dfr070.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dfr070</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr070} obj Optional instance to populate.
     * @return {module:model/Dfr070} The populated <code>Dfr070</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr070();

            if (data.hasOwnProperty('CopperSamples')) {
                obj['CopperSamples'] = ApiClient.convertToType(data['CopperSamples'], [Dfr071]);
            }
            if (data.hasOwnProperty('CuALE')) {
                obj['CuALE'] = ApiClient.convertToType(data['CuALE'], 'String');
            }
            if (data.hasOwnProperty('CuALEUnits')) {
                obj['CuALEUnits'] = ApiClient.convertToType(data['CuALEUnits'], 'String');
            }
            if (data.hasOwnProperty('CuALEValue')) {
                obj['CuALEValue'] = ApiClient.convertToType(data['CuALEValue'], 'String');
            }
            if (data.hasOwnProperty('CuSampleDates')) {
                obj['CuSampleDates'] = ApiClient.convertToType(data['CuSampleDates'], 'String');
            }
            if (data.hasOwnProperty('CuViol')) {
                obj['CuViol'] = ApiClient.convertToType(data['CuViol'], 'String');
            }
            if (data.hasOwnProperty('LeadAndCopperViol')) {
                obj['LeadAndCopperViol'] = ApiClient.convertToType(data['LeadAndCopperViol'], 'String');
            }
            if (data.hasOwnProperty('LeadCopperRuleHealthBasedViol')) {
                obj['LeadCopperRuleHealthBasedViol'] = ApiClient.convertToType(data['LeadCopperRuleHealthBasedViol'], 'String');
            }
            if (data.hasOwnProperty('LeadSamples')) {
                obj['LeadSamples'] = ApiClient.convertToType(data['LeadSamples'], [Dfr072]);
            }
            if (data.hasOwnProperty('PbALE')) {
                obj['PbALE'] = ApiClient.convertToType(data['PbALE'], 'String');
            }
            if (data.hasOwnProperty('PbALEUnits')) {
                obj['PbALEUnits'] = ApiClient.convertToType(data['PbALEUnits'], 'String');
            }
            if (data.hasOwnProperty('PbALEValue')) {
                obj['PbALEValue'] = ApiClient.convertToType(data['PbALEValue'], 'String');
            }
            if (data.hasOwnProperty('PbSampleDates')) {
                obj['PbSampleDates'] = ApiClient.convertToType(data['PbSampleDates'], 'String');
            }
            if (data.hasOwnProperty('PbViol')) {
                obj['PbViol'] = ApiClient.convertToType(data['PbViol'], 'String');
            }
            if (data.hasOwnProperty('RuleCode350Viol')) {
                obj['RuleCode350Viol'] = ApiClient.convertToType(data['RuleCode350Viol'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('iCU90')) {
                obj['iCU90'] = ApiClient.convertToType(data['iCU90'], 'String');
            }
            if (data.hasOwnProperty('iPB90')) {
                obj['iPB90'] = ApiClient.convertToType(data['iPB90'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr070</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr070</code>.
     */
    static validateJSON(data) {
        if (data['CopperSamples']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CopperSamples'])) {
                throw new Error("Expected the field `CopperSamples` to be an array in the JSON data but got " + data['CopperSamples']);
            }
            // validate the optional field `CopperSamples` (array)
            for (const item of data['CopperSamples']) {
                Dfr071.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CuALE'] && !(typeof data['CuALE'] === 'string' || data['CuALE'] instanceof String)) {
            throw new Error("Expected the field `CuALE` to be a primitive type in the JSON string but got " + data['CuALE']);
        }
        // ensure the json data is a string
        if (data['CuALEUnits'] && !(typeof data['CuALEUnits'] === 'string' || data['CuALEUnits'] instanceof String)) {
            throw new Error("Expected the field `CuALEUnits` to be a primitive type in the JSON string but got " + data['CuALEUnits']);
        }
        // ensure the json data is a string
        if (data['CuALEValue'] && !(typeof data['CuALEValue'] === 'string' || data['CuALEValue'] instanceof String)) {
            throw new Error("Expected the field `CuALEValue` to be a primitive type in the JSON string but got " + data['CuALEValue']);
        }
        // ensure the json data is a string
        if (data['CuSampleDates'] && !(typeof data['CuSampleDates'] === 'string' || data['CuSampleDates'] instanceof String)) {
            throw new Error("Expected the field `CuSampleDates` to be a primitive type in the JSON string but got " + data['CuSampleDates']);
        }
        // ensure the json data is a string
        if (data['CuViol'] && !(typeof data['CuViol'] === 'string' || data['CuViol'] instanceof String)) {
            throw new Error("Expected the field `CuViol` to be a primitive type in the JSON string but got " + data['CuViol']);
        }
        // ensure the json data is a string
        if (data['LeadAndCopperViol'] && !(typeof data['LeadAndCopperViol'] === 'string' || data['LeadAndCopperViol'] instanceof String)) {
            throw new Error("Expected the field `LeadAndCopperViol` to be a primitive type in the JSON string but got " + data['LeadAndCopperViol']);
        }
        // ensure the json data is a string
        if (data['LeadCopperRuleHealthBasedViol'] && !(typeof data['LeadCopperRuleHealthBasedViol'] === 'string' || data['LeadCopperRuleHealthBasedViol'] instanceof String)) {
            throw new Error("Expected the field `LeadCopperRuleHealthBasedViol` to be a primitive type in the JSON string but got " + data['LeadCopperRuleHealthBasedViol']);
        }
        if (data['LeadSamples']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeadSamples'])) {
                throw new Error("Expected the field `LeadSamples` to be an array in the JSON data but got " + data['LeadSamples']);
            }
            // validate the optional field `LeadSamples` (array)
            for (const item of data['LeadSamples']) {
                Dfr072.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PbALE'] && !(typeof data['PbALE'] === 'string' || data['PbALE'] instanceof String)) {
            throw new Error("Expected the field `PbALE` to be a primitive type in the JSON string but got " + data['PbALE']);
        }
        // ensure the json data is a string
        if (data['PbALEUnits'] && !(typeof data['PbALEUnits'] === 'string' || data['PbALEUnits'] instanceof String)) {
            throw new Error("Expected the field `PbALEUnits` to be a primitive type in the JSON string but got " + data['PbALEUnits']);
        }
        // ensure the json data is a string
        if (data['PbALEValue'] && !(typeof data['PbALEValue'] === 'string' || data['PbALEValue'] instanceof String)) {
            throw new Error("Expected the field `PbALEValue` to be a primitive type in the JSON string but got " + data['PbALEValue']);
        }
        // ensure the json data is a string
        if (data['PbSampleDates'] && !(typeof data['PbSampleDates'] === 'string' || data['PbSampleDates'] instanceof String)) {
            throw new Error("Expected the field `PbSampleDates` to be a primitive type in the JSON string but got " + data['PbSampleDates']);
        }
        // ensure the json data is a string
        if (data['PbViol'] && !(typeof data['PbViol'] === 'string' || data['PbViol'] instanceof String)) {
            throw new Error("Expected the field `PbViol` to be a primitive type in the JSON string but got " + data['PbViol']);
        }
        // ensure the json data is a string
        if (data['RuleCode350Viol'] && !(typeof data['RuleCode350Viol'] === 'string' || data['RuleCode350Viol'] instanceof String)) {
            throw new Error("Expected the field `RuleCode350Viol` to be a primitive type in the JSON string but got " + data['RuleCode350Viol']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['iCU90'] && !(typeof data['iCU90'] === 'string' || data['iCU90'] instanceof String)) {
            throw new Error("Expected the field `iCU90` to be a primitive type in the JSON string but got " + data['iCU90']);
        }
        // ensure the json data is a string
        if (data['iPB90'] && !(typeof data['iPB90'] === 'string' || data['iPB90'] instanceof String)) {
            throw new Error("Expected the field `iPB90` to be a primitive type in the JSON string but got " + data['iPB90']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Dfr071>} CopperSamples
 */
Dfr070.prototype['CopperSamples'] = undefined;

/**
 * The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.
 * @member {String} CuALE
 */
Dfr070.prototype['CuALE'] = undefined;

/**
 * The copper action level exceedances measurement units.
 * @member {String} CuALEUnits
 */
Dfr070.prototype['CuALEUnits'] = undefined;

/**
 * The copper action level exceedance value.
 * @member {String} CuALEValue
 */
Dfr070.prototype['CuALEValue'] = undefined;

/**
 * The dates during which tap water samples were collected.
 * @member {String} CuSampleDates
 */
Dfr070.prototype['CuSampleDates'] = undefined;

/**
 * The number of copper violations in the last five years.
 * @member {String} CuViol
 */
Dfr070.prototype['CuViol'] = undefined;

/**
 * The number of lead and copper violations.
 * @member {String} LeadAndCopperViol
 */
Dfr070.prototype['LeadAndCopperViol'] = undefined;

/**
 * The count of open health-based violations of the Lead and Copper Rule in the past five years.
 * @member {String} LeadCopperRuleHealthBasedViol
 */
Dfr070.prototype['LeadCopperRuleHealthBasedViol'] = undefined;

/**
 * @member {Array.<module:model/Dfr072>} LeadSamples
 */
Dfr070.prototype['LeadSamples'] = undefined;

/**
 * The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.
 * @member {String} PbALE
 */
Dfr070.prototype['PbALE'] = undefined;

/**
 * The lead action level exceedance measurement units.
 * @member {String} PbALEUnits
 */
Dfr070.prototype['PbALEUnits'] = undefined;

/**
 * The lead action level exceedance sample value.
 * @member {String} PbALEValue
 */
Dfr070.prototype['PbALEValue'] = undefined;

/**
 * The dates during which tap water samples were collected.
 * @member {String} PbSampleDates
 */
Dfr070.prototype['PbSampleDates'] = undefined;

/**
 * The number of lead violations in the last five years.
 * @member {String} PbViol
 */
Dfr070.prototype['PbViol'] = undefined;

/**
 * The count of open health-based violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules.
 * @member {String} RuleCode350Viol
 */
Dfr070.prototype['RuleCode350Viol'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr070.prototype['SourceID'] = undefined;

/**
 * The number of times samples have been collected for copper in the last five years.
 * @member {String} iCU90
 */
Dfr070.prototype['iCU90'] = undefined;

/**
 * The number of times samples have been collected for lead in the last five years.
 * @member {String} iPB90
 */
Dfr070.prototype['iPB90'] = undefined;






export default Dfr070;

