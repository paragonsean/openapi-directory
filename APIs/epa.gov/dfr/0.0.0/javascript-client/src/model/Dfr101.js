/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr101 model module.
 * @module model/Dfr101
 * @version 0.0.0
 */
class Dfr101 {
    /**
     * Constructs a new <code>Dfr101</code>.
     * Release Year Object
     * @alias module:model/Dfr101
     * @param offSiteTransfersPOTWS {String} The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs).
     * @param releasesToLand {String} Total releases to land on-site (includes landfills), in pounds per year.
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param surfaceWaterDischarges {String} The total direct discharges to receiving streams or water bodies, in pounds per year.
     * @param totalAirEmissions {String} The total fugitive (non-point air emissions) and stack or point air emissions, in pounds per year.
     * @param totalOffSiteReleases {String} The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs) and other off-site locations.
     * @param totalOnSiteReleases {String} Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
     * @param totalReleasesTransfers {String} Grand total for Air Emissions, Surface Water Discharges, Underground Injections, Releases to Land, On-Site Releases and Off-Site Transfers in pounds per year for all types of chemicals.
     * @param undergroundInjections {String} The total underground injections to wells on-site, in pounds per year.
     * @param year {String} The calendar year of a time dimension (reporting table) record.
     */
    constructor(offSiteTransfersPOTWS, releasesToLand, sourceID, surfaceWaterDischarges, totalAirEmissions, totalOffSiteReleases, totalOnSiteReleases, totalReleasesTransfers, undergroundInjections, year) { 
        
        Dfr101.initialize(this, offSiteTransfersPOTWS, releasesToLand, sourceID, surfaceWaterDischarges, totalAirEmissions, totalOffSiteReleases, totalOnSiteReleases, totalReleasesTransfers, undergroundInjections, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, offSiteTransfersPOTWS, releasesToLand, sourceID, surfaceWaterDischarges, totalAirEmissions, totalOffSiteReleases, totalOnSiteReleases, totalReleasesTransfers, undergroundInjections, year) { 
        obj['OffSiteTransfersPOTWS'] = offSiteTransfersPOTWS;
        obj['ReleasesToLand'] = releasesToLand;
        obj['SourceID'] = sourceID;
        obj['SurfaceWaterDischarges'] = surfaceWaterDischarges;
        obj['TotalAirEmissions'] = totalAirEmissions;
        obj['TotalOffSiteReleases'] = totalOffSiteReleases;
        obj['TotalOnSiteReleases'] = totalOnSiteReleases;
        obj['TotalReleasesTransfers'] = totalReleasesTransfers;
        obj['UndergroundInjections'] = undergroundInjections;
        obj['Year'] = year;
    }

    /**
     * Constructs a <code>Dfr101</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr101} obj Optional instance to populate.
     * @return {module:model/Dfr101} The populated <code>Dfr101</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr101();

            if (data.hasOwnProperty('OffSiteTransfersPOTWS')) {
                obj['OffSiteTransfersPOTWS'] = ApiClient.convertToType(data['OffSiteTransfersPOTWS'], 'String');
            }
            if (data.hasOwnProperty('ReleasesToLand')) {
                obj['ReleasesToLand'] = ApiClient.convertToType(data['ReleasesToLand'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('SurfaceWaterDischarges')) {
                obj['SurfaceWaterDischarges'] = ApiClient.convertToType(data['SurfaceWaterDischarges'], 'String');
            }
            if (data.hasOwnProperty('TotalAirEmissions')) {
                obj['TotalAirEmissions'] = ApiClient.convertToType(data['TotalAirEmissions'], 'String');
            }
            if (data.hasOwnProperty('TotalOffSiteReleases')) {
                obj['TotalOffSiteReleases'] = ApiClient.convertToType(data['TotalOffSiteReleases'], 'String');
            }
            if (data.hasOwnProperty('TotalOnSiteReleases')) {
                obj['TotalOnSiteReleases'] = ApiClient.convertToType(data['TotalOnSiteReleases'], 'String');
            }
            if (data.hasOwnProperty('TotalReleasesTransfers')) {
                obj['TotalReleasesTransfers'] = ApiClient.convertToType(data['TotalReleasesTransfers'], 'String');
            }
            if (data.hasOwnProperty('UndergroundInjections')) {
                obj['UndergroundInjections'] = ApiClient.convertToType(data['UndergroundInjections'], 'String');
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr101</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr101</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr101.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['OffSiteTransfersPOTWS'] && !(typeof data['OffSiteTransfersPOTWS'] === 'string' || data['OffSiteTransfersPOTWS'] instanceof String)) {
            throw new Error("Expected the field `OffSiteTransfersPOTWS` to be a primitive type in the JSON string but got " + data['OffSiteTransfersPOTWS']);
        }
        // ensure the json data is a string
        if (data['ReleasesToLand'] && !(typeof data['ReleasesToLand'] === 'string' || data['ReleasesToLand'] instanceof String)) {
            throw new Error("Expected the field `ReleasesToLand` to be a primitive type in the JSON string but got " + data['ReleasesToLand']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['SurfaceWaterDischarges'] && !(typeof data['SurfaceWaterDischarges'] === 'string' || data['SurfaceWaterDischarges'] instanceof String)) {
            throw new Error("Expected the field `SurfaceWaterDischarges` to be a primitive type in the JSON string but got " + data['SurfaceWaterDischarges']);
        }
        // ensure the json data is a string
        if (data['TotalAirEmissions'] && !(typeof data['TotalAirEmissions'] === 'string' || data['TotalAirEmissions'] instanceof String)) {
            throw new Error("Expected the field `TotalAirEmissions` to be a primitive type in the JSON string but got " + data['TotalAirEmissions']);
        }
        // ensure the json data is a string
        if (data['TotalOffSiteReleases'] && !(typeof data['TotalOffSiteReleases'] === 'string' || data['TotalOffSiteReleases'] instanceof String)) {
            throw new Error("Expected the field `TotalOffSiteReleases` to be a primitive type in the JSON string but got " + data['TotalOffSiteReleases']);
        }
        // ensure the json data is a string
        if (data['TotalOnSiteReleases'] && !(typeof data['TotalOnSiteReleases'] === 'string' || data['TotalOnSiteReleases'] instanceof String)) {
            throw new Error("Expected the field `TotalOnSiteReleases` to be a primitive type in the JSON string but got " + data['TotalOnSiteReleases']);
        }
        // ensure the json data is a string
        if (data['TotalReleasesTransfers'] && !(typeof data['TotalReleasesTransfers'] === 'string' || data['TotalReleasesTransfers'] instanceof String)) {
            throw new Error("Expected the field `TotalReleasesTransfers` to be a primitive type in the JSON string but got " + data['TotalReleasesTransfers']);
        }
        // ensure the json data is a string
        if (data['UndergroundInjections'] && !(typeof data['UndergroundInjections'] === 'string' || data['UndergroundInjections'] instanceof String)) {
            throw new Error("Expected the field `UndergroundInjections` to be a primitive type in the JSON string but got " + data['UndergroundInjections']);
        }
        // ensure the json data is a string
        if (data['Year'] && !(typeof data['Year'] === 'string' || data['Year'] instanceof String)) {
            throw new Error("Expected the field `Year` to be a primitive type in the JSON string but got " + data['Year']);
        }

        return true;
    }


}

Dfr101.RequiredProperties = ["OffSiteTransfersPOTWS", "ReleasesToLand", "SourceID", "SurfaceWaterDischarges", "TotalAirEmissions", "TotalOffSiteReleases", "TotalOnSiteReleases", "TotalReleasesTransfers", "UndergroundInjections", "Year"];

/**
 * The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs).
 * @member {String} OffSiteTransfersPOTWS
 */
Dfr101.prototype['OffSiteTransfersPOTWS'] = undefined;

/**
 * Total releases to land on-site (includes landfills), in pounds per year.
 * @member {String} ReleasesToLand
 */
Dfr101.prototype['ReleasesToLand'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr101.prototype['SourceID'] = undefined;

/**
 * The total direct discharges to receiving streams or water bodies, in pounds per year.
 * @member {String} SurfaceWaterDischarges
 */
Dfr101.prototype['SurfaceWaterDischarges'] = undefined;

/**
 * The total fugitive (non-point air emissions) and stack or point air emissions, in pounds per year.
 * @member {String} TotalAirEmissions
 */
Dfr101.prototype['TotalAirEmissions'] = undefined;

/**
 * The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs) and other off-site locations.
 * @member {String} TotalOffSiteReleases
 */
Dfr101.prototype['TotalOffSiteReleases'] = undefined;

/**
 * Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.
 * @member {String} TotalOnSiteReleases
 */
Dfr101.prototype['TotalOnSiteReleases'] = undefined;

/**
 * Grand total for Air Emissions, Surface Water Discharges, Underground Injections, Releases to Land, On-Site Releases and Off-Site Transfers in pounds per year for all types of chemicals.
 * @member {String} TotalReleasesTransfers
 */
Dfr101.prototype['TotalReleasesTransfers'] = undefined;

/**
 * The total underground injections to wells on-site, in pounds per year.
 * @member {String} UndergroundInjections
 */
Dfr101.prototype['UndergroundInjections'] = undefined;

/**
 * The calendar year of a time dimension (reporting table) record.
 * @member {String} Year
 */
Dfr101.prototype['Year'] = undefined;






export default Dfr101;

