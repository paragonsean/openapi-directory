/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr111DetailsSources model module.
 * @module model/Dfr111DetailsSources
 * @version 0.0.0
 */
class Dfr111DetailsSources {
    /**
     * Constructs a new <code>Dfr111DetailsSources</code>.
     * Sources Object
     * @alias module:model/Dfr111DetailsSources
     * @param assessedOr303dFlg {String} Denotes facilities that discharge into an impaired water body for which a plan has not yet been developed (category 5 water body) and facilities that discharge to an impaired water body for which the state has developed a plan to return the water to its designated uses under the Total Maximum Daily Loads (TMDL) program (category 4 water body).
     * @param assessmentUnitEPACategory {String} The water quality category under which the water body�or water segment is classified.�Additional information: https://www.epa.gov/wqs-tech/supplemental-module-listing-impaired-waters-and-developing-tmdls
     * @param attainsAquaticLifeUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
     * @param attainsCauseGroups {String} Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
     * @param attainsExceptnlUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
     * @param attainsPossiblePollutants {String} Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody, as indicated in ATTAINS.
     * @param attainsRecreationUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
     * @param attainsShelffishUseFlg {String} Indicates if the waterbody in which the facility resides is designated for shellfish use.
     * @param attainsStateCauses {String} Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
     * @param cycleYear {String} The Assessment, Total Maximum Daily Load (TMDL) Tracking and Implementation System (ATTAINS) reporting year.
     * @param gNISName {String} The name of the waterbody in which the facility is located near or is permitted to discharge directly.
     * @param impairedWatersFlg {String} Indicates if the facility is porentially discharging to impaired waters.
     * @param reachCode {String} A nationally unique and permanent 14-digit identifier for the waterbody, assigned by the U.S. Geological Survey.
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param wBD12 {String} The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
     * @param wBD12Name {String} The name of the watershed in which the facility resides.
     */
    constructor(assessedOr303dFlg, assessmentUnitEPACategory, attainsAquaticLifeUseFlg, attainsCauseGroups, attainsExceptnlUseFlg, attainsPossiblePollutants, attainsRecreationUseFlg, attainsShelffishUseFlg, attainsStateCauses, cycleYear, gNISName, impairedWatersFlg, reachCode, sourceID, wBD12, wBD12Name) { 
        
        Dfr111DetailsSources.initialize(this, assessedOr303dFlg, assessmentUnitEPACategory, attainsAquaticLifeUseFlg, attainsCauseGroups, attainsExceptnlUseFlg, attainsPossiblePollutants, attainsRecreationUseFlg, attainsShelffishUseFlg, attainsStateCauses, cycleYear, gNISName, impairedWatersFlg, reachCode, sourceID, wBD12, wBD12Name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assessedOr303dFlg, assessmentUnitEPACategory, attainsAquaticLifeUseFlg, attainsCauseGroups, attainsExceptnlUseFlg, attainsPossiblePollutants, attainsRecreationUseFlg, attainsShelffishUseFlg, attainsStateCauses, cycleYear, gNISName, impairedWatersFlg, reachCode, sourceID, wBD12, wBD12Name) { 
        obj['AssessedOr303dFlg'] = assessedOr303dFlg;
        obj['AssessmentUnitEPACategory'] = assessmentUnitEPACategory;
        obj['AttainsAquaticLifeUseFlg'] = attainsAquaticLifeUseFlg;
        obj['AttainsCauseGroups'] = attainsCauseGroups;
        obj['AttainsExceptnlUseFlg'] = attainsExceptnlUseFlg;
        obj['AttainsPossiblePollutants'] = attainsPossiblePollutants;
        obj['AttainsRecreationUseFlg'] = attainsRecreationUseFlg;
        obj['AttainsShelffishUseFlg'] = attainsShelffishUseFlg;
        obj['AttainsStateCauses'] = attainsStateCauses;
        obj['CycleYear'] = cycleYear;
        obj['GNISName'] = gNISName;
        obj['ImpairedWatersFlg'] = impairedWatersFlg;
        obj['ReachCode'] = reachCode;
        obj['SourceID'] = sourceID;
        obj['WBD12'] = wBD12;
        obj['WBD12Name'] = wBD12Name;
    }

    /**
     * Constructs a <code>Dfr111DetailsSources</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr111DetailsSources} obj Optional instance to populate.
     * @return {module:model/Dfr111DetailsSources} The populated <code>Dfr111DetailsSources</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr111DetailsSources();

            if (data.hasOwnProperty('AssessedOr303dFlg')) {
                obj['AssessedOr303dFlg'] = ApiClient.convertToType(data['AssessedOr303dFlg'], 'String');
            }
            if (data.hasOwnProperty('AssessmentUnitEPACategory')) {
                obj['AssessmentUnitEPACategory'] = ApiClient.convertToType(data['AssessmentUnitEPACategory'], 'String');
            }
            if (data.hasOwnProperty('AttainsAquaticLifeUseFlg')) {
                obj['AttainsAquaticLifeUseFlg'] = ApiClient.convertToType(data['AttainsAquaticLifeUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsCauseGroups')) {
                obj['AttainsCauseGroups'] = ApiClient.convertToType(data['AttainsCauseGroups'], 'String');
            }
            if (data.hasOwnProperty('AttainsExceptnlUseFlg')) {
                obj['AttainsExceptnlUseFlg'] = ApiClient.convertToType(data['AttainsExceptnlUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsPossiblePollutants')) {
                obj['AttainsPossiblePollutants'] = ApiClient.convertToType(data['AttainsPossiblePollutants'], 'String');
            }
            if (data.hasOwnProperty('AttainsRecreationUseFlg')) {
                obj['AttainsRecreationUseFlg'] = ApiClient.convertToType(data['AttainsRecreationUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsShelffishUseFlg')) {
                obj['AttainsShelffishUseFlg'] = ApiClient.convertToType(data['AttainsShelffishUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsStateCauses')) {
                obj['AttainsStateCauses'] = ApiClient.convertToType(data['AttainsStateCauses'], 'String');
            }
            if (data.hasOwnProperty('CycleYear')) {
                obj['CycleYear'] = ApiClient.convertToType(data['CycleYear'], 'String');
            }
            if (data.hasOwnProperty('GNISName')) {
                obj['GNISName'] = ApiClient.convertToType(data['GNISName'], 'String');
            }
            if (data.hasOwnProperty('ImpairedWatersFlg')) {
                obj['ImpairedWatersFlg'] = ApiClient.convertToType(data['ImpairedWatersFlg'], 'String');
            }
            if (data.hasOwnProperty('ReachCode')) {
                obj['ReachCode'] = ApiClient.convertToType(data['ReachCode'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('WBD12')) {
                obj['WBD12'] = ApiClient.convertToType(data['WBD12'], 'String');
            }
            if (data.hasOwnProperty('WBD12Name')) {
                obj['WBD12Name'] = ApiClient.convertToType(data['WBD12Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr111DetailsSources</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr111DetailsSources</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr111DetailsSources.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AssessedOr303dFlg'] && !(typeof data['AssessedOr303dFlg'] === 'string' || data['AssessedOr303dFlg'] instanceof String)) {
            throw new Error("Expected the field `AssessedOr303dFlg` to be a primitive type in the JSON string but got " + data['AssessedOr303dFlg']);
        }
        // ensure the json data is a string
        if (data['AssessmentUnitEPACategory'] && !(typeof data['AssessmentUnitEPACategory'] === 'string' || data['AssessmentUnitEPACategory'] instanceof String)) {
            throw new Error("Expected the field `AssessmentUnitEPACategory` to be a primitive type in the JSON string but got " + data['AssessmentUnitEPACategory']);
        }
        // ensure the json data is a string
        if (data['AttainsAquaticLifeUseFlg'] && !(typeof data['AttainsAquaticLifeUseFlg'] === 'string' || data['AttainsAquaticLifeUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsAquaticLifeUseFlg` to be a primitive type in the JSON string but got " + data['AttainsAquaticLifeUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsCauseGroups'] && !(typeof data['AttainsCauseGroups'] === 'string' || data['AttainsCauseGroups'] instanceof String)) {
            throw new Error("Expected the field `AttainsCauseGroups` to be a primitive type in the JSON string but got " + data['AttainsCauseGroups']);
        }
        // ensure the json data is a string
        if (data['AttainsExceptnlUseFlg'] && !(typeof data['AttainsExceptnlUseFlg'] === 'string' || data['AttainsExceptnlUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsExceptnlUseFlg` to be a primitive type in the JSON string but got " + data['AttainsExceptnlUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsPossiblePollutants'] && !(typeof data['AttainsPossiblePollutants'] === 'string' || data['AttainsPossiblePollutants'] instanceof String)) {
            throw new Error("Expected the field `AttainsPossiblePollutants` to be a primitive type in the JSON string but got " + data['AttainsPossiblePollutants']);
        }
        // ensure the json data is a string
        if (data['AttainsRecreationUseFlg'] && !(typeof data['AttainsRecreationUseFlg'] === 'string' || data['AttainsRecreationUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsRecreationUseFlg` to be a primitive type in the JSON string but got " + data['AttainsRecreationUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsShelffishUseFlg'] && !(typeof data['AttainsShelffishUseFlg'] === 'string' || data['AttainsShelffishUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsShelffishUseFlg` to be a primitive type in the JSON string but got " + data['AttainsShelffishUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsStateCauses'] && !(typeof data['AttainsStateCauses'] === 'string' || data['AttainsStateCauses'] instanceof String)) {
            throw new Error("Expected the field `AttainsStateCauses` to be a primitive type in the JSON string but got " + data['AttainsStateCauses']);
        }
        // ensure the json data is a string
        if (data['CycleYear'] && !(typeof data['CycleYear'] === 'string' || data['CycleYear'] instanceof String)) {
            throw new Error("Expected the field `CycleYear` to be a primitive type in the JSON string but got " + data['CycleYear']);
        }
        // ensure the json data is a string
        if (data['GNISName'] && !(typeof data['GNISName'] === 'string' || data['GNISName'] instanceof String)) {
            throw new Error("Expected the field `GNISName` to be a primitive type in the JSON string but got " + data['GNISName']);
        }
        // ensure the json data is a string
        if (data['ImpairedWatersFlg'] && !(typeof data['ImpairedWatersFlg'] === 'string' || data['ImpairedWatersFlg'] instanceof String)) {
            throw new Error("Expected the field `ImpairedWatersFlg` to be a primitive type in the JSON string but got " + data['ImpairedWatersFlg']);
        }
        // ensure the json data is a string
        if (data['ReachCode'] && !(typeof data['ReachCode'] === 'string' || data['ReachCode'] instanceof String)) {
            throw new Error("Expected the field `ReachCode` to be a primitive type in the JSON string but got " + data['ReachCode']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['WBD12'] && !(typeof data['WBD12'] === 'string' || data['WBD12'] instanceof String)) {
            throw new Error("Expected the field `WBD12` to be a primitive type in the JSON string but got " + data['WBD12']);
        }
        // ensure the json data is a string
        if (data['WBD12Name'] && !(typeof data['WBD12Name'] === 'string' || data['WBD12Name'] instanceof String)) {
            throw new Error("Expected the field `WBD12Name` to be a primitive type in the JSON string but got " + data['WBD12Name']);
        }

        return true;
    }


}

Dfr111DetailsSources.RequiredProperties = ["AssessedOr303dFlg", "AssessmentUnitEPACategory", "AttainsAquaticLifeUseFlg", "AttainsCauseGroups", "AttainsExceptnlUseFlg", "AttainsPossiblePollutants", "AttainsRecreationUseFlg", "AttainsShelffishUseFlg", "AttainsStateCauses", "CycleYear", "GNISName", "ImpairedWatersFlg", "ReachCode", "SourceID", "WBD12", "WBD12Name"];

/**
 * Denotes facilities that discharge into an impaired water body for which a plan has not yet been developed (category 5 water body) and facilities that discharge to an impaired water body for which the state has developed a plan to return the water to its designated uses under the Total Maximum Daily Loads (TMDL) program (category 4 water body).
 * @member {String} AssessedOr303dFlg
 */
Dfr111DetailsSources.prototype['AssessedOr303dFlg'] = undefined;

/**
 * The water quality category under which the water body�or water segment is classified.�Additional information: https://www.epa.gov/wqs-tech/supplemental-module-listing-impaired-waters-and-developing-tmdls
 * @member {String} AssessmentUnitEPACategory
 */
Dfr111DetailsSources.prototype['AssessmentUnitEPACategory'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
 * @member {String} AttainsAquaticLifeUseFlg
 */
Dfr111DetailsSources.prototype['AttainsAquaticLifeUseFlg'] = undefined;

/**
 * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
 * @member {String} AttainsCauseGroups
 */
Dfr111DetailsSources.prototype['AttainsCauseGroups'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
 * @member {String} AttainsExceptnlUseFlg
 */
Dfr111DetailsSources.prototype['AttainsExceptnlUseFlg'] = undefined;

/**
 * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody, as indicated in ATTAINS.
 * @member {String} AttainsPossiblePollutants
 */
Dfr111DetailsSources.prototype['AttainsPossiblePollutants'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
 * @member {String} AttainsRecreationUseFlg
 */
Dfr111DetailsSources.prototype['AttainsRecreationUseFlg'] = undefined;

/**
 * Indicates if the waterbody in which the facility resides is designated for shellfish use.
 * @member {String} AttainsShelffishUseFlg
 */
Dfr111DetailsSources.prototype['AttainsShelffishUseFlg'] = undefined;

/**
 * Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
 * @member {String} AttainsStateCauses
 */
Dfr111DetailsSources.prototype['AttainsStateCauses'] = undefined;

/**
 * The Assessment, Total Maximum Daily Load (TMDL) Tracking and Implementation System (ATTAINS) reporting year.
 * @member {String} CycleYear
 */
Dfr111DetailsSources.prototype['CycleYear'] = undefined;

/**
 * The name of the waterbody in which the facility is located near or is permitted to discharge directly.
 * @member {String} GNISName
 */
Dfr111DetailsSources.prototype['GNISName'] = undefined;

/**
 * Indicates if the facility is porentially discharging to impaired waters.
 * @member {String} ImpairedWatersFlg
 */
Dfr111DetailsSources.prototype['ImpairedWatersFlg'] = undefined;

/**
 * A nationally unique and permanent 14-digit identifier for the waterbody, assigned by the U.S. Geological Survey.
 * @member {String} ReachCode
 */
Dfr111DetailsSources.prototype['ReachCode'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr111DetailsSources.prototype['SourceID'] = undefined;

/**
 * The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
 * @member {String} WBD12
 */
Dfr111DetailsSources.prototype['WBD12'] = undefined;

/**
 * The name of the watershed in which the facility resides.
 * @member {String} WBD12Name
 */
Dfr111DetailsSources.prototype['WBD12Name'] = undefined;






export default Dfr111DetailsSources;

