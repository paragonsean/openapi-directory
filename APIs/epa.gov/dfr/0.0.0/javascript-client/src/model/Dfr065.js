/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr065 model module.
 * @module model/Dfr065
 * @version 0.0.0
 */
class Dfr065 {
    /**
     * Constructs a new <code>Dfr065</code>.
     * Action Object
     * @alias module:model/Dfr065
     * @param actionDate {String} Air Facility System (AFS) ID.
     * @param actionType {String} Text description of type of enforcement action. The type of action and description are designated differently in each system, but may be equivalent.
     * @param leadAgency {String} The lead agency (e.g., EPA, State) conducting the inspection
     * @param penaltyAmount {String} ??
     * @param penaltyDesc {String} ??
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     */
    constructor(actionDate, actionType, leadAgency, penaltyAmount, penaltyDesc, sourceID, statute) { 
        
        Dfr065.initialize(this, actionDate, actionType, leadAgency, penaltyAmount, penaltyDesc, sourceID, statute);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionDate, actionType, leadAgency, penaltyAmount, penaltyDesc, sourceID, statute) { 
        obj['ActionDate'] = actionDate;
        obj['ActionType'] = actionType;
        obj['LeadAgency'] = leadAgency;
        obj['PenaltyAmount'] = penaltyAmount;
        obj['PenaltyDesc'] = penaltyDesc;
        obj['SourceID'] = sourceID;
        obj['Statute'] = statute;
    }

    /**
     * Constructs a <code>Dfr065</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr065} obj Optional instance to populate.
     * @return {module:model/Dfr065} The populated <code>Dfr065</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr065();

            if (data.hasOwnProperty('ActionDate')) {
                obj['ActionDate'] = ApiClient.convertToType(data['ActionDate'], 'String');
            }
            if (data.hasOwnProperty('ActionType')) {
                obj['ActionType'] = ApiClient.convertToType(data['ActionType'], 'String');
            }
            if (data.hasOwnProperty('LeadAgency')) {
                obj['LeadAgency'] = ApiClient.convertToType(data['LeadAgency'], 'String');
            }
            if (data.hasOwnProperty('PenaltyAmount')) {
                obj['PenaltyAmount'] = ApiClient.convertToType(data['PenaltyAmount'], 'String');
            }
            if (data.hasOwnProperty('PenaltyDesc')) {
                obj['PenaltyDesc'] = ApiClient.convertToType(data['PenaltyDesc'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr065</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr065</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr065.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ActionDate'] && !(typeof data['ActionDate'] === 'string' || data['ActionDate'] instanceof String)) {
            throw new Error("Expected the field `ActionDate` to be a primitive type in the JSON string but got " + data['ActionDate']);
        }
        // ensure the json data is a string
        if (data['ActionType'] && !(typeof data['ActionType'] === 'string' || data['ActionType'] instanceof String)) {
            throw new Error("Expected the field `ActionType` to be a primitive type in the JSON string but got " + data['ActionType']);
        }
        // ensure the json data is a string
        if (data['LeadAgency'] && !(typeof data['LeadAgency'] === 'string' || data['LeadAgency'] instanceof String)) {
            throw new Error("Expected the field `LeadAgency` to be a primitive type in the JSON string but got " + data['LeadAgency']);
        }
        // ensure the json data is a string
        if (data['PenaltyAmount'] && !(typeof data['PenaltyAmount'] === 'string' || data['PenaltyAmount'] instanceof String)) {
            throw new Error("Expected the field `PenaltyAmount` to be a primitive type in the JSON string but got " + data['PenaltyAmount']);
        }
        // ensure the json data is a string
        if (data['PenaltyDesc'] && !(typeof data['PenaltyDesc'] === 'string' || data['PenaltyDesc'] instanceof String)) {
            throw new Error("Expected the field `PenaltyDesc` to be a primitive type in the JSON string but got " + data['PenaltyDesc']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }

        return true;
    }


}

Dfr065.RequiredProperties = ["ActionDate", "ActionType", "LeadAgency", "PenaltyAmount", "PenaltyDesc", "SourceID", "Statute"];

/**
 * Air Facility System (AFS) ID.
 * @member {String} ActionDate
 */
Dfr065.prototype['ActionDate'] = undefined;

/**
 * Text description of type of enforcement action. The type of action and description are designated differently in each system, but may be equivalent.
 * @member {String} ActionType
 */
Dfr065.prototype['ActionType'] = undefined;

/**
 * The lead agency (e.g., EPA, State) conducting the inspection
 * @member {String} LeadAgency
 */
Dfr065.prototype['LeadAgency'] = undefined;

/**
 * ??
 * @member {String} PenaltyAmount
 */
Dfr065.prototype['PenaltyAmount'] = undefined;

/**
 * ??
 * @member {String} PenaltyDesc
 */
Dfr065.prototype['PenaltyDesc'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr065.prototype['SourceID'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Dfr065.prototype['Statute'] = undefined;






export default Dfr065;

