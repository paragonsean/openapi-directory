/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr018Summaries model module.
 * @module model/Dfr018Summaries
 * @version 0.0.0
 */
class Dfr018Summaries {
    /**
     * Constructs a new <code>Dfr018Summaries</code>.
     * Summaries Object
     * @alias module:model/Dfr018Summaries
     * @param cases {String} The number of EPA enforcement cases that have been brought against the facility, under the corresponding statute, within the designated time period.
     * @param currentStatus {String} The current status for the facility during the most current quarter. (No violation, noncompliance)
     * @param formalActions {String} The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
     * @param informalActions {String} The number of informal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
     * @param inspections {String} The number of inspections/compliance evaluations that have occurred at the facility, under the corresponding statute, within the designated time period
     * @param lastInspection {String} The date on which the most recent inspection of the facility took place
     * @param qtrsInNC {String} The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status
     * @param qtrsInSNC {String} The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     * @param totalCasePenalties {String} ??
     * @param totalPenalties {String} The total dollar amount of either assessed or final penalties within the five year time period
     */
    constructor(cases, currentStatus, formalActions, informalActions, inspections, lastInspection, qtrsInNC, qtrsInSNC, statute, totalCasePenalties, totalPenalties) { 
        
        Dfr018Summaries.initialize(this, cases, currentStatus, formalActions, informalActions, inspections, lastInspection, qtrsInNC, qtrsInSNC, statute, totalCasePenalties, totalPenalties);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cases, currentStatus, formalActions, informalActions, inspections, lastInspection, qtrsInNC, qtrsInSNC, statute, totalCasePenalties, totalPenalties) { 
        obj['Cases'] = cases;
        obj['CurrentStatus'] = currentStatus;
        obj['FormalActions'] = formalActions;
        obj['InformalActions'] = informalActions;
        obj['Inspections'] = inspections;
        obj['LastInspection'] = lastInspection;
        obj['QtrsInNC'] = qtrsInNC;
        obj['QtrsInSNC'] = qtrsInSNC;
        obj['Statute'] = statute;
        obj['TotalCasePenalties'] = totalCasePenalties;
        obj['TotalPenalties'] = totalPenalties;
    }

    /**
     * Constructs a <code>Dfr018Summaries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr018Summaries} obj Optional instance to populate.
     * @return {module:model/Dfr018Summaries} The populated <code>Dfr018Summaries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr018Summaries();

            if (data.hasOwnProperty('Cases')) {
                obj['Cases'] = ApiClient.convertToType(data['Cases'], 'String');
            }
            if (data.hasOwnProperty('CurrentStatus')) {
                obj['CurrentStatus'] = ApiClient.convertToType(data['CurrentStatus'], 'String');
            }
            if (data.hasOwnProperty('FormalActions')) {
                obj['FormalActions'] = ApiClient.convertToType(data['FormalActions'], 'String');
            }
            if (data.hasOwnProperty('InformalActions')) {
                obj['InformalActions'] = ApiClient.convertToType(data['InformalActions'], 'String');
            }
            if (data.hasOwnProperty('Inspections')) {
                obj['Inspections'] = ApiClient.convertToType(data['Inspections'], 'String');
            }
            if (data.hasOwnProperty('LastInspection')) {
                obj['LastInspection'] = ApiClient.convertToType(data['LastInspection'], 'String');
            }
            if (data.hasOwnProperty('QtrsInNC')) {
                obj['QtrsInNC'] = ApiClient.convertToType(data['QtrsInNC'], 'String');
            }
            if (data.hasOwnProperty('QtrsInSNC')) {
                obj['QtrsInSNC'] = ApiClient.convertToType(data['QtrsInSNC'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
            if (data.hasOwnProperty('TotalCasePenalties')) {
                obj['TotalCasePenalties'] = ApiClient.convertToType(data['TotalCasePenalties'], 'String');
            }
            if (data.hasOwnProperty('TotalPenalties')) {
                obj['TotalPenalties'] = ApiClient.convertToType(data['TotalPenalties'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr018Summaries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr018Summaries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr018Summaries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Cases'] && !(typeof data['Cases'] === 'string' || data['Cases'] instanceof String)) {
            throw new Error("Expected the field `Cases` to be a primitive type in the JSON string but got " + data['Cases']);
        }
        // ensure the json data is a string
        if (data['CurrentStatus'] && !(typeof data['CurrentStatus'] === 'string' || data['CurrentStatus'] instanceof String)) {
            throw new Error("Expected the field `CurrentStatus` to be a primitive type in the JSON string but got " + data['CurrentStatus']);
        }
        // ensure the json data is a string
        if (data['FormalActions'] && !(typeof data['FormalActions'] === 'string' || data['FormalActions'] instanceof String)) {
            throw new Error("Expected the field `FormalActions` to be a primitive type in the JSON string but got " + data['FormalActions']);
        }
        // ensure the json data is a string
        if (data['InformalActions'] && !(typeof data['InformalActions'] === 'string' || data['InformalActions'] instanceof String)) {
            throw new Error("Expected the field `InformalActions` to be a primitive type in the JSON string but got " + data['InformalActions']);
        }
        // ensure the json data is a string
        if (data['Inspections'] && !(typeof data['Inspections'] === 'string' || data['Inspections'] instanceof String)) {
            throw new Error("Expected the field `Inspections` to be a primitive type in the JSON string but got " + data['Inspections']);
        }
        // ensure the json data is a string
        if (data['LastInspection'] && !(typeof data['LastInspection'] === 'string' || data['LastInspection'] instanceof String)) {
            throw new Error("Expected the field `LastInspection` to be a primitive type in the JSON string but got " + data['LastInspection']);
        }
        // ensure the json data is a string
        if (data['QtrsInNC'] && !(typeof data['QtrsInNC'] === 'string' || data['QtrsInNC'] instanceof String)) {
            throw new Error("Expected the field `QtrsInNC` to be a primitive type in the JSON string but got " + data['QtrsInNC']);
        }
        // ensure the json data is a string
        if (data['QtrsInSNC'] && !(typeof data['QtrsInSNC'] === 'string' || data['QtrsInSNC'] instanceof String)) {
            throw new Error("Expected the field `QtrsInSNC` to be a primitive type in the JSON string but got " + data['QtrsInSNC']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }
        // ensure the json data is a string
        if (data['TotalCasePenalties'] && !(typeof data['TotalCasePenalties'] === 'string' || data['TotalCasePenalties'] instanceof String)) {
            throw new Error("Expected the field `TotalCasePenalties` to be a primitive type in the JSON string but got " + data['TotalCasePenalties']);
        }
        // ensure the json data is a string
        if (data['TotalPenalties'] && !(typeof data['TotalPenalties'] === 'string' || data['TotalPenalties'] instanceof String)) {
            throw new Error("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got " + data['TotalPenalties']);
        }

        return true;
    }


}

Dfr018Summaries.RequiredProperties = ["Cases", "CurrentStatus", "FormalActions", "InformalActions", "Inspections", "LastInspection", "QtrsInNC", "QtrsInSNC", "Statute", "TotalCasePenalties", "TotalPenalties"];

/**
 * The number of EPA enforcement cases that have been brought against the facility, under the corresponding statute, within the designated time period.
 * @member {String} Cases
 */
Dfr018Summaries.prototype['Cases'] = undefined;

/**
 * The current status for the facility during the most current quarter. (No violation, noncompliance)
 * @member {String} CurrentStatus
 */
Dfr018Summaries.prototype['CurrentStatus'] = undefined;

/**
 * The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
 * @member {String} FormalActions
 */
Dfr018Summaries.prototype['FormalActions'] = undefined;

/**
 * The number of informal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
 * @member {String} InformalActions
 */
Dfr018Summaries.prototype['InformalActions'] = undefined;

/**
 * The number of inspections/compliance evaluations that have occurred at the facility, under the corresponding statute, within the designated time period
 * @member {String} Inspections
 */
Dfr018Summaries.prototype['Inspections'] = undefined;

/**
 * The date on which the most recent inspection of the facility took place
 * @member {String} LastInspection
 */
Dfr018Summaries.prototype['LastInspection'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status
 * @member {String} QtrsInNC
 */
Dfr018Summaries.prototype['QtrsInNC'] = undefined;

/**
 * The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period
 * @member {String} QtrsInSNC
 */
Dfr018Summaries.prototype['QtrsInSNC'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Dfr018Summaries.prototype['Statute'] = undefined;

/**
 * ??
 * @member {String} TotalCasePenalties
 */
Dfr018Summaries.prototype['TotalCasePenalties'] = undefined;

/**
 * The total dollar amount of either assessed or final penalties within the five year time period
 * @member {String} TotalPenalties
 */
Dfr018Summaries.prototype['TotalPenalties'] = undefined;






export default Dfr018Summaries;

