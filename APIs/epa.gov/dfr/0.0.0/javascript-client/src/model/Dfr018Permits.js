/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr018Permits model module.
 * @module model/Dfr018Permits
 * @version 0.0.0
 */
class Dfr018Permits {
    /**
     * Constructs a new <code>Dfr018Permits</code>.
     * Permits Object
     * @alias module:model/Dfr018Permits
     * @param accuracyScore {String} ??
     * @param accuracyValue {String} ??
     * @param areas {String} Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.
     * @param collectDesc {String} ??
     * @param DQURL {String} ??
     * @param ePARegion {String} The EPA region in which the facility is located
     * @param ePASystem {String} The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
     * @param expDate {String} Date on which a given permit is scheduled to expire
     * @param facilityCity {String} The city in which the facility is located
     * @param facilityName {String} The name of the facility.
     * @param facilityState {String} The state in which the facility is located
     * @param facilityStatus {String} The Air Program Status is given for each source ID (Operating; Planned; Under construction; Temporarily closed;  Permanently closed; and Seasonal)  For CWA, the Permit Compliance System (PCS) designates a permitted facility as being Active or Inactive. Under the CWA, all facilities discharging pollutants from a point source (e.g., a pipe) to surface waters must have a NPDES permit. For CWA, ICISNPDES designates a permit as Effective, Administratively Continued, Expired, Not Needed, Pending, Retired, or Terminated. RCRA facilities (sites) are designated as Active or Inactive. The following provides RCRA site activity status definitions and explains site activity status designation.
     * @param facilityStreet {String} The street address of the facility
     * @param facilityZip {String} The zip code of the area in which the facility is located
     * @param hasBioRpt {String} Indicates if the facility has an associated Biosolids Facility Report.
     * @param hasIcisSsoRpt {String} ??
     * @param hdatumDesc {String} ??
     * @param indianCountry {String} Indicates whether the facility is located in Indian Country
     * @param latitude {Number} The latitude of the facility or permit holder as maintained in each data system.
     * @param longitude {Number} The longitude of the facility or permit holder as maintained in each data system
     * @param NAICS {String} The North American Industry Classification System codes
     * @param refPointDesc {String} ??
     * @param SIC {String} Standard Industrial Classification codes
     * @param scale {String} ??
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     * @param universe {String} This field provides further description on type of permit or record for each data system as follows: - For CAA  = The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable sources include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement actions, or included on a Compliance Monitoring Strategy plan. The Clean Air Act requires that delegated agencies and EPA track all federally reportable sources in Air Facility System (AFS). - For CWA  = Each CWA Source ID or National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or Minor discharger. - For RCRA = RCRA Source ID or permits for Treatment, Storage and Disposal facilities are identified by TSD, Large Quantity Generators are identified by LQG. Other values include Permit Workload (PMT), Closure Workload (CLO), Small Quantity Generator Universe (SQG), Conditionally-Exempt Small Quantity Generator (CESQG), Post-Closure Workload (POST CL), and Transporters.
     */
    constructor(accuracyScore, accuracyValue, areas, collectDesc, DQURL, ePARegion, ePASystem, expDate, facilityCity, facilityName, facilityState, facilityStatus, facilityStreet, facilityZip, hasBioRpt, hasIcisSsoRpt, hdatumDesc, indianCountry, latitude, longitude, NAICS, refPointDesc, SIC, scale, sourceID, statute, universe) { 
        
        Dfr018Permits.initialize(this, accuracyScore, accuracyValue, areas, collectDesc, DQURL, ePARegion, ePASystem, expDate, facilityCity, facilityName, facilityState, facilityStatus, facilityStreet, facilityZip, hasBioRpt, hasIcisSsoRpt, hdatumDesc, indianCountry, latitude, longitude, NAICS, refPointDesc, SIC, scale, sourceID, statute, universe);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accuracyScore, accuracyValue, areas, collectDesc, DQURL, ePARegion, ePASystem, expDate, facilityCity, facilityName, facilityState, facilityStatus, facilityStreet, facilityZip, hasBioRpt, hasIcisSsoRpt, hdatumDesc, indianCountry, latitude, longitude, NAICS, refPointDesc, SIC, scale, sourceID, statute, universe) { 
        obj['AccuracyScore'] = accuracyScore;
        obj['AccuracyValue'] = accuracyValue;
        obj['Areas'] = areas;
        obj['CollectDesc'] = collectDesc;
        obj['DQURL'] = DQURL;
        obj['EPARegion'] = ePARegion;
        obj['EPASystem'] = ePASystem;
        obj['ExpDate'] = expDate;
        obj['FacilityCity'] = facilityCity;
        obj['FacilityName'] = facilityName;
        obj['FacilityState'] = facilityState;
        obj['FacilityStatus'] = facilityStatus;
        obj['FacilityStreet'] = facilityStreet;
        obj['FacilityZip'] = facilityZip;
        obj['HasBioRpt'] = hasBioRpt;
        obj['HasIcisSsoRpt'] = hasIcisSsoRpt;
        obj['HdatumDesc'] = hdatumDesc;
        obj['IndianCountry'] = indianCountry;
        obj['Latitude'] = latitude;
        obj['Longitude'] = longitude;
        obj['NAICS'] = NAICS;
        obj['RefPointDesc'] = refPointDesc;
        obj['SIC'] = SIC;
        obj['Scale'] = scale;
        obj['SourceID'] = sourceID;
        obj['Statute'] = statute;
        obj['Universe'] = universe;
    }

    /**
     * Constructs a <code>Dfr018Permits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr018Permits} obj Optional instance to populate.
     * @return {module:model/Dfr018Permits} The populated <code>Dfr018Permits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr018Permits();

            if (data.hasOwnProperty('AccuracyScore')) {
                obj['AccuracyScore'] = ApiClient.convertToType(data['AccuracyScore'], 'String');
            }
            if (data.hasOwnProperty('AccuracyValue')) {
                obj['AccuracyValue'] = ApiClient.convertToType(data['AccuracyValue'], 'String');
            }
            if (data.hasOwnProperty('Areas')) {
                obj['Areas'] = ApiClient.convertToType(data['Areas'], 'String');
            }
            if (data.hasOwnProperty('CollectDesc')) {
                obj['CollectDesc'] = ApiClient.convertToType(data['CollectDesc'], 'String');
            }
            if (data.hasOwnProperty('DQURL')) {
                obj['DQURL'] = ApiClient.convertToType(data['DQURL'], 'String');
            }
            if (data.hasOwnProperty('EPARegion')) {
                obj['EPARegion'] = ApiClient.convertToType(data['EPARegion'], 'String');
            }
            if (data.hasOwnProperty('EPASystem')) {
                obj['EPASystem'] = ApiClient.convertToType(data['EPASystem'], 'String');
            }
            if (data.hasOwnProperty('ExpDate')) {
                obj['ExpDate'] = ApiClient.convertToType(data['ExpDate'], 'String');
            }
            if (data.hasOwnProperty('FacilityCity')) {
                obj['FacilityCity'] = ApiClient.convertToType(data['FacilityCity'], 'String');
            }
            if (data.hasOwnProperty('FacilityName')) {
                obj['FacilityName'] = ApiClient.convertToType(data['FacilityName'], 'String');
            }
            if (data.hasOwnProperty('FacilityState')) {
                obj['FacilityState'] = ApiClient.convertToType(data['FacilityState'], 'String');
            }
            if (data.hasOwnProperty('FacilityStatus')) {
                obj['FacilityStatus'] = ApiClient.convertToType(data['FacilityStatus'], 'String');
            }
            if (data.hasOwnProperty('FacilityStreet')) {
                obj['FacilityStreet'] = ApiClient.convertToType(data['FacilityStreet'], 'String');
            }
            if (data.hasOwnProperty('FacilityZip')) {
                obj['FacilityZip'] = ApiClient.convertToType(data['FacilityZip'], 'String');
            }
            if (data.hasOwnProperty('HasBioRpt')) {
                obj['HasBioRpt'] = ApiClient.convertToType(data['HasBioRpt'], 'String');
            }
            if (data.hasOwnProperty('HasIcisSsoRpt')) {
                obj['HasIcisSsoRpt'] = ApiClient.convertToType(data['HasIcisSsoRpt'], 'String');
            }
            if (data.hasOwnProperty('HdatumDesc')) {
                obj['HdatumDesc'] = ApiClient.convertToType(data['HdatumDesc'], 'String');
            }
            if (data.hasOwnProperty('IndianCountry')) {
                obj['IndianCountry'] = ApiClient.convertToType(data['IndianCountry'], 'String');
            }
            if (data.hasOwnProperty('Latitude')) {
                obj['Latitude'] = ApiClient.convertToType(data['Latitude'], 'Number');
            }
            if (data.hasOwnProperty('Longitude')) {
                obj['Longitude'] = ApiClient.convertToType(data['Longitude'], 'Number');
            }
            if (data.hasOwnProperty('NAICS')) {
                obj['NAICS'] = ApiClient.convertToType(data['NAICS'], 'String');
            }
            if (data.hasOwnProperty('RefPointDesc')) {
                obj['RefPointDesc'] = ApiClient.convertToType(data['RefPointDesc'], 'String');
            }
            if (data.hasOwnProperty('SIC')) {
                obj['SIC'] = ApiClient.convertToType(data['SIC'], 'String');
            }
            if (data.hasOwnProperty('Scale')) {
                obj['Scale'] = ApiClient.convertToType(data['Scale'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
            if (data.hasOwnProperty('Universe')) {
                obj['Universe'] = ApiClient.convertToType(data['Universe'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr018Permits</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr018Permits</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr018Permits.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AccuracyScore'] && !(typeof data['AccuracyScore'] === 'string' || data['AccuracyScore'] instanceof String)) {
            throw new Error("Expected the field `AccuracyScore` to be a primitive type in the JSON string but got " + data['AccuracyScore']);
        }
        // ensure the json data is a string
        if (data['AccuracyValue'] && !(typeof data['AccuracyValue'] === 'string' || data['AccuracyValue'] instanceof String)) {
            throw new Error("Expected the field `AccuracyValue` to be a primitive type in the JSON string but got " + data['AccuracyValue']);
        }
        // ensure the json data is a string
        if (data['Areas'] && !(typeof data['Areas'] === 'string' || data['Areas'] instanceof String)) {
            throw new Error("Expected the field `Areas` to be a primitive type in the JSON string but got " + data['Areas']);
        }
        // ensure the json data is a string
        if (data['CollectDesc'] && !(typeof data['CollectDesc'] === 'string' || data['CollectDesc'] instanceof String)) {
            throw new Error("Expected the field `CollectDesc` to be a primitive type in the JSON string but got " + data['CollectDesc']);
        }
        // ensure the json data is a string
        if (data['DQURL'] && !(typeof data['DQURL'] === 'string' || data['DQURL'] instanceof String)) {
            throw new Error("Expected the field `DQURL` to be a primitive type in the JSON string but got " + data['DQURL']);
        }
        // ensure the json data is a string
        if (data['EPARegion'] && !(typeof data['EPARegion'] === 'string' || data['EPARegion'] instanceof String)) {
            throw new Error("Expected the field `EPARegion` to be a primitive type in the JSON string but got " + data['EPARegion']);
        }
        // ensure the json data is a string
        if (data['EPASystem'] && !(typeof data['EPASystem'] === 'string' || data['EPASystem'] instanceof String)) {
            throw new Error("Expected the field `EPASystem` to be a primitive type in the JSON string but got " + data['EPASystem']);
        }
        // ensure the json data is a string
        if (data['ExpDate'] && !(typeof data['ExpDate'] === 'string' || data['ExpDate'] instanceof String)) {
            throw new Error("Expected the field `ExpDate` to be a primitive type in the JSON string but got " + data['ExpDate']);
        }
        // ensure the json data is a string
        if (data['FacilityCity'] && !(typeof data['FacilityCity'] === 'string' || data['FacilityCity'] instanceof String)) {
            throw new Error("Expected the field `FacilityCity` to be a primitive type in the JSON string but got " + data['FacilityCity']);
        }
        // ensure the json data is a string
        if (data['FacilityName'] && !(typeof data['FacilityName'] === 'string' || data['FacilityName'] instanceof String)) {
            throw new Error("Expected the field `FacilityName` to be a primitive type in the JSON string but got " + data['FacilityName']);
        }
        // ensure the json data is a string
        if (data['FacilityState'] && !(typeof data['FacilityState'] === 'string' || data['FacilityState'] instanceof String)) {
            throw new Error("Expected the field `FacilityState` to be a primitive type in the JSON string but got " + data['FacilityState']);
        }
        // ensure the json data is a string
        if (data['FacilityStatus'] && !(typeof data['FacilityStatus'] === 'string' || data['FacilityStatus'] instanceof String)) {
            throw new Error("Expected the field `FacilityStatus` to be a primitive type in the JSON string but got " + data['FacilityStatus']);
        }
        // ensure the json data is a string
        if (data['FacilityStreet'] && !(typeof data['FacilityStreet'] === 'string' || data['FacilityStreet'] instanceof String)) {
            throw new Error("Expected the field `FacilityStreet` to be a primitive type in the JSON string but got " + data['FacilityStreet']);
        }
        // ensure the json data is a string
        if (data['FacilityZip'] && !(typeof data['FacilityZip'] === 'string' || data['FacilityZip'] instanceof String)) {
            throw new Error("Expected the field `FacilityZip` to be a primitive type in the JSON string but got " + data['FacilityZip']);
        }
        // ensure the json data is a string
        if (data['HasBioRpt'] && !(typeof data['HasBioRpt'] === 'string' || data['HasBioRpt'] instanceof String)) {
            throw new Error("Expected the field `HasBioRpt` to be a primitive type in the JSON string but got " + data['HasBioRpt']);
        }
        // ensure the json data is a string
        if (data['HasIcisSsoRpt'] && !(typeof data['HasIcisSsoRpt'] === 'string' || data['HasIcisSsoRpt'] instanceof String)) {
            throw new Error("Expected the field `HasIcisSsoRpt` to be a primitive type in the JSON string but got " + data['HasIcisSsoRpt']);
        }
        // ensure the json data is a string
        if (data['HdatumDesc'] && !(typeof data['HdatumDesc'] === 'string' || data['HdatumDesc'] instanceof String)) {
            throw new Error("Expected the field `HdatumDesc` to be a primitive type in the JSON string but got " + data['HdatumDesc']);
        }
        // ensure the json data is a string
        if (data['IndianCountry'] && !(typeof data['IndianCountry'] === 'string' || data['IndianCountry'] instanceof String)) {
            throw new Error("Expected the field `IndianCountry` to be a primitive type in the JSON string but got " + data['IndianCountry']);
        }
        // ensure the json data is a string
        if (data['Latitude'] && !(typeof data['Latitude'] === 'string' || data['Latitude'] instanceof String)) {
            throw new Error("Expected the field `Latitude` to be a primitive type in the JSON string but got " + data['Latitude']);
        }
        // ensure the json data is a string
        if (data['Longitude'] && !(typeof data['Longitude'] === 'string' || data['Longitude'] instanceof String)) {
            throw new Error("Expected the field `Longitude` to be a primitive type in the JSON string but got " + data['Longitude']);
        }
        // ensure the json data is a string
        if (data['NAICS'] && !(typeof data['NAICS'] === 'string' || data['NAICS'] instanceof String)) {
            throw new Error("Expected the field `NAICS` to be a primitive type in the JSON string but got " + data['NAICS']);
        }
        // ensure the json data is a string
        if (data['RefPointDesc'] && !(typeof data['RefPointDesc'] === 'string' || data['RefPointDesc'] instanceof String)) {
            throw new Error("Expected the field `RefPointDesc` to be a primitive type in the JSON string but got " + data['RefPointDesc']);
        }
        // ensure the json data is a string
        if (data['SIC'] && !(typeof data['SIC'] === 'string' || data['SIC'] instanceof String)) {
            throw new Error("Expected the field `SIC` to be a primitive type in the JSON string but got " + data['SIC']);
        }
        // ensure the json data is a string
        if (data['Scale'] && !(typeof data['Scale'] === 'string' || data['Scale'] instanceof String)) {
            throw new Error("Expected the field `Scale` to be a primitive type in the JSON string but got " + data['Scale']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }
        // ensure the json data is a string
        if (data['Universe'] && !(typeof data['Universe'] === 'string' || data['Universe'] instanceof String)) {
            throw new Error("Expected the field `Universe` to be a primitive type in the JSON string but got " + data['Universe']);
        }

        return true;
    }


}

Dfr018Permits.RequiredProperties = ["AccuracyScore", "AccuracyValue", "Areas", "CollectDesc", "DQURL", "EPARegion", "EPASystem", "ExpDate", "FacilityCity", "FacilityName", "FacilityState", "FacilityStatus", "FacilityStreet", "FacilityZip", "HasBioRpt", "HasIcisSsoRpt", "HdatumDesc", "IndianCountry", "Latitude", "Longitude", "NAICS", "RefPointDesc", "SIC", "Scale", "SourceID", "Statute", "Universe"];

/**
 * ??
 * @member {String} AccuracyScore
 */
Dfr018Permits.prototype['AccuracyScore'] = undefined;

/**
 * ??
 * @member {String} AccuracyValue
 */
Dfr018Permits.prototype['AccuracyValue'] = undefined;

/**
 * Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.
 * @member {String} Areas
 */
Dfr018Permits.prototype['Areas'] = undefined;

/**
 * ??
 * @member {String} CollectDesc
 */
Dfr018Permits.prototype['CollectDesc'] = undefined;

/**
 * ??
 * @member {String} DQURL
 */
Dfr018Permits.prototype['DQURL'] = undefined;

/**
 * The EPA region in which the facility is located
 * @member {String} EPARegion
 */
Dfr018Permits.prototype['EPARegion'] = undefined;

/**
 * The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
 * @member {String} EPASystem
 */
Dfr018Permits.prototype['EPASystem'] = undefined;

/**
 * Date on which a given permit is scheduled to expire
 * @member {String} ExpDate
 */
Dfr018Permits.prototype['ExpDate'] = undefined;

/**
 * The city in which the facility is located
 * @member {String} FacilityCity
 */
Dfr018Permits.prototype['FacilityCity'] = undefined;

/**
 * The name of the facility.
 * @member {String} FacilityName
 */
Dfr018Permits.prototype['FacilityName'] = undefined;

/**
 * The state in which the facility is located
 * @member {String} FacilityState
 */
Dfr018Permits.prototype['FacilityState'] = undefined;

/**
 * The Air Program Status is given for each source ID (Operating; Planned; Under construction; Temporarily closed;  Permanently closed; and Seasonal)  For CWA, the Permit Compliance System (PCS) designates a permitted facility as being Active or Inactive. Under the CWA, all facilities discharging pollutants from a point source (e.g., a pipe) to surface waters must have a NPDES permit. For CWA, ICISNPDES designates a permit as Effective, Administratively Continued, Expired, Not Needed, Pending, Retired, or Terminated. RCRA facilities (sites) are designated as Active or Inactive. The following provides RCRA site activity status definitions and explains site activity status designation.
 * @member {String} FacilityStatus
 */
Dfr018Permits.prototype['FacilityStatus'] = undefined;

/**
 * The street address of the facility
 * @member {String} FacilityStreet
 */
Dfr018Permits.prototype['FacilityStreet'] = undefined;

/**
 * The zip code of the area in which the facility is located
 * @member {String} FacilityZip
 */
Dfr018Permits.prototype['FacilityZip'] = undefined;

/**
 * Indicates if the facility has an associated Biosolids Facility Report.
 * @member {String} HasBioRpt
 */
Dfr018Permits.prototype['HasBioRpt'] = undefined;

/**
 * ??
 * @member {String} HasIcisSsoRpt
 */
Dfr018Permits.prototype['HasIcisSsoRpt'] = undefined;

/**
 * ??
 * @member {String} HdatumDesc
 */
Dfr018Permits.prototype['HdatumDesc'] = undefined;

/**
 * Indicates whether the facility is located in Indian Country
 * @member {String} IndianCountry
 */
Dfr018Permits.prototype['IndianCountry'] = undefined;

/**
 * The latitude of the facility or permit holder as maintained in each data system.
 * @member {Number} Latitude
 */
Dfr018Permits.prototype['Latitude'] = undefined;

/**
 * The longitude of the facility or permit holder as maintained in each data system
 * @member {Number} Longitude
 */
Dfr018Permits.prototype['Longitude'] = undefined;

/**
 * The North American Industry Classification System codes
 * @member {String} NAICS
 */
Dfr018Permits.prototype['NAICS'] = undefined;

/**
 * ??
 * @member {String} RefPointDesc
 */
Dfr018Permits.prototype['RefPointDesc'] = undefined;

/**
 * Standard Industrial Classification codes
 * @member {String} SIC
 */
Dfr018Permits.prototype['SIC'] = undefined;

/**
 * ??
 * @member {String} Scale
 */
Dfr018Permits.prototype['Scale'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr018Permits.prototype['SourceID'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Dfr018Permits.prototype['Statute'] = undefined;

/**
 * This field provides further description on type of permit or record for each data system as follows: - For CAA  = The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable sources include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement actions, or included on a Compliance Monitoring Strategy plan. The Clean Air Act requires that delegated agencies and EPA track all federally reportable sources in Air Facility System (AFS). - For CWA  = Each CWA Source ID or National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or Minor discharger. - For RCRA = RCRA Source ID or permits for Treatment, Storage and Disposal facilities are identified by TSD, Large Quantity Generators are identified by LQG. Other values include Permit Workload (PMT), Closure Workload (CLO), Small Quantity Generator Universe (SQG), Conditionally-Exempt Small Quantity Generator (CESQG), Post-Closure Workload (POST CL), and Transporters.
 * @member {String} Universe
 */
Dfr018Permits.prototype['Universe'] = undefined;






export default Dfr018Permits;

