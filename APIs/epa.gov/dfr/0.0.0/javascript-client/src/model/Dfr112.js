/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dfr112 model module.
 * @module model/Dfr112
 * @version 0.0.0
 */
class Dfr112 {
    /**
     * Constructs a new <code>Dfr112</code>.
     * Sources Object
     * @alias module:model/Dfr112
     * @param attainsAquaticLifeUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
     * @param attainsAuCategory {String} The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
     * @param attainsCauseGroups {String} Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
     * @param attainsExceptnlUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
     * @param attainsRecreationUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
     * @param attainsShellfishUseFlg {String} Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
     * @param beachCloseLast2yrsFlg {String} Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.
     * @param beachCloseLastYearFlg {String} Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.
     * @param CSS {String} Indicates whether or not the facility has a combined sewer system.
     * @param cWPCsoOutfalls {String} The number of discharge outfalls at points prior to the treatment plant.
     * @param ePASystem {String} The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
     * @param esaAquaticSpeciesFlg {String} Indicates if the watershed contains Endangered Species Act (ESA)-listed aquatic species.
     * @param hUC8 {String} The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides.ï¿½Cataloguing unit (fourth-level, 8-digit HUC)
     * @param hUC8Name {String} The name of the watershed in which the facility resides.
     * @param impairedWaters {String} Field indicates if the permit discharges directly into category 4 or 5 impaired waters.
     * @param radGnisName {String} The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
     * @param radReachcode {String} A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
     * @param receivingWaters {String} The name of the river, lake, stream, or estuary that receives runoff from the facility.
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param wBD12 {String} The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
     * @param wBD12Name {String} The name of the watershed in which the facility resides.
     */
    constructor(attainsAquaticLifeUseFlg, attainsAuCategory, attainsCauseGroups, attainsExceptnlUseFlg, attainsRecreationUseFlg, attainsShellfishUseFlg, beachCloseLast2yrsFlg, beachCloseLastYearFlg, CSS, cWPCsoOutfalls, ePASystem, esaAquaticSpeciesFlg, hUC8, hUC8Name, impairedWaters, radGnisName, radReachcode, receivingWaters, sourceID, wBD12, wBD12Name) { 
        
        Dfr112.initialize(this, attainsAquaticLifeUseFlg, attainsAuCategory, attainsCauseGroups, attainsExceptnlUseFlg, attainsRecreationUseFlg, attainsShellfishUseFlg, beachCloseLast2yrsFlg, beachCloseLastYearFlg, CSS, cWPCsoOutfalls, ePASystem, esaAquaticSpeciesFlg, hUC8, hUC8Name, impairedWaters, radGnisName, radReachcode, receivingWaters, sourceID, wBD12, wBD12Name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attainsAquaticLifeUseFlg, attainsAuCategory, attainsCauseGroups, attainsExceptnlUseFlg, attainsRecreationUseFlg, attainsShellfishUseFlg, beachCloseLast2yrsFlg, beachCloseLastYearFlg, CSS, cWPCsoOutfalls, ePASystem, esaAquaticSpeciesFlg, hUC8, hUC8Name, impairedWaters, radGnisName, radReachcode, receivingWaters, sourceID, wBD12, wBD12Name) { 
        obj['AttainsAquaticLifeUseFlg'] = attainsAquaticLifeUseFlg;
        obj['AttainsAuCategory'] = attainsAuCategory;
        obj['AttainsCauseGroups'] = attainsCauseGroups;
        obj['AttainsExceptnlUseFlg'] = attainsExceptnlUseFlg;
        obj['AttainsRecreationUseFlg'] = attainsRecreationUseFlg;
        obj['AttainsShellfishUseFlg'] = attainsShellfishUseFlg;
        obj['BeachCloseLast2yrsFlg'] = beachCloseLast2yrsFlg;
        obj['BeachCloseLastYearFlg'] = beachCloseLastYearFlg;
        obj['CSS'] = CSS;
        obj['CWPCsoOutfalls'] = cWPCsoOutfalls;
        obj['EPASystem'] = ePASystem;
        obj['EsaAquaticSpeciesFlg'] = esaAquaticSpeciesFlg;
        obj['HUC8'] = hUC8;
        obj['HUC8Name'] = hUC8Name;
        obj['ImpairedWaters'] = impairedWaters;
        obj['RadGnisName'] = radGnisName;
        obj['RadReachcode'] = radReachcode;
        obj['ReceivingWaters'] = receivingWaters;
        obj['SourceID'] = sourceID;
        obj['WBD12'] = wBD12;
        obj['WBD12Name'] = wBD12Name;
    }

    /**
     * Constructs a <code>Dfr112</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr112} obj Optional instance to populate.
     * @return {module:model/Dfr112} The populated <code>Dfr112</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr112();

            if (data.hasOwnProperty('AttainsAquaticLifeUseFlg')) {
                obj['AttainsAquaticLifeUseFlg'] = ApiClient.convertToType(data['AttainsAquaticLifeUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsAuCategory')) {
                obj['AttainsAuCategory'] = ApiClient.convertToType(data['AttainsAuCategory'], 'String');
            }
            if (data.hasOwnProperty('AttainsCauseGroups')) {
                obj['AttainsCauseGroups'] = ApiClient.convertToType(data['AttainsCauseGroups'], 'String');
            }
            if (data.hasOwnProperty('AttainsExceptnlUseFlg')) {
                obj['AttainsExceptnlUseFlg'] = ApiClient.convertToType(data['AttainsExceptnlUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsRecreationUseFlg')) {
                obj['AttainsRecreationUseFlg'] = ApiClient.convertToType(data['AttainsRecreationUseFlg'], 'String');
            }
            if (data.hasOwnProperty('AttainsShellfishUseFlg')) {
                obj['AttainsShellfishUseFlg'] = ApiClient.convertToType(data['AttainsShellfishUseFlg'], 'String');
            }
            if (data.hasOwnProperty('BeachCloseLast2yrsFlg')) {
                obj['BeachCloseLast2yrsFlg'] = ApiClient.convertToType(data['BeachCloseLast2yrsFlg'], 'String');
            }
            if (data.hasOwnProperty('BeachCloseLastYearFlg')) {
                obj['BeachCloseLastYearFlg'] = ApiClient.convertToType(data['BeachCloseLastYearFlg'], 'String');
            }
            if (data.hasOwnProperty('CSS')) {
                obj['CSS'] = ApiClient.convertToType(data['CSS'], 'String');
            }
            if (data.hasOwnProperty('CWPCsoOutfalls')) {
                obj['CWPCsoOutfalls'] = ApiClient.convertToType(data['CWPCsoOutfalls'], 'String');
            }
            if (data.hasOwnProperty('EPASystem')) {
                obj['EPASystem'] = ApiClient.convertToType(data['EPASystem'], 'String');
            }
            if (data.hasOwnProperty('EsaAquaticSpeciesFlg')) {
                obj['EsaAquaticSpeciesFlg'] = ApiClient.convertToType(data['EsaAquaticSpeciesFlg'], 'String');
            }
            if (data.hasOwnProperty('HUC8')) {
                obj['HUC8'] = ApiClient.convertToType(data['HUC8'], 'String');
            }
            if (data.hasOwnProperty('HUC8Name')) {
                obj['HUC8Name'] = ApiClient.convertToType(data['HUC8Name'], 'String');
            }
            if (data.hasOwnProperty('ImpairedWaters')) {
                obj['ImpairedWaters'] = ApiClient.convertToType(data['ImpairedWaters'], 'String');
            }
            if (data.hasOwnProperty('RadGnisName')) {
                obj['RadGnisName'] = ApiClient.convertToType(data['RadGnisName'], 'String');
            }
            if (data.hasOwnProperty('RadReachcode')) {
                obj['RadReachcode'] = ApiClient.convertToType(data['RadReachcode'], 'String');
            }
            if (data.hasOwnProperty('ReceivingWaters')) {
                obj['ReceivingWaters'] = ApiClient.convertToType(data['ReceivingWaters'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('WBD12')) {
                obj['WBD12'] = ApiClient.convertToType(data['WBD12'], 'String');
            }
            if (data.hasOwnProperty('WBD12Name')) {
                obj['WBD12Name'] = ApiClient.convertToType(data['WBD12Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr112</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr112</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr112.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AttainsAquaticLifeUseFlg'] && !(typeof data['AttainsAquaticLifeUseFlg'] === 'string' || data['AttainsAquaticLifeUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsAquaticLifeUseFlg` to be a primitive type in the JSON string but got " + data['AttainsAquaticLifeUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsAuCategory'] && !(typeof data['AttainsAuCategory'] === 'string' || data['AttainsAuCategory'] instanceof String)) {
            throw new Error("Expected the field `AttainsAuCategory` to be a primitive type in the JSON string but got " + data['AttainsAuCategory']);
        }
        // ensure the json data is a string
        if (data['AttainsCauseGroups'] && !(typeof data['AttainsCauseGroups'] === 'string' || data['AttainsCauseGroups'] instanceof String)) {
            throw new Error("Expected the field `AttainsCauseGroups` to be a primitive type in the JSON string but got " + data['AttainsCauseGroups']);
        }
        // ensure the json data is a string
        if (data['AttainsExceptnlUseFlg'] && !(typeof data['AttainsExceptnlUseFlg'] === 'string' || data['AttainsExceptnlUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsExceptnlUseFlg` to be a primitive type in the JSON string but got " + data['AttainsExceptnlUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsRecreationUseFlg'] && !(typeof data['AttainsRecreationUseFlg'] === 'string' || data['AttainsRecreationUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsRecreationUseFlg` to be a primitive type in the JSON string but got " + data['AttainsRecreationUseFlg']);
        }
        // ensure the json data is a string
        if (data['AttainsShellfishUseFlg'] && !(typeof data['AttainsShellfishUseFlg'] === 'string' || data['AttainsShellfishUseFlg'] instanceof String)) {
            throw new Error("Expected the field `AttainsShellfishUseFlg` to be a primitive type in the JSON string but got " + data['AttainsShellfishUseFlg']);
        }
        // ensure the json data is a string
        if (data['BeachCloseLast2yrsFlg'] && !(typeof data['BeachCloseLast2yrsFlg'] === 'string' || data['BeachCloseLast2yrsFlg'] instanceof String)) {
            throw new Error("Expected the field `BeachCloseLast2yrsFlg` to be a primitive type in the JSON string but got " + data['BeachCloseLast2yrsFlg']);
        }
        // ensure the json data is a string
        if (data['BeachCloseLastYearFlg'] && !(typeof data['BeachCloseLastYearFlg'] === 'string' || data['BeachCloseLastYearFlg'] instanceof String)) {
            throw new Error("Expected the field `BeachCloseLastYearFlg` to be a primitive type in the JSON string but got " + data['BeachCloseLastYearFlg']);
        }
        // ensure the json data is a string
        if (data['CSS'] && !(typeof data['CSS'] === 'string' || data['CSS'] instanceof String)) {
            throw new Error("Expected the field `CSS` to be a primitive type in the JSON string but got " + data['CSS']);
        }
        // ensure the json data is a string
        if (data['CWPCsoOutfalls'] && !(typeof data['CWPCsoOutfalls'] === 'string' || data['CWPCsoOutfalls'] instanceof String)) {
            throw new Error("Expected the field `CWPCsoOutfalls` to be a primitive type in the JSON string but got " + data['CWPCsoOutfalls']);
        }
        // ensure the json data is a string
        if (data['EPASystem'] && !(typeof data['EPASystem'] === 'string' || data['EPASystem'] instanceof String)) {
            throw new Error("Expected the field `EPASystem` to be a primitive type in the JSON string but got " + data['EPASystem']);
        }
        // ensure the json data is a string
        if (data['EsaAquaticSpeciesFlg'] && !(typeof data['EsaAquaticSpeciesFlg'] === 'string' || data['EsaAquaticSpeciesFlg'] instanceof String)) {
            throw new Error("Expected the field `EsaAquaticSpeciesFlg` to be a primitive type in the JSON string but got " + data['EsaAquaticSpeciesFlg']);
        }
        // ensure the json data is a string
        if (data['HUC8'] && !(typeof data['HUC8'] === 'string' || data['HUC8'] instanceof String)) {
            throw new Error("Expected the field `HUC8` to be a primitive type in the JSON string but got " + data['HUC8']);
        }
        // ensure the json data is a string
        if (data['HUC8Name'] && !(typeof data['HUC8Name'] === 'string' || data['HUC8Name'] instanceof String)) {
            throw new Error("Expected the field `HUC8Name` to be a primitive type in the JSON string but got " + data['HUC8Name']);
        }
        // ensure the json data is a string
        if (data['ImpairedWaters'] && !(typeof data['ImpairedWaters'] === 'string' || data['ImpairedWaters'] instanceof String)) {
            throw new Error("Expected the field `ImpairedWaters` to be a primitive type in the JSON string but got " + data['ImpairedWaters']);
        }
        // ensure the json data is a string
        if (data['RadGnisName'] && !(typeof data['RadGnisName'] === 'string' || data['RadGnisName'] instanceof String)) {
            throw new Error("Expected the field `RadGnisName` to be a primitive type in the JSON string but got " + data['RadGnisName']);
        }
        // ensure the json data is a string
        if (data['RadReachcode'] && !(typeof data['RadReachcode'] === 'string' || data['RadReachcode'] instanceof String)) {
            throw new Error("Expected the field `RadReachcode` to be a primitive type in the JSON string but got " + data['RadReachcode']);
        }
        // ensure the json data is a string
        if (data['ReceivingWaters'] && !(typeof data['ReceivingWaters'] === 'string' || data['ReceivingWaters'] instanceof String)) {
            throw new Error("Expected the field `ReceivingWaters` to be a primitive type in the JSON string but got " + data['ReceivingWaters']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['WBD12'] && !(typeof data['WBD12'] === 'string' || data['WBD12'] instanceof String)) {
            throw new Error("Expected the field `WBD12` to be a primitive type in the JSON string but got " + data['WBD12']);
        }
        // ensure the json data is a string
        if (data['WBD12Name'] && !(typeof data['WBD12Name'] === 'string' || data['WBD12Name'] instanceof String)) {
            throw new Error("Expected the field `WBD12Name` to be a primitive type in the JSON string but got " + data['WBD12Name']);
        }

        return true;
    }


}

Dfr112.RequiredProperties = ["AttainsAquaticLifeUseFlg", "AttainsAuCategory", "AttainsCauseGroups", "AttainsExceptnlUseFlg", "AttainsRecreationUseFlg", "AttainsShellfishUseFlg", "BeachCloseLast2yrsFlg", "BeachCloseLastYearFlg", "CSS", "CWPCsoOutfalls", "EPASystem", "EsaAquaticSpeciesFlg", "HUC8", "HUC8Name", "ImpairedWaters", "RadGnisName", "RadReachcode", "ReceivingWaters", "SourceID", "WBD12", "WBD12Name"];

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
 * @member {String} AttainsAquaticLifeUseFlg
 */
Dfr112.prototype['AttainsAquaticLifeUseFlg'] = undefined;

/**
 * The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
 * @member {String} AttainsAuCategory
 */
Dfr112.prototype['AttainsAuCategory'] = undefined;

/**
 * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
 * @member {String} AttainsCauseGroups
 */
Dfr112.prototype['AttainsCauseGroups'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
 * @member {String} AttainsExceptnlUseFlg
 */
Dfr112.prototype['AttainsExceptnlUseFlg'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
 * @member {String} AttainsRecreationUseFlg
 */
Dfr112.prototype['AttainsRecreationUseFlg'] = undefined;

/**
 * Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
 * @member {String} AttainsShellfishUseFlg
 */
Dfr112.prototype['AttainsShellfishUseFlg'] = undefined;

/**
 * Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.
 * @member {String} BeachCloseLast2yrsFlg
 */
Dfr112.prototype['BeachCloseLast2yrsFlg'] = undefined;

/**
 * Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.
 * @member {String} BeachCloseLastYearFlg
 */
Dfr112.prototype['BeachCloseLastYearFlg'] = undefined;

/**
 * Indicates whether or not the facility has a combined sewer system.
 * @member {String} CSS
 */
Dfr112.prototype['CSS'] = undefined;

/**
 * The number of discharge outfalls at points prior to the treatment plant.
 * @member {String} CWPCsoOutfalls
 */
Dfr112.prototype['CWPCsoOutfalls'] = undefined;

/**
 * The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
 * @member {String} EPASystem
 */
Dfr112.prototype['EPASystem'] = undefined;

/**
 * Indicates if the watershed contains Endangered Species Act (ESA)-listed aquatic species.
 * @member {String} EsaAquaticSpeciesFlg
 */
Dfr112.prototype['EsaAquaticSpeciesFlg'] = undefined;

/**
 * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides.ï¿½Cataloguing unit (fourth-level, 8-digit HUC)
 * @member {String} HUC8
 */
Dfr112.prototype['HUC8'] = undefined;

/**
 * The name of the watershed in which the facility resides.
 * @member {String} HUC8Name
 */
Dfr112.prototype['HUC8Name'] = undefined;

/**
 * Field indicates if the permit discharges directly into category 4 or 5 impaired waters.
 * @member {String} ImpairedWaters
 */
Dfr112.prototype['ImpairedWaters'] = undefined;

/**
 * The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
 * @member {String} RadGnisName
 */
Dfr112.prototype['RadGnisName'] = undefined;

/**
 * A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
 * @member {String} RadReachcode
 */
Dfr112.prototype['RadReachcode'] = undefined;

/**
 * The name of the river, lake, stream, or estuary that receives runoff from the facility.
 * @member {String} ReceivingWaters
 */
Dfr112.prototype['ReceivingWaters'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr112.prototype['SourceID'] = undefined;

/**
 * The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).
 * @member {String} WBD12
 */
Dfr112.prototype['WBD12'] = undefined;

/**
 * The name of the watershed in which the facility resides.
 * @member {String} WBD12Name
 */
Dfr112.prototype['WBD12Name'] = undefined;






export default Dfr112;

