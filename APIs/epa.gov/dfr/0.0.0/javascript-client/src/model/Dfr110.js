/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dfr109 from './Dfr109';

/**
 * The Dfr110 model module.
 * @module model/Dfr110
 * @version 0.0.0
 */
class Dfr110 {
    /**
     * Constructs a new <code>Dfr110</code>.
     * Violations Object
     * @alias module:model/Dfr110
     * @param compliancePeriodBeginDate {String} The beginning date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
     * @param compliancePeriodEndDate {String} The end date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
     * @param contaminantName {String} City
     * @param enforcementActions {Array.<module:model/Dfr109>} 
     * @param federalMCL {String} Maximum contaminant levels (MCLs) or maximum residual disinfectant levels (MRDLs), which specify the highest concentrations of contaminants or disinfectants, respectively, allowed in drinking water; or of treatment technique (TT) rules, which specify required processes intended to reduce the amounts of contaminants in drinking water.
     * @param federalRule {String} ???
     * @param resolvedDate {String} The resolved date of the drinking water violation (MM/DD/YYYY)
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param stateMCL {String} County
     * @param status {String} Describes the status of the drinking water violation. Violation statuses include: - Resolved: The violation has at least one resolving enforcement action. In SDWIS, this indicates that either the system has returned to compliance from the violation, the rule that was violated was no longer applicable, or no further action was needed. - Archived: The violation is not Resolved, but is more than five years past its compliance period end date. In keeping with the Enforcement Response Policy, the violation no longer contributes to the public water system's overall compliance status. Unresolved violations are also marked as Archived when a system ceases operations (becomes inactive). - Addressed: The violation is not Resolved or Archived, and is addressed by one or more formal enforcement actions. - Unaddressed: The violation is not Resolved or Archived, and has not been addressed by formal enforcement.
     * @param violationCategoryCode {String} Categories of violations that may be reported
     * @param violationCategoryDesc {String} A description of the violation category.
     * @param violationID {String} An identifer from SDWA that uniquely identifies the violation.
     * @param violationMeasure {String} A numeric value that represents the analytical result of a contaminant that exceeded the Maximum Contaminant Level (MCL) for that contaminant.
     */
    constructor(compliancePeriodBeginDate, compliancePeriodEndDate, contaminantName, enforcementActions, federalMCL, federalRule, resolvedDate, sourceID, stateMCL, status, violationCategoryCode, violationCategoryDesc, violationID, violationMeasure) { 
        
        Dfr110.initialize(this, compliancePeriodBeginDate, compliancePeriodEndDate, contaminantName, enforcementActions, federalMCL, federalRule, resolvedDate, sourceID, stateMCL, status, violationCategoryCode, violationCategoryDesc, violationID, violationMeasure);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, compliancePeriodBeginDate, compliancePeriodEndDate, contaminantName, enforcementActions, federalMCL, federalRule, resolvedDate, sourceID, stateMCL, status, violationCategoryCode, violationCategoryDesc, violationID, violationMeasure) { 
        obj['CompliancePeriodBeginDate'] = compliancePeriodBeginDate;
        obj['CompliancePeriodEndDate'] = compliancePeriodEndDate;
        obj['ContaminantName'] = contaminantName;
        obj['EnforcementActions'] = enforcementActions;
        obj['FederalMCL'] = federalMCL;
        obj['FederalRule'] = federalRule;
        obj['ResolvedDate'] = resolvedDate;
        obj['SourceID'] = sourceID;
        obj['StateMCL'] = stateMCL;
        obj['Status'] = status;
        obj['ViolationCategoryCode'] = violationCategoryCode;
        obj['ViolationCategoryDesc'] = violationCategoryDesc;
        obj['ViolationID'] = violationID;
        obj['ViolationMeasure'] = violationMeasure;
    }

    /**
     * Constructs a <code>Dfr110</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dfr110} obj Optional instance to populate.
     * @return {module:model/Dfr110} The populated <code>Dfr110</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dfr110();

            if (data.hasOwnProperty('CompliancePeriodBeginDate')) {
                obj['CompliancePeriodBeginDate'] = ApiClient.convertToType(data['CompliancePeriodBeginDate'], 'String');
            }
            if (data.hasOwnProperty('CompliancePeriodEndDate')) {
                obj['CompliancePeriodEndDate'] = ApiClient.convertToType(data['CompliancePeriodEndDate'], 'String');
            }
            if (data.hasOwnProperty('ContaminantName')) {
                obj['ContaminantName'] = ApiClient.convertToType(data['ContaminantName'], 'String');
            }
            if (data.hasOwnProperty('EnforcementActions')) {
                obj['EnforcementActions'] = ApiClient.convertToType(data['EnforcementActions'], [Dfr109]);
            }
            if (data.hasOwnProperty('FederalMCL')) {
                obj['FederalMCL'] = ApiClient.convertToType(data['FederalMCL'], 'String');
            }
            if (data.hasOwnProperty('FederalRule')) {
                obj['FederalRule'] = ApiClient.convertToType(data['FederalRule'], 'String');
            }
            if (data.hasOwnProperty('ResolvedDate')) {
                obj['ResolvedDate'] = ApiClient.convertToType(data['ResolvedDate'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('StateMCL')) {
                obj['StateMCL'] = ApiClient.convertToType(data['StateMCL'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('ViolationCategoryCode')) {
                obj['ViolationCategoryCode'] = ApiClient.convertToType(data['ViolationCategoryCode'], 'String');
            }
            if (data.hasOwnProperty('ViolationCategoryDesc')) {
                obj['ViolationCategoryDesc'] = ApiClient.convertToType(data['ViolationCategoryDesc'], 'String');
            }
            if (data.hasOwnProperty('ViolationID')) {
                obj['ViolationID'] = ApiClient.convertToType(data['ViolationID'], 'String');
            }
            if (data.hasOwnProperty('ViolationMeasure')) {
                obj['ViolationMeasure'] = ApiClient.convertToType(data['ViolationMeasure'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dfr110</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dfr110</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dfr110.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CompliancePeriodBeginDate'] && !(typeof data['CompliancePeriodBeginDate'] === 'string' || data['CompliancePeriodBeginDate'] instanceof String)) {
            throw new Error("Expected the field `CompliancePeriodBeginDate` to be a primitive type in the JSON string but got " + data['CompliancePeriodBeginDate']);
        }
        // ensure the json data is a string
        if (data['CompliancePeriodEndDate'] && !(typeof data['CompliancePeriodEndDate'] === 'string' || data['CompliancePeriodEndDate'] instanceof String)) {
            throw new Error("Expected the field `CompliancePeriodEndDate` to be a primitive type in the JSON string but got " + data['CompliancePeriodEndDate']);
        }
        // ensure the json data is a string
        if (data['ContaminantName'] && !(typeof data['ContaminantName'] === 'string' || data['ContaminantName'] instanceof String)) {
            throw new Error("Expected the field `ContaminantName` to be a primitive type in the JSON string but got " + data['ContaminantName']);
        }
        if (data['EnforcementActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['EnforcementActions'])) {
                throw new Error("Expected the field `EnforcementActions` to be an array in the JSON data but got " + data['EnforcementActions']);
            }
            // validate the optional field `EnforcementActions` (array)
            for (const item of data['EnforcementActions']) {
                Dfr109.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FederalMCL'] && !(typeof data['FederalMCL'] === 'string' || data['FederalMCL'] instanceof String)) {
            throw new Error("Expected the field `FederalMCL` to be a primitive type in the JSON string but got " + data['FederalMCL']);
        }
        // ensure the json data is a string
        if (data['FederalRule'] && !(typeof data['FederalRule'] === 'string' || data['FederalRule'] instanceof String)) {
            throw new Error("Expected the field `FederalRule` to be a primitive type in the JSON string but got " + data['FederalRule']);
        }
        // ensure the json data is a string
        if (data['ResolvedDate'] && !(typeof data['ResolvedDate'] === 'string' || data['ResolvedDate'] instanceof String)) {
            throw new Error("Expected the field `ResolvedDate` to be a primitive type in the JSON string but got " + data['ResolvedDate']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['StateMCL'] && !(typeof data['StateMCL'] === 'string' || data['StateMCL'] instanceof String)) {
            throw new Error("Expected the field `StateMCL` to be a primitive type in the JSON string but got " + data['StateMCL']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['ViolationCategoryCode'] && !(typeof data['ViolationCategoryCode'] === 'string' || data['ViolationCategoryCode'] instanceof String)) {
            throw new Error("Expected the field `ViolationCategoryCode` to be a primitive type in the JSON string but got " + data['ViolationCategoryCode']);
        }
        // ensure the json data is a string
        if (data['ViolationCategoryDesc'] && !(typeof data['ViolationCategoryDesc'] === 'string' || data['ViolationCategoryDesc'] instanceof String)) {
            throw new Error("Expected the field `ViolationCategoryDesc` to be a primitive type in the JSON string but got " + data['ViolationCategoryDesc']);
        }
        // ensure the json data is a string
        if (data['ViolationID'] && !(typeof data['ViolationID'] === 'string' || data['ViolationID'] instanceof String)) {
            throw new Error("Expected the field `ViolationID` to be a primitive type in the JSON string but got " + data['ViolationID']);
        }
        // ensure the json data is a string
        if (data['ViolationMeasure'] && !(typeof data['ViolationMeasure'] === 'string' || data['ViolationMeasure'] instanceof String)) {
            throw new Error("Expected the field `ViolationMeasure` to be a primitive type in the JSON string but got " + data['ViolationMeasure']);
        }

        return true;
    }


}

Dfr110.RequiredProperties = ["CompliancePeriodBeginDate", "CompliancePeriodEndDate", "ContaminantName", "EnforcementActions", "FederalMCL", "FederalRule", "ResolvedDate", "SourceID", "StateMCL", "Status", "ViolationCategoryCode", "ViolationCategoryDesc", "ViolationID", "ViolationMeasure"];

/**
 * The beginning date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
 * @member {String} CompliancePeriodBeginDate
 */
Dfr110.prototype['CompliancePeriodBeginDate'] = undefined;

/**
 * The end date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.
 * @member {String} CompliancePeriodEndDate
 */
Dfr110.prototype['CompliancePeriodEndDate'] = undefined;

/**
 * City
 * @member {String} ContaminantName
 */
Dfr110.prototype['ContaminantName'] = undefined;

/**
 * @member {Array.<module:model/Dfr109>} EnforcementActions
 */
Dfr110.prototype['EnforcementActions'] = undefined;

/**
 * Maximum contaminant levels (MCLs) or maximum residual disinfectant levels (MRDLs), which specify the highest concentrations of contaminants or disinfectants, respectively, allowed in drinking water; or of treatment technique (TT) rules, which specify required processes intended to reduce the amounts of contaminants in drinking water.
 * @member {String} FederalMCL
 */
Dfr110.prototype['FederalMCL'] = undefined;

/**
 * ???
 * @member {String} FederalRule
 */
Dfr110.prototype['FederalRule'] = undefined;

/**
 * The resolved date of the drinking water violation (MM/DD/YYYY)
 * @member {String} ResolvedDate
 */
Dfr110.prototype['ResolvedDate'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Dfr110.prototype['SourceID'] = undefined;

/**
 * County
 * @member {String} StateMCL
 */
Dfr110.prototype['StateMCL'] = undefined;

/**
 * Describes the status of the drinking water violation. Violation statuses include: - Resolved: The violation has at least one resolving enforcement action. In SDWIS, this indicates that either the system has returned to compliance from the violation, the rule that was violated was no longer applicable, or no further action was needed. - Archived: The violation is not Resolved, but is more than five years past its compliance period end date. In keeping with the Enforcement Response Policy, the violation no longer contributes to the public water system's overall compliance status. Unresolved violations are also marked as Archived when a system ceases operations (becomes inactive). - Addressed: The violation is not Resolved or Archived, and is addressed by one or more formal enforcement actions. - Unaddressed: The violation is not Resolved or Archived, and has not been addressed by formal enforcement.
 * @member {String} Status
 */
Dfr110.prototype['Status'] = undefined;

/**
 * Categories of violations that may be reported
 * @member {String} ViolationCategoryCode
 */
Dfr110.prototype['ViolationCategoryCode'] = undefined;

/**
 * A description of the violation category.
 * @member {String} ViolationCategoryDesc
 */
Dfr110.prototype['ViolationCategoryDesc'] = undefined;

/**
 * An identifer from SDWA that uniquely identifies the violation.
 * @member {String} ViolationID
 */
Dfr110.prototype['ViolationID'] = undefined;

/**
 * A numeric value that represents the analytical result of a contaminant that exceeded the Maximum Contaminant Level (MCL) for that contaminant.
 * @member {String} ViolationMeasure
 */
Dfr110.prototype['ViolationMeasure'] = undefined;






export default Dfr110;

