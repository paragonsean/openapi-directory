/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr070.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr070::OAIDfr070(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr070::OAIDfr070() {
    this->initializeModel();
}

OAIDfr070::~OAIDfr070() {}

void OAIDfr070::initializeModel() {

    m_copper_samples_isSet = false;
    m_copper_samples_isValid = false;

    m_cu_ale_isSet = false;
    m_cu_ale_isValid = false;

    m_cu_ale_units_isSet = false;
    m_cu_ale_units_isValid = false;

    m_cu_ale_value_isSet = false;
    m_cu_ale_value_isValid = false;

    m_cu_sample_dates_isSet = false;
    m_cu_sample_dates_isValid = false;

    m_cu_viol_isSet = false;
    m_cu_viol_isValid = false;

    m_lead_and_copper_viol_isSet = false;
    m_lead_and_copper_viol_isValid = false;

    m_lead_copper_rule_health_based_viol_isSet = false;
    m_lead_copper_rule_health_based_viol_isValid = false;

    m_lead_samples_isSet = false;
    m_lead_samples_isValid = false;

    m_pb_ale_isSet = false;
    m_pb_ale_isValid = false;

    m_pb_ale_units_isSet = false;
    m_pb_ale_units_isValid = false;

    m_pb_ale_value_isSet = false;
    m_pb_ale_value_isValid = false;

    m_pb_sample_dates_isSet = false;
    m_pb_sample_dates_isValid = false;

    m_pb_viol_isSet = false;
    m_pb_viol_isValid = false;

    m_rule_code350_viol_isSet = false;
    m_rule_code350_viol_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_i_cu90_isSet = false;
    m_i_cu90_isValid = false;

    m_i_pb90_isSet = false;
    m_i_pb90_isValid = false;
}

void OAIDfr070::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr070::fromJsonObject(QJsonObject json) {

    m_copper_samples_isValid = ::OpenAPI::fromJsonValue(m_copper_samples, json[QString("CopperSamples")]);
    m_copper_samples_isSet = !json[QString("CopperSamples")].isNull() && m_copper_samples_isValid;

    m_cu_ale_isValid = ::OpenAPI::fromJsonValue(m_cu_ale, json[QString("CuALE")]);
    m_cu_ale_isSet = !json[QString("CuALE")].isNull() && m_cu_ale_isValid;

    m_cu_ale_units_isValid = ::OpenAPI::fromJsonValue(m_cu_ale_units, json[QString("CuALEUnits")]);
    m_cu_ale_units_isSet = !json[QString("CuALEUnits")].isNull() && m_cu_ale_units_isValid;

    m_cu_ale_value_isValid = ::OpenAPI::fromJsonValue(m_cu_ale_value, json[QString("CuALEValue")]);
    m_cu_ale_value_isSet = !json[QString("CuALEValue")].isNull() && m_cu_ale_value_isValid;

    m_cu_sample_dates_isValid = ::OpenAPI::fromJsonValue(m_cu_sample_dates, json[QString("CuSampleDates")]);
    m_cu_sample_dates_isSet = !json[QString("CuSampleDates")].isNull() && m_cu_sample_dates_isValid;

    m_cu_viol_isValid = ::OpenAPI::fromJsonValue(m_cu_viol, json[QString("CuViol")]);
    m_cu_viol_isSet = !json[QString("CuViol")].isNull() && m_cu_viol_isValid;

    m_lead_and_copper_viol_isValid = ::OpenAPI::fromJsonValue(m_lead_and_copper_viol, json[QString("LeadAndCopperViol")]);
    m_lead_and_copper_viol_isSet = !json[QString("LeadAndCopperViol")].isNull() && m_lead_and_copper_viol_isValid;

    m_lead_copper_rule_health_based_viol_isValid = ::OpenAPI::fromJsonValue(m_lead_copper_rule_health_based_viol, json[QString("LeadCopperRuleHealthBasedViol")]);
    m_lead_copper_rule_health_based_viol_isSet = !json[QString("LeadCopperRuleHealthBasedViol")].isNull() && m_lead_copper_rule_health_based_viol_isValid;

    m_lead_samples_isValid = ::OpenAPI::fromJsonValue(m_lead_samples, json[QString("LeadSamples")]);
    m_lead_samples_isSet = !json[QString("LeadSamples")].isNull() && m_lead_samples_isValid;

    m_pb_ale_isValid = ::OpenAPI::fromJsonValue(m_pb_ale, json[QString("PbALE")]);
    m_pb_ale_isSet = !json[QString("PbALE")].isNull() && m_pb_ale_isValid;

    m_pb_ale_units_isValid = ::OpenAPI::fromJsonValue(m_pb_ale_units, json[QString("PbALEUnits")]);
    m_pb_ale_units_isSet = !json[QString("PbALEUnits")].isNull() && m_pb_ale_units_isValid;

    m_pb_ale_value_isValid = ::OpenAPI::fromJsonValue(m_pb_ale_value, json[QString("PbALEValue")]);
    m_pb_ale_value_isSet = !json[QString("PbALEValue")].isNull() && m_pb_ale_value_isValid;

    m_pb_sample_dates_isValid = ::OpenAPI::fromJsonValue(m_pb_sample_dates, json[QString("PbSampleDates")]);
    m_pb_sample_dates_isSet = !json[QString("PbSampleDates")].isNull() && m_pb_sample_dates_isValid;

    m_pb_viol_isValid = ::OpenAPI::fromJsonValue(m_pb_viol, json[QString("PbViol")]);
    m_pb_viol_isSet = !json[QString("PbViol")].isNull() && m_pb_viol_isValid;

    m_rule_code350_viol_isValid = ::OpenAPI::fromJsonValue(m_rule_code350_viol, json[QString("RuleCode350Viol")]);
    m_rule_code350_viol_isSet = !json[QString("RuleCode350Viol")].isNull() && m_rule_code350_viol_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_i_cu90_isValid = ::OpenAPI::fromJsonValue(m_i_cu90, json[QString("iCU90")]);
    m_i_cu90_isSet = !json[QString("iCU90")].isNull() && m_i_cu90_isValid;

    m_i_pb90_isValid = ::OpenAPI::fromJsonValue(m_i_pb90, json[QString("iPB90")]);
    m_i_pb90_isSet = !json[QString("iPB90")].isNull() && m_i_pb90_isValid;
}

QString OAIDfr070::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr070::asJsonObject() const {
    QJsonObject obj;
    if (m_copper_samples.size() > 0) {
        obj.insert(QString("CopperSamples"), ::OpenAPI::toJsonValue(m_copper_samples));
    }
    if (m_cu_ale_isSet) {
        obj.insert(QString("CuALE"), ::OpenAPI::toJsonValue(m_cu_ale));
    }
    if (m_cu_ale_units_isSet) {
        obj.insert(QString("CuALEUnits"), ::OpenAPI::toJsonValue(m_cu_ale_units));
    }
    if (m_cu_ale_value_isSet) {
        obj.insert(QString("CuALEValue"), ::OpenAPI::toJsonValue(m_cu_ale_value));
    }
    if (m_cu_sample_dates_isSet) {
        obj.insert(QString("CuSampleDates"), ::OpenAPI::toJsonValue(m_cu_sample_dates));
    }
    if (m_cu_viol_isSet) {
        obj.insert(QString("CuViol"), ::OpenAPI::toJsonValue(m_cu_viol));
    }
    if (m_lead_and_copper_viol_isSet) {
        obj.insert(QString("LeadAndCopperViol"), ::OpenAPI::toJsonValue(m_lead_and_copper_viol));
    }
    if (m_lead_copper_rule_health_based_viol_isSet) {
        obj.insert(QString("LeadCopperRuleHealthBasedViol"), ::OpenAPI::toJsonValue(m_lead_copper_rule_health_based_viol));
    }
    if (m_lead_samples.size() > 0) {
        obj.insert(QString("LeadSamples"), ::OpenAPI::toJsonValue(m_lead_samples));
    }
    if (m_pb_ale_isSet) {
        obj.insert(QString("PbALE"), ::OpenAPI::toJsonValue(m_pb_ale));
    }
    if (m_pb_ale_units_isSet) {
        obj.insert(QString("PbALEUnits"), ::OpenAPI::toJsonValue(m_pb_ale_units));
    }
    if (m_pb_ale_value_isSet) {
        obj.insert(QString("PbALEValue"), ::OpenAPI::toJsonValue(m_pb_ale_value));
    }
    if (m_pb_sample_dates_isSet) {
        obj.insert(QString("PbSampleDates"), ::OpenAPI::toJsonValue(m_pb_sample_dates));
    }
    if (m_pb_viol_isSet) {
        obj.insert(QString("PbViol"), ::OpenAPI::toJsonValue(m_pb_viol));
    }
    if (m_rule_code350_viol_isSet) {
        obj.insert(QString("RuleCode350Viol"), ::OpenAPI::toJsonValue(m_rule_code350_viol));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_i_cu90_isSet) {
        obj.insert(QString("iCU90"), ::OpenAPI::toJsonValue(m_i_cu90));
    }
    if (m_i_pb90_isSet) {
        obj.insert(QString("iPB90"), ::OpenAPI::toJsonValue(m_i_pb90));
    }
    return obj;
}

QList<OAIDfr071> OAIDfr070::getCopperSamples() const {
    return m_copper_samples;
}
void OAIDfr070::setCopperSamples(const QList<OAIDfr071> &copper_samples) {
    m_copper_samples = copper_samples;
    m_copper_samples_isSet = true;
}

bool OAIDfr070::is_copper_samples_Set() const{
    return m_copper_samples_isSet;
}

bool OAIDfr070::is_copper_samples_Valid() const{
    return m_copper_samples_isValid;
}

QString OAIDfr070::getCuAle() const {
    return m_cu_ale;
}
void OAIDfr070::setCuAle(const QString &cu_ale) {
    m_cu_ale = cu_ale;
    m_cu_ale_isSet = true;
}

bool OAIDfr070::is_cu_ale_Set() const{
    return m_cu_ale_isSet;
}

bool OAIDfr070::is_cu_ale_Valid() const{
    return m_cu_ale_isValid;
}

QString OAIDfr070::getCuAleUnits() const {
    return m_cu_ale_units;
}
void OAIDfr070::setCuAleUnits(const QString &cu_ale_units) {
    m_cu_ale_units = cu_ale_units;
    m_cu_ale_units_isSet = true;
}

bool OAIDfr070::is_cu_ale_units_Set() const{
    return m_cu_ale_units_isSet;
}

bool OAIDfr070::is_cu_ale_units_Valid() const{
    return m_cu_ale_units_isValid;
}

QString OAIDfr070::getCuAleValue() const {
    return m_cu_ale_value;
}
void OAIDfr070::setCuAleValue(const QString &cu_ale_value) {
    m_cu_ale_value = cu_ale_value;
    m_cu_ale_value_isSet = true;
}

bool OAIDfr070::is_cu_ale_value_Set() const{
    return m_cu_ale_value_isSet;
}

bool OAIDfr070::is_cu_ale_value_Valid() const{
    return m_cu_ale_value_isValid;
}

QString OAIDfr070::getCuSampleDates() const {
    return m_cu_sample_dates;
}
void OAIDfr070::setCuSampleDates(const QString &cu_sample_dates) {
    m_cu_sample_dates = cu_sample_dates;
    m_cu_sample_dates_isSet = true;
}

bool OAIDfr070::is_cu_sample_dates_Set() const{
    return m_cu_sample_dates_isSet;
}

bool OAIDfr070::is_cu_sample_dates_Valid() const{
    return m_cu_sample_dates_isValid;
}

QString OAIDfr070::getCuViol() const {
    return m_cu_viol;
}
void OAIDfr070::setCuViol(const QString &cu_viol) {
    m_cu_viol = cu_viol;
    m_cu_viol_isSet = true;
}

bool OAIDfr070::is_cu_viol_Set() const{
    return m_cu_viol_isSet;
}

bool OAIDfr070::is_cu_viol_Valid() const{
    return m_cu_viol_isValid;
}

QString OAIDfr070::getLeadAndCopperViol() const {
    return m_lead_and_copper_viol;
}
void OAIDfr070::setLeadAndCopperViol(const QString &lead_and_copper_viol) {
    m_lead_and_copper_viol = lead_and_copper_viol;
    m_lead_and_copper_viol_isSet = true;
}

bool OAIDfr070::is_lead_and_copper_viol_Set() const{
    return m_lead_and_copper_viol_isSet;
}

bool OAIDfr070::is_lead_and_copper_viol_Valid() const{
    return m_lead_and_copper_viol_isValid;
}

QString OAIDfr070::getLeadCopperRuleHealthBasedViol() const {
    return m_lead_copper_rule_health_based_viol;
}
void OAIDfr070::setLeadCopperRuleHealthBasedViol(const QString &lead_copper_rule_health_based_viol) {
    m_lead_copper_rule_health_based_viol = lead_copper_rule_health_based_viol;
    m_lead_copper_rule_health_based_viol_isSet = true;
}

bool OAIDfr070::is_lead_copper_rule_health_based_viol_Set() const{
    return m_lead_copper_rule_health_based_viol_isSet;
}

bool OAIDfr070::is_lead_copper_rule_health_based_viol_Valid() const{
    return m_lead_copper_rule_health_based_viol_isValid;
}

QList<OAIDfr072> OAIDfr070::getLeadSamples() const {
    return m_lead_samples;
}
void OAIDfr070::setLeadSamples(const QList<OAIDfr072> &lead_samples) {
    m_lead_samples = lead_samples;
    m_lead_samples_isSet = true;
}

bool OAIDfr070::is_lead_samples_Set() const{
    return m_lead_samples_isSet;
}

bool OAIDfr070::is_lead_samples_Valid() const{
    return m_lead_samples_isValid;
}

QString OAIDfr070::getPbAle() const {
    return m_pb_ale;
}
void OAIDfr070::setPbAle(const QString &pb_ale) {
    m_pb_ale = pb_ale;
    m_pb_ale_isSet = true;
}

bool OAIDfr070::is_pb_ale_Set() const{
    return m_pb_ale_isSet;
}

bool OAIDfr070::is_pb_ale_Valid() const{
    return m_pb_ale_isValid;
}

QString OAIDfr070::getPbAleUnits() const {
    return m_pb_ale_units;
}
void OAIDfr070::setPbAleUnits(const QString &pb_ale_units) {
    m_pb_ale_units = pb_ale_units;
    m_pb_ale_units_isSet = true;
}

bool OAIDfr070::is_pb_ale_units_Set() const{
    return m_pb_ale_units_isSet;
}

bool OAIDfr070::is_pb_ale_units_Valid() const{
    return m_pb_ale_units_isValid;
}

QString OAIDfr070::getPbAleValue() const {
    return m_pb_ale_value;
}
void OAIDfr070::setPbAleValue(const QString &pb_ale_value) {
    m_pb_ale_value = pb_ale_value;
    m_pb_ale_value_isSet = true;
}

bool OAIDfr070::is_pb_ale_value_Set() const{
    return m_pb_ale_value_isSet;
}

bool OAIDfr070::is_pb_ale_value_Valid() const{
    return m_pb_ale_value_isValid;
}

QString OAIDfr070::getPbSampleDates() const {
    return m_pb_sample_dates;
}
void OAIDfr070::setPbSampleDates(const QString &pb_sample_dates) {
    m_pb_sample_dates = pb_sample_dates;
    m_pb_sample_dates_isSet = true;
}

bool OAIDfr070::is_pb_sample_dates_Set() const{
    return m_pb_sample_dates_isSet;
}

bool OAIDfr070::is_pb_sample_dates_Valid() const{
    return m_pb_sample_dates_isValid;
}

QString OAIDfr070::getPbViol() const {
    return m_pb_viol;
}
void OAIDfr070::setPbViol(const QString &pb_viol) {
    m_pb_viol = pb_viol;
    m_pb_viol_isSet = true;
}

bool OAIDfr070::is_pb_viol_Set() const{
    return m_pb_viol_isSet;
}

bool OAIDfr070::is_pb_viol_Valid() const{
    return m_pb_viol_isValid;
}

QString OAIDfr070::getRuleCode350Viol() const {
    return m_rule_code350_viol;
}
void OAIDfr070::setRuleCode350Viol(const QString &rule_code350_viol) {
    m_rule_code350_viol = rule_code350_viol;
    m_rule_code350_viol_isSet = true;
}

bool OAIDfr070::is_rule_code350_viol_Set() const{
    return m_rule_code350_viol_isSet;
}

bool OAIDfr070::is_rule_code350_viol_Valid() const{
    return m_rule_code350_viol_isValid;
}

QString OAIDfr070::getSourceId() const {
    return m_source_id;
}
void OAIDfr070::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr070::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr070::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr070::getICu90() const {
    return m_i_cu90;
}
void OAIDfr070::setICu90(const QString &i_cu90) {
    m_i_cu90 = i_cu90;
    m_i_cu90_isSet = true;
}

bool OAIDfr070::is_i_cu90_Set() const{
    return m_i_cu90_isSet;
}

bool OAIDfr070::is_i_cu90_Valid() const{
    return m_i_cu90_isValid;
}

QString OAIDfr070::getIPb90() const {
    return m_i_pb90;
}
void OAIDfr070::setIPb90(const QString &i_pb90) {
    m_i_pb90 = i_pb90;
    m_i_pb90_isSet = true;
}

bool OAIDfr070::is_i_pb90_Set() const{
    return m_i_pb90_isSet;
}

bool OAIDfr070::is_i_pb90_Valid() const{
    return m_i_pb90_isValid;
}

bool OAIDfr070::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copper_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_ale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_ale_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_ale_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_sample_dates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_and_copper_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_copper_rule_health_based_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_ale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_ale_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_ale_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_sample_dates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_code350_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_cu90_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_pb90_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr070::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
