/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr103.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr103::OAIDfr103(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr103::OAIDfr103() {
    this->initializeModel();
}

OAIDfr103::~OAIDfr103() {}

void OAIDfr103::initializeModel() {

    m_chemical_name_isSet = false;
    m_chemical_name_isValid = false;

    m_year1_pounds_isSet = false;
    m_year1_pounds_isValid = false;

    m_year2_pounds_isSet = false;
    m_year2_pounds_isValid = false;

    m_year3_pounds_isSet = false;
    m_year3_pounds_isValid = false;

    m_year4_pounds_isSet = false;
    m_year4_pounds_isValid = false;

    m_year5_pounds_isSet = false;
    m_year5_pounds_isValid = false;

    m_year6_pounds_isSet = false;
    m_year6_pounds_isValid = false;

    m_year7_pounds_isSet = false;
    m_year7_pounds_isValid = false;

    m_year8_pounds_isSet = false;
    m_year8_pounds_isValid = false;

    m_year9_pounds_isSet = false;
    m_year9_pounds_isValid = false;
}

void OAIDfr103::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr103::fromJsonObject(QJsonObject json) {

    m_chemical_name_isValid = ::OpenAPI::fromJsonValue(m_chemical_name, json[QString("ChemicalName")]);
    m_chemical_name_isSet = !json[QString("ChemicalName")].isNull() && m_chemical_name_isValid;

    m_year1_pounds_isValid = ::OpenAPI::fromJsonValue(m_year1_pounds, json[QString("Year1Pounds")]);
    m_year1_pounds_isSet = !json[QString("Year1Pounds")].isNull() && m_year1_pounds_isValid;

    m_year2_pounds_isValid = ::OpenAPI::fromJsonValue(m_year2_pounds, json[QString("Year2Pounds")]);
    m_year2_pounds_isSet = !json[QString("Year2Pounds")].isNull() && m_year2_pounds_isValid;

    m_year3_pounds_isValid = ::OpenAPI::fromJsonValue(m_year3_pounds, json[QString("Year3Pounds")]);
    m_year3_pounds_isSet = !json[QString("Year3Pounds")].isNull() && m_year3_pounds_isValid;

    m_year4_pounds_isValid = ::OpenAPI::fromJsonValue(m_year4_pounds, json[QString("Year4Pounds")]);
    m_year4_pounds_isSet = !json[QString("Year4Pounds")].isNull() && m_year4_pounds_isValid;

    m_year5_pounds_isValid = ::OpenAPI::fromJsonValue(m_year5_pounds, json[QString("Year5Pounds")]);
    m_year5_pounds_isSet = !json[QString("Year5Pounds")].isNull() && m_year5_pounds_isValid;

    m_year6_pounds_isValid = ::OpenAPI::fromJsonValue(m_year6_pounds, json[QString("Year6Pounds")]);
    m_year6_pounds_isSet = !json[QString("Year6Pounds")].isNull() && m_year6_pounds_isValid;

    m_year7_pounds_isValid = ::OpenAPI::fromJsonValue(m_year7_pounds, json[QString("Year7Pounds")]);
    m_year7_pounds_isSet = !json[QString("Year7Pounds")].isNull() && m_year7_pounds_isValid;

    m_year8_pounds_isValid = ::OpenAPI::fromJsonValue(m_year8_pounds, json[QString("Year8Pounds")]);
    m_year8_pounds_isSet = !json[QString("Year8Pounds")].isNull() && m_year8_pounds_isValid;

    m_year9_pounds_isValid = ::OpenAPI::fromJsonValue(m_year9_pounds, json[QString("Year9Pounds")]);
    m_year9_pounds_isSet = !json[QString("Year9Pounds")].isNull() && m_year9_pounds_isValid;
}

QString OAIDfr103::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr103::asJsonObject() const {
    QJsonObject obj;
    if (m_chemical_name_isSet) {
        obj.insert(QString("ChemicalName"), ::OpenAPI::toJsonValue(m_chemical_name));
    }
    if (m_year1_pounds_isSet) {
        obj.insert(QString("Year1Pounds"), ::OpenAPI::toJsonValue(m_year1_pounds));
    }
    if (m_year2_pounds_isSet) {
        obj.insert(QString("Year2Pounds"), ::OpenAPI::toJsonValue(m_year2_pounds));
    }
    if (m_year3_pounds_isSet) {
        obj.insert(QString("Year3Pounds"), ::OpenAPI::toJsonValue(m_year3_pounds));
    }
    if (m_year4_pounds_isSet) {
        obj.insert(QString("Year4Pounds"), ::OpenAPI::toJsonValue(m_year4_pounds));
    }
    if (m_year5_pounds_isSet) {
        obj.insert(QString("Year5Pounds"), ::OpenAPI::toJsonValue(m_year5_pounds));
    }
    if (m_year6_pounds_isSet) {
        obj.insert(QString("Year6Pounds"), ::OpenAPI::toJsonValue(m_year6_pounds));
    }
    if (m_year7_pounds_isSet) {
        obj.insert(QString("Year7Pounds"), ::OpenAPI::toJsonValue(m_year7_pounds));
    }
    if (m_year8_pounds_isSet) {
        obj.insert(QString("Year8Pounds"), ::OpenAPI::toJsonValue(m_year8_pounds));
    }
    if (m_year9_pounds_isSet) {
        obj.insert(QString("Year9Pounds"), ::OpenAPI::toJsonValue(m_year9_pounds));
    }
    return obj;
}

QString OAIDfr103::getChemicalName() const {
    return m_chemical_name;
}
void OAIDfr103::setChemicalName(const QString &chemical_name) {
    m_chemical_name = chemical_name;
    m_chemical_name_isSet = true;
}

bool OAIDfr103::is_chemical_name_Set() const{
    return m_chemical_name_isSet;
}

bool OAIDfr103::is_chemical_name_Valid() const{
    return m_chemical_name_isValid;
}

QString OAIDfr103::getYear1Pounds() const {
    return m_year1_pounds;
}
void OAIDfr103::setYear1Pounds(const QString &year1_pounds) {
    m_year1_pounds = year1_pounds;
    m_year1_pounds_isSet = true;
}

bool OAIDfr103::is_year1_pounds_Set() const{
    return m_year1_pounds_isSet;
}

bool OAIDfr103::is_year1_pounds_Valid() const{
    return m_year1_pounds_isValid;
}

QString OAIDfr103::getYear2Pounds() const {
    return m_year2_pounds;
}
void OAIDfr103::setYear2Pounds(const QString &year2_pounds) {
    m_year2_pounds = year2_pounds;
    m_year2_pounds_isSet = true;
}

bool OAIDfr103::is_year2_pounds_Set() const{
    return m_year2_pounds_isSet;
}

bool OAIDfr103::is_year2_pounds_Valid() const{
    return m_year2_pounds_isValid;
}

QString OAIDfr103::getYear3Pounds() const {
    return m_year3_pounds;
}
void OAIDfr103::setYear3Pounds(const QString &year3_pounds) {
    m_year3_pounds = year3_pounds;
    m_year3_pounds_isSet = true;
}

bool OAIDfr103::is_year3_pounds_Set() const{
    return m_year3_pounds_isSet;
}

bool OAIDfr103::is_year3_pounds_Valid() const{
    return m_year3_pounds_isValid;
}

QString OAIDfr103::getYear4Pounds() const {
    return m_year4_pounds;
}
void OAIDfr103::setYear4Pounds(const QString &year4_pounds) {
    m_year4_pounds = year4_pounds;
    m_year4_pounds_isSet = true;
}

bool OAIDfr103::is_year4_pounds_Set() const{
    return m_year4_pounds_isSet;
}

bool OAIDfr103::is_year4_pounds_Valid() const{
    return m_year4_pounds_isValid;
}

QString OAIDfr103::getYear5Pounds() const {
    return m_year5_pounds;
}
void OAIDfr103::setYear5Pounds(const QString &year5_pounds) {
    m_year5_pounds = year5_pounds;
    m_year5_pounds_isSet = true;
}

bool OAIDfr103::is_year5_pounds_Set() const{
    return m_year5_pounds_isSet;
}

bool OAIDfr103::is_year5_pounds_Valid() const{
    return m_year5_pounds_isValid;
}

QString OAIDfr103::getYear6Pounds() const {
    return m_year6_pounds;
}
void OAIDfr103::setYear6Pounds(const QString &year6_pounds) {
    m_year6_pounds = year6_pounds;
    m_year6_pounds_isSet = true;
}

bool OAIDfr103::is_year6_pounds_Set() const{
    return m_year6_pounds_isSet;
}

bool OAIDfr103::is_year6_pounds_Valid() const{
    return m_year6_pounds_isValid;
}

QString OAIDfr103::getYear7Pounds() const {
    return m_year7_pounds;
}
void OAIDfr103::setYear7Pounds(const QString &year7_pounds) {
    m_year7_pounds = year7_pounds;
    m_year7_pounds_isSet = true;
}

bool OAIDfr103::is_year7_pounds_Set() const{
    return m_year7_pounds_isSet;
}

bool OAIDfr103::is_year7_pounds_Valid() const{
    return m_year7_pounds_isValid;
}

QString OAIDfr103::getYear8Pounds() const {
    return m_year8_pounds;
}
void OAIDfr103::setYear8Pounds(const QString &year8_pounds) {
    m_year8_pounds = year8_pounds;
    m_year8_pounds_isSet = true;
}

bool OAIDfr103::is_year8_pounds_Set() const{
    return m_year8_pounds_isSet;
}

bool OAIDfr103::is_year8_pounds_Valid() const{
    return m_year8_pounds_isValid;
}

QString OAIDfr103::getYear9Pounds() const {
    return m_year9_pounds;
}
void OAIDfr103::setYear9Pounds(const QString &year9_pounds) {
    m_year9_pounds = year9_pounds;
    m_year9_pounds_isSet = true;
}

bool OAIDfr103::is_year9_pounds_Set() const{
    return m_year9_pounds_isSet;
}

bool OAIDfr103::is_year9_pounds_Valid() const{
    return m_year9_pounds_isValid;
}

bool OAIDfr103::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chemical_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year1_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year2_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year3_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year4_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year5_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year6_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year7_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year8_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year9_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr103::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chemical_name_isValid && m_year1_pounds_isValid && m_year2_pounds_isValid && m_year3_pounds_isValid && m_year4_pounds_isValid && m_year5_pounds_isValid && m_year6_pounds_isValid && m_year7_pounds_isValid && m_year8_pounds_isValid && m_year9_pounds_isValid && true;
}

} // namespace OpenAPI
