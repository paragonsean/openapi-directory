/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr004.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr004::OAIDfr004(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr004::OAIDfr004() {
    this->initializeModel();
}

OAIDfr004::~OAIDfr004() {}

void OAIDfr004::initializeModel() {

    m_case_formal_actions_isSet = false;
    m_case_formal_actions_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIDfr004::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr004::fromJsonObject(QJsonObject json) {

    m_case_formal_actions_isValid = ::OpenAPI::fromJsonValue(m_case_formal_actions, json[QString("CaseFormalActions")]);
    m_case_formal_actions_isSet = !json[QString("CaseFormalActions")].isNull() && m_case_formal_actions_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIDfr004::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr004::asJsonObject() const {
    QJsonObject obj;
    if (m_case_formal_actions.isSet()) {
        obj.insert(QString("CaseFormalActions"), ::OpenAPI::toJsonValue(m_case_formal_actions));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIDfr052 OAIDfr004::getCaseFormalActions() const {
    return m_case_formal_actions;
}
void OAIDfr004::setCaseFormalActions(const OAIDfr052 &case_formal_actions) {
    m_case_formal_actions = case_formal_actions;
    m_case_formal_actions_isSet = true;
}

bool OAIDfr004::is_case_formal_actions_Set() const{
    return m_case_formal_actions_isSet;
}

bool OAIDfr004::is_case_formal_actions_Valid() const{
    return m_case_formal_actions_isValid;
}

QString OAIDfr004::getMessage() const {
    return m_message;
}
void OAIDfr004::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr004::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr004::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIDfr004::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_formal_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr004::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
