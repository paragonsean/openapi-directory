/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr115.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr115::OAIDfr115(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr115::OAIDfr115() {
    this->initializeModel();
}

OAIDfr115::~OAIDfr115() {}

void OAIDfr115::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_system_extract_dates_isSet = false;
    m_system_extract_dates_isValid = false;
}

void OAIDfr115::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr115::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_system_extract_dates_isValid = ::OpenAPI::fromJsonValue(m_system_extract_dates, json[QString("SystemExtractDates")]);
    m_system_extract_dates_isSet = !json[QString("SystemExtractDates")].isNull() && m_system_extract_dates_isValid;
}

QString OAIDfr115::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr115::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_system_extract_dates.isSet()) {
        obj.insert(QString("SystemExtractDates"), ::OpenAPI::toJsonValue(m_system_extract_dates));
    }
    return obj;
}

QString OAIDfr115::getMessage() const {
    return m_message;
}
void OAIDfr115::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr115::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr115::is_message_Valid() const{
    return m_message_isValid;
}

OAIDfr095 OAIDfr115::getSystemExtractDates() const {
    return m_system_extract_dates;
}
void OAIDfr115::setSystemExtractDates(const OAIDfr095 &system_extract_dates) {
    m_system_extract_dates = system_extract_dates;
    m_system_extract_dates_isSet = true;
}

bool OAIDfr115::is_system_extract_dates_Set() const{
    return m_system_extract_dates_isSet;
}

bool OAIDfr115::is_system_extract_dates_Valid() const{
    return m_system_extract_dates_isValid;
}

bool OAIDfr115::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_extract_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr115::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
