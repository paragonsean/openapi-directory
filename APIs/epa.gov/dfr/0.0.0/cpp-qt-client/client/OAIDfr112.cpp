/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr112.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr112::OAIDfr112(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr112::OAIDfr112() {
    this->initializeModel();
}

OAIDfr112::~OAIDfr112() {}

void OAIDfr112::initializeModel() {

    m_attains_aquatic_life_use_flg_isSet = false;
    m_attains_aquatic_life_use_flg_isValid = false;

    m_attains_au_category_isSet = false;
    m_attains_au_category_isValid = false;

    m_attains_cause_groups_isSet = false;
    m_attains_cause_groups_isValid = false;

    m_attains_exceptnl_use_flg_isSet = false;
    m_attains_exceptnl_use_flg_isValid = false;

    m_attains_recreation_use_flg_isSet = false;
    m_attains_recreation_use_flg_isValid = false;

    m_attains_shellfish_use_flg_isSet = false;
    m_attains_shellfish_use_flg_isValid = false;

    m_beach_close_last2yrs_flg_isSet = false;
    m_beach_close_last2yrs_flg_isValid = false;

    m_beach_close_last_year_flg_isSet = false;
    m_beach_close_last_year_flg_isValid = false;

    m_css_isSet = false;
    m_css_isValid = false;

    m_cwp_cso_outfalls_isSet = false;
    m_cwp_cso_outfalls_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_esa_aquatic_species_flg_isSet = false;
    m_esa_aquatic_species_flg_isValid = false;

    m_huc8_isSet = false;
    m_huc8_isValid = false;

    m_huc8_name_isSet = false;
    m_huc8_name_isValid = false;

    m_impaired_waters_isSet = false;
    m_impaired_waters_isValid = false;

    m_rad_gnis_name_isSet = false;
    m_rad_gnis_name_isValid = false;

    m_rad_reachcode_isSet = false;
    m_rad_reachcode_isValid = false;

    m_receiving_waters_isSet = false;
    m_receiving_waters_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_wbd12_isSet = false;
    m_wbd12_isValid = false;

    m_wbd12_name_isSet = false;
    m_wbd12_name_isValid = false;
}

void OAIDfr112::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr112::fromJsonObject(QJsonObject json) {

    m_attains_aquatic_life_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_aquatic_life_use_flg, json[QString("AttainsAquaticLifeUseFlg")]);
    m_attains_aquatic_life_use_flg_isSet = !json[QString("AttainsAquaticLifeUseFlg")].isNull() && m_attains_aquatic_life_use_flg_isValid;

    m_attains_au_category_isValid = ::OpenAPI::fromJsonValue(m_attains_au_category, json[QString("AttainsAuCategory")]);
    m_attains_au_category_isSet = !json[QString("AttainsAuCategory")].isNull() && m_attains_au_category_isValid;

    m_attains_cause_groups_isValid = ::OpenAPI::fromJsonValue(m_attains_cause_groups, json[QString("AttainsCauseGroups")]);
    m_attains_cause_groups_isSet = !json[QString("AttainsCauseGroups")].isNull() && m_attains_cause_groups_isValid;

    m_attains_exceptnl_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_exceptnl_use_flg, json[QString("AttainsExceptnlUseFlg")]);
    m_attains_exceptnl_use_flg_isSet = !json[QString("AttainsExceptnlUseFlg")].isNull() && m_attains_exceptnl_use_flg_isValid;

    m_attains_recreation_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_recreation_use_flg, json[QString("AttainsRecreationUseFlg")]);
    m_attains_recreation_use_flg_isSet = !json[QString("AttainsRecreationUseFlg")].isNull() && m_attains_recreation_use_flg_isValid;

    m_attains_shellfish_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_shellfish_use_flg, json[QString("AttainsShellfishUseFlg")]);
    m_attains_shellfish_use_flg_isSet = !json[QString("AttainsShellfishUseFlg")].isNull() && m_attains_shellfish_use_flg_isValid;

    m_beach_close_last2yrs_flg_isValid = ::OpenAPI::fromJsonValue(m_beach_close_last2yrs_flg, json[QString("BeachCloseLast2yrsFlg")]);
    m_beach_close_last2yrs_flg_isSet = !json[QString("BeachCloseLast2yrsFlg")].isNull() && m_beach_close_last2yrs_flg_isValid;

    m_beach_close_last_year_flg_isValid = ::OpenAPI::fromJsonValue(m_beach_close_last_year_flg, json[QString("BeachCloseLastYearFlg")]);
    m_beach_close_last_year_flg_isSet = !json[QString("BeachCloseLastYearFlg")].isNull() && m_beach_close_last_year_flg_isValid;

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("CSS")]);
    m_css_isSet = !json[QString("CSS")].isNull() && m_css_isValid;

    m_cwp_cso_outfalls_isValid = ::OpenAPI::fromJsonValue(m_cwp_cso_outfalls, json[QString("CWPCsoOutfalls")]);
    m_cwp_cso_outfalls_isSet = !json[QString("CWPCsoOutfalls")].isNull() && m_cwp_cso_outfalls_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_esa_aquatic_species_flg_isValid = ::OpenAPI::fromJsonValue(m_esa_aquatic_species_flg, json[QString("EsaAquaticSpeciesFlg")]);
    m_esa_aquatic_species_flg_isSet = !json[QString("EsaAquaticSpeciesFlg")].isNull() && m_esa_aquatic_species_flg_isValid;

    m_huc8_isValid = ::OpenAPI::fromJsonValue(m_huc8, json[QString("HUC8")]);
    m_huc8_isSet = !json[QString("HUC8")].isNull() && m_huc8_isValid;

    m_huc8_name_isValid = ::OpenAPI::fromJsonValue(m_huc8_name, json[QString("HUC8Name")]);
    m_huc8_name_isSet = !json[QString("HUC8Name")].isNull() && m_huc8_name_isValid;

    m_impaired_waters_isValid = ::OpenAPI::fromJsonValue(m_impaired_waters, json[QString("ImpairedWaters")]);
    m_impaired_waters_isSet = !json[QString("ImpairedWaters")].isNull() && m_impaired_waters_isValid;

    m_rad_gnis_name_isValid = ::OpenAPI::fromJsonValue(m_rad_gnis_name, json[QString("RadGnisName")]);
    m_rad_gnis_name_isSet = !json[QString("RadGnisName")].isNull() && m_rad_gnis_name_isValid;

    m_rad_reachcode_isValid = ::OpenAPI::fromJsonValue(m_rad_reachcode, json[QString("RadReachcode")]);
    m_rad_reachcode_isSet = !json[QString("RadReachcode")].isNull() && m_rad_reachcode_isValid;

    m_receiving_waters_isValid = ::OpenAPI::fromJsonValue(m_receiving_waters, json[QString("ReceivingWaters")]);
    m_receiving_waters_isSet = !json[QString("ReceivingWaters")].isNull() && m_receiving_waters_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_wbd12_isValid = ::OpenAPI::fromJsonValue(m_wbd12, json[QString("WBD12")]);
    m_wbd12_isSet = !json[QString("WBD12")].isNull() && m_wbd12_isValid;

    m_wbd12_name_isValid = ::OpenAPI::fromJsonValue(m_wbd12_name, json[QString("WBD12Name")]);
    m_wbd12_name_isSet = !json[QString("WBD12Name")].isNull() && m_wbd12_name_isValid;
}

QString OAIDfr112::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr112::asJsonObject() const {
    QJsonObject obj;
    if (m_attains_aquatic_life_use_flg_isSet) {
        obj.insert(QString("AttainsAquaticLifeUseFlg"), ::OpenAPI::toJsonValue(m_attains_aquatic_life_use_flg));
    }
    if (m_attains_au_category_isSet) {
        obj.insert(QString("AttainsAuCategory"), ::OpenAPI::toJsonValue(m_attains_au_category));
    }
    if (m_attains_cause_groups_isSet) {
        obj.insert(QString("AttainsCauseGroups"), ::OpenAPI::toJsonValue(m_attains_cause_groups));
    }
    if (m_attains_exceptnl_use_flg_isSet) {
        obj.insert(QString("AttainsExceptnlUseFlg"), ::OpenAPI::toJsonValue(m_attains_exceptnl_use_flg));
    }
    if (m_attains_recreation_use_flg_isSet) {
        obj.insert(QString("AttainsRecreationUseFlg"), ::OpenAPI::toJsonValue(m_attains_recreation_use_flg));
    }
    if (m_attains_shellfish_use_flg_isSet) {
        obj.insert(QString("AttainsShellfishUseFlg"), ::OpenAPI::toJsonValue(m_attains_shellfish_use_flg));
    }
    if (m_beach_close_last2yrs_flg_isSet) {
        obj.insert(QString("BeachCloseLast2yrsFlg"), ::OpenAPI::toJsonValue(m_beach_close_last2yrs_flg));
    }
    if (m_beach_close_last_year_flg_isSet) {
        obj.insert(QString("BeachCloseLastYearFlg"), ::OpenAPI::toJsonValue(m_beach_close_last_year_flg));
    }
    if (m_css_isSet) {
        obj.insert(QString("CSS"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_cwp_cso_outfalls_isSet) {
        obj.insert(QString("CWPCsoOutfalls"), ::OpenAPI::toJsonValue(m_cwp_cso_outfalls));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_esa_aquatic_species_flg_isSet) {
        obj.insert(QString("EsaAquaticSpeciesFlg"), ::OpenAPI::toJsonValue(m_esa_aquatic_species_flg));
    }
    if (m_huc8_isSet) {
        obj.insert(QString("HUC8"), ::OpenAPI::toJsonValue(m_huc8));
    }
    if (m_huc8_name_isSet) {
        obj.insert(QString("HUC8Name"), ::OpenAPI::toJsonValue(m_huc8_name));
    }
    if (m_impaired_waters_isSet) {
        obj.insert(QString("ImpairedWaters"), ::OpenAPI::toJsonValue(m_impaired_waters));
    }
    if (m_rad_gnis_name_isSet) {
        obj.insert(QString("RadGnisName"), ::OpenAPI::toJsonValue(m_rad_gnis_name));
    }
    if (m_rad_reachcode_isSet) {
        obj.insert(QString("RadReachcode"), ::OpenAPI::toJsonValue(m_rad_reachcode));
    }
    if (m_receiving_waters_isSet) {
        obj.insert(QString("ReceivingWaters"), ::OpenAPI::toJsonValue(m_receiving_waters));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_wbd12_isSet) {
        obj.insert(QString("WBD12"), ::OpenAPI::toJsonValue(m_wbd12));
    }
    if (m_wbd12_name_isSet) {
        obj.insert(QString("WBD12Name"), ::OpenAPI::toJsonValue(m_wbd12_name));
    }
    return obj;
}

QString OAIDfr112::getAttainsAquaticLifeUseFlg() const {
    return m_attains_aquatic_life_use_flg;
}
void OAIDfr112::setAttainsAquaticLifeUseFlg(const QString &attains_aquatic_life_use_flg) {
    m_attains_aquatic_life_use_flg = attains_aquatic_life_use_flg;
    m_attains_aquatic_life_use_flg_isSet = true;
}

bool OAIDfr112::is_attains_aquatic_life_use_flg_Set() const{
    return m_attains_aquatic_life_use_flg_isSet;
}

bool OAIDfr112::is_attains_aquatic_life_use_flg_Valid() const{
    return m_attains_aquatic_life_use_flg_isValid;
}

QString OAIDfr112::getAttainsAuCategory() const {
    return m_attains_au_category;
}
void OAIDfr112::setAttainsAuCategory(const QString &attains_au_category) {
    m_attains_au_category = attains_au_category;
    m_attains_au_category_isSet = true;
}

bool OAIDfr112::is_attains_au_category_Set() const{
    return m_attains_au_category_isSet;
}

bool OAIDfr112::is_attains_au_category_Valid() const{
    return m_attains_au_category_isValid;
}

QString OAIDfr112::getAttainsCauseGroups() const {
    return m_attains_cause_groups;
}
void OAIDfr112::setAttainsCauseGroups(const QString &attains_cause_groups) {
    m_attains_cause_groups = attains_cause_groups;
    m_attains_cause_groups_isSet = true;
}

bool OAIDfr112::is_attains_cause_groups_Set() const{
    return m_attains_cause_groups_isSet;
}

bool OAIDfr112::is_attains_cause_groups_Valid() const{
    return m_attains_cause_groups_isValid;
}

QString OAIDfr112::getAttainsExceptnlUseFlg() const {
    return m_attains_exceptnl_use_flg;
}
void OAIDfr112::setAttainsExceptnlUseFlg(const QString &attains_exceptnl_use_flg) {
    m_attains_exceptnl_use_flg = attains_exceptnl_use_flg;
    m_attains_exceptnl_use_flg_isSet = true;
}

bool OAIDfr112::is_attains_exceptnl_use_flg_Set() const{
    return m_attains_exceptnl_use_flg_isSet;
}

bool OAIDfr112::is_attains_exceptnl_use_flg_Valid() const{
    return m_attains_exceptnl_use_flg_isValid;
}

QString OAIDfr112::getAttainsRecreationUseFlg() const {
    return m_attains_recreation_use_flg;
}
void OAIDfr112::setAttainsRecreationUseFlg(const QString &attains_recreation_use_flg) {
    m_attains_recreation_use_flg = attains_recreation_use_flg;
    m_attains_recreation_use_flg_isSet = true;
}

bool OAIDfr112::is_attains_recreation_use_flg_Set() const{
    return m_attains_recreation_use_flg_isSet;
}

bool OAIDfr112::is_attains_recreation_use_flg_Valid() const{
    return m_attains_recreation_use_flg_isValid;
}

QString OAIDfr112::getAttainsShellfishUseFlg() const {
    return m_attains_shellfish_use_flg;
}
void OAIDfr112::setAttainsShellfishUseFlg(const QString &attains_shellfish_use_flg) {
    m_attains_shellfish_use_flg = attains_shellfish_use_flg;
    m_attains_shellfish_use_flg_isSet = true;
}

bool OAIDfr112::is_attains_shellfish_use_flg_Set() const{
    return m_attains_shellfish_use_flg_isSet;
}

bool OAIDfr112::is_attains_shellfish_use_flg_Valid() const{
    return m_attains_shellfish_use_flg_isValid;
}

QString OAIDfr112::getBeachCloseLast2yrsFlg() const {
    return m_beach_close_last2yrs_flg;
}
void OAIDfr112::setBeachCloseLast2yrsFlg(const QString &beach_close_last2yrs_flg) {
    m_beach_close_last2yrs_flg = beach_close_last2yrs_flg;
    m_beach_close_last2yrs_flg_isSet = true;
}

bool OAIDfr112::is_beach_close_last2yrs_flg_Set() const{
    return m_beach_close_last2yrs_flg_isSet;
}

bool OAIDfr112::is_beach_close_last2yrs_flg_Valid() const{
    return m_beach_close_last2yrs_flg_isValid;
}

QString OAIDfr112::getBeachCloseLastYearFlg() const {
    return m_beach_close_last_year_flg;
}
void OAIDfr112::setBeachCloseLastYearFlg(const QString &beach_close_last_year_flg) {
    m_beach_close_last_year_flg = beach_close_last_year_flg;
    m_beach_close_last_year_flg_isSet = true;
}

bool OAIDfr112::is_beach_close_last_year_flg_Set() const{
    return m_beach_close_last_year_flg_isSet;
}

bool OAIDfr112::is_beach_close_last_year_flg_Valid() const{
    return m_beach_close_last_year_flg_isValid;
}

QString OAIDfr112::getCss() const {
    return m_css;
}
void OAIDfr112::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIDfr112::is_css_Set() const{
    return m_css_isSet;
}

bool OAIDfr112::is_css_Valid() const{
    return m_css_isValid;
}

QString OAIDfr112::getCwpCsoOutfalls() const {
    return m_cwp_cso_outfalls;
}
void OAIDfr112::setCwpCsoOutfalls(const QString &cwp_cso_outfalls) {
    m_cwp_cso_outfalls = cwp_cso_outfalls;
    m_cwp_cso_outfalls_isSet = true;
}

bool OAIDfr112::is_cwp_cso_outfalls_Set() const{
    return m_cwp_cso_outfalls_isSet;
}

bool OAIDfr112::is_cwp_cso_outfalls_Valid() const{
    return m_cwp_cso_outfalls_isValid;
}

QString OAIDfr112::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr112::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr112::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr112::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr112::getEsaAquaticSpeciesFlg() const {
    return m_esa_aquatic_species_flg;
}
void OAIDfr112::setEsaAquaticSpeciesFlg(const QString &esa_aquatic_species_flg) {
    m_esa_aquatic_species_flg = esa_aquatic_species_flg;
    m_esa_aquatic_species_flg_isSet = true;
}

bool OAIDfr112::is_esa_aquatic_species_flg_Set() const{
    return m_esa_aquatic_species_flg_isSet;
}

bool OAIDfr112::is_esa_aquatic_species_flg_Valid() const{
    return m_esa_aquatic_species_flg_isValid;
}

QString OAIDfr112::getHuc8() const {
    return m_huc8;
}
void OAIDfr112::setHuc8(const QString &huc8) {
    m_huc8 = huc8;
    m_huc8_isSet = true;
}

bool OAIDfr112::is_huc8_Set() const{
    return m_huc8_isSet;
}

bool OAIDfr112::is_huc8_Valid() const{
    return m_huc8_isValid;
}

QString OAIDfr112::getHuc8Name() const {
    return m_huc8_name;
}
void OAIDfr112::setHuc8Name(const QString &huc8_name) {
    m_huc8_name = huc8_name;
    m_huc8_name_isSet = true;
}

bool OAIDfr112::is_huc8_name_Set() const{
    return m_huc8_name_isSet;
}

bool OAIDfr112::is_huc8_name_Valid() const{
    return m_huc8_name_isValid;
}

QString OAIDfr112::getImpairedWaters() const {
    return m_impaired_waters;
}
void OAIDfr112::setImpairedWaters(const QString &impaired_waters) {
    m_impaired_waters = impaired_waters;
    m_impaired_waters_isSet = true;
}

bool OAIDfr112::is_impaired_waters_Set() const{
    return m_impaired_waters_isSet;
}

bool OAIDfr112::is_impaired_waters_Valid() const{
    return m_impaired_waters_isValid;
}

QString OAIDfr112::getRadGnisName() const {
    return m_rad_gnis_name;
}
void OAIDfr112::setRadGnisName(const QString &rad_gnis_name) {
    m_rad_gnis_name = rad_gnis_name;
    m_rad_gnis_name_isSet = true;
}

bool OAIDfr112::is_rad_gnis_name_Set() const{
    return m_rad_gnis_name_isSet;
}

bool OAIDfr112::is_rad_gnis_name_Valid() const{
    return m_rad_gnis_name_isValid;
}

QString OAIDfr112::getRadReachcode() const {
    return m_rad_reachcode;
}
void OAIDfr112::setRadReachcode(const QString &rad_reachcode) {
    m_rad_reachcode = rad_reachcode;
    m_rad_reachcode_isSet = true;
}

bool OAIDfr112::is_rad_reachcode_Set() const{
    return m_rad_reachcode_isSet;
}

bool OAIDfr112::is_rad_reachcode_Valid() const{
    return m_rad_reachcode_isValid;
}

QString OAIDfr112::getReceivingWaters() const {
    return m_receiving_waters;
}
void OAIDfr112::setReceivingWaters(const QString &receiving_waters) {
    m_receiving_waters = receiving_waters;
    m_receiving_waters_isSet = true;
}

bool OAIDfr112::is_receiving_waters_Set() const{
    return m_receiving_waters_isSet;
}

bool OAIDfr112::is_receiving_waters_Valid() const{
    return m_receiving_waters_isValid;
}

QString OAIDfr112::getSourceId() const {
    return m_source_id;
}
void OAIDfr112::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr112::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr112::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr112::getWbd12() const {
    return m_wbd12;
}
void OAIDfr112::setWbd12(const QString &wbd12) {
    m_wbd12 = wbd12;
    m_wbd12_isSet = true;
}

bool OAIDfr112::is_wbd12_Set() const{
    return m_wbd12_isSet;
}

bool OAIDfr112::is_wbd12_Valid() const{
    return m_wbd12_isValid;
}

QString OAIDfr112::getWbd12Name() const {
    return m_wbd12_name;
}
void OAIDfr112::setWbd12Name(const QString &wbd12_name) {
    m_wbd12_name = wbd12_name;
    m_wbd12_name_isSet = true;
}

bool OAIDfr112::is_wbd12_name_Set() const{
    return m_wbd12_name_isSet;
}

bool OAIDfr112::is_wbd12_name_Valid() const{
    return m_wbd12_name_isValid;
}

bool OAIDfr112::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attains_aquatic_life_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_au_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_cause_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_exceptnl_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_recreation_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_shellfish_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_close_last2yrs_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_close_last_year_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_cso_outfalls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_esa_aquatic_species_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_huc8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_huc8_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impaired_waters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_gnis_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_reachcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_waters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wbd12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wbd12_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr112::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attains_aquatic_life_use_flg_isValid && m_attains_au_category_isValid && m_attains_cause_groups_isValid && m_attains_exceptnl_use_flg_isValid && m_attains_recreation_use_flg_isValid && m_attains_shellfish_use_flg_isValid && m_beach_close_last2yrs_flg_isValid && m_beach_close_last_year_flg_isValid && m_css_isValid && m_cwp_cso_outfalls_isValid && m_epa_system_isValid && m_esa_aquatic_species_flg_isValid && m_huc8_isValid && m_huc8_name_isValid && m_impaired_waters_isValid && m_rad_gnis_name_isValid && m_rad_reachcode_isValid && m_receiving_waters_isValid && m_source_id_isValid && m_wbd12_isValid && m_wbd12_name_isValid && true;
}

} // namespace OpenAPI
