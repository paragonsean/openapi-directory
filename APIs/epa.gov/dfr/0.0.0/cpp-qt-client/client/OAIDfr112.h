/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDfr112.h
 *
 * Sources Object
 */

#ifndef OAIDfr112_H
#define OAIDfr112_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDfr112 : public OAIObject {
public:
    OAIDfr112();
    OAIDfr112(QString json);
    ~OAIDfr112() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttainsAquaticLifeUseFlg() const;
    void setAttainsAquaticLifeUseFlg(const QString &attains_aquatic_life_use_flg);
    bool is_attains_aquatic_life_use_flg_Set() const;
    bool is_attains_aquatic_life_use_flg_Valid() const;

    QString getAttainsAuCategory() const;
    void setAttainsAuCategory(const QString &attains_au_category);
    bool is_attains_au_category_Set() const;
    bool is_attains_au_category_Valid() const;

    QString getAttainsCauseGroups() const;
    void setAttainsCauseGroups(const QString &attains_cause_groups);
    bool is_attains_cause_groups_Set() const;
    bool is_attains_cause_groups_Valid() const;

    QString getAttainsExceptnlUseFlg() const;
    void setAttainsExceptnlUseFlg(const QString &attains_exceptnl_use_flg);
    bool is_attains_exceptnl_use_flg_Set() const;
    bool is_attains_exceptnl_use_flg_Valid() const;

    QString getAttainsRecreationUseFlg() const;
    void setAttainsRecreationUseFlg(const QString &attains_recreation_use_flg);
    bool is_attains_recreation_use_flg_Set() const;
    bool is_attains_recreation_use_flg_Valid() const;

    QString getAttainsShellfishUseFlg() const;
    void setAttainsShellfishUseFlg(const QString &attains_shellfish_use_flg);
    bool is_attains_shellfish_use_flg_Set() const;
    bool is_attains_shellfish_use_flg_Valid() const;

    QString getBeachCloseLast2yrsFlg() const;
    void setBeachCloseLast2yrsFlg(const QString &beach_close_last2yrs_flg);
    bool is_beach_close_last2yrs_flg_Set() const;
    bool is_beach_close_last2yrs_flg_Valid() const;

    QString getBeachCloseLastYearFlg() const;
    void setBeachCloseLastYearFlg(const QString &beach_close_last_year_flg);
    bool is_beach_close_last_year_flg_Set() const;
    bool is_beach_close_last_year_flg_Valid() const;

    QString getCss() const;
    void setCss(const QString &css);
    bool is_css_Set() const;
    bool is_css_Valid() const;

    QString getCwpCsoOutfalls() const;
    void setCwpCsoOutfalls(const QString &cwp_cso_outfalls);
    bool is_cwp_cso_outfalls_Set() const;
    bool is_cwp_cso_outfalls_Valid() const;

    QString getEpaSystem() const;
    void setEpaSystem(const QString &epa_system);
    bool is_epa_system_Set() const;
    bool is_epa_system_Valid() const;

    QString getEsaAquaticSpeciesFlg() const;
    void setEsaAquaticSpeciesFlg(const QString &esa_aquatic_species_flg);
    bool is_esa_aquatic_species_flg_Set() const;
    bool is_esa_aquatic_species_flg_Valid() const;

    QString getHuc8() const;
    void setHuc8(const QString &huc8);
    bool is_huc8_Set() const;
    bool is_huc8_Valid() const;

    QString getHuc8Name() const;
    void setHuc8Name(const QString &huc8_name);
    bool is_huc8_name_Set() const;
    bool is_huc8_name_Valid() const;

    QString getImpairedWaters() const;
    void setImpairedWaters(const QString &impaired_waters);
    bool is_impaired_waters_Set() const;
    bool is_impaired_waters_Valid() const;

    QString getRadGnisName() const;
    void setRadGnisName(const QString &rad_gnis_name);
    bool is_rad_gnis_name_Set() const;
    bool is_rad_gnis_name_Valid() const;

    QString getRadReachcode() const;
    void setRadReachcode(const QString &rad_reachcode);
    bool is_rad_reachcode_Set() const;
    bool is_rad_reachcode_Valid() const;

    QString getReceivingWaters() const;
    void setReceivingWaters(const QString &receiving_waters);
    bool is_receiving_waters_Set() const;
    bool is_receiving_waters_Valid() const;

    QString getSourceId() const;
    void setSourceId(const QString &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getWbd12() const;
    void setWbd12(const QString &wbd12);
    bool is_wbd12_Set() const;
    bool is_wbd12_Valid() const;

    QString getWbd12Name() const;
    void setWbd12Name(const QString &wbd12_name);
    bool is_wbd12_name_Set() const;
    bool is_wbd12_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attains_aquatic_life_use_flg;
    bool m_attains_aquatic_life_use_flg_isSet;
    bool m_attains_aquatic_life_use_flg_isValid;

    QString m_attains_au_category;
    bool m_attains_au_category_isSet;
    bool m_attains_au_category_isValid;

    QString m_attains_cause_groups;
    bool m_attains_cause_groups_isSet;
    bool m_attains_cause_groups_isValid;

    QString m_attains_exceptnl_use_flg;
    bool m_attains_exceptnl_use_flg_isSet;
    bool m_attains_exceptnl_use_flg_isValid;

    QString m_attains_recreation_use_flg;
    bool m_attains_recreation_use_flg_isSet;
    bool m_attains_recreation_use_flg_isValid;

    QString m_attains_shellfish_use_flg;
    bool m_attains_shellfish_use_flg_isSet;
    bool m_attains_shellfish_use_flg_isValid;

    QString m_beach_close_last2yrs_flg;
    bool m_beach_close_last2yrs_flg_isSet;
    bool m_beach_close_last2yrs_flg_isValid;

    QString m_beach_close_last_year_flg;
    bool m_beach_close_last_year_flg_isSet;
    bool m_beach_close_last_year_flg_isValid;

    QString m_css;
    bool m_css_isSet;
    bool m_css_isValid;

    QString m_cwp_cso_outfalls;
    bool m_cwp_cso_outfalls_isSet;
    bool m_cwp_cso_outfalls_isValid;

    QString m_epa_system;
    bool m_epa_system_isSet;
    bool m_epa_system_isValid;

    QString m_esa_aquatic_species_flg;
    bool m_esa_aquatic_species_flg_isSet;
    bool m_esa_aquatic_species_flg_isValid;

    QString m_huc8;
    bool m_huc8_isSet;
    bool m_huc8_isValid;

    QString m_huc8_name;
    bool m_huc8_name_isSet;
    bool m_huc8_name_isValid;

    QString m_impaired_waters;
    bool m_impaired_waters_isSet;
    bool m_impaired_waters_isValid;

    QString m_rad_gnis_name;
    bool m_rad_gnis_name_isSet;
    bool m_rad_gnis_name_isValid;

    QString m_rad_reachcode;
    bool m_rad_reachcode_isSet;
    bool m_rad_reachcode_isValid;

    QString m_receiving_waters;
    bool m_receiving_waters_isSet;
    bool m_receiving_waters_isValid;

    QString m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_wbd12;
    bool m_wbd12_isSet;
    bool m_wbd12_isValid;

    QString m_wbd12_name;
    bool m_wbd12_name_isSet;
    bool m_wbd12_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDfr112)

#endif // OAIDfr112_H
