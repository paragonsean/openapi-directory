/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr020.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr020::OAIDfr020(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr020::OAIDfr020() {
    this->initializeModel();
}

OAIDfr020::~OAIDfr020() {}

void OAIDfr020::initializeModel() {

    m_afs_programs_isSet = false;
    m_afs_programs_isValid = false;

    m_frv_programs_pollutants_isSet = false;
    m_frv_programs_pollutants_isValid = false;

    m_hpv_history_isSet = false;
    m_hpv_history_isValid = false;

    m_hpv_programs_pollutants_isSet = false;
    m_hpv_programs_pollutants_isValid = false;

    m_permit_history_isSet = false;
    m_permit_history_isValid = false;
}

void OAIDfr020::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr020::fromJsonObject(QJsonObject json) {

    m_afs_programs_isValid = ::OpenAPI::fromJsonValue(m_afs_programs, json[QString("AFSPrograms")]);
    m_afs_programs_isSet = !json[QString("AFSPrograms")].isNull() && m_afs_programs_isValid;

    m_frv_programs_pollutants_isValid = ::OpenAPI::fromJsonValue(m_frv_programs_pollutants, json[QString("FRVProgramsPollutants")]);
    m_frv_programs_pollutants_isSet = !json[QString("FRVProgramsPollutants")].isNull() && m_frv_programs_pollutants_isValid;

    m_hpv_history_isValid = ::OpenAPI::fromJsonValue(m_hpv_history, json[QString("HPVHistory")]);
    m_hpv_history_isSet = !json[QString("HPVHistory")].isNull() && m_hpv_history_isValid;

    m_hpv_programs_pollutants_isValid = ::OpenAPI::fromJsonValue(m_hpv_programs_pollutants, json[QString("HPVProgramsPollutants")]);
    m_hpv_programs_pollutants_isSet = !json[QString("HPVProgramsPollutants")].isNull() && m_hpv_programs_pollutants_isValid;

    m_permit_history_isValid = ::OpenAPI::fromJsonValue(m_permit_history, json[QString("PermitHistory")]);
    m_permit_history_isSet = !json[QString("PermitHistory")].isNull() && m_permit_history_isValid;
}

QString OAIDfr020::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr020::asJsonObject() const {
    QJsonObject obj;
    if (m_afs_programs.size() > 0) {
        obj.insert(QString("AFSPrograms"), ::OpenAPI::toJsonValue(m_afs_programs));
    }
    if (m_frv_programs_pollutants.size() > 0) {
        obj.insert(QString("FRVProgramsPollutants"), ::OpenAPI::toJsonValue(m_frv_programs_pollutants));
    }
    if (m_hpv_history.isSet()) {
        obj.insert(QString("HPVHistory"), ::OpenAPI::toJsonValue(m_hpv_history));
    }
    if (m_hpv_programs_pollutants.size() > 0) {
        obj.insert(QString("HPVProgramsPollutants"), ::OpenAPI::toJsonValue(m_hpv_programs_pollutants));
    }
    if (m_permit_history.isSet()) {
        obj.insert(QString("PermitHistory"), ::OpenAPI::toJsonValue(m_permit_history));
    }
    return obj;
}

QList<OAIDfr021> OAIDfr020::getAfsPrograms() const {
    return m_afs_programs;
}
void OAIDfr020::setAfsPrograms(const QList<OAIDfr021> &afs_programs) {
    m_afs_programs = afs_programs;
    m_afs_programs_isSet = true;
}

bool OAIDfr020::is_afs_programs_Set() const{
    return m_afs_programs_isSet;
}

bool OAIDfr020::is_afs_programs_Valid() const{
    return m_afs_programs_isValid;
}

QList<OAIDfr022> OAIDfr020::getFrvProgramsPollutants() const {
    return m_frv_programs_pollutants;
}
void OAIDfr020::setFrvProgramsPollutants(const QList<OAIDfr022> &frv_programs_pollutants) {
    m_frv_programs_pollutants = frv_programs_pollutants;
    m_frv_programs_pollutants_isSet = true;
}

bool OAIDfr020::is_frv_programs_pollutants_Set() const{
    return m_frv_programs_pollutants_isSet;
}

bool OAIDfr020::is_frv_programs_pollutants_Valid() const{
    return m_frv_programs_pollutants_isValid;
}

OAIDfr020__HPVHistory OAIDfr020::getHpvHistory() const {
    return m_hpv_history;
}
void OAIDfr020::setHpvHistory(const OAIDfr020__HPVHistory &hpv_history) {
    m_hpv_history = hpv_history;
    m_hpv_history_isSet = true;
}

bool OAIDfr020::is_hpv_history_Set() const{
    return m_hpv_history_isSet;
}

bool OAIDfr020::is_hpv_history_Valid() const{
    return m_hpv_history_isValid;
}

QList<OAIDfr023> OAIDfr020::getHpvProgramsPollutants() const {
    return m_hpv_programs_pollutants;
}
void OAIDfr020::setHpvProgramsPollutants(const QList<OAIDfr023> &hpv_programs_pollutants) {
    m_hpv_programs_pollutants = hpv_programs_pollutants;
    m_hpv_programs_pollutants_isSet = true;
}

bool OAIDfr020::is_hpv_programs_pollutants_Set() const{
    return m_hpv_programs_pollutants_isSet;
}

bool OAIDfr020::is_hpv_programs_pollutants_Valid() const{
    return m_hpv_programs_pollutants_isValid;
}

OAIDfr020__PermitHistory OAIDfr020::getPermitHistory() const {
    return m_permit_history;
}
void OAIDfr020::setPermitHistory(const OAIDfr020__PermitHistory &permit_history) {
    m_permit_history = permit_history;
    m_permit_history_isSet = true;
}

bool OAIDfr020::is_permit_history_Set() const{
    return m_permit_history_isSet;
}

bool OAIDfr020::is_permit_history_Valid() const{
    return m_permit_history_isValid;
}

bool OAIDfr020::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_afs_programs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frv_programs_pollutants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpv_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpv_programs_pollutants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permit_history.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr020::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_afs_programs_isValid && m_frv_programs_pollutants_isValid && m_hpv_history_isValid && m_hpv_programs_pollutants_isValid && m_permit_history_isValid && true;
}

} // namespace OpenAPI
