/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDfr094.h
 *
 * Spatial Metadata Object
 */

#ifndef OAIDfr094_H
#define OAIDfr094_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDfr094 : public OAIObject {
public:
    OAIDfr094();
    OAIDfr094(QString json);
    ~OAIDfr094() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCalculatedAccuracy() const;
    void setCalculatedAccuracy(const QString &calculated_accuracy);
    bool is_calculated_accuracy_Set() const;
    bool is_calculated_accuracy_Valid() const;

    QString getCollectionMethod() const;
    void setCollectionMethod(const QString &collection_method);
    bool is_collection_method_Set() const;
    bool is_collection_method_Valid() const;

    QString getCoordinateSourceSystem() const;
    void setCoordinateSourceSystem(const QString &coordinate_source_system);
    bool is_coordinate_source_system_Set() const;
    bool is_coordinate_source_system_Valid() const;

    QString getCoordinateSourceSystemId() const;
    void setCoordinateSourceSystemId(const QString &coordinate_source_system_id);
    bool is_coordinate_source_system_id_Set() const;
    bool is_coordinate_source_system_id_Valid() const;

    QString getLatitude83() const;
    void setLatitude83(const QString &latitude83);
    bool is_latitude83_Set() const;
    bool is_latitude83_Valid() const;

    QString getLongitude83() const;
    void setLongitude83(const QString &longitude83);
    bool is_longitude83_Set() const;
    bool is_longitude83_Valid() const;

    QString getReferencePoint() const;
    void setReferencePoint(const QString &reference_point);
    bool is_reference_point_Set() const;
    bool is_reference_point_Valid() const;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_calculated_accuracy;
    bool m_calculated_accuracy_isSet;
    bool m_calculated_accuracy_isValid;

    QString m_collection_method;
    bool m_collection_method_isSet;
    bool m_collection_method_isValid;

    QString m_coordinate_source_system;
    bool m_coordinate_source_system_isSet;
    bool m_coordinate_source_system_isValid;

    QString m_coordinate_source_system_id;
    bool m_coordinate_source_system_id_isSet;
    bool m_coordinate_source_system_id_isValid;

    QString m_latitude83;
    bool m_latitude83_isSet;
    bool m_latitude83_isValid;

    QString m_longitude83;
    bool m_longitude83_isSet;
    bool m_longitude83_isValid;

    QString m_reference_point;
    bool m_reference_point_isSet;
    bool m_reference_point_isValid;

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDfr094)

#endif // OAIDfr094_H
