/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_RegistryIDs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_RegistryIDs::OAIDfr018_RegistryIDs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_RegistryIDs::OAIDfr018_RegistryIDs() {
    this->initializeModel();
}

OAIDfr018_RegistryIDs::~OAIDfr018_RegistryIDs() {}

void OAIDfr018_RegistryIDs::initializeModel() {

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_facility_city_isSet = false;
    m_facility_city_isValid = false;

    m_facility_county_isSet = false;
    m_facility_county_isValid = false;

    m_facility_name_isSet = false;
    m_facility_name_isValid = false;

    m_facility_state_isSet = false;
    m_facility_state_isValid = false;

    m_facility_street_isSet = false;
    m_facility_street_isValid = false;

    m_facility_zip_isSet = false;
    m_facility_zip_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;
}

void OAIDfr018_RegistryIDs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_RegistryIDs::fromJsonObject(QJsonObject json) {

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_facility_city_isValid = ::OpenAPI::fromJsonValue(m_facility_city, json[QString("FacilityCity")]);
    m_facility_city_isSet = !json[QString("FacilityCity")].isNull() && m_facility_city_isValid;

    m_facility_county_isValid = ::OpenAPI::fromJsonValue(m_facility_county, json[QString("FacilityCounty")]);
    m_facility_county_isSet = !json[QString("FacilityCounty")].isNull() && m_facility_county_isValid;

    m_facility_name_isValid = ::OpenAPI::fromJsonValue(m_facility_name, json[QString("FacilityName")]);
    m_facility_name_isSet = !json[QString("FacilityName")].isNull() && m_facility_name_isValid;

    m_facility_state_isValid = ::OpenAPI::fromJsonValue(m_facility_state, json[QString("FacilityState")]);
    m_facility_state_isSet = !json[QString("FacilityState")].isNull() && m_facility_state_isValid;

    m_facility_street_isValid = ::OpenAPI::fromJsonValue(m_facility_street, json[QString("FacilityStreet")]);
    m_facility_street_isSet = !json[QString("FacilityStreet")].isNull() && m_facility_street_isValid;

    m_facility_zip_isValid = ::OpenAPI::fromJsonValue(m_facility_zip, json[QString("FacilityZip")]);
    m_facility_zip_isSet = !json[QString("FacilityZip")].isNull() && m_facility_zip_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryId")]);
    m_registry_id_isSet = !json[QString("RegistryId")].isNull() && m_registry_id_isValid;
}

QString OAIDfr018_RegistryIDs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_RegistryIDs::asJsonObject() const {
    QJsonObject obj;
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_facility_city_isSet) {
        obj.insert(QString("FacilityCity"), ::OpenAPI::toJsonValue(m_facility_city));
    }
    if (m_facility_county_isSet) {
        obj.insert(QString("FacilityCounty"), ::OpenAPI::toJsonValue(m_facility_county));
    }
    if (m_facility_name_isSet) {
        obj.insert(QString("FacilityName"), ::OpenAPI::toJsonValue(m_facility_name));
    }
    if (m_facility_state_isSet) {
        obj.insert(QString("FacilityState"), ::OpenAPI::toJsonValue(m_facility_state));
    }
    if (m_facility_street_isSet) {
        obj.insert(QString("FacilityStreet"), ::OpenAPI::toJsonValue(m_facility_street));
    }
    if (m_facility_zip_isSet) {
        obj.insert(QString("FacilityZip"), ::OpenAPI::toJsonValue(m_facility_zip));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    return obj;
}

QString OAIDfr018_RegistryIDs::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr018_RegistryIDs::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr018_RegistryIDs::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityCity() const {
    return m_facility_city;
}
void OAIDfr018_RegistryIDs::setFacilityCity(const QString &facility_city) {
    m_facility_city = facility_city;
    m_facility_city_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_city_Set() const{
    return m_facility_city_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_city_Valid() const{
    return m_facility_city_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityCounty() const {
    return m_facility_county;
}
void OAIDfr018_RegistryIDs::setFacilityCounty(const QString &facility_county) {
    m_facility_county = facility_county;
    m_facility_county_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_county_Set() const{
    return m_facility_county_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_county_Valid() const{
    return m_facility_county_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityName() const {
    return m_facility_name;
}
void OAIDfr018_RegistryIDs::setFacilityName(const QString &facility_name) {
    m_facility_name = facility_name;
    m_facility_name_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_name_Set() const{
    return m_facility_name_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_name_Valid() const{
    return m_facility_name_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityState() const {
    return m_facility_state;
}
void OAIDfr018_RegistryIDs::setFacilityState(const QString &facility_state) {
    m_facility_state = facility_state;
    m_facility_state_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_state_Set() const{
    return m_facility_state_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_state_Valid() const{
    return m_facility_state_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityStreet() const {
    return m_facility_street;
}
void OAIDfr018_RegistryIDs::setFacilityStreet(const QString &facility_street) {
    m_facility_street = facility_street;
    m_facility_street_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_street_Set() const{
    return m_facility_street_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_street_Valid() const{
    return m_facility_street_isValid;
}

QString OAIDfr018_RegistryIDs::getFacilityZip() const {
    return m_facility_zip;
}
void OAIDfr018_RegistryIDs::setFacilityZip(const QString &facility_zip) {
    m_facility_zip = facility_zip;
    m_facility_zip_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_facility_zip_Set() const{
    return m_facility_zip_isSet;
}

bool OAIDfr018_RegistryIDs::is_facility_zip_Valid() const{
    return m_facility_zip_isValid;
}

QString OAIDfr018_RegistryIDs::getRegistryId() const {
    return m_registry_id;
}
void OAIDfr018_RegistryIDs::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIDfr018_RegistryIDs::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIDfr018_RegistryIDs::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

bool OAIDfr018_RegistryIDs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_RegistryIDs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
