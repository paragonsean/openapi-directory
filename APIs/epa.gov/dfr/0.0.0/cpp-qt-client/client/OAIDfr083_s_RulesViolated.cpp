/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr083_s_RulesViolated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr083_s_RulesViolated::OAIDfr083_s_RulesViolated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr083_s_RulesViolated::OAIDfr083_s_RulesViolated() {
    this->initializeModel();
}

OAIDfr083_s_RulesViolated::~OAIDfr083_s_RulesViolated() {}

void OAIDfr083_s_RulesViolated::initializeModel() {

    m_drinking_water_rule_isSet = false;
    m_drinking_water_rule_isValid = false;

    m_qtr10_status_isSet = false;
    m_qtr10_status_isValid = false;

    m_qtr11_status_isSet = false;
    m_qtr11_status_isValid = false;

    m_qtr12_status_isSet = false;
    m_qtr12_status_isValid = false;

    m_qtr13_status_isSet = false;
    m_qtr13_status_isValid = false;

    m_qtr1_status_isSet = false;
    m_qtr1_status_isValid = false;

    m_qtr2_status_isSet = false;
    m_qtr2_status_isValid = false;

    m_qtr3_status_isSet = false;
    m_qtr3_status_isValid = false;

    m_qtr4_status_isSet = false;
    m_qtr4_status_isValid = false;

    m_qtr5_status_isSet = false;
    m_qtr5_status_isValid = false;

    m_qtr6_status_isSet = false;
    m_qtr6_status_isValid = false;

    m_qtr7_status_isSet = false;
    m_qtr7_status_isValid = false;

    m_qtr8_status_isSet = false;
    m_qtr8_status_isValid = false;

    m_qtr9_status_isSet = false;
    m_qtr9_status_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;
}

void OAIDfr083_s_RulesViolated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr083_s_RulesViolated::fromJsonObject(QJsonObject json) {

    m_drinking_water_rule_isValid = ::OpenAPI::fromJsonValue(m_drinking_water_rule, json[QString("DrinkingWaterRule")]);
    m_drinking_water_rule_isSet = !json[QString("DrinkingWaterRule")].isNull() && m_drinking_water_rule_isValid;

    m_qtr10_status_isValid = ::OpenAPI::fromJsonValue(m_qtr10_status, json[QString("Qtr10Status")]);
    m_qtr10_status_isSet = !json[QString("Qtr10Status")].isNull() && m_qtr10_status_isValid;

    m_qtr11_status_isValid = ::OpenAPI::fromJsonValue(m_qtr11_status, json[QString("Qtr11Status")]);
    m_qtr11_status_isSet = !json[QString("Qtr11Status")].isNull() && m_qtr11_status_isValid;

    m_qtr12_status_isValid = ::OpenAPI::fromJsonValue(m_qtr12_status, json[QString("Qtr12Status")]);
    m_qtr12_status_isSet = !json[QString("Qtr12Status")].isNull() && m_qtr12_status_isValid;

    m_qtr13_status_isValid = ::OpenAPI::fromJsonValue(m_qtr13_status, json[QString("Qtr13Status")]);
    m_qtr13_status_isSet = !json[QString("Qtr13Status")].isNull() && m_qtr13_status_isValid;

    m_qtr1_status_isValid = ::OpenAPI::fromJsonValue(m_qtr1_status, json[QString("Qtr1Status")]);
    m_qtr1_status_isSet = !json[QString("Qtr1Status")].isNull() && m_qtr1_status_isValid;

    m_qtr2_status_isValid = ::OpenAPI::fromJsonValue(m_qtr2_status, json[QString("Qtr2Status")]);
    m_qtr2_status_isSet = !json[QString("Qtr2Status")].isNull() && m_qtr2_status_isValid;

    m_qtr3_status_isValid = ::OpenAPI::fromJsonValue(m_qtr3_status, json[QString("Qtr3Status")]);
    m_qtr3_status_isSet = !json[QString("Qtr3Status")].isNull() && m_qtr3_status_isValid;

    m_qtr4_status_isValid = ::OpenAPI::fromJsonValue(m_qtr4_status, json[QString("Qtr4Status")]);
    m_qtr4_status_isSet = !json[QString("Qtr4Status")].isNull() && m_qtr4_status_isValid;

    m_qtr5_status_isValid = ::OpenAPI::fromJsonValue(m_qtr5_status, json[QString("Qtr5Status")]);
    m_qtr5_status_isSet = !json[QString("Qtr5Status")].isNull() && m_qtr5_status_isValid;

    m_qtr6_status_isValid = ::OpenAPI::fromJsonValue(m_qtr6_status, json[QString("Qtr6Status")]);
    m_qtr6_status_isSet = !json[QString("Qtr6Status")].isNull() && m_qtr6_status_isValid;

    m_qtr7_status_isValid = ::OpenAPI::fromJsonValue(m_qtr7_status, json[QString("Qtr7Status")]);
    m_qtr7_status_isSet = !json[QString("Qtr7Status")].isNull() && m_qtr7_status_isValid;

    m_qtr8_status_isValid = ::OpenAPI::fromJsonValue(m_qtr8_status, json[QString("Qtr8Status")]);
    m_qtr8_status_isSet = !json[QString("Qtr8Status")].isNull() && m_qtr8_status_isValid;

    m_qtr9_status_isValid = ::OpenAPI::fromJsonValue(m_qtr9_status, json[QString("Qtr9Status")]);
    m_qtr9_status_isSet = !json[QString("Qtr9Status")].isNull() && m_qtr9_status_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;
}

QString OAIDfr083_s_RulesViolated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr083_s_RulesViolated::asJsonObject() const {
    QJsonObject obj;
    if (m_drinking_water_rule_isSet) {
        obj.insert(QString("DrinkingWaterRule"), ::OpenAPI::toJsonValue(m_drinking_water_rule));
    }
    if (m_qtr10_status_isSet) {
        obj.insert(QString("Qtr10Status"), ::OpenAPI::toJsonValue(m_qtr10_status));
    }
    if (m_qtr11_status_isSet) {
        obj.insert(QString("Qtr11Status"), ::OpenAPI::toJsonValue(m_qtr11_status));
    }
    if (m_qtr12_status_isSet) {
        obj.insert(QString("Qtr12Status"), ::OpenAPI::toJsonValue(m_qtr12_status));
    }
    if (m_qtr13_status_isSet) {
        obj.insert(QString("Qtr13Status"), ::OpenAPI::toJsonValue(m_qtr13_status));
    }
    if (m_qtr1_status_isSet) {
        obj.insert(QString("Qtr1Status"), ::OpenAPI::toJsonValue(m_qtr1_status));
    }
    if (m_qtr2_status_isSet) {
        obj.insert(QString("Qtr2Status"), ::OpenAPI::toJsonValue(m_qtr2_status));
    }
    if (m_qtr3_status_isSet) {
        obj.insert(QString("Qtr3Status"), ::OpenAPI::toJsonValue(m_qtr3_status));
    }
    if (m_qtr4_status_isSet) {
        obj.insert(QString("Qtr4Status"), ::OpenAPI::toJsonValue(m_qtr4_status));
    }
    if (m_qtr5_status_isSet) {
        obj.insert(QString("Qtr5Status"), ::OpenAPI::toJsonValue(m_qtr5_status));
    }
    if (m_qtr6_status_isSet) {
        obj.insert(QString("Qtr6Status"), ::OpenAPI::toJsonValue(m_qtr6_status));
    }
    if (m_qtr7_status_isSet) {
        obj.insert(QString("Qtr7Status"), ::OpenAPI::toJsonValue(m_qtr7_status));
    }
    if (m_qtr8_status_isSet) {
        obj.insert(QString("Qtr8Status"), ::OpenAPI::toJsonValue(m_qtr8_status));
    }
    if (m_qtr9_status_isSet) {
        obj.insert(QString("Qtr9Status"), ::OpenAPI::toJsonValue(m_qtr9_status));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    return obj;
}

QString OAIDfr083_s_RulesViolated::getDrinkingWaterRule() const {
    return m_drinking_water_rule;
}
void OAIDfr083_s_RulesViolated::setDrinkingWaterRule(const QString &drinking_water_rule) {
    m_drinking_water_rule = drinking_water_rule;
    m_drinking_water_rule_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_drinking_water_rule_Set() const{
    return m_drinking_water_rule_isSet;
}

bool OAIDfr083_s_RulesViolated::is_drinking_water_rule_Valid() const{
    return m_drinking_water_rule_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr10Status() const {
    return m_qtr10_status;
}
void OAIDfr083_s_RulesViolated::setQtr10Status(const QString &qtr10_status) {
    m_qtr10_status = qtr10_status;
    m_qtr10_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr10_status_Set() const{
    return m_qtr10_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr10_status_Valid() const{
    return m_qtr10_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr11Status() const {
    return m_qtr11_status;
}
void OAIDfr083_s_RulesViolated::setQtr11Status(const QString &qtr11_status) {
    m_qtr11_status = qtr11_status;
    m_qtr11_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr11_status_Set() const{
    return m_qtr11_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr11_status_Valid() const{
    return m_qtr11_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr12Status() const {
    return m_qtr12_status;
}
void OAIDfr083_s_RulesViolated::setQtr12Status(const QString &qtr12_status) {
    m_qtr12_status = qtr12_status;
    m_qtr12_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr12_status_Set() const{
    return m_qtr12_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr12_status_Valid() const{
    return m_qtr12_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr13Status() const {
    return m_qtr13_status;
}
void OAIDfr083_s_RulesViolated::setQtr13Status(const QString &qtr13_status) {
    m_qtr13_status = qtr13_status;
    m_qtr13_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr13_status_Set() const{
    return m_qtr13_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr13_status_Valid() const{
    return m_qtr13_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr1Status() const {
    return m_qtr1_status;
}
void OAIDfr083_s_RulesViolated::setQtr1Status(const QString &qtr1_status) {
    m_qtr1_status = qtr1_status;
    m_qtr1_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr1_status_Set() const{
    return m_qtr1_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr1_status_Valid() const{
    return m_qtr1_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr2Status() const {
    return m_qtr2_status;
}
void OAIDfr083_s_RulesViolated::setQtr2Status(const QString &qtr2_status) {
    m_qtr2_status = qtr2_status;
    m_qtr2_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr2_status_Set() const{
    return m_qtr2_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr2_status_Valid() const{
    return m_qtr2_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr3Status() const {
    return m_qtr3_status;
}
void OAIDfr083_s_RulesViolated::setQtr3Status(const QString &qtr3_status) {
    m_qtr3_status = qtr3_status;
    m_qtr3_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr3_status_Set() const{
    return m_qtr3_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr3_status_Valid() const{
    return m_qtr3_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr4Status() const {
    return m_qtr4_status;
}
void OAIDfr083_s_RulesViolated::setQtr4Status(const QString &qtr4_status) {
    m_qtr4_status = qtr4_status;
    m_qtr4_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr4_status_Set() const{
    return m_qtr4_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr4_status_Valid() const{
    return m_qtr4_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr5Status() const {
    return m_qtr5_status;
}
void OAIDfr083_s_RulesViolated::setQtr5Status(const QString &qtr5_status) {
    m_qtr5_status = qtr5_status;
    m_qtr5_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr5_status_Set() const{
    return m_qtr5_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr5_status_Valid() const{
    return m_qtr5_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr6Status() const {
    return m_qtr6_status;
}
void OAIDfr083_s_RulesViolated::setQtr6Status(const QString &qtr6_status) {
    m_qtr6_status = qtr6_status;
    m_qtr6_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr6_status_Set() const{
    return m_qtr6_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr6_status_Valid() const{
    return m_qtr6_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr7Status() const {
    return m_qtr7_status;
}
void OAIDfr083_s_RulesViolated::setQtr7Status(const QString &qtr7_status) {
    m_qtr7_status = qtr7_status;
    m_qtr7_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr7_status_Set() const{
    return m_qtr7_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr7_status_Valid() const{
    return m_qtr7_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr8Status() const {
    return m_qtr8_status;
}
void OAIDfr083_s_RulesViolated::setQtr8Status(const QString &qtr8_status) {
    m_qtr8_status = qtr8_status;
    m_qtr8_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr8_status_Set() const{
    return m_qtr8_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr8_status_Valid() const{
    return m_qtr8_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getQtr9Status() const {
    return m_qtr9_status;
}
void OAIDfr083_s_RulesViolated::setQtr9Status(const QString &qtr9_status) {
    m_qtr9_status = qtr9_status;
    m_qtr9_status_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_qtr9_status_Set() const{
    return m_qtr9_status_isSet;
}

bool OAIDfr083_s_RulesViolated::is_qtr9_status_Valid() const{
    return m_qtr9_status_isValid;
}

QString OAIDfr083_s_RulesViolated::getSourceId() const {
    return m_source_id;
}
void OAIDfr083_s_RulesViolated::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr083_s_RulesViolated::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr083_s_RulesViolated::is_source_id_Valid() const{
    return m_source_id_isValid;
}

bool OAIDfr083_s_RulesViolated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drinking_water_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr10_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr11_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr12_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr13_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr1_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr2_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr3_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr4_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr5_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr6_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr7_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr8_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtr9_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr083_s_RulesViolated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_drinking_water_rule_isValid && m_qtr10_status_isValid && m_qtr11_status_isValid && m_qtr12_status_isValid && m_qtr13_status_isValid && m_qtr1_status_isValid && m_qtr2_status_isValid && m_qtr3_status_isValid && m_qtr4_status_isValid && m_qtr5_status_isValid && m_qtr6_status_isValid && m_qtr7_status_isValid && m_qtr8_status_isValid && m_qtr9_status_isValid && m_source_id_isValid && true;
}

} // namespace OpenAPI
