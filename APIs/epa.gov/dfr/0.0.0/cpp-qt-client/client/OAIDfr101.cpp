/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr101.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr101::OAIDfr101(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr101::OAIDfr101() {
    this->initializeModel();
}

OAIDfr101::~OAIDfr101() {}

void OAIDfr101::initializeModel() {

    m_off_site_transfers_potws_isSet = false;
    m_off_site_transfers_potws_isValid = false;

    m_releases_to_land_isSet = false;
    m_releases_to_land_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_surface_water_discharges_isSet = false;
    m_surface_water_discharges_isValid = false;

    m_total_air_emissions_isSet = false;
    m_total_air_emissions_isValid = false;

    m_total_off_site_releases_isSet = false;
    m_total_off_site_releases_isValid = false;

    m_total_on_site_releases_isSet = false;
    m_total_on_site_releases_isValid = false;

    m_total_releases_transfers_isSet = false;
    m_total_releases_transfers_isValid = false;

    m_underground_injections_isSet = false;
    m_underground_injections_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIDfr101::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr101::fromJsonObject(QJsonObject json) {

    m_off_site_transfers_potws_isValid = ::OpenAPI::fromJsonValue(m_off_site_transfers_potws, json[QString("OffSiteTransfersPOTWS")]);
    m_off_site_transfers_potws_isSet = !json[QString("OffSiteTransfersPOTWS")].isNull() && m_off_site_transfers_potws_isValid;

    m_releases_to_land_isValid = ::OpenAPI::fromJsonValue(m_releases_to_land, json[QString("ReleasesToLand")]);
    m_releases_to_land_isSet = !json[QString("ReleasesToLand")].isNull() && m_releases_to_land_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_surface_water_discharges_isValid = ::OpenAPI::fromJsonValue(m_surface_water_discharges, json[QString("SurfaceWaterDischarges")]);
    m_surface_water_discharges_isSet = !json[QString("SurfaceWaterDischarges")].isNull() && m_surface_water_discharges_isValid;

    m_total_air_emissions_isValid = ::OpenAPI::fromJsonValue(m_total_air_emissions, json[QString("TotalAirEmissions")]);
    m_total_air_emissions_isSet = !json[QString("TotalAirEmissions")].isNull() && m_total_air_emissions_isValid;

    m_total_off_site_releases_isValid = ::OpenAPI::fromJsonValue(m_total_off_site_releases, json[QString("TotalOffSiteReleases")]);
    m_total_off_site_releases_isSet = !json[QString("TotalOffSiteReleases")].isNull() && m_total_off_site_releases_isValid;

    m_total_on_site_releases_isValid = ::OpenAPI::fromJsonValue(m_total_on_site_releases, json[QString("TotalOnSiteReleases")]);
    m_total_on_site_releases_isSet = !json[QString("TotalOnSiteReleases")].isNull() && m_total_on_site_releases_isValid;

    m_total_releases_transfers_isValid = ::OpenAPI::fromJsonValue(m_total_releases_transfers, json[QString("TotalReleasesTransfers")]);
    m_total_releases_transfers_isSet = !json[QString("TotalReleasesTransfers")].isNull() && m_total_releases_transfers_isValid;

    m_underground_injections_isValid = ::OpenAPI::fromJsonValue(m_underground_injections, json[QString("UndergroundInjections")]);
    m_underground_injections_isSet = !json[QString("UndergroundInjections")].isNull() && m_underground_injections_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;
}

QString OAIDfr101::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr101::asJsonObject() const {
    QJsonObject obj;
    if (m_off_site_transfers_potws_isSet) {
        obj.insert(QString("OffSiteTransfersPOTWS"), ::OpenAPI::toJsonValue(m_off_site_transfers_potws));
    }
    if (m_releases_to_land_isSet) {
        obj.insert(QString("ReleasesToLand"), ::OpenAPI::toJsonValue(m_releases_to_land));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_surface_water_discharges_isSet) {
        obj.insert(QString("SurfaceWaterDischarges"), ::OpenAPI::toJsonValue(m_surface_water_discharges));
    }
    if (m_total_air_emissions_isSet) {
        obj.insert(QString("TotalAirEmissions"), ::OpenAPI::toJsonValue(m_total_air_emissions));
    }
    if (m_total_off_site_releases_isSet) {
        obj.insert(QString("TotalOffSiteReleases"), ::OpenAPI::toJsonValue(m_total_off_site_releases));
    }
    if (m_total_on_site_releases_isSet) {
        obj.insert(QString("TotalOnSiteReleases"), ::OpenAPI::toJsonValue(m_total_on_site_releases));
    }
    if (m_total_releases_transfers_isSet) {
        obj.insert(QString("TotalReleasesTransfers"), ::OpenAPI::toJsonValue(m_total_releases_transfers));
    }
    if (m_underground_injections_isSet) {
        obj.insert(QString("UndergroundInjections"), ::OpenAPI::toJsonValue(m_underground_injections));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIDfr101::getOffSiteTransfersPotws() const {
    return m_off_site_transfers_potws;
}
void OAIDfr101::setOffSiteTransfersPotws(const QString &off_site_transfers_potws) {
    m_off_site_transfers_potws = off_site_transfers_potws;
    m_off_site_transfers_potws_isSet = true;
}

bool OAIDfr101::is_off_site_transfers_potws_Set() const{
    return m_off_site_transfers_potws_isSet;
}

bool OAIDfr101::is_off_site_transfers_potws_Valid() const{
    return m_off_site_transfers_potws_isValid;
}

QString OAIDfr101::getReleasesToLand() const {
    return m_releases_to_land;
}
void OAIDfr101::setReleasesToLand(const QString &releases_to_land) {
    m_releases_to_land = releases_to_land;
    m_releases_to_land_isSet = true;
}

bool OAIDfr101::is_releases_to_land_Set() const{
    return m_releases_to_land_isSet;
}

bool OAIDfr101::is_releases_to_land_Valid() const{
    return m_releases_to_land_isValid;
}

QString OAIDfr101::getSourceId() const {
    return m_source_id;
}
void OAIDfr101::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr101::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr101::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr101::getSurfaceWaterDischarges() const {
    return m_surface_water_discharges;
}
void OAIDfr101::setSurfaceWaterDischarges(const QString &surface_water_discharges) {
    m_surface_water_discharges = surface_water_discharges;
    m_surface_water_discharges_isSet = true;
}

bool OAIDfr101::is_surface_water_discharges_Set() const{
    return m_surface_water_discharges_isSet;
}

bool OAIDfr101::is_surface_water_discharges_Valid() const{
    return m_surface_water_discharges_isValid;
}

QString OAIDfr101::getTotalAirEmissions() const {
    return m_total_air_emissions;
}
void OAIDfr101::setTotalAirEmissions(const QString &total_air_emissions) {
    m_total_air_emissions = total_air_emissions;
    m_total_air_emissions_isSet = true;
}

bool OAIDfr101::is_total_air_emissions_Set() const{
    return m_total_air_emissions_isSet;
}

bool OAIDfr101::is_total_air_emissions_Valid() const{
    return m_total_air_emissions_isValid;
}

QString OAIDfr101::getTotalOffSiteReleases() const {
    return m_total_off_site_releases;
}
void OAIDfr101::setTotalOffSiteReleases(const QString &total_off_site_releases) {
    m_total_off_site_releases = total_off_site_releases;
    m_total_off_site_releases_isSet = true;
}

bool OAIDfr101::is_total_off_site_releases_Set() const{
    return m_total_off_site_releases_isSet;
}

bool OAIDfr101::is_total_off_site_releases_Valid() const{
    return m_total_off_site_releases_isValid;
}

QString OAIDfr101::getTotalOnSiteReleases() const {
    return m_total_on_site_releases;
}
void OAIDfr101::setTotalOnSiteReleases(const QString &total_on_site_releases) {
    m_total_on_site_releases = total_on_site_releases;
    m_total_on_site_releases_isSet = true;
}

bool OAIDfr101::is_total_on_site_releases_Set() const{
    return m_total_on_site_releases_isSet;
}

bool OAIDfr101::is_total_on_site_releases_Valid() const{
    return m_total_on_site_releases_isValid;
}

QString OAIDfr101::getTotalReleasesTransfers() const {
    return m_total_releases_transfers;
}
void OAIDfr101::setTotalReleasesTransfers(const QString &total_releases_transfers) {
    m_total_releases_transfers = total_releases_transfers;
    m_total_releases_transfers_isSet = true;
}

bool OAIDfr101::is_total_releases_transfers_Set() const{
    return m_total_releases_transfers_isSet;
}

bool OAIDfr101::is_total_releases_transfers_Valid() const{
    return m_total_releases_transfers_isValid;
}

QString OAIDfr101::getUndergroundInjections() const {
    return m_underground_injections;
}
void OAIDfr101::setUndergroundInjections(const QString &underground_injections) {
    m_underground_injections = underground_injections;
    m_underground_injections_isSet = true;
}

bool OAIDfr101::is_underground_injections_Set() const{
    return m_underground_injections_isSet;
}

bool OAIDfr101::is_underground_injections_Valid() const{
    return m_underground_injections_isValid;
}

QString OAIDfr101::getYear() const {
    return m_year;
}
void OAIDfr101::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIDfr101::is_year_Set() const{
    return m_year_isSet;
}

bool OAIDfr101::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIDfr101::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_off_site_transfers_potws_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases_to_land_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_water_discharges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_air_emissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_off_site_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_on_site_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_releases_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_underground_injections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr101::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_off_site_transfers_potws_isValid && m_releases_to_land_isValid && m_source_id_isValid && m_surface_water_discharges_isValid && m_total_air_emissions_isValid && m_total_off_site_releases_isValid && m_total_on_site_releases_isValid && m_total_releases_transfers_isValid && m_underground_injections_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
