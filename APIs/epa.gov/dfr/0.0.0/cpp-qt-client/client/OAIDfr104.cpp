/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr104.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr104::OAIDfr104(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr104::OAIDfr104() {
    this->initializeModel();
}

OAIDfr104::~OAIDfr104() {}

void OAIDfr104::initializeModel() {

    m_year1_isSet = false;
    m_year1_isValid = false;

    m_year2_isSet = false;
    m_year2_isValid = false;

    m_year3_isSet = false;
    m_year3_isValid = false;

    m_year4_isSet = false;
    m_year4_isValid = false;

    m_year5_isSet = false;
    m_year5_isValid = false;

    m_year6_isSet = false;
    m_year6_isValid = false;

    m_year7_isSet = false;
    m_year7_isValid = false;

    m_year8_isSet = false;
    m_year8_isValid = false;

    m_year9_isSet = false;
    m_year9_isValid = false;
}

void OAIDfr104::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr104::fromJsonObject(QJsonObject json) {

    m_year1_isValid = ::OpenAPI::fromJsonValue(m_year1, json[QString("Year1")]);
    m_year1_isSet = !json[QString("Year1")].isNull() && m_year1_isValid;

    m_year2_isValid = ::OpenAPI::fromJsonValue(m_year2, json[QString("Year2")]);
    m_year2_isSet = !json[QString("Year2")].isNull() && m_year2_isValid;

    m_year3_isValid = ::OpenAPI::fromJsonValue(m_year3, json[QString("Year3")]);
    m_year3_isSet = !json[QString("Year3")].isNull() && m_year3_isValid;

    m_year4_isValid = ::OpenAPI::fromJsonValue(m_year4, json[QString("Year4")]);
    m_year4_isSet = !json[QString("Year4")].isNull() && m_year4_isValid;

    m_year5_isValid = ::OpenAPI::fromJsonValue(m_year5, json[QString("Year5")]);
    m_year5_isSet = !json[QString("Year5")].isNull() && m_year5_isValid;

    m_year6_isValid = ::OpenAPI::fromJsonValue(m_year6, json[QString("Year6")]);
    m_year6_isSet = !json[QString("Year6")].isNull() && m_year6_isValid;

    m_year7_isValid = ::OpenAPI::fromJsonValue(m_year7, json[QString("Year7")]);
    m_year7_isSet = !json[QString("Year7")].isNull() && m_year7_isValid;

    m_year8_isValid = ::OpenAPI::fromJsonValue(m_year8, json[QString("Year8")]);
    m_year8_isSet = !json[QString("Year8")].isNull() && m_year8_isValid;

    m_year9_isValid = ::OpenAPI::fromJsonValue(m_year9, json[QString("Year9")]);
    m_year9_isSet = !json[QString("Year9")].isNull() && m_year9_isValid;
}

QString OAIDfr104::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr104::asJsonObject() const {
    QJsonObject obj;
    if (m_year1_isSet) {
        obj.insert(QString("Year1"), ::OpenAPI::toJsonValue(m_year1));
    }
    if (m_year2_isSet) {
        obj.insert(QString("Year2"), ::OpenAPI::toJsonValue(m_year2));
    }
    if (m_year3_isSet) {
        obj.insert(QString("Year3"), ::OpenAPI::toJsonValue(m_year3));
    }
    if (m_year4_isSet) {
        obj.insert(QString("Year4"), ::OpenAPI::toJsonValue(m_year4));
    }
    if (m_year5_isSet) {
        obj.insert(QString("Year5"), ::OpenAPI::toJsonValue(m_year5));
    }
    if (m_year6_isSet) {
        obj.insert(QString("Year6"), ::OpenAPI::toJsonValue(m_year6));
    }
    if (m_year7_isSet) {
        obj.insert(QString("Year7"), ::OpenAPI::toJsonValue(m_year7));
    }
    if (m_year8_isSet) {
        obj.insert(QString("Year8"), ::OpenAPI::toJsonValue(m_year8));
    }
    if (m_year9_isSet) {
        obj.insert(QString("Year9"), ::OpenAPI::toJsonValue(m_year9));
    }
    return obj;
}

QString OAIDfr104::getYear1() const {
    return m_year1;
}
void OAIDfr104::setYear1(const QString &year1) {
    m_year1 = year1;
    m_year1_isSet = true;
}

bool OAIDfr104::is_year1_Set() const{
    return m_year1_isSet;
}

bool OAIDfr104::is_year1_Valid() const{
    return m_year1_isValid;
}

QString OAIDfr104::getYear2() const {
    return m_year2;
}
void OAIDfr104::setYear2(const QString &year2) {
    m_year2 = year2;
    m_year2_isSet = true;
}

bool OAIDfr104::is_year2_Set() const{
    return m_year2_isSet;
}

bool OAIDfr104::is_year2_Valid() const{
    return m_year2_isValid;
}

QString OAIDfr104::getYear3() const {
    return m_year3;
}
void OAIDfr104::setYear3(const QString &year3) {
    m_year3 = year3;
    m_year3_isSet = true;
}

bool OAIDfr104::is_year3_Set() const{
    return m_year3_isSet;
}

bool OAIDfr104::is_year3_Valid() const{
    return m_year3_isValid;
}

QString OAIDfr104::getYear4() const {
    return m_year4;
}
void OAIDfr104::setYear4(const QString &year4) {
    m_year4 = year4;
    m_year4_isSet = true;
}

bool OAIDfr104::is_year4_Set() const{
    return m_year4_isSet;
}

bool OAIDfr104::is_year4_Valid() const{
    return m_year4_isValid;
}

QString OAIDfr104::getYear5() const {
    return m_year5;
}
void OAIDfr104::setYear5(const QString &year5) {
    m_year5 = year5;
    m_year5_isSet = true;
}

bool OAIDfr104::is_year5_Set() const{
    return m_year5_isSet;
}

bool OAIDfr104::is_year5_Valid() const{
    return m_year5_isValid;
}

QString OAIDfr104::getYear6() const {
    return m_year6;
}
void OAIDfr104::setYear6(const QString &year6) {
    m_year6 = year6;
    m_year6_isSet = true;
}

bool OAIDfr104::is_year6_Set() const{
    return m_year6_isSet;
}

bool OAIDfr104::is_year6_Valid() const{
    return m_year6_isValid;
}

QString OAIDfr104::getYear7() const {
    return m_year7;
}
void OAIDfr104::setYear7(const QString &year7) {
    m_year7 = year7;
    m_year7_isSet = true;
}

bool OAIDfr104::is_year7_Set() const{
    return m_year7_isSet;
}

bool OAIDfr104::is_year7_Valid() const{
    return m_year7_isValid;
}

QString OAIDfr104::getYear8() const {
    return m_year8;
}
void OAIDfr104::setYear8(const QString &year8) {
    m_year8 = year8;
    m_year8_isSet = true;
}

bool OAIDfr104::is_year8_Set() const{
    return m_year8_isSet;
}

bool OAIDfr104::is_year8_Valid() const{
    return m_year8_isValid;
}

QString OAIDfr104::getYear9() const {
    return m_year9;
}
void OAIDfr104::setYear9(const QString &year9) {
    m_year9 = year9;
    m_year9_isSet = true;
}

bool OAIDfr104::is_year9_Set() const{
    return m_year9_isSet;
}

bool OAIDfr104::is_year9_Valid() const{
    return m_year9_isValid;
}

bool OAIDfr104::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_year1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year9_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr104::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_year1_isValid && m_year2_isValid && m_year3_isValid && m_year4_isValid && m_year5_isValid && m_year6_isValid && m_year7_isValid && m_year8_isValid && m_year9_isValid && true;
}

} // namespace OpenAPI
