/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr060.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr060::OAIDfr060(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr060::OAIDfr060() {
    this->initializeModel();
}

OAIDfr060::~OAIDfr060() {}

void OAIDfr060::initializeModel() {

    m_current_as_of_isSet = false;
    m_current_as_of_isValid = false;

    m_current_snc_isSet = false;
    m_current_snc_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_qtrs_in_nc_isSet = false;
    m_qtrs_in_nc_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;
}

void OAIDfr060::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr060::fromJsonObject(QJsonObject json) {

    m_current_as_of_isValid = ::OpenAPI::fromJsonValue(m_current_as_of, json[QString("CurrentAsOf")]);
    m_current_as_of_isSet = !json[QString("CurrentAsOf")].isNull() && m_current_as_of_isValid;

    m_current_snc_isValid = ::OpenAPI::fromJsonValue(m_current_snc, json[QString("CurrentSNC")]);
    m_current_snc_isSet = !json[QString("CurrentSNC")].isNull() && m_current_snc_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_qtrs_in_nc_isValid = ::OpenAPI::fromJsonValue(m_qtrs_in_nc, json[QString("QtrsInNC")]);
    m_qtrs_in_nc_isSet = !json[QString("QtrsInNC")].isNull() && m_qtrs_in_nc_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;
}

QString OAIDfr060::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr060::asJsonObject() const {
    QJsonObject obj;
    if (m_current_as_of_isSet) {
        obj.insert(QString("CurrentAsOf"), ::OpenAPI::toJsonValue(m_current_as_of));
    }
    if (m_current_snc_isSet) {
        obj.insert(QString("CurrentSNC"), ::OpenAPI::toJsonValue(m_current_snc));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_qtrs_in_nc_isSet) {
        obj.insert(QString("QtrsInNC"), ::OpenAPI::toJsonValue(m_qtrs_in_nc));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    return obj;
}

QString OAIDfr060::getCurrentAsOf() const {
    return m_current_as_of;
}
void OAIDfr060::setCurrentAsOf(const QString &current_as_of) {
    m_current_as_of = current_as_of;
    m_current_as_of_isSet = true;
}

bool OAIDfr060::is_current_as_of_Set() const{
    return m_current_as_of_isSet;
}

bool OAIDfr060::is_current_as_of_Valid() const{
    return m_current_as_of_isValid;
}

QString OAIDfr060::getCurrentSnc() const {
    return m_current_snc;
}
void OAIDfr060::setCurrentSnc(const QString &current_snc) {
    m_current_snc = current_snc;
    m_current_snc_isSet = true;
}

bool OAIDfr060::is_current_snc_Set() const{
    return m_current_snc_isSet;
}

bool OAIDfr060::is_current_snc_Valid() const{
    return m_current_snc_isValid;
}

QString OAIDfr060::getDescription() const {
    return m_description;
}
void OAIDfr060::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDfr060::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDfr060::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDfr060::getQtrsInNc() const {
    return m_qtrs_in_nc;
}
void OAIDfr060::setQtrsInNc(const QString &qtrs_in_nc) {
    m_qtrs_in_nc = qtrs_in_nc;
    m_qtrs_in_nc_isSet = true;
}

bool OAIDfr060::is_qtrs_in_nc_Set() const{
    return m_qtrs_in_nc_isSet;
}

bool OAIDfr060::is_qtrs_in_nc_Valid() const{
    return m_qtrs_in_nc_isValid;
}

QString OAIDfr060::getSourceId() const {
    return m_source_id;
}
void OAIDfr060::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr060::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr060::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr060::getStatute() const {
    return m_statute;
}
void OAIDfr060::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIDfr060::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIDfr060::is_statute_Valid() const{
    return m_statute_isValid;
}

bool OAIDfr060::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_as_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtrs_in_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr060::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_as_of_isValid && m_current_snc_isValid && m_description_isValid && m_qtrs_in_nc_isValid && m_source_id_isValid && m_statute_isValid && true;
}

} // namespace OpenAPI
