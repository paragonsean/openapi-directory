/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr079_s.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr079_s::OAIDfr079_s(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr079_s::OAIDfr079_s() {
    this->initializeModel();
}

OAIDfr079_s::~OAIDfr079_s() {}

void OAIDfr079_s::initializeModel() {

    m_evaluations_isSet = false;
    m_evaluations_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_violations_isSet = false;
    m_violations_isValid = false;
}

void OAIDfr079_s::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr079_s::fromJsonObject(QJsonObject json) {

    m_evaluations_isValid = ::OpenAPI::fromJsonValue(m_evaluations, json[QString("Evaluations")]);
    m_evaluations_isSet = !json[QString("Evaluations")].isNull() && m_evaluations_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_violations_isValid = ::OpenAPI::fromJsonValue(m_violations, json[QString("Violations")]);
    m_violations_isSet = !json[QString("Violations")].isNull() && m_violations_isValid;
}

QString OAIDfr079_s::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr079_s::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluations.size() > 0) {
        obj.insert(QString("Evaluations"), ::OpenAPI::toJsonValue(m_evaluations));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_violations.size() > 0) {
        obj.insert(QString("Violations"), ::OpenAPI::toJsonValue(m_violations));
    }
    return obj;
}

QList<OAIDfr079_s_Evaluations> OAIDfr079_s::getEvaluations() const {
    return m_evaluations;
}
void OAIDfr079_s::setEvaluations(const QList<OAIDfr079_s_Evaluations> &evaluations) {
    m_evaluations = evaluations;
    m_evaluations_isSet = true;
}

bool OAIDfr079_s::is_evaluations_Set() const{
    return m_evaluations_isSet;
}

bool OAIDfr079_s::is_evaluations_Valid() const{
    return m_evaluations_isValid;
}

OAIDfr079_s_Status OAIDfr079_s::getStatus() const {
    return m_status;
}
void OAIDfr079_s::setStatus(const OAIDfr079_s_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDfr079_s::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDfr079_s::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIDfr079_s_Violations> OAIDfr079_s::getViolations() const {
    return m_violations;
}
void OAIDfr079_s::setViolations(const QList<OAIDfr079_s_Violations> &violations) {
    m_violations = violations;
    m_violations_isSet = true;
}

bool OAIDfr079_s::is_violations_Set() const{
    return m_violations_isSet;
}

bool OAIDfr079_s::is_violations_Valid() const{
    return m_violations_isValid;
}

bool OAIDfr079_s::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr079_s::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
