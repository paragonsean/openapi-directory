/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr109.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr109::OAIDfr109(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr109::OAIDfr109() {
    this->initializeModel();
}

OAIDfr109::~OAIDfr109() {}

void OAIDfr109::initializeModel() {

    m_agency_isSet = false;
    m_agency_isValid = false;

    m_enforcement_action_type_desc_isSet = false;
    m_enforcement_action_type_desc_isValid = false;

    m_enforcement_date_isSet = false;
    m_enforcement_date_isValid = false;

    m_enforcement_id_isSet = false;
    m_enforcement_id_isValid = false;

    m_enforcement_type_isSet = false;
    m_enforcement_type_isValid = false;
}

void OAIDfr109::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr109::fromJsonObject(QJsonObject json) {

    m_agency_isValid = ::OpenAPI::fromJsonValue(m_agency, json[QString("Agency")]);
    m_agency_isSet = !json[QString("Agency")].isNull() && m_agency_isValid;

    m_enforcement_action_type_desc_isValid = ::OpenAPI::fromJsonValue(m_enforcement_action_type_desc, json[QString("EnforcementActionTypeDesc")]);
    m_enforcement_action_type_desc_isSet = !json[QString("EnforcementActionTypeDesc")].isNull() && m_enforcement_action_type_desc_isValid;

    m_enforcement_date_isValid = ::OpenAPI::fromJsonValue(m_enforcement_date, json[QString("EnforcementDate")]);
    m_enforcement_date_isSet = !json[QString("EnforcementDate")].isNull() && m_enforcement_date_isValid;

    m_enforcement_id_isValid = ::OpenAPI::fromJsonValue(m_enforcement_id, json[QString("EnforcementId")]);
    m_enforcement_id_isSet = !json[QString("EnforcementId")].isNull() && m_enforcement_id_isValid;

    m_enforcement_type_isValid = ::OpenAPI::fromJsonValue(m_enforcement_type, json[QString("EnforcementType")]);
    m_enforcement_type_isSet = !json[QString("EnforcementType")].isNull() && m_enforcement_type_isValid;
}

QString OAIDfr109::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr109::asJsonObject() const {
    QJsonObject obj;
    if (m_agency_isSet) {
        obj.insert(QString("Agency"), ::OpenAPI::toJsonValue(m_agency));
    }
    if (m_enforcement_action_type_desc_isSet) {
        obj.insert(QString("EnforcementActionTypeDesc"), ::OpenAPI::toJsonValue(m_enforcement_action_type_desc));
    }
    if (m_enforcement_date_isSet) {
        obj.insert(QString("EnforcementDate"), ::OpenAPI::toJsonValue(m_enforcement_date));
    }
    if (m_enforcement_id_isSet) {
        obj.insert(QString("EnforcementId"), ::OpenAPI::toJsonValue(m_enforcement_id));
    }
    if (m_enforcement_type_isSet) {
        obj.insert(QString("EnforcementType"), ::OpenAPI::toJsonValue(m_enforcement_type));
    }
    return obj;
}

QString OAIDfr109::getAgency() const {
    return m_agency;
}
void OAIDfr109::setAgency(const QString &agency) {
    m_agency = agency;
    m_agency_isSet = true;
}

bool OAIDfr109::is_agency_Set() const{
    return m_agency_isSet;
}

bool OAIDfr109::is_agency_Valid() const{
    return m_agency_isValid;
}

QString OAIDfr109::getEnforcementActionTypeDesc() const {
    return m_enforcement_action_type_desc;
}
void OAIDfr109::setEnforcementActionTypeDesc(const QString &enforcement_action_type_desc) {
    m_enforcement_action_type_desc = enforcement_action_type_desc;
    m_enforcement_action_type_desc_isSet = true;
}

bool OAIDfr109::is_enforcement_action_type_desc_Set() const{
    return m_enforcement_action_type_desc_isSet;
}

bool OAIDfr109::is_enforcement_action_type_desc_Valid() const{
    return m_enforcement_action_type_desc_isValid;
}

QString OAIDfr109::getEnforcementDate() const {
    return m_enforcement_date;
}
void OAIDfr109::setEnforcementDate(const QString &enforcement_date) {
    m_enforcement_date = enforcement_date;
    m_enforcement_date_isSet = true;
}

bool OAIDfr109::is_enforcement_date_Set() const{
    return m_enforcement_date_isSet;
}

bool OAIDfr109::is_enforcement_date_Valid() const{
    return m_enforcement_date_isValid;
}

QString OAIDfr109::getEnforcementId() const {
    return m_enforcement_id;
}
void OAIDfr109::setEnforcementId(const QString &enforcement_id) {
    m_enforcement_id = enforcement_id;
    m_enforcement_id_isSet = true;
}

bool OAIDfr109::is_enforcement_id_Set() const{
    return m_enforcement_id_isSet;
}

bool OAIDfr109::is_enforcement_id_Valid() const{
    return m_enforcement_id_isValid;
}

QString OAIDfr109::getEnforcementType() const {
    return m_enforcement_type;
}
void OAIDfr109::setEnforcementType(const QString &enforcement_type) {
    m_enforcement_type = enforcement_type;
    m_enforcement_type_isSet = true;
}

bool OAIDfr109::is_enforcement_type_Set() const{
    return m_enforcement_type_isSet;
}

bool OAIDfr109::is_enforcement_type_Valid() const{
    return m_enforcement_type_isValid;
}

bool OAIDfr109::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_action_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr109::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agency_isValid && m_enforcement_action_type_desc_isValid && m_enforcement_date_isValid && m_enforcement_id_isValid && m_enforcement_type_isValid && true;
}

} // namespace OpenAPI
