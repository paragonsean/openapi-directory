/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr128_Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr128_Results::OAIDfr128_Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr128_Results::OAIDfr128_Results() {
    this->initializeModel();
}

OAIDfr128_Results::~OAIDfr128_Results() {}

void OAIDfr128_Results::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_violations_enforcement_actions_isSet = false;
    m_violations_enforcement_actions_isValid = false;
}

void OAIDfr128_Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr128_Results::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_violations_enforcement_actions_isValid = ::OpenAPI::fromJsonValue(m_violations_enforcement_actions, json[QString("ViolationsEnforcementActions")]);
    m_violations_enforcement_actions_isSet = !json[QString("ViolationsEnforcementActions")].isNull() && m_violations_enforcement_actions_isValid;
}

QString OAIDfr128_Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr128_Results::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_violations_enforcement_actions.isSet()) {
        obj.insert(QString("ViolationsEnforcementActions"), ::OpenAPI::toJsonValue(m_violations_enforcement_actions));
    }
    return obj;
}

QString OAIDfr128_Results::getMessage() const {
    return m_message;
}
void OAIDfr128_Results::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr128_Results::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr128_Results::is_message_Valid() const{
    return m_message_isValid;
}

OAIDfr106 OAIDfr128_Results::getViolationsEnforcementActions() const {
    return m_violations_enforcement_actions;
}
void OAIDfr128_Results::setViolationsEnforcementActions(const OAIDfr106 &violations_enforcement_actions) {
    m_violations_enforcement_actions = violations_enforcement_actions;
    m_violations_enforcement_actions_isSet = true;
}

bool OAIDfr128_Results::is_violations_enforcement_actions_Set() const{
    return m_violations_enforcement_actions_isSet;
}

bool OAIDfr128_Results::is_violations_enforcement_actions_Valid() const{
    return m_violations_enforcement_actions_isValid;
}

bool OAIDfr128_Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations_enforcement_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr128_Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
