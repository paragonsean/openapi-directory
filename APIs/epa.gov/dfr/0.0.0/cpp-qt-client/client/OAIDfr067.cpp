/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr067.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr067::OAIDfr067(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr067::OAIDfr067() {
    this->initializeModel();
}

OAIDfr067::~OAIDfr067() {}

void OAIDfr067::initializeModel() {

    m_activity_name_isSet = false;
    m_activity_name_isValid = false;

    m_case_id_isSet = false;
    m_case_id_isValid = false;

    m_case_name_isSet = false;
    m_case_name_isValid = false;

    m_case_type_isSet = false;
    m_case_type_isValid = false;

    m_comp_action_cost_isSet = false;
    m_comp_action_cost_isValid = false;

    m_federal_penalty_isSet = false;
    m_federal_penalty_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_latest_settlement_entered_date_isSet = false;
    m_latest_settlement_entered_date_isValid = false;

    m_law_section_code_isSet = false;
    m_law_section_code_isValid = false;

    m_lead_agency_isSet = false;
    m_lead_agency_isValid = false;

    m_number_settlements_isSet = false;
    m_number_settlements_isValid = false;

    m_sep_cost_isSet = false;
    m_sep_cost_isValid = false;

    m_settlement_date_isSet = false;
    m_settlement_date_isValid = false;

    m_state_local_penalty_isSet = false;
    m_state_local_penalty_isValid = false;

    m_statute_code_isSet = false;
    m_statute_code_isValid = false;

    m_total_cost_recovery_isSet = false;
    m_total_cost_recovery_isValid = false;
}

void OAIDfr067::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr067::fromJsonObject(QJsonObject json) {

    m_activity_name_isValid = ::OpenAPI::fromJsonValue(m_activity_name, json[QString("ActivityName")]);
    m_activity_name_isSet = !json[QString("ActivityName")].isNull() && m_activity_name_isValid;

    m_case_id_isValid = ::OpenAPI::fromJsonValue(m_case_id, json[QString("CaseID")]);
    m_case_id_isSet = !json[QString("CaseID")].isNull() && m_case_id_isValid;

    m_case_name_isValid = ::OpenAPI::fromJsonValue(m_case_name, json[QString("CaseName")]);
    m_case_name_isSet = !json[QString("CaseName")].isNull() && m_case_name_isValid;

    m_case_type_isValid = ::OpenAPI::fromJsonValue(m_case_type, json[QString("CaseType")]);
    m_case_type_isSet = !json[QString("CaseType")].isNull() && m_case_type_isValid;

    m_comp_action_cost_isValid = ::OpenAPI::fromJsonValue(m_comp_action_cost, json[QString("CompActionCost")]);
    m_comp_action_cost_isSet = !json[QString("CompActionCost")].isNull() && m_comp_action_cost_isValid;

    m_federal_penalty_isValid = ::OpenAPI::fromJsonValue(m_federal_penalty, json[QString("FederalPenalty")]);
    m_federal_penalty_isSet = !json[QString("FederalPenalty")].isNull() && m_federal_penalty_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("IssueDate")]);
    m_issue_date_isSet = !json[QString("IssueDate")].isNull() && m_issue_date_isValid;

    m_latest_settlement_entered_date_isValid = ::OpenAPI::fromJsonValue(m_latest_settlement_entered_date, json[QString("LatestSettlementEnteredDate")]);
    m_latest_settlement_entered_date_isSet = !json[QString("LatestSettlementEnteredDate")].isNull() && m_latest_settlement_entered_date_isValid;

    m_law_section_code_isValid = ::OpenAPI::fromJsonValue(m_law_section_code, json[QString("LawSectionCode")]);
    m_law_section_code_isSet = !json[QString("LawSectionCode")].isNull() && m_law_section_code_isValid;

    m_lead_agency_isValid = ::OpenAPI::fromJsonValue(m_lead_agency, json[QString("LeadAgency")]);
    m_lead_agency_isSet = !json[QString("LeadAgency")].isNull() && m_lead_agency_isValid;

    m_number_settlements_isValid = ::OpenAPI::fromJsonValue(m_number_settlements, json[QString("NumberSettlements")]);
    m_number_settlements_isSet = !json[QString("NumberSettlements")].isNull() && m_number_settlements_isValid;

    m_sep_cost_isValid = ::OpenAPI::fromJsonValue(m_sep_cost, json[QString("SepCost")]);
    m_sep_cost_isSet = !json[QString("SepCost")].isNull() && m_sep_cost_isValid;

    m_settlement_date_isValid = ::OpenAPI::fromJsonValue(m_settlement_date, json[QString("SettlementDate")]);
    m_settlement_date_isSet = !json[QString("SettlementDate")].isNull() && m_settlement_date_isValid;

    m_state_local_penalty_isValid = ::OpenAPI::fromJsonValue(m_state_local_penalty, json[QString("StateLocalPenalty")]);
    m_state_local_penalty_isSet = !json[QString("StateLocalPenalty")].isNull() && m_state_local_penalty_isValid;

    m_statute_code_isValid = ::OpenAPI::fromJsonValue(m_statute_code, json[QString("StatuteCode")]);
    m_statute_code_isSet = !json[QString("StatuteCode")].isNull() && m_statute_code_isValid;

    m_total_cost_recovery_isValid = ::OpenAPI::fromJsonValue(m_total_cost_recovery, json[QString("TotalCostRecovery")]);
    m_total_cost_recovery_isSet = !json[QString("TotalCostRecovery")].isNull() && m_total_cost_recovery_isValid;
}

QString OAIDfr067::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr067::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_name_isSet) {
        obj.insert(QString("ActivityName"), ::OpenAPI::toJsonValue(m_activity_name));
    }
    if (m_case_id_isSet) {
        obj.insert(QString("CaseID"), ::OpenAPI::toJsonValue(m_case_id));
    }
    if (m_case_name_isSet) {
        obj.insert(QString("CaseName"), ::OpenAPI::toJsonValue(m_case_name));
    }
    if (m_case_type_isSet) {
        obj.insert(QString("CaseType"), ::OpenAPI::toJsonValue(m_case_type));
    }
    if (m_comp_action_cost_isSet) {
        obj.insert(QString("CompActionCost"), ::OpenAPI::toJsonValue(m_comp_action_cost));
    }
    if (m_federal_penalty_isSet) {
        obj.insert(QString("FederalPenalty"), ::OpenAPI::toJsonValue(m_federal_penalty));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("IssueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_latest_settlement_entered_date_isSet) {
        obj.insert(QString("LatestSettlementEnteredDate"), ::OpenAPI::toJsonValue(m_latest_settlement_entered_date));
    }
    if (m_law_section_code_isSet) {
        obj.insert(QString("LawSectionCode"), ::OpenAPI::toJsonValue(m_law_section_code));
    }
    if (m_lead_agency_isSet) {
        obj.insert(QString("LeadAgency"), ::OpenAPI::toJsonValue(m_lead_agency));
    }
    if (m_number_settlements_isSet) {
        obj.insert(QString("NumberSettlements"), ::OpenAPI::toJsonValue(m_number_settlements));
    }
    if (m_sep_cost_isSet) {
        obj.insert(QString("SepCost"), ::OpenAPI::toJsonValue(m_sep_cost));
    }
    if (m_settlement_date_isSet) {
        obj.insert(QString("SettlementDate"), ::OpenAPI::toJsonValue(m_settlement_date));
    }
    if (m_state_local_penalty_isSet) {
        obj.insert(QString("StateLocalPenalty"), ::OpenAPI::toJsonValue(m_state_local_penalty));
    }
    if (m_statute_code_isSet) {
        obj.insert(QString("StatuteCode"), ::OpenAPI::toJsonValue(m_statute_code));
    }
    if (m_total_cost_recovery_isSet) {
        obj.insert(QString("TotalCostRecovery"), ::OpenAPI::toJsonValue(m_total_cost_recovery));
    }
    return obj;
}

QString OAIDfr067::getActivityName() const {
    return m_activity_name;
}
void OAIDfr067::setActivityName(const QString &activity_name) {
    m_activity_name = activity_name;
    m_activity_name_isSet = true;
}

bool OAIDfr067::is_activity_name_Set() const{
    return m_activity_name_isSet;
}

bool OAIDfr067::is_activity_name_Valid() const{
    return m_activity_name_isValid;
}

QString OAIDfr067::getCaseId() const {
    return m_case_id;
}
void OAIDfr067::setCaseId(const QString &case_id) {
    m_case_id = case_id;
    m_case_id_isSet = true;
}

bool OAIDfr067::is_case_id_Set() const{
    return m_case_id_isSet;
}

bool OAIDfr067::is_case_id_Valid() const{
    return m_case_id_isValid;
}

QString OAIDfr067::getCaseName() const {
    return m_case_name;
}
void OAIDfr067::setCaseName(const QString &case_name) {
    m_case_name = case_name;
    m_case_name_isSet = true;
}

bool OAIDfr067::is_case_name_Set() const{
    return m_case_name_isSet;
}

bool OAIDfr067::is_case_name_Valid() const{
    return m_case_name_isValid;
}

QString OAIDfr067::getCaseType() const {
    return m_case_type;
}
void OAIDfr067::setCaseType(const QString &case_type) {
    m_case_type = case_type;
    m_case_type_isSet = true;
}

bool OAIDfr067::is_case_type_Set() const{
    return m_case_type_isSet;
}

bool OAIDfr067::is_case_type_Valid() const{
    return m_case_type_isValid;
}

QString OAIDfr067::getCompActionCost() const {
    return m_comp_action_cost;
}
void OAIDfr067::setCompActionCost(const QString &comp_action_cost) {
    m_comp_action_cost = comp_action_cost;
    m_comp_action_cost_isSet = true;
}

bool OAIDfr067::is_comp_action_cost_Set() const{
    return m_comp_action_cost_isSet;
}

bool OAIDfr067::is_comp_action_cost_Valid() const{
    return m_comp_action_cost_isValid;
}

QString OAIDfr067::getFederalPenalty() const {
    return m_federal_penalty;
}
void OAIDfr067::setFederalPenalty(const QString &federal_penalty) {
    m_federal_penalty = federal_penalty;
    m_federal_penalty_isSet = true;
}

bool OAIDfr067::is_federal_penalty_Set() const{
    return m_federal_penalty_isSet;
}

bool OAIDfr067::is_federal_penalty_Valid() const{
    return m_federal_penalty_isValid;
}

QString OAIDfr067::getIssueDate() const {
    return m_issue_date;
}
void OAIDfr067::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIDfr067::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIDfr067::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QString OAIDfr067::getLatestSettlementEnteredDate() const {
    return m_latest_settlement_entered_date;
}
void OAIDfr067::setLatestSettlementEnteredDate(const QString &latest_settlement_entered_date) {
    m_latest_settlement_entered_date = latest_settlement_entered_date;
    m_latest_settlement_entered_date_isSet = true;
}

bool OAIDfr067::is_latest_settlement_entered_date_Set() const{
    return m_latest_settlement_entered_date_isSet;
}

bool OAIDfr067::is_latest_settlement_entered_date_Valid() const{
    return m_latest_settlement_entered_date_isValid;
}

QString OAIDfr067::getLawSectionCode() const {
    return m_law_section_code;
}
void OAIDfr067::setLawSectionCode(const QString &law_section_code) {
    m_law_section_code = law_section_code;
    m_law_section_code_isSet = true;
}

bool OAIDfr067::is_law_section_code_Set() const{
    return m_law_section_code_isSet;
}

bool OAIDfr067::is_law_section_code_Valid() const{
    return m_law_section_code_isValid;
}

QString OAIDfr067::getLeadAgency() const {
    return m_lead_agency;
}
void OAIDfr067::setLeadAgency(const QString &lead_agency) {
    m_lead_agency = lead_agency;
    m_lead_agency_isSet = true;
}

bool OAIDfr067::is_lead_agency_Set() const{
    return m_lead_agency_isSet;
}

bool OAIDfr067::is_lead_agency_Valid() const{
    return m_lead_agency_isValid;
}

QString OAIDfr067::getNumberSettlements() const {
    return m_number_settlements;
}
void OAIDfr067::setNumberSettlements(const QString &number_settlements) {
    m_number_settlements = number_settlements;
    m_number_settlements_isSet = true;
}

bool OAIDfr067::is_number_settlements_Set() const{
    return m_number_settlements_isSet;
}

bool OAIDfr067::is_number_settlements_Valid() const{
    return m_number_settlements_isValid;
}

QString OAIDfr067::getSepCost() const {
    return m_sep_cost;
}
void OAIDfr067::setSepCost(const QString &sep_cost) {
    m_sep_cost = sep_cost;
    m_sep_cost_isSet = true;
}

bool OAIDfr067::is_sep_cost_Set() const{
    return m_sep_cost_isSet;
}

bool OAIDfr067::is_sep_cost_Valid() const{
    return m_sep_cost_isValid;
}

QString OAIDfr067::getSettlementDate() const {
    return m_settlement_date;
}
void OAIDfr067::setSettlementDate(const QString &settlement_date) {
    m_settlement_date = settlement_date;
    m_settlement_date_isSet = true;
}

bool OAIDfr067::is_settlement_date_Set() const{
    return m_settlement_date_isSet;
}

bool OAIDfr067::is_settlement_date_Valid() const{
    return m_settlement_date_isValid;
}

QString OAIDfr067::getStateLocalPenalty() const {
    return m_state_local_penalty;
}
void OAIDfr067::setStateLocalPenalty(const QString &state_local_penalty) {
    m_state_local_penalty = state_local_penalty;
    m_state_local_penalty_isSet = true;
}

bool OAIDfr067::is_state_local_penalty_Set() const{
    return m_state_local_penalty_isSet;
}

bool OAIDfr067::is_state_local_penalty_Valid() const{
    return m_state_local_penalty_isValid;
}

QString OAIDfr067::getStatuteCode() const {
    return m_statute_code;
}
void OAIDfr067::setStatuteCode(const QString &statute_code) {
    m_statute_code = statute_code;
    m_statute_code_isSet = true;
}

bool OAIDfr067::is_statute_code_Set() const{
    return m_statute_code_isSet;
}

bool OAIDfr067::is_statute_code_Valid() const{
    return m_statute_code_isValid;
}

QString OAIDfr067::getTotalCostRecovery() const {
    return m_total_cost_recovery;
}
void OAIDfr067::setTotalCostRecovery(const QString &total_cost_recovery) {
    m_total_cost_recovery = total_cost_recovery;
    m_total_cost_recovery_isSet = true;
}

bool OAIDfr067::is_total_cost_recovery_Set() const{
    return m_total_cost_recovery_isSet;
}

bool OAIDfr067::is_total_cost_recovery_Valid() const{
    return m_total_cost_recovery_isValid;
}

bool OAIDfr067::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comp_action_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_settlement_entered_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_law_section_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_settlements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_local_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_recovery_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr067::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_name_isValid && m_case_id_isValid && m_case_name_isValid && m_case_type_isValid && m_comp_action_cost_isValid && m_federal_penalty_isValid && m_issue_date_isValid && m_latest_settlement_entered_date_isValid && m_law_section_code_isValid && m_lead_agency_isValid && m_number_settlements_isValid && m_sep_cost_isValid && m_settlement_date_isValid && m_state_local_penalty_isValid && m_statute_code_isValid && m_total_cost_recovery_isValid && true;
}

} // namespace OpenAPI
