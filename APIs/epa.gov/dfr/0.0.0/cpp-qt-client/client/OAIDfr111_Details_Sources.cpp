/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr111_Details_Sources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr111_Details_Sources::OAIDfr111_Details_Sources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr111_Details_Sources::OAIDfr111_Details_Sources() {
    this->initializeModel();
}

OAIDfr111_Details_Sources::~OAIDfr111_Details_Sources() {}

void OAIDfr111_Details_Sources::initializeModel() {

    m_assessed_or303d_flg_isSet = false;
    m_assessed_or303d_flg_isValid = false;

    m_assessment_unit_epa_category_isSet = false;
    m_assessment_unit_epa_category_isValid = false;

    m_attains_aquatic_life_use_flg_isSet = false;
    m_attains_aquatic_life_use_flg_isValid = false;

    m_attains_cause_groups_isSet = false;
    m_attains_cause_groups_isValid = false;

    m_attains_exceptnl_use_flg_isSet = false;
    m_attains_exceptnl_use_flg_isValid = false;

    m_attains_possible_pollutants_isSet = false;
    m_attains_possible_pollutants_isValid = false;

    m_attains_recreation_use_flg_isSet = false;
    m_attains_recreation_use_flg_isValid = false;

    m_attains_shelffish_use_flg_isSet = false;
    m_attains_shelffish_use_flg_isValid = false;

    m_attains_state_causes_isSet = false;
    m_attains_state_causes_isValid = false;

    m_cycle_year_isSet = false;
    m_cycle_year_isValid = false;

    m_gnis_name_isSet = false;
    m_gnis_name_isValid = false;

    m_impaired_waters_flg_isSet = false;
    m_impaired_waters_flg_isValid = false;

    m_reach_code_isSet = false;
    m_reach_code_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_wbd12_isSet = false;
    m_wbd12_isValid = false;

    m_wbd12_name_isSet = false;
    m_wbd12_name_isValid = false;
}

void OAIDfr111_Details_Sources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr111_Details_Sources::fromJsonObject(QJsonObject json) {

    m_assessed_or303d_flg_isValid = ::OpenAPI::fromJsonValue(m_assessed_or303d_flg, json[QString("AssessedOr303dFlg")]);
    m_assessed_or303d_flg_isSet = !json[QString("AssessedOr303dFlg")].isNull() && m_assessed_or303d_flg_isValid;

    m_assessment_unit_epa_category_isValid = ::OpenAPI::fromJsonValue(m_assessment_unit_epa_category, json[QString("AssessmentUnitEPACategory")]);
    m_assessment_unit_epa_category_isSet = !json[QString("AssessmentUnitEPACategory")].isNull() && m_assessment_unit_epa_category_isValid;

    m_attains_aquatic_life_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_aquatic_life_use_flg, json[QString("AttainsAquaticLifeUseFlg")]);
    m_attains_aquatic_life_use_flg_isSet = !json[QString("AttainsAquaticLifeUseFlg")].isNull() && m_attains_aquatic_life_use_flg_isValid;

    m_attains_cause_groups_isValid = ::OpenAPI::fromJsonValue(m_attains_cause_groups, json[QString("AttainsCauseGroups")]);
    m_attains_cause_groups_isSet = !json[QString("AttainsCauseGroups")].isNull() && m_attains_cause_groups_isValid;

    m_attains_exceptnl_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_exceptnl_use_flg, json[QString("AttainsExceptnlUseFlg")]);
    m_attains_exceptnl_use_flg_isSet = !json[QString("AttainsExceptnlUseFlg")].isNull() && m_attains_exceptnl_use_flg_isValid;

    m_attains_possible_pollutants_isValid = ::OpenAPI::fromJsonValue(m_attains_possible_pollutants, json[QString("AttainsPossiblePollutants")]);
    m_attains_possible_pollutants_isSet = !json[QString("AttainsPossiblePollutants")].isNull() && m_attains_possible_pollutants_isValid;

    m_attains_recreation_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_recreation_use_flg, json[QString("AttainsRecreationUseFlg")]);
    m_attains_recreation_use_flg_isSet = !json[QString("AttainsRecreationUseFlg")].isNull() && m_attains_recreation_use_flg_isValid;

    m_attains_shelffish_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_shelffish_use_flg, json[QString("AttainsShelffishUseFlg")]);
    m_attains_shelffish_use_flg_isSet = !json[QString("AttainsShelffishUseFlg")].isNull() && m_attains_shelffish_use_flg_isValid;

    m_attains_state_causes_isValid = ::OpenAPI::fromJsonValue(m_attains_state_causes, json[QString("AttainsStateCauses")]);
    m_attains_state_causes_isSet = !json[QString("AttainsStateCauses")].isNull() && m_attains_state_causes_isValid;

    m_cycle_year_isValid = ::OpenAPI::fromJsonValue(m_cycle_year, json[QString("CycleYear")]);
    m_cycle_year_isSet = !json[QString("CycleYear")].isNull() && m_cycle_year_isValid;

    m_gnis_name_isValid = ::OpenAPI::fromJsonValue(m_gnis_name, json[QString("GNISName")]);
    m_gnis_name_isSet = !json[QString("GNISName")].isNull() && m_gnis_name_isValid;

    m_impaired_waters_flg_isValid = ::OpenAPI::fromJsonValue(m_impaired_waters_flg, json[QString("ImpairedWatersFlg")]);
    m_impaired_waters_flg_isSet = !json[QString("ImpairedWatersFlg")].isNull() && m_impaired_waters_flg_isValid;

    m_reach_code_isValid = ::OpenAPI::fromJsonValue(m_reach_code, json[QString("ReachCode")]);
    m_reach_code_isSet = !json[QString("ReachCode")].isNull() && m_reach_code_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_wbd12_isValid = ::OpenAPI::fromJsonValue(m_wbd12, json[QString("WBD12")]);
    m_wbd12_isSet = !json[QString("WBD12")].isNull() && m_wbd12_isValid;

    m_wbd12_name_isValid = ::OpenAPI::fromJsonValue(m_wbd12_name, json[QString("WBD12Name")]);
    m_wbd12_name_isSet = !json[QString("WBD12Name")].isNull() && m_wbd12_name_isValid;
}

QString OAIDfr111_Details_Sources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr111_Details_Sources::asJsonObject() const {
    QJsonObject obj;
    if (m_assessed_or303d_flg_isSet) {
        obj.insert(QString("AssessedOr303dFlg"), ::OpenAPI::toJsonValue(m_assessed_or303d_flg));
    }
    if (m_assessment_unit_epa_category_isSet) {
        obj.insert(QString("AssessmentUnitEPACategory"), ::OpenAPI::toJsonValue(m_assessment_unit_epa_category));
    }
    if (m_attains_aquatic_life_use_flg_isSet) {
        obj.insert(QString("AttainsAquaticLifeUseFlg"), ::OpenAPI::toJsonValue(m_attains_aquatic_life_use_flg));
    }
    if (m_attains_cause_groups_isSet) {
        obj.insert(QString("AttainsCauseGroups"), ::OpenAPI::toJsonValue(m_attains_cause_groups));
    }
    if (m_attains_exceptnl_use_flg_isSet) {
        obj.insert(QString("AttainsExceptnlUseFlg"), ::OpenAPI::toJsonValue(m_attains_exceptnl_use_flg));
    }
    if (m_attains_possible_pollutants_isSet) {
        obj.insert(QString("AttainsPossiblePollutants"), ::OpenAPI::toJsonValue(m_attains_possible_pollutants));
    }
    if (m_attains_recreation_use_flg_isSet) {
        obj.insert(QString("AttainsRecreationUseFlg"), ::OpenAPI::toJsonValue(m_attains_recreation_use_flg));
    }
    if (m_attains_shelffish_use_flg_isSet) {
        obj.insert(QString("AttainsShelffishUseFlg"), ::OpenAPI::toJsonValue(m_attains_shelffish_use_flg));
    }
    if (m_attains_state_causes_isSet) {
        obj.insert(QString("AttainsStateCauses"), ::OpenAPI::toJsonValue(m_attains_state_causes));
    }
    if (m_cycle_year_isSet) {
        obj.insert(QString("CycleYear"), ::OpenAPI::toJsonValue(m_cycle_year));
    }
    if (m_gnis_name_isSet) {
        obj.insert(QString("GNISName"), ::OpenAPI::toJsonValue(m_gnis_name));
    }
    if (m_impaired_waters_flg_isSet) {
        obj.insert(QString("ImpairedWatersFlg"), ::OpenAPI::toJsonValue(m_impaired_waters_flg));
    }
    if (m_reach_code_isSet) {
        obj.insert(QString("ReachCode"), ::OpenAPI::toJsonValue(m_reach_code));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_wbd12_isSet) {
        obj.insert(QString("WBD12"), ::OpenAPI::toJsonValue(m_wbd12));
    }
    if (m_wbd12_name_isSet) {
        obj.insert(QString("WBD12Name"), ::OpenAPI::toJsonValue(m_wbd12_name));
    }
    return obj;
}

QString OAIDfr111_Details_Sources::getAssessedOr303dFlg() const {
    return m_assessed_or303d_flg;
}
void OAIDfr111_Details_Sources::setAssessedOr303dFlg(const QString &assessed_or303d_flg) {
    m_assessed_or303d_flg = assessed_or303d_flg;
    m_assessed_or303d_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_assessed_or303d_flg_Set() const{
    return m_assessed_or303d_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_assessed_or303d_flg_Valid() const{
    return m_assessed_or303d_flg_isValid;
}

QString OAIDfr111_Details_Sources::getAssessmentUnitEpaCategory() const {
    return m_assessment_unit_epa_category;
}
void OAIDfr111_Details_Sources::setAssessmentUnitEpaCategory(const QString &assessment_unit_epa_category) {
    m_assessment_unit_epa_category = assessment_unit_epa_category;
    m_assessment_unit_epa_category_isSet = true;
}

bool OAIDfr111_Details_Sources::is_assessment_unit_epa_category_Set() const{
    return m_assessment_unit_epa_category_isSet;
}

bool OAIDfr111_Details_Sources::is_assessment_unit_epa_category_Valid() const{
    return m_assessment_unit_epa_category_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsAquaticLifeUseFlg() const {
    return m_attains_aquatic_life_use_flg;
}
void OAIDfr111_Details_Sources::setAttainsAquaticLifeUseFlg(const QString &attains_aquatic_life_use_flg) {
    m_attains_aquatic_life_use_flg = attains_aquatic_life_use_flg;
    m_attains_aquatic_life_use_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_aquatic_life_use_flg_Set() const{
    return m_attains_aquatic_life_use_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_aquatic_life_use_flg_Valid() const{
    return m_attains_aquatic_life_use_flg_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsCauseGroups() const {
    return m_attains_cause_groups;
}
void OAIDfr111_Details_Sources::setAttainsCauseGroups(const QString &attains_cause_groups) {
    m_attains_cause_groups = attains_cause_groups;
    m_attains_cause_groups_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_cause_groups_Set() const{
    return m_attains_cause_groups_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_cause_groups_Valid() const{
    return m_attains_cause_groups_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsExceptnlUseFlg() const {
    return m_attains_exceptnl_use_flg;
}
void OAIDfr111_Details_Sources::setAttainsExceptnlUseFlg(const QString &attains_exceptnl_use_flg) {
    m_attains_exceptnl_use_flg = attains_exceptnl_use_flg;
    m_attains_exceptnl_use_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_exceptnl_use_flg_Set() const{
    return m_attains_exceptnl_use_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_exceptnl_use_flg_Valid() const{
    return m_attains_exceptnl_use_flg_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsPossiblePollutants() const {
    return m_attains_possible_pollutants;
}
void OAIDfr111_Details_Sources::setAttainsPossiblePollutants(const QString &attains_possible_pollutants) {
    m_attains_possible_pollutants = attains_possible_pollutants;
    m_attains_possible_pollutants_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_possible_pollutants_Set() const{
    return m_attains_possible_pollutants_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_possible_pollutants_Valid() const{
    return m_attains_possible_pollutants_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsRecreationUseFlg() const {
    return m_attains_recreation_use_flg;
}
void OAIDfr111_Details_Sources::setAttainsRecreationUseFlg(const QString &attains_recreation_use_flg) {
    m_attains_recreation_use_flg = attains_recreation_use_flg;
    m_attains_recreation_use_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_recreation_use_flg_Set() const{
    return m_attains_recreation_use_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_recreation_use_flg_Valid() const{
    return m_attains_recreation_use_flg_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsShelffishUseFlg() const {
    return m_attains_shelffish_use_flg;
}
void OAIDfr111_Details_Sources::setAttainsShelffishUseFlg(const QString &attains_shelffish_use_flg) {
    m_attains_shelffish_use_flg = attains_shelffish_use_flg;
    m_attains_shelffish_use_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_shelffish_use_flg_Set() const{
    return m_attains_shelffish_use_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_shelffish_use_flg_Valid() const{
    return m_attains_shelffish_use_flg_isValid;
}

QString OAIDfr111_Details_Sources::getAttainsStateCauses() const {
    return m_attains_state_causes;
}
void OAIDfr111_Details_Sources::setAttainsStateCauses(const QString &attains_state_causes) {
    m_attains_state_causes = attains_state_causes;
    m_attains_state_causes_isSet = true;
}

bool OAIDfr111_Details_Sources::is_attains_state_causes_Set() const{
    return m_attains_state_causes_isSet;
}

bool OAIDfr111_Details_Sources::is_attains_state_causes_Valid() const{
    return m_attains_state_causes_isValid;
}

QString OAIDfr111_Details_Sources::getCycleYear() const {
    return m_cycle_year;
}
void OAIDfr111_Details_Sources::setCycleYear(const QString &cycle_year) {
    m_cycle_year = cycle_year;
    m_cycle_year_isSet = true;
}

bool OAIDfr111_Details_Sources::is_cycle_year_Set() const{
    return m_cycle_year_isSet;
}

bool OAIDfr111_Details_Sources::is_cycle_year_Valid() const{
    return m_cycle_year_isValid;
}

QString OAIDfr111_Details_Sources::getGnisName() const {
    return m_gnis_name;
}
void OAIDfr111_Details_Sources::setGnisName(const QString &gnis_name) {
    m_gnis_name = gnis_name;
    m_gnis_name_isSet = true;
}

bool OAIDfr111_Details_Sources::is_gnis_name_Set() const{
    return m_gnis_name_isSet;
}

bool OAIDfr111_Details_Sources::is_gnis_name_Valid() const{
    return m_gnis_name_isValid;
}

QString OAIDfr111_Details_Sources::getImpairedWatersFlg() const {
    return m_impaired_waters_flg;
}
void OAIDfr111_Details_Sources::setImpairedWatersFlg(const QString &impaired_waters_flg) {
    m_impaired_waters_flg = impaired_waters_flg;
    m_impaired_waters_flg_isSet = true;
}

bool OAIDfr111_Details_Sources::is_impaired_waters_flg_Set() const{
    return m_impaired_waters_flg_isSet;
}

bool OAIDfr111_Details_Sources::is_impaired_waters_flg_Valid() const{
    return m_impaired_waters_flg_isValid;
}

QString OAIDfr111_Details_Sources::getReachCode() const {
    return m_reach_code;
}
void OAIDfr111_Details_Sources::setReachCode(const QString &reach_code) {
    m_reach_code = reach_code;
    m_reach_code_isSet = true;
}

bool OAIDfr111_Details_Sources::is_reach_code_Set() const{
    return m_reach_code_isSet;
}

bool OAIDfr111_Details_Sources::is_reach_code_Valid() const{
    return m_reach_code_isValid;
}

QString OAIDfr111_Details_Sources::getSourceId() const {
    return m_source_id;
}
void OAIDfr111_Details_Sources::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr111_Details_Sources::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr111_Details_Sources::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr111_Details_Sources::getWbd12() const {
    return m_wbd12;
}
void OAIDfr111_Details_Sources::setWbd12(const QString &wbd12) {
    m_wbd12 = wbd12;
    m_wbd12_isSet = true;
}

bool OAIDfr111_Details_Sources::is_wbd12_Set() const{
    return m_wbd12_isSet;
}

bool OAIDfr111_Details_Sources::is_wbd12_Valid() const{
    return m_wbd12_isValid;
}

QString OAIDfr111_Details_Sources::getWbd12Name() const {
    return m_wbd12_name;
}
void OAIDfr111_Details_Sources::setWbd12Name(const QString &wbd12_name) {
    m_wbd12_name = wbd12_name;
    m_wbd12_name_isSet = true;
}

bool OAIDfr111_Details_Sources::is_wbd12_name_Set() const{
    return m_wbd12_name_isSet;
}

bool OAIDfr111_Details_Sources::is_wbd12_name_Valid() const{
    return m_wbd12_name_isValid;
}

bool OAIDfr111_Details_Sources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessed_or303d_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_unit_epa_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_aquatic_life_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_cause_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_exceptnl_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_possible_pollutants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_recreation_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_shelffish_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_state_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gnis_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impaired_waters_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reach_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wbd12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wbd12_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr111_Details_Sources::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessed_or303d_flg_isValid && m_assessment_unit_epa_category_isValid && m_attains_aquatic_life_use_flg_isValid && m_attains_cause_groups_isValid && m_attains_exceptnl_use_flg_isValid && m_attains_possible_pollutants_isValid && m_attains_recreation_use_flg_isValid && m_attains_shelffish_use_flg_isValid && m_attains_state_causes_isValid && m_cycle_year_isValid && m_gnis_name_isValid && m_impaired_waters_flg_isValid && m_reach_code_isValid && m_source_id_isValid && m_wbd12_isValid && m_wbd12_name_isValid && true;
}

} // namespace OpenAPI
