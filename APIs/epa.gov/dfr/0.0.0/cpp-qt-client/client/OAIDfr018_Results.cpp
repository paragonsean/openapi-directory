/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_Results::OAIDfr018_Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_Results::OAIDfr018_Results() {
    this->initializeModel();
}

OAIDfr018_Results::~OAIDfr018_Results() {}

void OAIDfr018_Results::initializeModel() {

    m_air_compliance_isSet = false;
    m_air_compliance_isValid = false;

    m_air_quality_isSet = false;
    m_air_quality_isValid = false;

    m_caed_documents_isSet = false;
    m_caed_documents_isValid = false;

    m_cwa3_yr_compliance_isSet = false;
    m_cwa3_yr_compliance_isValid = false;

    m_cwa3_yr_d80_d90_counts_isSet = false;
    m_cwa3_yr_d80_d90_counts_isValid = false;

    m_cwacs_compliance_isSet = false;
    m_cwacs_compliance_isValid = false;

    m_cwa_effluent_alr_exceedences_isSet = false;
    m_cwa_effluent_alr_exceedences_isValid = false;

    m_cwa_effluent_alr_exceedences_exp_isSet = false;
    m_cwa_effluent_alr_exceedences_exp_isValid = false;

    m_cwa_effluent_compliance_isSet = false;
    m_cwa_effluent_compliance_isValid = false;

    m_cwa_effluent_compliance_exp_isSet = false;
    m_cwa_effluent_compliance_exp_isValid = false;

    m_cwaps_compliance_isSet = false;
    m_cwaps_compliance_isValid = false;

    m_cwarnc_compliance_isSet = false;
    m_cwarnc_compliance_isValid = false;

    m_cwase_compliance_isSet = false;
    m_cwase_compliance_isValid = false;

    m_case_formal_actions_isSet = false;
    m_case_formal_actions_isValid = false;

    m_compliance_history_isSet = false;
    m_compliance_history_isValid = false;

    m_compliance_summary_isSet = false;
    m_compliance_summary_isValid = false;

    m_demographics_isSet = false;
    m_demographics_isValid = false;

    m_ej_screen_indexes_isSet = false;
    m_ej_screen_indexes_isValid = false;

    m_enforcement_compliance_summaries_isSet = false;
    m_enforcement_compliance_summaries_isValid = false;

    m_formal_actions_isSet = false;
    m_formal_actions_isValid = false;

    m_icis_formal_actions_isSet = false;
    m_icis_formal_actions_isValid = false;

    m_inspection_enforcement_summary_isSet = false;
    m_inspection_enforcement_summary_isValid = false;

    m_lead_and_copper_rule5_yr_isSet = false;
    m_lead_and_copper_rule5_yr_isValid = false;

    m_map_output_isSet = false;
    m_map_output_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_multiple_frs_facilities_isSet = false;
    m_multiple_frs_facilities_isValid = false;

    m_naics_isSet = false;
    m_naics_isValid = false;

    m_notices_isSet = false;
    m_notices_isValid = false;

    m_permits_isSet = false;
    m_permits_isValid = false;

    m_rcra_compliance_isSet = false;
    m_rcra_compliance_isValid = false;

    m_reports_isSet = false;
    m_reports_isValid = false;

    m_sdwis_compliance_isSet = false;
    m_sdwis_compliance_isValid = false;

    m_sic_isSet = false;
    m_sic_isValid = false;

    m_sanitary_surveys_isSet = false;
    m_sanitary_surveys_isValid = false;

    m_site_visits_isSet = false;
    m_site_visits_isValid = false;

    m_spatial_metadata_isSet = false;
    m_spatial_metadata_isValid = false;

    m_system_extract_dates_isSet = false;
    m_system_extract_dates_isValid = false;

    m_tri_history_isSet = false;
    m_tri_history_isValid = false;

    m_tri_releases_isSet = false;
    m_tri_releases_isValid = false;

    m_tribes_isSet = false;
    m_tribes_isValid = false;

    m_violations_enforcement_actions_isSet = false;
    m_violations_enforcement_actions_isValid = false;

    m_water_quality_isSet = false;
    m_water_quality_isValid = false;

    m_water_quality_details_isSet = false;
    m_water_quality_details_isValid = false;

    m_web_fire_documents_isSet = false;
    m_web_fire_documents_isValid = false;
}

void OAIDfr018_Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_Results::fromJsonObject(QJsonObject json) {

    m_air_compliance_isValid = ::OpenAPI::fromJsonValue(m_air_compliance, json[QString("AirCompliance")]);
    m_air_compliance_isSet = !json[QString("AirCompliance")].isNull() && m_air_compliance_isValid;

    m_air_quality_isValid = ::OpenAPI::fromJsonValue(m_air_quality, json[QString("AirQuality")]);
    m_air_quality_isSet = !json[QString("AirQuality")].isNull() && m_air_quality_isValid;

    m_caed_documents_isValid = ::OpenAPI::fromJsonValue(m_caed_documents, json[QString("CAEDDocuments")]);
    m_caed_documents_isSet = !json[QString("CAEDDocuments")].isNull() && m_caed_documents_isValid;

    m_cwa3_yr_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwa3_yr_compliance, json[QString("CWA3YrCompliance")]);
    m_cwa3_yr_compliance_isSet = !json[QString("CWA3YrCompliance")].isNull() && m_cwa3_yr_compliance_isValid;

    m_cwa3_yr_d80_d90_counts_isValid = ::OpenAPI::fromJsonValue(m_cwa3_yr_d80_d90_counts, json[QString("CWA3YrD80D90Counts")]);
    m_cwa3_yr_d80_d90_counts_isSet = !json[QString("CWA3YrD80D90Counts")].isNull() && m_cwa3_yr_d80_d90_counts_isValid;

    m_cwacs_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwacs_compliance, json[QString("CWACSCompliance")]);
    m_cwacs_compliance_isSet = !json[QString("CWACSCompliance")].isNull() && m_cwacs_compliance_isValid;

    m_cwa_effluent_alr_exceedences_isValid = ::OpenAPI::fromJsonValue(m_cwa_effluent_alr_exceedences, json[QString("CWAEffluentALRExceedences")]);
    m_cwa_effluent_alr_exceedences_isSet = !json[QString("CWAEffluentALRExceedences")].isNull() && m_cwa_effluent_alr_exceedences_isValid;

    m_cwa_effluent_alr_exceedences_exp_isValid = ::OpenAPI::fromJsonValue(m_cwa_effluent_alr_exceedences_exp, json[QString("CWAEffluentALRExceedencesEXP")]);
    m_cwa_effluent_alr_exceedences_exp_isSet = !json[QString("CWAEffluentALRExceedencesEXP")].isNull() && m_cwa_effluent_alr_exceedences_exp_isValid;

    m_cwa_effluent_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwa_effluent_compliance, json[QString("CWAEffluentCompliance")]);
    m_cwa_effluent_compliance_isSet = !json[QString("CWAEffluentCompliance")].isNull() && m_cwa_effluent_compliance_isValid;

    m_cwa_effluent_compliance_exp_isValid = ::OpenAPI::fromJsonValue(m_cwa_effluent_compliance_exp, json[QString("CWAEffluentComplianceEXP")]);
    m_cwa_effluent_compliance_exp_isSet = !json[QString("CWAEffluentComplianceEXP")].isNull() && m_cwa_effluent_compliance_exp_isValid;

    m_cwaps_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwaps_compliance, json[QString("CWAPSCompliance")]);
    m_cwaps_compliance_isSet = !json[QString("CWAPSCompliance")].isNull() && m_cwaps_compliance_isValid;

    m_cwarnc_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwarnc_compliance, json[QString("CWARNCCompliance")]);
    m_cwarnc_compliance_isSet = !json[QString("CWARNCCompliance")].isNull() && m_cwarnc_compliance_isValid;

    m_cwase_compliance_isValid = ::OpenAPI::fromJsonValue(m_cwase_compliance, json[QString("CWASECompliance")]);
    m_cwase_compliance_isSet = !json[QString("CWASECompliance")].isNull() && m_cwase_compliance_isValid;

    m_case_formal_actions_isValid = ::OpenAPI::fromJsonValue(m_case_formal_actions, json[QString("CaseFormalActions")]);
    m_case_formal_actions_isSet = !json[QString("CaseFormalActions")].isNull() && m_case_formal_actions_isValid;

    m_compliance_history_isValid = ::OpenAPI::fromJsonValue(m_compliance_history, json[QString("ComplianceHistory")]);
    m_compliance_history_isSet = !json[QString("ComplianceHistory")].isNull() && m_compliance_history_isValid;

    m_compliance_summary_isValid = ::OpenAPI::fromJsonValue(m_compliance_summary, json[QString("ComplianceSummary")]);
    m_compliance_summary_isSet = !json[QString("ComplianceSummary")].isNull() && m_compliance_summary_isValid;

    m_demographics_isValid = ::OpenAPI::fromJsonValue(m_demographics, json[QString("Demographics")]);
    m_demographics_isSet = !json[QString("Demographics")].isNull() && m_demographics_isValid;

    m_ej_screen_indexes_isValid = ::OpenAPI::fromJsonValue(m_ej_screen_indexes, json[QString("EJScreenIndexes")]);
    m_ej_screen_indexes_isSet = !json[QString("EJScreenIndexes")].isNull() && m_ej_screen_indexes_isValid;

    m_enforcement_compliance_summaries_isValid = ::OpenAPI::fromJsonValue(m_enforcement_compliance_summaries, json[QString("EnforcementComplianceSummaries")]);
    m_enforcement_compliance_summaries_isSet = !json[QString("EnforcementComplianceSummaries")].isNull() && m_enforcement_compliance_summaries_isValid;

    m_formal_actions_isValid = ::OpenAPI::fromJsonValue(m_formal_actions, json[QString("FormalActions")]);
    m_formal_actions_isSet = !json[QString("FormalActions")].isNull() && m_formal_actions_isValid;

    m_icis_formal_actions_isValid = ::OpenAPI::fromJsonValue(m_icis_formal_actions, json[QString("ICISFormalActions")]);
    m_icis_formal_actions_isSet = !json[QString("ICISFormalActions")].isNull() && m_icis_formal_actions_isValid;

    m_inspection_enforcement_summary_isValid = ::OpenAPI::fromJsonValue(m_inspection_enforcement_summary, json[QString("InspectionEnforcementSummary")]);
    m_inspection_enforcement_summary_isSet = !json[QString("InspectionEnforcementSummary")].isNull() && m_inspection_enforcement_summary_isValid;

    m_lead_and_copper_rule5_yr_isValid = ::OpenAPI::fromJsonValue(m_lead_and_copper_rule5_yr, json[QString("LeadAndCopperRule5Yr")]);
    m_lead_and_copper_rule5_yr_isSet = !json[QString("LeadAndCopperRule5Yr")].isNull() && m_lead_and_copper_rule5_yr_isValid;

    m_map_output_isValid = ::OpenAPI::fromJsonValue(m_map_output, json[QString("MapOutput")]);
    m_map_output_isSet = !json[QString("MapOutput")].isNull() && m_map_output_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_multiple_frs_facilities_isValid = ::OpenAPI::fromJsonValue(m_multiple_frs_facilities, json[QString("MultipleFRSFacilities")]);
    m_multiple_frs_facilities_isSet = !json[QString("MultipleFRSFacilities")].isNull() && m_multiple_frs_facilities_isValid;

    m_naics_isValid = ::OpenAPI::fromJsonValue(m_naics, json[QString("NAICS")]);
    m_naics_isSet = !json[QString("NAICS")].isNull() && m_naics_isValid;

    m_notices_isValid = ::OpenAPI::fromJsonValue(m_notices, json[QString("Notices")]);
    m_notices_isSet = !json[QString("Notices")].isNull() && m_notices_isValid;

    m_permits_isValid = ::OpenAPI::fromJsonValue(m_permits, json[QString("Permits")]);
    m_permits_isSet = !json[QString("Permits")].isNull() && m_permits_isValid;

    m_rcra_compliance_isValid = ::OpenAPI::fromJsonValue(m_rcra_compliance, json[QString("RCRACompliance")]);
    m_rcra_compliance_isSet = !json[QString("RCRACompliance")].isNull() && m_rcra_compliance_isValid;

    m_reports_isValid = ::OpenAPI::fromJsonValue(m_reports, json[QString("Reports")]);
    m_reports_isSet = !json[QString("Reports")].isNull() && m_reports_isValid;

    m_sdwis_compliance_isValid = ::OpenAPI::fromJsonValue(m_sdwis_compliance, json[QString("SDWISCompliance")]);
    m_sdwis_compliance_isSet = !json[QString("SDWISCompliance")].isNull() && m_sdwis_compliance_isValid;

    m_sic_isValid = ::OpenAPI::fromJsonValue(m_sic, json[QString("SIC")]);
    m_sic_isSet = !json[QString("SIC")].isNull() && m_sic_isValid;

    m_sanitary_surveys_isValid = ::OpenAPI::fromJsonValue(m_sanitary_surveys, json[QString("SanitarySurveys")]);
    m_sanitary_surveys_isSet = !json[QString("SanitarySurveys")].isNull() && m_sanitary_surveys_isValid;

    m_site_visits_isValid = ::OpenAPI::fromJsonValue(m_site_visits, json[QString("SiteVisits")]);
    m_site_visits_isSet = !json[QString("SiteVisits")].isNull() && m_site_visits_isValid;

    m_spatial_metadata_isValid = ::OpenAPI::fromJsonValue(m_spatial_metadata, json[QString("SpatialMetadata")]);
    m_spatial_metadata_isSet = !json[QString("SpatialMetadata")].isNull() && m_spatial_metadata_isValid;

    m_system_extract_dates_isValid = ::OpenAPI::fromJsonValue(m_system_extract_dates, json[QString("SystemExtractDates")]);
    m_system_extract_dates_isSet = !json[QString("SystemExtractDates")].isNull() && m_system_extract_dates_isValid;

    m_tri_history_isValid = ::OpenAPI::fromJsonValue(m_tri_history, json[QString("TRIHistory")]);
    m_tri_history_isSet = !json[QString("TRIHistory")].isNull() && m_tri_history_isValid;

    m_tri_releases_isValid = ::OpenAPI::fromJsonValue(m_tri_releases, json[QString("TRIReleases")]);
    m_tri_releases_isSet = !json[QString("TRIReleases")].isNull() && m_tri_releases_isValid;

    m_tribes_isValid = ::OpenAPI::fromJsonValue(m_tribes, json[QString("Tribes")]);
    m_tribes_isSet = !json[QString("Tribes")].isNull() && m_tribes_isValid;

    m_violations_enforcement_actions_isValid = ::OpenAPI::fromJsonValue(m_violations_enforcement_actions, json[QString("ViolationsEnforcementActions")]);
    m_violations_enforcement_actions_isSet = !json[QString("ViolationsEnforcementActions")].isNull() && m_violations_enforcement_actions_isValid;

    m_water_quality_isValid = ::OpenAPI::fromJsonValue(m_water_quality, json[QString("WaterQuality")]);
    m_water_quality_isSet = !json[QString("WaterQuality")].isNull() && m_water_quality_isValid;

    m_water_quality_details_isValid = ::OpenAPI::fromJsonValue(m_water_quality_details, json[QString("WaterQualityDetails")]);
    m_water_quality_details_isSet = !json[QString("WaterQualityDetails")].isNull() && m_water_quality_details_isValid;

    m_web_fire_documents_isValid = ::OpenAPI::fromJsonValue(m_web_fire_documents, json[QString("WebFireDocuments")]);
    m_web_fire_documents_isSet = !json[QString("WebFireDocuments")].isNull() && m_web_fire_documents_isValid;
}

QString OAIDfr018_Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_Results::asJsonObject() const {
    QJsonObject obj;
    if (m_air_compliance.isSet()) {
        obj.insert(QString("AirCompliance"), ::OpenAPI::toJsonValue(m_air_compliance));
    }
    if (m_air_quality.isSet()) {
        obj.insert(QString("AirQuality"), ::OpenAPI::toJsonValue(m_air_quality));
    }
    if (m_caed_documents.size() > 0) {
        obj.insert(QString("CAEDDocuments"), ::OpenAPI::toJsonValue(m_caed_documents));
    }
    if (m_cwa3_yr_compliance.isSet()) {
        obj.insert(QString("CWA3YrCompliance"), ::OpenAPI::toJsonValue(m_cwa3_yr_compliance));
    }
    if (m_cwa3_yr_d80_d90_counts.isSet()) {
        obj.insert(QString("CWA3YrD80D90Counts"), ::OpenAPI::toJsonValue(m_cwa3_yr_d80_d90_counts));
    }
    if (m_cwacs_compliance.isSet()) {
        obj.insert(QString("CWACSCompliance"), ::OpenAPI::toJsonValue(m_cwacs_compliance));
    }
    if (m_cwa_effluent_alr_exceedences.isSet()) {
        obj.insert(QString("CWAEffluentALRExceedences"), ::OpenAPI::toJsonValue(m_cwa_effluent_alr_exceedences));
    }
    if (m_cwa_effluent_alr_exceedences_exp.isSet()) {
        obj.insert(QString("CWAEffluentALRExceedencesEXP"), ::OpenAPI::toJsonValue(m_cwa_effluent_alr_exceedences_exp));
    }
    if (m_cwa_effluent_compliance.isSet()) {
        obj.insert(QString("CWAEffluentCompliance"), ::OpenAPI::toJsonValue(m_cwa_effluent_compliance));
    }
    if (m_cwa_effluent_compliance_exp.isSet()) {
        obj.insert(QString("CWAEffluentComplianceEXP"), ::OpenAPI::toJsonValue(m_cwa_effluent_compliance_exp));
    }
    if (m_cwaps_compliance.isSet()) {
        obj.insert(QString("CWAPSCompliance"), ::OpenAPI::toJsonValue(m_cwaps_compliance));
    }
    if (m_cwarnc_compliance.isSet()) {
        obj.insert(QString("CWARNCCompliance"), ::OpenAPI::toJsonValue(m_cwarnc_compliance));
    }
    if (m_cwase_compliance.isSet()) {
        obj.insert(QString("CWASECompliance"), ::OpenAPI::toJsonValue(m_cwase_compliance));
    }
    if (m_case_formal_actions.isSet()) {
        obj.insert(QString("CaseFormalActions"), ::OpenAPI::toJsonValue(m_case_formal_actions));
    }
    if (m_compliance_history.isSet()) {
        obj.insert(QString("ComplianceHistory"), ::OpenAPI::toJsonValue(m_compliance_history));
    }
    if (m_compliance_summary.isSet()) {
        obj.insert(QString("ComplianceSummary"), ::OpenAPI::toJsonValue(m_compliance_summary));
    }
    if (m_demographics.isSet()) {
        obj.insert(QString("Demographics"), ::OpenAPI::toJsonValue(m_demographics));
    }
    if (m_ej_screen_indexes.isSet()) {
        obj.insert(QString("EJScreenIndexes"), ::OpenAPI::toJsonValue(m_ej_screen_indexes));
    }
    if (m_enforcement_compliance_summaries.isSet()) {
        obj.insert(QString("EnforcementComplianceSummaries"), ::OpenAPI::toJsonValue(m_enforcement_compliance_summaries));
    }
    if (m_formal_actions.isSet()) {
        obj.insert(QString("FormalActions"), ::OpenAPI::toJsonValue(m_formal_actions));
    }
    if (m_icis_formal_actions.isSet()) {
        obj.insert(QString("ICISFormalActions"), ::OpenAPI::toJsonValue(m_icis_formal_actions));
    }
    if (m_inspection_enforcement_summary.isSet()) {
        obj.insert(QString("InspectionEnforcementSummary"), ::OpenAPI::toJsonValue(m_inspection_enforcement_summary));
    }
    if (m_lead_and_copper_rule5_yr.isSet()) {
        obj.insert(QString("LeadAndCopperRule5Yr"), ::OpenAPI::toJsonValue(m_lead_and_copper_rule5_yr));
    }
    if (m_map_output.isSet()) {
        obj.insert(QString("MapOutput"), ::OpenAPI::toJsonValue(m_map_output));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_multiple_frs_facilities.isSet()) {
        obj.insert(QString("MultipleFRSFacilities"), ::OpenAPI::toJsonValue(m_multiple_frs_facilities));
    }
    if (m_naics.isSet()) {
        obj.insert(QString("NAICS"), ::OpenAPI::toJsonValue(m_naics));
    }
    if (m_notices.isSet()) {
        obj.insert(QString("Notices"), ::OpenAPI::toJsonValue(m_notices));
    }
    if (m_permits.size() > 0) {
        obj.insert(QString("Permits"), ::OpenAPI::toJsonValue(m_permits));
    }
    if (m_rcra_compliance.isSet()) {
        obj.insert(QString("RCRACompliance"), ::OpenAPI::toJsonValue(m_rcra_compliance));
    }
    if (m_reports.isSet()) {
        obj.insert(QString("Reports"), ::OpenAPI::toJsonValue(m_reports));
    }
    if (m_sdwis_compliance.isSet()) {
        obj.insert(QString("SDWISCompliance"), ::OpenAPI::toJsonValue(m_sdwis_compliance));
    }
    if (m_sic.isSet()) {
        obj.insert(QString("SIC"), ::OpenAPI::toJsonValue(m_sic));
    }
    if (m_sanitary_surveys.isSet()) {
        obj.insert(QString("SanitarySurveys"), ::OpenAPI::toJsonValue(m_sanitary_surveys));
    }
    if (m_site_visits.isSet()) {
        obj.insert(QString("SiteVisits"), ::OpenAPI::toJsonValue(m_site_visits));
    }
    if (m_spatial_metadata.isSet()) {
        obj.insert(QString("SpatialMetadata"), ::OpenAPI::toJsonValue(m_spatial_metadata));
    }
    if (m_system_extract_dates.isSet()) {
        obj.insert(QString("SystemExtractDates"), ::OpenAPI::toJsonValue(m_system_extract_dates));
    }
    if (m_tri_history.isSet()) {
        obj.insert(QString("TRIHistory"), ::OpenAPI::toJsonValue(m_tri_history));
    }
    if (m_tri_releases.isSet()) {
        obj.insert(QString("TRIReleases"), ::OpenAPI::toJsonValue(m_tri_releases));
    }
    if (m_tribes.size() > 0) {
        obj.insert(QString("Tribes"), ::OpenAPI::toJsonValue(m_tribes));
    }
    if (m_violations_enforcement_actions.isSet()) {
        obj.insert(QString("ViolationsEnforcementActions"), ::OpenAPI::toJsonValue(m_violations_enforcement_actions));
    }
    if (m_water_quality.isSet()) {
        obj.insert(QString("WaterQuality"), ::OpenAPI::toJsonValue(m_water_quality));
    }
    if (m_water_quality_details.isSet()) {
        obj.insert(QString("WaterQualityDetails"), ::OpenAPI::toJsonValue(m_water_quality_details));
    }
    if (m_web_fire_documents.size() > 0) {
        obj.insert(QString("WebFireDocuments"), ::OpenAPI::toJsonValue(m_web_fire_documents));
    }
    return obj;
}

OAIDfr019 OAIDfr018_Results::getAirCompliance() const {
    return m_air_compliance;
}
void OAIDfr018_Results::setAirCompliance(const OAIDfr019 &air_compliance) {
    m_air_compliance = air_compliance;
    m_air_compliance_isSet = true;
}

bool OAIDfr018_Results::is_air_compliance_Set() const{
    return m_air_compliance_isSet;
}

bool OAIDfr018_Results::is_air_compliance_Valid() const{
    return m_air_compliance_isValid;
}

OAIDfr024 OAIDfr018_Results::getAirQuality() const {
    return m_air_quality;
}
void OAIDfr018_Results::setAirQuality(const OAIDfr024 &air_quality) {
    m_air_quality = air_quality;
    m_air_quality_isSet = true;
}

bool OAIDfr018_Results::is_air_quality_Set() const{
    return m_air_quality_isSet;
}

bool OAIDfr018_Results::is_air_quality_Valid() const{
    return m_air_quality_isValid;
}

QList<OAIDfr018_CAEDDocuments> OAIDfr018_Results::getCaedDocuments() const {
    return m_caed_documents;
}
void OAIDfr018_Results::setCaedDocuments(const QList<OAIDfr018_CAEDDocuments> &caed_documents) {
    m_caed_documents = caed_documents;
    m_caed_documents_isSet = true;
}

bool OAIDfr018_Results::is_caed_documents_Set() const{
    return m_caed_documents_isSet;
}

bool OAIDfr018_Results::is_caed_documents_Valid() const{
    return m_caed_documents_isValid;
}

OAIDfr025 OAIDfr018_Results::getCwa3YrCompliance() const {
    return m_cwa3_yr_compliance;
}
void OAIDfr018_Results::setCwa3YrCompliance(const OAIDfr025 &cwa3_yr_compliance) {
    m_cwa3_yr_compliance = cwa3_yr_compliance;
    m_cwa3_yr_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwa3_yr_compliance_Set() const{
    return m_cwa3_yr_compliance_isSet;
}

bool OAIDfr018_Results::is_cwa3_yr_compliance_Valid() const{
    return m_cwa3_yr_compliance_isValid;
}

OAIDfr027 OAIDfr018_Results::getCwa3YrD80D90Counts() const {
    return m_cwa3_yr_d80_d90_counts;
}
void OAIDfr018_Results::setCwa3YrD80D90Counts(const OAIDfr027 &cwa3_yr_d80_d90_counts) {
    m_cwa3_yr_d80_d90_counts = cwa3_yr_d80_d90_counts;
    m_cwa3_yr_d80_d90_counts_isSet = true;
}

bool OAIDfr018_Results::is_cwa3_yr_d80_d90_counts_Set() const{
    return m_cwa3_yr_d80_d90_counts_isSet;
}

bool OAIDfr018_Results::is_cwa3_yr_d80_d90_counts_Valid() const{
    return m_cwa3_yr_d80_d90_counts_isValid;
}

OAIDfr031 OAIDfr018_Results::getCwacsCompliance() const {
    return m_cwacs_compliance;
}
void OAIDfr018_Results::setCwacsCompliance(const OAIDfr031 &cwacs_compliance) {
    m_cwacs_compliance = cwacs_compliance;
    m_cwacs_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwacs_compliance_Set() const{
    return m_cwacs_compliance_isSet;
}

bool OAIDfr018_Results::is_cwacs_compliance_Valid() const{
    return m_cwacs_compliance_isValid;
}

OAIDfr035 OAIDfr018_Results::getCwaEffluentAlrExceedences() const {
    return m_cwa_effluent_alr_exceedences;
}
void OAIDfr018_Results::setCwaEffluentAlrExceedences(const OAIDfr035 &cwa_effluent_alr_exceedences) {
    m_cwa_effluent_alr_exceedences = cwa_effluent_alr_exceedences;
    m_cwa_effluent_alr_exceedences_isSet = true;
}

bool OAIDfr018_Results::is_cwa_effluent_alr_exceedences_Set() const{
    return m_cwa_effluent_alr_exceedences_isSet;
}

bool OAIDfr018_Results::is_cwa_effluent_alr_exceedences_Valid() const{
    return m_cwa_effluent_alr_exceedences_isValid;
}

OAIDfr035_EXP OAIDfr018_Results::getCwaEffluentAlrExceedencesExp() const {
    return m_cwa_effluent_alr_exceedences_exp;
}
void OAIDfr018_Results::setCwaEffluentAlrExceedencesExp(const OAIDfr035_EXP &cwa_effluent_alr_exceedences_exp) {
    m_cwa_effluent_alr_exceedences_exp = cwa_effluent_alr_exceedences_exp;
    m_cwa_effluent_alr_exceedences_exp_isSet = true;
}

bool OAIDfr018_Results::is_cwa_effluent_alr_exceedences_exp_Set() const{
    return m_cwa_effluent_alr_exceedences_exp_isSet;
}

bool OAIDfr018_Results::is_cwa_effluent_alr_exceedences_exp_Valid() const{
    return m_cwa_effluent_alr_exceedences_exp_isValid;
}

OAIDfr038 OAIDfr018_Results::getCwaEffluentCompliance() const {
    return m_cwa_effluent_compliance;
}
void OAIDfr018_Results::setCwaEffluentCompliance(const OAIDfr038 &cwa_effluent_compliance) {
    m_cwa_effluent_compliance = cwa_effluent_compliance;
    m_cwa_effluent_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwa_effluent_compliance_Set() const{
    return m_cwa_effluent_compliance_isSet;
}

bool OAIDfr018_Results::is_cwa_effluent_compliance_Valid() const{
    return m_cwa_effluent_compliance_isValid;
}

OAIDfr038_EXP OAIDfr018_Results::getCwaEffluentComplianceExp() const {
    return m_cwa_effluent_compliance_exp;
}
void OAIDfr018_Results::setCwaEffluentComplianceExp(const OAIDfr038_EXP &cwa_effluent_compliance_exp) {
    m_cwa_effluent_compliance_exp = cwa_effluent_compliance_exp;
    m_cwa_effluent_compliance_exp_isSet = true;
}

bool OAIDfr018_Results::is_cwa_effluent_compliance_exp_Set() const{
    return m_cwa_effluent_compliance_exp_isSet;
}

bool OAIDfr018_Results::is_cwa_effluent_compliance_exp_Valid() const{
    return m_cwa_effluent_compliance_exp_isValid;
}

OAIDfr042 OAIDfr018_Results::getCwapsCompliance() const {
    return m_cwaps_compliance;
}
void OAIDfr018_Results::setCwapsCompliance(const OAIDfr042 &cwaps_compliance) {
    m_cwaps_compliance = cwaps_compliance;
    m_cwaps_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwaps_compliance_Set() const{
    return m_cwaps_compliance_isSet;
}

bool OAIDfr018_Results::is_cwaps_compliance_Valid() const{
    return m_cwaps_compliance_isValid;
}

OAIDfr046 OAIDfr018_Results::getCwarncCompliance() const {
    return m_cwarnc_compliance;
}
void OAIDfr018_Results::setCwarncCompliance(const OAIDfr046 &cwarnc_compliance) {
    m_cwarnc_compliance = cwarnc_compliance;
    m_cwarnc_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwarnc_compliance_Set() const{
    return m_cwarnc_compliance_isSet;
}

bool OAIDfr018_Results::is_cwarnc_compliance_Valid() const{
    return m_cwarnc_compliance_isValid;
}

OAIDfr049 OAIDfr018_Results::getCwaseCompliance() const {
    return m_cwase_compliance;
}
void OAIDfr018_Results::setCwaseCompliance(const OAIDfr049 &cwase_compliance) {
    m_cwase_compliance = cwase_compliance;
    m_cwase_compliance_isSet = true;
}

bool OAIDfr018_Results::is_cwase_compliance_Set() const{
    return m_cwase_compliance_isSet;
}

bool OAIDfr018_Results::is_cwase_compliance_Valid() const{
    return m_cwase_compliance_isValid;
}

OAIDfr052 OAIDfr018_Results::getCaseFormalActions() const {
    return m_case_formal_actions;
}
void OAIDfr018_Results::setCaseFormalActions(const OAIDfr052 &case_formal_actions) {
    m_case_formal_actions = case_formal_actions;
    m_case_formal_actions_isSet = true;
}

bool OAIDfr018_Results::is_case_formal_actions_Set() const{
    return m_case_formal_actions_isSet;
}

bool OAIDfr018_Results::is_case_formal_actions_Valid() const{
    return m_case_formal_actions_isValid;
}

OAIDfr057 OAIDfr018_Results::getComplianceHistory() const {
    return m_compliance_history;
}
void OAIDfr018_Results::setComplianceHistory(const OAIDfr057 &compliance_history) {
    m_compliance_history = compliance_history;
    m_compliance_history_isSet = true;
}

bool OAIDfr018_Results::is_compliance_history_Set() const{
    return m_compliance_history_isSet;
}

bool OAIDfr018_Results::is_compliance_history_Valid() const{
    return m_compliance_history_isValid;
}

OAIDfr059 OAIDfr018_Results::getComplianceSummary() const {
    return m_compliance_summary;
}
void OAIDfr018_Results::setComplianceSummary(const OAIDfr059 &compliance_summary) {
    m_compliance_summary = compliance_summary;
    m_compliance_summary_isSet = true;
}

bool OAIDfr018_Results::is_compliance_summary_Set() const{
    return m_compliance_summary_isSet;
}

bool OAIDfr018_Results::is_compliance_summary_Valid() const{
    return m_compliance_summary_isValid;
}

OAIDfr061 OAIDfr018_Results::getDemographics() const {
    return m_demographics;
}
void OAIDfr018_Results::setDemographics(const OAIDfr061 &demographics) {
    m_demographics = demographics;
    m_demographics_isSet = true;
}

bool OAIDfr018_Results::is_demographics_Set() const{
    return m_demographics_isSet;
}

bool OAIDfr018_Results::is_demographics_Valid() const{
    return m_demographics_isValid;
}

OAIDfr018_EJScreenIndexes OAIDfr018_Results::getEjScreenIndexes() const {
    return m_ej_screen_indexes;
}
void OAIDfr018_Results::setEjScreenIndexes(const OAIDfr018_EJScreenIndexes &ej_screen_indexes) {
    m_ej_screen_indexes = ej_screen_indexes;
    m_ej_screen_indexes_isSet = true;
}

bool OAIDfr018_Results::is_ej_screen_indexes_Set() const{
    return m_ej_screen_indexes_isSet;
}

bool OAIDfr018_Results::is_ej_screen_indexes_Valid() const{
    return m_ej_screen_indexes_isValid;
}

OAIDfr062 OAIDfr018_Results::getEnforcementComplianceSummaries() const {
    return m_enforcement_compliance_summaries;
}
void OAIDfr018_Results::setEnforcementComplianceSummaries(const OAIDfr062 &enforcement_compliance_summaries) {
    m_enforcement_compliance_summaries = enforcement_compliance_summaries;
    m_enforcement_compliance_summaries_isSet = true;
}

bool OAIDfr018_Results::is_enforcement_compliance_summaries_Set() const{
    return m_enforcement_compliance_summaries_isSet;
}

bool OAIDfr018_Results::is_enforcement_compliance_summaries_Valid() const{
    return m_enforcement_compliance_summaries_isValid;
}

OAIDfr064 OAIDfr018_Results::getFormalActions() const {
    return m_formal_actions;
}
void OAIDfr018_Results::setFormalActions(const OAIDfr064 &formal_actions) {
    m_formal_actions = formal_actions;
    m_formal_actions_isSet = true;
}

bool OAIDfr018_Results::is_formal_actions_Set() const{
    return m_formal_actions_isSet;
}

bool OAIDfr018_Results::is_formal_actions_Valid() const{
    return m_formal_actions_isValid;
}

OAIDfr066 OAIDfr018_Results::getIcisFormalActions() const {
    return m_icis_formal_actions;
}
void OAIDfr018_Results::setIcisFormalActions(const OAIDfr066 &icis_formal_actions) {
    m_icis_formal_actions = icis_formal_actions;
    m_icis_formal_actions_isSet = true;
}

bool OAIDfr018_Results::is_icis_formal_actions_Set() const{
    return m_icis_formal_actions_isSet;
}

bool OAIDfr018_Results::is_icis_formal_actions_Valid() const{
    return m_icis_formal_actions_isValid;
}

OAIDfr068 OAIDfr018_Results::getInspectionEnforcementSummary() const {
    return m_inspection_enforcement_summary;
}
void OAIDfr018_Results::setInspectionEnforcementSummary(const OAIDfr068 &inspection_enforcement_summary) {
    m_inspection_enforcement_summary = inspection_enforcement_summary;
    m_inspection_enforcement_summary_isSet = true;
}

bool OAIDfr018_Results::is_inspection_enforcement_summary_Set() const{
    return m_inspection_enforcement_summary_isSet;
}

bool OAIDfr018_Results::is_inspection_enforcement_summary_Valid() const{
    return m_inspection_enforcement_summary_isValid;
}

OAIDfr070 OAIDfr018_Results::getLeadAndCopperRule5Yr() const {
    return m_lead_and_copper_rule5_yr;
}
void OAIDfr018_Results::setLeadAndCopperRule5Yr(const OAIDfr070 &lead_and_copper_rule5_yr) {
    m_lead_and_copper_rule5_yr = lead_and_copper_rule5_yr;
    m_lead_and_copper_rule5_yr_isSet = true;
}

bool OAIDfr018_Results::is_lead_and_copper_rule5_yr_Set() const{
    return m_lead_and_copper_rule5_yr_isSet;
}

bool OAIDfr018_Results::is_lead_and_copper_rule5_yr_Valid() const{
    return m_lead_and_copper_rule5_yr_isValid;
}

OAIDfr073 OAIDfr018_Results::getMapOutput() const {
    return m_map_output;
}
void OAIDfr018_Results::setMapOutput(const OAIDfr073 &map_output) {
    m_map_output = map_output;
    m_map_output_isSet = true;
}

bool OAIDfr018_Results::is_map_output_Set() const{
    return m_map_output_isSet;
}

bool OAIDfr018_Results::is_map_output_Valid() const{
    return m_map_output_isValid;
}

QString OAIDfr018_Results::getMessage() const {
    return m_message;
}
void OAIDfr018_Results::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr018_Results::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr018_Results::is_message_Valid() const{
    return m_message_isValid;
}

OAIDfr018_MultipleFRSFacilities OAIDfr018_Results::getMultipleFrsFacilities() const {
    return m_multiple_frs_facilities;
}
void OAIDfr018_Results::setMultipleFrsFacilities(const OAIDfr018_MultipleFRSFacilities &multiple_frs_facilities) {
    m_multiple_frs_facilities = multiple_frs_facilities;
    m_multiple_frs_facilities_isSet = true;
}

bool OAIDfr018_Results::is_multiple_frs_facilities_Set() const{
    return m_multiple_frs_facilities_isSet;
}

bool OAIDfr018_Results::is_multiple_frs_facilities_Valid() const{
    return m_multiple_frs_facilities_isValid;
}

OAIDfr018_NAICS OAIDfr018_Results::getNaics() const {
    return m_naics;
}
void OAIDfr018_Results::setNaics(const OAIDfr018_NAICS &naics) {
    m_naics = naics;
    m_naics_isSet = true;
}

bool OAIDfr018_Results::is_naics_Set() const{
    return m_naics_isSet;
}

bool OAIDfr018_Results::is_naics_Valid() const{
    return m_naics_isValid;
}

OAIDfr076 OAIDfr018_Results::getNotices() const {
    return m_notices;
}
void OAIDfr018_Results::setNotices(const OAIDfr076 &notices) {
    m_notices = notices;
    m_notices_isSet = true;
}

bool OAIDfr018_Results::is_notices_Set() const{
    return m_notices_isSet;
}

bool OAIDfr018_Results::is_notices_Valid() const{
    return m_notices_isValid;
}

QList<OAIDfr018_Permits> OAIDfr018_Results::getPermits() const {
    return m_permits;
}
void OAIDfr018_Results::setPermits(const QList<OAIDfr018_Permits> &permits) {
    m_permits = permits;
    m_permits_isSet = true;
}

bool OAIDfr018_Results::is_permits_Set() const{
    return m_permits_isSet;
}

bool OAIDfr018_Results::is_permits_Valid() const{
    return m_permits_isValid;
}

OAIDfr078 OAIDfr018_Results::getRcraCompliance() const {
    return m_rcra_compliance;
}
void OAIDfr018_Results::setRcraCompliance(const OAIDfr078 &rcra_compliance) {
    m_rcra_compliance = rcra_compliance;
    m_rcra_compliance_isSet = true;
}

bool OAIDfr018_Results::is_rcra_compliance_Set() const{
    return m_rcra_compliance_isSet;
}

bool OAIDfr018_Results::is_rcra_compliance_Valid() const{
    return m_rcra_compliance_isValid;
}

OAIDfr018_Reports OAIDfr018_Results::getReports() const {
    return m_reports;
}
void OAIDfr018_Results::setReports(const OAIDfr018_Reports &reports) {
    m_reports = reports;
    m_reports_isSet = true;
}

bool OAIDfr018_Results::is_reports_Set() const{
    return m_reports_isSet;
}

bool OAIDfr018_Results::is_reports_Valid() const{
    return m_reports_isValid;
}

OAIDfr081 OAIDfr018_Results::getSdwisCompliance() const {
    return m_sdwis_compliance;
}
void OAIDfr018_Results::setSdwisCompliance(const OAIDfr081 &sdwis_compliance) {
    m_sdwis_compliance = sdwis_compliance;
    m_sdwis_compliance_isSet = true;
}

bool OAIDfr018_Results::is_sdwis_compliance_Set() const{
    return m_sdwis_compliance_isSet;
}

bool OAIDfr018_Results::is_sdwis_compliance_Valid() const{
    return m_sdwis_compliance_isValid;
}

OAIDfr084 OAIDfr018_Results::getSic() const {
    return m_sic;
}
void OAIDfr018_Results::setSic(const OAIDfr084 &sic) {
    m_sic = sic;
    m_sic_isSet = true;
}

bool OAIDfr018_Results::is_sic_Set() const{
    return m_sic_isSet;
}

bool OAIDfr018_Results::is_sic_Valid() const{
    return m_sic_isValid;
}

OAIDfr086 OAIDfr018_Results::getSanitarySurveys() const {
    return m_sanitary_surveys;
}
void OAIDfr018_Results::setSanitarySurveys(const OAIDfr086 &sanitary_surveys) {
    m_sanitary_surveys = sanitary_surveys;
    m_sanitary_surveys_isSet = true;
}

bool OAIDfr018_Results::is_sanitary_surveys_Set() const{
    return m_sanitary_surveys_isSet;
}

bool OAIDfr018_Results::is_sanitary_surveys_Valid() const{
    return m_sanitary_surveys_isValid;
}

OAIDfr090 OAIDfr018_Results::getSiteVisits() const {
    return m_site_visits;
}
void OAIDfr018_Results::setSiteVisits(const OAIDfr090 &site_visits) {
    m_site_visits = site_visits;
    m_site_visits_isSet = true;
}

bool OAIDfr018_Results::is_site_visits_Set() const{
    return m_site_visits_isSet;
}

bool OAIDfr018_Results::is_site_visits_Valid() const{
    return m_site_visits_isValid;
}

OAIDfr094 OAIDfr018_Results::getSpatialMetadata() const {
    return m_spatial_metadata;
}
void OAIDfr018_Results::setSpatialMetadata(const OAIDfr094 &spatial_metadata) {
    m_spatial_metadata = spatial_metadata;
    m_spatial_metadata_isSet = true;
}

bool OAIDfr018_Results::is_spatial_metadata_Set() const{
    return m_spatial_metadata_isSet;
}

bool OAIDfr018_Results::is_spatial_metadata_Valid() const{
    return m_spatial_metadata_isValid;
}

OAIDfr095 OAIDfr018_Results::getSystemExtractDates() const {
    return m_system_extract_dates;
}
void OAIDfr018_Results::setSystemExtractDates(const OAIDfr095 &system_extract_dates) {
    m_system_extract_dates = system_extract_dates;
    m_system_extract_dates_isSet = true;
}

bool OAIDfr018_Results::is_system_extract_dates_Set() const{
    return m_system_extract_dates_isSet;
}

bool OAIDfr018_Results::is_system_extract_dates_Valid() const{
    return m_system_extract_dates_isValid;
}

OAIDfr098 OAIDfr018_Results::getTriHistory() const {
    return m_tri_history;
}
void OAIDfr018_Results::setTriHistory(const OAIDfr098 &tri_history) {
    m_tri_history = tri_history;
    m_tri_history_isSet = true;
}

bool OAIDfr018_Results::is_tri_history_Set() const{
    return m_tri_history_isSet;
}

bool OAIDfr018_Results::is_tri_history_Valid() const{
    return m_tri_history_isValid;
}

OAIDfr102 OAIDfr018_Results::getTriReleases() const {
    return m_tri_releases;
}
void OAIDfr018_Results::setTriReleases(const OAIDfr102 &tri_releases) {
    m_tri_releases = tri_releases;
    m_tri_releases_isSet = true;
}

bool OAIDfr018_Results::is_tri_releases_Set() const{
    return m_tri_releases_isSet;
}

bool OAIDfr018_Results::is_tri_releases_Valid() const{
    return m_tri_releases_isValid;
}

QList<OAIDfr105> OAIDfr018_Results::getTribes() const {
    return m_tribes;
}
void OAIDfr018_Results::setTribes(const QList<OAIDfr105> &tribes) {
    m_tribes = tribes;
    m_tribes_isSet = true;
}

bool OAIDfr018_Results::is_tribes_Set() const{
    return m_tribes_isSet;
}

bool OAIDfr018_Results::is_tribes_Valid() const{
    return m_tribes_isValid;
}

OAIDfr106 OAIDfr018_Results::getViolationsEnforcementActions() const {
    return m_violations_enforcement_actions;
}
void OAIDfr018_Results::setViolationsEnforcementActions(const OAIDfr106 &violations_enforcement_actions) {
    m_violations_enforcement_actions = violations_enforcement_actions;
    m_violations_enforcement_actions_isSet = true;
}

bool OAIDfr018_Results::is_violations_enforcement_actions_Set() const{
    return m_violations_enforcement_actions_isSet;
}

bool OAIDfr018_Results::is_violations_enforcement_actions_Valid() const{
    return m_violations_enforcement_actions_isValid;
}

OAIDfr111 OAIDfr018_Results::getWaterQuality() const {
    return m_water_quality;
}
void OAIDfr018_Results::setWaterQuality(const OAIDfr111 &water_quality) {
    m_water_quality = water_quality;
    m_water_quality_isSet = true;
}

bool OAIDfr018_Results::is_water_quality_Set() const{
    return m_water_quality_isSet;
}

bool OAIDfr018_Results::is_water_quality_Valid() const{
    return m_water_quality_isValid;
}

OAIDfr111_Details OAIDfr018_Results::getWaterQualityDetails() const {
    return m_water_quality_details;
}
void OAIDfr018_Results::setWaterQualityDetails(const OAIDfr111_Details &water_quality_details) {
    m_water_quality_details = water_quality_details;
    m_water_quality_details_isSet = true;
}

bool OAIDfr018_Results::is_water_quality_details_Set() const{
    return m_water_quality_details_isSet;
}

bool OAIDfr018_Results::is_water_quality_details_Valid() const{
    return m_water_quality_details_isValid;
}

QList<OAIDfr018_WebFireDocuments> OAIDfr018_Results::getWebFireDocuments() const {
    return m_web_fire_documents;
}
void OAIDfr018_Results::setWebFireDocuments(const QList<OAIDfr018_WebFireDocuments> &web_fire_documents) {
    m_web_fire_documents = web_fire_documents;
    m_web_fire_documents_isSet = true;
}

bool OAIDfr018_Results::is_web_fire_documents_Set() const{
    return m_web_fire_documents_isSet;
}

bool OAIDfr018_Results::is_web_fire_documents_Valid() const{
    return m_web_fire_documents_isValid;
}

bool OAIDfr018_Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caed_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa3_yr_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa3_yr_d80_d90_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwacs_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_effluent_alr_exceedences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_effluent_alr_exceedences_exp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_effluent_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_effluent_compliance_exp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwaps_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwarnc_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwase_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_formal_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_demographics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ej_screen_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_compliance_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formal_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icis_formal_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspection_enforcement_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_and_copper_rule5_yr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_frs_facilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_naics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwis_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanitary_surveys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_visits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_extract_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tri_releases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tribes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations_enforcement_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_quality_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_fire_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
