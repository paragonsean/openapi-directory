/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr061.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr061::OAIDfr061(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr061::OAIDfr061() {
    this->initializeModel();
}

OAIDfr061::~OAIDfr061() {}

void OAIDfr061::initializeModel() {

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_african_american_isSet = false;
    m_african_american_isValid = false;

    m_american_indian_isSet = false;
    m_american_indian_isValid = false;

    m_asian_pacific_islander_isSet = false;
    m_asian_pacific_islander_isValid = false;

    m_bsba_isSet = false;
    m_bsba_isValid = false;

    m_center_latitude_isSet = false;
    m_center_latitude_isValid = false;

    m_center_longitude_isSet = false;
    m_center_longitude_isValid = false;

    m_child_isSet = false;
    m_child_isValid = false;

    m_grades9to12_isSet = false;
    m_grades9to12_isValid = false;

    m_hs_diploma_isSet = false;
    m_hs_diploma_isValid = false;

    m_hispanic_origin_isSet = false;
    m_hispanic_origin_isValid = false;

    m_households_isSet = false;
    m_households_isValid = false;

    m_households_public_assistance_isSet = false;
    m_households_public_assistance_isValid = false;

    m_housing_units_isSet = false;
    m_housing_units_isValid = false;

    m_income15to25k_isSet = false;
    m_income15to25k_isValid = false;

    m_income25to50k_isSet = false;
    m_income25to50k_isValid = false;

    m_income50to75k_isSet = false;
    m_income50to75k_isValid = false;

    m_income75k_plus_isSet = false;
    m_income75k_plus_isValid = false;

    m_income_less15k_isSet = false;
    m_income_less15k_isValid = false;

    m_land_area_isSet = false;
    m_land_area_isValid = false;

    m_less9th_grade_isSet = false;
    m_less9th_grade_isValid = false;

    m_minors_isSet = false;
    m_minors_isValid = false;

    m_other_multiracial_isSet = false;
    m_other_multiracial_isValid = false;

    m_percent_minority_isSet = false;
    m_percent_minority_isValid = false;

    m_persons_below_poverty_level_isSet = false;
    m_persons_below_poverty_level_isValid = false;

    m_population_density_isSet = false;
    m_population_density_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_seniors_isSet = false;
    m_seniors_isValid = false;

    m_some_college_isSet = false;
    m_some_college_isValid = false;

    m_total_persons_isSet = false;
    m_total_persons_isValid = false;

    m_water_area_isSet = false;
    m_water_area_isValid = false;

    m_white_isSet = false;
    m_white_isValid = false;
}

void OAIDfr061::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr061::fromJsonObject(QJsonObject json) {

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("Adults")]);
    m_adults_isSet = !json[QString("Adults")].isNull() && m_adults_isValid;

    m_african_american_isValid = ::OpenAPI::fromJsonValue(m_african_american, json[QString("AfricanAmerican")]);
    m_african_american_isSet = !json[QString("AfricanAmerican")].isNull() && m_african_american_isValid;

    m_american_indian_isValid = ::OpenAPI::fromJsonValue(m_american_indian, json[QString("AmericanIndian")]);
    m_american_indian_isSet = !json[QString("AmericanIndian")].isNull() && m_american_indian_isValid;

    m_asian_pacific_islander_isValid = ::OpenAPI::fromJsonValue(m_asian_pacific_islander, json[QString("AsianPacificIslander")]);
    m_asian_pacific_islander_isSet = !json[QString("AsianPacificIslander")].isNull() && m_asian_pacific_islander_isValid;

    m_bsba_isValid = ::OpenAPI::fromJsonValue(m_bsba, json[QString("BSBA")]);
    m_bsba_isSet = !json[QString("BSBA")].isNull() && m_bsba_isValid;

    m_center_latitude_isValid = ::OpenAPI::fromJsonValue(m_center_latitude, json[QString("CenterLatitude")]);
    m_center_latitude_isSet = !json[QString("CenterLatitude")].isNull() && m_center_latitude_isValid;

    m_center_longitude_isValid = ::OpenAPI::fromJsonValue(m_center_longitude, json[QString("CenterLongitude")]);
    m_center_longitude_isSet = !json[QString("CenterLongitude")].isNull() && m_center_longitude_isValid;

    m_child_isValid = ::OpenAPI::fromJsonValue(m_child, json[QString("Child")]);
    m_child_isSet = !json[QString("Child")].isNull() && m_child_isValid;

    m_grades9to12_isValid = ::OpenAPI::fromJsonValue(m_grades9to12, json[QString("Grades9to12")]);
    m_grades9to12_isSet = !json[QString("Grades9to12")].isNull() && m_grades9to12_isValid;

    m_hs_diploma_isValid = ::OpenAPI::fromJsonValue(m_hs_diploma, json[QString("HSDiploma")]);
    m_hs_diploma_isSet = !json[QString("HSDiploma")].isNull() && m_hs_diploma_isValid;

    m_hispanic_origin_isValid = ::OpenAPI::fromJsonValue(m_hispanic_origin, json[QString("HispanicOrigin")]);
    m_hispanic_origin_isSet = !json[QString("HispanicOrigin")].isNull() && m_hispanic_origin_isValid;

    m_households_isValid = ::OpenAPI::fromJsonValue(m_households, json[QString("Households")]);
    m_households_isSet = !json[QString("Households")].isNull() && m_households_isValid;

    m_households_public_assistance_isValid = ::OpenAPI::fromJsonValue(m_households_public_assistance, json[QString("HouseholdsPublicAssistance")]);
    m_households_public_assistance_isSet = !json[QString("HouseholdsPublicAssistance")].isNull() && m_households_public_assistance_isValid;

    m_housing_units_isValid = ::OpenAPI::fromJsonValue(m_housing_units, json[QString("HousingUnits")]);
    m_housing_units_isSet = !json[QString("HousingUnits")].isNull() && m_housing_units_isValid;

    m_income15to25k_isValid = ::OpenAPI::fromJsonValue(m_income15to25k, json[QString("Income15to25k")]);
    m_income15to25k_isSet = !json[QString("Income15to25k")].isNull() && m_income15to25k_isValid;

    m_income25to50k_isValid = ::OpenAPI::fromJsonValue(m_income25to50k, json[QString("Income25to50k")]);
    m_income25to50k_isSet = !json[QString("Income25to50k")].isNull() && m_income25to50k_isValid;

    m_income50to75k_isValid = ::OpenAPI::fromJsonValue(m_income50to75k, json[QString("Income50to75k")]);
    m_income50to75k_isSet = !json[QString("Income50to75k")].isNull() && m_income50to75k_isValid;

    m_income75k_plus_isValid = ::OpenAPI::fromJsonValue(m_income75k_plus, json[QString("Income75kPlus")]);
    m_income75k_plus_isSet = !json[QString("Income75kPlus")].isNull() && m_income75k_plus_isValid;

    m_income_less15k_isValid = ::OpenAPI::fromJsonValue(m_income_less15k, json[QString("IncomeLess15k")]);
    m_income_less15k_isSet = !json[QString("IncomeLess15k")].isNull() && m_income_less15k_isValid;

    m_land_area_isValid = ::OpenAPI::fromJsonValue(m_land_area, json[QString("LandArea")]);
    m_land_area_isSet = !json[QString("LandArea")].isNull() && m_land_area_isValid;

    m_less9th_grade_isValid = ::OpenAPI::fromJsonValue(m_less9th_grade, json[QString("Less9thGrade")]);
    m_less9th_grade_isSet = !json[QString("Less9thGrade")].isNull() && m_less9th_grade_isValid;

    m_minors_isValid = ::OpenAPI::fromJsonValue(m_minors, json[QString("Minors")]);
    m_minors_isSet = !json[QString("Minors")].isNull() && m_minors_isValid;

    m_other_multiracial_isValid = ::OpenAPI::fromJsonValue(m_other_multiracial, json[QString("OtherMultiracial")]);
    m_other_multiracial_isSet = !json[QString("OtherMultiracial")].isNull() && m_other_multiracial_isValid;

    m_percent_minority_isValid = ::OpenAPI::fromJsonValue(m_percent_minority, json[QString("PercentMinority")]);
    m_percent_minority_isSet = !json[QString("PercentMinority")].isNull() && m_percent_minority_isValid;

    m_persons_below_poverty_level_isValid = ::OpenAPI::fromJsonValue(m_persons_below_poverty_level, json[QString("PersonsBelowPovertyLevel")]);
    m_persons_below_poverty_level_isSet = !json[QString("PersonsBelowPovertyLevel")].isNull() && m_persons_below_poverty_level_isValid;

    m_population_density_isValid = ::OpenAPI::fromJsonValue(m_population_density, json[QString("PopulationDensity")]);
    m_population_density_isSet = !json[QString("PopulationDensity")].isNull() && m_population_density_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("Radius")]);
    m_radius_isSet = !json[QString("Radius")].isNull() && m_radius_isValid;

    m_seniors_isValid = ::OpenAPI::fromJsonValue(m_seniors, json[QString("Seniors")]);
    m_seniors_isSet = !json[QString("Seniors")].isNull() && m_seniors_isValid;

    m_some_college_isValid = ::OpenAPI::fromJsonValue(m_some_college, json[QString("SomeCollege")]);
    m_some_college_isSet = !json[QString("SomeCollege")].isNull() && m_some_college_isValid;

    m_total_persons_isValid = ::OpenAPI::fromJsonValue(m_total_persons, json[QString("TotalPersons")]);
    m_total_persons_isSet = !json[QString("TotalPersons")].isNull() && m_total_persons_isValid;

    m_water_area_isValid = ::OpenAPI::fromJsonValue(m_water_area, json[QString("WaterArea")]);
    m_water_area_isSet = !json[QString("WaterArea")].isNull() && m_water_area_isValid;

    m_white_isValid = ::OpenAPI::fromJsonValue(m_white, json[QString("White")]);
    m_white_isSet = !json[QString("White")].isNull() && m_white_isValid;
}

QString OAIDfr061::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr061::asJsonObject() const {
    QJsonObject obj;
    if (m_adults_isSet) {
        obj.insert(QString("Adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_african_american_isSet) {
        obj.insert(QString("AfricanAmerican"), ::OpenAPI::toJsonValue(m_african_american));
    }
    if (m_american_indian_isSet) {
        obj.insert(QString("AmericanIndian"), ::OpenAPI::toJsonValue(m_american_indian));
    }
    if (m_asian_pacific_islander_isSet) {
        obj.insert(QString("AsianPacificIslander"), ::OpenAPI::toJsonValue(m_asian_pacific_islander));
    }
    if (m_bsba_isSet) {
        obj.insert(QString("BSBA"), ::OpenAPI::toJsonValue(m_bsba));
    }
    if (m_center_latitude_isSet) {
        obj.insert(QString("CenterLatitude"), ::OpenAPI::toJsonValue(m_center_latitude));
    }
    if (m_center_longitude_isSet) {
        obj.insert(QString("CenterLongitude"), ::OpenAPI::toJsonValue(m_center_longitude));
    }
    if (m_child_isSet) {
        obj.insert(QString("Child"), ::OpenAPI::toJsonValue(m_child));
    }
    if (m_grades9to12_isSet) {
        obj.insert(QString("Grades9to12"), ::OpenAPI::toJsonValue(m_grades9to12));
    }
    if (m_hs_diploma_isSet) {
        obj.insert(QString("HSDiploma"), ::OpenAPI::toJsonValue(m_hs_diploma));
    }
    if (m_hispanic_origin_isSet) {
        obj.insert(QString("HispanicOrigin"), ::OpenAPI::toJsonValue(m_hispanic_origin));
    }
    if (m_households_isSet) {
        obj.insert(QString("Households"), ::OpenAPI::toJsonValue(m_households));
    }
    if (m_households_public_assistance_isSet) {
        obj.insert(QString("HouseholdsPublicAssistance"), ::OpenAPI::toJsonValue(m_households_public_assistance));
    }
    if (m_housing_units_isSet) {
        obj.insert(QString("HousingUnits"), ::OpenAPI::toJsonValue(m_housing_units));
    }
    if (m_income15to25k_isSet) {
        obj.insert(QString("Income15to25k"), ::OpenAPI::toJsonValue(m_income15to25k));
    }
    if (m_income25to50k_isSet) {
        obj.insert(QString("Income25to50k"), ::OpenAPI::toJsonValue(m_income25to50k));
    }
    if (m_income50to75k_isSet) {
        obj.insert(QString("Income50to75k"), ::OpenAPI::toJsonValue(m_income50to75k));
    }
    if (m_income75k_plus_isSet) {
        obj.insert(QString("Income75kPlus"), ::OpenAPI::toJsonValue(m_income75k_plus));
    }
    if (m_income_less15k_isSet) {
        obj.insert(QString("IncomeLess15k"), ::OpenAPI::toJsonValue(m_income_less15k));
    }
    if (m_land_area_isSet) {
        obj.insert(QString("LandArea"), ::OpenAPI::toJsonValue(m_land_area));
    }
    if (m_less9th_grade_isSet) {
        obj.insert(QString("Less9thGrade"), ::OpenAPI::toJsonValue(m_less9th_grade));
    }
    if (m_minors_isSet) {
        obj.insert(QString("Minors"), ::OpenAPI::toJsonValue(m_minors));
    }
    if (m_other_multiracial_isSet) {
        obj.insert(QString("OtherMultiracial"), ::OpenAPI::toJsonValue(m_other_multiracial));
    }
    if (m_percent_minority_isSet) {
        obj.insert(QString("PercentMinority"), ::OpenAPI::toJsonValue(m_percent_minority));
    }
    if (m_persons_below_poverty_level_isSet) {
        obj.insert(QString("PersonsBelowPovertyLevel"), ::OpenAPI::toJsonValue(m_persons_below_poverty_level));
    }
    if (m_population_density_isSet) {
        obj.insert(QString("PopulationDensity"), ::OpenAPI::toJsonValue(m_population_density));
    }
    if (m_radius_isSet) {
        obj.insert(QString("Radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_seniors_isSet) {
        obj.insert(QString("Seniors"), ::OpenAPI::toJsonValue(m_seniors));
    }
    if (m_some_college_isSet) {
        obj.insert(QString("SomeCollege"), ::OpenAPI::toJsonValue(m_some_college));
    }
    if (m_total_persons_isSet) {
        obj.insert(QString("TotalPersons"), ::OpenAPI::toJsonValue(m_total_persons));
    }
    if (m_water_area_isSet) {
        obj.insert(QString("WaterArea"), ::OpenAPI::toJsonValue(m_water_area));
    }
    if (m_white_isSet) {
        obj.insert(QString("White"), ::OpenAPI::toJsonValue(m_white));
    }
    return obj;
}

QString OAIDfr061::getAdults() const {
    return m_adults;
}
void OAIDfr061::setAdults(const QString &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIDfr061::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIDfr061::is_adults_Valid() const{
    return m_adults_isValid;
}

QString OAIDfr061::getAfricanAmerican() const {
    return m_african_american;
}
void OAIDfr061::setAfricanAmerican(const QString &african_american) {
    m_african_american = african_american;
    m_african_american_isSet = true;
}

bool OAIDfr061::is_african_american_Set() const{
    return m_african_american_isSet;
}

bool OAIDfr061::is_african_american_Valid() const{
    return m_african_american_isValid;
}

QString OAIDfr061::getAmericanIndian() const {
    return m_american_indian;
}
void OAIDfr061::setAmericanIndian(const QString &american_indian) {
    m_american_indian = american_indian;
    m_american_indian_isSet = true;
}

bool OAIDfr061::is_american_indian_Set() const{
    return m_american_indian_isSet;
}

bool OAIDfr061::is_american_indian_Valid() const{
    return m_american_indian_isValid;
}

QString OAIDfr061::getAsianPacificIslander() const {
    return m_asian_pacific_islander;
}
void OAIDfr061::setAsianPacificIslander(const QString &asian_pacific_islander) {
    m_asian_pacific_islander = asian_pacific_islander;
    m_asian_pacific_islander_isSet = true;
}

bool OAIDfr061::is_asian_pacific_islander_Set() const{
    return m_asian_pacific_islander_isSet;
}

bool OAIDfr061::is_asian_pacific_islander_Valid() const{
    return m_asian_pacific_islander_isValid;
}

QString OAIDfr061::getBsba() const {
    return m_bsba;
}
void OAIDfr061::setBsba(const QString &bsba) {
    m_bsba = bsba;
    m_bsba_isSet = true;
}

bool OAIDfr061::is_bsba_Set() const{
    return m_bsba_isSet;
}

bool OAIDfr061::is_bsba_Valid() const{
    return m_bsba_isValid;
}

QString OAIDfr061::getCenterLatitude() const {
    return m_center_latitude;
}
void OAIDfr061::setCenterLatitude(const QString &center_latitude) {
    m_center_latitude = center_latitude;
    m_center_latitude_isSet = true;
}

bool OAIDfr061::is_center_latitude_Set() const{
    return m_center_latitude_isSet;
}

bool OAIDfr061::is_center_latitude_Valid() const{
    return m_center_latitude_isValid;
}

QString OAIDfr061::getCenterLongitude() const {
    return m_center_longitude;
}
void OAIDfr061::setCenterLongitude(const QString &center_longitude) {
    m_center_longitude = center_longitude;
    m_center_longitude_isSet = true;
}

bool OAIDfr061::is_center_longitude_Set() const{
    return m_center_longitude_isSet;
}

bool OAIDfr061::is_center_longitude_Valid() const{
    return m_center_longitude_isValid;
}

QString OAIDfr061::getChild() const {
    return m_child;
}
void OAIDfr061::setChild(const QString &child) {
    m_child = child;
    m_child_isSet = true;
}

bool OAIDfr061::is_child_Set() const{
    return m_child_isSet;
}

bool OAIDfr061::is_child_Valid() const{
    return m_child_isValid;
}

QString OAIDfr061::getGrades9to12() const {
    return m_grades9to12;
}
void OAIDfr061::setGrades9to12(const QString &grades9to12) {
    m_grades9to12 = grades9to12;
    m_grades9to12_isSet = true;
}

bool OAIDfr061::is_grades9to12_Set() const{
    return m_grades9to12_isSet;
}

bool OAIDfr061::is_grades9to12_Valid() const{
    return m_grades9to12_isValid;
}

QString OAIDfr061::getHsDiploma() const {
    return m_hs_diploma;
}
void OAIDfr061::setHsDiploma(const QString &hs_diploma) {
    m_hs_diploma = hs_diploma;
    m_hs_diploma_isSet = true;
}

bool OAIDfr061::is_hs_diploma_Set() const{
    return m_hs_diploma_isSet;
}

bool OAIDfr061::is_hs_diploma_Valid() const{
    return m_hs_diploma_isValid;
}

QString OAIDfr061::getHispanicOrigin() const {
    return m_hispanic_origin;
}
void OAIDfr061::setHispanicOrigin(const QString &hispanic_origin) {
    m_hispanic_origin = hispanic_origin;
    m_hispanic_origin_isSet = true;
}

bool OAIDfr061::is_hispanic_origin_Set() const{
    return m_hispanic_origin_isSet;
}

bool OAIDfr061::is_hispanic_origin_Valid() const{
    return m_hispanic_origin_isValid;
}

QString OAIDfr061::getHouseholds() const {
    return m_households;
}
void OAIDfr061::setHouseholds(const QString &households) {
    m_households = households;
    m_households_isSet = true;
}

bool OAIDfr061::is_households_Set() const{
    return m_households_isSet;
}

bool OAIDfr061::is_households_Valid() const{
    return m_households_isValid;
}

QString OAIDfr061::getHouseholdsPublicAssistance() const {
    return m_households_public_assistance;
}
void OAIDfr061::setHouseholdsPublicAssistance(const QString &households_public_assistance) {
    m_households_public_assistance = households_public_assistance;
    m_households_public_assistance_isSet = true;
}

bool OAIDfr061::is_households_public_assistance_Set() const{
    return m_households_public_assistance_isSet;
}

bool OAIDfr061::is_households_public_assistance_Valid() const{
    return m_households_public_assistance_isValid;
}

QString OAIDfr061::getHousingUnits() const {
    return m_housing_units;
}
void OAIDfr061::setHousingUnits(const QString &housing_units) {
    m_housing_units = housing_units;
    m_housing_units_isSet = true;
}

bool OAIDfr061::is_housing_units_Set() const{
    return m_housing_units_isSet;
}

bool OAIDfr061::is_housing_units_Valid() const{
    return m_housing_units_isValid;
}

QString OAIDfr061::getIncome15to25k() const {
    return m_income15to25k;
}
void OAIDfr061::setIncome15to25k(const QString &income15to25k) {
    m_income15to25k = income15to25k;
    m_income15to25k_isSet = true;
}

bool OAIDfr061::is_income15to25k_Set() const{
    return m_income15to25k_isSet;
}

bool OAIDfr061::is_income15to25k_Valid() const{
    return m_income15to25k_isValid;
}

QString OAIDfr061::getIncome25to50k() const {
    return m_income25to50k;
}
void OAIDfr061::setIncome25to50k(const QString &income25to50k) {
    m_income25to50k = income25to50k;
    m_income25to50k_isSet = true;
}

bool OAIDfr061::is_income25to50k_Set() const{
    return m_income25to50k_isSet;
}

bool OAIDfr061::is_income25to50k_Valid() const{
    return m_income25to50k_isValid;
}

QString OAIDfr061::getIncome50to75k() const {
    return m_income50to75k;
}
void OAIDfr061::setIncome50to75k(const QString &income50to75k) {
    m_income50to75k = income50to75k;
    m_income50to75k_isSet = true;
}

bool OAIDfr061::is_income50to75k_Set() const{
    return m_income50to75k_isSet;
}

bool OAIDfr061::is_income50to75k_Valid() const{
    return m_income50to75k_isValid;
}

QString OAIDfr061::getIncome75kPlus() const {
    return m_income75k_plus;
}
void OAIDfr061::setIncome75kPlus(const QString &income75k_plus) {
    m_income75k_plus = income75k_plus;
    m_income75k_plus_isSet = true;
}

bool OAIDfr061::is_income75k_plus_Set() const{
    return m_income75k_plus_isSet;
}

bool OAIDfr061::is_income75k_plus_Valid() const{
    return m_income75k_plus_isValid;
}

QString OAIDfr061::getIncomeLess15k() const {
    return m_income_less15k;
}
void OAIDfr061::setIncomeLess15k(const QString &income_less15k) {
    m_income_less15k = income_less15k;
    m_income_less15k_isSet = true;
}

bool OAIDfr061::is_income_less15k_Set() const{
    return m_income_less15k_isSet;
}

bool OAIDfr061::is_income_less15k_Valid() const{
    return m_income_less15k_isValid;
}

QString OAIDfr061::getLandArea() const {
    return m_land_area;
}
void OAIDfr061::setLandArea(const QString &land_area) {
    m_land_area = land_area;
    m_land_area_isSet = true;
}

bool OAIDfr061::is_land_area_Set() const{
    return m_land_area_isSet;
}

bool OAIDfr061::is_land_area_Valid() const{
    return m_land_area_isValid;
}

QString OAIDfr061::getLess9thGrade() const {
    return m_less9th_grade;
}
void OAIDfr061::setLess9thGrade(const QString &less9th_grade) {
    m_less9th_grade = less9th_grade;
    m_less9th_grade_isSet = true;
}

bool OAIDfr061::is_less9th_grade_Set() const{
    return m_less9th_grade_isSet;
}

bool OAIDfr061::is_less9th_grade_Valid() const{
    return m_less9th_grade_isValid;
}

QString OAIDfr061::getMinors() const {
    return m_minors;
}
void OAIDfr061::setMinors(const QString &minors) {
    m_minors = minors;
    m_minors_isSet = true;
}

bool OAIDfr061::is_minors_Set() const{
    return m_minors_isSet;
}

bool OAIDfr061::is_minors_Valid() const{
    return m_minors_isValid;
}

QString OAIDfr061::getOtherMultiracial() const {
    return m_other_multiracial;
}
void OAIDfr061::setOtherMultiracial(const QString &other_multiracial) {
    m_other_multiracial = other_multiracial;
    m_other_multiracial_isSet = true;
}

bool OAIDfr061::is_other_multiracial_Set() const{
    return m_other_multiracial_isSet;
}

bool OAIDfr061::is_other_multiracial_Valid() const{
    return m_other_multiracial_isValid;
}

QString OAIDfr061::getPercentMinority() const {
    return m_percent_minority;
}
void OAIDfr061::setPercentMinority(const QString &percent_minority) {
    m_percent_minority = percent_minority;
    m_percent_minority_isSet = true;
}

bool OAIDfr061::is_percent_minority_Set() const{
    return m_percent_minority_isSet;
}

bool OAIDfr061::is_percent_minority_Valid() const{
    return m_percent_minority_isValid;
}

QString OAIDfr061::getPersonsBelowPovertyLevel() const {
    return m_persons_below_poverty_level;
}
void OAIDfr061::setPersonsBelowPovertyLevel(const QString &persons_below_poverty_level) {
    m_persons_below_poverty_level = persons_below_poverty_level;
    m_persons_below_poverty_level_isSet = true;
}

bool OAIDfr061::is_persons_below_poverty_level_Set() const{
    return m_persons_below_poverty_level_isSet;
}

bool OAIDfr061::is_persons_below_poverty_level_Valid() const{
    return m_persons_below_poverty_level_isValid;
}

QString OAIDfr061::getPopulationDensity() const {
    return m_population_density;
}
void OAIDfr061::setPopulationDensity(const QString &population_density) {
    m_population_density = population_density;
    m_population_density_isSet = true;
}

bool OAIDfr061::is_population_density_Set() const{
    return m_population_density_isSet;
}

bool OAIDfr061::is_population_density_Valid() const{
    return m_population_density_isValid;
}

QString OAIDfr061::getRadius() const {
    return m_radius;
}
void OAIDfr061::setRadius(const QString &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIDfr061::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIDfr061::is_radius_Valid() const{
    return m_radius_isValid;
}

QString OAIDfr061::getSeniors() const {
    return m_seniors;
}
void OAIDfr061::setSeniors(const QString &seniors) {
    m_seniors = seniors;
    m_seniors_isSet = true;
}

bool OAIDfr061::is_seniors_Set() const{
    return m_seniors_isSet;
}

bool OAIDfr061::is_seniors_Valid() const{
    return m_seniors_isValid;
}

QString OAIDfr061::getSomeCollege() const {
    return m_some_college;
}
void OAIDfr061::setSomeCollege(const QString &some_college) {
    m_some_college = some_college;
    m_some_college_isSet = true;
}

bool OAIDfr061::is_some_college_Set() const{
    return m_some_college_isSet;
}

bool OAIDfr061::is_some_college_Valid() const{
    return m_some_college_isValid;
}

QString OAIDfr061::getTotalPersons() const {
    return m_total_persons;
}
void OAIDfr061::setTotalPersons(const QString &total_persons) {
    m_total_persons = total_persons;
    m_total_persons_isSet = true;
}

bool OAIDfr061::is_total_persons_Set() const{
    return m_total_persons_isSet;
}

bool OAIDfr061::is_total_persons_Valid() const{
    return m_total_persons_isValid;
}

QString OAIDfr061::getWaterArea() const {
    return m_water_area;
}
void OAIDfr061::setWaterArea(const QString &water_area) {
    m_water_area = water_area;
    m_water_area_isSet = true;
}

bool OAIDfr061::is_water_area_Set() const{
    return m_water_area_isSet;
}

bool OAIDfr061::is_water_area_Valid() const{
    return m_water_area_isValid;
}

QString OAIDfr061::getWhite() const {
    return m_white;
}
void OAIDfr061::setWhite(const QString &white) {
    m_white = white;
    m_white_isSet = true;
}

bool OAIDfr061::is_white_Set() const{
    return m_white_isSet;
}

bool OAIDfr061::is_white_Valid() const{
    return m_white_isValid;
}

bool OAIDfr061::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_african_american_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_american_indian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asian_pacific_islander_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grades9to12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hs_diploma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hispanic_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_households_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_households_public_assistance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housing_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income15to25k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income25to50k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income50to75k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income75k_plus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_less15k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_land_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_less9th_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_multiracial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_minority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons_below_poverty_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_density_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seniors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_some_college_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_persons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr061::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_adults_isValid && m_african_american_isValid && m_american_indian_isValid && m_asian_pacific_islander_isValid && m_bsba_isValid && m_center_latitude_isValid && m_center_longitude_isValid && m_child_isValid && m_grades9to12_isValid && m_hs_diploma_isValid && m_hispanic_origin_isValid && m_households_isValid && m_households_public_assistance_isValid && m_housing_units_isValid && m_income15to25k_isValid && m_income25to50k_isValid && m_income50to75k_isValid && m_income75k_plus_isValid && m_income_less15k_isValid && m_land_area_isValid && m_less9th_grade_isValid && m_minors_isValid && m_other_multiracial_isValid && m_percent_minority_isValid && m_persons_below_poverty_level_isValid && m_population_density_isValid && m_radius_isValid && m_seniors_isValid && m_some_college_isValid && m_total_persons_isValid && m_water_area_isValid && m_white_isValid && true;
}

} // namespace OpenAPI
