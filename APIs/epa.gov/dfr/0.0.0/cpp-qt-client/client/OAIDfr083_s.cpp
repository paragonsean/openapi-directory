/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr083_s.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr083_s::OAIDfr083_s(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr083_s::OAIDfr083_s() {
    this->initializeModel();
}

OAIDfr083_s::~OAIDfr083_s() {}

void OAIDfr083_s::initializeModel() {

    m_rules_violated_isSet = false;
    m_rules_violated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDfr083_s::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr083_s::fromJsonObject(QJsonObject json) {

    m_rules_violated_isValid = ::OpenAPI::fromJsonValue(m_rules_violated, json[QString("RulesViolated")]);
    m_rules_violated_isSet = !json[QString("RulesViolated")].isNull() && m_rules_violated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDfr083_s::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr083_s::asJsonObject() const {
    QJsonObject obj;
    if (m_rules_violated.size() > 0) {
        obj.insert(QString("RulesViolated"), ::OpenAPI::toJsonValue(m_rules_violated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIDfr083_s_RulesViolated> OAIDfr083_s::getRulesViolated() const {
    return m_rules_violated;
}
void OAIDfr083_s::setRulesViolated(const QList<OAIDfr083_s_RulesViolated> &rules_violated) {
    m_rules_violated = rules_violated;
    m_rules_violated_isSet = true;
}

bool OAIDfr083_s::is_rules_violated_Set() const{
    return m_rules_violated_isSet;
}

bool OAIDfr083_s::is_rules_violated_Valid() const{
    return m_rules_violated_isValid;
}

OAIDfr0_Qtr13Status OAIDfr083_s::getStatus() const {
    return m_status;
}
void OAIDfr083_s::setStatus(const OAIDfr0_Qtr13Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDfr083_s::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDfr083_s::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDfr083_s::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rules_violated.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr083_s::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rules_violated_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
