/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr130_Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr130_Results::OAIDfr130_Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr130_Results::OAIDfr130_Results() {
    this->initializeModel();
}

OAIDfr130_Results::~OAIDfr130_Results() {}

void OAIDfr130_Results::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_sic_isSet = false;
    m_sic_isValid = false;
}

void OAIDfr130_Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr130_Results::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_sic_isValid = ::OpenAPI::fromJsonValue(m_sic, json[QString("SIC")]);
    m_sic_isSet = !json[QString("SIC")].isNull() && m_sic_isValid;
}

QString OAIDfr130_Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr130_Results::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sic.isSet()) {
        obj.insert(QString("SIC"), ::OpenAPI::toJsonValue(m_sic));
    }
    return obj;
}

QString OAIDfr130_Results::getMessage() const {
    return m_message;
}
void OAIDfr130_Results::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr130_Results::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr130_Results::is_message_Valid() const{
    return m_message_isValid;
}

OAIDfr084 OAIDfr130_Results::getSic() const {
    return m_sic;
}
void OAIDfr130_Results::setSic(const OAIDfr084 &sic) {
    m_sic = sic;
    m_sic_isSet = true;
}

bool OAIDfr130_Results::is_sic_Set() const{
    return m_sic_isSet;
}

bool OAIDfr130_Results::is_sic_Valid() const{
    return m_sic_isValid;
}

bool OAIDfr130_Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr130_Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
