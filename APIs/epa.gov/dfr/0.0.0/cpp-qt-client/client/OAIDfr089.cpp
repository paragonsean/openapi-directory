/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr089.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr089::OAIDfr089(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr089::OAIDfr089() {
    this->initializeModel();
}

OAIDfr089::~OAIDfr089() {}

void OAIDfr089::initializeModel() {

    m_agency_isSet = false;
    m_agency_isValid = false;

    m_data_verification_isSet = false;
    m_data_verification_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_financial_isSet = false;
    m_financial_isValid = false;

    m_finished_water_storage_isSet = false;
    m_finished_water_storage_isValid = false;

    m_management_operation_isSet = false;
    m_management_operation_isValid = false;

    m_operator_compliance_isSet = false;
    m_operator_compliance_isValid = false;

    m_other_evaluation_isSet = false;
    m_other_evaluation_isValid = false;

    m_pumps_isSet = false;
    m_pumps_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_treatment_isSet = false;
    m_treatment_isValid = false;

    m_visit_date_isSet = false;
    m_visit_date_isValid = false;

    m_visit_type_isSet = false;
    m_visit_type_isValid = false;
}

void OAIDfr089::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr089::fromJsonObject(QJsonObject json) {

    m_agency_isValid = ::OpenAPI::fromJsonValue(m_agency, json[QString("Agency")]);
    m_agency_isSet = !json[QString("Agency")].isNull() && m_agency_isValid;

    m_data_verification_isValid = ::OpenAPI::fromJsonValue(m_data_verification, json[QString("DataVerification")]);
    m_data_verification_isSet = !json[QString("DataVerification")].isNull() && m_data_verification_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("Distribution")]);
    m_distribution_isSet = !json[QString("Distribution")].isNull() && m_distribution_isValid;

    m_financial_isValid = ::OpenAPI::fromJsonValue(m_financial, json[QString("Financial")]);
    m_financial_isSet = !json[QString("Financial")].isNull() && m_financial_isValid;

    m_finished_water_storage_isValid = ::OpenAPI::fromJsonValue(m_finished_water_storage, json[QString("FinishedWaterStorage")]);
    m_finished_water_storage_isSet = !json[QString("FinishedWaterStorage")].isNull() && m_finished_water_storage_isValid;

    m_management_operation_isValid = ::OpenAPI::fromJsonValue(m_management_operation, json[QString("ManagementOperation")]);
    m_management_operation_isSet = !json[QString("ManagementOperation")].isNull() && m_management_operation_isValid;

    m_operator_compliance_isValid = ::OpenAPI::fromJsonValue(m_operator_compliance, json[QString("OperatorCompliance")]);
    m_operator_compliance_isSet = !json[QString("OperatorCompliance")].isNull() && m_operator_compliance_isValid;

    m_other_evaluation_isValid = ::OpenAPI::fromJsonValue(m_other_evaluation, json[QString("OtherEvaluation")]);
    m_other_evaluation_isSet = !json[QString("OtherEvaluation")].isNull() && m_other_evaluation_isValid;

    m_pumps_isValid = ::OpenAPI::fromJsonValue(m_pumps, json[QString("Pumps")]);
    m_pumps_isSet = !json[QString("Pumps")].isNull() && m_pumps_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_treatment_isValid = ::OpenAPI::fromJsonValue(m_treatment, json[QString("Treatment")]);
    m_treatment_isSet = !json[QString("Treatment")].isNull() && m_treatment_isValid;

    m_visit_date_isValid = ::OpenAPI::fromJsonValue(m_visit_date, json[QString("VisitDate")]);
    m_visit_date_isSet = !json[QString("VisitDate")].isNull() && m_visit_date_isValid;

    m_visit_type_isValid = ::OpenAPI::fromJsonValue(m_visit_type, json[QString("VisitType")]);
    m_visit_type_isSet = !json[QString("VisitType")].isNull() && m_visit_type_isValid;
}

QString OAIDfr089::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr089::asJsonObject() const {
    QJsonObject obj;
    if (m_agency_isSet) {
        obj.insert(QString("Agency"), ::OpenAPI::toJsonValue(m_agency));
    }
    if (m_data_verification_isSet) {
        obj.insert(QString("DataVerification"), ::OpenAPI::toJsonValue(m_data_verification));
    }
    if (m_distribution_isSet) {
        obj.insert(QString("Distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_financial_isSet) {
        obj.insert(QString("Financial"), ::OpenAPI::toJsonValue(m_financial));
    }
    if (m_finished_water_storage_isSet) {
        obj.insert(QString("FinishedWaterStorage"), ::OpenAPI::toJsonValue(m_finished_water_storage));
    }
    if (m_management_operation_isSet) {
        obj.insert(QString("ManagementOperation"), ::OpenAPI::toJsonValue(m_management_operation));
    }
    if (m_operator_compliance_isSet) {
        obj.insert(QString("OperatorCompliance"), ::OpenAPI::toJsonValue(m_operator_compliance));
    }
    if (m_other_evaluation_isSet) {
        obj.insert(QString("OtherEvaluation"), ::OpenAPI::toJsonValue(m_other_evaluation));
    }
    if (m_pumps_isSet) {
        obj.insert(QString("Pumps"), ::OpenAPI::toJsonValue(m_pumps));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_treatment_isSet) {
        obj.insert(QString("Treatment"), ::OpenAPI::toJsonValue(m_treatment));
    }
    if (m_visit_date_isSet) {
        obj.insert(QString("VisitDate"), ::OpenAPI::toJsonValue(m_visit_date));
    }
    if (m_visit_type_isSet) {
        obj.insert(QString("VisitType"), ::OpenAPI::toJsonValue(m_visit_type));
    }
    return obj;
}

QString OAIDfr089::getAgency() const {
    return m_agency;
}
void OAIDfr089::setAgency(const QString &agency) {
    m_agency = agency;
    m_agency_isSet = true;
}

bool OAIDfr089::is_agency_Set() const{
    return m_agency_isSet;
}

bool OAIDfr089::is_agency_Valid() const{
    return m_agency_isValid;
}

QString OAIDfr089::getDataVerification() const {
    return m_data_verification;
}
void OAIDfr089::setDataVerification(const QString &data_verification) {
    m_data_verification = data_verification;
    m_data_verification_isSet = true;
}

bool OAIDfr089::is_data_verification_Set() const{
    return m_data_verification_isSet;
}

bool OAIDfr089::is_data_verification_Valid() const{
    return m_data_verification_isValid;
}

QString OAIDfr089::getDistribution() const {
    return m_distribution;
}
void OAIDfr089::setDistribution(const QString &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIDfr089::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIDfr089::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAIDfr089::getFinancial() const {
    return m_financial;
}
void OAIDfr089::setFinancial(const QString &financial) {
    m_financial = financial;
    m_financial_isSet = true;
}

bool OAIDfr089::is_financial_Set() const{
    return m_financial_isSet;
}

bool OAIDfr089::is_financial_Valid() const{
    return m_financial_isValid;
}

QString OAIDfr089::getFinishedWaterStorage() const {
    return m_finished_water_storage;
}
void OAIDfr089::setFinishedWaterStorage(const QString &finished_water_storage) {
    m_finished_water_storage = finished_water_storage;
    m_finished_water_storage_isSet = true;
}

bool OAIDfr089::is_finished_water_storage_Set() const{
    return m_finished_water_storage_isSet;
}

bool OAIDfr089::is_finished_water_storage_Valid() const{
    return m_finished_water_storage_isValid;
}

QString OAIDfr089::getManagementOperation() const {
    return m_management_operation;
}
void OAIDfr089::setManagementOperation(const QString &management_operation) {
    m_management_operation = management_operation;
    m_management_operation_isSet = true;
}

bool OAIDfr089::is_management_operation_Set() const{
    return m_management_operation_isSet;
}

bool OAIDfr089::is_management_operation_Valid() const{
    return m_management_operation_isValid;
}

QString OAIDfr089::getOperatorCompliance() const {
    return m_operator_compliance;
}
void OAIDfr089::setOperatorCompliance(const QString &operator_compliance) {
    m_operator_compliance = operator_compliance;
    m_operator_compliance_isSet = true;
}

bool OAIDfr089::is_operator_compliance_Set() const{
    return m_operator_compliance_isSet;
}

bool OAIDfr089::is_operator_compliance_Valid() const{
    return m_operator_compliance_isValid;
}

QString OAIDfr089::getOtherEvaluation() const {
    return m_other_evaluation;
}
void OAIDfr089::setOtherEvaluation(const QString &other_evaluation) {
    m_other_evaluation = other_evaluation;
    m_other_evaluation_isSet = true;
}

bool OAIDfr089::is_other_evaluation_Set() const{
    return m_other_evaluation_isSet;
}

bool OAIDfr089::is_other_evaluation_Valid() const{
    return m_other_evaluation_isValid;
}

QString OAIDfr089::getPumps() const {
    return m_pumps;
}
void OAIDfr089::setPumps(const QString &pumps) {
    m_pumps = pumps;
    m_pumps_isSet = true;
}

bool OAIDfr089::is_pumps_Set() const{
    return m_pumps_isSet;
}

bool OAIDfr089::is_pumps_Valid() const{
    return m_pumps_isValid;
}

QString OAIDfr089::getSecurity() const {
    return m_security;
}
void OAIDfr089::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIDfr089::is_security_Set() const{
    return m_security_isSet;
}

bool OAIDfr089::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIDfr089::getSource() const {
    return m_source;
}
void OAIDfr089::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDfr089::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDfr089::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDfr089::getSourceId() const {
    return m_source_id;
}
void OAIDfr089::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr089::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr089::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr089::getTreatment() const {
    return m_treatment;
}
void OAIDfr089::setTreatment(const QString &treatment) {
    m_treatment = treatment;
    m_treatment_isSet = true;
}

bool OAIDfr089::is_treatment_Set() const{
    return m_treatment_isSet;
}

bool OAIDfr089::is_treatment_Valid() const{
    return m_treatment_isValid;
}

QString OAIDfr089::getVisitDate() const {
    return m_visit_date;
}
void OAIDfr089::setVisitDate(const QString &visit_date) {
    m_visit_date = visit_date;
    m_visit_date_isSet = true;
}

bool OAIDfr089::is_visit_date_Set() const{
    return m_visit_date_isSet;
}

bool OAIDfr089::is_visit_date_Valid() const{
    return m_visit_date_isValid;
}

QString OAIDfr089::getVisitType() const {
    return m_visit_type;
}
void OAIDfr089::setVisitType(const QString &visit_type) {
    m_visit_type = visit_type;
    m_visit_type_isSet = true;
}

bool OAIDfr089::is_visit_type_Set() const{
    return m_visit_type_isSet;
}

bool OAIDfr089::is_visit_type_Valid() const{
    return m_visit_type_isValid;
}

bool OAIDfr089::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_water_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_compliance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pumps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr089::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agency_isValid && m_data_verification_isValid && m_distribution_isValid && m_financial_isValid && m_finished_water_storage_isValid && m_management_operation_isValid && m_operator_compliance_isValid && m_other_evaluation_isValid && m_pumps_isValid && m_security_isValid && m_source_isValid && m_source_id_isValid && m_treatment_isValid && m_visit_date_isValid && m_visit_type_isValid && true;
}

} // namespace OpenAPI
