/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr084_Codes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr084_Codes::OAIDfr084_Codes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr084_Codes::OAIDfr084_Codes() {
    this->initializeModel();
}

OAIDfr084_Codes::~OAIDfr084_Codes() {}

void OAIDfr084_Codes::initializeModel() {

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_sic_code_isSet = false;
    m_sic_code_isValid = false;

    m_sic_desc_isSet = false;
    m_sic_desc_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;
}

void OAIDfr084_Codes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr084_Codes::fromJsonObject(QJsonObject json) {

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_sic_code_isValid = ::OpenAPI::fromJsonValue(m_sic_code, json[QString("SICCode")]);
    m_sic_code_isSet = !json[QString("SICCode")].isNull() && m_sic_code_isValid;

    m_sic_desc_isValid = ::OpenAPI::fromJsonValue(m_sic_desc, json[QString("SICDesc")]);
    m_sic_desc_isSet = !json[QString("SICDesc")].isNull() && m_sic_desc_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;
}

QString OAIDfr084_Codes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr084_Codes::asJsonObject() const {
    QJsonObject obj;
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_sic_code_isSet) {
        obj.insert(QString("SICCode"), ::OpenAPI::toJsonValue(m_sic_code));
    }
    if (m_sic_desc_isSet) {
        obj.insert(QString("SICDesc"), ::OpenAPI::toJsonValue(m_sic_desc));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    return obj;
}

QString OAIDfr084_Codes::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr084_Codes::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr084_Codes::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr084_Codes::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr084_Codes::getSicCode() const {
    return m_sic_code;
}
void OAIDfr084_Codes::setSicCode(const QString &sic_code) {
    m_sic_code = sic_code;
    m_sic_code_isSet = true;
}

bool OAIDfr084_Codes::is_sic_code_Set() const{
    return m_sic_code_isSet;
}

bool OAIDfr084_Codes::is_sic_code_Valid() const{
    return m_sic_code_isValid;
}

QString OAIDfr084_Codes::getSicDesc() const {
    return m_sic_desc;
}
void OAIDfr084_Codes::setSicDesc(const QString &sic_desc) {
    m_sic_desc = sic_desc;
    m_sic_desc_isSet = true;
}

bool OAIDfr084_Codes::is_sic_desc_Set() const{
    return m_sic_desc_isSet;
}

bool OAIDfr084_Codes::is_sic_desc_Valid() const{
    return m_sic_desc_isValid;
}

QString OAIDfr084_Codes::getSourceId() const {
    return m_source_id;
}
void OAIDfr084_Codes::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr084_Codes::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr084_Codes::is_source_id_Valid() const{
    return m_source_id_isValid;
}

bool OAIDfr084_Codes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr084_Codes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_epa_system_isValid && m_sic_code_isValid && m_sic_desc_isValid && m_source_id_isValid && true;
}

} // namespace OpenAPI
