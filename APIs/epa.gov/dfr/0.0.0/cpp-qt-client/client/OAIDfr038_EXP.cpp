/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr038_EXP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr038_EXP::OAIDfr038_EXP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr038_EXP::OAIDfr038_EXP() {
    this->initializeModel();
}

OAIDfr038_EXP::~OAIDfr038_EXP() {}

void OAIDfr038_EXP::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIDfr038_EXP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr038_EXP::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("Header")]);
    m_header_isSet = !json[QString("Header")].isNull() && m_header_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;
}

QString OAIDfr038_EXP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr038_EXP::asJsonObject() const {
    QJsonObject obj;
    if (m_header.isSet()) {
        obj.insert(QString("Header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

OAIDfr0_Qtr13Header OAIDfr038_EXP::getHeader() const {
    return m_header;
}
void OAIDfr038_EXP::setHeader(const OAIDfr0_Qtr13Header &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIDfr038_EXP::is_header_Set() const{
    return m_header_isSet;
}

bool OAIDfr038_EXP::is_header_Valid() const{
    return m_header_isValid;
}

QList<OAIDfr038_EXP_Sources> OAIDfr038_EXP::getSources() const {
    return m_sources;
}
void OAIDfr038_EXP::setSources(const QList<OAIDfr038_EXP_Sources> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIDfr038_EXP::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIDfr038_EXP::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIDfr038_EXP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr038_EXP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
