/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_EJScreenIndexes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_EJScreenIndexes::OAIDfr018_EJScreenIndexes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_EJScreenIndexes::OAIDfr018_EJScreenIndexes() {
    this->initializeModel();
}

OAIDfr018_EJScreenIndexes::~OAIDfr018_EJScreenIndexes() {}

void OAIDfr018_EJScreenIndexes::initializeModel() {

    m_hazard_waste_proximity_isSet = false;
    m_hazard_waste_proximity_isValid = false;

    m_lead_paint_indicator_isSet = false;
    m_lead_paint_indicator_isValid = false;

    m_nata_cancer_risk_isSet = false;
    m_nata_cancer_risk_isValid = false;

    m_nata_diesel_pm_isSet = false;
    m_nata_diesel_pm_isValid = false;

    m_nata_respiratory_hi_isSet = false;
    m_nata_respiratory_hi_isValid = false;

    m_over80_count_isSet = false;
    m_over80_count_isValid = false;

    m_ozone_isSet = false;
    m_ozone_isValid = false;

    m_pm25_isSet = false;
    m_pm25_isValid = false;

    m_rmp_proximity_isSet = false;
    m_rmp_proximity_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_superfund_proximity_isSet = false;
    m_superfund_proximity_isValid = false;

    m_traffic_proximity_isSet = false;
    m_traffic_proximity_isValid = false;

    m_water_discharge_proximity_isSet = false;
    m_water_discharge_proximity_isValid = false;
}

void OAIDfr018_EJScreenIndexes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_EJScreenIndexes::fromJsonObject(QJsonObject json) {

    m_hazard_waste_proximity_isValid = ::OpenAPI::fromJsonValue(m_hazard_waste_proximity, json[QString("HazardWasteProximity")]);
    m_hazard_waste_proximity_isSet = !json[QString("HazardWasteProximity")].isNull() && m_hazard_waste_proximity_isValid;

    m_lead_paint_indicator_isValid = ::OpenAPI::fromJsonValue(m_lead_paint_indicator, json[QString("LeadPaintIndicator")]);
    m_lead_paint_indicator_isSet = !json[QString("LeadPaintIndicator")].isNull() && m_lead_paint_indicator_isValid;

    m_nata_cancer_risk_isValid = ::OpenAPI::fromJsonValue(m_nata_cancer_risk, json[QString("NATACancerRisk")]);
    m_nata_cancer_risk_isSet = !json[QString("NATACancerRisk")].isNull() && m_nata_cancer_risk_isValid;

    m_nata_diesel_pm_isValid = ::OpenAPI::fromJsonValue(m_nata_diesel_pm, json[QString("NATADieselPM")]);
    m_nata_diesel_pm_isSet = !json[QString("NATADieselPM")].isNull() && m_nata_diesel_pm_isValid;

    m_nata_respiratory_hi_isValid = ::OpenAPI::fromJsonValue(m_nata_respiratory_hi, json[QString("NATARespiratoryHI")]);
    m_nata_respiratory_hi_isSet = !json[QString("NATARespiratoryHI")].isNull() && m_nata_respiratory_hi_isValid;

    m_over80_count_isValid = ::OpenAPI::fromJsonValue(m_over80_count, json[QString("Over80Count")]);
    m_over80_count_isSet = !json[QString("Over80Count")].isNull() && m_over80_count_isValid;

    m_ozone_isValid = ::OpenAPI::fromJsonValue(m_ozone, json[QString("Ozone")]);
    m_ozone_isSet = !json[QString("Ozone")].isNull() && m_ozone_isValid;

    m_pm25_isValid = ::OpenAPI::fromJsonValue(m_pm25, json[QString("PM25")]);
    m_pm25_isSet = !json[QString("PM25")].isNull() && m_pm25_isValid;

    m_rmp_proximity_isValid = ::OpenAPI::fromJsonValue(m_rmp_proximity, json[QString("RMPProximity")]);
    m_rmp_proximity_isSet = !json[QString("RMPProximity")].isNull() && m_rmp_proximity_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_superfund_proximity_isValid = ::OpenAPI::fromJsonValue(m_superfund_proximity, json[QString("SuperfundProximity")]);
    m_superfund_proximity_isSet = !json[QString("SuperfundProximity")].isNull() && m_superfund_proximity_isValid;

    m_traffic_proximity_isValid = ::OpenAPI::fromJsonValue(m_traffic_proximity, json[QString("TrafficProximity")]);
    m_traffic_proximity_isSet = !json[QString("TrafficProximity")].isNull() && m_traffic_proximity_isValid;

    m_water_discharge_proximity_isValid = ::OpenAPI::fromJsonValue(m_water_discharge_proximity, json[QString("WaterDischargeProximity")]);
    m_water_discharge_proximity_isSet = !json[QString("WaterDischargeProximity")].isNull() && m_water_discharge_proximity_isValid;
}

QString OAIDfr018_EJScreenIndexes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_EJScreenIndexes::asJsonObject() const {
    QJsonObject obj;
    if (m_hazard_waste_proximity_isSet) {
        obj.insert(QString("HazardWasteProximity"), ::OpenAPI::toJsonValue(m_hazard_waste_proximity));
    }
    if (m_lead_paint_indicator_isSet) {
        obj.insert(QString("LeadPaintIndicator"), ::OpenAPI::toJsonValue(m_lead_paint_indicator));
    }
    if (m_nata_cancer_risk_isSet) {
        obj.insert(QString("NATACancerRisk"), ::OpenAPI::toJsonValue(m_nata_cancer_risk));
    }
    if (m_nata_diesel_pm_isSet) {
        obj.insert(QString("NATADieselPM"), ::OpenAPI::toJsonValue(m_nata_diesel_pm));
    }
    if (m_nata_respiratory_hi_isSet) {
        obj.insert(QString("NATARespiratoryHI"), ::OpenAPI::toJsonValue(m_nata_respiratory_hi));
    }
    if (m_over80_count_isSet) {
        obj.insert(QString("Over80Count"), ::OpenAPI::toJsonValue(m_over80_count));
    }
    if (m_ozone_isSet) {
        obj.insert(QString("Ozone"), ::OpenAPI::toJsonValue(m_ozone));
    }
    if (m_pm25_isSet) {
        obj.insert(QString("PM25"), ::OpenAPI::toJsonValue(m_pm25));
    }
    if (m_rmp_proximity_isSet) {
        obj.insert(QString("RMPProximity"), ::OpenAPI::toJsonValue(m_rmp_proximity));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_superfund_proximity_isSet) {
        obj.insert(QString("SuperfundProximity"), ::OpenAPI::toJsonValue(m_superfund_proximity));
    }
    if (m_traffic_proximity_isSet) {
        obj.insert(QString("TrafficProximity"), ::OpenAPI::toJsonValue(m_traffic_proximity));
    }
    if (m_water_discharge_proximity_isSet) {
        obj.insert(QString("WaterDischargeProximity"), ::OpenAPI::toJsonValue(m_water_discharge_proximity));
    }
    return obj;
}

QString OAIDfr018_EJScreenIndexes::getHazardWasteProximity() const {
    return m_hazard_waste_proximity;
}
void OAIDfr018_EJScreenIndexes::setHazardWasteProximity(const QString &hazard_waste_proximity) {
    m_hazard_waste_proximity = hazard_waste_proximity;
    m_hazard_waste_proximity_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_hazard_waste_proximity_Set() const{
    return m_hazard_waste_proximity_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_hazard_waste_proximity_Valid() const{
    return m_hazard_waste_proximity_isValid;
}

QString OAIDfr018_EJScreenIndexes::getLeadPaintIndicator() const {
    return m_lead_paint_indicator;
}
void OAIDfr018_EJScreenIndexes::setLeadPaintIndicator(const QString &lead_paint_indicator) {
    m_lead_paint_indicator = lead_paint_indicator;
    m_lead_paint_indicator_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_lead_paint_indicator_Set() const{
    return m_lead_paint_indicator_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_lead_paint_indicator_Valid() const{
    return m_lead_paint_indicator_isValid;
}

QString OAIDfr018_EJScreenIndexes::getNataCancerRisk() const {
    return m_nata_cancer_risk;
}
void OAIDfr018_EJScreenIndexes::setNataCancerRisk(const QString &nata_cancer_risk) {
    m_nata_cancer_risk = nata_cancer_risk;
    m_nata_cancer_risk_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_nata_cancer_risk_Set() const{
    return m_nata_cancer_risk_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_nata_cancer_risk_Valid() const{
    return m_nata_cancer_risk_isValid;
}

QString OAIDfr018_EJScreenIndexes::getNataDieselPm() const {
    return m_nata_diesel_pm;
}
void OAIDfr018_EJScreenIndexes::setNataDieselPm(const QString &nata_diesel_pm) {
    m_nata_diesel_pm = nata_diesel_pm;
    m_nata_diesel_pm_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_nata_diesel_pm_Set() const{
    return m_nata_diesel_pm_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_nata_diesel_pm_Valid() const{
    return m_nata_diesel_pm_isValid;
}

QString OAIDfr018_EJScreenIndexes::getNataRespiratoryHi() const {
    return m_nata_respiratory_hi;
}
void OAIDfr018_EJScreenIndexes::setNataRespiratoryHi(const QString &nata_respiratory_hi) {
    m_nata_respiratory_hi = nata_respiratory_hi;
    m_nata_respiratory_hi_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_nata_respiratory_hi_Set() const{
    return m_nata_respiratory_hi_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_nata_respiratory_hi_Valid() const{
    return m_nata_respiratory_hi_isValid;
}

QString OAIDfr018_EJScreenIndexes::getOver80Count() const {
    return m_over80_count;
}
void OAIDfr018_EJScreenIndexes::setOver80Count(const QString &over80_count) {
    m_over80_count = over80_count;
    m_over80_count_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_over80_count_Set() const{
    return m_over80_count_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_over80_count_Valid() const{
    return m_over80_count_isValid;
}

QString OAIDfr018_EJScreenIndexes::getOzone() const {
    return m_ozone;
}
void OAIDfr018_EJScreenIndexes::setOzone(const QString &ozone) {
    m_ozone = ozone;
    m_ozone_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_ozone_Set() const{
    return m_ozone_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_ozone_Valid() const{
    return m_ozone_isValid;
}

QString OAIDfr018_EJScreenIndexes::getPm25() const {
    return m_pm25;
}
void OAIDfr018_EJScreenIndexes::setPm25(const QString &pm25) {
    m_pm25 = pm25;
    m_pm25_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_pm25_Set() const{
    return m_pm25_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_pm25_Valid() const{
    return m_pm25_isValid;
}

QString OAIDfr018_EJScreenIndexes::getRmpProximity() const {
    return m_rmp_proximity;
}
void OAIDfr018_EJScreenIndexes::setRmpProximity(const QString &rmp_proximity) {
    m_rmp_proximity = rmp_proximity;
    m_rmp_proximity_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_rmp_proximity_Set() const{
    return m_rmp_proximity_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_rmp_proximity_Valid() const{
    return m_rmp_proximity_isValid;
}

QString OAIDfr018_EJScreenIndexes::getRegistryId() const {
    return m_registry_id;
}
void OAIDfr018_EJScreenIndexes::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIDfr018_EJScreenIndexes::getSuperfundProximity() const {
    return m_superfund_proximity;
}
void OAIDfr018_EJScreenIndexes::setSuperfundProximity(const QString &superfund_proximity) {
    m_superfund_proximity = superfund_proximity;
    m_superfund_proximity_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_superfund_proximity_Set() const{
    return m_superfund_proximity_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_superfund_proximity_Valid() const{
    return m_superfund_proximity_isValid;
}

QString OAIDfr018_EJScreenIndexes::getTrafficProximity() const {
    return m_traffic_proximity;
}
void OAIDfr018_EJScreenIndexes::setTrafficProximity(const QString &traffic_proximity) {
    m_traffic_proximity = traffic_proximity;
    m_traffic_proximity_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_traffic_proximity_Set() const{
    return m_traffic_proximity_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_traffic_proximity_Valid() const{
    return m_traffic_proximity_isValid;
}

QString OAIDfr018_EJScreenIndexes::getWaterDischargeProximity() const {
    return m_water_discharge_proximity;
}
void OAIDfr018_EJScreenIndexes::setWaterDischargeProximity(const QString &water_discharge_proximity) {
    m_water_discharge_proximity = water_discharge_proximity;
    m_water_discharge_proximity_isSet = true;
}

bool OAIDfr018_EJScreenIndexes::is_water_discharge_proximity_Set() const{
    return m_water_discharge_proximity_isSet;
}

bool OAIDfr018_EJScreenIndexes::is_water_discharge_proximity_Valid() const{
    return m_water_discharge_proximity_isValid;
}

bool OAIDfr018_EJScreenIndexes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hazard_waste_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_paint_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nata_cancer_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nata_diesel_pm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nata_respiratory_hi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over80_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ozone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmp_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superfund_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_discharge_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_EJScreenIndexes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hazard_waste_proximity_isValid && m_lead_paint_indicator_isValid && m_nata_cancer_risk_isValid && m_nata_diesel_pm_isValid && m_nata_respiratory_hi_isValid && m_over80_count_isValid && m_ozone_isValid && m_pm25_isValid && m_rmp_proximity_isValid && m_registry_id_isValid && m_superfund_proximity_isValid && m_traffic_proximity_isValid && m_water_discharge_proximity_isValid && true;
}

} // namespace OpenAPI
