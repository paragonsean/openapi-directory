/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr094.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr094::OAIDfr094(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr094::OAIDfr094() {
    this->initializeModel();
}

OAIDfr094::~OAIDfr094() {}

void OAIDfr094::initializeModel() {

    m_calculated_accuracy_isSet = false;
    m_calculated_accuracy_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_coordinate_source_system_isSet = false;
    m_coordinate_source_system_isValid = false;

    m_coordinate_source_system_id_isSet = false;
    m_coordinate_source_system_id_isValid = false;

    m_latitude83_isSet = false;
    m_latitude83_isValid = false;

    m_longitude83_isSet = false;
    m_longitude83_isValid = false;

    m_reference_point_isSet = false;
    m_reference_point_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;
}

void OAIDfr094::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr094::fromJsonObject(QJsonObject json) {

    m_calculated_accuracy_isValid = ::OpenAPI::fromJsonValue(m_calculated_accuracy, json[QString("CalculatedAccuracy")]);
    m_calculated_accuracy_isSet = !json[QString("CalculatedAccuracy")].isNull() && m_calculated_accuracy_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("CollectionMethod")]);
    m_collection_method_isSet = !json[QString("CollectionMethod")].isNull() && m_collection_method_isValid;

    m_coordinate_source_system_isValid = ::OpenAPI::fromJsonValue(m_coordinate_source_system, json[QString("CoordinateSourceSystem")]);
    m_coordinate_source_system_isSet = !json[QString("CoordinateSourceSystem")].isNull() && m_coordinate_source_system_isValid;

    m_coordinate_source_system_id_isValid = ::OpenAPI::fromJsonValue(m_coordinate_source_system_id, json[QString("CoordinateSourceSystemId")]);
    m_coordinate_source_system_id_isSet = !json[QString("CoordinateSourceSystemId")].isNull() && m_coordinate_source_system_id_isValid;

    m_latitude83_isValid = ::OpenAPI::fromJsonValue(m_latitude83, json[QString("Latitude83")]);
    m_latitude83_isSet = !json[QString("Latitude83")].isNull() && m_latitude83_isValid;

    m_longitude83_isValid = ::OpenAPI::fromJsonValue(m_longitude83, json[QString("Longitude83")]);
    m_longitude83_isSet = !json[QString("Longitude83")].isNull() && m_longitude83_isValid;

    m_reference_point_isValid = ::OpenAPI::fromJsonValue(m_reference_point, json[QString("ReferencePoint")]);
    m_reference_point_isSet = !json[QString("ReferencePoint")].isNull() && m_reference_point_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;
}

QString OAIDfr094::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr094::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_accuracy_isSet) {
        obj.insert(QString("CalculatedAccuracy"), ::OpenAPI::toJsonValue(m_calculated_accuracy));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("CollectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_coordinate_source_system_isSet) {
        obj.insert(QString("CoordinateSourceSystem"), ::OpenAPI::toJsonValue(m_coordinate_source_system));
    }
    if (m_coordinate_source_system_id_isSet) {
        obj.insert(QString("CoordinateSourceSystemId"), ::OpenAPI::toJsonValue(m_coordinate_source_system_id));
    }
    if (m_latitude83_isSet) {
        obj.insert(QString("Latitude83"), ::OpenAPI::toJsonValue(m_latitude83));
    }
    if (m_longitude83_isSet) {
        obj.insert(QString("Longitude83"), ::OpenAPI::toJsonValue(m_longitude83));
    }
    if (m_reference_point_isSet) {
        obj.insert(QString("ReferencePoint"), ::OpenAPI::toJsonValue(m_reference_point));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    return obj;
}

QString OAIDfr094::getCalculatedAccuracy() const {
    return m_calculated_accuracy;
}
void OAIDfr094::setCalculatedAccuracy(const QString &calculated_accuracy) {
    m_calculated_accuracy = calculated_accuracy;
    m_calculated_accuracy_isSet = true;
}

bool OAIDfr094::is_calculated_accuracy_Set() const{
    return m_calculated_accuracy_isSet;
}

bool OAIDfr094::is_calculated_accuracy_Valid() const{
    return m_calculated_accuracy_isValid;
}

QString OAIDfr094::getCollectionMethod() const {
    return m_collection_method;
}
void OAIDfr094::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAIDfr094::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAIDfr094::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

QString OAIDfr094::getCoordinateSourceSystem() const {
    return m_coordinate_source_system;
}
void OAIDfr094::setCoordinateSourceSystem(const QString &coordinate_source_system) {
    m_coordinate_source_system = coordinate_source_system;
    m_coordinate_source_system_isSet = true;
}

bool OAIDfr094::is_coordinate_source_system_Set() const{
    return m_coordinate_source_system_isSet;
}

bool OAIDfr094::is_coordinate_source_system_Valid() const{
    return m_coordinate_source_system_isValid;
}

QString OAIDfr094::getCoordinateSourceSystemId() const {
    return m_coordinate_source_system_id;
}
void OAIDfr094::setCoordinateSourceSystemId(const QString &coordinate_source_system_id) {
    m_coordinate_source_system_id = coordinate_source_system_id;
    m_coordinate_source_system_id_isSet = true;
}

bool OAIDfr094::is_coordinate_source_system_id_Set() const{
    return m_coordinate_source_system_id_isSet;
}

bool OAIDfr094::is_coordinate_source_system_id_Valid() const{
    return m_coordinate_source_system_id_isValid;
}

QString OAIDfr094::getLatitude83() const {
    return m_latitude83;
}
void OAIDfr094::setLatitude83(const QString &latitude83) {
    m_latitude83 = latitude83;
    m_latitude83_isSet = true;
}

bool OAIDfr094::is_latitude83_Set() const{
    return m_latitude83_isSet;
}

bool OAIDfr094::is_latitude83_Valid() const{
    return m_latitude83_isValid;
}

QString OAIDfr094::getLongitude83() const {
    return m_longitude83;
}
void OAIDfr094::setLongitude83(const QString &longitude83) {
    m_longitude83 = longitude83;
    m_longitude83_isSet = true;
}

bool OAIDfr094::is_longitude83_Set() const{
    return m_longitude83_isSet;
}

bool OAIDfr094::is_longitude83_Valid() const{
    return m_longitude83_isValid;
}

QString OAIDfr094::getReferencePoint() const {
    return m_reference_point;
}
void OAIDfr094::setReferencePoint(const QString &reference_point) {
    m_reference_point = reference_point;
    m_reference_point_isSet = true;
}

bool OAIDfr094::is_reference_point_Set() const{
    return m_reference_point_isSet;
}

bool OAIDfr094::is_reference_point_Valid() const{
    return m_reference_point_isValid;
}

QString OAIDfr094::getRegistryId() const {
    return m_registry_id;
}
void OAIDfr094::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIDfr094::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIDfr094::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

bool OAIDfr094::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate_source_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate_source_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude83_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude83_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr094::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calculated_accuracy_isValid && m_collection_method_isValid && m_coordinate_source_system_isValid && m_coordinate_source_system_id_isValid && m_latitude83_isValid && m_longitude83_isValid && m_reference_point_isValid && m_registry_id_isValid && true;
}

} // namespace OpenAPI
