/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDfr070.h
 *
 * Lead and Copper Rule Object
 */

#ifndef OAIDfr070_H
#define OAIDfr070_H

#include <QJsonObject>

#include "OAIDfr071.h"
#include "OAIDfr072.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDfr071;
class OAIDfr072;

class OAIDfr070 : public OAIObject {
public:
    OAIDfr070();
    OAIDfr070(QString json);
    ~OAIDfr070() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDfr071> getCopperSamples() const;
    void setCopperSamples(const QList<OAIDfr071> &copper_samples);
    bool is_copper_samples_Set() const;
    bool is_copper_samples_Valid() const;

    QString getCuAle() const;
    void setCuAle(const QString &cu_ale);
    bool is_cu_ale_Set() const;
    bool is_cu_ale_Valid() const;

    QString getCuAleUnits() const;
    void setCuAleUnits(const QString &cu_ale_units);
    bool is_cu_ale_units_Set() const;
    bool is_cu_ale_units_Valid() const;

    QString getCuAleValue() const;
    void setCuAleValue(const QString &cu_ale_value);
    bool is_cu_ale_value_Set() const;
    bool is_cu_ale_value_Valid() const;

    QString getCuSampleDates() const;
    void setCuSampleDates(const QString &cu_sample_dates);
    bool is_cu_sample_dates_Set() const;
    bool is_cu_sample_dates_Valid() const;

    QString getCuViol() const;
    void setCuViol(const QString &cu_viol);
    bool is_cu_viol_Set() const;
    bool is_cu_viol_Valid() const;

    QString getLeadAndCopperViol() const;
    void setLeadAndCopperViol(const QString &lead_and_copper_viol);
    bool is_lead_and_copper_viol_Set() const;
    bool is_lead_and_copper_viol_Valid() const;

    QString getLeadCopperRuleHealthBasedViol() const;
    void setLeadCopperRuleHealthBasedViol(const QString &lead_copper_rule_health_based_viol);
    bool is_lead_copper_rule_health_based_viol_Set() const;
    bool is_lead_copper_rule_health_based_viol_Valid() const;

    QList<OAIDfr072> getLeadSamples() const;
    void setLeadSamples(const QList<OAIDfr072> &lead_samples);
    bool is_lead_samples_Set() const;
    bool is_lead_samples_Valid() const;

    QString getPbAle() const;
    void setPbAle(const QString &pb_ale);
    bool is_pb_ale_Set() const;
    bool is_pb_ale_Valid() const;

    QString getPbAleUnits() const;
    void setPbAleUnits(const QString &pb_ale_units);
    bool is_pb_ale_units_Set() const;
    bool is_pb_ale_units_Valid() const;

    QString getPbAleValue() const;
    void setPbAleValue(const QString &pb_ale_value);
    bool is_pb_ale_value_Set() const;
    bool is_pb_ale_value_Valid() const;

    QString getPbSampleDates() const;
    void setPbSampleDates(const QString &pb_sample_dates);
    bool is_pb_sample_dates_Set() const;
    bool is_pb_sample_dates_Valid() const;

    QString getPbViol() const;
    void setPbViol(const QString &pb_viol);
    bool is_pb_viol_Set() const;
    bool is_pb_viol_Valid() const;

    QString getRuleCode350Viol() const;
    void setRuleCode350Viol(const QString &rule_code350_viol);
    bool is_rule_code350_viol_Set() const;
    bool is_rule_code350_viol_Valid() const;

    QString getSourceId() const;
    void setSourceId(const QString &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getICu90() const;
    void setICu90(const QString &i_cu90);
    bool is_i_cu90_Set() const;
    bool is_i_cu90_Valid() const;

    QString getIPb90() const;
    void setIPb90(const QString &i_pb90);
    bool is_i_pb90_Set() const;
    bool is_i_pb90_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDfr071> m_copper_samples;
    bool m_copper_samples_isSet;
    bool m_copper_samples_isValid;

    QString m_cu_ale;
    bool m_cu_ale_isSet;
    bool m_cu_ale_isValid;

    QString m_cu_ale_units;
    bool m_cu_ale_units_isSet;
    bool m_cu_ale_units_isValid;

    QString m_cu_ale_value;
    bool m_cu_ale_value_isSet;
    bool m_cu_ale_value_isValid;

    QString m_cu_sample_dates;
    bool m_cu_sample_dates_isSet;
    bool m_cu_sample_dates_isValid;

    QString m_cu_viol;
    bool m_cu_viol_isSet;
    bool m_cu_viol_isValid;

    QString m_lead_and_copper_viol;
    bool m_lead_and_copper_viol_isSet;
    bool m_lead_and_copper_viol_isValid;

    QString m_lead_copper_rule_health_based_viol;
    bool m_lead_copper_rule_health_based_viol_isSet;
    bool m_lead_copper_rule_health_based_viol_isValid;

    QList<OAIDfr072> m_lead_samples;
    bool m_lead_samples_isSet;
    bool m_lead_samples_isValid;

    QString m_pb_ale;
    bool m_pb_ale_isSet;
    bool m_pb_ale_isValid;

    QString m_pb_ale_units;
    bool m_pb_ale_units_isSet;
    bool m_pb_ale_units_isValid;

    QString m_pb_ale_value;
    bool m_pb_ale_value_isSet;
    bool m_pb_ale_value_isValid;

    QString m_pb_sample_dates;
    bool m_pb_sample_dates_isSet;
    bool m_pb_sample_dates_isValid;

    QString m_pb_viol;
    bool m_pb_viol_isSet;
    bool m_pb_viol_isValid;

    QString m_rule_code350_viol;
    bool m_rule_code350_viol_isSet;
    bool m_rule_code350_viol_isValid;

    QString m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_i_cu90;
    bool m_i_cu90_isSet;
    bool m_i_cu90_isValid;

    QString m_i_pb90;
    bool m_i_pb90_isSet;
    bool m_i_pb90_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDfr070)

#endif // OAIDfr070_H
