/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr069.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr069::OAIDfr069(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr069::OAIDfr069() {
    this->initializeModel();
}

OAIDfr069::~OAIDfr069() {}

void OAIDfr069::initializeModel() {

    m_date_last_inspection_isSet = false;
    m_date_last_inspection_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_formal_enf_act_count_isSet = false;
    m_formal_enf_act_count_isValid = false;

    m_inspection_count_isSet = false;
    m_inspection_count_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_total_penalties_isSet = false;
    m_total_penalties_isValid = false;
}

void OAIDfr069::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr069::fromJsonObject(QJsonObject json) {

    m_date_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_date_last_inspection, json[QString("DateLastInspection")]);
    m_date_last_inspection_isSet = !json[QString("DateLastInspection")].isNull() && m_date_last_inspection_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_formal_enf_act_count_isValid = ::OpenAPI::fromJsonValue(m_formal_enf_act_count, json[QString("FormalEnfActCount")]);
    m_formal_enf_act_count_isSet = !json[QString("FormalEnfActCount")].isNull() && m_formal_enf_act_count_isValid;

    m_inspection_count_isValid = ::OpenAPI::fromJsonValue(m_inspection_count, json[QString("InspectionCount")]);
    m_inspection_count_isSet = !json[QString("InspectionCount")].isNull() && m_inspection_count_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_total_penalties, json[QString("TotalPenalties")]);
    m_total_penalties_isSet = !json[QString("TotalPenalties")].isNull() && m_total_penalties_isValid;
}

QString OAIDfr069::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr069::asJsonObject() const {
    QJsonObject obj;
    if (m_date_last_inspection_isSet) {
        obj.insert(QString("DateLastInspection"), ::OpenAPI::toJsonValue(m_date_last_inspection));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_formal_enf_act_count_isSet) {
        obj.insert(QString("FormalEnfActCount"), ::OpenAPI::toJsonValue(m_formal_enf_act_count));
    }
    if (m_inspection_count_isSet) {
        obj.insert(QString("InspectionCount"), ::OpenAPI::toJsonValue(m_inspection_count));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_total_penalties_isSet) {
        obj.insert(QString("TotalPenalties"), ::OpenAPI::toJsonValue(m_total_penalties));
    }
    return obj;
}

QString OAIDfr069::getDateLastInspection() const {
    return m_date_last_inspection;
}
void OAIDfr069::setDateLastInspection(const QString &date_last_inspection) {
    m_date_last_inspection = date_last_inspection;
    m_date_last_inspection_isSet = true;
}

bool OAIDfr069::is_date_last_inspection_Set() const{
    return m_date_last_inspection_isSet;
}

bool OAIDfr069::is_date_last_inspection_Valid() const{
    return m_date_last_inspection_isValid;
}

QString OAIDfr069::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr069::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr069::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr069::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr069::getFormalEnfActCount() const {
    return m_formal_enf_act_count;
}
void OAIDfr069::setFormalEnfActCount(const QString &formal_enf_act_count) {
    m_formal_enf_act_count = formal_enf_act_count;
    m_formal_enf_act_count_isSet = true;
}

bool OAIDfr069::is_formal_enf_act_count_Set() const{
    return m_formal_enf_act_count_isSet;
}

bool OAIDfr069::is_formal_enf_act_count_Valid() const{
    return m_formal_enf_act_count_isValid;
}

QString OAIDfr069::getInspectionCount() const {
    return m_inspection_count;
}
void OAIDfr069::setInspectionCount(const QString &inspection_count) {
    m_inspection_count = inspection_count;
    m_inspection_count_isSet = true;
}

bool OAIDfr069::is_inspection_count_Set() const{
    return m_inspection_count_isSet;
}

bool OAIDfr069::is_inspection_count_Valid() const{
    return m_inspection_count_isValid;
}

QString OAIDfr069::getSourceId() const {
    return m_source_id;
}
void OAIDfr069::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr069::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr069::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr069::getStatute() const {
    return m_statute;
}
void OAIDfr069::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIDfr069::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIDfr069::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAIDfr069::getTotalPenalties() const {
    return m_total_penalties;
}
void OAIDfr069::setTotalPenalties(const QString &total_penalties) {
    m_total_penalties = total_penalties;
    m_total_penalties_isSet = true;
}

bool OAIDfr069::is_total_penalties_Set() const{
    return m_total_penalties_isSet;
}

bool OAIDfr069::is_total_penalties_Valid() const{
    return m_total_penalties_isValid;
}

bool OAIDfr069::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formal_enf_act_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr069::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_last_inspection_isValid && m_epa_system_isValid && m_formal_enf_act_count_isValid && m_inspection_count_isValid && m_source_id_isValid && m_statute_isValid && m_total_penalties_isValid && true;
}

} // namespace OpenAPI
