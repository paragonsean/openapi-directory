/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_Summaries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_Summaries::OAIDfr018_Summaries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_Summaries::OAIDfr018_Summaries() {
    this->initializeModel();
}

OAIDfr018_Summaries::~OAIDfr018_Summaries() {}

void OAIDfr018_Summaries::initializeModel() {

    m_cases_isSet = false;
    m_cases_isValid = false;

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_formal_actions_isSet = false;
    m_formal_actions_isValid = false;

    m_informal_actions_isSet = false;
    m_informal_actions_isValid = false;

    m_inspections_isSet = false;
    m_inspections_isValid = false;

    m_last_inspection_isSet = false;
    m_last_inspection_isValid = false;

    m_qtrs_in_nc_isSet = false;
    m_qtrs_in_nc_isValid = false;

    m_qtrs_in_snc_isSet = false;
    m_qtrs_in_snc_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_total_case_penalties_isSet = false;
    m_total_case_penalties_isValid = false;

    m_total_penalties_isSet = false;
    m_total_penalties_isValid = false;
}

void OAIDfr018_Summaries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_Summaries::fromJsonObject(QJsonObject json) {

    m_cases_isValid = ::OpenAPI::fromJsonValue(m_cases, json[QString("Cases")]);
    m_cases_isSet = !json[QString("Cases")].isNull() && m_cases_isValid;

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("CurrentStatus")]);
    m_current_status_isSet = !json[QString("CurrentStatus")].isNull() && m_current_status_isValid;

    m_formal_actions_isValid = ::OpenAPI::fromJsonValue(m_formal_actions, json[QString("FormalActions")]);
    m_formal_actions_isSet = !json[QString("FormalActions")].isNull() && m_formal_actions_isValid;

    m_informal_actions_isValid = ::OpenAPI::fromJsonValue(m_informal_actions, json[QString("InformalActions")]);
    m_informal_actions_isSet = !json[QString("InformalActions")].isNull() && m_informal_actions_isValid;

    m_inspections_isValid = ::OpenAPI::fromJsonValue(m_inspections, json[QString("Inspections")]);
    m_inspections_isSet = !json[QString("Inspections")].isNull() && m_inspections_isValid;

    m_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_last_inspection, json[QString("LastInspection")]);
    m_last_inspection_isSet = !json[QString("LastInspection")].isNull() && m_last_inspection_isValid;

    m_qtrs_in_nc_isValid = ::OpenAPI::fromJsonValue(m_qtrs_in_nc, json[QString("QtrsInNC")]);
    m_qtrs_in_nc_isSet = !json[QString("QtrsInNC")].isNull() && m_qtrs_in_nc_isValid;

    m_qtrs_in_snc_isValid = ::OpenAPI::fromJsonValue(m_qtrs_in_snc, json[QString("QtrsInSNC")]);
    m_qtrs_in_snc_isSet = !json[QString("QtrsInSNC")].isNull() && m_qtrs_in_snc_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_total_case_penalties_isValid = ::OpenAPI::fromJsonValue(m_total_case_penalties, json[QString("TotalCasePenalties")]);
    m_total_case_penalties_isSet = !json[QString("TotalCasePenalties")].isNull() && m_total_case_penalties_isValid;

    m_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_total_penalties, json[QString("TotalPenalties")]);
    m_total_penalties_isSet = !json[QString("TotalPenalties")].isNull() && m_total_penalties_isValid;
}

QString OAIDfr018_Summaries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_Summaries::asJsonObject() const {
    QJsonObject obj;
    if (m_cases_isSet) {
        obj.insert(QString("Cases"), ::OpenAPI::toJsonValue(m_cases));
    }
    if (m_current_status_isSet) {
        obj.insert(QString("CurrentStatus"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_formal_actions_isSet) {
        obj.insert(QString("FormalActions"), ::OpenAPI::toJsonValue(m_formal_actions));
    }
    if (m_informal_actions_isSet) {
        obj.insert(QString("InformalActions"), ::OpenAPI::toJsonValue(m_informal_actions));
    }
    if (m_inspections_isSet) {
        obj.insert(QString("Inspections"), ::OpenAPI::toJsonValue(m_inspections));
    }
    if (m_last_inspection_isSet) {
        obj.insert(QString("LastInspection"), ::OpenAPI::toJsonValue(m_last_inspection));
    }
    if (m_qtrs_in_nc_isSet) {
        obj.insert(QString("QtrsInNC"), ::OpenAPI::toJsonValue(m_qtrs_in_nc));
    }
    if (m_qtrs_in_snc_isSet) {
        obj.insert(QString("QtrsInSNC"), ::OpenAPI::toJsonValue(m_qtrs_in_snc));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_total_case_penalties_isSet) {
        obj.insert(QString("TotalCasePenalties"), ::OpenAPI::toJsonValue(m_total_case_penalties));
    }
    if (m_total_penalties_isSet) {
        obj.insert(QString("TotalPenalties"), ::OpenAPI::toJsonValue(m_total_penalties));
    }
    return obj;
}

QString OAIDfr018_Summaries::getCases() const {
    return m_cases;
}
void OAIDfr018_Summaries::setCases(const QString &cases) {
    m_cases = cases;
    m_cases_isSet = true;
}

bool OAIDfr018_Summaries::is_cases_Set() const{
    return m_cases_isSet;
}

bool OAIDfr018_Summaries::is_cases_Valid() const{
    return m_cases_isValid;
}

QString OAIDfr018_Summaries::getCurrentStatus() const {
    return m_current_status;
}
void OAIDfr018_Summaries::setCurrentStatus(const QString &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAIDfr018_Summaries::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAIDfr018_Summaries::is_current_status_Valid() const{
    return m_current_status_isValid;
}

QString OAIDfr018_Summaries::getFormalActions() const {
    return m_formal_actions;
}
void OAIDfr018_Summaries::setFormalActions(const QString &formal_actions) {
    m_formal_actions = formal_actions;
    m_formal_actions_isSet = true;
}

bool OAIDfr018_Summaries::is_formal_actions_Set() const{
    return m_formal_actions_isSet;
}

bool OAIDfr018_Summaries::is_formal_actions_Valid() const{
    return m_formal_actions_isValid;
}

QString OAIDfr018_Summaries::getInformalActions() const {
    return m_informal_actions;
}
void OAIDfr018_Summaries::setInformalActions(const QString &informal_actions) {
    m_informal_actions = informal_actions;
    m_informal_actions_isSet = true;
}

bool OAIDfr018_Summaries::is_informal_actions_Set() const{
    return m_informal_actions_isSet;
}

bool OAIDfr018_Summaries::is_informal_actions_Valid() const{
    return m_informal_actions_isValid;
}

QString OAIDfr018_Summaries::getInspections() const {
    return m_inspections;
}
void OAIDfr018_Summaries::setInspections(const QString &inspections) {
    m_inspections = inspections;
    m_inspections_isSet = true;
}

bool OAIDfr018_Summaries::is_inspections_Set() const{
    return m_inspections_isSet;
}

bool OAIDfr018_Summaries::is_inspections_Valid() const{
    return m_inspections_isValid;
}

QString OAIDfr018_Summaries::getLastInspection() const {
    return m_last_inspection;
}
void OAIDfr018_Summaries::setLastInspection(const QString &last_inspection) {
    m_last_inspection = last_inspection;
    m_last_inspection_isSet = true;
}

bool OAIDfr018_Summaries::is_last_inspection_Set() const{
    return m_last_inspection_isSet;
}

bool OAIDfr018_Summaries::is_last_inspection_Valid() const{
    return m_last_inspection_isValid;
}

QString OAIDfr018_Summaries::getQtrsInNc() const {
    return m_qtrs_in_nc;
}
void OAIDfr018_Summaries::setQtrsInNc(const QString &qtrs_in_nc) {
    m_qtrs_in_nc = qtrs_in_nc;
    m_qtrs_in_nc_isSet = true;
}

bool OAIDfr018_Summaries::is_qtrs_in_nc_Set() const{
    return m_qtrs_in_nc_isSet;
}

bool OAIDfr018_Summaries::is_qtrs_in_nc_Valid() const{
    return m_qtrs_in_nc_isValid;
}

QString OAIDfr018_Summaries::getQtrsInSnc() const {
    return m_qtrs_in_snc;
}
void OAIDfr018_Summaries::setQtrsInSnc(const QString &qtrs_in_snc) {
    m_qtrs_in_snc = qtrs_in_snc;
    m_qtrs_in_snc_isSet = true;
}

bool OAIDfr018_Summaries::is_qtrs_in_snc_Set() const{
    return m_qtrs_in_snc_isSet;
}

bool OAIDfr018_Summaries::is_qtrs_in_snc_Valid() const{
    return m_qtrs_in_snc_isValid;
}

QString OAIDfr018_Summaries::getStatute() const {
    return m_statute;
}
void OAIDfr018_Summaries::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIDfr018_Summaries::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIDfr018_Summaries::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAIDfr018_Summaries::getTotalCasePenalties() const {
    return m_total_case_penalties;
}
void OAIDfr018_Summaries::setTotalCasePenalties(const QString &total_case_penalties) {
    m_total_case_penalties = total_case_penalties;
    m_total_case_penalties_isSet = true;
}

bool OAIDfr018_Summaries::is_total_case_penalties_Set() const{
    return m_total_case_penalties_isSet;
}

bool OAIDfr018_Summaries::is_total_case_penalties_Valid() const{
    return m_total_case_penalties_isValid;
}

QString OAIDfr018_Summaries::getTotalPenalties() const {
    return m_total_penalties;
}
void OAIDfr018_Summaries::setTotalPenalties(const QString &total_penalties) {
    m_total_penalties = total_penalties;
    m_total_penalties_isSet = true;
}

bool OAIDfr018_Summaries::is_total_penalties_Set() const{
    return m_total_penalties_isSet;
}

bool OAIDfr018_Summaries::is_total_penalties_Valid() const{
    return m_total_penalties_isValid;
}

bool OAIDfr018_Summaries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formal_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_informal_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtrs_in_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtrs_in_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_case_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_Summaries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cases_isValid && m_current_status_isValid && m_formal_actions_isValid && m_informal_actions_isValid && m_inspections_isValid && m_last_inspection_isValid && m_qtrs_in_nc_isValid && m_qtrs_in_snc_isValid && m_statute_isValid && m_total_case_penalties_isValid && m_total_penalties_isValid && true;
}

} // namespace OpenAPI
