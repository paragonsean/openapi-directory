/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources() {
    this->initializeModel();
}

OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::~OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources() {}

void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::initializeModel() {

    m_days_late_isSet = false;
    m_days_late_isValid = false;

    m_dmr_due_date_isSet = false;
    m_dmr_due_date_isValid = false;

    m_limit_begin_date_isSet = false;
    m_limit_begin_date_isValid = false;

    m_limit_end_date_isSet = false;
    m_limit_end_date_isValid = false;

    m_limit_id_isSet = false;
    m_limit_id_isValid = false;

    m_limit_set_name_isSet = false;
    m_limit_set_name_isValid = false;

    m_missing_late_isSet = false;
    m_missing_late_isValid = false;

    m_monitoring_location_code_isSet = false;
    m_monitoring_location_code_isValid = false;

    m_monitoring_location_desc_isSet = false;
    m_monitoring_location_desc_isValid = false;

    m_monitoring_period_end_date_isSet = false;
    m_monitoring_period_end_date_isValid = false;

    m_npdesid_isSet = false;
    m_npdesid_isValid = false;

    m_nodi_code_isSet = false;
    m_nodi_code_isValid = false;

    m_nodi_desc_isSet = false;
    m_nodi_desc_isValid = false;

    m_nodi_validation_flag_isSet = false;
    m_nodi_validation_flag_isValid = false;

    m_npdes_violation_id_isSet = false;
    m_npdes_violation_id_isValid = false;

    m_parameter_code_isSet = false;
    m_parameter_code_isValid = false;

    m_parameter_desc_isSet = false;
    m_parameter_desc_isValid = false;

    m_perm_feature_nmbr_isSet = false;
    m_perm_feature_nmbr_isValid = false;

    m_rnc_detection_code_isSet = false;
    m_rnc_detection_code_isValid = false;

    m_rnc_detection_date_isSet = false;
    m_rnc_detection_date_isValid = false;

    m_rnc_detection_desc_isSet = false;
    m_rnc_detection_desc_isValid = false;

    m_rnc_resolution_code_isSet = false;
    m_rnc_resolution_code_isValid = false;

    m_rnc_resolution_date_isSet = false;
    m_rnc_resolution_date_isValid = false;

    m_rnc_resolution_desc_isSet = false;
    m_rnc_resolution_desc_isValid = false;

    m_statistical_base_monthly_avg_isSet = false;
    m_statistical_base_monthly_avg_isValid = false;

    m_value_received_date_isSet = false;
    m_value_received_date_isValid = false;

    m_value_type_code_isSet = false;
    m_value_type_code_isValid = false;

    m_version_nmbr_isSet = false;
    m_version_nmbr_isValid = false;

    m_violation_code_isSet = false;
    m_violation_code_isValid = false;
}

void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::fromJsonObject(QJsonObject json) {

    m_days_late_isValid = ::OpenAPI::fromJsonValue(m_days_late, json[QString("DaysLate")]);
    m_days_late_isSet = !json[QString("DaysLate")].isNull() && m_days_late_isValid;

    m_dmr_due_date_isValid = ::OpenAPI::fromJsonValue(m_dmr_due_date, json[QString("DmrDueDate")]);
    m_dmr_due_date_isSet = !json[QString("DmrDueDate")].isNull() && m_dmr_due_date_isValid;

    m_limit_begin_date_isValid = ::OpenAPI::fromJsonValue(m_limit_begin_date, json[QString("LimitBeginDate")]);
    m_limit_begin_date_isSet = !json[QString("LimitBeginDate")].isNull() && m_limit_begin_date_isValid;

    m_limit_end_date_isValid = ::OpenAPI::fromJsonValue(m_limit_end_date, json[QString("LimitEndDate")]);
    m_limit_end_date_isSet = !json[QString("LimitEndDate")].isNull() && m_limit_end_date_isValid;

    m_limit_id_isValid = ::OpenAPI::fromJsonValue(m_limit_id, json[QString("LimitId")]);
    m_limit_id_isSet = !json[QString("LimitId")].isNull() && m_limit_id_isValid;

    m_limit_set_name_isValid = ::OpenAPI::fromJsonValue(m_limit_set_name, json[QString("LimitSetName")]);
    m_limit_set_name_isSet = !json[QString("LimitSetName")].isNull() && m_limit_set_name_isValid;

    m_missing_late_isValid = ::OpenAPI::fromJsonValue(m_missing_late, json[QString("MissingLate")]);
    m_missing_late_isSet = !json[QString("MissingLate")].isNull() && m_missing_late_isValid;

    m_monitoring_location_code_isValid = ::OpenAPI::fromJsonValue(m_monitoring_location_code, json[QString("MonitoringLocationCode")]);
    m_monitoring_location_code_isSet = !json[QString("MonitoringLocationCode")].isNull() && m_monitoring_location_code_isValid;

    m_monitoring_location_desc_isValid = ::OpenAPI::fromJsonValue(m_monitoring_location_desc, json[QString("MonitoringLocationDesc")]);
    m_monitoring_location_desc_isSet = !json[QString("MonitoringLocationDesc")].isNull() && m_monitoring_location_desc_isValid;

    m_monitoring_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_monitoring_period_end_date, json[QString("MonitoringPeriodEndDate")]);
    m_monitoring_period_end_date_isSet = !json[QString("MonitoringPeriodEndDate")].isNull() && m_monitoring_period_end_date_isValid;

    m_npdesid_isValid = ::OpenAPI::fromJsonValue(m_npdesid, json[QString("NPDESId")]);
    m_npdesid_isSet = !json[QString("NPDESId")].isNull() && m_npdesid_isValid;

    m_nodi_code_isValid = ::OpenAPI::fromJsonValue(m_nodi_code, json[QString("NodiCode")]);
    m_nodi_code_isSet = !json[QString("NodiCode")].isNull() && m_nodi_code_isValid;

    m_nodi_desc_isValid = ::OpenAPI::fromJsonValue(m_nodi_desc, json[QString("NodiDesc")]);
    m_nodi_desc_isSet = !json[QString("NodiDesc")].isNull() && m_nodi_desc_isValid;

    m_nodi_validation_flag_isValid = ::OpenAPI::fromJsonValue(m_nodi_validation_flag, json[QString("NodiValidationFlag")]);
    m_nodi_validation_flag_isSet = !json[QString("NodiValidationFlag")].isNull() && m_nodi_validation_flag_isValid;

    m_npdes_violation_id_isValid = ::OpenAPI::fromJsonValue(m_npdes_violation_id, json[QString("NpdesViolationId")]);
    m_npdes_violation_id_isSet = !json[QString("NpdesViolationId")].isNull() && m_npdes_violation_id_isValid;

    m_parameter_code_isValid = ::OpenAPI::fromJsonValue(m_parameter_code, json[QString("ParameterCode")]);
    m_parameter_code_isSet = !json[QString("ParameterCode")].isNull() && m_parameter_code_isValid;

    m_parameter_desc_isValid = ::OpenAPI::fromJsonValue(m_parameter_desc, json[QString("ParameterDesc")]);
    m_parameter_desc_isSet = !json[QString("ParameterDesc")].isNull() && m_parameter_desc_isValid;

    m_perm_feature_nmbr_isValid = ::OpenAPI::fromJsonValue(m_perm_feature_nmbr, json[QString("PermFeatureNmbr")]);
    m_perm_feature_nmbr_isSet = !json[QString("PermFeatureNmbr")].isNull() && m_perm_feature_nmbr_isValid;

    m_rnc_detection_code_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_code, json[QString("RncDetectionCode")]);
    m_rnc_detection_code_isSet = !json[QString("RncDetectionCode")].isNull() && m_rnc_detection_code_isValid;

    m_rnc_detection_date_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_date, json[QString("RncDetectionDate")]);
    m_rnc_detection_date_isSet = !json[QString("RncDetectionDate")].isNull() && m_rnc_detection_date_isValid;

    m_rnc_detection_desc_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_desc, json[QString("RncDetectionDesc")]);
    m_rnc_detection_desc_isSet = !json[QString("RncDetectionDesc")].isNull() && m_rnc_detection_desc_isValid;

    m_rnc_resolution_code_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_code, json[QString("RncResolutionCode")]);
    m_rnc_resolution_code_isSet = !json[QString("RncResolutionCode")].isNull() && m_rnc_resolution_code_isValid;

    m_rnc_resolution_date_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_date, json[QString("RncResolutionDate")]);
    m_rnc_resolution_date_isSet = !json[QString("RncResolutionDate")].isNull() && m_rnc_resolution_date_isValid;

    m_rnc_resolution_desc_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_desc, json[QString("RncResolutionDesc")]);
    m_rnc_resolution_desc_isSet = !json[QString("RncResolutionDesc")].isNull() && m_rnc_resolution_desc_isValid;

    m_statistical_base_monthly_avg_isValid = ::OpenAPI::fromJsonValue(m_statistical_base_monthly_avg, json[QString("StatisticalBaseMonthlyAvg")]);
    m_statistical_base_monthly_avg_isSet = !json[QString("StatisticalBaseMonthlyAvg")].isNull() && m_statistical_base_monthly_avg_isValid;

    m_value_received_date_isValid = ::OpenAPI::fromJsonValue(m_value_received_date, json[QString("ValueReceivedDate")]);
    m_value_received_date_isSet = !json[QString("ValueReceivedDate")].isNull() && m_value_received_date_isValid;

    m_value_type_code_isValid = ::OpenAPI::fromJsonValue(m_value_type_code, json[QString("ValueTypeCode")]);
    m_value_type_code_isSet = !json[QString("ValueTypeCode")].isNull() && m_value_type_code_isValid;

    m_version_nmbr_isValid = ::OpenAPI::fromJsonValue(m_version_nmbr, json[QString("VersionNmbr")]);
    m_version_nmbr_isSet = !json[QString("VersionNmbr")].isNull() && m_version_nmbr_isValid;

    m_violation_code_isValid = ::OpenAPI::fromJsonValue(m_violation_code, json[QString("ViolationCode")]);
    m_violation_code_isSet = !json[QString("ViolationCode")].isNull() && m_violation_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::asJsonObject() const {
    QJsonObject obj;
    if (m_days_late_isSet) {
        obj.insert(QString("DaysLate"), ::OpenAPI::toJsonValue(m_days_late));
    }
    if (m_dmr_due_date_isSet) {
        obj.insert(QString("DmrDueDate"), ::OpenAPI::toJsonValue(m_dmr_due_date));
    }
    if (m_limit_begin_date_isSet) {
        obj.insert(QString("LimitBeginDate"), ::OpenAPI::toJsonValue(m_limit_begin_date));
    }
    if (m_limit_end_date_isSet) {
        obj.insert(QString("LimitEndDate"), ::OpenAPI::toJsonValue(m_limit_end_date));
    }
    if (m_limit_id_isSet) {
        obj.insert(QString("LimitId"), ::OpenAPI::toJsonValue(m_limit_id));
    }
    if (m_limit_set_name_isSet) {
        obj.insert(QString("LimitSetName"), ::OpenAPI::toJsonValue(m_limit_set_name));
    }
    if (m_missing_late_isSet) {
        obj.insert(QString("MissingLate"), ::OpenAPI::toJsonValue(m_missing_late));
    }
    if (m_monitoring_location_code_isSet) {
        obj.insert(QString("MonitoringLocationCode"), ::OpenAPI::toJsonValue(m_monitoring_location_code));
    }
    if (m_monitoring_location_desc_isSet) {
        obj.insert(QString("MonitoringLocationDesc"), ::OpenAPI::toJsonValue(m_monitoring_location_desc));
    }
    if (m_monitoring_period_end_date_isSet) {
        obj.insert(QString("MonitoringPeriodEndDate"), ::OpenAPI::toJsonValue(m_monitoring_period_end_date));
    }
    if (m_npdesid_isSet) {
        obj.insert(QString("NPDESId"), ::OpenAPI::toJsonValue(m_npdesid));
    }
    if (m_nodi_code_isSet) {
        obj.insert(QString("NodiCode"), ::OpenAPI::toJsonValue(m_nodi_code));
    }
    if (m_nodi_desc_isSet) {
        obj.insert(QString("NodiDesc"), ::OpenAPI::toJsonValue(m_nodi_desc));
    }
    if (m_nodi_validation_flag_isSet) {
        obj.insert(QString("NodiValidationFlag"), ::OpenAPI::toJsonValue(m_nodi_validation_flag));
    }
    if (m_npdes_violation_id_isSet) {
        obj.insert(QString("NpdesViolationId"), ::OpenAPI::toJsonValue(m_npdes_violation_id));
    }
    if (m_parameter_code_isSet) {
        obj.insert(QString("ParameterCode"), ::OpenAPI::toJsonValue(m_parameter_code));
    }
    if (m_parameter_desc_isSet) {
        obj.insert(QString("ParameterDesc"), ::OpenAPI::toJsonValue(m_parameter_desc));
    }
    if (m_perm_feature_nmbr_isSet) {
        obj.insert(QString("PermFeatureNmbr"), ::OpenAPI::toJsonValue(m_perm_feature_nmbr));
    }
    if (m_rnc_detection_code_isSet) {
        obj.insert(QString("RncDetectionCode"), ::OpenAPI::toJsonValue(m_rnc_detection_code));
    }
    if (m_rnc_detection_date_isSet) {
        obj.insert(QString("RncDetectionDate"), ::OpenAPI::toJsonValue(m_rnc_detection_date));
    }
    if (m_rnc_detection_desc_isSet) {
        obj.insert(QString("RncDetectionDesc"), ::OpenAPI::toJsonValue(m_rnc_detection_desc));
    }
    if (m_rnc_resolution_code_isSet) {
        obj.insert(QString("RncResolutionCode"), ::OpenAPI::toJsonValue(m_rnc_resolution_code));
    }
    if (m_rnc_resolution_date_isSet) {
        obj.insert(QString("RncResolutionDate"), ::OpenAPI::toJsonValue(m_rnc_resolution_date));
    }
    if (m_rnc_resolution_desc_isSet) {
        obj.insert(QString("RncResolutionDesc"), ::OpenAPI::toJsonValue(m_rnc_resolution_desc));
    }
    if (m_statistical_base_monthly_avg_isSet) {
        obj.insert(QString("StatisticalBaseMonthlyAvg"), ::OpenAPI::toJsonValue(m_statistical_base_monthly_avg));
    }
    if (m_value_received_date_isSet) {
        obj.insert(QString("ValueReceivedDate"), ::OpenAPI::toJsonValue(m_value_received_date));
    }
    if (m_value_type_code_isSet) {
        obj.insert(QString("ValueTypeCode"), ::OpenAPI::toJsonValue(m_value_type_code));
    }
    if (m_version_nmbr_isSet) {
        obj.insert(QString("VersionNmbr"), ::OpenAPI::toJsonValue(m_version_nmbr));
    }
    if (m_violation_code_isSet) {
        obj.insert(QString("ViolationCode"), ::OpenAPI::toJsonValue(m_violation_code));
    }
    return obj;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getDaysLate() const {
    return m_days_late;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setDaysLate(const QString &days_late) {
    m_days_late = days_late;
    m_days_late_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_days_late_Set() const{
    return m_days_late_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_days_late_Valid() const{
    return m_days_late_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getDmrDueDate() const {
    return m_dmr_due_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setDmrDueDate(const QString &dmr_due_date) {
    m_dmr_due_date = dmr_due_date;
    m_dmr_due_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_dmr_due_date_Set() const{
    return m_dmr_due_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_dmr_due_date_Valid() const{
    return m_dmr_due_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getLimitBeginDate() const {
    return m_limit_begin_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setLimitBeginDate(const QString &limit_begin_date) {
    m_limit_begin_date = limit_begin_date;
    m_limit_begin_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_begin_date_Set() const{
    return m_limit_begin_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_begin_date_Valid() const{
    return m_limit_begin_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getLimitEndDate() const {
    return m_limit_end_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setLimitEndDate(const QString &limit_end_date) {
    m_limit_end_date = limit_end_date;
    m_limit_end_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_end_date_Set() const{
    return m_limit_end_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_end_date_Valid() const{
    return m_limit_end_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getLimitId() const {
    return m_limit_id;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setLimitId(const QString &limit_id) {
    m_limit_id = limit_id;
    m_limit_id_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_id_Set() const{
    return m_limit_id_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_id_Valid() const{
    return m_limit_id_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getLimitSetName() const {
    return m_limit_set_name;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setLimitSetName(const QString &limit_set_name) {
    m_limit_set_name = limit_set_name;
    m_limit_set_name_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_set_name_Set() const{
    return m_limit_set_name_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_limit_set_name_Valid() const{
    return m_limit_set_name_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getMissingLate() const {
    return m_missing_late;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setMissingLate(const QString &missing_late) {
    m_missing_late = missing_late;
    m_missing_late_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_missing_late_Set() const{
    return m_missing_late_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_missing_late_Valid() const{
    return m_missing_late_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getMonitoringLocationCode() const {
    return m_monitoring_location_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setMonitoringLocationCode(const QString &monitoring_location_code) {
    m_monitoring_location_code = monitoring_location_code;
    m_monitoring_location_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_location_code_Set() const{
    return m_monitoring_location_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_location_code_Valid() const{
    return m_monitoring_location_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getMonitoringLocationDesc() const {
    return m_monitoring_location_desc;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setMonitoringLocationDesc(const QString &monitoring_location_desc) {
    m_monitoring_location_desc = monitoring_location_desc;
    m_monitoring_location_desc_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_location_desc_Set() const{
    return m_monitoring_location_desc_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_location_desc_Valid() const{
    return m_monitoring_location_desc_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getMonitoringPeriodEndDate() const {
    return m_monitoring_period_end_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setMonitoringPeriodEndDate(const QString &monitoring_period_end_date) {
    m_monitoring_period_end_date = monitoring_period_end_date;
    m_monitoring_period_end_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_period_end_date_Set() const{
    return m_monitoring_period_end_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_monitoring_period_end_date_Valid() const{
    return m_monitoring_period_end_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getNpdesid() const {
    return m_npdesid;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setNpdesid(const QString &npdesid) {
    m_npdesid = npdesid;
    m_npdesid_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_npdesid_Set() const{
    return m_npdesid_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_npdesid_Valid() const{
    return m_npdesid_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getNodiCode() const {
    return m_nodi_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setNodiCode(const QString &nodi_code) {
    m_nodi_code = nodi_code;
    m_nodi_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_code_Set() const{
    return m_nodi_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_code_Valid() const{
    return m_nodi_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getNodiDesc() const {
    return m_nodi_desc;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setNodiDesc(const QString &nodi_desc) {
    m_nodi_desc = nodi_desc;
    m_nodi_desc_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_desc_Set() const{
    return m_nodi_desc_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_desc_Valid() const{
    return m_nodi_desc_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getNodiValidationFlag() const {
    return m_nodi_validation_flag;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setNodiValidationFlag(const QString &nodi_validation_flag) {
    m_nodi_validation_flag = nodi_validation_flag;
    m_nodi_validation_flag_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_validation_flag_Set() const{
    return m_nodi_validation_flag_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_nodi_validation_flag_Valid() const{
    return m_nodi_validation_flag_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getNpdesViolationId() const {
    return m_npdes_violation_id;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setNpdesViolationId(const QString &npdes_violation_id) {
    m_npdes_violation_id = npdes_violation_id;
    m_npdes_violation_id_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_npdes_violation_id_Set() const{
    return m_npdes_violation_id_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_npdes_violation_id_Valid() const{
    return m_npdes_violation_id_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getParameterCode() const {
    return m_parameter_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setParameterCode(const QString &parameter_code) {
    m_parameter_code = parameter_code;
    m_parameter_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_parameter_code_Set() const{
    return m_parameter_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_parameter_code_Valid() const{
    return m_parameter_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getParameterDesc() const {
    return m_parameter_desc;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setParameterDesc(const QString &parameter_desc) {
    m_parameter_desc = parameter_desc;
    m_parameter_desc_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_parameter_desc_Set() const{
    return m_parameter_desc_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_parameter_desc_Valid() const{
    return m_parameter_desc_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getPermFeatureNmbr() const {
    return m_perm_feature_nmbr;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setPermFeatureNmbr(const QString &perm_feature_nmbr) {
    m_perm_feature_nmbr = perm_feature_nmbr;
    m_perm_feature_nmbr_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_perm_feature_nmbr_Set() const{
    return m_perm_feature_nmbr_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_perm_feature_nmbr_Valid() const{
    return m_perm_feature_nmbr_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncDetectionCode() const {
    return m_rnc_detection_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncDetectionCode(const QString &rnc_detection_code) {
    m_rnc_detection_code = rnc_detection_code;
    m_rnc_detection_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_code_Set() const{
    return m_rnc_detection_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_code_Valid() const{
    return m_rnc_detection_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncDetectionDate() const {
    return m_rnc_detection_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncDetectionDate(const QString &rnc_detection_date) {
    m_rnc_detection_date = rnc_detection_date;
    m_rnc_detection_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_date_Set() const{
    return m_rnc_detection_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_date_Valid() const{
    return m_rnc_detection_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncDetectionDesc() const {
    return m_rnc_detection_desc;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncDetectionDesc(const QString &rnc_detection_desc) {
    m_rnc_detection_desc = rnc_detection_desc;
    m_rnc_detection_desc_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_desc_Set() const{
    return m_rnc_detection_desc_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_detection_desc_Valid() const{
    return m_rnc_detection_desc_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncResolutionCode() const {
    return m_rnc_resolution_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncResolutionCode(const QString &rnc_resolution_code) {
    m_rnc_resolution_code = rnc_resolution_code;
    m_rnc_resolution_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_code_Set() const{
    return m_rnc_resolution_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_code_Valid() const{
    return m_rnc_resolution_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncResolutionDate() const {
    return m_rnc_resolution_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncResolutionDate(const QString &rnc_resolution_date) {
    m_rnc_resolution_date = rnc_resolution_date;
    m_rnc_resolution_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_date_Set() const{
    return m_rnc_resolution_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_date_Valid() const{
    return m_rnc_resolution_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getRncResolutionDesc() const {
    return m_rnc_resolution_desc;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setRncResolutionDesc(const QString &rnc_resolution_desc) {
    m_rnc_resolution_desc = rnc_resolution_desc;
    m_rnc_resolution_desc_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_desc_Set() const{
    return m_rnc_resolution_desc_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_rnc_resolution_desc_Valid() const{
    return m_rnc_resolution_desc_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getStatisticalBaseMonthlyAvg() const {
    return m_statistical_base_monthly_avg;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setStatisticalBaseMonthlyAvg(const QString &statistical_base_monthly_avg) {
    m_statistical_base_monthly_avg = statistical_base_monthly_avg;
    m_statistical_base_monthly_avg_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_statistical_base_monthly_avg_Set() const{
    return m_statistical_base_monthly_avg_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_statistical_base_monthly_avg_Valid() const{
    return m_statistical_base_monthly_avg_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getValueReceivedDate() const {
    return m_value_received_date;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setValueReceivedDate(const QString &value_received_date) {
    m_value_received_date = value_received_date;
    m_value_received_date_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_value_received_date_Set() const{
    return m_value_received_date_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_value_received_date_Valid() const{
    return m_value_received_date_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getValueTypeCode() const {
    return m_value_type_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setValueTypeCode(const QString &value_type_code) {
    m_value_type_code = value_type_code;
    m_value_type_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_value_type_code_Set() const{
    return m_value_type_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_value_type_code_Valid() const{
    return m_value_type_code_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getVersionNmbr() const {
    return m_version_nmbr;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setVersionNmbr(const QString &version_nmbr) {
    m_version_nmbr = version_nmbr;
    m_version_nmbr_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_version_nmbr_Set() const{
    return m_version_nmbr_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_version_nmbr_Valid() const{
    return m_version_nmbr_isValid;
}

QString OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::getViolationCode() const {
    return m_violation_code;
}
void OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::setViolationCode(const QString &violation_code) {
    m_violation_code = violation_code;
    m_violation_code_isSet = true;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_violation_code_Set() const{
    return m_violation_code_isSet;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::is_violation_code_Valid() const{
    return m_violation_code_isValid;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_late_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_late_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_location_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdesid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodi_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodi_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodi_validation_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdes_violation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_feature_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_base_monthly_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr0_get_d80d90s_details_D80D90sDetails_Sources::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_days_late_isValid && m_dmr_due_date_isValid && m_limit_begin_date_isValid && m_limit_end_date_isValid && m_limit_id_isValid && m_limit_set_name_isValid && m_missing_late_isValid && m_monitoring_location_code_isValid && m_monitoring_location_desc_isValid && m_monitoring_period_end_date_isValid && m_npdesid_isValid && m_nodi_code_isValid && m_nodi_desc_isValid && m_nodi_validation_flag_isValid && m_npdes_violation_id_isValid && m_parameter_code_isValid && m_parameter_desc_isValid && m_perm_feature_nmbr_isValid && m_rnc_detection_code_isValid && m_rnc_detection_date_isValid && m_rnc_detection_desc_isValid && m_rnc_resolution_code_isValid && m_rnc_resolution_date_isValid && m_rnc_resolution_desc_isValid && m_statistical_base_monthly_avg_isValid && m_value_received_date_isValid && m_value_type_code_isValid && m_version_nmbr_isValid && m_violation_code_isValid && true;
}

} // namespace OpenAPI
