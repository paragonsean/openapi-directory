/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_Permits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_Permits::OAIDfr018_Permits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_Permits::OAIDfr018_Permits() {
    this->initializeModel();
}

OAIDfr018_Permits::~OAIDfr018_Permits() {}

void OAIDfr018_Permits::initializeModel() {

    m_accuracy_score_isSet = false;
    m_accuracy_score_isValid = false;

    m_accuracy_value_isSet = false;
    m_accuracy_value_isValid = false;

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_collect_desc_isSet = false;
    m_collect_desc_isValid = false;

    m_dqurl_isSet = false;
    m_dqurl_isValid = false;

    m_epa_region_isSet = false;
    m_epa_region_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_exp_date_isSet = false;
    m_exp_date_isValid = false;

    m_facility_city_isSet = false;
    m_facility_city_isValid = false;

    m_facility_name_isSet = false;
    m_facility_name_isValid = false;

    m_facility_state_isSet = false;
    m_facility_state_isValid = false;

    m_facility_status_isSet = false;
    m_facility_status_isValid = false;

    m_facility_street_isSet = false;
    m_facility_street_isValid = false;

    m_facility_zip_isSet = false;
    m_facility_zip_isValid = false;

    m_has_bio_rpt_isSet = false;
    m_has_bio_rpt_isValid = false;

    m_has_icis_sso_rpt_isSet = false;
    m_has_icis_sso_rpt_isValid = false;

    m_hdatum_desc_isSet = false;
    m_hdatum_desc_isValid = false;

    m_indian_country_isSet = false;
    m_indian_country_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_naics_isSet = false;
    m_naics_isValid = false;

    m_ref_point_desc_isSet = false;
    m_ref_point_desc_isValid = false;

    m_sic_isSet = false;
    m_sic_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_universe_isSet = false;
    m_universe_isValid = false;
}

void OAIDfr018_Permits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_Permits::fromJsonObject(QJsonObject json) {

    m_accuracy_score_isValid = ::OpenAPI::fromJsonValue(m_accuracy_score, json[QString("AccuracyScore")]);
    m_accuracy_score_isSet = !json[QString("AccuracyScore")].isNull() && m_accuracy_score_isValid;

    m_accuracy_value_isValid = ::OpenAPI::fromJsonValue(m_accuracy_value, json[QString("AccuracyValue")]);
    m_accuracy_value_isSet = !json[QString("AccuracyValue")].isNull() && m_accuracy_value_isValid;

    m_areas_isValid = ::OpenAPI::fromJsonValue(m_areas, json[QString("Areas")]);
    m_areas_isSet = !json[QString("Areas")].isNull() && m_areas_isValid;

    m_collect_desc_isValid = ::OpenAPI::fromJsonValue(m_collect_desc, json[QString("CollectDesc")]);
    m_collect_desc_isSet = !json[QString("CollectDesc")].isNull() && m_collect_desc_isValid;

    m_dqurl_isValid = ::OpenAPI::fromJsonValue(m_dqurl, json[QString("DQURL")]);
    m_dqurl_isSet = !json[QString("DQURL")].isNull() && m_dqurl_isValid;

    m_epa_region_isValid = ::OpenAPI::fromJsonValue(m_epa_region, json[QString("EPARegion")]);
    m_epa_region_isSet = !json[QString("EPARegion")].isNull() && m_epa_region_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_exp_date_isValid = ::OpenAPI::fromJsonValue(m_exp_date, json[QString("ExpDate")]);
    m_exp_date_isSet = !json[QString("ExpDate")].isNull() && m_exp_date_isValid;

    m_facility_city_isValid = ::OpenAPI::fromJsonValue(m_facility_city, json[QString("FacilityCity")]);
    m_facility_city_isSet = !json[QString("FacilityCity")].isNull() && m_facility_city_isValid;

    m_facility_name_isValid = ::OpenAPI::fromJsonValue(m_facility_name, json[QString("FacilityName")]);
    m_facility_name_isSet = !json[QString("FacilityName")].isNull() && m_facility_name_isValid;

    m_facility_state_isValid = ::OpenAPI::fromJsonValue(m_facility_state, json[QString("FacilityState")]);
    m_facility_state_isSet = !json[QString("FacilityState")].isNull() && m_facility_state_isValid;

    m_facility_status_isValid = ::OpenAPI::fromJsonValue(m_facility_status, json[QString("FacilityStatus")]);
    m_facility_status_isSet = !json[QString("FacilityStatus")].isNull() && m_facility_status_isValid;

    m_facility_street_isValid = ::OpenAPI::fromJsonValue(m_facility_street, json[QString("FacilityStreet")]);
    m_facility_street_isSet = !json[QString("FacilityStreet")].isNull() && m_facility_street_isValid;

    m_facility_zip_isValid = ::OpenAPI::fromJsonValue(m_facility_zip, json[QString("FacilityZip")]);
    m_facility_zip_isSet = !json[QString("FacilityZip")].isNull() && m_facility_zip_isValid;

    m_has_bio_rpt_isValid = ::OpenAPI::fromJsonValue(m_has_bio_rpt, json[QString("HasBioRpt")]);
    m_has_bio_rpt_isSet = !json[QString("HasBioRpt")].isNull() && m_has_bio_rpt_isValid;

    m_has_icis_sso_rpt_isValid = ::OpenAPI::fromJsonValue(m_has_icis_sso_rpt, json[QString("HasIcisSsoRpt")]);
    m_has_icis_sso_rpt_isSet = !json[QString("HasIcisSsoRpt")].isNull() && m_has_icis_sso_rpt_isValid;

    m_hdatum_desc_isValid = ::OpenAPI::fromJsonValue(m_hdatum_desc, json[QString("HdatumDesc")]);
    m_hdatum_desc_isSet = !json[QString("HdatumDesc")].isNull() && m_hdatum_desc_isValid;

    m_indian_country_isValid = ::OpenAPI::fromJsonValue(m_indian_country, json[QString("IndianCountry")]);
    m_indian_country_isSet = !json[QString("IndianCountry")].isNull() && m_indian_country_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_naics_isValid = ::OpenAPI::fromJsonValue(m_naics, json[QString("NAICS")]);
    m_naics_isSet = !json[QString("NAICS")].isNull() && m_naics_isValid;

    m_ref_point_desc_isValid = ::OpenAPI::fromJsonValue(m_ref_point_desc, json[QString("RefPointDesc")]);
    m_ref_point_desc_isSet = !json[QString("RefPointDesc")].isNull() && m_ref_point_desc_isValid;

    m_sic_isValid = ::OpenAPI::fromJsonValue(m_sic, json[QString("SIC")]);
    m_sic_isSet = !json[QString("SIC")].isNull() && m_sic_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("Scale")]);
    m_scale_isSet = !json[QString("Scale")].isNull() && m_scale_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_universe_isValid = ::OpenAPI::fromJsonValue(m_universe, json[QString("Universe")]);
    m_universe_isSet = !json[QString("Universe")].isNull() && m_universe_isValid;
}

QString OAIDfr018_Permits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_Permits::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_score_isSet) {
        obj.insert(QString("AccuracyScore"), ::OpenAPI::toJsonValue(m_accuracy_score));
    }
    if (m_accuracy_value_isSet) {
        obj.insert(QString("AccuracyValue"), ::OpenAPI::toJsonValue(m_accuracy_value));
    }
    if (m_areas_isSet) {
        obj.insert(QString("Areas"), ::OpenAPI::toJsonValue(m_areas));
    }
    if (m_collect_desc_isSet) {
        obj.insert(QString("CollectDesc"), ::OpenAPI::toJsonValue(m_collect_desc));
    }
    if (m_dqurl_isSet) {
        obj.insert(QString("DQURL"), ::OpenAPI::toJsonValue(m_dqurl));
    }
    if (m_epa_region_isSet) {
        obj.insert(QString("EPARegion"), ::OpenAPI::toJsonValue(m_epa_region));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_exp_date_isSet) {
        obj.insert(QString("ExpDate"), ::OpenAPI::toJsonValue(m_exp_date));
    }
    if (m_facility_city_isSet) {
        obj.insert(QString("FacilityCity"), ::OpenAPI::toJsonValue(m_facility_city));
    }
    if (m_facility_name_isSet) {
        obj.insert(QString("FacilityName"), ::OpenAPI::toJsonValue(m_facility_name));
    }
    if (m_facility_state_isSet) {
        obj.insert(QString("FacilityState"), ::OpenAPI::toJsonValue(m_facility_state));
    }
    if (m_facility_status_isSet) {
        obj.insert(QString("FacilityStatus"), ::OpenAPI::toJsonValue(m_facility_status));
    }
    if (m_facility_street_isSet) {
        obj.insert(QString("FacilityStreet"), ::OpenAPI::toJsonValue(m_facility_street));
    }
    if (m_facility_zip_isSet) {
        obj.insert(QString("FacilityZip"), ::OpenAPI::toJsonValue(m_facility_zip));
    }
    if (m_has_bio_rpt_isSet) {
        obj.insert(QString("HasBioRpt"), ::OpenAPI::toJsonValue(m_has_bio_rpt));
    }
    if (m_has_icis_sso_rpt_isSet) {
        obj.insert(QString("HasIcisSsoRpt"), ::OpenAPI::toJsonValue(m_has_icis_sso_rpt));
    }
    if (m_hdatum_desc_isSet) {
        obj.insert(QString("HdatumDesc"), ::OpenAPI::toJsonValue(m_hdatum_desc));
    }
    if (m_indian_country_isSet) {
        obj.insert(QString("IndianCountry"), ::OpenAPI::toJsonValue(m_indian_country));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_naics_isSet) {
        obj.insert(QString("NAICS"), ::OpenAPI::toJsonValue(m_naics));
    }
    if (m_ref_point_desc_isSet) {
        obj.insert(QString("RefPointDesc"), ::OpenAPI::toJsonValue(m_ref_point_desc));
    }
    if (m_sic_isSet) {
        obj.insert(QString("SIC"), ::OpenAPI::toJsonValue(m_sic));
    }
    if (m_scale_isSet) {
        obj.insert(QString("Scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_universe_isSet) {
        obj.insert(QString("Universe"), ::OpenAPI::toJsonValue(m_universe));
    }
    return obj;
}

QString OAIDfr018_Permits::getAccuracyScore() const {
    return m_accuracy_score;
}
void OAIDfr018_Permits::setAccuracyScore(const QString &accuracy_score) {
    m_accuracy_score = accuracy_score;
    m_accuracy_score_isSet = true;
}

bool OAIDfr018_Permits::is_accuracy_score_Set() const{
    return m_accuracy_score_isSet;
}

bool OAIDfr018_Permits::is_accuracy_score_Valid() const{
    return m_accuracy_score_isValid;
}

QString OAIDfr018_Permits::getAccuracyValue() const {
    return m_accuracy_value;
}
void OAIDfr018_Permits::setAccuracyValue(const QString &accuracy_value) {
    m_accuracy_value = accuracy_value;
    m_accuracy_value_isSet = true;
}

bool OAIDfr018_Permits::is_accuracy_value_Set() const{
    return m_accuracy_value_isSet;
}

bool OAIDfr018_Permits::is_accuracy_value_Valid() const{
    return m_accuracy_value_isValid;
}

QString OAIDfr018_Permits::getAreas() const {
    return m_areas;
}
void OAIDfr018_Permits::setAreas(const QString &areas) {
    m_areas = areas;
    m_areas_isSet = true;
}

bool OAIDfr018_Permits::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIDfr018_Permits::is_areas_Valid() const{
    return m_areas_isValid;
}

QString OAIDfr018_Permits::getCollectDesc() const {
    return m_collect_desc;
}
void OAIDfr018_Permits::setCollectDesc(const QString &collect_desc) {
    m_collect_desc = collect_desc;
    m_collect_desc_isSet = true;
}

bool OAIDfr018_Permits::is_collect_desc_Set() const{
    return m_collect_desc_isSet;
}

bool OAIDfr018_Permits::is_collect_desc_Valid() const{
    return m_collect_desc_isValid;
}

QString OAIDfr018_Permits::getDqurl() const {
    return m_dqurl;
}
void OAIDfr018_Permits::setDqurl(const QString &dqurl) {
    m_dqurl = dqurl;
    m_dqurl_isSet = true;
}

bool OAIDfr018_Permits::is_dqurl_Set() const{
    return m_dqurl_isSet;
}

bool OAIDfr018_Permits::is_dqurl_Valid() const{
    return m_dqurl_isValid;
}

QString OAIDfr018_Permits::getEpaRegion() const {
    return m_epa_region;
}
void OAIDfr018_Permits::setEpaRegion(const QString &epa_region) {
    m_epa_region = epa_region;
    m_epa_region_isSet = true;
}

bool OAIDfr018_Permits::is_epa_region_Set() const{
    return m_epa_region_isSet;
}

bool OAIDfr018_Permits::is_epa_region_Valid() const{
    return m_epa_region_isValid;
}

QString OAIDfr018_Permits::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr018_Permits::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr018_Permits::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr018_Permits::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr018_Permits::getExpDate() const {
    return m_exp_date;
}
void OAIDfr018_Permits::setExpDate(const QString &exp_date) {
    m_exp_date = exp_date;
    m_exp_date_isSet = true;
}

bool OAIDfr018_Permits::is_exp_date_Set() const{
    return m_exp_date_isSet;
}

bool OAIDfr018_Permits::is_exp_date_Valid() const{
    return m_exp_date_isValid;
}

QString OAIDfr018_Permits::getFacilityCity() const {
    return m_facility_city;
}
void OAIDfr018_Permits::setFacilityCity(const QString &facility_city) {
    m_facility_city = facility_city;
    m_facility_city_isSet = true;
}

bool OAIDfr018_Permits::is_facility_city_Set() const{
    return m_facility_city_isSet;
}

bool OAIDfr018_Permits::is_facility_city_Valid() const{
    return m_facility_city_isValid;
}

QString OAIDfr018_Permits::getFacilityName() const {
    return m_facility_name;
}
void OAIDfr018_Permits::setFacilityName(const QString &facility_name) {
    m_facility_name = facility_name;
    m_facility_name_isSet = true;
}

bool OAIDfr018_Permits::is_facility_name_Set() const{
    return m_facility_name_isSet;
}

bool OAIDfr018_Permits::is_facility_name_Valid() const{
    return m_facility_name_isValid;
}

QString OAIDfr018_Permits::getFacilityState() const {
    return m_facility_state;
}
void OAIDfr018_Permits::setFacilityState(const QString &facility_state) {
    m_facility_state = facility_state;
    m_facility_state_isSet = true;
}

bool OAIDfr018_Permits::is_facility_state_Set() const{
    return m_facility_state_isSet;
}

bool OAIDfr018_Permits::is_facility_state_Valid() const{
    return m_facility_state_isValid;
}

QString OAIDfr018_Permits::getFacilityStatus() const {
    return m_facility_status;
}
void OAIDfr018_Permits::setFacilityStatus(const QString &facility_status) {
    m_facility_status = facility_status;
    m_facility_status_isSet = true;
}

bool OAIDfr018_Permits::is_facility_status_Set() const{
    return m_facility_status_isSet;
}

bool OAIDfr018_Permits::is_facility_status_Valid() const{
    return m_facility_status_isValid;
}

QString OAIDfr018_Permits::getFacilityStreet() const {
    return m_facility_street;
}
void OAIDfr018_Permits::setFacilityStreet(const QString &facility_street) {
    m_facility_street = facility_street;
    m_facility_street_isSet = true;
}

bool OAIDfr018_Permits::is_facility_street_Set() const{
    return m_facility_street_isSet;
}

bool OAIDfr018_Permits::is_facility_street_Valid() const{
    return m_facility_street_isValid;
}

QString OAIDfr018_Permits::getFacilityZip() const {
    return m_facility_zip;
}
void OAIDfr018_Permits::setFacilityZip(const QString &facility_zip) {
    m_facility_zip = facility_zip;
    m_facility_zip_isSet = true;
}

bool OAIDfr018_Permits::is_facility_zip_Set() const{
    return m_facility_zip_isSet;
}

bool OAIDfr018_Permits::is_facility_zip_Valid() const{
    return m_facility_zip_isValid;
}

QString OAIDfr018_Permits::getHasBioRpt() const {
    return m_has_bio_rpt;
}
void OAIDfr018_Permits::setHasBioRpt(const QString &has_bio_rpt) {
    m_has_bio_rpt = has_bio_rpt;
    m_has_bio_rpt_isSet = true;
}

bool OAIDfr018_Permits::is_has_bio_rpt_Set() const{
    return m_has_bio_rpt_isSet;
}

bool OAIDfr018_Permits::is_has_bio_rpt_Valid() const{
    return m_has_bio_rpt_isValid;
}

QString OAIDfr018_Permits::getHasIcisSsoRpt() const {
    return m_has_icis_sso_rpt;
}
void OAIDfr018_Permits::setHasIcisSsoRpt(const QString &has_icis_sso_rpt) {
    m_has_icis_sso_rpt = has_icis_sso_rpt;
    m_has_icis_sso_rpt_isSet = true;
}

bool OAIDfr018_Permits::is_has_icis_sso_rpt_Set() const{
    return m_has_icis_sso_rpt_isSet;
}

bool OAIDfr018_Permits::is_has_icis_sso_rpt_Valid() const{
    return m_has_icis_sso_rpt_isValid;
}

QString OAIDfr018_Permits::getHdatumDesc() const {
    return m_hdatum_desc;
}
void OAIDfr018_Permits::setHdatumDesc(const QString &hdatum_desc) {
    m_hdatum_desc = hdatum_desc;
    m_hdatum_desc_isSet = true;
}

bool OAIDfr018_Permits::is_hdatum_desc_Set() const{
    return m_hdatum_desc_isSet;
}

bool OAIDfr018_Permits::is_hdatum_desc_Valid() const{
    return m_hdatum_desc_isValid;
}

QString OAIDfr018_Permits::getIndianCountry() const {
    return m_indian_country;
}
void OAIDfr018_Permits::setIndianCountry(const QString &indian_country) {
    m_indian_country = indian_country;
    m_indian_country_isSet = true;
}

bool OAIDfr018_Permits::is_indian_country_Set() const{
    return m_indian_country_isSet;
}

bool OAIDfr018_Permits::is_indian_country_Valid() const{
    return m_indian_country_isValid;
}

QString OAIDfr018_Permits::getLatitude() const {
    return m_latitude;
}
void OAIDfr018_Permits::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIDfr018_Permits::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIDfr018_Permits::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIDfr018_Permits::getLongitude() const {
    return m_longitude;
}
void OAIDfr018_Permits::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIDfr018_Permits::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIDfr018_Permits::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIDfr018_Permits::getNaics() const {
    return m_naics;
}
void OAIDfr018_Permits::setNaics(const QString &naics) {
    m_naics = naics;
    m_naics_isSet = true;
}

bool OAIDfr018_Permits::is_naics_Set() const{
    return m_naics_isSet;
}

bool OAIDfr018_Permits::is_naics_Valid() const{
    return m_naics_isValid;
}

QString OAIDfr018_Permits::getRefPointDesc() const {
    return m_ref_point_desc;
}
void OAIDfr018_Permits::setRefPointDesc(const QString &ref_point_desc) {
    m_ref_point_desc = ref_point_desc;
    m_ref_point_desc_isSet = true;
}

bool OAIDfr018_Permits::is_ref_point_desc_Set() const{
    return m_ref_point_desc_isSet;
}

bool OAIDfr018_Permits::is_ref_point_desc_Valid() const{
    return m_ref_point_desc_isValid;
}

QString OAIDfr018_Permits::getSic() const {
    return m_sic;
}
void OAIDfr018_Permits::setSic(const QString &sic) {
    m_sic = sic;
    m_sic_isSet = true;
}

bool OAIDfr018_Permits::is_sic_Set() const{
    return m_sic_isSet;
}

bool OAIDfr018_Permits::is_sic_Valid() const{
    return m_sic_isValid;
}

QString OAIDfr018_Permits::getScale() const {
    return m_scale;
}
void OAIDfr018_Permits::setScale(const QString &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIDfr018_Permits::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIDfr018_Permits::is_scale_Valid() const{
    return m_scale_isValid;
}

QString OAIDfr018_Permits::getSourceId() const {
    return m_source_id;
}
void OAIDfr018_Permits::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr018_Permits::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr018_Permits::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr018_Permits::getStatute() const {
    return m_statute;
}
void OAIDfr018_Permits::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIDfr018_Permits::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIDfr018_Permits::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAIDfr018_Permits::getUniverse() const {
    return m_universe;
}
void OAIDfr018_Permits::setUniverse(const QString &universe) {
    m_universe = universe;
    m_universe_isSet = true;
}

bool OAIDfr018_Permits::is_universe_Set() const{
    return m_universe_isSet;
}

bool OAIDfr018_Permits::is_universe_Valid() const{
    return m_universe_isValid;
}

bool OAIDfr018_Permits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accuracy_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_areas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collect_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dqurl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_bio_rpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_icis_sso_rpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdatum_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indian_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_point_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_Permits::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accuracy_score_isValid && m_accuracy_value_isValid && m_areas_isValid && m_collect_desc_isValid && m_dqurl_isValid && m_epa_region_isValid && m_epa_system_isValid && m_exp_date_isValid && m_facility_city_isValid && m_facility_name_isValid && m_facility_state_isValid && m_facility_status_isValid && m_facility_street_isValid && m_facility_zip_isValid && m_has_bio_rpt_isValid && m_has_icis_sso_rpt_isValid && m_hdatum_desc_isValid && m_indian_country_isValid && m_latitude_isValid && m_longitude_isValid && m_naics_isValid && m_ref_point_desc_isValid && m_sic_isValid && m_scale_isValid && m_source_id_isValid && m_statute_isValid && m_universe_isValid && true;
}

} // namespace OpenAPI
