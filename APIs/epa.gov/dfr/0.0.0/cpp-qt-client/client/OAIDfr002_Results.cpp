/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr002_Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr002_Results::OAIDfr002_Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr002_Results::OAIDfr002_Results() {
    this->initializeModel();
}

OAIDfr002_Results::~OAIDfr002_Results() {}

void OAIDfr002_Results::initializeModel() {

    m_air_quality_isSet = false;
    m_air_quality_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIDfr002_Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr002_Results::fromJsonObject(QJsonObject json) {

    m_air_quality_isValid = ::OpenAPI::fromJsonValue(m_air_quality, json[QString("AirQuality")]);
    m_air_quality_isSet = !json[QString("AirQuality")].isNull() && m_air_quality_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIDfr002_Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr002_Results::asJsonObject() const {
    QJsonObject obj;
    if (m_air_quality.isSet()) {
        obj.insert(QString("AirQuality"), ::OpenAPI::toJsonValue(m_air_quality));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIDfr024 OAIDfr002_Results::getAirQuality() const {
    return m_air_quality;
}
void OAIDfr002_Results::setAirQuality(const OAIDfr024 &air_quality) {
    m_air_quality = air_quality;
    m_air_quality_isSet = true;
}

bool OAIDfr002_Results::is_air_quality_Set() const{
    return m_air_quality_isSet;
}

bool OAIDfr002_Results::is_air_quality_Valid() const{
    return m_air_quality_isValid;
}

QString OAIDfr002_Results::getMessage() const {
    return m_message;
}
void OAIDfr002_Results::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDfr002_Results::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDfr002_Results::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIDfr002_Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr002_Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
