/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr073.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr073::OAIDfr073(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr073::OAIDfr073() {
    this->initializeModel();
}

OAIDfr073::~OAIDfr073() {}

void OAIDfr073::initializeModel() {

    m_center_latitude_isSet = false;
    m_center_latitude_isValid = false;

    m_center_longitude_isSet = false;
    m_center_longitude_isValid = false;

    m_icon_base_url_isSet = false;
    m_icon_base_url_isValid = false;

    m_map_data_isSet = false;
    m_map_data_isValid = false;

    m_pop_up_base_url_isSet = false;
    m_pop_up_base_url_isValid = false;
}

void OAIDfr073::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr073::fromJsonObject(QJsonObject json) {

    m_center_latitude_isValid = ::OpenAPI::fromJsonValue(m_center_latitude, json[QString("CenterLatitude")]);
    m_center_latitude_isSet = !json[QString("CenterLatitude")].isNull() && m_center_latitude_isValid;

    m_center_longitude_isValid = ::OpenAPI::fromJsonValue(m_center_longitude, json[QString("CenterLongitude")]);
    m_center_longitude_isSet = !json[QString("CenterLongitude")].isNull() && m_center_longitude_isValid;

    m_icon_base_url_isValid = ::OpenAPI::fromJsonValue(m_icon_base_url, json[QString("IconBaseURL")]);
    m_icon_base_url_isSet = !json[QString("IconBaseURL")].isNull() && m_icon_base_url_isValid;

    m_map_data_isValid = ::OpenAPI::fromJsonValue(m_map_data, json[QString("MapData")]);
    m_map_data_isSet = !json[QString("MapData")].isNull() && m_map_data_isValid;

    m_pop_up_base_url_isValid = ::OpenAPI::fromJsonValue(m_pop_up_base_url, json[QString("PopUpBaseURL")]);
    m_pop_up_base_url_isSet = !json[QString("PopUpBaseURL")].isNull() && m_pop_up_base_url_isValid;
}

QString OAIDfr073::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr073::asJsonObject() const {
    QJsonObject obj;
    if (m_center_latitude_isSet) {
        obj.insert(QString("CenterLatitude"), ::OpenAPI::toJsonValue(m_center_latitude));
    }
    if (m_center_longitude_isSet) {
        obj.insert(QString("CenterLongitude"), ::OpenAPI::toJsonValue(m_center_longitude));
    }
    if (m_icon_base_url_isSet) {
        obj.insert(QString("IconBaseURL"), ::OpenAPI::toJsonValue(m_icon_base_url));
    }
    if (m_map_data.size() > 0) {
        obj.insert(QString("MapData"), ::OpenAPI::toJsonValue(m_map_data));
    }
    if (m_pop_up_base_url_isSet) {
        obj.insert(QString("PopUpBaseURL"), ::OpenAPI::toJsonValue(m_pop_up_base_url));
    }
    return obj;
}

QString OAIDfr073::getCenterLatitude() const {
    return m_center_latitude;
}
void OAIDfr073::setCenterLatitude(const QString &center_latitude) {
    m_center_latitude = center_latitude;
    m_center_latitude_isSet = true;
}

bool OAIDfr073::is_center_latitude_Set() const{
    return m_center_latitude_isSet;
}

bool OAIDfr073::is_center_latitude_Valid() const{
    return m_center_latitude_isValid;
}

QString OAIDfr073::getCenterLongitude() const {
    return m_center_longitude;
}
void OAIDfr073::setCenterLongitude(const QString &center_longitude) {
    m_center_longitude = center_longitude;
    m_center_longitude_isSet = true;
}

bool OAIDfr073::is_center_longitude_Set() const{
    return m_center_longitude_isSet;
}

bool OAIDfr073::is_center_longitude_Valid() const{
    return m_center_longitude_isValid;
}

QString OAIDfr073::getIconBaseUrl() const {
    return m_icon_base_url;
}
void OAIDfr073::setIconBaseUrl(const QString &icon_base_url) {
    m_icon_base_url = icon_base_url;
    m_icon_base_url_isSet = true;
}

bool OAIDfr073::is_icon_base_url_Set() const{
    return m_icon_base_url_isSet;
}

bool OAIDfr073::is_icon_base_url_Valid() const{
    return m_icon_base_url_isValid;
}

QList<OAIDfr018_MapData> OAIDfr073::getMapData() const {
    return m_map_data;
}
void OAIDfr073::setMapData(const QList<OAIDfr018_MapData> &map_data) {
    m_map_data = map_data;
    m_map_data_isSet = true;
}

bool OAIDfr073::is_map_data_Set() const{
    return m_map_data_isSet;
}

bool OAIDfr073::is_map_data_Valid() const{
    return m_map_data_isValid;
}

QString OAIDfr073::getPopUpBaseUrl() const {
    return m_pop_up_base_url;
}
void OAIDfr073::setPopUpBaseUrl(const QString &pop_up_base_url) {
    m_pop_up_base_url = pop_up_base_url;
    m_pop_up_base_url_isSet = true;
}

bool OAIDfr073::is_pop_up_base_url_Set() const{
    return m_pop_up_base_url_isSet;
}

bool OAIDfr073::is_pop_up_base_url_Valid() const{
    return m_pop_up_base_url_isValid;
}

bool OAIDfr073::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_center_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pop_up_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr073::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_center_latitude_isValid && m_center_longitude_isValid && m_icon_base_url_isValid && m_map_data_isValid && m_pop_up_base_url_isValid && true;
}

} // namespace OpenAPI
