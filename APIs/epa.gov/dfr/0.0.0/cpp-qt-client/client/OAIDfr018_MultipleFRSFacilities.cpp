/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_MultipleFRSFacilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_MultipleFRSFacilities::OAIDfr018_MultipleFRSFacilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_MultipleFRSFacilities::OAIDfr018_MultipleFRSFacilities() {
    this->initializeModel();
}

OAIDfr018_MultipleFRSFacilities::~OAIDfr018_MultipleFRSFacilities() {}

void OAIDfr018_MultipleFRSFacilities::initializeModel() {

    m_registry_ids_isSet = false;
    m_registry_ids_isValid = false;
}

void OAIDfr018_MultipleFRSFacilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_MultipleFRSFacilities::fromJsonObject(QJsonObject json) {

    m_registry_ids_isValid = ::OpenAPI::fromJsonValue(m_registry_ids, json[QString("RegistryIDs")]);
    m_registry_ids_isSet = !json[QString("RegistryIDs")].isNull() && m_registry_ids_isValid;
}

QString OAIDfr018_MultipleFRSFacilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_MultipleFRSFacilities::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_ids.size() > 0) {
        obj.insert(QString("RegistryIDs"), ::OpenAPI::toJsonValue(m_registry_ids));
    }
    return obj;
}

QList<OAIDfr018_RegistryIDs> OAIDfr018_MultipleFRSFacilities::getRegistryIds() const {
    return m_registry_ids;
}
void OAIDfr018_MultipleFRSFacilities::setRegistryIds(const QList<OAIDfr018_RegistryIDs> &registry_ids) {
    m_registry_ids = registry_ids;
    m_registry_ids_isSet = true;
}

bool OAIDfr018_MultipleFRSFacilities::is_registry_ids_Set() const{
    return m_registry_ids_isSet;
}

bool OAIDfr018_MultipleFRSFacilities::is_registry_ids_Valid() const{
    return m_registry_ids_isValid;
}

bool OAIDfr018_MultipleFRSFacilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_MultipleFRSFacilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
