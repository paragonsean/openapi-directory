/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr077.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr077::OAIDfr077(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr077::OAIDfr077() {
    this->initializeModel();
}

OAIDfr077::~OAIDfr077() {}

void OAIDfr077::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_enf_identifier_isSet = false;
    m_enf_identifier_isValid = false;

    m_lead_agency_isSet = false;
    m_lead_agency_isValid = false;

    m_notice_date_isSet = false;
    m_notice_date_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;
}

void OAIDfr077::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr077::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_enf_identifier_isValid = ::OpenAPI::fromJsonValue(m_enf_identifier, json[QString("EnfIdentifier")]);
    m_enf_identifier_isSet = !json[QString("EnfIdentifier")].isNull() && m_enf_identifier_isValid;

    m_lead_agency_isValid = ::OpenAPI::fromJsonValue(m_lead_agency, json[QString("LeadAgency")]);
    m_lead_agency_isSet = !json[QString("LeadAgency")].isNull() && m_lead_agency_isValid;

    m_notice_date_isValid = ::OpenAPI::fromJsonValue(m_notice_date, json[QString("NoticeDate")]);
    m_notice_date_isSet = !json[QString("NoticeDate")].isNull() && m_notice_date_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;
}

QString OAIDfr077::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr077::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_enf_identifier_isSet) {
        obj.insert(QString("EnfIdentifier"), ::OpenAPI::toJsonValue(m_enf_identifier));
    }
    if (m_lead_agency_isSet) {
        obj.insert(QString("LeadAgency"), ::OpenAPI::toJsonValue(m_lead_agency));
    }
    if (m_notice_date_isSet) {
        obj.insert(QString("NoticeDate"), ::OpenAPI::toJsonValue(m_notice_date));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    return obj;
}

QString OAIDfr077::getActionType() const {
    return m_action_type;
}
void OAIDfr077::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIDfr077::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIDfr077::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIDfr077::getEpaSystem() const {
    return m_epa_system;
}
void OAIDfr077::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIDfr077::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIDfr077::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIDfr077::getEnfIdentifier() const {
    return m_enf_identifier;
}
void OAIDfr077::setEnfIdentifier(const QString &enf_identifier) {
    m_enf_identifier = enf_identifier;
    m_enf_identifier_isSet = true;
}

bool OAIDfr077::is_enf_identifier_Set() const{
    return m_enf_identifier_isSet;
}

bool OAIDfr077::is_enf_identifier_Valid() const{
    return m_enf_identifier_isValid;
}

QString OAIDfr077::getLeadAgency() const {
    return m_lead_agency;
}
void OAIDfr077::setLeadAgency(const QString &lead_agency) {
    m_lead_agency = lead_agency;
    m_lead_agency_isSet = true;
}

bool OAIDfr077::is_lead_agency_Set() const{
    return m_lead_agency_isSet;
}

bool OAIDfr077::is_lead_agency_Valid() const{
    return m_lead_agency_isValid;
}

QString OAIDfr077::getNoticeDate() const {
    return m_notice_date;
}
void OAIDfr077::setNoticeDate(const QString &notice_date) {
    m_notice_date = notice_date;
    m_notice_date_isSet = true;
}

bool OAIDfr077::is_notice_date_Set() const{
    return m_notice_date_isSet;
}

bool OAIDfr077::is_notice_date_Valid() const{
    return m_notice_date_isValid;
}

QString OAIDfr077::getSourceId() const {
    return m_source_id;
}
void OAIDfr077::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr077::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr077::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr077::getStatute() const {
    return m_statute;
}
void OAIDfr077::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIDfr077::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIDfr077::is_statute_Valid() const{
    return m_statute_isValid;
}

bool OAIDfr077::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enf_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr077::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && m_epa_system_isValid && m_enf_identifier_isValid && m_lead_agency_isValid && m_notice_date_isValid && m_source_id_isValid && m_statute_isValid && true;
}

} // namespace OpenAPI
