/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr018_MapData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr018_MapData::OAIDfr018_MapData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr018_MapData::OAIDfr018_MapData() {
    this->initializeModel();
}

OAIDfr018_MapData::~OAIDfr018_MapData() {}

void OAIDfr018_MapData::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_puv_isSet = false;
    m_puv_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDfr018_MapData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr018_MapData::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("ICON")]);
    m_icon_isSet = !json[QString("ICON")].isNull() && m_icon_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("LAT")]);
    m_lat_isSet = !json[QString("LAT")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("LON")]);
    m_lon_isSet = !json[QString("LON")].isNull() && m_lon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("NAME")]);
    m_name_isSet = !json[QString("NAME")].isNull() && m_name_isValid;

    m_puv_isValid = ::OpenAPI::fromJsonValue(m_puv, json[QString("PUV")]);
    m_puv_isSet = !json[QString("PUV")].isNull() && m_puv_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("TYPE")]);
    m_type_isSet = !json[QString("TYPE")].isNull() && m_type_isValid;
}

QString OAIDfr018_MapData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr018_MapData::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_isSet) {
        obj.insert(QString("ICON"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_lat_isSet) {
        obj.insert(QString("LAT"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("LON"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_name_isSet) {
        obj.insert(QString("NAME"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_puv_isSet) {
        obj.insert(QString("PUV"), ::OpenAPI::toJsonValue(m_puv));
    }
    if (m_type_isSet) {
        obj.insert(QString("TYPE"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDfr018_MapData::getIcon() const {
    return m_icon;
}
void OAIDfr018_MapData::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDfr018_MapData::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDfr018_MapData::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIDfr018_MapData::getLat() const {
    return m_lat;
}
void OAIDfr018_MapData::setLat(const QString &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIDfr018_MapData::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIDfr018_MapData::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAIDfr018_MapData::getLon() const {
    return m_lon;
}
void OAIDfr018_MapData::setLon(const QString &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIDfr018_MapData::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIDfr018_MapData::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIDfr018_MapData::getName() const {
    return m_name;
}
void OAIDfr018_MapData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDfr018_MapData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDfr018_MapData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDfr018_MapData::getPuv() const {
    return m_puv;
}
void OAIDfr018_MapData::setPuv(const QString &puv) {
    m_puv = puv;
    m_puv_isSet = true;
}

bool OAIDfr018_MapData::is_puv_Set() const{
    return m_puv_isSet;
}

bool OAIDfr018_MapData::is_puv_Valid() const{
    return m_puv_isValid;
}

QString OAIDfr018_MapData::getType() const {
    return m_type;
}
void OAIDfr018_MapData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDfr018_MapData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDfr018_MapData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDfr018_MapData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_puv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr018_MapData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_icon_isValid && m_lat_isValid && m_lon_isValid && m_name_isValid && m_puv_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
