/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Detailed Facility Report (DFR)
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  DFR Rest Services provide multiple service endpoints, to retrieve detailed facility location, enforcement, compliance monitoring, and pollutant information for any single facility.  See the Detailed Facility Report (DFR) Help Page (https://echo.epa.gov/help/reports/detailed-facility-report-help) for additional information on the DFR.  Additionally, a Data Dictionary (https://echo.epa.gov/help/reports/dfr-data-dictionary) is also available.  There is one primary service end point, get_dfr, that provides all available DFR data.  All other service end points that are exposed, will return data on a single section of the DFR.     \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfr110.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfr110::OAIDfr110(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfr110::OAIDfr110() {
    this->initializeModel();
}

OAIDfr110::~OAIDfr110() {}

void OAIDfr110::initializeModel() {

    m_compliance_period_begin_date_isSet = false;
    m_compliance_period_begin_date_isValid = false;

    m_compliance_period_end_date_isSet = false;
    m_compliance_period_end_date_isValid = false;

    m_contaminant_name_isSet = false;
    m_contaminant_name_isValid = false;

    m_enforcement_actions_isSet = false;
    m_enforcement_actions_isValid = false;

    m_federal_mcl_isSet = false;
    m_federal_mcl_isValid = false;

    m_federal_rule_isSet = false;
    m_federal_rule_isValid = false;

    m_resolved_date_isSet = false;
    m_resolved_date_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_state_mcl_isSet = false;
    m_state_mcl_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_violation_category_code_isSet = false;
    m_violation_category_code_isValid = false;

    m_violation_category_desc_isSet = false;
    m_violation_category_desc_isValid = false;

    m_violation_id_isSet = false;
    m_violation_id_isValid = false;

    m_violation_measure_isSet = false;
    m_violation_measure_isValid = false;
}

void OAIDfr110::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfr110::fromJsonObject(QJsonObject json) {

    m_compliance_period_begin_date_isValid = ::OpenAPI::fromJsonValue(m_compliance_period_begin_date, json[QString("CompliancePeriodBeginDate")]);
    m_compliance_period_begin_date_isSet = !json[QString("CompliancePeriodBeginDate")].isNull() && m_compliance_period_begin_date_isValid;

    m_compliance_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_compliance_period_end_date, json[QString("CompliancePeriodEndDate")]);
    m_compliance_period_end_date_isSet = !json[QString("CompliancePeriodEndDate")].isNull() && m_compliance_period_end_date_isValid;

    m_contaminant_name_isValid = ::OpenAPI::fromJsonValue(m_contaminant_name, json[QString("ContaminantName")]);
    m_contaminant_name_isSet = !json[QString("ContaminantName")].isNull() && m_contaminant_name_isValid;

    m_enforcement_actions_isValid = ::OpenAPI::fromJsonValue(m_enforcement_actions, json[QString("EnforcementActions")]);
    m_enforcement_actions_isSet = !json[QString("EnforcementActions")].isNull() && m_enforcement_actions_isValid;

    m_federal_mcl_isValid = ::OpenAPI::fromJsonValue(m_federal_mcl, json[QString("FederalMCL")]);
    m_federal_mcl_isSet = !json[QString("FederalMCL")].isNull() && m_federal_mcl_isValid;

    m_federal_rule_isValid = ::OpenAPI::fromJsonValue(m_federal_rule, json[QString("FederalRule")]);
    m_federal_rule_isSet = !json[QString("FederalRule")].isNull() && m_federal_rule_isValid;

    m_resolved_date_isValid = ::OpenAPI::fromJsonValue(m_resolved_date, json[QString("ResolvedDate")]);
    m_resolved_date_isSet = !json[QString("ResolvedDate")].isNull() && m_resolved_date_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_state_mcl_isValid = ::OpenAPI::fromJsonValue(m_state_mcl, json[QString("StateMCL")]);
    m_state_mcl_isSet = !json[QString("StateMCL")].isNull() && m_state_mcl_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_violation_category_code_isValid = ::OpenAPI::fromJsonValue(m_violation_category_code, json[QString("ViolationCategoryCode")]);
    m_violation_category_code_isSet = !json[QString("ViolationCategoryCode")].isNull() && m_violation_category_code_isValid;

    m_violation_category_desc_isValid = ::OpenAPI::fromJsonValue(m_violation_category_desc, json[QString("ViolationCategoryDesc")]);
    m_violation_category_desc_isSet = !json[QString("ViolationCategoryDesc")].isNull() && m_violation_category_desc_isValid;

    m_violation_id_isValid = ::OpenAPI::fromJsonValue(m_violation_id, json[QString("ViolationID")]);
    m_violation_id_isSet = !json[QString("ViolationID")].isNull() && m_violation_id_isValid;

    m_violation_measure_isValid = ::OpenAPI::fromJsonValue(m_violation_measure, json[QString("ViolationMeasure")]);
    m_violation_measure_isSet = !json[QString("ViolationMeasure")].isNull() && m_violation_measure_isValid;
}

QString OAIDfr110::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfr110::asJsonObject() const {
    QJsonObject obj;
    if (m_compliance_period_begin_date_isSet) {
        obj.insert(QString("CompliancePeriodBeginDate"), ::OpenAPI::toJsonValue(m_compliance_period_begin_date));
    }
    if (m_compliance_period_end_date_isSet) {
        obj.insert(QString("CompliancePeriodEndDate"), ::OpenAPI::toJsonValue(m_compliance_period_end_date));
    }
    if (m_contaminant_name_isSet) {
        obj.insert(QString("ContaminantName"), ::OpenAPI::toJsonValue(m_contaminant_name));
    }
    if (m_enforcement_actions.size() > 0) {
        obj.insert(QString("EnforcementActions"), ::OpenAPI::toJsonValue(m_enforcement_actions));
    }
    if (m_federal_mcl_isSet) {
        obj.insert(QString("FederalMCL"), ::OpenAPI::toJsonValue(m_federal_mcl));
    }
    if (m_federal_rule_isSet) {
        obj.insert(QString("FederalRule"), ::OpenAPI::toJsonValue(m_federal_rule));
    }
    if (m_resolved_date_isSet) {
        obj.insert(QString("ResolvedDate"), ::OpenAPI::toJsonValue(m_resolved_date));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_state_mcl_isSet) {
        obj.insert(QString("StateMCL"), ::OpenAPI::toJsonValue(m_state_mcl));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_violation_category_code_isSet) {
        obj.insert(QString("ViolationCategoryCode"), ::OpenAPI::toJsonValue(m_violation_category_code));
    }
    if (m_violation_category_desc_isSet) {
        obj.insert(QString("ViolationCategoryDesc"), ::OpenAPI::toJsonValue(m_violation_category_desc));
    }
    if (m_violation_id_isSet) {
        obj.insert(QString("ViolationID"), ::OpenAPI::toJsonValue(m_violation_id));
    }
    if (m_violation_measure_isSet) {
        obj.insert(QString("ViolationMeasure"), ::OpenAPI::toJsonValue(m_violation_measure));
    }
    return obj;
}

QString OAIDfr110::getCompliancePeriodBeginDate() const {
    return m_compliance_period_begin_date;
}
void OAIDfr110::setCompliancePeriodBeginDate(const QString &compliance_period_begin_date) {
    m_compliance_period_begin_date = compliance_period_begin_date;
    m_compliance_period_begin_date_isSet = true;
}

bool OAIDfr110::is_compliance_period_begin_date_Set() const{
    return m_compliance_period_begin_date_isSet;
}

bool OAIDfr110::is_compliance_period_begin_date_Valid() const{
    return m_compliance_period_begin_date_isValid;
}

QString OAIDfr110::getCompliancePeriodEndDate() const {
    return m_compliance_period_end_date;
}
void OAIDfr110::setCompliancePeriodEndDate(const QString &compliance_period_end_date) {
    m_compliance_period_end_date = compliance_period_end_date;
    m_compliance_period_end_date_isSet = true;
}

bool OAIDfr110::is_compliance_period_end_date_Set() const{
    return m_compliance_period_end_date_isSet;
}

bool OAIDfr110::is_compliance_period_end_date_Valid() const{
    return m_compliance_period_end_date_isValid;
}

QString OAIDfr110::getContaminantName() const {
    return m_contaminant_name;
}
void OAIDfr110::setContaminantName(const QString &contaminant_name) {
    m_contaminant_name = contaminant_name;
    m_contaminant_name_isSet = true;
}

bool OAIDfr110::is_contaminant_name_Set() const{
    return m_contaminant_name_isSet;
}

bool OAIDfr110::is_contaminant_name_Valid() const{
    return m_contaminant_name_isValid;
}

QList<OAIDfr109> OAIDfr110::getEnforcementActions() const {
    return m_enforcement_actions;
}
void OAIDfr110::setEnforcementActions(const QList<OAIDfr109> &enforcement_actions) {
    m_enforcement_actions = enforcement_actions;
    m_enforcement_actions_isSet = true;
}

bool OAIDfr110::is_enforcement_actions_Set() const{
    return m_enforcement_actions_isSet;
}

bool OAIDfr110::is_enforcement_actions_Valid() const{
    return m_enforcement_actions_isValid;
}

QString OAIDfr110::getFederalMcl() const {
    return m_federal_mcl;
}
void OAIDfr110::setFederalMcl(const QString &federal_mcl) {
    m_federal_mcl = federal_mcl;
    m_federal_mcl_isSet = true;
}

bool OAIDfr110::is_federal_mcl_Set() const{
    return m_federal_mcl_isSet;
}

bool OAIDfr110::is_federal_mcl_Valid() const{
    return m_federal_mcl_isValid;
}

QString OAIDfr110::getFederalRule() const {
    return m_federal_rule;
}
void OAIDfr110::setFederalRule(const QString &federal_rule) {
    m_federal_rule = federal_rule;
    m_federal_rule_isSet = true;
}

bool OAIDfr110::is_federal_rule_Set() const{
    return m_federal_rule_isSet;
}

bool OAIDfr110::is_federal_rule_Valid() const{
    return m_federal_rule_isValid;
}

QString OAIDfr110::getResolvedDate() const {
    return m_resolved_date;
}
void OAIDfr110::setResolvedDate(const QString &resolved_date) {
    m_resolved_date = resolved_date;
    m_resolved_date_isSet = true;
}

bool OAIDfr110::is_resolved_date_Set() const{
    return m_resolved_date_isSet;
}

bool OAIDfr110::is_resolved_date_Valid() const{
    return m_resolved_date_isValid;
}

QString OAIDfr110::getSourceId() const {
    return m_source_id;
}
void OAIDfr110::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDfr110::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDfr110::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDfr110::getStateMcl() const {
    return m_state_mcl;
}
void OAIDfr110::setStateMcl(const QString &state_mcl) {
    m_state_mcl = state_mcl;
    m_state_mcl_isSet = true;
}

bool OAIDfr110::is_state_mcl_Set() const{
    return m_state_mcl_isSet;
}

bool OAIDfr110::is_state_mcl_Valid() const{
    return m_state_mcl_isValid;
}

QString OAIDfr110::getStatus() const {
    return m_status;
}
void OAIDfr110::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDfr110::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDfr110::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDfr110::getViolationCategoryCode() const {
    return m_violation_category_code;
}
void OAIDfr110::setViolationCategoryCode(const QString &violation_category_code) {
    m_violation_category_code = violation_category_code;
    m_violation_category_code_isSet = true;
}

bool OAIDfr110::is_violation_category_code_Set() const{
    return m_violation_category_code_isSet;
}

bool OAIDfr110::is_violation_category_code_Valid() const{
    return m_violation_category_code_isValid;
}

QString OAIDfr110::getViolationCategoryDesc() const {
    return m_violation_category_desc;
}
void OAIDfr110::setViolationCategoryDesc(const QString &violation_category_desc) {
    m_violation_category_desc = violation_category_desc;
    m_violation_category_desc_isSet = true;
}

bool OAIDfr110::is_violation_category_desc_Set() const{
    return m_violation_category_desc_isSet;
}

bool OAIDfr110::is_violation_category_desc_Valid() const{
    return m_violation_category_desc_isValid;
}

QString OAIDfr110::getViolationId() const {
    return m_violation_id;
}
void OAIDfr110::setViolationId(const QString &violation_id) {
    m_violation_id = violation_id;
    m_violation_id_isSet = true;
}

bool OAIDfr110::is_violation_id_Set() const{
    return m_violation_id_isSet;
}

bool OAIDfr110::is_violation_id_Valid() const{
    return m_violation_id_isValid;
}

QString OAIDfr110::getViolationMeasure() const {
    return m_violation_measure;
}
void OAIDfr110::setViolationMeasure(const QString &violation_measure) {
    m_violation_measure = violation_measure;
    m_violation_measure_isSet = true;
}

bool OAIDfr110::is_violation_measure_Set() const{
    return m_violation_measure_isSet;
}

bool OAIDfr110::is_violation_measure_Valid() const{
    return m_violation_measure_isValid;
}

bool OAIDfr110::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliance_period_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contaminant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_mcl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_mcl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_category_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_measure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfr110::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compliance_period_begin_date_isValid && m_compliance_period_end_date_isValid && m_contaminant_name_isValid && m_enforcement_actions_isValid && m_federal_mcl_isValid && m_federal_rule_isValid && m_resolved_date_isValid && m_source_id_isValid && m_state_mcl_isValid && m_status_isValid && m_violation_category_code_isValid && m_violation_category_desc_isValid && m_violation_id_isValid && m_violation_measure_isValid && true;
}

} // namespace OpenAPI
