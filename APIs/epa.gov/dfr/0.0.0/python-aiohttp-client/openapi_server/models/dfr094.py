# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr094(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_accuracy: str=None, collection_method: str=None, coordinate_source_system: str=None, coordinate_source_system_id: str=None, latitude83: float=None, longitude83: float=None, reference_point: str=None, registry_id: str=None):
        """Dfr094 - a model defined in OpenAPI

        :param calculated_accuracy: The calculated_accuracy of this Dfr094.
        :param collection_method: The collection_method of this Dfr094.
        :param coordinate_source_system: The coordinate_source_system of this Dfr094.
        :param coordinate_source_system_id: The coordinate_source_system_id of this Dfr094.
        :param latitude83: The latitude83 of this Dfr094.
        :param longitude83: The longitude83 of this Dfr094.
        :param reference_point: The reference_point of this Dfr094.
        :param registry_id: The registry_id of this Dfr094.
        """
        self.openapi_types = {
            'calculated_accuracy': str,
            'collection_method': str,
            'coordinate_source_system': str,
            'coordinate_source_system_id': str,
            'latitude83': float,
            'longitude83': float,
            'reference_point': str,
            'registry_id': str
        }

        self.attribute_map = {
            'calculated_accuracy': 'CalculatedAccuracy',
            'collection_method': 'CollectionMethod',
            'coordinate_source_system': 'CoordinateSourceSystem',
            'coordinate_source_system_id': 'CoordinateSourceSystemId',
            'latitude83': 'Latitude83',
            'longitude83': 'Longitude83',
            'reference_point': 'ReferencePoint',
            'registry_id': 'RegistryID'
        }

        self._calculated_accuracy = calculated_accuracy
        self._collection_method = collection_method
        self._coordinate_source_system = coordinate_source_system
        self._coordinate_source_system_id = coordinate_source_system_id
        self._latitude83 = latitude83
        self._longitude83 = longitude83
        self._reference_point = reference_point
        self._registry_id = registry_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr094':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr094 of this Dfr094.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_accuracy(self):
        """Gets the calculated_accuracy of this Dfr094.

        ??

        :return: The calculated_accuracy of this Dfr094.
        :rtype: str
        """
        return self._calculated_accuracy

    @calculated_accuracy.setter
    def calculated_accuracy(self, calculated_accuracy):
        """Sets the calculated_accuracy of this Dfr094.

        ??

        :param calculated_accuracy: The calculated_accuracy of this Dfr094.
        :type calculated_accuracy: str
        """
        if calculated_accuracy is None:
            raise ValueError("Invalid value for `calculated_accuracy`, must not be `None`")

        self._calculated_accuracy = calculated_accuracy

    @property
    def collection_method(self):
        """Gets the collection_method of this Dfr094.

        ??

        :return: The collection_method of this Dfr094.
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this Dfr094.

        ??

        :param collection_method: The collection_method of this Dfr094.
        :type collection_method: str
        """
        if collection_method is None:
            raise ValueError("Invalid value for `collection_method`, must not be `None`")

        self._collection_method = collection_method

    @property
    def coordinate_source_system(self):
        """Gets the coordinate_source_system of this Dfr094.

        ??

        :return: The coordinate_source_system of this Dfr094.
        :rtype: str
        """
        return self._coordinate_source_system

    @coordinate_source_system.setter
    def coordinate_source_system(self, coordinate_source_system):
        """Sets the coordinate_source_system of this Dfr094.

        ??

        :param coordinate_source_system: The coordinate_source_system of this Dfr094.
        :type coordinate_source_system: str
        """
        if coordinate_source_system is None:
            raise ValueError("Invalid value for `coordinate_source_system`, must not be `None`")

        self._coordinate_source_system = coordinate_source_system

    @property
    def coordinate_source_system_id(self):
        """Gets the coordinate_source_system_id of this Dfr094.

        ??

        :return: The coordinate_source_system_id of this Dfr094.
        :rtype: str
        """
        return self._coordinate_source_system_id

    @coordinate_source_system_id.setter
    def coordinate_source_system_id(self, coordinate_source_system_id):
        """Sets the coordinate_source_system_id of this Dfr094.

        ??

        :param coordinate_source_system_id: The coordinate_source_system_id of this Dfr094.
        :type coordinate_source_system_id: str
        """
        if coordinate_source_system_id is None:
            raise ValueError("Invalid value for `coordinate_source_system_id`, must not be `None`")

        self._coordinate_source_system_id = coordinate_source_system_id

    @property
    def latitude83(self):
        """Gets the latitude83 of this Dfr094.

        The latitude of the facility or permit holder as maintained in each data system.

        :return: The latitude83 of this Dfr094.
        :rtype: float
        """
        return self._latitude83

    @latitude83.setter
    def latitude83(self, latitude83):
        """Sets the latitude83 of this Dfr094.

        The latitude of the facility or permit holder as maintained in each data system.

        :param latitude83: The latitude83 of this Dfr094.
        :type latitude83: float
        """
        if latitude83 is None:
            raise ValueError("Invalid value for `latitude83`, must not be `None`")

        self._latitude83 = latitude83

    @property
    def longitude83(self):
        """Gets the longitude83 of this Dfr094.

        The longitude of the facility or permit holder as maintained in each data system

        :return: The longitude83 of this Dfr094.
        :rtype: float
        """
        return self._longitude83

    @longitude83.setter
    def longitude83(self, longitude83):
        """Sets the longitude83 of this Dfr094.

        The longitude of the facility or permit holder as maintained in each data system

        :param longitude83: The longitude83 of this Dfr094.
        :type longitude83: float
        """
        if longitude83 is None:
            raise ValueError("Invalid value for `longitude83`, must not be `None`")

        self._longitude83 = longitude83

    @property
    def reference_point(self):
        """Gets the reference_point of this Dfr094.

        ??

        :return: The reference_point of this Dfr094.
        :rtype: str
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this Dfr094.

        ??

        :param reference_point: The reference_point of this Dfr094.
        :type reference_point: str
        """
        if reference_point is None:
            raise ValueError("Invalid value for `reference_point`, must not be `None`")

        self._reference_point = reference_point

    @property
    def registry_id(self):
        """Gets the registry_id of this Dfr094.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Dfr094.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Dfr094.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Dfr094.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id
