# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr083_s_rules_violated import Dfr083SRulesViolated
from openapi_server.models.dfr0_qtr13_status import Dfr0Qtr13Status
from openapi_server import util


class Dfr083S(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules_violated: List[Dfr083SRulesViolated]=None, status: Dfr0Qtr13Status=None):
        """Dfr083S - a model defined in OpenAPI

        :param rules_violated: The rules_violated of this Dfr083S.
        :param status: The status of this Dfr083S.
        """
        self.openapi_types = {
            'rules_violated': List[Dfr083SRulesViolated],
            'status': Dfr0Qtr13Status
        }

        self.attribute_map = {
            'rules_violated': 'RulesViolated',
            'status': 'Status'
        }

        self._rules_violated = rules_violated
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr083S':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr083_s of this Dfr083S.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules_violated(self):
        """Gets the rules_violated of this Dfr083S.


        :return: The rules_violated of this Dfr083S.
        :rtype: List[Dfr083SRulesViolated]
        """
        return self._rules_violated

    @rules_violated.setter
    def rules_violated(self, rules_violated):
        """Sets the rules_violated of this Dfr083S.


        :param rules_violated: The rules_violated of this Dfr083S.
        :type rules_violated: List[Dfr083SRulesViolated]
        """
        if rules_violated is None:
            raise ValueError("Invalid value for `rules_violated`, must not be `None`")

        self._rules_violated = rules_violated

    @property
    def status(self):
        """Gets the status of this Dfr083S.


        :return: The status of this Dfr083S.
        :rtype: Dfr0Qtr13Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dfr083S.


        :param status: The status of this Dfr083S.
        :type status: Dfr0Qtr13Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
