# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018RegistryIDs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epa_system: str=None, facility_city: str=None, facility_county: str=None, facility_name: str=None, facility_state: str=None, facility_street: str=None, facility_zip: str=None, registry_id: str=None):
        """Dfr018RegistryIDs - a model defined in OpenAPI

        :param epa_system: The epa_system of this Dfr018RegistryIDs.
        :param facility_city: The facility_city of this Dfr018RegistryIDs.
        :param facility_county: The facility_county of this Dfr018RegistryIDs.
        :param facility_name: The facility_name of this Dfr018RegistryIDs.
        :param facility_state: The facility_state of this Dfr018RegistryIDs.
        :param facility_street: The facility_street of this Dfr018RegistryIDs.
        :param facility_zip: The facility_zip of this Dfr018RegistryIDs.
        :param registry_id: The registry_id of this Dfr018RegistryIDs.
        """
        self.openapi_types = {
            'epa_system': str,
            'facility_city': str,
            'facility_county': str,
            'facility_name': str,
            'facility_state': str,
            'facility_street': str,
            'facility_zip': str,
            'registry_id': str
        }

        self.attribute_map = {
            'epa_system': 'EPASystem',
            'facility_city': 'FacilityCity',
            'facility_county': 'FacilityCounty',
            'facility_name': 'FacilityName',
            'facility_state': 'FacilityState',
            'facility_street': 'FacilityStreet',
            'facility_zip': 'FacilityZip',
            'registry_id': 'RegistryId'
        }

        self._epa_system = epa_system
        self._facility_city = facility_city
        self._facility_county = facility_county
        self._facility_name = facility_name
        self._facility_state = facility_state
        self._facility_street = facility_street
        self._facility_zip = facility_zip
        self._registry_id = registry_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018RegistryIDs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_RegistryIDs of this Dfr018RegistryIDs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr018RegistryIDs.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr018RegistryIDs.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr018RegistryIDs.
        :type epa_system: str
        """

        self._epa_system = epa_system

    @property
    def facility_city(self):
        """Gets the facility_city of this Dfr018RegistryIDs.

        The city in which the facility is located

        :return: The facility_city of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this Dfr018RegistryIDs.

        The city in which the facility is located

        :param facility_city: The facility_city of this Dfr018RegistryIDs.
        :type facility_city: str
        """

        self._facility_city = facility_city

    @property
    def facility_county(self):
        """Gets the facility_county of this Dfr018RegistryIDs.

        The county that the facility is located in.

        :return: The facility_county of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_county

    @facility_county.setter
    def facility_county(self, facility_county):
        """Sets the facility_county of this Dfr018RegistryIDs.

        The county that the facility is located in.

        :param facility_county: The facility_county of this Dfr018RegistryIDs.
        :type facility_county: str
        """

        self._facility_county = facility_county

    @property
    def facility_name(self):
        """Gets the facility_name of this Dfr018RegistryIDs.

        The name of the facility.

        :return: The facility_name of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Dfr018RegistryIDs.

        The name of the facility.

        :param facility_name: The facility_name of this Dfr018RegistryIDs.
        :type facility_name: str
        """

        self._facility_name = facility_name

    @property
    def facility_state(self):
        """Gets the facility_state of this Dfr018RegistryIDs.

        The state in which the facility is located

        :return: The facility_state of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this Dfr018RegistryIDs.

        The state in which the facility is located

        :param facility_state: The facility_state of this Dfr018RegistryIDs.
        :type facility_state: str
        """

        self._facility_state = facility_state

    @property
    def facility_street(self):
        """Gets the facility_street of this Dfr018RegistryIDs.

        The street address of the facility

        :return: The facility_street of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_street

    @facility_street.setter
    def facility_street(self, facility_street):
        """Sets the facility_street of this Dfr018RegistryIDs.

        The street address of the facility

        :param facility_street: The facility_street of this Dfr018RegistryIDs.
        :type facility_street: str
        """

        self._facility_street = facility_street

    @property
    def facility_zip(self):
        """Gets the facility_zip of this Dfr018RegistryIDs.

        The zip code of the area in which the facility is located

        :return: The facility_zip of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this Dfr018RegistryIDs.

        The zip code of the area in which the facility is located

        :param facility_zip: The facility_zip of this Dfr018RegistryIDs.
        :type facility_zip: str
        """

        self._facility_zip = facility_zip

    @property
    def registry_id(self):
        """Gets the registry_id of this Dfr018RegistryIDs.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :return: The registry_id of this Dfr018RegistryIDs.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Dfr018RegistryIDs.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :param registry_id: The registry_id of this Dfr018RegistryIDs.
        :type registry_id: str
        """

        self._registry_id = registry_id
