# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr0GetD80d90sDetailsD80D90sDetailsSources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_late: str=None, dmr_due_date: str=None, limit_begin_date: str=None, limit_end_date: str=None, limit_id: str=None, limit_set_name: str=None, missing_late: str=None, monitoring_location_code: str=None, monitoring_location_desc: str=None, monitoring_period_end_date: str=None, npdesid: str=None, nodi_code: str=None, nodi_desc: str=None, nodi_validation_flag: str=None, npdes_violation_id: str=None, parameter_code: str=None, parameter_desc: str=None, perm_feature_nmbr: str=None, rnc_detection_code: str=None, rnc_detection_date: str=None, rnc_detection_desc: str=None, rnc_resolution_code: str=None, rnc_resolution_date: str=None, rnc_resolution_desc: str=None, statistical_base_monthly_avg: str=None, value_received_date: str=None, value_type_code: str=None, version_nmbr: str=None, violation_code: str=None):
        """Dfr0GetD80d90sDetailsD80D90sDetailsSources - a model defined in OpenAPI

        :param days_late: The days_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param dmr_due_date: The dmr_due_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param limit_begin_date: The limit_begin_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param limit_end_date: The limit_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param limit_id: The limit_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param limit_set_name: The limit_set_name of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param missing_late: The missing_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param monitoring_location_code: The monitoring_location_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param monitoring_location_desc: The monitoring_location_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param monitoring_period_end_date: The monitoring_period_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param npdesid: The npdesid of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param nodi_code: The nodi_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param nodi_desc: The nodi_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param nodi_validation_flag: The nodi_validation_flag of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param npdes_violation_id: The npdes_violation_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param parameter_code: The parameter_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param parameter_desc: The parameter_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param perm_feature_nmbr: The perm_feature_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_detection_code: The rnc_detection_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_detection_date: The rnc_detection_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_detection_desc: The rnc_detection_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_resolution_code: The rnc_resolution_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_resolution_date: The rnc_resolution_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param rnc_resolution_desc: The rnc_resolution_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param statistical_base_monthly_avg: The statistical_base_monthly_avg of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param value_received_date: The value_received_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param value_type_code: The value_type_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param version_nmbr: The version_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :param violation_code: The violation_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        """
        self.openapi_types = {
            'days_late': str,
            'dmr_due_date': str,
            'limit_begin_date': str,
            'limit_end_date': str,
            'limit_id': str,
            'limit_set_name': str,
            'missing_late': str,
            'monitoring_location_code': str,
            'monitoring_location_desc': str,
            'monitoring_period_end_date': str,
            'npdesid': str,
            'nodi_code': str,
            'nodi_desc': str,
            'nodi_validation_flag': str,
            'npdes_violation_id': str,
            'parameter_code': str,
            'parameter_desc': str,
            'perm_feature_nmbr': str,
            'rnc_detection_code': str,
            'rnc_detection_date': str,
            'rnc_detection_desc': str,
            'rnc_resolution_code': str,
            'rnc_resolution_date': str,
            'rnc_resolution_desc': str,
            'statistical_base_monthly_avg': str,
            'value_received_date': str,
            'value_type_code': str,
            'version_nmbr': str,
            'violation_code': str
        }

        self.attribute_map = {
            'days_late': 'DaysLate',
            'dmr_due_date': 'DmrDueDate',
            'limit_begin_date': 'LimitBeginDate',
            'limit_end_date': 'LimitEndDate',
            'limit_id': 'LimitId',
            'limit_set_name': 'LimitSetName',
            'missing_late': 'MissingLate',
            'monitoring_location_code': 'MonitoringLocationCode',
            'monitoring_location_desc': 'MonitoringLocationDesc',
            'monitoring_period_end_date': 'MonitoringPeriodEndDate',
            'npdesid': 'NPDESId',
            'nodi_code': 'NodiCode',
            'nodi_desc': 'NodiDesc',
            'nodi_validation_flag': 'NodiValidationFlag',
            'npdes_violation_id': 'NpdesViolationId',
            'parameter_code': 'ParameterCode',
            'parameter_desc': 'ParameterDesc',
            'perm_feature_nmbr': 'PermFeatureNmbr',
            'rnc_detection_code': 'RncDetectionCode',
            'rnc_detection_date': 'RncDetectionDate',
            'rnc_detection_desc': 'RncDetectionDesc',
            'rnc_resolution_code': 'RncResolutionCode',
            'rnc_resolution_date': 'RncResolutionDate',
            'rnc_resolution_desc': 'RncResolutionDesc',
            'statistical_base_monthly_avg': 'StatisticalBaseMonthlyAvg',
            'value_received_date': 'ValueReceivedDate',
            'value_type_code': 'ValueTypeCode',
            'version_nmbr': 'VersionNmbr',
            'violation_code': 'ViolationCode'
        }

        self._days_late = days_late
        self._dmr_due_date = dmr_due_date
        self._limit_begin_date = limit_begin_date
        self._limit_end_date = limit_end_date
        self._limit_id = limit_id
        self._limit_set_name = limit_set_name
        self._missing_late = missing_late
        self._monitoring_location_code = monitoring_location_code
        self._monitoring_location_desc = monitoring_location_desc
        self._monitoring_period_end_date = monitoring_period_end_date
        self._npdesid = npdesid
        self._nodi_code = nodi_code
        self._nodi_desc = nodi_desc
        self._nodi_validation_flag = nodi_validation_flag
        self._npdes_violation_id = npdes_violation_id
        self._parameter_code = parameter_code
        self._parameter_desc = parameter_desc
        self._perm_feature_nmbr = perm_feature_nmbr
        self._rnc_detection_code = rnc_detection_code
        self._rnc_detection_date = rnc_detection_date
        self._rnc_detection_desc = rnc_detection_desc
        self._rnc_resolution_code = rnc_resolution_code
        self._rnc_resolution_date = rnc_resolution_date
        self._rnc_resolution_desc = rnc_resolution_desc
        self._statistical_base_monthly_avg = statistical_base_monthly_avg
        self._value_received_date = value_received_date
        self._value_type_code = value_type_code
        self._version_nmbr = version_nmbr
        self._violation_code = violation_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr0GetD80d90sDetailsD80D90sDetailsSources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr0_get_d80d90s_details.D80D90sDetails.Sources of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_late(self):
        """Gets the days_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The number of days the DMR value is late, as generated in ICIS-NPDES

        :return: The days_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._days_late

    @days_late.setter
    def days_late(self, days_late):
        """Sets the days_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The number of days the DMR value is late, as generated in ICIS-NPDES

        :param days_late: The days_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type days_late: str
        """
        if days_late is None:
            raise ValueError("Invalid value for `days_late`, must not be `None`")

        self._days_late = days_late

    @property
    def dmr_due_date(self):
        """Gets the dmr_due_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The due date for the DMR to the NPDES program authority (e.g., EPA or state environmental agency) (MM/DD/YYYY).ï¿½

        :return: The dmr_due_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._dmr_due_date

    @dmr_due_date.setter
    def dmr_due_date(self, dmr_due_date):
        """Sets the dmr_due_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The due date for the DMR to the NPDES program authority (e.g., EPA or state environmental agency) (MM/DD/YYYY).ï¿½

        :param dmr_due_date: The dmr_due_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type dmr_due_date: str
        """
        if dmr_due_date is None:
            raise ValueError("Invalid value for `dmr_due_date`, must not be `None`")

        self._dmr_due_date = dmr_due_date

    @property
    def limit_begin_date(self):
        """Gets the limit_begin_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date on which a limit becomes in effect for a particular parameter in a limit set

        :return: The limit_begin_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._limit_begin_date

    @limit_begin_date.setter
    def limit_begin_date(self, limit_begin_date):
        """Sets the limit_begin_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date on which a limit becomes in effect for a particular parameter in a limit set

        :param limit_begin_date: The limit_begin_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type limit_begin_date: str
        """
        if limit_begin_date is None:
            raise ValueError("Invalid value for `limit_begin_date`, must not be `None`")

        self._limit_begin_date = limit_begin_date

    @property
    def limit_end_date(self):
        """Gets the limit_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date on which a limit stops being in effect for a particular parameter in a limit set

        :return: The limit_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._limit_end_date

    @limit_end_date.setter
    def limit_end_date(self, limit_end_date):
        """Sets the limit_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date on which a limit stops being in effect for a particular parameter in a limit set

        :param limit_end_date: The limit_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type limit_end_date: str
        """
        if limit_end_date is None:
            raise ValueError("Invalid value for `limit_end_date`, must not be `None`")

        self._limit_end_date = limit_end_date

    @property
    def limit_id(self):
        """Gets the limit_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique identifier for a limit parameter record

        :return: The limit_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._limit_id

    @limit_id.setter
    def limit_id(self, limit_id):
        """Sets the limit_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique identifier for a limit parameter record

        :param limit_id: The limit_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type limit_id: str
        """
        if limit_id is None:
            raise ValueError("Invalid value for `limit_id`, must not be `None`")

        self._limit_id = limit_id

    @property
    def limit_set_name(self):
        """Gets the limit_set_name of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The name associated with a group of parameter permit limits.

        :return: The limit_set_name of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._limit_set_name

    @limit_set_name.setter
    def limit_set_name(self, limit_set_name):
        """Sets the limit_set_name of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The name associated with a group of parameter permit limits.

        :param limit_set_name: The limit_set_name of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type limit_set_name: str
        """
        if limit_set_name is None:
            raise ValueError("Invalid value for `limit_set_name`, must not be `None`")

        self._limit_set_name = limit_set_name

    @property
    def missing_late(self):
        """Gets the missing_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        Indicates if the permitted facility submitted missing or late DMRS to the NPDES permitting authority within the past three years.

        :return: The missing_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._missing_late

    @missing_late.setter
    def missing_late(self, missing_late):
        """Sets the missing_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        Indicates if the permitted facility submitted missing or late DMRS to the NPDES permitting authority within the past three years.

        :param missing_late: The missing_late of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type missing_late: str
        """
        if missing_late is None:
            raise ValueError("Invalid value for `missing_late`, must not be `None`")

        self._missing_late = missing_late

    @property
    def monitoring_location_code(self):
        """Gets the monitoring_location_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature

        :return: The monitoring_location_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._monitoring_location_code

    @monitoring_location_code.setter
    def monitoring_location_code(self, monitoring_location_code):
        """Sets the monitoring_location_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature

        :param monitoring_location_code: The monitoring_location_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type monitoring_location_code: str
        """
        if monitoring_location_code is None:
            raise ValueError("Invalid value for `monitoring_location_code`, must not be `None`")

        self._monitoring_location_code = monitoring_location_code

    @property
    def monitoring_location_desc(self):
        """Gets the monitoring_location_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies

        :return: The monitoring_location_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._monitoring_location_desc

    @monitoring_location_desc.setter
    def monitoring_location_desc(self, monitoring_location_desc):
        """Sets the monitoring_location_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies

        :param monitoring_location_desc: The monitoring_location_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type monitoring_location_desc: str
        """
        if monitoring_location_desc is None:
            raise ValueError("Invalid value for `monitoring_location_desc`, must not be `None`")

        self._monitoring_location_desc = monitoring_location_desc

    @property
    def monitoring_period_end_date(self):
        """Gets the monitoring_period_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date that the monitoring period for the values covered by the DMR Form ends

        :return: The monitoring_period_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._monitoring_period_end_date

    @monitoring_period_end_date.setter
    def monitoring_period_end_date(self, monitoring_period_end_date):
        """Sets the monitoring_period_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date that the monitoring period for the values covered by the DMR Form ends

        :param monitoring_period_end_date: The monitoring_period_end_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type monitoring_period_end_date: str
        """
        if monitoring_period_end_date is None:
            raise ValueError("Invalid value for `monitoring_period_end_date`, must not be `None`")

        self._monitoring_period_end_date = monitoring_period_end_date

    @property
    def npdesid(self):
        """Gets the npdesid of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        A unique ID assigned for each record/permit/site/facility within ICIS-NPDES.

        :return: The npdesid of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._npdesid

    @npdesid.setter
    def npdesid(self, npdesid):
        """Sets the npdesid of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        A unique ID assigned for each record/permit/site/facility within ICIS-NPDES.

        :param npdesid: The npdesid of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type npdesid: str
        """
        if npdesid is None:
            raise ValueError("Invalid value for `npdesid`, must not be `None`")

        self._npdesid = npdesid

    @property
    def nodi_code(self):
        """Gets the nodi_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The no data indicator code for DMRs where no measurements are reported.

        :return: The nodi_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._nodi_code

    @nodi_code.setter
    def nodi_code(self, nodi_code):
        """Sets the nodi_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The no data indicator code for DMRs where no measurements are reported.

        :param nodi_code: The nodi_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type nodi_code: str
        """
        if nodi_code is None:
            raise ValueError("Invalid value for `nodi_code`, must not be `None`")

        self._nodi_code = nodi_code

    @property
    def nodi_desc(self):
        """Gets the nodi_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The description of the NODI code explaining why no data are reported (e.g., no discharge, not quantifiable, conditional monitoring).

        :return: The nodi_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._nodi_desc

    @nodi_desc.setter
    def nodi_desc(self, nodi_desc):
        """Sets the nodi_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The description of the NODI code explaining why no data are reported (e.g., no discharge, not quantifiable, conditional monitoring).

        :param nodi_desc: The nodi_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type nodi_desc: str
        """
        if nodi_desc is None:
            raise ValueError("Invalid value for `nodi_desc`, must not be `None`")

        self._nodi_desc = nodi_desc

    @property
    def nodi_validation_flag(self):
        """Gets the nodi_validation_flag of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        Indicates whether the NODI is considered valid (Y) or invalid (N) for compliance determination purposes.

        :return: The nodi_validation_flag of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._nodi_validation_flag

    @nodi_validation_flag.setter
    def nodi_validation_flag(self, nodi_validation_flag):
        """Sets the nodi_validation_flag of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        Indicates whether the NODI is considered valid (Y) or invalid (N) for compliance determination purposes.

        :param nodi_validation_flag: The nodi_validation_flag of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type nodi_validation_flag: str
        """
        if nodi_validation_flag is None:
            raise ValueError("Invalid value for `nodi_validation_flag`, must not be `None`")

        self._nodi_validation_flag = nodi_validation_flag

    @property
    def npdes_violation_id(self):
        """Gets the npdes_violation_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique identifier for the violation related to a particular site.

        :return: The npdes_violation_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._npdes_violation_id

    @npdes_violation_id.setter
    def npdes_violation_id(self, npdes_violation_id):
        """Sets the npdes_violation_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique identifier for the violation related to a particular site.

        :param npdes_violation_id: The npdes_violation_id of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type npdes_violation_id: str
        """
        if npdes_violation_id is None:
            raise ValueError("Invalid value for `npdes_violation_id`, must not be `None`")

        self._npdes_violation_id = npdes_violation_id

    @property
    def parameter_code(self):
        """Gets the parameter_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :return: The parameter_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._parameter_code

    @parameter_code.setter
    def parameter_code(self, parameter_code):
        """Sets the parameter_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :param parameter_code: The parameter_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type parameter_code: str
        """
        if parameter_code is None:
            raise ValueError("Invalid value for `parameter_code`, must not be `None`")

        self._parameter_code = parameter_code

    @property
    def parameter_desc(self):
        """Gets the parameter_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :return: The parameter_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._parameter_desc

    @parameter_desc.setter
    def parameter_desc(self, parameter_desc):
        """Sets the parameter_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :param parameter_desc: The parameter_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type parameter_desc: str
        """
        if parameter_desc is None:
            raise ValueError("Invalid value for `parameter_desc`, must not be `None`")

        self._parameter_desc = parameter_desc

    @property
    def perm_feature_nmbr(self):
        """Gets the perm_feature_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)

        :return: The perm_feature_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._perm_feature_nmbr

    @perm_feature_nmbr.setter
    def perm_feature_nmbr(self, perm_feature_nmbr):
        """Sets the perm_feature_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)

        :param perm_feature_nmbr: The perm_feature_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type perm_feature_nmbr: str
        """
        if perm_feature_nmbr is None:
            raise ValueError("Invalid value for `perm_feature_nmbr`, must not be `None`")

        self._perm_feature_nmbr = perm_feature_nmbr

    @property
    def rnc_detection_code(self):
        """Gets the rnc_detection_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance detection code.

        :return: The rnc_detection_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_detection_code

    @rnc_detection_code.setter
    def rnc_detection_code(self, rnc_detection_code):
        """Sets the rnc_detection_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance detection code.

        :param rnc_detection_code: The rnc_detection_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_detection_code: str
        """
        if rnc_detection_code is None:
            raise ValueError("Invalid value for `rnc_detection_code`, must not be `None`")

        self._rnc_detection_code = rnc_detection_code

    @property
    def rnc_detection_date(self):
        """Gets the rnc_detection_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date that RNC was detected. It can be entered manually or automatically. In cases in which RNC is detected by ICIS-NPDES, the detection date entered will vary according to the type of violation detected (MM/DD/YYY).

        :return: The rnc_detection_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_detection_date

    @rnc_detection_date.setter
    def rnc_detection_date(self, rnc_detection_date):
        """Sets the rnc_detection_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date that RNC was detected. It can be entered manually or automatically. In cases in which RNC is detected by ICIS-NPDES, the detection date entered will vary according to the type of violation detected (MM/DD/YYY).

        :param rnc_detection_date: The rnc_detection_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_detection_date: str
        """
        if rnc_detection_date is None:
            raise ValueError("Invalid value for `rnc_detection_date`, must not be `None`")

        self._rnc_detection_date = rnc_detection_date

    @property
    def rnc_detection_desc(self):
        """Gets the rnc_detection_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance detection description.

        :return: The rnc_detection_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_detection_desc

    @rnc_detection_desc.setter
    def rnc_detection_desc(self, rnc_detection_desc):
        """Sets the rnc_detection_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance detection description.

        :param rnc_detection_desc: The rnc_detection_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_detection_desc: str
        """
        if rnc_detection_desc is None:
            raise ValueError("Invalid value for `rnc_detection_desc`, must not be `None`")

        self._rnc_detection_desc = rnc_detection_desc

    @property
    def rnc_resolution_code(self):
        """Gets the rnc_resolution_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution code.

        :return: The rnc_resolution_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_resolution_code

    @rnc_resolution_code.setter
    def rnc_resolution_code(self, rnc_resolution_code):
        """Sets the rnc_resolution_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution code.

        :param rnc_resolution_code: The rnc_resolution_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_resolution_code: str
        """
        if rnc_resolution_code is None:
            raise ValueError("Invalid value for `rnc_resolution_code`, must not be `None`")

        self._rnc_resolution_code = rnc_resolution_code

    @property
    def rnc_resolution_date(self):
        """Gets the rnc_resolution_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution date.

        :return: The rnc_resolution_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_resolution_date

    @rnc_resolution_date.setter
    def rnc_resolution_date(self, rnc_resolution_date):
        """Sets the rnc_resolution_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution date.

        :param rnc_resolution_date: The rnc_resolution_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_resolution_date: str
        """
        if rnc_resolution_date is None:
            raise ValueError("Invalid value for `rnc_resolution_date`, must not be `None`")

        self._rnc_resolution_date = rnc_resolution_date

    @property
    def rnc_resolution_desc(self):
        """Gets the rnc_resolution_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution description.

        :return: The rnc_resolution_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._rnc_resolution_desc

    @rnc_resolution_desc.setter
    def rnc_resolution_desc(self, rnc_resolution_desc):
        """Sets the rnc_resolution_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The reportable noncompliance resolution description.

        :param rnc_resolution_desc: The rnc_resolution_desc of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type rnc_resolution_desc: str
        """
        if rnc_resolution_desc is None:
            raise ValueError("Invalid value for `rnc_resolution_desc`, must not be `None`")

        self._rnc_resolution_desc = rnc_resolution_desc

    @property
    def statistical_base_monthly_avg(self):
        """Gets the statistical_base_monthly_avg of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.


        :return: The statistical_base_monthly_avg of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._statistical_base_monthly_avg

    @statistical_base_monthly_avg.setter
    def statistical_base_monthly_avg(self, statistical_base_monthly_avg):
        """Sets the statistical_base_monthly_avg of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.


        :param statistical_base_monthly_avg: The statistical_base_monthly_avg of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type statistical_base_monthly_avg: str
        """
        if statistical_base_monthly_avg is None:
            raise ValueError("Invalid value for `statistical_base_monthly_avg`, must not be `None`")

        self._statistical_base_monthly_avg = statistical_base_monthly_avg

    @property
    def value_received_date(self):
        """Gets the value_received_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date the DMR value was received by the regulatory authority

        :return: The value_received_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._value_received_date

    @value_received_date.setter
    def value_received_date(self, value_received_date):
        """Sets the value_received_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The date the DMR value was received by the regulatory authority

        :param value_received_date: The value_received_date of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type value_received_date: str
        """
        if value_received_date is None:
            raise ValueError("Invalid value for `value_received_date`, must not be `None`")

        self._value_received_date = value_received_date

    @property
    def value_type_code(self):
        """Gets the value_type_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The indication of the limit value type (e.g., Quantity 1, Concentration 2)

        :return: The value_type_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._value_type_code

    @value_type_code.setter
    def value_type_code(self, value_type_code):
        """Sets the value_type_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The indication of the limit value type (e.g., Quantity 1, Concentration 2)

        :param value_type_code: The value_type_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type value_type_code: str
        """
        if value_type_code is None:
            raise ValueError("Invalid value for `value_type_code`, must not be `None`")

        self._value_type_code = value_type_code

    @property
    def version_nmbr(self):
        """Gets the version_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance

        :return: The version_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._version_nmbr

    @version_nmbr.setter
    def version_nmbr(self, version_nmbr):
        """Sets the version_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance

        :param version_nmbr: The version_nmbr of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type version_nmbr: str
        """
        if version_nmbr is None:
            raise ValueError("Invalid value for `version_nmbr`, must not be `None`")

        self._version_nmbr = version_nmbr

    @property
    def violation_code(self):
        """Gets the violation_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)

        :return: The violation_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :rtype: str
        """
        return self._violation_code

    @violation_code.setter
    def violation_code(self, violation_code):
        """Sets the violation_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.

        The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)

        :param violation_code: The violation_code of this Dfr0GetD80d90sDetailsD80D90sDetailsSources.
        :type violation_code: str
        """
        if violation_code is None:
            raise ValueError("Invalid value for `violation_code`, must not be `None`")

        self._violation_code = violation_code
