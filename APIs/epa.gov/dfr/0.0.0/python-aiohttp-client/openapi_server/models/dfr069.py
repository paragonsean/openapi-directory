# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr069(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_last_inspection: str=None, epa_system: str=None, formal_enf_act_count: str=None, inspection_count: str=None, source_id: str=None, statute: str=None, total_penalties: str=None):
        """Dfr069 - a model defined in OpenAPI

        :param date_last_inspection: The date_last_inspection of this Dfr069.
        :param epa_system: The epa_system of this Dfr069.
        :param formal_enf_act_count: The formal_enf_act_count of this Dfr069.
        :param inspection_count: The inspection_count of this Dfr069.
        :param source_id: The source_id of this Dfr069.
        :param statute: The statute of this Dfr069.
        :param total_penalties: The total_penalties of this Dfr069.
        """
        self.openapi_types = {
            'date_last_inspection': str,
            'epa_system': str,
            'formal_enf_act_count': str,
            'inspection_count': str,
            'source_id': str,
            'statute': str,
            'total_penalties': str
        }

        self.attribute_map = {
            'date_last_inspection': 'DateLastInspection',
            'epa_system': 'EPASystem',
            'formal_enf_act_count': 'FormalEnfActCount',
            'inspection_count': 'InspectionCount',
            'source_id': 'SourceID',
            'statute': 'Statute',
            'total_penalties': 'TotalPenalties'
        }

        self._date_last_inspection = date_last_inspection
        self._epa_system = epa_system
        self._formal_enf_act_count = formal_enf_act_count
        self._inspection_count = inspection_count
        self._source_id = source_id
        self._statute = statute
        self._total_penalties = total_penalties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr069':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr069 of this Dfr069.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_last_inspection(self):
        """Gets the date_last_inspection of this Dfr069.

        The date on which the most recent inspection of the facility took place

        :return: The date_last_inspection of this Dfr069.
        :rtype: str
        """
        return self._date_last_inspection

    @date_last_inspection.setter
    def date_last_inspection(self, date_last_inspection):
        """Sets the date_last_inspection of this Dfr069.

        The date on which the most recent inspection of the facility took place

        :param date_last_inspection: The date_last_inspection of this Dfr069.
        :type date_last_inspection: str
        """
        if date_last_inspection is None:
            raise ValueError("Invalid value for `date_last_inspection`, must not be `None`")

        self._date_last_inspection = date_last_inspection

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr069.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr069.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr069.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr069.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def formal_enf_act_count(self):
        """Gets the formal_enf_act_count of this Dfr069.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the last five years.

        :return: The formal_enf_act_count of this Dfr069.
        :rtype: str
        """
        return self._formal_enf_act_count

    @formal_enf_act_count.setter
    def formal_enf_act_count(self, formal_enf_act_count):
        """Sets the formal_enf_act_count of this Dfr069.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the last five years.

        :param formal_enf_act_count: The formal_enf_act_count of this Dfr069.
        :type formal_enf_act_count: str
        """
        if formal_enf_act_count is None:
            raise ValueError("Invalid value for `formal_enf_act_count`, must not be `None`")

        self._formal_enf_act_count = formal_enf_act_count

    @property
    def inspection_count(self):
        """Gets the inspection_count of this Dfr069.

        The total number of inspections pertaining to compliance of the designated statute

        :return: The inspection_count of this Dfr069.
        :rtype: str
        """
        return self._inspection_count

    @inspection_count.setter
    def inspection_count(self, inspection_count):
        """Sets the inspection_count of this Dfr069.

        The total number of inspections pertaining to compliance of the designated statute

        :param inspection_count: The inspection_count of this Dfr069.
        :type inspection_count: str
        """
        if inspection_count is None:
            raise ValueError("Invalid value for `inspection_count`, must not be `None`")

        self._inspection_count = inspection_count

    @property
    def source_id(self):
        """Gets the source_id of this Dfr069.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr069.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr069.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr069.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr069.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr069.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr069.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr069.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def total_penalties(self):
        """Gets the total_penalties of this Dfr069.

        The total dollar amount of either assessed or final penalties within the five year time period

        :return: The total_penalties of this Dfr069.
        :rtype: str
        """
        return self._total_penalties

    @total_penalties.setter
    def total_penalties(self, total_penalties):
        """Sets the total_penalties of this Dfr069.

        The total dollar amount of either assessed or final penalties within the five year time period

        :param total_penalties: The total_penalties of this Dfr069.
        :type total_penalties: str
        """
        if total_penalties is None:
            raise ValueError("Invalid value for `total_penalties`, must not be `None`")

        self._total_penalties = total_penalties
