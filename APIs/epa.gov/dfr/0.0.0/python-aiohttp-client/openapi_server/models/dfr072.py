# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr072(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pb90: str=None, pb90_dates: str=None, pb90_units: str=None, pb90_value: str=None):
        """Dfr072 - a model defined in OpenAPI

        :param pb90: The pb90 of this Dfr072.
        :param pb90_dates: The pb90_dates of this Dfr072.
        :param pb90_units: The pb90_units of this Dfr072.
        :param pb90_value: The pb90_value of this Dfr072.
        """
        self.openapi_types = {
            'pb90': str,
            'pb90_dates': str,
            'pb90_units': str,
            'pb90_value': str
        }

        self.attribute_map = {
            'pb90': 'PB90',
            'pb90_dates': 'PB90Dates',
            'pb90_units': 'PB90Units',
            'pb90_value': 'PB90Value'
        }

        self._pb90 = pb90
        self._pb90_dates = pb90_dates
        self._pb90_units = pb90_units
        self._pb90_value = pb90_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr072':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr072 of this Dfr072.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pb90(self):
        """Gets the pb90 of this Dfr072.

        The concentration of lead representing the 90th percentile level of all tap water samples collected for the water system

        :return: The pb90 of this Dfr072.
        :rtype: str
        """
        return self._pb90

    @pb90.setter
    def pb90(self, pb90):
        """Sets the pb90 of this Dfr072.

        The concentration of lead representing the 90th percentile level of all tap water samples collected for the water system

        :param pb90: The pb90 of this Dfr072.
        :type pb90: str
        """
        if pb90 is None:
            raise ValueError("Invalid value for `pb90`, must not be `None`")

        self._pb90 = pb90

    @property
    def pb90_dates(self):
        """Gets the pb90_dates of this Dfr072.

        The dates during which tap water samples were collected.

        :return: The pb90_dates of this Dfr072.
        :rtype: str
        """
        return self._pb90_dates

    @pb90_dates.setter
    def pb90_dates(self, pb90_dates):
        """Sets the pb90_dates of this Dfr072.

        The dates during which tap water samples were collected.

        :param pb90_dates: The pb90_dates of this Dfr072.
        :type pb90_dates: str
        """
        if pb90_dates is None:
            raise ValueError("Invalid value for `pb90_dates`, must not be `None`")

        self._pb90_dates = pb90_dates

    @property
    def pb90_units(self):
        """Gets the pb90_units of this Dfr072.

        The measurement units.

        :return: The pb90_units of this Dfr072.
        :rtype: str
        """
        return self._pb90_units

    @pb90_units.setter
    def pb90_units(self, pb90_units):
        """Sets the pb90_units of this Dfr072.

        The measurement units.

        :param pb90_units: The pb90_units of this Dfr072.
        :type pb90_units: str
        """
        if pb90_units is None:
            raise ValueError("Invalid value for `pb90_units`, must not be `None`")

        self._pb90_units = pb90_units

    @property
    def pb90_value(self):
        """Gets the pb90_value of this Dfr072.

        The value of the concentration of lead representing the 90th percentile level of all tap water samples collected for the water system

        :return: The pb90_value of this Dfr072.
        :rtype: str
        """
        return self._pb90_value

    @pb90_value.setter
    def pb90_value(self, pb90_value):
        """Sets the pb90_value of this Dfr072.

        The value of the concentration of lead representing the 90th percentile level of all tap water samples collected for the water system

        :param pb90_value: The pb90_value of this Dfr072.
        :type pb90_value: str
        """
        if pb90_value is None:
            raise ValueError("Invalid value for `pb90_value`, must not be `None`")

        self._pb90_value = pb90_value
