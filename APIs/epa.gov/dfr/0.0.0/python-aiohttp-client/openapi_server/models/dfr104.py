# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr104(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, year1: str=None, year2: str=None, year3: str=None, year4: str=None, year5: str=None, year6: str=None, year7: str=None, year8: str=None, year9: str=None):
        """Dfr104 - a model defined in OpenAPI

        :param year1: The year1 of this Dfr104.
        :param year2: The year2 of this Dfr104.
        :param year3: The year3 of this Dfr104.
        :param year4: The year4 of this Dfr104.
        :param year5: The year5 of this Dfr104.
        :param year6: The year6 of this Dfr104.
        :param year7: The year7 of this Dfr104.
        :param year8: The year8 of this Dfr104.
        :param year9: The year9 of this Dfr104.
        """
        self.openapi_types = {
            'year1': str,
            'year2': str,
            'year3': str,
            'year4': str,
            'year5': str,
            'year6': str,
            'year7': str,
            'year8': str,
            'year9': str
        }

        self.attribute_map = {
            'year1': 'Year1',
            'year2': 'Year2',
            'year3': 'Year3',
            'year4': 'Year4',
            'year5': 'Year5',
            'year6': 'Year6',
            'year7': 'Year7',
            'year8': 'Year8',
            'year9': 'Year9'
        }

        self._year1 = year1
        self._year2 = year2
        self._year3 = year3
        self._year4 = year4
        self._year5 = year5
        self._year6 = year6
        self._year7 = year7
        self._year8 = year8
        self._year9 = year9

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr104':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr104 of this Dfr104.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def year1(self):
        """Gets the year1 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year1 of this Dfr104.
        :rtype: str
        """
        return self._year1

    @year1.setter
    def year1(self, year1):
        """Sets the year1 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year1: The year1 of this Dfr104.
        :type year1: str
        """
        if year1 is None:
            raise ValueError("Invalid value for `year1`, must not be `None`")

        self._year1 = year1

    @property
    def year2(self):
        """Gets the year2 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year2 of this Dfr104.
        :rtype: str
        """
        return self._year2

    @year2.setter
    def year2(self, year2):
        """Sets the year2 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year2: The year2 of this Dfr104.
        :type year2: str
        """
        if year2 is None:
            raise ValueError("Invalid value for `year2`, must not be `None`")

        self._year2 = year2

    @property
    def year3(self):
        """Gets the year3 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year3 of this Dfr104.
        :rtype: str
        """
        return self._year3

    @year3.setter
    def year3(self, year3):
        """Sets the year3 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year3: The year3 of this Dfr104.
        :type year3: str
        """
        if year3 is None:
            raise ValueError("Invalid value for `year3`, must not be `None`")

        self._year3 = year3

    @property
    def year4(self):
        """Gets the year4 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year4 of this Dfr104.
        :rtype: str
        """
        return self._year4

    @year4.setter
    def year4(self, year4):
        """Sets the year4 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year4: The year4 of this Dfr104.
        :type year4: str
        """
        if year4 is None:
            raise ValueError("Invalid value for `year4`, must not be `None`")

        self._year4 = year4

    @property
    def year5(self):
        """Gets the year5 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year5 of this Dfr104.
        :rtype: str
        """
        return self._year5

    @year5.setter
    def year5(self, year5):
        """Sets the year5 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year5: The year5 of this Dfr104.
        :type year5: str
        """
        if year5 is None:
            raise ValueError("Invalid value for `year5`, must not be `None`")

        self._year5 = year5

    @property
    def year6(self):
        """Gets the year6 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year6 of this Dfr104.
        :rtype: str
        """
        return self._year6

    @year6.setter
    def year6(self, year6):
        """Sets the year6 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year6: The year6 of this Dfr104.
        :type year6: str
        """
        if year6 is None:
            raise ValueError("Invalid value for `year6`, must not be `None`")

        self._year6 = year6

    @property
    def year7(self):
        """Gets the year7 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year7 of this Dfr104.
        :rtype: str
        """
        return self._year7

    @year7.setter
    def year7(self, year7):
        """Sets the year7 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year7: The year7 of this Dfr104.
        :type year7: str
        """
        if year7 is None:
            raise ValueError("Invalid value for `year7`, must not be `None`")

        self._year7 = year7

    @property
    def year8(self):
        """Gets the year8 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :return: The year8 of this Dfr104.
        :rtype: str
        """
        return self._year8

    @year8.setter
    def year8(self, year8):
        """Sets the year8 of this Dfr104.

        The calendar year during which TRI releases and transfers occurred.

        :param year8: The year8 of this Dfr104.
        :type year8: str
        """
        if year8 is None:
            raise ValueError("Invalid value for `year8`, must not be `None`")

        self._year8 = year8

    @property
    def year9(self):
        """Gets the year9 of this Dfr104.

        The most recent calendar year during which TRI releases and transfer occurred.

        :return: The year9 of this Dfr104.
        :rtype: str
        """
        return self._year9

    @year9.setter
    def year9(self, year9):
        """Sets the year9 of this Dfr104.

        The most recent calendar year during which TRI releases and transfer occurred.

        :param year9: The year9 of this Dfr104.
        :type year9: str
        """
        if year9 is None:
            raise ValueError("Invalid value for `year9`, must not be `None`")

        self._year9 = year9
