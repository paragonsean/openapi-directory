# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr086 import Dfr086
from openapi_server import util


class Dfr126Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, sanitary_surveys: Dfr086=None):
        """Dfr126Results - a model defined in OpenAPI

        :param message: The message of this Dfr126Results.
        :param sanitary_surveys: The sanitary_surveys of this Dfr126Results.
        """
        self.openapi_types = {
            'message': str,
            'sanitary_surveys': Dfr086
        }

        self.attribute_map = {
            'message': 'Message',
            'sanitary_surveys': 'SanitarySurveys'
        }

        self._message = message
        self._sanitary_surveys = sanitary_surveys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr126Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr126_Results of this Dfr126Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Dfr126Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr126Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr126Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr126Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sanitary_surveys(self):
        """Gets the sanitary_surveys of this Dfr126Results.


        :return: The sanitary_surveys of this Dfr126Results.
        :rtype: Dfr086
        """
        return self._sanitary_surveys

    @sanitary_surveys.setter
    def sanitary_surveys(self, sanitary_surveys):
        """Sets the sanitary_surveys of this Dfr126Results.


        :param sanitary_surveys: The sanitary_surveys of this Dfr126Results.
        :type sanitary_surveys: Dfr086
        """

        self._sanitary_surveys = sanitary_surveys
