# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018Summaries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cases: str=None, current_status: str=None, formal_actions: str=None, informal_actions: str=None, inspections: str=None, last_inspection: str=None, qtrs_in_nc: str=None, qtrs_in_snc: str=None, statute: str=None, total_case_penalties: str=None, total_penalties: str=None):
        """Dfr018Summaries - a model defined in OpenAPI

        :param cases: The cases of this Dfr018Summaries.
        :param current_status: The current_status of this Dfr018Summaries.
        :param formal_actions: The formal_actions of this Dfr018Summaries.
        :param informal_actions: The informal_actions of this Dfr018Summaries.
        :param inspections: The inspections of this Dfr018Summaries.
        :param last_inspection: The last_inspection of this Dfr018Summaries.
        :param qtrs_in_nc: The qtrs_in_nc of this Dfr018Summaries.
        :param qtrs_in_snc: The qtrs_in_snc of this Dfr018Summaries.
        :param statute: The statute of this Dfr018Summaries.
        :param total_case_penalties: The total_case_penalties of this Dfr018Summaries.
        :param total_penalties: The total_penalties of this Dfr018Summaries.
        """
        self.openapi_types = {
            'cases': str,
            'current_status': str,
            'formal_actions': str,
            'informal_actions': str,
            'inspections': str,
            'last_inspection': str,
            'qtrs_in_nc': str,
            'qtrs_in_snc': str,
            'statute': str,
            'total_case_penalties': str,
            'total_penalties': str
        }

        self.attribute_map = {
            'cases': 'Cases',
            'current_status': 'CurrentStatus',
            'formal_actions': 'FormalActions',
            'informal_actions': 'InformalActions',
            'inspections': 'Inspections',
            'last_inspection': 'LastInspection',
            'qtrs_in_nc': 'QtrsInNC',
            'qtrs_in_snc': 'QtrsInSNC',
            'statute': 'Statute',
            'total_case_penalties': 'TotalCasePenalties',
            'total_penalties': 'TotalPenalties'
        }

        self._cases = cases
        self._current_status = current_status
        self._formal_actions = formal_actions
        self._informal_actions = informal_actions
        self._inspections = inspections
        self._last_inspection = last_inspection
        self._qtrs_in_nc = qtrs_in_nc
        self._qtrs_in_snc = qtrs_in_snc
        self._statute = statute
        self._total_case_penalties = total_case_penalties
        self._total_penalties = total_penalties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018Summaries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_Summaries of this Dfr018Summaries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cases(self):
        """Gets the cases of this Dfr018Summaries.

        The number of EPA enforcement cases that have been brought against the facility, under the corresponding statute, within the designated time period.

        :return: The cases of this Dfr018Summaries.
        :rtype: str
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Dfr018Summaries.

        The number of EPA enforcement cases that have been brought against the facility, under the corresponding statute, within the designated time period.

        :param cases: The cases of this Dfr018Summaries.
        :type cases: str
        """
        if cases is None:
            raise ValueError("Invalid value for `cases`, must not be `None`")

        self._cases = cases

    @property
    def current_status(self):
        """Gets the current_status of this Dfr018Summaries.

        The current status for the facility during the most current quarter. (No violation, noncompliance)

        :return: The current_status of this Dfr018Summaries.
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this Dfr018Summaries.

        The current status for the facility during the most current quarter. (No violation, noncompliance)

        :param current_status: The current_status of this Dfr018Summaries.
        :type current_status: str
        """
        if current_status is None:
            raise ValueError("Invalid value for `current_status`, must not be `None`")

        self._current_status = current_status

    @property
    def formal_actions(self):
        """Gets the formal_actions of this Dfr018Summaries.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :return: The formal_actions of this Dfr018Summaries.
        :rtype: str
        """
        return self._formal_actions

    @formal_actions.setter
    def formal_actions(self, formal_actions):
        """Sets the formal_actions of this Dfr018Summaries.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :param formal_actions: The formal_actions of this Dfr018Summaries.
        :type formal_actions: str
        """
        if formal_actions is None:
            raise ValueError("Invalid value for `formal_actions`, must not be `None`")

        self._formal_actions = formal_actions

    @property
    def informal_actions(self):
        """Gets the informal_actions of this Dfr018Summaries.

        The number of informal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :return: The informal_actions of this Dfr018Summaries.
        :rtype: str
        """
        return self._informal_actions

    @informal_actions.setter
    def informal_actions(self, informal_actions):
        """Sets the informal_actions of this Dfr018Summaries.

        The number of informal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :param informal_actions: The informal_actions of this Dfr018Summaries.
        :type informal_actions: str
        """
        if informal_actions is None:
            raise ValueError("Invalid value for `informal_actions`, must not be `None`")

        self._informal_actions = informal_actions

    @property
    def inspections(self):
        """Gets the inspections of this Dfr018Summaries.

        The number of inspections/compliance evaluations that have occurred at the facility, under the corresponding statute, within the designated time period

        :return: The inspections of this Dfr018Summaries.
        :rtype: str
        """
        return self._inspections

    @inspections.setter
    def inspections(self, inspections):
        """Sets the inspections of this Dfr018Summaries.

        The number of inspections/compliance evaluations that have occurred at the facility, under the corresponding statute, within the designated time period

        :param inspections: The inspections of this Dfr018Summaries.
        :type inspections: str
        """
        if inspections is None:
            raise ValueError("Invalid value for `inspections`, must not be `None`")

        self._inspections = inspections

    @property
    def last_inspection(self):
        """Gets the last_inspection of this Dfr018Summaries.

        The date on which the most recent inspection of the facility took place

        :return: The last_inspection of this Dfr018Summaries.
        :rtype: str
        """
        return self._last_inspection

    @last_inspection.setter
    def last_inspection(self, last_inspection):
        """Sets the last_inspection of this Dfr018Summaries.

        The date on which the most recent inspection of the facility took place

        :param last_inspection: The last_inspection of this Dfr018Summaries.
        :type last_inspection: str
        """
        if last_inspection is None:
            raise ValueError("Invalid value for `last_inspection`, must not be `None`")

        self._last_inspection = last_inspection

    @property
    def qtrs_in_nc(self):
        """Gets the qtrs_in_nc of this Dfr018Summaries.

        The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status

        :return: The qtrs_in_nc of this Dfr018Summaries.
        :rtype: str
        """
        return self._qtrs_in_nc

    @qtrs_in_nc.setter
    def qtrs_in_nc(self, qtrs_in_nc):
        """Sets the qtrs_in_nc of this Dfr018Summaries.

        The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status

        :param qtrs_in_nc: The qtrs_in_nc of this Dfr018Summaries.
        :type qtrs_in_nc: str
        """
        if qtrs_in_nc is None:
            raise ValueError("Invalid value for `qtrs_in_nc`, must not be `None`")

        self._qtrs_in_nc = qtrs_in_nc

    @property
    def qtrs_in_snc(self):
        """Gets the qtrs_in_snc of this Dfr018Summaries.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :return: The qtrs_in_snc of this Dfr018Summaries.
        :rtype: str
        """
        return self._qtrs_in_snc

    @qtrs_in_snc.setter
    def qtrs_in_snc(self, qtrs_in_snc):
        """Sets the qtrs_in_snc of this Dfr018Summaries.

        The number of formal enforcement actions that have been taken against the facility, under the corresponding statute, within the five year time period

        :param qtrs_in_snc: The qtrs_in_snc of this Dfr018Summaries.
        :type qtrs_in_snc: str
        """
        if qtrs_in_snc is None:
            raise ValueError("Invalid value for `qtrs_in_snc`, must not be `None`")

        self._qtrs_in_snc = qtrs_in_snc

    @property
    def statute(self):
        """Gets the statute of this Dfr018Summaries.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr018Summaries.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr018Summaries.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr018Summaries.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def total_case_penalties(self):
        """Gets the total_case_penalties of this Dfr018Summaries.

        ??

        :return: The total_case_penalties of this Dfr018Summaries.
        :rtype: str
        """
        return self._total_case_penalties

    @total_case_penalties.setter
    def total_case_penalties(self, total_case_penalties):
        """Sets the total_case_penalties of this Dfr018Summaries.

        ??

        :param total_case_penalties: The total_case_penalties of this Dfr018Summaries.
        :type total_case_penalties: str
        """
        if total_case_penalties is None:
            raise ValueError("Invalid value for `total_case_penalties`, must not be `None`")

        self._total_case_penalties = total_case_penalties

    @property
    def total_penalties(self):
        """Gets the total_penalties of this Dfr018Summaries.

        The total dollar amount of either assessed or final penalties within the five year time period

        :return: The total_penalties of this Dfr018Summaries.
        :rtype: str
        """
        return self._total_penalties

    @total_penalties.setter
    def total_penalties(self, total_penalties):
        """Sets the total_penalties of this Dfr018Summaries.

        The total dollar amount of either assessed or final penalties within the five year time period

        :param total_penalties: The total_penalties of this Dfr018Summaries.
        :type total_penalties: str
        """
        if total_penalties is None:
            raise ValueError("Invalid value for `total_penalties`, must not be `None`")

        self._total_penalties = total_penalties
