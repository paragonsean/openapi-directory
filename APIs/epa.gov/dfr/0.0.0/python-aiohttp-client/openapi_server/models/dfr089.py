# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr089(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agency: str=None, data_verification: str=None, distribution: str=None, financial: str=None, finished_water_storage: str=None, management_operation: str=None, operator_compliance: str=None, other_evaluation: str=None, pumps: str=None, security: str=None, source: str=None, source_id: str=None, treatment: str=None, visit_date: str=None, visit_type: str=None):
        """Dfr089 - a model defined in OpenAPI

        :param agency: The agency of this Dfr089.
        :param data_verification: The data_verification of this Dfr089.
        :param distribution: The distribution of this Dfr089.
        :param financial: The financial of this Dfr089.
        :param finished_water_storage: The finished_water_storage of this Dfr089.
        :param management_operation: The management_operation of this Dfr089.
        :param operator_compliance: The operator_compliance of this Dfr089.
        :param other_evaluation: The other_evaluation of this Dfr089.
        :param pumps: The pumps of this Dfr089.
        :param security: The security of this Dfr089.
        :param source: The source of this Dfr089.
        :param source_id: The source_id of this Dfr089.
        :param treatment: The treatment of this Dfr089.
        :param visit_date: The visit_date of this Dfr089.
        :param visit_type: The visit_type of this Dfr089.
        """
        self.openapi_types = {
            'agency': str,
            'data_verification': str,
            'distribution': str,
            'financial': str,
            'finished_water_storage': str,
            'management_operation': str,
            'operator_compliance': str,
            'other_evaluation': str,
            'pumps': str,
            'security': str,
            'source': str,
            'source_id': str,
            'treatment': str,
            'visit_date': str,
            'visit_type': str
        }

        self.attribute_map = {
            'agency': 'Agency',
            'data_verification': 'DataVerification',
            'distribution': 'Distribution',
            'financial': 'Financial',
            'finished_water_storage': 'FinishedWaterStorage',
            'management_operation': 'ManagementOperation',
            'operator_compliance': 'OperatorCompliance',
            'other_evaluation': 'OtherEvaluation',
            'pumps': 'Pumps',
            'security': 'Security',
            'source': 'Source',
            'source_id': 'SourceID',
            'treatment': 'Treatment',
            'visit_date': 'VisitDate',
            'visit_type': 'VisitType'
        }

        self._agency = agency
        self._data_verification = data_verification
        self._distribution = distribution
        self._financial = financial
        self._finished_water_storage = finished_water_storage
        self._management_operation = management_operation
        self._operator_compliance = operator_compliance
        self._other_evaluation = other_evaluation
        self._pumps = pumps
        self._security = security
        self._source = source
        self._source_id = source_id
        self._treatment = treatment
        self._visit_date = visit_date
        self._visit_type = visit_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr089':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr089 of this Dfr089.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agency(self):
        """Gets the agency of this Dfr089.

        Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"

        :return: The agency of this Dfr089.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Dfr089.

        Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"

        :param agency: The agency of this Dfr089.
        :type agency: str
        """
        if agency is None:
            raise ValueError("Invalid value for `agency`, must not be `None`")

        self._agency = agency

    @property
    def data_verification(self):
        """Gets the data_verification of this Dfr089.

        The sanitary source survey conclusion for data verification operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The data_verification of this Dfr089.
        :rtype: str
        """
        return self._data_verification

    @data_verification.setter
    def data_verification(self, data_verification):
        """Sets the data_verification of this Dfr089.

        The sanitary source survey conclusion for data verification operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param data_verification: The data_verification of this Dfr089.
        :type data_verification: str
        """
        if data_verification is None:
            raise ValueError("Invalid value for `data_verification`, must not be `None`")

        self._data_verification = data_verification

    @property
    def distribution(self):
        """Gets the distribution of this Dfr089.

        The sanitary source survey conclusion for distribution operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The distribution of this Dfr089.
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this Dfr089.

        The sanitary source survey conclusion for distribution operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param distribution: The distribution of this Dfr089.
        :type distribution: str
        """
        if distribution is None:
            raise ValueError("Invalid value for `distribution`, must not be `None`")

        self._distribution = distribution

    @property
    def financial(self):
        """Gets the financial of this Dfr089.

        The sanitary source survey conclusion for financial operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The financial of this Dfr089.
        :rtype: str
        """
        return self._financial

    @financial.setter
    def financial(self, financial):
        """Sets the financial of this Dfr089.

        The sanitary source survey conclusion for financial operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param financial: The financial of this Dfr089.
        :type financial: str
        """
        if financial is None:
            raise ValueError("Invalid value for `financial`, must not be `None`")

        self._financial = financial

    @property
    def finished_water_storage(self):
        """Gets the finished_water_storage of this Dfr089.

        The sanitary source survey conclusion for finished water storage operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The finished_water_storage of this Dfr089.
        :rtype: str
        """
        return self._finished_water_storage

    @finished_water_storage.setter
    def finished_water_storage(self, finished_water_storage):
        """Sets the finished_water_storage of this Dfr089.

        The sanitary source survey conclusion for finished water storage operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param finished_water_storage: The finished_water_storage of this Dfr089.
        :type finished_water_storage: str
        """
        if finished_water_storage is None:
            raise ValueError("Invalid value for `finished_water_storage`, must not be `None`")

        self._finished_water_storage = finished_water_storage

    @property
    def management_operation(self):
        """Gets the management_operation of this Dfr089.

        The sanitary source survey conclusion for management operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The management_operation of this Dfr089.
        :rtype: str
        """
        return self._management_operation

    @management_operation.setter
    def management_operation(self, management_operation):
        """Sets the management_operation of this Dfr089.

        The sanitary source survey conclusion for management operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param management_operation: The management_operation of this Dfr089.
        :type management_operation: str
        """
        if management_operation is None:
            raise ValueError("Invalid value for `management_operation`, must not be `None`")

        self._management_operation = management_operation

    @property
    def operator_compliance(self):
        """Gets the operator_compliance of this Dfr089.

        The sanitary source survey conclusion for operator compliance. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The operator_compliance of this Dfr089.
        :rtype: str
        """
        return self._operator_compliance

    @operator_compliance.setter
    def operator_compliance(self, operator_compliance):
        """Sets the operator_compliance of this Dfr089.

        The sanitary source survey conclusion for operator compliance. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param operator_compliance: The operator_compliance of this Dfr089.
        :type operator_compliance: str
        """
        if operator_compliance is None:
            raise ValueError("Invalid value for `operator_compliance`, must not be `None`")

        self._operator_compliance = operator_compliance

    @property
    def other_evaluation(self):
        """Gets the other_evaluation of this Dfr089.

        The sanitary source survey conclusion for other evaluation. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The other_evaluation of this Dfr089.
        :rtype: str
        """
        return self._other_evaluation

    @other_evaluation.setter
    def other_evaluation(self, other_evaluation):
        """Sets the other_evaluation of this Dfr089.

        The sanitary source survey conclusion for other evaluation. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param other_evaluation: The other_evaluation of this Dfr089.
        :type other_evaluation: str
        """
        if other_evaluation is None:
            raise ValueError("Invalid value for `other_evaluation`, must not be `None`")

        self._other_evaluation = other_evaluation

    @property
    def pumps(self):
        """Gets the pumps of this Dfr089.

        The sanitary source survey conclusion for pump operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The pumps of this Dfr089.
        :rtype: str
        """
        return self._pumps

    @pumps.setter
    def pumps(self, pumps):
        """Sets the pumps of this Dfr089.

        The sanitary source survey conclusion for pump operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param pumps: The pumps of this Dfr089.
        :type pumps: str
        """
        if pumps is None:
            raise ValueError("Invalid value for `pumps`, must not be `None`")

        self._pumps = pumps

    @property
    def security(self):
        """Gets the security of this Dfr089.

        The sanitary source survey conclusions for security operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The security of this Dfr089.
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this Dfr089.

        The sanitary source survey conclusions for security operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param security: The security of this Dfr089.
        :type security: str
        """
        if security is None:
            raise ValueError("Invalid value for `security`, must not be `None`")

        self._security = security

    @property
    def source(self):
        """Gets the source of this Dfr089.

        The sanitary source survey conclusion for source operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The source of this Dfr089.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Dfr089.

        The sanitary source survey conclusion for source operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param source: The source of this Dfr089.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this Dfr089.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr089.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr089.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr089.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def treatment(self):
        """Gets the treatment of this Dfr089.

        The sanitary survey results conclusions for treatment operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :return: The treatment of this Dfr089.
        :rtype: str
        """
        return self._treatment

    @treatment.setter
    def treatment(self, treatment):
        """Sets the treatment of this Dfr089.

        The sanitary survey results conclusions for treatment operations. Applicable codes:  - M - Minor Deficiencies - N - No Deficiencies or Recommendations - R - Recommendations Made - S - Significant Deficiencies - X - Not Evaluated - Z - Not Applicable - (blank) - Not Reported to EPA

        :param treatment: The treatment of this Dfr089.
        :type treatment: str
        """
        if treatment is None:
            raise ValueError("Invalid value for `treatment`, must not be `None`")

        self._treatment = treatment

    @property
    def visit_date(self):
        """Gets the visit_date of this Dfr089.

        Date of the sanitary survey.

        :return: The visit_date of this Dfr089.
        :rtype: str
        """
        return self._visit_date

    @visit_date.setter
    def visit_date(self, visit_date):
        """Sets the visit_date of this Dfr089.

        Date of the sanitary survey.

        :param visit_date: The visit_date of this Dfr089.
        :type visit_date: str
        """
        if visit_date is None:
            raise ValueError("Invalid value for `visit_date`, must not be `None`")

        self._visit_date = visit_date

    @property
    def visit_type(self):
        """Gets the visit_type of this Dfr089.

        A description of the type of site visit conducted.

        :return: The visit_type of this Dfr089.
        :rtype: str
        """
        return self._visit_type

    @visit_type.setter
    def visit_type(self, visit_type):
        """Sets the visit_type of this Dfr089.

        A description of the type of site visit conducted.

        :param visit_type: The visit_type of this Dfr089.
        :type visit_type: str
        """
        if visit_type is None:
            raise ValueError("Invalid value for `visit_type`, must not be `None`")

        self._visit_type = visit_type
