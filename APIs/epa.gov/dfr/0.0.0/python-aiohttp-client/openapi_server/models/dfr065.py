# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr065(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_date: str=None, action_type: str=None, lead_agency: str=None, penalty_amount: str=None, penalty_desc: str=None, source_id: str=None, statute: str=None):
        """Dfr065 - a model defined in OpenAPI

        :param action_date: The action_date of this Dfr065.
        :param action_type: The action_type of this Dfr065.
        :param lead_agency: The lead_agency of this Dfr065.
        :param penalty_amount: The penalty_amount of this Dfr065.
        :param penalty_desc: The penalty_desc of this Dfr065.
        :param source_id: The source_id of this Dfr065.
        :param statute: The statute of this Dfr065.
        """
        self.openapi_types = {
            'action_date': str,
            'action_type': str,
            'lead_agency': str,
            'penalty_amount': str,
            'penalty_desc': str,
            'source_id': str,
            'statute': str
        }

        self.attribute_map = {
            'action_date': 'ActionDate',
            'action_type': 'ActionType',
            'lead_agency': 'LeadAgency',
            'penalty_amount': 'PenaltyAmount',
            'penalty_desc': 'PenaltyDesc',
            'source_id': 'SourceID',
            'statute': 'Statute'
        }

        self._action_date = action_date
        self._action_type = action_type
        self._lead_agency = lead_agency
        self._penalty_amount = penalty_amount
        self._penalty_desc = penalty_desc
        self._source_id = source_id
        self._statute = statute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr065':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr065 of this Dfr065.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_date(self):
        """Gets the action_date of this Dfr065.

        Air Facility System (AFS) ID.

        :return: The action_date of this Dfr065.
        :rtype: str
        """
        return self._action_date

    @action_date.setter
    def action_date(self, action_date):
        """Sets the action_date of this Dfr065.

        Air Facility System (AFS) ID.

        :param action_date: The action_date of this Dfr065.
        :type action_date: str
        """
        if action_date is None:
            raise ValueError("Invalid value for `action_date`, must not be `None`")

        self._action_date = action_date

    @property
    def action_type(self):
        """Gets the action_type of this Dfr065.

        Text description of type of enforcement action. The type of action and description are designated differently in each system, but may be equivalent.

        :return: The action_type of this Dfr065.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Dfr065.

        Text description of type of enforcement action. The type of action and description are designated differently in each system, but may be equivalent.

        :param action_type: The action_type of this Dfr065.
        :type action_type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def lead_agency(self):
        """Gets the lead_agency of this Dfr065.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead_agency of this Dfr065.
        :rtype: str
        """
        return self._lead_agency

    @lead_agency.setter
    def lead_agency(self, lead_agency):
        """Sets the lead_agency of this Dfr065.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead_agency: The lead_agency of this Dfr065.
        :type lead_agency: str
        """
        if lead_agency is None:
            raise ValueError("Invalid value for `lead_agency`, must not be `None`")

        self._lead_agency = lead_agency

    @property
    def penalty_amount(self):
        """Gets the penalty_amount of this Dfr065.

        ??

        :return: The penalty_amount of this Dfr065.
        :rtype: str
        """
        return self._penalty_amount

    @penalty_amount.setter
    def penalty_amount(self, penalty_amount):
        """Sets the penalty_amount of this Dfr065.

        ??

        :param penalty_amount: The penalty_amount of this Dfr065.
        :type penalty_amount: str
        """
        if penalty_amount is None:
            raise ValueError("Invalid value for `penalty_amount`, must not be `None`")

        self._penalty_amount = penalty_amount

    @property
    def penalty_desc(self):
        """Gets the penalty_desc of this Dfr065.

        ??

        :return: The penalty_desc of this Dfr065.
        :rtype: str
        """
        return self._penalty_desc

    @penalty_desc.setter
    def penalty_desc(self, penalty_desc):
        """Sets the penalty_desc of this Dfr065.

        ??

        :param penalty_desc: The penalty_desc of this Dfr065.
        :type penalty_desc: str
        """
        if penalty_desc is None:
            raise ValueError("Invalid value for `penalty_desc`, must not be `None`")

        self._penalty_desc = penalty_desc

    @property
    def source_id(self):
        """Gets the source_id of this Dfr065.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr065.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr065.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr065.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr065.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr065.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr065.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr065.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute
