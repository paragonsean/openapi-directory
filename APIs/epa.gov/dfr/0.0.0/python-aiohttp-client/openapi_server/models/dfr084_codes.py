# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr084Codes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epa_system: str=None, sic_code: str=None, sic_desc: str=None, source_id: str=None):
        """Dfr084Codes - a model defined in OpenAPI

        :param epa_system: The epa_system of this Dfr084Codes.
        :param sic_code: The sic_code of this Dfr084Codes.
        :param sic_desc: The sic_desc of this Dfr084Codes.
        :param source_id: The source_id of this Dfr084Codes.
        """
        self.openapi_types = {
            'epa_system': str,
            'sic_code': str,
            'sic_desc': str,
            'source_id': str
        }

        self.attribute_map = {
            'epa_system': 'EPASystem',
            'sic_code': 'SICCode',
            'sic_desc': 'SICDesc',
            'source_id': 'SourceID'
        }

        self._epa_system = epa_system
        self._sic_code = sic_code
        self._sic_desc = sic_desc
        self._source_id = source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr084Codes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr084_Codes of this Dfr084Codes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr084Codes.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr084Codes.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr084Codes.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr084Codes.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def sic_code(self):
        """Gets the sic_code of this Dfr084Codes.

        The Standard Industrial Classification codes applicable to the facility

        :return: The sic_code of this Dfr084Codes.
        :rtype: str
        """
        return self._sic_code

    @sic_code.setter
    def sic_code(self, sic_code):
        """Sets the sic_code of this Dfr084Codes.

        The Standard Industrial Classification codes applicable to the facility

        :param sic_code: The sic_code of this Dfr084Codes.
        :type sic_code: str
        """
        if sic_code is None:
            raise ValueError("Invalid value for `sic_code`, must not be `None`")

        self._sic_code = sic_code

    @property
    def sic_desc(self):
        """Gets the sic_desc of this Dfr084Codes.

        Industries associated to the SIC code.

        :return: The sic_desc of this Dfr084Codes.
        :rtype: str
        """
        return self._sic_desc

    @sic_desc.setter
    def sic_desc(self, sic_desc):
        """Sets the sic_desc of this Dfr084Codes.

        Industries associated to the SIC code.

        :param sic_desc: The sic_desc of this Dfr084Codes.
        :type sic_desc: str
        """
        if sic_desc is None:
            raise ValueError("Invalid value for `sic_desc`, must not be `None`")

        self._sic_desc = sic_desc

    @property
    def source_id(self):
        """Gets the source_id of this Dfr084Codes.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr084Codes.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr084Codes.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr084Codes.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id
