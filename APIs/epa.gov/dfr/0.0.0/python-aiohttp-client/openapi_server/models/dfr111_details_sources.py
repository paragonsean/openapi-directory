# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr111DetailsSources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessed_or303d_flg: str=None, assessment_unit_epa_category: str=None, attains_aquatic_life_use_flg: str=None, attains_cause_groups: str=None, attains_exceptnl_use_flg: str=None, attains_possible_pollutants: str=None, attains_recreation_use_flg: str=None, attains_shelffish_use_flg: str=None, attains_state_causes: str=None, cycle_year: str=None, gnis_name: str=None, impaired_waters_flg: str=None, reach_code: str=None, source_id: str=None, wbd12: str=None, wbd12_name: str=None):
        """Dfr111DetailsSources - a model defined in OpenAPI

        :param assessed_or303d_flg: The assessed_or303d_flg of this Dfr111DetailsSources.
        :param assessment_unit_epa_category: The assessment_unit_epa_category of this Dfr111DetailsSources.
        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Dfr111DetailsSources.
        :param attains_cause_groups: The attains_cause_groups of this Dfr111DetailsSources.
        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Dfr111DetailsSources.
        :param attains_possible_pollutants: The attains_possible_pollutants of this Dfr111DetailsSources.
        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Dfr111DetailsSources.
        :param attains_shelffish_use_flg: The attains_shelffish_use_flg of this Dfr111DetailsSources.
        :param attains_state_causes: The attains_state_causes of this Dfr111DetailsSources.
        :param cycle_year: The cycle_year of this Dfr111DetailsSources.
        :param gnis_name: The gnis_name of this Dfr111DetailsSources.
        :param impaired_waters_flg: The impaired_waters_flg of this Dfr111DetailsSources.
        :param reach_code: The reach_code of this Dfr111DetailsSources.
        :param source_id: The source_id of this Dfr111DetailsSources.
        :param wbd12: The wbd12 of this Dfr111DetailsSources.
        :param wbd12_name: The wbd12_name of this Dfr111DetailsSources.
        """
        self.openapi_types = {
            'assessed_or303d_flg': str,
            'assessment_unit_epa_category': str,
            'attains_aquatic_life_use_flg': str,
            'attains_cause_groups': str,
            'attains_exceptnl_use_flg': str,
            'attains_possible_pollutants': str,
            'attains_recreation_use_flg': str,
            'attains_shelffish_use_flg': str,
            'attains_state_causes': str,
            'cycle_year': str,
            'gnis_name': str,
            'impaired_waters_flg': str,
            'reach_code': str,
            'source_id': str,
            'wbd12': str,
            'wbd12_name': str
        }

        self.attribute_map = {
            'assessed_or303d_flg': 'AssessedOr303dFlg',
            'assessment_unit_epa_category': 'AssessmentUnitEPACategory',
            'attains_aquatic_life_use_flg': 'AttainsAquaticLifeUseFlg',
            'attains_cause_groups': 'AttainsCauseGroups',
            'attains_exceptnl_use_flg': 'AttainsExceptnlUseFlg',
            'attains_possible_pollutants': 'AttainsPossiblePollutants',
            'attains_recreation_use_flg': 'AttainsRecreationUseFlg',
            'attains_shelffish_use_flg': 'AttainsShelffishUseFlg',
            'attains_state_causes': 'AttainsStateCauses',
            'cycle_year': 'CycleYear',
            'gnis_name': 'GNISName',
            'impaired_waters_flg': 'ImpairedWatersFlg',
            'reach_code': 'ReachCode',
            'source_id': 'SourceID',
            'wbd12': 'WBD12',
            'wbd12_name': 'WBD12Name'
        }

        self._assessed_or303d_flg = assessed_or303d_flg
        self._assessment_unit_epa_category = assessment_unit_epa_category
        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg
        self._attains_cause_groups = attains_cause_groups
        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg
        self._attains_possible_pollutants = attains_possible_pollutants
        self._attains_recreation_use_flg = attains_recreation_use_flg
        self._attains_shelffish_use_flg = attains_shelffish_use_flg
        self._attains_state_causes = attains_state_causes
        self._cycle_year = cycle_year
        self._gnis_name = gnis_name
        self._impaired_waters_flg = impaired_waters_flg
        self._reach_code = reach_code
        self._source_id = source_id
        self._wbd12 = wbd12
        self._wbd12_name = wbd12_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr111DetailsSources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr111_Details.Sources of this Dfr111DetailsSources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessed_or303d_flg(self):
        """Gets the assessed_or303d_flg of this Dfr111DetailsSources.

        Denotes facilities that discharge into an impaired water body for which a plan has not yet been developed (category 5 water body) and facilities that discharge to an impaired water body for which the state has developed a plan to return the water to its designated uses under the Total Maximum Daily Loads (TMDL) program (category 4 water body).

        :return: The assessed_or303d_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._assessed_or303d_flg

    @assessed_or303d_flg.setter
    def assessed_or303d_flg(self, assessed_or303d_flg):
        """Sets the assessed_or303d_flg of this Dfr111DetailsSources.

        Denotes facilities that discharge into an impaired water body for which a plan has not yet been developed (category 5 water body) and facilities that discharge to an impaired water body for which the state has developed a plan to return the water to its designated uses under the Total Maximum Daily Loads (TMDL) program (category 4 water body).

        :param assessed_or303d_flg: The assessed_or303d_flg of this Dfr111DetailsSources.
        :type assessed_or303d_flg: str
        """
        if assessed_or303d_flg is None:
            raise ValueError("Invalid value for `assessed_or303d_flg`, must not be `None`")

        self._assessed_or303d_flg = assessed_or303d_flg

    @property
    def assessment_unit_epa_category(self):
        """Gets the assessment_unit_epa_category of this Dfr111DetailsSources.

        The water quality category under which the water body�or water segment is classified.�Additional information: https://www.epa.gov/wqs-tech/supplemental-module-listing-impaired-waters-and-developing-tmdls

        :return: The assessment_unit_epa_category of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._assessment_unit_epa_category

    @assessment_unit_epa_category.setter
    def assessment_unit_epa_category(self, assessment_unit_epa_category):
        """Sets the assessment_unit_epa_category of this Dfr111DetailsSources.

        The water quality category under which the water body�or water segment is classified.�Additional information: https://www.epa.gov/wqs-tech/supplemental-module-listing-impaired-waters-and-developing-tmdls

        :param assessment_unit_epa_category: The assessment_unit_epa_category of this Dfr111DetailsSources.
        :type assessment_unit_epa_category: str
        """
        if assessment_unit_epa_category is None:
            raise ValueError("Invalid value for `assessment_unit_epa_category`, must not be `None`")

        self._assessment_unit_epa_category = assessment_unit_epa_category

    @property
    def attains_aquatic_life_use_flg(self):
        """Gets the attains_aquatic_life_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :return: The attains_aquatic_life_use_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_aquatic_life_use_flg

    @attains_aquatic_life_use_flg.setter
    def attains_aquatic_life_use_flg(self, attains_aquatic_life_use_flg):
        """Sets the attains_aquatic_life_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Dfr111DetailsSources.
        :type attains_aquatic_life_use_flg: str
        """
        if attains_aquatic_life_use_flg is None:
            raise ValueError("Invalid value for `attains_aquatic_life_use_flg`, must not be `None`")

        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg

    @property
    def attains_cause_groups(self):
        """Gets the attains_cause_groups of this Dfr111DetailsSources.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :return: The attains_cause_groups of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_cause_groups

    @attains_cause_groups.setter
    def attains_cause_groups(self, attains_cause_groups):
        """Sets the attains_cause_groups of this Dfr111DetailsSources.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :param attains_cause_groups: The attains_cause_groups of this Dfr111DetailsSources.
        :type attains_cause_groups: str
        """
        if attains_cause_groups is None:
            raise ValueError("Invalid value for `attains_cause_groups`, must not be `None`")

        self._attains_cause_groups = attains_cause_groups

    @property
    def attains_exceptnl_use_flg(self):
        """Gets the attains_exceptnl_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :return: The attains_exceptnl_use_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_exceptnl_use_flg

    @attains_exceptnl_use_flg.setter
    def attains_exceptnl_use_flg(self, attains_exceptnl_use_flg):
        """Sets the attains_exceptnl_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Dfr111DetailsSources.
        :type attains_exceptnl_use_flg: str
        """
        if attains_exceptnl_use_flg is None:
            raise ValueError("Invalid value for `attains_exceptnl_use_flg`, must not be `None`")

        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg

    @property
    def attains_possible_pollutants(self):
        """Gets the attains_possible_pollutants of this Dfr111DetailsSources.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody, as indicated in ATTAINS.

        :return: The attains_possible_pollutants of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_possible_pollutants

    @attains_possible_pollutants.setter
    def attains_possible_pollutants(self, attains_possible_pollutants):
        """Sets the attains_possible_pollutants of this Dfr111DetailsSources.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody, as indicated in ATTAINS.

        :param attains_possible_pollutants: The attains_possible_pollutants of this Dfr111DetailsSources.
        :type attains_possible_pollutants: str
        """
        if attains_possible_pollutants is None:
            raise ValueError("Invalid value for `attains_possible_pollutants`, must not be `None`")

        self._attains_possible_pollutants = attains_possible_pollutants

    @property
    def attains_recreation_use_flg(self):
        """Gets the attains_recreation_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :return: The attains_recreation_use_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_recreation_use_flg

    @attains_recreation_use_flg.setter
    def attains_recreation_use_flg(self, attains_recreation_use_flg):
        """Sets the attains_recreation_use_flg of this Dfr111DetailsSources.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Dfr111DetailsSources.
        :type attains_recreation_use_flg: str
        """
        if attains_recreation_use_flg is None:
            raise ValueError("Invalid value for `attains_recreation_use_flg`, must not be `None`")

        self._attains_recreation_use_flg = attains_recreation_use_flg

    @property
    def attains_shelffish_use_flg(self):
        """Gets the attains_shelffish_use_flg of this Dfr111DetailsSources.

        Indicates if the waterbody in which the facility resides is designated for shellfish use.

        :return: The attains_shelffish_use_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_shelffish_use_flg

    @attains_shelffish_use_flg.setter
    def attains_shelffish_use_flg(self, attains_shelffish_use_flg):
        """Sets the attains_shelffish_use_flg of this Dfr111DetailsSources.

        Indicates if the waterbody in which the facility resides is designated for shellfish use.

        :param attains_shelffish_use_flg: The attains_shelffish_use_flg of this Dfr111DetailsSources.
        :type attains_shelffish_use_flg: str
        """
        if attains_shelffish_use_flg is None:
            raise ValueError("Invalid value for `attains_shelffish_use_flg`, must not be `None`")

        self._attains_shelffish_use_flg = attains_shelffish_use_flg

    @property
    def attains_state_causes(self):
        """Gets the attains_state_causes of this Dfr111DetailsSources.

        Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :return: The attains_state_causes of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._attains_state_causes

    @attains_state_causes.setter
    def attains_state_causes(self, attains_state_causes):
        """Sets the attains_state_causes of this Dfr111DetailsSources.

        Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :param attains_state_causes: The attains_state_causes of this Dfr111DetailsSources.
        :type attains_state_causes: str
        """
        if attains_state_causes is None:
            raise ValueError("Invalid value for `attains_state_causes`, must not be `None`")

        self._attains_state_causes = attains_state_causes

    @property
    def cycle_year(self):
        """Gets the cycle_year of this Dfr111DetailsSources.

        The Assessment, Total Maximum Daily Load (TMDL) Tracking and Implementation System (ATTAINS) reporting year.

        :return: The cycle_year of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._cycle_year

    @cycle_year.setter
    def cycle_year(self, cycle_year):
        """Sets the cycle_year of this Dfr111DetailsSources.

        The Assessment, Total Maximum Daily Load (TMDL) Tracking and Implementation System (ATTAINS) reporting year.

        :param cycle_year: The cycle_year of this Dfr111DetailsSources.
        :type cycle_year: str
        """
        if cycle_year is None:
            raise ValueError("Invalid value for `cycle_year`, must not be `None`")

        self._cycle_year = cycle_year

    @property
    def gnis_name(self):
        """Gets the gnis_name of this Dfr111DetailsSources.

        The name of the waterbody in which the facility is located near or is permitted to discharge directly.

        :return: The gnis_name of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._gnis_name

    @gnis_name.setter
    def gnis_name(self, gnis_name):
        """Sets the gnis_name of this Dfr111DetailsSources.

        The name of the waterbody in which the facility is located near or is permitted to discharge directly.

        :param gnis_name: The gnis_name of this Dfr111DetailsSources.
        :type gnis_name: str
        """
        if gnis_name is None:
            raise ValueError("Invalid value for `gnis_name`, must not be `None`")

        self._gnis_name = gnis_name

    @property
    def impaired_waters_flg(self):
        """Gets the impaired_waters_flg of this Dfr111DetailsSources.

        Indicates if the facility is porentially discharging to impaired waters.

        :return: The impaired_waters_flg of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._impaired_waters_flg

    @impaired_waters_flg.setter
    def impaired_waters_flg(self, impaired_waters_flg):
        """Sets the impaired_waters_flg of this Dfr111DetailsSources.

        Indicates if the facility is porentially discharging to impaired waters.

        :param impaired_waters_flg: The impaired_waters_flg of this Dfr111DetailsSources.
        :type impaired_waters_flg: str
        """
        if impaired_waters_flg is None:
            raise ValueError("Invalid value for `impaired_waters_flg`, must not be `None`")

        self._impaired_waters_flg = impaired_waters_flg

    @property
    def reach_code(self):
        """Gets the reach_code of this Dfr111DetailsSources.

        A nationally unique and permanent 14-digit identifier for the waterbody, assigned by the U.S. Geological Survey.

        :return: The reach_code of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._reach_code

    @reach_code.setter
    def reach_code(self, reach_code):
        """Sets the reach_code of this Dfr111DetailsSources.

        A nationally unique and permanent 14-digit identifier for the waterbody, assigned by the U.S. Geological Survey.

        :param reach_code: The reach_code of this Dfr111DetailsSources.
        :type reach_code: str
        """
        if reach_code is None:
            raise ValueError("Invalid value for `reach_code`, must not be `None`")

        self._reach_code = reach_code

    @property
    def source_id(self):
        """Gets the source_id of this Dfr111DetailsSources.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr111DetailsSources.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr111DetailsSources.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def wbd12(self):
        """Gets the wbd12 of this Dfr111DetailsSources.

        The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).

        :return: The wbd12 of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._wbd12

    @wbd12.setter
    def wbd12(self, wbd12):
        """Sets the wbd12 of this Dfr111DetailsSources.

        The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).

        :param wbd12: The wbd12 of this Dfr111DetailsSources.
        :type wbd12: str
        """
        if wbd12 is None:
            raise ValueError("Invalid value for `wbd12`, must not be `None`")

        self._wbd12 = wbd12

    @property
    def wbd12_name(self):
        """Gets the wbd12_name of this Dfr111DetailsSources.

        The name of the watershed in which the facility resides.

        :return: The wbd12_name of this Dfr111DetailsSources.
        :rtype: str
        """
        return self._wbd12_name

    @wbd12_name.setter
    def wbd12_name(self, wbd12_name):
        """Sets the wbd12_name of this Dfr111DetailsSources.

        The name of the watershed in which the facility resides.

        :param wbd12_name: The wbd12_name of this Dfr111DetailsSources.
        :type wbd12_name: str
        """
        if wbd12_name is None:
            raise ValueError("Invalid value for `wbd12_name`, must not be `None`")

        self._wbd12_name = wbd12_name
