# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018ProgramDates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: str=None, program: str=None, start_date: str=None):
        """Dfr018ProgramDates - a model defined in OpenAPI

        :param end_date: The end_date of this Dfr018ProgramDates.
        :param program: The program of this Dfr018ProgramDates.
        :param start_date: The start_date of this Dfr018ProgramDates.
        """
        self.openapi_types = {
            'end_date': str,
            'program': str,
            'start_date': str
        }

        self.attribute_map = {
            'end_date': 'EndDate',
            'program': 'Program',
            'start_date': 'StartDate'
        }

        self._end_date = end_date
        self._program = program
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018ProgramDates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_ProgramDates of this Dfr018ProgramDates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this Dfr018ProgramDates.

        End date for the date range of interest. Formatted as mm/dd/yyyy

        :return: The end_date of this Dfr018ProgramDates.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Dfr018ProgramDates.

        End date for the date range of interest. Formatted as mm/dd/yyyy

        :param end_date: The end_date of this Dfr018ProgramDates.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def program(self):
        """Gets the program of this Dfr018ProgramDates.

        The source database for the EPA programs information.

        :return: The program of this Dfr018ProgramDates.
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this Dfr018ProgramDates.

        The source database for the EPA programs information.

        :param program: The program of this Dfr018ProgramDates.
        :type program: str
        """
        if program is None:
            raise ValueError("Invalid value for `program`, must not be `None`")

        self._program = program

    @property
    def start_date(self):
        """Gets the start_date of this Dfr018ProgramDates.

        Starting date for the date range of interest. Formatted as mm/dd/yyyy

        :return: The start_date of this Dfr018ProgramDates.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Dfr018ProgramDates.

        Starting date for the date range of interest. Formatted as mm/dd/yyyy

        :param start_date: The start_date of this Dfr018ProgramDates.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
