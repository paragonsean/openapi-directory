# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr077(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, epa_system: str=None, enf_identifier: str=None, lead_agency: str=None, notice_date: str=None, source_id: str=None, statute: str=None):
        """Dfr077 - a model defined in OpenAPI

        :param action_type: The action_type of this Dfr077.
        :param epa_system: The epa_system of this Dfr077.
        :param enf_identifier: The enf_identifier of this Dfr077.
        :param lead_agency: The lead_agency of this Dfr077.
        :param notice_date: The notice_date of this Dfr077.
        :param source_id: The source_id of this Dfr077.
        :param statute: The statute of this Dfr077.
        """
        self.openapi_types = {
            'action_type': str,
            'epa_system': str,
            'enf_identifier': str,
            'lead_agency': str,
            'notice_date': str,
            'source_id': str,
            'statute': str
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'epa_system': 'EPASystem',
            'enf_identifier': 'EnfIdentifier',
            'lead_agency': 'LeadAgency',
            'notice_date': 'NoticeDate',
            'source_id': 'SourceID',
            'statute': 'Statute'
        }

        self._action_type = action_type
        self._epa_system = epa_system
        self._enf_identifier = enf_identifier
        self._lead_agency = lead_agency
        self._notice_date = notice_date
        self._source_id = source_id
        self._statute = statute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr077':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr077 of this Dfr077.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this Dfr077.

        CAA Informal Enforcement Actions (AFS National Action Types): - 5A = EPA pre-NOV letter sent  - 6A = EPA NOV issued  - 7C = State NOV issued  - RCRA = Informal Enforcement Actions (RCRAInfo Action Series): Any code in the following series - 120 = Written Informal  - 190 = Combination Informal   Note: The types of action noted above are nationally defined by EPA. Other types of action shown in the report are defined or maintained by EPA regions or state agencies.

        :return: The action_type of this Dfr077.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Dfr077.

        CAA Informal Enforcement Actions (AFS National Action Types): - 5A = EPA pre-NOV letter sent  - 6A = EPA NOV issued  - 7C = State NOV issued  - RCRA = Informal Enforcement Actions (RCRAInfo Action Series): Any code in the following series - 120 = Written Informal  - 190 = Combination Informal   Note: The types of action noted above are nationally defined by EPA. Other types of action shown in the report are defined or maintained by EPA regions or state agencies.

        :param action_type: The action_type of this Dfr077.
        :type action_type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr077.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr077.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr077.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr077.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def enf_identifier(self):
        """Gets the enf_identifier of this Dfr077.

        The number of the Enforcement Action as referred to by the Court where the action was filed; the Enforcement Action Identifier.

        :return: The enf_identifier of this Dfr077.
        :rtype: str
        """
        return self._enf_identifier

    @enf_identifier.setter
    def enf_identifier(self, enf_identifier):
        """Sets the enf_identifier of this Dfr077.

        The number of the Enforcement Action as referred to by the Court where the action was filed; the Enforcement Action Identifier.

        :param enf_identifier: The enf_identifier of this Dfr077.
        :type enf_identifier: str
        """
        if enf_identifier is None:
            raise ValueError("Invalid value for `enf_identifier`, must not be `None`")

        self._enf_identifier = enf_identifier

    @property
    def lead_agency(self):
        """Gets the lead_agency of this Dfr077.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead_agency of this Dfr077.
        :rtype: str
        """
        return self._lead_agency

    @lead_agency.setter
    def lead_agency(self, lead_agency):
        """Sets the lead_agency of this Dfr077.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead_agency: The lead_agency of this Dfr077.
        :type lead_agency: str
        """
        if lead_agency is None:
            raise ValueError("Invalid value for `lead_agency`, must not be `None`")

        self._lead_agency = lead_agency

    @property
    def notice_date(self):
        """Gets the notice_date of this Dfr077.

        The date of the the most recent informal enforcement action issued to the facility.

        :return: The notice_date of this Dfr077.
        :rtype: str
        """
        return self._notice_date

    @notice_date.setter
    def notice_date(self, notice_date):
        """Sets the notice_date of this Dfr077.

        The date of the the most recent informal enforcement action issued to the facility.

        :param notice_date: The notice_date of this Dfr077.
        :type notice_date: str
        """
        if notice_date is None:
            raise ValueError("Invalid value for `notice_date`, must not be `None`")

        self._notice_date = notice_date

    @property
    def source_id(self):
        """Gets the source_id of this Dfr077.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr077.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr077.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr077.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr077.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr077.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr077.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr077.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute
