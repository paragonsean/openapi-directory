# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018EJScreenIndexes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hazard_waste_proximity: str=None, lead_paint_indicator: str=None, nata_cancer_risk: str=None, nata_diesel_pm: str=None, nata_respiratory_hi: str=None, over80_count: str=None, ozone: str=None, pm25: str=None, rmp_proximity: str=None, registry_id: str=None, superfund_proximity: str=None, traffic_proximity: str=None, water_discharge_proximity: str=None):
        """Dfr018EJScreenIndexes - a model defined in OpenAPI

        :param hazard_waste_proximity: The hazard_waste_proximity of this Dfr018EJScreenIndexes.
        :param lead_paint_indicator: The lead_paint_indicator of this Dfr018EJScreenIndexes.
        :param nata_cancer_risk: The nata_cancer_risk of this Dfr018EJScreenIndexes.
        :param nata_diesel_pm: The nata_diesel_pm of this Dfr018EJScreenIndexes.
        :param nata_respiratory_hi: The nata_respiratory_hi of this Dfr018EJScreenIndexes.
        :param over80_count: The over80_count of this Dfr018EJScreenIndexes.
        :param ozone: The ozone of this Dfr018EJScreenIndexes.
        :param pm25: The pm25 of this Dfr018EJScreenIndexes.
        :param rmp_proximity: The rmp_proximity of this Dfr018EJScreenIndexes.
        :param registry_id: The registry_id of this Dfr018EJScreenIndexes.
        :param superfund_proximity: The superfund_proximity of this Dfr018EJScreenIndexes.
        :param traffic_proximity: The traffic_proximity of this Dfr018EJScreenIndexes.
        :param water_discharge_proximity: The water_discharge_proximity of this Dfr018EJScreenIndexes.
        """
        self.openapi_types = {
            'hazard_waste_proximity': str,
            'lead_paint_indicator': str,
            'nata_cancer_risk': str,
            'nata_diesel_pm': str,
            'nata_respiratory_hi': str,
            'over80_count': str,
            'ozone': str,
            'pm25': str,
            'rmp_proximity': str,
            'registry_id': str,
            'superfund_proximity': str,
            'traffic_proximity': str,
            'water_discharge_proximity': str
        }

        self.attribute_map = {
            'hazard_waste_proximity': 'HazardWasteProximity',
            'lead_paint_indicator': 'LeadPaintIndicator',
            'nata_cancer_risk': 'NATACancerRisk',
            'nata_diesel_pm': 'NATADieselPM',
            'nata_respiratory_hi': 'NATARespiratoryHI',
            'over80_count': 'Over80Count',
            'ozone': 'Ozone',
            'pm25': 'PM25',
            'rmp_proximity': 'RMPProximity',
            'registry_id': 'RegistryID',
            'superfund_proximity': 'SuperfundProximity',
            'traffic_proximity': 'TrafficProximity',
            'water_discharge_proximity': 'WaterDischargeProximity'
        }

        self._hazard_waste_proximity = hazard_waste_proximity
        self._lead_paint_indicator = lead_paint_indicator
        self._nata_cancer_risk = nata_cancer_risk
        self._nata_diesel_pm = nata_diesel_pm
        self._nata_respiratory_hi = nata_respiratory_hi
        self._over80_count = over80_count
        self._ozone = ozone
        self._pm25 = pm25
        self._rmp_proximity = rmp_proximity
        self._registry_id = registry_id
        self._superfund_proximity = superfund_proximity
        self._traffic_proximity = traffic_proximity
        self._water_discharge_proximity = water_discharge_proximity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018EJScreenIndexes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_EJScreenIndexes of this Dfr018EJScreenIndexes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hazard_waste_proximity(self):
        """Gets the hazard_waste_proximity of this Dfr018EJScreenIndexes.


        :return: The hazard_waste_proximity of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._hazard_waste_proximity

    @hazard_waste_proximity.setter
    def hazard_waste_proximity(self, hazard_waste_proximity):
        """Sets the hazard_waste_proximity of this Dfr018EJScreenIndexes.


        :param hazard_waste_proximity: The hazard_waste_proximity of this Dfr018EJScreenIndexes.
        :type hazard_waste_proximity: str
        """
        if hazard_waste_proximity is None:
            raise ValueError("Invalid value for `hazard_waste_proximity`, must not be `None`")

        self._hazard_waste_proximity = hazard_waste_proximity

    @property
    def lead_paint_indicator(self):
        """Gets the lead_paint_indicator of this Dfr018EJScreenIndexes.


        :return: The lead_paint_indicator of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._lead_paint_indicator

    @lead_paint_indicator.setter
    def lead_paint_indicator(self, lead_paint_indicator):
        """Sets the lead_paint_indicator of this Dfr018EJScreenIndexes.


        :param lead_paint_indicator: The lead_paint_indicator of this Dfr018EJScreenIndexes.
        :type lead_paint_indicator: str
        """
        if lead_paint_indicator is None:
            raise ValueError("Invalid value for `lead_paint_indicator`, must not be `None`")

        self._lead_paint_indicator = lead_paint_indicator

    @property
    def nata_cancer_risk(self):
        """Gets the nata_cancer_risk of this Dfr018EJScreenIndexes.


        :return: The nata_cancer_risk of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._nata_cancer_risk

    @nata_cancer_risk.setter
    def nata_cancer_risk(self, nata_cancer_risk):
        """Sets the nata_cancer_risk of this Dfr018EJScreenIndexes.


        :param nata_cancer_risk: The nata_cancer_risk of this Dfr018EJScreenIndexes.
        :type nata_cancer_risk: str
        """
        if nata_cancer_risk is None:
            raise ValueError("Invalid value for `nata_cancer_risk`, must not be `None`")

        self._nata_cancer_risk = nata_cancer_risk

    @property
    def nata_diesel_pm(self):
        """Gets the nata_diesel_pm of this Dfr018EJScreenIndexes.


        :return: The nata_diesel_pm of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._nata_diesel_pm

    @nata_diesel_pm.setter
    def nata_diesel_pm(self, nata_diesel_pm):
        """Sets the nata_diesel_pm of this Dfr018EJScreenIndexes.


        :param nata_diesel_pm: The nata_diesel_pm of this Dfr018EJScreenIndexes.
        :type nata_diesel_pm: str
        """
        if nata_diesel_pm is None:
            raise ValueError("Invalid value for `nata_diesel_pm`, must not be `None`")

        self._nata_diesel_pm = nata_diesel_pm

    @property
    def nata_respiratory_hi(self):
        """Gets the nata_respiratory_hi of this Dfr018EJScreenIndexes.


        :return: The nata_respiratory_hi of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._nata_respiratory_hi

    @nata_respiratory_hi.setter
    def nata_respiratory_hi(self, nata_respiratory_hi):
        """Sets the nata_respiratory_hi of this Dfr018EJScreenIndexes.


        :param nata_respiratory_hi: The nata_respiratory_hi of this Dfr018EJScreenIndexes.
        :type nata_respiratory_hi: str
        """
        if nata_respiratory_hi is None:
            raise ValueError("Invalid value for `nata_respiratory_hi`, must not be `None`")

        self._nata_respiratory_hi = nata_respiratory_hi

    @property
    def over80_count(self):
        """Gets the over80_count of this Dfr018EJScreenIndexes.


        :return: The over80_count of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._over80_count

    @over80_count.setter
    def over80_count(self, over80_count):
        """Sets the over80_count of this Dfr018EJScreenIndexes.


        :param over80_count: The over80_count of this Dfr018EJScreenIndexes.
        :type over80_count: str
        """
        if over80_count is None:
            raise ValueError("Invalid value for `over80_count`, must not be `None`")

        self._over80_count = over80_count

    @property
    def ozone(self):
        """Gets the ozone of this Dfr018EJScreenIndexes.


        :return: The ozone of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._ozone

    @ozone.setter
    def ozone(self, ozone):
        """Sets the ozone of this Dfr018EJScreenIndexes.


        :param ozone: The ozone of this Dfr018EJScreenIndexes.
        :type ozone: str
        """
        if ozone is None:
            raise ValueError("Invalid value for `ozone`, must not be `None`")

        self._ozone = ozone

    @property
    def pm25(self):
        """Gets the pm25 of this Dfr018EJScreenIndexes.


        :return: The pm25 of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._pm25

    @pm25.setter
    def pm25(self, pm25):
        """Sets the pm25 of this Dfr018EJScreenIndexes.


        :param pm25: The pm25 of this Dfr018EJScreenIndexes.
        :type pm25: str
        """
        if pm25 is None:
            raise ValueError("Invalid value for `pm25`, must not be `None`")

        self._pm25 = pm25

    @property
    def rmp_proximity(self):
        """Gets the rmp_proximity of this Dfr018EJScreenIndexes.


        :return: The rmp_proximity of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._rmp_proximity

    @rmp_proximity.setter
    def rmp_proximity(self, rmp_proximity):
        """Sets the rmp_proximity of this Dfr018EJScreenIndexes.


        :param rmp_proximity: The rmp_proximity of this Dfr018EJScreenIndexes.
        :type rmp_proximity: str
        """
        if rmp_proximity is None:
            raise ValueError("Invalid value for `rmp_proximity`, must not be `None`")

        self._rmp_proximity = rmp_proximity

    @property
    def registry_id(self):
        """Gets the registry_id of this Dfr018EJScreenIndexes.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Dfr018EJScreenIndexes.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Dfr018EJScreenIndexes.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def superfund_proximity(self):
        """Gets the superfund_proximity of this Dfr018EJScreenIndexes.


        :return: The superfund_proximity of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._superfund_proximity

    @superfund_proximity.setter
    def superfund_proximity(self, superfund_proximity):
        """Sets the superfund_proximity of this Dfr018EJScreenIndexes.


        :param superfund_proximity: The superfund_proximity of this Dfr018EJScreenIndexes.
        :type superfund_proximity: str
        """
        if superfund_proximity is None:
            raise ValueError("Invalid value for `superfund_proximity`, must not be `None`")

        self._superfund_proximity = superfund_proximity

    @property
    def traffic_proximity(self):
        """Gets the traffic_proximity of this Dfr018EJScreenIndexes.


        :return: The traffic_proximity of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._traffic_proximity

    @traffic_proximity.setter
    def traffic_proximity(self, traffic_proximity):
        """Sets the traffic_proximity of this Dfr018EJScreenIndexes.


        :param traffic_proximity: The traffic_proximity of this Dfr018EJScreenIndexes.
        :type traffic_proximity: str
        """
        if traffic_proximity is None:
            raise ValueError("Invalid value for `traffic_proximity`, must not be `None`")

        self._traffic_proximity = traffic_proximity

    @property
    def water_discharge_proximity(self):
        """Gets the water_discharge_proximity of this Dfr018EJScreenIndexes.


        :return: The water_discharge_proximity of this Dfr018EJScreenIndexes.
        :rtype: str
        """
        return self._water_discharge_proximity

    @water_discharge_proximity.setter
    def water_discharge_proximity(self, water_discharge_proximity):
        """Sets the water_discharge_proximity of this Dfr018EJScreenIndexes.


        :param water_discharge_proximity: The water_discharge_proximity of this Dfr018EJScreenIndexes.
        :type water_discharge_proximity: str
        """
        if water_discharge_proximity is None:
            raise ValueError("Invalid value for `water_discharge_proximity`, must not be `None`")

        self._water_discharge_proximity = water_discharge_proximity
