# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr020_hpv_history import Dfr020HPVHistory
from openapi_server.models.dfr020_permit_history import Dfr020PermitHistory
from openapi_server.models.dfr021 import Dfr021
from openapi_server.models.dfr022 import Dfr022
from openapi_server.models.dfr023 import Dfr023
from openapi_server import util


class Dfr020(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, afs_programs: List[Dfr021]=None, frv_programs_pollutants: List[Dfr022]=None, hpv_history: Dfr020HPVHistory=None, hpv_programs_pollutants: List[Dfr023]=None, permit_history: Dfr020PermitHistory=None):
        """Dfr020 - a model defined in OpenAPI

        :param afs_programs: The afs_programs of this Dfr020.
        :param frv_programs_pollutants: The frv_programs_pollutants of this Dfr020.
        :param hpv_history: The hpv_history of this Dfr020.
        :param hpv_programs_pollutants: The hpv_programs_pollutants of this Dfr020.
        :param permit_history: The permit_history of this Dfr020.
        """
        self.openapi_types = {
            'afs_programs': List[Dfr021],
            'frv_programs_pollutants': List[Dfr022],
            'hpv_history': Dfr020HPVHistory,
            'hpv_programs_pollutants': List[Dfr023],
            'permit_history': Dfr020PermitHistory
        }

        self.attribute_map = {
            'afs_programs': 'AFSPrograms',
            'frv_programs_pollutants': 'FRVProgramsPollutants',
            'hpv_history': 'HPVHistory',
            'hpv_programs_pollutants': 'HPVProgramsPollutants',
            'permit_history': 'PermitHistory'
        }

        self._afs_programs = afs_programs
        self._frv_programs_pollutants = frv_programs_pollutants
        self._hpv_history = hpv_history
        self._hpv_programs_pollutants = hpv_programs_pollutants
        self._permit_history = permit_history

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr020':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr020 of this Dfr020.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def afs_programs(self):
        """Gets the afs_programs of this Dfr020.


        :return: The afs_programs of this Dfr020.
        :rtype: List[Dfr021]
        """
        return self._afs_programs

    @afs_programs.setter
    def afs_programs(self, afs_programs):
        """Sets the afs_programs of this Dfr020.


        :param afs_programs: The afs_programs of this Dfr020.
        :type afs_programs: List[Dfr021]
        """
        if afs_programs is None:
            raise ValueError("Invalid value for `afs_programs`, must not be `None`")

        self._afs_programs = afs_programs

    @property
    def frv_programs_pollutants(self):
        """Gets the frv_programs_pollutants of this Dfr020.


        :return: The frv_programs_pollutants of this Dfr020.
        :rtype: List[Dfr022]
        """
        return self._frv_programs_pollutants

    @frv_programs_pollutants.setter
    def frv_programs_pollutants(self, frv_programs_pollutants):
        """Sets the frv_programs_pollutants of this Dfr020.


        :param frv_programs_pollutants: The frv_programs_pollutants of this Dfr020.
        :type frv_programs_pollutants: List[Dfr022]
        """
        if frv_programs_pollutants is None:
            raise ValueError("Invalid value for `frv_programs_pollutants`, must not be `None`")

        self._frv_programs_pollutants = frv_programs_pollutants

    @property
    def hpv_history(self):
        """Gets the hpv_history of this Dfr020.


        :return: The hpv_history of this Dfr020.
        :rtype: Dfr020HPVHistory
        """
        return self._hpv_history

    @hpv_history.setter
    def hpv_history(self, hpv_history):
        """Sets the hpv_history of this Dfr020.


        :param hpv_history: The hpv_history of this Dfr020.
        :type hpv_history: Dfr020HPVHistory
        """
        if hpv_history is None:
            raise ValueError("Invalid value for `hpv_history`, must not be `None`")

        self._hpv_history = hpv_history

    @property
    def hpv_programs_pollutants(self):
        """Gets the hpv_programs_pollutants of this Dfr020.


        :return: The hpv_programs_pollutants of this Dfr020.
        :rtype: List[Dfr023]
        """
        return self._hpv_programs_pollutants

    @hpv_programs_pollutants.setter
    def hpv_programs_pollutants(self, hpv_programs_pollutants):
        """Sets the hpv_programs_pollutants of this Dfr020.


        :param hpv_programs_pollutants: The hpv_programs_pollutants of this Dfr020.
        :type hpv_programs_pollutants: List[Dfr023]
        """
        if hpv_programs_pollutants is None:
            raise ValueError("Invalid value for `hpv_programs_pollutants`, must not be `None`")

        self._hpv_programs_pollutants = hpv_programs_pollutants

    @property
    def permit_history(self):
        """Gets the permit_history of this Dfr020.


        :return: The permit_history of this Dfr020.
        :rtype: Dfr020PermitHistory
        """
        return self._permit_history

    @permit_history.setter
    def permit_history(self, permit_history):
        """Sets the permit_history of this Dfr020.


        :param permit_history: The permit_history of this Dfr020.
        :type permit_history: Dfr020PermitHistory
        """
        if permit_history is None:
            raise ValueError("Invalid value for `permit_history`, must not be `None`")

        self._permit_history = permit_history
