# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr070 import Dfr070
from openapi_server import util


class Dfr125Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lead_and_copper_rule5_yr: Dfr070=None, message: str=None):
        """Dfr125Results - a model defined in OpenAPI

        :param lead_and_copper_rule5_yr: The lead_and_copper_rule5_yr of this Dfr125Results.
        :param message: The message of this Dfr125Results.
        """
        self.openapi_types = {
            'lead_and_copper_rule5_yr': Dfr070,
            'message': str
        }

        self.attribute_map = {
            'lead_and_copper_rule5_yr': 'LeadAndCopperRule5Yr',
            'message': 'Message'
        }

        self._lead_and_copper_rule5_yr = lead_and_copper_rule5_yr
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr125Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr125_Results of this Dfr125Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lead_and_copper_rule5_yr(self):
        """Gets the lead_and_copper_rule5_yr of this Dfr125Results.


        :return: The lead_and_copper_rule5_yr of this Dfr125Results.
        :rtype: Dfr070
        """
        return self._lead_and_copper_rule5_yr

    @lead_and_copper_rule5_yr.setter
    def lead_and_copper_rule5_yr(self, lead_and_copper_rule5_yr):
        """Sets the lead_and_copper_rule5_yr of this Dfr125Results.


        :param lead_and_copper_rule5_yr: The lead_and_copper_rule5_yr of this Dfr125Results.
        :type lead_and_copper_rule5_yr: Dfr070
        """
        if lead_and_copper_rule5_yr is None:
            raise ValueError("Invalid value for `lead_and_copper_rule5_yr`, must not be `None`")

        self._lead_and_copper_rule5_yr = lead_and_copper_rule5_yr

    @property
    def message(self):
        """Gets the message of this Dfr125Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr125Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr125Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr125Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
