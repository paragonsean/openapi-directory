# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr061(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: str=None, african_american: str=None, american_indian: str=None, asian_pacific_islander: str=None, bsba: str=None, center_latitude: str=None, center_longitude: str=None, child: str=None, grades9to12: str=None, hs_diploma: str=None, hispanic_origin: str=None, households: str=None, households_public_assistance: str=None, housing_units: str=None, income15to25k: str=None, income25to50k: str=None, income50to75k: str=None, income75k_plus: str=None, income_less15k: str=None, land_area: str=None, less9th_grade: str=None, minors: str=None, other_multiracial: str=None, percent_minority: str=None, persons_below_poverty_level: str=None, population_density: str=None, radius: str=None, seniors: str=None, some_college: str=None, total_persons: str=None, water_area: str=None, white: str=None):
        """Dfr061 - a model defined in OpenAPI

        :param adults: The adults of this Dfr061.
        :param african_american: The african_american of this Dfr061.
        :param american_indian: The american_indian of this Dfr061.
        :param asian_pacific_islander: The asian_pacific_islander of this Dfr061.
        :param bsba: The bsba of this Dfr061.
        :param center_latitude: The center_latitude of this Dfr061.
        :param center_longitude: The center_longitude of this Dfr061.
        :param child: The child of this Dfr061.
        :param grades9to12: The grades9to12 of this Dfr061.
        :param hs_diploma: The hs_diploma of this Dfr061.
        :param hispanic_origin: The hispanic_origin of this Dfr061.
        :param households: The households of this Dfr061.
        :param households_public_assistance: The households_public_assistance of this Dfr061.
        :param housing_units: The housing_units of this Dfr061.
        :param income15to25k: The income15to25k of this Dfr061.
        :param income25to50k: The income25to50k of this Dfr061.
        :param income50to75k: The income50to75k of this Dfr061.
        :param income75k_plus: The income75k_plus of this Dfr061.
        :param income_less15k: The income_less15k of this Dfr061.
        :param land_area: The land_area of this Dfr061.
        :param less9th_grade: The less9th_grade of this Dfr061.
        :param minors: The minors of this Dfr061.
        :param other_multiracial: The other_multiracial of this Dfr061.
        :param percent_minority: The percent_minority of this Dfr061.
        :param persons_below_poverty_level: The persons_below_poverty_level of this Dfr061.
        :param population_density: The population_density of this Dfr061.
        :param radius: The radius of this Dfr061.
        :param seniors: The seniors of this Dfr061.
        :param some_college: The some_college of this Dfr061.
        :param total_persons: The total_persons of this Dfr061.
        :param water_area: The water_area of this Dfr061.
        :param white: The white of this Dfr061.
        """
        self.openapi_types = {
            'adults': str,
            'african_american': str,
            'american_indian': str,
            'asian_pacific_islander': str,
            'bsba': str,
            'center_latitude': str,
            'center_longitude': str,
            'child': str,
            'grades9to12': str,
            'hs_diploma': str,
            'hispanic_origin': str,
            'households': str,
            'households_public_assistance': str,
            'housing_units': str,
            'income15to25k': str,
            'income25to50k': str,
            'income50to75k': str,
            'income75k_plus': str,
            'income_less15k': str,
            'land_area': str,
            'less9th_grade': str,
            'minors': str,
            'other_multiracial': str,
            'percent_minority': str,
            'persons_below_poverty_level': str,
            'population_density': str,
            'radius': str,
            'seniors': str,
            'some_college': str,
            'total_persons': str,
            'water_area': str,
            'white': str
        }

        self.attribute_map = {
            'adults': 'Adults',
            'african_american': 'AfricanAmerican',
            'american_indian': 'AmericanIndian',
            'asian_pacific_islander': 'AsianPacificIslander',
            'bsba': 'BSBA',
            'center_latitude': 'CenterLatitude',
            'center_longitude': 'CenterLongitude',
            'child': 'Child',
            'grades9to12': 'Grades9to12',
            'hs_diploma': 'HSDiploma',
            'hispanic_origin': 'HispanicOrigin',
            'households': 'Households',
            'households_public_assistance': 'HouseholdsPublicAssistance',
            'housing_units': 'HousingUnits',
            'income15to25k': 'Income15to25k',
            'income25to50k': 'Income25to50k',
            'income50to75k': 'Income50to75k',
            'income75k_plus': 'Income75kPlus',
            'income_less15k': 'IncomeLess15k',
            'land_area': 'LandArea',
            'less9th_grade': 'Less9thGrade',
            'minors': 'Minors',
            'other_multiracial': 'OtherMultiracial',
            'percent_minority': 'PercentMinority',
            'persons_below_poverty_level': 'PersonsBelowPovertyLevel',
            'population_density': 'PopulationDensity',
            'radius': 'Radius',
            'seniors': 'Seniors',
            'some_college': 'SomeCollege',
            'total_persons': 'TotalPersons',
            'water_area': 'WaterArea',
            'white': 'White'
        }

        self._adults = adults
        self._african_american = african_american
        self._american_indian = american_indian
        self._asian_pacific_islander = asian_pacific_islander
        self._bsba = bsba
        self._center_latitude = center_latitude
        self._center_longitude = center_longitude
        self._child = child
        self._grades9to12 = grades9to12
        self._hs_diploma = hs_diploma
        self._hispanic_origin = hispanic_origin
        self._households = households
        self._households_public_assistance = households_public_assistance
        self._housing_units = housing_units
        self._income15to25k = income15to25k
        self._income25to50k = income25to50k
        self._income50to75k = income50to75k
        self._income75k_plus = income75k_plus
        self._income_less15k = income_less15k
        self._land_area = land_area
        self._less9th_grade = less9th_grade
        self._minors = minors
        self._other_multiracial = other_multiracial
        self._percent_minority = percent_minority
        self._persons_below_poverty_level = persons_below_poverty_level
        self._population_density = population_density
        self._radius = radius
        self._seniors = seniors
        self._some_college = some_college
        self._total_persons = total_persons
        self._water_area = water_area
        self._white = white

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr061':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr061 of this Dfr061.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this Dfr061.

        The number and percentage of persons living in the area who are between eighteen years old and sixty-five years old.

        :return: The adults of this Dfr061.
        :rtype: str
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this Dfr061.

        The number and percentage of persons living in the area who are between eighteen years old and sixty-five years old.

        :param adults: The adults of this Dfr061.
        :type adults: str
        """
        if adults is None:
            raise ValueError("Invalid value for `adults`, must not be `None`")

        self._adults = adults

    @property
    def african_american(self):
        """Gets the african_american of this Dfr061.

        The number and percentage of persons living in the area who are African American.

        :return: The african_american of this Dfr061.
        :rtype: str
        """
        return self._african_american

    @african_american.setter
    def african_american(self, african_american):
        """Sets the african_american of this Dfr061.

        The number and percentage of persons living in the area who are African American.

        :param african_american: The african_american of this Dfr061.
        :type african_american: str
        """
        if african_american is None:
            raise ValueError("Invalid value for `african_american`, must not be `None`")

        self._african_american = african_american

    @property
    def american_indian(self):
        """Gets the american_indian of this Dfr061.

        The number and percentage of persons living in the area who are of American Indian origin.

        :return: The american_indian of this Dfr061.
        :rtype: str
        """
        return self._american_indian

    @american_indian.setter
    def american_indian(self, american_indian):
        """Sets the american_indian of this Dfr061.

        The number and percentage of persons living in the area who are of American Indian origin.

        :param american_indian: The american_indian of this Dfr061.
        :type american_indian: str
        """
        if american_indian is None:
            raise ValueError("Invalid value for `american_indian`, must not be `None`")

        self._american_indian = american_indian

    @property
    def asian_pacific_islander(self):
        """Gets the asian_pacific_islander of this Dfr061.

        The number and percentage of persons living in the area who are of Asian Pacific Islander origin.

        :return: The asian_pacific_islander of this Dfr061.
        :rtype: str
        """
        return self._asian_pacific_islander

    @asian_pacific_islander.setter
    def asian_pacific_islander(self, asian_pacific_islander):
        """Sets the asian_pacific_islander of this Dfr061.

        The number and percentage of persons living in the area who are of Asian Pacific Islander origin.

        :param asian_pacific_islander: The asian_pacific_islander of this Dfr061.
        :type asian_pacific_islander: str
        """
        if asian_pacific_islander is None:
            raise ValueError("Invalid value for `asian_pacific_islander`, must not be `None`")

        self._asian_pacific_islander = asian_pacific_islander

    @property
    def bsba(self):
        """Gets the bsba of this Dfr061.

        The number and percentage of persons living in the area who have a bachelor's degree or higher.

        :return: The bsba of this Dfr061.
        :rtype: str
        """
        return self._bsba

    @bsba.setter
    def bsba(self, bsba):
        """Sets the bsba of this Dfr061.

        The number and percentage of persons living in the area who have a bachelor's degree or higher.

        :param bsba: The bsba of this Dfr061.
        :type bsba: str
        """
        if bsba is None:
            raise ValueError("Invalid value for `bsba`, must not be `None`")

        self._bsba = bsba

    @property
    def center_latitude(self):
        """Gets the center_latitude of this Dfr061.

        The latitude of the facility in degrees, to four decimal places.

        :return: The center_latitude of this Dfr061.
        :rtype: str
        """
        return self._center_latitude

    @center_latitude.setter
    def center_latitude(self, center_latitude):
        """Sets the center_latitude of this Dfr061.

        The latitude of the facility in degrees, to four decimal places.

        :param center_latitude: The center_latitude of this Dfr061.
        :type center_latitude: str
        """
        if center_latitude is None:
            raise ValueError("Invalid value for `center_latitude`, must not be `None`")

        self._center_latitude = center_latitude

    @property
    def center_longitude(self):
        """Gets the center_longitude of this Dfr061.

        The longitude of the facility in degrees, to four decimal places.

        :return: The center_longitude of this Dfr061.
        :rtype: str
        """
        return self._center_longitude

    @center_longitude.setter
    def center_longitude(self, center_longitude):
        """Sets the center_longitude of this Dfr061.

        The longitude of the facility in degrees, to four decimal places.

        :param center_longitude: The center_longitude of this Dfr061.
        :type center_longitude: str
        """
        if center_longitude is None:
            raise ValueError("Invalid value for `center_longitude`, must not be `None`")

        self._center_longitude = center_longitude

    @property
    def child(self):
        """Gets the child of this Dfr061.

        The number and percentage of persons living in the area who are five years old or younger.

        :return: The child of this Dfr061.
        :rtype: str
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this Dfr061.

        The number and percentage of persons living in the area who are five years old or younger.

        :param child: The child of this Dfr061.
        :type child: str
        """
        if child is None:
            raise ValueError("Invalid value for `child`, must not be `None`")

        self._child = child

    @property
    def grades9to12(self):
        """Gets the grades9to12 of this Dfr061.

        The number and percentage of persons living in the area who have completed grades nine through twelve

        :return: The grades9to12 of this Dfr061.
        :rtype: str
        """
        return self._grades9to12

    @grades9to12.setter
    def grades9to12(self, grades9to12):
        """Sets the grades9to12 of this Dfr061.

        The number and percentage of persons living in the area who have completed grades nine through twelve

        :param grades9to12: The grades9to12 of this Dfr061.
        :type grades9to12: str
        """
        if grades9to12 is None:
            raise ValueError("Invalid value for `grades9to12`, must not be `None`")

        self._grades9to12 = grades9to12

    @property
    def hs_diploma(self):
        """Gets the hs_diploma of this Dfr061.

        The number and percentage of persons living in the area who have a high school diploma

        :return: The hs_diploma of this Dfr061.
        :rtype: str
        """
        return self._hs_diploma

    @hs_diploma.setter
    def hs_diploma(self, hs_diploma):
        """Sets the hs_diploma of this Dfr061.

        The number and percentage of persons living in the area who have a high school diploma

        :param hs_diploma: The hs_diploma of this Dfr061.
        :type hs_diploma: str
        """
        if hs_diploma is None:
            raise ValueError("Invalid value for `hs_diploma`, must not be `None`")

        self._hs_diploma = hs_diploma

    @property
    def hispanic_origin(self):
        """Gets the hispanic_origin of this Dfr061.

        The number and percentage of persons living in the area who are of Hispanic origin

        :return: The hispanic_origin of this Dfr061.
        :rtype: str
        """
        return self._hispanic_origin

    @hispanic_origin.setter
    def hispanic_origin(self, hispanic_origin):
        """Sets the hispanic_origin of this Dfr061.

        The number and percentage of persons living in the area who are of Hispanic origin

        :param hispanic_origin: The hispanic_origin of this Dfr061.
        :type hispanic_origin: str
        """
        if hispanic_origin is None:
            raise ValueError("Invalid value for `hispanic_origin`, must not be `None`")

        self._hispanic_origin = hispanic_origin

    @property
    def households(self):
        """Gets the households of this Dfr061.

        The number of households in the area being profiled

        :return: The households of this Dfr061.
        :rtype: str
        """
        return self._households

    @households.setter
    def households(self, households):
        """Sets the households of this Dfr061.

        The number of households in the area being profiled

        :param households: The households of this Dfr061.
        :type households: str
        """
        if households is None:
            raise ValueError("Invalid value for `households`, must not be `None`")

        self._households = households

    @property
    def households_public_assistance(self):
        """Gets the households_public_assistance of this Dfr061.

        The number of households that are on any type of public assistance (including subsidized housing, welfare, aid to dependent children, etc.)

        :return: The households_public_assistance of this Dfr061.
        :rtype: str
        """
        return self._households_public_assistance

    @households_public_assistance.setter
    def households_public_assistance(self, households_public_assistance):
        """Sets the households_public_assistance of this Dfr061.

        The number of households that are on any type of public assistance (including subsidized housing, welfare, aid to dependent children, etc.)

        :param households_public_assistance: The households_public_assistance of this Dfr061.
        :type households_public_assistance: str
        """
        if households_public_assistance is None:
            raise ValueError("Invalid value for `households_public_assistance`, must not be `None`")

        self._households_public_assistance = households_public_assistance

    @property
    def housing_units(self):
        """Gets the housing_units of this Dfr061.

        The number of housing units in the area being profiled

        :return: The housing_units of this Dfr061.
        :rtype: str
        """
        return self._housing_units

    @housing_units.setter
    def housing_units(self, housing_units):
        """Sets the housing_units of this Dfr061.

        The number of housing units in the area being profiled

        :param housing_units: The housing_units of this Dfr061.
        :type housing_units: str
        """
        if housing_units is None:
            raise ValueError("Invalid value for `housing_units`, must not be `None`")

        self._housing_units = housing_units

    @property
    def income15to25k(self):
        """Gets the income15to25k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $15,000 but less than $25,000 per year

        :return: The income15to25k of this Dfr061.
        :rtype: str
        """
        return self._income15to25k

    @income15to25k.setter
    def income15to25k(self, income15to25k):
        """Sets the income15to25k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $15,000 but less than $25,000 per year

        :param income15to25k: The income15to25k of this Dfr061.
        :type income15to25k: str
        """
        if income15to25k is None:
            raise ValueError("Invalid value for `income15to25k`, must not be `None`")

        self._income15to25k = income15to25k

    @property
    def income25to50k(self):
        """Gets the income25to50k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $25,000 but less than $50,000 per year

        :return: The income25to50k of this Dfr061.
        :rtype: str
        """
        return self._income25to50k

    @income25to50k.setter
    def income25to50k(self, income25to50k):
        """Sets the income25to50k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $25,000 but less than $50,000 per year

        :param income25to50k: The income25to50k of this Dfr061.
        :type income25to50k: str
        """
        if income25to50k is None:
            raise ValueError("Invalid value for `income25to50k`, must not be `None`")

        self._income25to50k = income25to50k

    @property
    def income50to75k(self):
        """Gets the income50to75k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $50,000 per year but less than $75,000 per year

        :return: The income50to75k of this Dfr061.
        :rtype: str
        """
        return self._income50to75k

    @income50to75k.setter
    def income50to75k(self, income50to75k):
        """Sets the income50to75k of this Dfr061.

        The number and percentage of households who earn greater than or equal to $50,000 per year but less than $75,000 per year

        :param income50to75k: The income50to75k of this Dfr061.
        :type income50to75k: str
        """
        if income50to75k is None:
            raise ValueError("Invalid value for `income50to75k`, must not be `None`")

        self._income50to75k = income50to75k

    @property
    def income75k_plus(self):
        """Gets the income75k_plus of this Dfr061.

        The number and percentage of households who earn greater than or equal to $75,000 per year

        :return: The income75k_plus of this Dfr061.
        :rtype: str
        """
        return self._income75k_plus

    @income75k_plus.setter
    def income75k_plus(self, income75k_plus):
        """Sets the income75k_plus of this Dfr061.

        The number and percentage of households who earn greater than or equal to $75,000 per year

        :param income75k_plus: The income75k_plus of this Dfr061.
        :type income75k_plus: str
        """
        if income75k_plus is None:
            raise ValueError("Invalid value for `income75k_plus`, must not be `None`")

        self._income75k_plus = income75k_plus

    @property
    def income_less15k(self):
        """Gets the income_less15k of this Dfr061.

        The number and percentage of households who earn less than $15,000 per year

        :return: The income_less15k of this Dfr061.
        :rtype: str
        """
        return self._income_less15k

    @income_less15k.setter
    def income_less15k(self, income_less15k):
        """Sets the income_less15k of this Dfr061.

        The number and percentage of households who earn less than $15,000 per year

        :param income_less15k: The income_less15k of this Dfr061.
        :type income_less15k: str
        """
        if income_less15k is None:
            raise ValueError("Invalid value for `income_less15k`, must not be `None`")

        self._income_less15k = income_less15k

    @property
    def land_area(self):
        """Gets the land_area of this Dfr061.

        The percentage of the total area that is land (not water). This is calculated using the sum of the land areas of the Census Block Groups (CBG) within the selected radius

        :return: The land_area of this Dfr061.
        :rtype: str
        """
        return self._land_area

    @land_area.setter
    def land_area(self, land_area):
        """Sets the land_area of this Dfr061.

        The percentage of the total area that is land (not water). This is calculated using the sum of the land areas of the Census Block Groups (CBG) within the selected radius

        :param land_area: The land_area of this Dfr061.
        :type land_area: str
        """
        if land_area is None:
            raise ValueError("Invalid value for `land_area`, must not be `None`")

        self._land_area = land_area

    @property
    def less9th_grade(self):
        """Gets the less9th_grade of this Dfr061.

        The number and percentage of persons living in the area who have less than a ninth grade education

        :return: The less9th_grade of this Dfr061.
        :rtype: str
        """
        return self._less9th_grade

    @less9th_grade.setter
    def less9th_grade(self, less9th_grade):
        """Sets the less9th_grade of this Dfr061.

        The number and percentage of persons living in the area who have less than a ninth grade education

        :param less9th_grade: The less9th_grade of this Dfr061.
        :type less9th_grade: str
        """
        if less9th_grade is None:
            raise ValueError("Invalid value for `less9th_grade`, must not be `None`")

        self._less9th_grade = less9th_grade

    @property
    def minors(self):
        """Gets the minors of this Dfr061.

        The number and percentage of persons living in the area that are seventeen years old or younger

        :return: The minors of this Dfr061.
        :rtype: str
        """
        return self._minors

    @minors.setter
    def minors(self, minors):
        """Sets the minors of this Dfr061.

        The number and percentage of persons living in the area that are seventeen years old or younger

        :param minors: The minors of this Dfr061.
        :type minors: str
        """
        if minors is None:
            raise ValueError("Invalid value for `minors`, must not be `None`")

        self._minors = minors

    @property
    def other_multiracial(self):
        """Gets the other_multiracial of this Dfr061.

        The number and percentage of persons living in the area who are not included in the above classifications or are multiracial

        :return: The other_multiracial of this Dfr061.
        :rtype: str
        """
        return self._other_multiracial

    @other_multiracial.setter
    def other_multiracial(self, other_multiracial):
        """Sets the other_multiracial of this Dfr061.

        The number and percentage of persons living in the area who are not included in the above classifications or are multiracial

        :param other_multiracial: The other_multiracial of this Dfr061.
        :type other_multiracial: str
        """
        if other_multiracial is None:
            raise ValueError("Invalid value for `other_multiracial`, must not be `None`")

        self._other_multiracial = other_multiracial

    @property
    def percent_minority(self):
        """Gets the percent_minority of this Dfr061.

        The percentage of the population of the given area that is minority. The field is calculated by subtracting the number of persons who are white (and not of Hispanic origin) from the total persons. This number is then divided by the total persons and multiplied by one hundred to determine the percentage.

        :return: The percent_minority of this Dfr061.
        :rtype: str
        """
        return self._percent_minority

    @percent_minority.setter
    def percent_minority(self, percent_minority):
        """Sets the percent_minority of this Dfr061.

        The percentage of the population of the given area that is minority. The field is calculated by subtracting the number of persons who are white (and not of Hispanic origin) from the total persons. This number is then divided by the total persons and multiplied by one hundred to determine the percentage.

        :param percent_minority: The percent_minority of this Dfr061.
        :type percent_minority: str
        """
        if percent_minority is None:
            raise ValueError("Invalid value for `percent_minority`, must not be `None`")

        self._percent_minority = percent_minority

    @property
    def persons_below_poverty_level(self):
        """Gets the persons_below_poverty_level of this Dfr061.

        The number of people in the selected area that are below the poverty level

        :return: The persons_below_poverty_level of this Dfr061.
        :rtype: str
        """
        return self._persons_below_poverty_level

    @persons_below_poverty_level.setter
    def persons_below_poverty_level(self, persons_below_poverty_level):
        """Sets the persons_below_poverty_level of this Dfr061.

        The number of people in the selected area that are below the poverty level

        :param persons_below_poverty_level: The persons_below_poverty_level of this Dfr061.
        :type persons_below_poverty_level: str
        """
        if persons_below_poverty_level is None:
            raise ValueError("Invalid value for `persons_below_poverty_level`, must not be `None`")

        self._persons_below_poverty_level = persons_below_poverty_level

    @property
    def population_density(self):
        """Gets the population_density of this Dfr061.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field)

        :return: The population_density of this Dfr061.
        :rtype: str
        """
        return self._population_density

    @population_density.setter
    def population_density(self, population_density):
        """Sets the population_density of this Dfr061.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field)

        :param population_density: The population_density of this Dfr061.
        :type population_density: str
        """
        if population_density is None:
            raise ValueError("Invalid value for `population_density`, must not be `None`")

        self._population_density = population_density

    @property
    def radius(self):
        """Gets the radius of this Dfr061.

        The number of miles, in any direction, from the center point of the facility that is included in the demographic profile

        :return: The radius of this Dfr061.
        :rtype: str
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this Dfr061.

        The number of miles, in any direction, from the center point of the facility that is included in the demographic profile

        :param radius: The radius of this Dfr061.
        :type radius: str
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius

    @property
    def seniors(self):
        """Gets the seniors of this Dfr061.

        The number and percentage of persons living in the area who are sixty-five years old or older

        :return: The seniors of this Dfr061.
        :rtype: str
        """
        return self._seniors

    @seniors.setter
    def seniors(self, seniors):
        """Sets the seniors of this Dfr061.

        The number and percentage of persons living in the area who are sixty-five years old or older

        :param seniors: The seniors of this Dfr061.
        :type seniors: str
        """
        if seniors is None:
            raise ValueError("Invalid value for `seniors`, must not be `None`")

        self._seniors = seniors

    @property
    def some_college(self):
        """Gets the some_college of this Dfr061.

        The number and percentage of persons living in the area who have some college or a two year college degree

        :return: The some_college of this Dfr061.
        :rtype: str
        """
        return self._some_college

    @some_college.setter
    def some_college(self, some_college):
        """Sets the some_college of this Dfr061.

        The number and percentage of persons living in the area who have some college or a two year college degree

        :param some_college: The some_college of this Dfr061.
        :type some_college: str
        """
        if some_college is None:
            raise ValueError("Invalid value for `some_college`, must not be `None`")

        self._some_college = some_college

    @property
    def total_persons(self):
        """Gets the total_persons of this Dfr061.

        The total number of persons that reside in the area being profiled. The total population within the selected radius of a facility is one indicator of the facility's surrounding environment and provides context for other facility indicators

        :return: The total_persons of this Dfr061.
        :rtype: str
        """
        return self._total_persons

    @total_persons.setter
    def total_persons(self, total_persons):
        """Sets the total_persons of this Dfr061.

        The total number of persons that reside in the area being profiled. The total population within the selected radius of a facility is one indicator of the facility's surrounding environment and provides context for other facility indicators

        :param total_persons: The total_persons of this Dfr061.
        :type total_persons: str
        """
        if total_persons is None:
            raise ValueError("Invalid value for `total_persons`, must not be `None`")

        self._total_persons = total_persons

    @property
    def water_area(self):
        """Gets the water_area of this Dfr061.

        The percentage of the total area that is water (not land). This is calculated using the sum of the water areas of the Census Block Groups (CBG) within the selected radius

        :return: The water_area of this Dfr061.
        :rtype: str
        """
        return self._water_area

    @water_area.setter
    def water_area(self, water_area):
        """Sets the water_area of this Dfr061.

        The percentage of the total area that is water (not land). This is calculated using the sum of the water areas of the Census Block Groups (CBG) within the selected radius

        :param water_area: The water_area of this Dfr061.
        :type water_area: str
        """
        if water_area is None:
            raise ValueError("Invalid value for `water_area`, must not be `None`")

        self._water_area = water_area

    @property
    def white(self):
        """Gets the white of this Dfr061.

        The number and percentage of persons living in the area who are white

        :return: The white of this Dfr061.
        :rtype: str
        """
        return self._white

    @white.setter
    def white(self, white):
        """Sets the white of this Dfr061.

        The number and percentage of persons living in the area who are white

        :param white: The white of this Dfr061.
        :type white: str
        """
        if white is None:
            raise ValueError("Invalid value for `white`, must not be `None`")

        self._white = white
