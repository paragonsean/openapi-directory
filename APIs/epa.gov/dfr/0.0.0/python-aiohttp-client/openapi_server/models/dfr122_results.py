# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr076 import Dfr076
from openapi_server import util


class Dfr122Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, notices: Dfr076=None):
        """Dfr122Results - a model defined in OpenAPI

        :param message: The message of this Dfr122Results.
        :param notices: The notices of this Dfr122Results.
        """
        self.openapi_types = {
            'message': str,
            'notices': Dfr076
        }

        self.attribute_map = {
            'message': 'Message',
            'notices': 'Notices'
        }

        self._message = message
        self._notices = notices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr122Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr122_Results of this Dfr122Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Dfr122Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr122Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr122Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr122Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def notices(self):
        """Gets the notices of this Dfr122Results.


        :return: The notices of this Dfr122Results.
        :rtype: Dfr076
        """
        return self._notices

    @notices.setter
    def notices(self, notices):
        """Sets the notices of this Dfr122Results.


        :param notices: The notices of this Dfr122Results.
        :type notices: Dfr076
        """

        self._notices = notices
