# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018MapData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon: str=None, lat: str=None, lon: str=None, name: str=None, puv: str=None, type: str=None):
        """Dfr018MapData - a model defined in OpenAPI

        :param icon: The icon of this Dfr018MapData.
        :param lat: The lat of this Dfr018MapData.
        :param lon: The lon of this Dfr018MapData.
        :param name: The name of this Dfr018MapData.
        :param puv: The puv of this Dfr018MapData.
        :param type: The type of this Dfr018MapData.
        """
        self.openapi_types = {
            'icon': str,
            'lat': str,
            'lon': str,
            'name': str,
            'puv': str,
            'type': str
        }

        self.attribute_map = {
            'icon': 'ICON',
            'lat': 'LAT',
            'lon': 'LON',
            'name': 'NAME',
            'puv': 'PUV',
            'type': 'TYPE'
        }

        self._icon = icon
        self._lat = lat
        self._lon = lon
        self._name = name
        self._puv = puv
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018MapData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_MapData of this Dfr018MapData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon(self):
        """Gets the icon of this Dfr018MapData.

        Name of each individual icon file within the URL base

        :return: The icon of this Dfr018MapData.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Dfr018MapData.

        Name of each individual icon file within the URL base

        :param icon: The icon of this Dfr018MapData.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def lat(self):
        """Gets the lat of this Dfr018MapData.

        The latitude of the facility in degrees, to four decimal places

        :return: The lat of this Dfr018MapData.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Dfr018MapData.

        The latitude of the facility in degrees, to four decimal places

        :param lat: The lat of this Dfr018MapData.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Dfr018MapData.

        The longitude of the facility in degrees, to four decimal places

        :return: The lon of this Dfr018MapData.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Dfr018MapData.

        The longitude of the facility in degrees, to four decimal places

        :param lon: The lon of this Dfr018MapData.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this Dfr018MapData.

        For DFR, this is the Facility name. The name corresponds to the TYPE value

        :return: The name of this Dfr018MapData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dfr018MapData.

        For DFR, this is the Facility name. The name corresponds to the TYPE value

        :param name: The name of this Dfr018MapData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def puv(self):
        """Gets the puv of this Dfr018MapData.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility

        :return: The puv of this Dfr018MapData.
        :rtype: str
        """
        return self._puv

    @puv.setter
    def puv(self, puv):
        """Sets the puv of this Dfr018MapData.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility

        :param puv: The puv of this Dfr018MapData.
        :type puv: str
        """
        if puv is None:
            raise ValueError("Invalid value for `puv`, must not be `None`")

        self._puv = puv

    @property
    def type(self):
        """Gets the type of this Dfr018MapData.

        For DFR, this is always facility

        :return: The type of this Dfr018MapData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dfr018MapData.

        For DFR, this is always facility

        :param type: The type of this Dfr018MapData.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
