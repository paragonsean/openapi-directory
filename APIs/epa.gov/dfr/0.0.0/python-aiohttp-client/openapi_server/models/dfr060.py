# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr060(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_as_of: str=None, current_snc: str=None, description: str=None, qtrs_in_nc: str=None, source_id: str=None, statute: str=None):
        """Dfr060 - a model defined in OpenAPI

        :param current_as_of: The current_as_of of this Dfr060.
        :param current_snc: The current_snc of this Dfr060.
        :param description: The description of this Dfr060.
        :param qtrs_in_nc: The qtrs_in_nc of this Dfr060.
        :param source_id: The source_id of this Dfr060.
        :param statute: The statute of this Dfr060.
        """
        self.openapi_types = {
            'current_as_of': str,
            'current_snc': str,
            'description': str,
            'qtrs_in_nc': str,
            'source_id': str,
            'statute': str
        }

        self.attribute_map = {
            'current_as_of': 'CurrentAsOf',
            'current_snc': 'CurrentSNC',
            'description': 'Description',
            'qtrs_in_nc': 'QtrsInNC',
            'source_id': 'SourceID',
            'statute': 'Statute'
        }

        self._current_as_of = current_as_of
        self._current_snc = current_snc
        self._description = description
        self._qtrs_in_nc = qtrs_in_nc
        self._source_id = source_id
        self._statute = statute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr060':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr060 of this Dfr060.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_as_of(self):
        """Gets the current_as_of of this Dfr060.

        The most recent date or calendar year quarter of record maintained in the data system for which the Current SNC/HPV status applies. A quarter could be any of the following 3-month periods: - January-March - April-June - July-September - October-December

        :return: The current_as_of of this Dfr060.
        :rtype: str
        """
        return self._current_as_of

    @current_as_of.setter
    def current_as_of(self, current_as_of):
        """Sets the current_as_of of this Dfr060.

        The most recent date or calendar year quarter of record maintained in the data system for which the Current SNC/HPV status applies. A quarter could be any of the following 3-month periods: - January-March - April-June - July-September - October-December

        :param current_as_of: The current_as_of of this Dfr060.
        :type current_as_of: str
        """
        if current_as_of is None:
            raise ValueError("Invalid value for `current_as_of`, must not be `None`")

        self._current_as_of = current_as_of

    @property
    def current_snc(self):
        """Gets the current_snc of this Dfr060.

        The current Significant Noncompliance (SNC) or High Priority Violator (HPV) status for the facility during the most current quarter. SNC is used for RCRA and CWA, and HPV is used for CAA. Each program has its own specific criteria for making this determination. The value of Yes indicates the facility is in SNC or HPV for the permit or site in question and may pose a more severe level of environmental threat. The value of No indicates the permit or site is not considered in SNC or HPV. If the facility is Non-Federally Reportable within AFS or if it is classified as minor within PCS, the field reads N/A. The value of N/A in this field indicates Not Applicable because compliance data for these facilities are not required to be reported to the national program database

        :return: The current_snc of this Dfr060.
        :rtype: str
        """
        return self._current_snc

    @current_snc.setter
    def current_snc(self, current_snc):
        """Sets the current_snc of this Dfr060.

        The current Significant Noncompliance (SNC) or High Priority Violator (HPV) status for the facility during the most current quarter. SNC is used for RCRA and CWA, and HPV is used for CAA. Each program has its own specific criteria for making this determination. The value of Yes indicates the facility is in SNC or HPV for the permit or site in question and may pose a more severe level of environmental threat. The value of No indicates the permit or site is not considered in SNC or HPV. If the facility is Non-Federally Reportable within AFS or if it is classified as minor within PCS, the field reads N/A. The value of N/A in this field indicates Not Applicable because compliance data for these facilities are not required to be reported to the national program database

        :param current_snc: The current_snc of this Dfr060.
        :type current_snc: str
        """
        if current_snc is None:
            raise ValueError("Invalid value for `current_snc`, must not be `None`")

        self._current_snc = current_snc

    @property
    def description(self):
        """Gets the description of this Dfr060.

        The text description for the event that results in the permit or site being in Significant Noncompliance (SNC) or in High Priority Violation (HPV)

        :return: The description of this Dfr060.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dfr060.

        The text description for the event that results in the permit or site being in Significant Noncompliance (SNC) or in High Priority Violation (HPV)

        :param description: The description of this Dfr060.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def qtrs_in_nc(self):
        """Gets the qtrs_in_nc of this Dfr060.

        The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status

        :return: The qtrs_in_nc of this Dfr060.
        :rtype: str
        """
        return self._qtrs_in_nc

    @qtrs_in_nc.setter
    def qtrs_in_nc(self, qtrs_in_nc):
        """Sets the qtrs_in_nc of this Dfr060.

        The number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in non-compliance (NC) status, or in Significant Noncompliance (SNC) or High Priority Violation (HPV) status

        :param qtrs_in_nc: The qtrs_in_nc of this Dfr060.
        :type qtrs_in_nc: str
        """
        if qtrs_in_nc is None:
            raise ValueError("Invalid value for `qtrs_in_nc`, must not be `None`")

        self._qtrs_in_nc = qtrs_in_nc

    @property
    def source_id(self):
        """Gets the source_id of this Dfr060.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr060.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr060.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr060.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr060.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr060.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr060.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr060.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute
