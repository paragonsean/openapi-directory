# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr089 import Dfr089
from openapi_server import util


class Dfr088(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sanitary_survey: List[Dfr089]=None):
        """Dfr088 - a model defined in OpenAPI

        :param sanitary_survey: The sanitary_survey of this Dfr088.
        """
        self.openapi_types = {
            'sanitary_survey': List[Dfr089]
        }

        self.attribute_map = {
            'sanitary_survey': 'SanitarySurvey'
        }

        self._sanitary_survey = sanitary_survey

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr088':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr088 of this Dfr088.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sanitary_survey(self):
        """Gets the sanitary_survey of this Dfr088.


        :return: The sanitary_survey of this Dfr088.
        :rtype: List[Dfr089]
        """
        return self._sanitary_survey

    @sanitary_survey.setter
    def sanitary_survey(self, sanitary_survey):
        """Sets the sanitary_survey of this Dfr088.


        :param sanitary_survey: The sanitary_survey of this Dfr088.
        :type sanitary_survey: List[Dfr089]
        """
        if sanitary_survey is None:
            raise ValueError("Invalid value for `sanitary_survey`, must not be `None`")

        self._sanitary_survey = sanitary_survey
