# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr084_codes import Dfr084Codes
from openapi_server import util


class Dfr085(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sic_codes: List[Dfr084Codes]=None):
        """Dfr085 - a model defined in OpenAPI

        :param sic_codes: The sic_codes of this Dfr085.
        """
        self.openapi_types = {
            'sic_codes': List[Dfr084Codes]
        }

        self.attribute_map = {
            'sic_codes': 'SICCodes'
        }

        self._sic_codes = sic_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr085':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr085 of this Dfr085.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sic_codes(self):
        """Gets the sic_codes of this Dfr085.


        :return: The sic_codes of this Dfr085.
        :rtype: List[Dfr084Codes]
        """
        return self._sic_codes

    @sic_codes.setter
    def sic_codes(self, sic_codes):
        """Sets the sic_codes of this Dfr085.


        :param sic_codes: The sic_codes of this Dfr085.
        :type sic_codes: List[Dfr084Codes]
        """
        if sic_codes is None:
            raise ValueError("Invalid value for `sic_codes`, must not be `None`")

        self._sic_codes = sic_codes
