# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr055 import Dfr055
from openapi_server import util


class Dfr053(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_name: str=None, case_id: str=None, case_name: str=None, case_type: str=None, data_source: str=None, epa_system: str=None, issue_date: str=None, law_section_code: str=None, lead_agency: str=None, number_settlements: str=None, settlements: Dfr055=None, source_id: str=None, statute_code: str=None):
        """Dfr053 - a model defined in OpenAPI

        :param activity_name: The activity_name of this Dfr053.
        :param case_id: The case_id of this Dfr053.
        :param case_name: The case_name of this Dfr053.
        :param case_type: The case_type of this Dfr053.
        :param data_source: The data_source of this Dfr053.
        :param epa_system: The epa_system of this Dfr053.
        :param issue_date: The issue_date of this Dfr053.
        :param law_section_code: The law_section_code of this Dfr053.
        :param lead_agency: The lead_agency of this Dfr053.
        :param number_settlements: The number_settlements of this Dfr053.
        :param settlements: The settlements of this Dfr053.
        :param source_id: The source_id of this Dfr053.
        :param statute_code: The statute_code of this Dfr053.
        """
        self.openapi_types = {
            'activity_name': str,
            'case_id': str,
            'case_name': str,
            'case_type': str,
            'data_source': str,
            'epa_system': str,
            'issue_date': str,
            'law_section_code': str,
            'lead_agency': str,
            'number_settlements': str,
            'settlements': Dfr055,
            'source_id': str,
            'statute_code': str
        }

        self.attribute_map = {
            'activity_name': 'ActivityName',
            'case_id': 'CaseID',
            'case_name': 'CaseName',
            'case_type': 'CaseType',
            'data_source': 'DataSource',
            'epa_system': 'EPASystem',
            'issue_date': 'IssueDate',
            'law_section_code': 'LawSectionCode',
            'lead_agency': 'LeadAgency',
            'number_settlements': 'NumberSettlements',
            'settlements': 'Settlements',
            'source_id': 'SourceID',
            'statute_code': 'StatuteCode'
        }

        self._activity_name = activity_name
        self._case_id = case_id
        self._case_name = case_name
        self._case_type = case_type
        self._data_source = data_source
        self._epa_system = epa_system
        self._issue_date = issue_date
        self._law_section_code = law_section_code
        self._lead_agency = lead_agency
        self._number_settlements = number_settlements
        self._settlements = settlements
        self._source_id = source_id
        self._statute_code = statute_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr053':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr053 of this Dfr053.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_name(self):
        """Gets the activity_name of this Dfr053.

        The user-created name for an activity.

        :return: The activity_name of this Dfr053.
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this Dfr053.

        The user-created name for an activity.

        :param activity_name: The activity_name of this Dfr053.
        :type activity_name: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")

        self._activity_name = activity_name

    @property
    def case_id(self):
        """Gets the case_id of this Dfr053.

        Air Facility System (AFS) ID.

        :return: The case_id of this Dfr053.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Dfr053.

        Air Facility System (AFS) ID.

        :param case_id: The case_id of this Dfr053.
        :type case_id: str
        """
        if case_id is None:
            raise ValueError("Invalid value for `case_id`, must not be `None`")

        self._case_id = case_id

    @property
    def case_name(self):
        """Gets the case_name of this Dfr053.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :return: The case_name of this Dfr053.
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this Dfr053.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :param case_name: The case_name of this Dfr053.
        :type case_name: str
        """
        if case_name is None:
            raise ValueError("Invalid value for `case_name`, must not be `None`")

        self._case_name = case_name

    @property
    def case_type(self):
        """Gets the case_type of this Dfr053.

        The unique code that identifies a type of compliance event or enforcement action.

        :return: The case_type of this Dfr053.
        :rtype: str
        """
        return self._case_type

    @case_type.setter
    def case_type(self, case_type):
        """Sets the case_type of this Dfr053.

        The unique code that identifies a type of compliance event or enforcement action.

        :param case_type: The case_type of this Dfr053.
        :type case_type: str
        """
        if case_type is None:
            raise ValueError("Invalid value for `case_type`, must not be `None`")

        self._case_type = case_type

    @property
    def data_source(self):
        """Gets the data_source of this Dfr053.


        :return: The data_source of this Dfr053.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Dfr053.


        :param data_source: The data_source of this Dfr053.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr053.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr053.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr053.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr053.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def issue_date(self):
        """Gets the issue_date of this Dfr053.

        For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.

        :return: The issue_date of this Dfr053.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Dfr053.

        For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.

        :param issue_date: The issue_date of this Dfr053.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")

        self._issue_date = issue_date

    @property
    def law_section_code(self):
        """Gets the law_section_code of this Dfr053.

        The unique identifier for the Section(s) of law violated and cited in the activity.

        :return: The law_section_code of this Dfr053.
        :rtype: str
        """
        return self._law_section_code

    @law_section_code.setter
    def law_section_code(self, law_section_code):
        """Sets the law_section_code of this Dfr053.

        The unique identifier for the Section(s) of law violated and cited in the activity.

        :param law_section_code: The law_section_code of this Dfr053.
        :type law_section_code: str
        """
        if law_section_code is None:
            raise ValueError("Invalid value for `law_section_code`, must not be `None`")

        self._law_section_code = law_section_code

    @property
    def lead_agency(self):
        """Gets the lead_agency of this Dfr053.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead_agency of this Dfr053.
        :rtype: str
        """
        return self._lead_agency

    @lead_agency.setter
    def lead_agency(self, lead_agency):
        """Sets the lead_agency of this Dfr053.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead_agency: The lead_agency of this Dfr053.
        :type lead_agency: str
        """
        if lead_agency is None:
            raise ValueError("Invalid value for `lead_agency`, must not be `None`")

        self._lead_agency = lead_agency

    @property
    def number_settlements(self):
        """Gets the number_settlements of this Dfr053.

        The number of final orders issued under the enforcement action.

        :return: The number_settlements of this Dfr053.
        :rtype: str
        """
        return self._number_settlements

    @number_settlements.setter
    def number_settlements(self, number_settlements):
        """Sets the number_settlements of this Dfr053.

        The number of final orders issued under the enforcement action.

        :param number_settlements: The number_settlements of this Dfr053.
        :type number_settlements: str
        """
        if number_settlements is None:
            raise ValueError("Invalid value for `number_settlements`, must not be `None`")

        self._number_settlements = number_settlements

    @property
    def settlements(self):
        """Gets the settlements of this Dfr053.


        :return: The settlements of this Dfr053.
        :rtype: Dfr055
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this Dfr053.


        :param settlements: The settlements of this Dfr053.
        :type settlements: Dfr055
        """
        if settlements is None:
            raise ValueError("Invalid value for `settlements`, must not be `None`")

        self._settlements = settlements

    @property
    def source_id(self):
        """Gets the source_id of this Dfr053.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr053.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr053.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr053.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute_code(self):
        """Gets the statute_code of this Dfr053.

        Air Facility System (AFS) ID.

        :return: The statute_code of this Dfr053.
        :rtype: str
        """
        return self._statute_code

    @statute_code.setter
    def statute_code(self, statute_code):
        """Sets the statute_code of this Dfr053.

        Air Facility System (AFS) ID.

        :param statute_code: The statute_code of this Dfr053.
        :type statute_code: str
        """
        if statute_code is None:
            raise ValueError("Invalid value for `statute_code`, must not be `None`")

        self._statute_code = statute_code
