# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr112(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attains_aquatic_life_use_flg: str=None, attains_au_category: str=None, attains_cause_groups: str=None, attains_exceptnl_use_flg: str=None, attains_recreation_use_flg: str=None, attains_shellfish_use_flg: str=None, beach_close_last2yrs_flg: str=None, beach_close_last_year_flg: str=None, css: str=None, cwp_cso_outfalls: str=None, epa_system: str=None, esa_aquatic_species_flg: str=None, huc8: str=None, huc8_name: str=None, impaired_waters: str=None, rad_gnis_name: str=None, rad_reachcode: str=None, receiving_waters: str=None, source_id: str=None, wbd12: str=None, wbd12_name: str=None):
        """Dfr112 - a model defined in OpenAPI

        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Dfr112.
        :param attains_au_category: The attains_au_category of this Dfr112.
        :param attains_cause_groups: The attains_cause_groups of this Dfr112.
        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Dfr112.
        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Dfr112.
        :param attains_shellfish_use_flg: The attains_shellfish_use_flg of this Dfr112.
        :param beach_close_last2yrs_flg: The beach_close_last2yrs_flg of this Dfr112.
        :param beach_close_last_year_flg: The beach_close_last_year_flg of this Dfr112.
        :param css: The css of this Dfr112.
        :param cwp_cso_outfalls: The cwp_cso_outfalls of this Dfr112.
        :param epa_system: The epa_system of this Dfr112.
        :param esa_aquatic_species_flg: The esa_aquatic_species_flg of this Dfr112.
        :param huc8: The huc8 of this Dfr112.
        :param huc8_name: The huc8_name of this Dfr112.
        :param impaired_waters: The impaired_waters of this Dfr112.
        :param rad_gnis_name: The rad_gnis_name of this Dfr112.
        :param rad_reachcode: The rad_reachcode of this Dfr112.
        :param receiving_waters: The receiving_waters of this Dfr112.
        :param source_id: The source_id of this Dfr112.
        :param wbd12: The wbd12 of this Dfr112.
        :param wbd12_name: The wbd12_name of this Dfr112.
        """
        self.openapi_types = {
            'attains_aquatic_life_use_flg': str,
            'attains_au_category': str,
            'attains_cause_groups': str,
            'attains_exceptnl_use_flg': str,
            'attains_recreation_use_flg': str,
            'attains_shellfish_use_flg': str,
            'beach_close_last2yrs_flg': str,
            'beach_close_last_year_flg': str,
            'css': str,
            'cwp_cso_outfalls': str,
            'epa_system': str,
            'esa_aquatic_species_flg': str,
            'huc8': str,
            'huc8_name': str,
            'impaired_waters': str,
            'rad_gnis_name': str,
            'rad_reachcode': str,
            'receiving_waters': str,
            'source_id': str,
            'wbd12': str,
            'wbd12_name': str
        }

        self.attribute_map = {
            'attains_aquatic_life_use_flg': 'AttainsAquaticLifeUseFlg',
            'attains_au_category': 'AttainsAuCategory',
            'attains_cause_groups': 'AttainsCauseGroups',
            'attains_exceptnl_use_flg': 'AttainsExceptnlUseFlg',
            'attains_recreation_use_flg': 'AttainsRecreationUseFlg',
            'attains_shellfish_use_flg': 'AttainsShellfishUseFlg',
            'beach_close_last2yrs_flg': 'BeachCloseLast2yrsFlg',
            'beach_close_last_year_flg': 'BeachCloseLastYearFlg',
            'css': 'CSS',
            'cwp_cso_outfalls': 'CWPCsoOutfalls',
            'epa_system': 'EPASystem',
            'esa_aquatic_species_flg': 'EsaAquaticSpeciesFlg',
            'huc8': 'HUC8',
            'huc8_name': 'HUC8Name',
            'impaired_waters': 'ImpairedWaters',
            'rad_gnis_name': 'RadGnisName',
            'rad_reachcode': 'RadReachcode',
            'receiving_waters': 'ReceivingWaters',
            'source_id': 'SourceID',
            'wbd12': 'WBD12',
            'wbd12_name': 'WBD12Name'
        }

        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg
        self._attains_au_category = attains_au_category
        self._attains_cause_groups = attains_cause_groups
        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg
        self._attains_recreation_use_flg = attains_recreation_use_flg
        self._attains_shellfish_use_flg = attains_shellfish_use_flg
        self._beach_close_last2yrs_flg = beach_close_last2yrs_flg
        self._beach_close_last_year_flg = beach_close_last_year_flg
        self._css = css
        self._cwp_cso_outfalls = cwp_cso_outfalls
        self._epa_system = epa_system
        self._esa_aquatic_species_flg = esa_aquatic_species_flg
        self._huc8 = huc8
        self._huc8_name = huc8_name
        self._impaired_waters = impaired_waters
        self._rad_gnis_name = rad_gnis_name
        self._rad_reachcode = rad_reachcode
        self._receiving_waters = receiving_waters
        self._source_id = source_id
        self._wbd12 = wbd12
        self._wbd12_name = wbd12_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr112':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr112 of this Dfr112.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attains_aquatic_life_use_flg(self):
        """Gets the attains_aquatic_life_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :return: The attains_aquatic_life_use_flg of this Dfr112.
        :rtype: str
        """
        return self._attains_aquatic_life_use_flg

    @attains_aquatic_life_use_flg.setter
    def attains_aquatic_life_use_flg(self, attains_aquatic_life_use_flg):
        """Sets the attains_aquatic_life_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Dfr112.
        :type attains_aquatic_life_use_flg: str
        """
        if attains_aquatic_life_use_flg is None:
            raise ValueError("Invalid value for `attains_aquatic_life_use_flg`, must not be `None`")

        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg

    @property
    def attains_au_category(self):
        """Gets the attains_au_category of this Dfr112.

        The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).

        :return: The attains_au_category of this Dfr112.
        :rtype: str
        """
        return self._attains_au_category

    @attains_au_category.setter
    def attains_au_category(self, attains_au_category):
        """Sets the attains_au_category of this Dfr112.

        The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).

        :param attains_au_category: The attains_au_category of this Dfr112.
        :type attains_au_category: str
        """
        if attains_au_category is None:
            raise ValueError("Invalid value for `attains_au_category`, must not be `None`")

        self._attains_au_category = attains_au_category

    @property
    def attains_cause_groups(self):
        """Gets the attains_cause_groups of this Dfr112.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :return: The attains_cause_groups of this Dfr112.
        :rtype: str
        """
        return self._attains_cause_groups

    @attains_cause_groups.setter
    def attains_cause_groups(self, attains_cause_groups):
        """Sets the attains_cause_groups of this Dfr112.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :param attains_cause_groups: The attains_cause_groups of this Dfr112.
        :type attains_cause_groups: str
        """
        if attains_cause_groups is None:
            raise ValueError("Invalid value for `attains_cause_groups`, must not be `None`")

        self._attains_cause_groups = attains_cause_groups

    @property
    def attains_exceptnl_use_flg(self):
        """Gets the attains_exceptnl_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :return: The attains_exceptnl_use_flg of this Dfr112.
        :rtype: str
        """
        return self._attains_exceptnl_use_flg

    @attains_exceptnl_use_flg.setter
    def attains_exceptnl_use_flg(self, attains_exceptnl_use_flg):
        """Sets the attains_exceptnl_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Dfr112.
        :type attains_exceptnl_use_flg: str
        """
        if attains_exceptnl_use_flg is None:
            raise ValueError("Invalid value for `attains_exceptnl_use_flg`, must not be `None`")

        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg

    @property
    def attains_recreation_use_flg(self):
        """Gets the attains_recreation_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :return: The attains_recreation_use_flg of this Dfr112.
        :rtype: str
        """
        return self._attains_recreation_use_flg

    @attains_recreation_use_flg.setter
    def attains_recreation_use_flg(self, attains_recreation_use_flg):
        """Sets the attains_recreation_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Dfr112.
        :type attains_recreation_use_flg: str
        """
        if attains_recreation_use_flg is None:
            raise ValueError("Invalid value for `attains_recreation_use_flg`, must not be `None`")

        self._attains_recreation_use_flg = attains_recreation_use_flg

    @property
    def attains_shellfish_use_flg(self):
        """Gets the attains_shellfish_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.

        :return: The attains_shellfish_use_flg of this Dfr112.
        :rtype: str
        """
        return self._attains_shellfish_use_flg

    @attains_shellfish_use_flg.setter
    def attains_shellfish_use_flg(self, attains_shellfish_use_flg):
        """Sets the attains_shellfish_use_flg of this Dfr112.

        Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.

        :param attains_shellfish_use_flg: The attains_shellfish_use_flg of this Dfr112.
        :type attains_shellfish_use_flg: str
        """
        if attains_shellfish_use_flg is None:
            raise ValueError("Invalid value for `attains_shellfish_use_flg`, must not be `None`")

        self._attains_shellfish_use_flg = attains_shellfish_use_flg

    @property
    def beach_close_last2yrs_flg(self):
        """Gets the beach_close_last2yrs_flg of this Dfr112.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.

        :return: The beach_close_last2yrs_flg of this Dfr112.
        :rtype: str
        """
        return self._beach_close_last2yrs_flg

    @beach_close_last2yrs_flg.setter
    def beach_close_last2yrs_flg(self, beach_close_last2yrs_flg):
        """Sets the beach_close_last2yrs_flg of this Dfr112.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.

        :param beach_close_last2yrs_flg: The beach_close_last2yrs_flg of this Dfr112.
        :type beach_close_last2yrs_flg: str
        """
        if beach_close_last2yrs_flg is None:
            raise ValueError("Invalid value for `beach_close_last2yrs_flg`, must not be `None`")

        self._beach_close_last2yrs_flg = beach_close_last2yrs_flg

    @property
    def beach_close_last_year_flg(self):
        """Gets the beach_close_last_year_flg of this Dfr112.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.

        :return: The beach_close_last_year_flg of this Dfr112.
        :rtype: str
        """
        return self._beach_close_last_year_flg

    @beach_close_last_year_flg.setter
    def beach_close_last_year_flg(self, beach_close_last_year_flg):
        """Sets the beach_close_last_year_flg of this Dfr112.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.

        :param beach_close_last_year_flg: The beach_close_last_year_flg of this Dfr112.
        :type beach_close_last_year_flg: str
        """
        if beach_close_last_year_flg is None:
            raise ValueError("Invalid value for `beach_close_last_year_flg`, must not be `None`")

        self._beach_close_last_year_flg = beach_close_last_year_flg

    @property
    def css(self):
        """Gets the css of this Dfr112.

        Indicates whether or not the facility has a combined sewer system.

        :return: The css of this Dfr112.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this Dfr112.

        Indicates whether or not the facility has a combined sewer system.

        :param css: The css of this Dfr112.
        :type css: str
        """
        if css is None:
            raise ValueError("Invalid value for `css`, must not be `None`")

        self._css = css

    @property
    def cwp_cso_outfalls(self):
        """Gets the cwp_cso_outfalls of this Dfr112.

        The number of discharge outfalls at points prior to the treatment plant.

        :return: The cwp_cso_outfalls of this Dfr112.
        :rtype: str
        """
        return self._cwp_cso_outfalls

    @cwp_cso_outfalls.setter
    def cwp_cso_outfalls(self, cwp_cso_outfalls):
        """Sets the cwp_cso_outfalls of this Dfr112.

        The number of discharge outfalls at points prior to the treatment plant.

        :param cwp_cso_outfalls: The cwp_cso_outfalls of this Dfr112.
        :type cwp_cso_outfalls: str
        """
        if cwp_cso_outfalls is None:
            raise ValueError("Invalid value for `cwp_cso_outfalls`, must not be `None`")

        self._cwp_cso_outfalls = cwp_cso_outfalls

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr112.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr112.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr112.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr112.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def esa_aquatic_species_flg(self):
        """Gets the esa_aquatic_species_flg of this Dfr112.

        Indicates if the watershed contains Endangered Species Act (ESA)-listed aquatic species.

        :return: The esa_aquatic_species_flg of this Dfr112.
        :rtype: str
        """
        return self._esa_aquatic_species_flg

    @esa_aquatic_species_flg.setter
    def esa_aquatic_species_flg(self, esa_aquatic_species_flg):
        """Sets the esa_aquatic_species_flg of this Dfr112.

        Indicates if the watershed contains Endangered Species Act (ESA)-listed aquatic species.

        :param esa_aquatic_species_flg: The esa_aquatic_species_flg of this Dfr112.
        :type esa_aquatic_species_flg: str
        """
        if esa_aquatic_species_flg is None:
            raise ValueError("Invalid value for `esa_aquatic_species_flg`, must not be `None`")

        self._esa_aquatic_species_flg = esa_aquatic_species_flg

    @property
    def huc8(self):
        """Gets the huc8 of this Dfr112.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides.�Cataloguing unit (fourth-level, 8-digit HUC)

        :return: The huc8 of this Dfr112.
        :rtype: str
        """
        return self._huc8

    @huc8.setter
    def huc8(self, huc8):
        """Sets the huc8 of this Dfr112.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides.�Cataloguing unit (fourth-level, 8-digit HUC)

        :param huc8: The huc8 of this Dfr112.
        :type huc8: str
        """
        if huc8 is None:
            raise ValueError("Invalid value for `huc8`, must not be `None`")

        self._huc8 = huc8

    @property
    def huc8_name(self):
        """Gets the huc8_name of this Dfr112.

        The name of the watershed in which the facility resides.

        :return: The huc8_name of this Dfr112.
        :rtype: str
        """
        return self._huc8_name

    @huc8_name.setter
    def huc8_name(self, huc8_name):
        """Sets the huc8_name of this Dfr112.

        The name of the watershed in which the facility resides.

        :param huc8_name: The huc8_name of this Dfr112.
        :type huc8_name: str
        """
        if huc8_name is None:
            raise ValueError("Invalid value for `huc8_name`, must not be `None`")

        self._huc8_name = huc8_name

    @property
    def impaired_waters(self):
        """Gets the impaired_waters of this Dfr112.

        Field indicates if the permit discharges directly into category 4 or 5 impaired waters.

        :return: The impaired_waters of this Dfr112.
        :rtype: str
        """
        return self._impaired_waters

    @impaired_waters.setter
    def impaired_waters(self, impaired_waters):
        """Sets the impaired_waters of this Dfr112.

        Field indicates if the permit discharges directly into category 4 or 5 impaired waters.

        :param impaired_waters: The impaired_waters of this Dfr112.
        :type impaired_waters: str
        """
        if impaired_waters is None:
            raise ValueError("Invalid value for `impaired_waters`, must not be `None`")

        self._impaired_waters = impaired_waters

    @property
    def rad_gnis_name(self):
        """Gets the rad_gnis_name of this Dfr112.

        The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.

        :return: The rad_gnis_name of this Dfr112.
        :rtype: str
        """
        return self._rad_gnis_name

    @rad_gnis_name.setter
    def rad_gnis_name(self, rad_gnis_name):
        """Sets the rad_gnis_name of this Dfr112.

        The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.

        :param rad_gnis_name: The rad_gnis_name of this Dfr112.
        :type rad_gnis_name: str
        """
        if rad_gnis_name is None:
            raise ValueError("Invalid value for `rad_gnis_name`, must not be `None`")

        self._rad_gnis_name = rad_gnis_name

    @property
    def rad_reachcode(self):
        """Gets the rad_reachcode of this Dfr112.

        A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.

        :return: The rad_reachcode of this Dfr112.
        :rtype: str
        """
        return self._rad_reachcode

    @rad_reachcode.setter
    def rad_reachcode(self, rad_reachcode):
        """Sets the rad_reachcode of this Dfr112.

        A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.

        :param rad_reachcode: The rad_reachcode of this Dfr112.
        :type rad_reachcode: str
        """
        if rad_reachcode is None:
            raise ValueError("Invalid value for `rad_reachcode`, must not be `None`")

        self._rad_reachcode = rad_reachcode

    @property
    def receiving_waters(self):
        """Gets the receiving_waters of this Dfr112.

        The name of the river, lake, stream, or estuary that receives runoff from the facility.

        :return: The receiving_waters of this Dfr112.
        :rtype: str
        """
        return self._receiving_waters

    @receiving_waters.setter
    def receiving_waters(self, receiving_waters):
        """Sets the receiving_waters of this Dfr112.

        The name of the river, lake, stream, or estuary that receives runoff from the facility.

        :param receiving_waters: The receiving_waters of this Dfr112.
        :type receiving_waters: str
        """
        if receiving_waters is None:
            raise ValueError("Invalid value for `receiving_waters`, must not be `None`")

        self._receiving_waters = receiving_waters

    @property
    def source_id(self):
        """Gets the source_id of this Dfr112.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr112.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr112.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr112.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def wbd12(self):
        """Gets the wbd12 of this Dfr112.

        The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).

        :return: The wbd12 of this Dfr112.
        :rtype: str
        """
        return self._wbd12

    @wbd12.setter
    def wbd12(self, wbd12):
        """Sets the wbd12 of this Dfr112.

        The 12-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides, based on the USGS Watershed Boundary Dataset (WBD).

        :param wbd12: The wbd12 of this Dfr112.
        :type wbd12: str
        """
        if wbd12 is None:
            raise ValueError("Invalid value for `wbd12`, must not be `None`")

        self._wbd12 = wbd12

    @property
    def wbd12_name(self):
        """Gets the wbd12_name of this Dfr112.

        The name of the watershed in which the facility resides.

        :return: The wbd12_name of this Dfr112.
        :rtype: str
        """
        return self._wbd12_name

    @wbd12_name.setter
    def wbd12_name(self, wbd12_name):
        """Sets the wbd12_name of this Dfr112.

        The name of the watershed in which the facility resides.

        :param wbd12_name: The wbd12_name of this Dfr112.
        :type wbd12_name: str
        """
        if wbd12_name is None:
            raise ValueError("Invalid value for `wbd12_name`, must not be `None`")

        self._wbd12_name = wbd12_name
