# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018WebFireDocuments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_link: str=None, document_name: str=None, document_type: str=None, facility_name: str=None, registry_id: str=None, report_doc_type: str=None, report_submission_date: str=None):
        """Dfr018WebFireDocuments - a model defined in OpenAPI

        :param document_link: The document_link of this Dfr018WebFireDocuments.
        :param document_name: The document_name of this Dfr018WebFireDocuments.
        :param document_type: The document_type of this Dfr018WebFireDocuments.
        :param facility_name: The facility_name of this Dfr018WebFireDocuments.
        :param registry_id: The registry_id of this Dfr018WebFireDocuments.
        :param report_doc_type: The report_doc_type of this Dfr018WebFireDocuments.
        :param report_submission_date: The report_submission_date of this Dfr018WebFireDocuments.
        """
        self.openapi_types = {
            'document_link': str,
            'document_name': str,
            'document_type': str,
            'facility_name': str,
            'registry_id': str,
            'report_doc_type': str,
            'report_submission_date': str
        }

        self.attribute_map = {
            'document_link': 'DocumentLink',
            'document_name': 'DocumentName',
            'document_type': 'DocumentType',
            'facility_name': 'FacilityName',
            'registry_id': 'RegistryId',
            'report_doc_type': 'ReportDocType',
            'report_submission_date': 'ReportSubmissionDate'
        }

        self._document_link = document_link
        self._document_name = document_name
        self._document_type = document_type
        self._facility_name = facility_name
        self._registry_id = registry_id
        self._report_doc_type = report_doc_type
        self._report_submission_date = report_submission_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018WebFireDocuments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_WebFireDocuments of this Dfr018WebFireDocuments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_link(self):
        """Gets the document_link of this Dfr018WebFireDocuments.

        URLS for documents that EPA has colleted that are related to this Case.

        :return: The document_link of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._document_link

    @document_link.setter
    def document_link(self, document_link):
        """Sets the document_link of this Dfr018WebFireDocuments.

        URLS for documents that EPA has colleted that are related to this Case.

        :param document_link: The document_link of this Dfr018WebFireDocuments.
        :type document_link: str
        """
        if document_link is None:
            raise ValueError("Invalid value for `document_link`, must not be `None`")

        self._document_link = document_link

    @property
    def document_name(self):
        """Gets the document_name of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :return: The document_name of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :param document_name: The document_name of this Dfr018WebFireDocuments.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")

        self._document_name = document_name

    @property
    def document_type(self):
        """Gets the document_type of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :return: The document_type of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :param document_type: The document_type of this Dfr018WebFireDocuments.
        :type document_type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def facility_name(self):
        """Gets the facility_name of this Dfr018WebFireDocuments.

        The name of the facility.

        :return: The facility_name of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Dfr018WebFireDocuments.

        The name of the facility.

        :param facility_name: The facility_name of this Dfr018WebFireDocuments.
        :type facility_name: str
        """
        if facility_name is None:
            raise ValueError("Invalid value for `facility_name`, must not be `None`")

        self._facility_name = facility_name

    @property
    def registry_id(self):
        """Gets the registry_id of this Dfr018WebFireDocuments.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :return: The registry_id of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Dfr018WebFireDocuments.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :param registry_id: The registry_id of this Dfr018WebFireDocuments.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def report_doc_type(self):
        """Gets the report_doc_type of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :return: The report_doc_type of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._report_doc_type

    @report_doc_type.setter
    def report_doc_type(self, report_doc_type):
        """Sets the report_doc_type of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :param report_doc_type: The report_doc_type of this Dfr018WebFireDocuments.
        :type report_doc_type: str
        """
        if report_doc_type is None:
            raise ValueError("Invalid value for `report_doc_type`, must not be `None`")

        self._report_doc_type = report_doc_type

    @property
    def report_submission_date(self):
        """Gets the report_submission_date of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :return: The report_submission_date of this Dfr018WebFireDocuments.
        :rtype: str
        """
        return self._report_submission_date

    @report_submission_date.setter
    def report_submission_date(self, report_submission_date):
        """Sets the report_submission_date of this Dfr018WebFireDocuments.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :param report_submission_date: The report_submission_date of this Dfr018WebFireDocuments.
        :type report_submission_date: str
        """
        if report_submission_date is None:
            raise ValueError("Invalid value for `report_submission_date`, must not be `None`")

        self._report_submission_date = report_submission_date
