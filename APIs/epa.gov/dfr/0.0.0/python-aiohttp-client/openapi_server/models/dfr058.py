# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr058(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: str=None, cms_flag: str=None, comp_monitor_id: str=None, _date: str=None, epa_system: str=None, finding: str=None, inspection_type: str=None, lead_agency: str=None, source_id: str=None, statute: str=None):
        """Dfr058 - a model defined in OpenAPI

        :param activity_type: The activity_type of this Dfr058.
        :param cms_flag: The cms_flag of this Dfr058.
        :param comp_monitor_id: The comp_monitor_id of this Dfr058.
        :param _date: The _date of this Dfr058.
        :param epa_system: The epa_system of this Dfr058.
        :param finding: The finding of this Dfr058.
        :param inspection_type: The inspection_type of this Dfr058.
        :param lead_agency: The lead_agency of this Dfr058.
        :param source_id: The source_id of this Dfr058.
        :param statute: The statute of this Dfr058.
        """
        self.openapi_types = {
            'activity_type': str,
            'cms_flag': str,
            'comp_monitor_id': str,
            '_date': str,
            'epa_system': str,
            'finding': str,
            'inspection_type': str,
            'lead_agency': str,
            'source_id': str,
            'statute': str
        }

        self.attribute_map = {
            'activity_type': 'ActivityType',
            'cms_flag': 'CMSFlag',
            'comp_monitor_id': 'CompMonitorID',
            '_date': 'Date',
            'epa_system': 'EPASystem',
            'finding': 'Finding',
            'inspection_type': 'InspectionType',
            'lead_agency': 'LeadAgency',
            'source_id': 'SourceID',
            'statute': 'Statute'
        }

        self._activity_type = activity_type
        self._cms_flag = cms_flag
        self._comp_monitor_id = comp_monitor_id
        self.__date = _date
        self._epa_system = epa_system
        self._finding = finding
        self._inspection_type = inspection_type
        self._lead_agency = lead_agency
        self._source_id = source_id
        self._statute = statute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr058':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr058 of this Dfr058.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this Dfr058.


        :return: The activity_type of this Dfr058.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this Dfr058.


        :param activity_type: The activity_type of this Dfr058.
        :type activity_type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type

    @property
    def cms_flag(self):
        """Gets the cms_flag of this Dfr058.

        Indicates whether a Corrective Measure Study has been recommended.

        :return: The cms_flag of this Dfr058.
        :rtype: str
        """
        return self._cms_flag

    @cms_flag.setter
    def cms_flag(self, cms_flag):
        """Sets the cms_flag of this Dfr058.

        Indicates whether a Corrective Measure Study has been recommended.

        :param cms_flag: The cms_flag of this Dfr058.
        :type cms_flag: str
        """
        if cms_flag is None:
            raise ValueError("Invalid value for `cms_flag`, must not be `None`")

        self._cms_flag = cms_flag

    @property
    def comp_monitor_id(self):
        """Gets the comp_monitor_id of this Dfr058.


        :return: The comp_monitor_id of this Dfr058.
        :rtype: str
        """
        return self._comp_monitor_id

    @comp_monitor_id.setter
    def comp_monitor_id(self, comp_monitor_id):
        """Sets the comp_monitor_id of this Dfr058.


        :param comp_monitor_id: The comp_monitor_id of this Dfr058.
        :type comp_monitor_id: str
        """
        if comp_monitor_id is None:
            raise ValueError("Invalid value for `comp_monitor_id`, must not be `None`")

        self._comp_monitor_id = comp_monitor_id

    @property
    def _date(self):
        """Gets the _date of this Dfr058.

        The date of the listed inspection

        :return: The _date of this Dfr058.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Dfr058.

        The date of the listed inspection

        :param _date: The _date of this Dfr058.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr058.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr058.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr058.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr058.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def finding(self):
        """Gets the finding of this Dfr058.

        For CAA, includes results of source or performance stack tests or Title V certification review results when applicable; for CWA and RCRA, includes whether violations or compliance issues were found during an inspection, if entered into an EPA system

        :return: The finding of this Dfr058.
        :rtype: str
        """
        return self._finding

    @finding.setter
    def finding(self, finding):
        """Sets the finding of this Dfr058.

        For CAA, includes results of source or performance stack tests or Title V certification review results when applicable; for CWA and RCRA, includes whether violations or compliance issues were found during an inspection, if entered into an EPA system

        :param finding: The finding of this Dfr058.
        :type finding: str
        """
        if finding is None:
            raise ValueError("Invalid value for `finding`, must not be `None`")

        self._finding = finding

    @property
    def inspection_type(self):
        """Gets the inspection_type of this Dfr058.

        A description of the type of inspection undertaken

        :return: The inspection_type of this Dfr058.
        :rtype: str
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this Dfr058.

        A description of the type of inspection undertaken

        :param inspection_type: The inspection_type of this Dfr058.
        :type inspection_type: str
        """
        if inspection_type is None:
            raise ValueError("Invalid value for `inspection_type`, must not be `None`")

        self._inspection_type = inspection_type

    @property
    def lead_agency(self):
        """Gets the lead_agency of this Dfr058.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead_agency of this Dfr058.
        :rtype: str
        """
        return self._lead_agency

    @lead_agency.setter
    def lead_agency(self, lead_agency):
        """Sets the lead_agency of this Dfr058.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead_agency: The lead_agency of this Dfr058.
        :type lead_agency: str
        """
        if lead_agency is None:
            raise ValueError("Invalid value for `lead_agency`, must not be `None`")

        self._lead_agency = lead_agency

    @property
    def source_id(self):
        """Gets the source_id of this Dfr058.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr058.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr058.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr058.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr058.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr058.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr058.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr058.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute
