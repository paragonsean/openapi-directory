# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr116_results import Dfr116Results
from openapi_server import util


class DfrRestServicesGetFormalActionsGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results: Dfr116Results=None):
        """DfrRestServicesGetFormalActionsGet200Response - a model defined in OpenAPI

        :param results: The results of this DfrRestServicesGetFormalActionsGet200Response.
        """
        self.openapi_types = {
            'results': Dfr116Results
        }

        self.attribute_map = {
            'results': 'Results'
        }

        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DfrRestServicesGetFormalActionsGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _dfr_rest_services_get_formal_actions_get_200_response of this DfrRestServicesGetFormalActionsGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this DfrRestServicesGetFormalActionsGet200Response.


        :return: The results of this DfrRestServicesGetFormalActionsGet200Response.
        :rtype: Dfr116Results
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this DfrRestServicesGetFormalActionsGet200Response.


        :param results: The results of this DfrRestServicesGetFormalActionsGet200Response.
        :type results: Dfr116Results
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
