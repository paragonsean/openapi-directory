# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr071 import Dfr071
from openapi_server.models.dfr072 import Dfr072
from openapi_server import util


class Dfr070(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copper_samples: List[Dfr071]=None, cu_ale: str=None, cu_ale_units: str=None, cu_ale_value: str=None, cu_sample_dates: str=None, cu_viol: str=None, lead_and_copper_viol: str=None, lead_copper_rule_health_based_viol: str=None, lead_samples: List[Dfr072]=None, pb_ale: str=None, pb_ale_units: str=None, pb_ale_value: str=None, pb_sample_dates: str=None, pb_viol: str=None, rule_code350_viol: str=None, source_id: str=None, i_cu90: str=None, i_pb90: str=None):
        """Dfr070 - a model defined in OpenAPI

        :param copper_samples: The copper_samples of this Dfr070.
        :param cu_ale: The cu_ale of this Dfr070.
        :param cu_ale_units: The cu_ale_units of this Dfr070.
        :param cu_ale_value: The cu_ale_value of this Dfr070.
        :param cu_sample_dates: The cu_sample_dates of this Dfr070.
        :param cu_viol: The cu_viol of this Dfr070.
        :param lead_and_copper_viol: The lead_and_copper_viol of this Dfr070.
        :param lead_copper_rule_health_based_viol: The lead_copper_rule_health_based_viol of this Dfr070.
        :param lead_samples: The lead_samples of this Dfr070.
        :param pb_ale: The pb_ale of this Dfr070.
        :param pb_ale_units: The pb_ale_units of this Dfr070.
        :param pb_ale_value: The pb_ale_value of this Dfr070.
        :param pb_sample_dates: The pb_sample_dates of this Dfr070.
        :param pb_viol: The pb_viol of this Dfr070.
        :param rule_code350_viol: The rule_code350_viol of this Dfr070.
        :param source_id: The source_id of this Dfr070.
        :param i_cu90: The i_cu90 of this Dfr070.
        :param i_pb90: The i_pb90 of this Dfr070.
        """
        self.openapi_types = {
            'copper_samples': List[Dfr071],
            'cu_ale': str,
            'cu_ale_units': str,
            'cu_ale_value': str,
            'cu_sample_dates': str,
            'cu_viol': str,
            'lead_and_copper_viol': str,
            'lead_copper_rule_health_based_viol': str,
            'lead_samples': List[Dfr072],
            'pb_ale': str,
            'pb_ale_units': str,
            'pb_ale_value': str,
            'pb_sample_dates': str,
            'pb_viol': str,
            'rule_code350_viol': str,
            'source_id': str,
            'i_cu90': str,
            'i_pb90': str
        }

        self.attribute_map = {
            'copper_samples': 'CopperSamples',
            'cu_ale': 'CuALE',
            'cu_ale_units': 'CuALEUnits',
            'cu_ale_value': 'CuALEValue',
            'cu_sample_dates': 'CuSampleDates',
            'cu_viol': 'CuViol',
            'lead_and_copper_viol': 'LeadAndCopperViol',
            'lead_copper_rule_health_based_viol': 'LeadCopperRuleHealthBasedViol',
            'lead_samples': 'LeadSamples',
            'pb_ale': 'PbALE',
            'pb_ale_units': 'PbALEUnits',
            'pb_ale_value': 'PbALEValue',
            'pb_sample_dates': 'PbSampleDates',
            'pb_viol': 'PbViol',
            'rule_code350_viol': 'RuleCode350Viol',
            'source_id': 'SourceID',
            'i_cu90': 'iCU90',
            'i_pb90': 'iPB90'
        }

        self._copper_samples = copper_samples
        self._cu_ale = cu_ale
        self._cu_ale_units = cu_ale_units
        self._cu_ale_value = cu_ale_value
        self._cu_sample_dates = cu_sample_dates
        self._cu_viol = cu_viol
        self._lead_and_copper_viol = lead_and_copper_viol
        self._lead_copper_rule_health_based_viol = lead_copper_rule_health_based_viol
        self._lead_samples = lead_samples
        self._pb_ale = pb_ale
        self._pb_ale_units = pb_ale_units
        self._pb_ale_value = pb_ale_value
        self._pb_sample_dates = pb_sample_dates
        self._pb_viol = pb_viol
        self._rule_code350_viol = rule_code350_viol
        self._source_id = source_id
        self._i_cu90 = i_cu90
        self._i_pb90 = i_pb90

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr070':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr070 of this Dfr070.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copper_samples(self):
        """Gets the copper_samples of this Dfr070.


        :return: The copper_samples of this Dfr070.
        :rtype: List[Dfr071]
        """
        return self._copper_samples

    @copper_samples.setter
    def copper_samples(self, copper_samples):
        """Sets the copper_samples of this Dfr070.


        :param copper_samples: The copper_samples of this Dfr070.
        :type copper_samples: List[Dfr071]
        """

        self._copper_samples = copper_samples

    @property
    def cu_ale(self):
        """Gets the cu_ale of this Dfr070.

        The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.

        :return: The cu_ale of this Dfr070.
        :rtype: str
        """
        return self._cu_ale

    @cu_ale.setter
    def cu_ale(self, cu_ale):
        """Sets the cu_ale of this Dfr070.

        The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.

        :param cu_ale: The cu_ale of this Dfr070.
        :type cu_ale: str
        """

        self._cu_ale = cu_ale

    @property
    def cu_ale_units(self):
        """Gets the cu_ale_units of this Dfr070.

        The copper action level exceedances measurement units.

        :return: The cu_ale_units of this Dfr070.
        :rtype: str
        """
        return self._cu_ale_units

    @cu_ale_units.setter
    def cu_ale_units(self, cu_ale_units):
        """Sets the cu_ale_units of this Dfr070.

        The copper action level exceedances measurement units.

        :param cu_ale_units: The cu_ale_units of this Dfr070.
        :type cu_ale_units: str
        """

        self._cu_ale_units = cu_ale_units

    @property
    def cu_ale_value(self):
        """Gets the cu_ale_value of this Dfr070.

        The copper action level exceedance value.

        :return: The cu_ale_value of this Dfr070.
        :rtype: str
        """
        return self._cu_ale_value

    @cu_ale_value.setter
    def cu_ale_value(self, cu_ale_value):
        """Sets the cu_ale_value of this Dfr070.

        The copper action level exceedance value.

        :param cu_ale_value: The cu_ale_value of this Dfr070.
        :type cu_ale_value: str
        """

        self._cu_ale_value = cu_ale_value

    @property
    def cu_sample_dates(self):
        """Gets the cu_sample_dates of this Dfr070.

        The dates during which tap water samples were collected.

        :return: The cu_sample_dates of this Dfr070.
        :rtype: str
        """
        return self._cu_sample_dates

    @cu_sample_dates.setter
    def cu_sample_dates(self, cu_sample_dates):
        """Sets the cu_sample_dates of this Dfr070.

        The dates during which tap water samples were collected.

        :param cu_sample_dates: The cu_sample_dates of this Dfr070.
        :type cu_sample_dates: str
        """

        self._cu_sample_dates = cu_sample_dates

    @property
    def cu_viol(self):
        """Gets the cu_viol of this Dfr070.

        The number of copper violations in the last five years.

        :return: The cu_viol of this Dfr070.
        :rtype: str
        """
        return self._cu_viol

    @cu_viol.setter
    def cu_viol(self, cu_viol):
        """Sets the cu_viol of this Dfr070.

        The number of copper violations in the last five years.

        :param cu_viol: The cu_viol of this Dfr070.
        :type cu_viol: str
        """

        self._cu_viol = cu_viol

    @property
    def lead_and_copper_viol(self):
        """Gets the lead_and_copper_viol of this Dfr070.

        The number of lead and copper violations.

        :return: The lead_and_copper_viol of this Dfr070.
        :rtype: str
        """
        return self._lead_and_copper_viol

    @lead_and_copper_viol.setter
    def lead_and_copper_viol(self, lead_and_copper_viol):
        """Sets the lead_and_copper_viol of this Dfr070.

        The number of lead and copper violations.

        :param lead_and_copper_viol: The lead_and_copper_viol of this Dfr070.
        :type lead_and_copper_viol: str
        """

        self._lead_and_copper_viol = lead_and_copper_viol

    @property
    def lead_copper_rule_health_based_viol(self):
        """Gets the lead_copper_rule_health_based_viol of this Dfr070.

        The count of open health-based violations of the Lead and Copper Rule in the past five years.

        :return: The lead_copper_rule_health_based_viol of this Dfr070.
        :rtype: str
        """
        return self._lead_copper_rule_health_based_viol

    @lead_copper_rule_health_based_viol.setter
    def lead_copper_rule_health_based_viol(self, lead_copper_rule_health_based_viol):
        """Sets the lead_copper_rule_health_based_viol of this Dfr070.

        The count of open health-based violations of the Lead and Copper Rule in the past five years.

        :param lead_copper_rule_health_based_viol: The lead_copper_rule_health_based_viol of this Dfr070.
        :type lead_copper_rule_health_based_viol: str
        """

        self._lead_copper_rule_health_based_viol = lead_copper_rule_health_based_viol

    @property
    def lead_samples(self):
        """Gets the lead_samples of this Dfr070.


        :return: The lead_samples of this Dfr070.
        :rtype: List[Dfr072]
        """
        return self._lead_samples

    @lead_samples.setter
    def lead_samples(self, lead_samples):
        """Sets the lead_samples of this Dfr070.


        :param lead_samples: The lead_samples of this Dfr070.
        :type lead_samples: List[Dfr072]
        """

        self._lead_samples = lead_samples

    @property
    def pb_ale(self):
        """Gets the pb_ale of this Dfr070.

        The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.

        :return: The pb_ale of this Dfr070.
        :rtype: str
        """
        return self._pb_ale

    @pb_ale.setter
    def pb_ale(self, pb_ale):
        """Sets the pb_ale of this Dfr070.

        The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.

        :param pb_ale: The pb_ale of this Dfr070.
        :type pb_ale: str
        """

        self._pb_ale = pb_ale

    @property
    def pb_ale_units(self):
        """Gets the pb_ale_units of this Dfr070.

        The lead action level exceedance measurement units.

        :return: The pb_ale_units of this Dfr070.
        :rtype: str
        """
        return self._pb_ale_units

    @pb_ale_units.setter
    def pb_ale_units(self, pb_ale_units):
        """Sets the pb_ale_units of this Dfr070.

        The lead action level exceedance measurement units.

        :param pb_ale_units: The pb_ale_units of this Dfr070.
        :type pb_ale_units: str
        """

        self._pb_ale_units = pb_ale_units

    @property
    def pb_ale_value(self):
        """Gets the pb_ale_value of this Dfr070.

        The lead action level exceedance sample value.

        :return: The pb_ale_value of this Dfr070.
        :rtype: str
        """
        return self._pb_ale_value

    @pb_ale_value.setter
    def pb_ale_value(self, pb_ale_value):
        """Sets the pb_ale_value of this Dfr070.

        The lead action level exceedance sample value.

        :param pb_ale_value: The pb_ale_value of this Dfr070.
        :type pb_ale_value: str
        """

        self._pb_ale_value = pb_ale_value

    @property
    def pb_sample_dates(self):
        """Gets the pb_sample_dates of this Dfr070.

        The dates during which tap water samples were collected.

        :return: The pb_sample_dates of this Dfr070.
        :rtype: str
        """
        return self._pb_sample_dates

    @pb_sample_dates.setter
    def pb_sample_dates(self, pb_sample_dates):
        """Sets the pb_sample_dates of this Dfr070.

        The dates during which tap water samples were collected.

        :param pb_sample_dates: The pb_sample_dates of this Dfr070.
        :type pb_sample_dates: str
        """

        self._pb_sample_dates = pb_sample_dates

    @property
    def pb_viol(self):
        """Gets the pb_viol of this Dfr070.

        The number of lead violations in the last five years.

        :return: The pb_viol of this Dfr070.
        :rtype: str
        """
        return self._pb_viol

    @pb_viol.setter
    def pb_viol(self, pb_viol):
        """Sets the pb_viol of this Dfr070.

        The number of lead violations in the last five years.

        :param pb_viol: The pb_viol of this Dfr070.
        :type pb_viol: str
        """

        self._pb_viol = pb_viol

    @property
    def rule_code350_viol(self):
        """Gets the rule_code350_viol of this Dfr070.

        The count of open health-based violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules.

        :return: The rule_code350_viol of this Dfr070.
        :rtype: str
        """
        return self._rule_code350_viol

    @rule_code350_viol.setter
    def rule_code350_viol(self, rule_code350_viol):
        """Sets the rule_code350_viol of this Dfr070.

        The count of open health-based violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules.

        :param rule_code350_viol: The rule_code350_viol of this Dfr070.
        :type rule_code350_viol: str
        """

        self._rule_code350_viol = rule_code350_viol

    @property
    def source_id(self):
        """Gets the source_id of this Dfr070.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr070.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr070.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr070.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def i_cu90(self):
        """Gets the i_cu90 of this Dfr070.

        The number of times samples have been collected for copper in the last five years.

        :return: The i_cu90 of this Dfr070.
        :rtype: str
        """
        return self._i_cu90

    @i_cu90.setter
    def i_cu90(self, i_cu90):
        """Sets the i_cu90 of this Dfr070.

        The number of times samples have been collected for copper in the last five years.

        :param i_cu90: The i_cu90 of this Dfr070.
        :type i_cu90: str
        """

        self._i_cu90 = i_cu90

    @property
    def i_pb90(self):
        """Gets the i_pb90 of this Dfr070.

        The number of times samples have been collected for lead in the last five years.

        :return: The i_pb90 of this Dfr070.
        :rtype: str
        """
        return self._i_pb90

    @i_pb90.setter
    def i_pb90(self, i_pb90):
        """Sets the i_pb90 of this Dfr070.

        The number of times samples have been collected for lead in the last five years.

        :param i_pb90: The i_pb90 of this Dfr070.
        :type i_pb90: str
        """

        self._i_pb90 = i_pb90
