# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr068 import Dfr068
from openapi_server import util


class Dfr118Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inspection_enforcement_summary: Dfr068=None, message: str=None):
        """Dfr118Results - a model defined in OpenAPI

        :param inspection_enforcement_summary: The inspection_enforcement_summary of this Dfr118Results.
        :param message: The message of this Dfr118Results.
        """
        self.openapi_types = {
            'inspection_enforcement_summary': Dfr068,
            'message': str
        }

        self.attribute_map = {
            'inspection_enforcement_summary': 'InspectionEnforcementSummary',
            'message': 'Message'
        }

        self._inspection_enforcement_summary = inspection_enforcement_summary
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr118Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr118_Results of this Dfr118Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inspection_enforcement_summary(self):
        """Gets the inspection_enforcement_summary of this Dfr118Results.


        :return: The inspection_enforcement_summary of this Dfr118Results.
        :rtype: Dfr068
        """
        return self._inspection_enforcement_summary

    @inspection_enforcement_summary.setter
    def inspection_enforcement_summary(self, inspection_enforcement_summary):
        """Sets the inspection_enforcement_summary of this Dfr118Results.


        :param inspection_enforcement_summary: The inspection_enforcement_summary of this Dfr118Results.
        :type inspection_enforcement_summary: Dfr068
        """

        self._inspection_enforcement_summary = inspection_enforcement_summary

    @property
    def message(self):
        """Gets the message of this Dfr118Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr118Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr118Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr118Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
