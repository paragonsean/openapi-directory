# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr054(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comp_action_cost: str=None, federal_penalty: str=None, sep_cost: str=None, settlement_date: str=None, state_local_penalty: str=None, total_cost_recovery: str=None):
        """Dfr054 - a model defined in OpenAPI

        :param comp_action_cost: The comp_action_cost of this Dfr054.
        :param federal_penalty: The federal_penalty of this Dfr054.
        :param sep_cost: The sep_cost of this Dfr054.
        :param settlement_date: The settlement_date of this Dfr054.
        :param state_local_penalty: The state_local_penalty of this Dfr054.
        :param total_cost_recovery: The total_cost_recovery of this Dfr054.
        """
        self.openapi_types = {
            'comp_action_cost': str,
            'federal_penalty': str,
            'sep_cost': str,
            'settlement_date': str,
            'state_local_penalty': str,
            'total_cost_recovery': str
        }

        self.attribute_map = {
            'comp_action_cost': 'CompActionCost',
            'federal_penalty': 'FederalPenalty',
            'sep_cost': 'SepCost',
            'settlement_date': 'SettlementDate',
            'state_local_penalty': 'StateLocalPenalty',
            'total_cost_recovery': 'TotalCostRecovery'
        }

        self._comp_action_cost = comp_action_cost
        self._federal_penalty = federal_penalty
        self._sep_cost = sep_cost
        self._settlement_date = settlement_date
        self._state_local_penalty = state_local_penalty
        self._total_cost_recovery = total_cost_recovery

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr054':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr054 of this Dfr054.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comp_action_cost(self):
        """Gets the comp_action_cost of this Dfr054.

        The whole dollar amount of the estimated or actual value of the complying action activities.

        :return: The comp_action_cost of this Dfr054.
        :rtype: str
        """
        return self._comp_action_cost

    @comp_action_cost.setter
    def comp_action_cost(self, comp_action_cost):
        """Sets the comp_action_cost of this Dfr054.

        The whole dollar amount of the estimated or actual value of the complying action activities.

        :param comp_action_cost: The comp_action_cost of this Dfr054.
        :type comp_action_cost: str
        """
        if comp_action_cost is None:
            raise ValueError("Invalid value for `comp_action_cost`, must not be `None`")

        self._comp_action_cost = comp_action_cost

    @property
    def federal_penalty(self):
        """Gets the federal_penalty of this Dfr054.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :return: The federal_penalty of this Dfr054.
        :rtype: str
        """
        return self._federal_penalty

    @federal_penalty.setter
    def federal_penalty(self, federal_penalty):
        """Sets the federal_penalty of this Dfr054.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :param federal_penalty: The federal_penalty of this Dfr054.
        :type federal_penalty: str
        """
        if federal_penalty is None:
            raise ValueError("Invalid value for `federal_penalty`, must not be `None`")

        self._federal_penalty = federal_penalty

    @property
    def sep_cost(self):
        """Gets the sep_cost of this Dfr054.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The sep_cost of this Dfr054.
        :rtype: str
        """
        return self._sep_cost

    @sep_cost.setter
    def sep_cost(self, sep_cost):
        """Sets the sep_cost of this Dfr054.

        The total value of all SEPs for all settlements at the enforcement case.

        :param sep_cost: The sep_cost of this Dfr054.
        :type sep_cost: str
        """
        if sep_cost is None:
            raise ValueError("Invalid value for `sep_cost`, must not be `None`")

        self._sep_cost = sep_cost

    @property
    def settlement_date(self):
        """Gets the settlement_date of this Dfr054.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :return: The settlement_date of this Dfr054.
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this Dfr054.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :param settlement_date: The settlement_date of this Dfr054.
        :type settlement_date: str
        """
        if settlement_date is None:
            raise ValueError("Invalid value for `settlement_date`, must not be `None`")

        self._settlement_date = settlement_date

    @property
    def state_local_penalty(self):
        """Gets the state_local_penalty of this Dfr054.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :return: The state_local_penalty of this Dfr054.
        :rtype: str
        """
        return self._state_local_penalty

    @state_local_penalty.setter
    def state_local_penalty(self, state_local_penalty):
        """Sets the state_local_penalty of this Dfr054.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :param state_local_penalty: The state_local_penalty of this Dfr054.
        :type state_local_penalty: str
        """
        if state_local_penalty is None:
            raise ValueError("Invalid value for `state_local_penalty`, must not be `None`")

        self._state_local_penalty = state_local_penalty

    @property
    def total_cost_recovery(self):
        """Gets the total_cost_recovery of this Dfr054.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :return: The total_cost_recovery of this Dfr054.
        :rtype: str
        """
        return self._total_cost_recovery

    @total_cost_recovery.setter
    def total_cost_recovery(self, total_cost_recovery):
        """Sets the total_cost_recovery of this Dfr054.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :param total_cost_recovery: The total_cost_recovery of this Dfr054.
        :type total_cost_recovery: str
        """
        if total_cost_recovery is None:
            raise ValueError("Invalid value for `total_cost_recovery`, must not be `None`")

        self._total_cost_recovery = total_cost_recovery
