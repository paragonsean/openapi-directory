# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr018Permits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy_score: str=None, accuracy_value: str=None, areas: str=None, collect_desc: str=None, dqurl: str=None, epa_region: str=None, epa_system: str=None, exp_date: str=None, facility_city: str=None, facility_name: str=None, facility_state: str=None, facility_status: str=None, facility_street: str=None, facility_zip: str=None, has_bio_rpt: str=None, has_icis_sso_rpt: str=None, hdatum_desc: str=None, indian_country: str=None, latitude: float=None, longitude: float=None, naics: str=None, ref_point_desc: str=None, sic: str=None, scale: str=None, source_id: str=None, statute: str=None, universe: str=None):
        """Dfr018Permits - a model defined in OpenAPI

        :param accuracy_score: The accuracy_score of this Dfr018Permits.
        :param accuracy_value: The accuracy_value of this Dfr018Permits.
        :param areas: The areas of this Dfr018Permits.
        :param collect_desc: The collect_desc of this Dfr018Permits.
        :param dqurl: The dqurl of this Dfr018Permits.
        :param epa_region: The epa_region of this Dfr018Permits.
        :param epa_system: The epa_system of this Dfr018Permits.
        :param exp_date: The exp_date of this Dfr018Permits.
        :param facility_city: The facility_city of this Dfr018Permits.
        :param facility_name: The facility_name of this Dfr018Permits.
        :param facility_state: The facility_state of this Dfr018Permits.
        :param facility_status: The facility_status of this Dfr018Permits.
        :param facility_street: The facility_street of this Dfr018Permits.
        :param facility_zip: The facility_zip of this Dfr018Permits.
        :param has_bio_rpt: The has_bio_rpt of this Dfr018Permits.
        :param has_icis_sso_rpt: The has_icis_sso_rpt of this Dfr018Permits.
        :param hdatum_desc: The hdatum_desc of this Dfr018Permits.
        :param indian_country: The indian_country of this Dfr018Permits.
        :param latitude: The latitude of this Dfr018Permits.
        :param longitude: The longitude of this Dfr018Permits.
        :param naics: The naics of this Dfr018Permits.
        :param ref_point_desc: The ref_point_desc of this Dfr018Permits.
        :param sic: The sic of this Dfr018Permits.
        :param scale: The scale of this Dfr018Permits.
        :param source_id: The source_id of this Dfr018Permits.
        :param statute: The statute of this Dfr018Permits.
        :param universe: The universe of this Dfr018Permits.
        """
        self.openapi_types = {
            'accuracy_score': str,
            'accuracy_value': str,
            'areas': str,
            'collect_desc': str,
            'dqurl': str,
            'epa_region': str,
            'epa_system': str,
            'exp_date': str,
            'facility_city': str,
            'facility_name': str,
            'facility_state': str,
            'facility_status': str,
            'facility_street': str,
            'facility_zip': str,
            'has_bio_rpt': str,
            'has_icis_sso_rpt': str,
            'hdatum_desc': str,
            'indian_country': str,
            'latitude': float,
            'longitude': float,
            'naics': str,
            'ref_point_desc': str,
            'sic': str,
            'scale': str,
            'source_id': str,
            'statute': str,
            'universe': str
        }

        self.attribute_map = {
            'accuracy_score': 'AccuracyScore',
            'accuracy_value': 'AccuracyValue',
            'areas': 'Areas',
            'collect_desc': 'CollectDesc',
            'dqurl': 'DQURL',
            'epa_region': 'EPARegion',
            'epa_system': 'EPASystem',
            'exp_date': 'ExpDate',
            'facility_city': 'FacilityCity',
            'facility_name': 'FacilityName',
            'facility_state': 'FacilityState',
            'facility_status': 'FacilityStatus',
            'facility_street': 'FacilityStreet',
            'facility_zip': 'FacilityZip',
            'has_bio_rpt': 'HasBioRpt',
            'has_icis_sso_rpt': 'HasIcisSsoRpt',
            'hdatum_desc': 'HdatumDesc',
            'indian_country': 'IndianCountry',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'naics': 'NAICS',
            'ref_point_desc': 'RefPointDesc',
            'sic': 'SIC',
            'scale': 'Scale',
            'source_id': 'SourceID',
            'statute': 'Statute',
            'universe': 'Universe'
        }

        self._accuracy_score = accuracy_score
        self._accuracy_value = accuracy_value
        self._areas = areas
        self._collect_desc = collect_desc
        self._dqurl = dqurl
        self._epa_region = epa_region
        self._epa_system = epa_system
        self._exp_date = exp_date
        self._facility_city = facility_city
        self._facility_name = facility_name
        self._facility_state = facility_state
        self._facility_status = facility_status
        self._facility_street = facility_street
        self._facility_zip = facility_zip
        self._has_bio_rpt = has_bio_rpt
        self._has_icis_sso_rpt = has_icis_sso_rpt
        self._hdatum_desc = hdatum_desc
        self._indian_country = indian_country
        self._latitude = latitude
        self._longitude = longitude
        self._naics = naics
        self._ref_point_desc = ref_point_desc
        self._sic = sic
        self._scale = scale
        self._source_id = source_id
        self._statute = statute
        self._universe = universe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr018Permits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr018_Permits of this Dfr018Permits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_score(self):
        """Gets the accuracy_score of this Dfr018Permits.

        ??

        :return: The accuracy_score of this Dfr018Permits.
        :rtype: str
        """
        return self._accuracy_score

    @accuracy_score.setter
    def accuracy_score(self, accuracy_score):
        """Sets the accuracy_score of this Dfr018Permits.

        ??

        :param accuracy_score: The accuracy_score of this Dfr018Permits.
        :type accuracy_score: str
        """
        if accuracy_score is None:
            raise ValueError("Invalid value for `accuracy_score`, must not be `None`")

        self._accuracy_score = accuracy_score

    @property
    def accuracy_value(self):
        """Gets the accuracy_value of this Dfr018Permits.

        ??

        :return: The accuracy_value of this Dfr018Permits.
        :rtype: str
        """
        return self._accuracy_value

    @accuracy_value.setter
    def accuracy_value(self, accuracy_value):
        """Sets the accuracy_value of this Dfr018Permits.

        ??

        :param accuracy_value: The accuracy_value of this Dfr018Permits.
        :type accuracy_value: str
        """
        if accuracy_value is None:
            raise ValueError("Invalid value for `accuracy_value`, must not be `None`")

        self._accuracy_value = accuracy_value

    @property
    def areas(self):
        """Gets the areas of this Dfr018Permits.

        Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.

        :return: The areas of this Dfr018Permits.
        :rtype: str
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this Dfr018Permits.

        Clean Air Act stationary source program subpart designation, Clean Water Act-NPDES permit component(s), and/or other Resource Conservation and Recovery Act designations, if any.

        :param areas: The areas of this Dfr018Permits.
        :type areas: str
        """
        if areas is None:
            raise ValueError("Invalid value for `areas`, must not be `None`")

        self._areas = areas

    @property
    def collect_desc(self):
        """Gets the collect_desc of this Dfr018Permits.

        ??

        :return: The collect_desc of this Dfr018Permits.
        :rtype: str
        """
        return self._collect_desc

    @collect_desc.setter
    def collect_desc(self, collect_desc):
        """Sets the collect_desc of this Dfr018Permits.

        ??

        :param collect_desc: The collect_desc of this Dfr018Permits.
        :type collect_desc: str
        """
        if collect_desc is None:
            raise ValueError("Invalid value for `collect_desc`, must not be `None`")

        self._collect_desc = collect_desc

    @property
    def dqurl(self):
        """Gets the dqurl of this Dfr018Permits.

        ??

        :return: The dqurl of this Dfr018Permits.
        :rtype: str
        """
        return self._dqurl

    @dqurl.setter
    def dqurl(self, dqurl):
        """Sets the dqurl of this Dfr018Permits.

        ??

        :param dqurl: The dqurl of this Dfr018Permits.
        :type dqurl: str
        """
        if dqurl is None:
            raise ValueError("Invalid value for `dqurl`, must not be `None`")

        self._dqurl = dqurl

    @property
    def epa_region(self):
        """Gets the epa_region of this Dfr018Permits.

        The EPA region in which the facility is located

        :return: The epa_region of this Dfr018Permits.
        :rtype: str
        """
        return self._epa_region

    @epa_region.setter
    def epa_region(self, epa_region):
        """Sets the epa_region of this Dfr018Permits.

        The EPA region in which the facility is located

        :param epa_region: The epa_region of this Dfr018Permits.
        :type epa_region: str
        """
        if epa_region is None:
            raise ValueError("Invalid value for `epa_region`, must not be `None`")

        self._epa_region = epa_region

    @property
    def epa_system(self):
        """Gets the epa_system of this Dfr018Permits.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Dfr018Permits.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Dfr018Permits.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Dfr018Permits.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def exp_date(self):
        """Gets the exp_date of this Dfr018Permits.

        Date on which a given permit is scheduled to expire

        :return: The exp_date of this Dfr018Permits.
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this Dfr018Permits.

        Date on which a given permit is scheduled to expire

        :param exp_date: The exp_date of this Dfr018Permits.
        :type exp_date: str
        """
        if exp_date is None:
            raise ValueError("Invalid value for `exp_date`, must not be `None`")

        self._exp_date = exp_date

    @property
    def facility_city(self):
        """Gets the facility_city of this Dfr018Permits.

        The city in which the facility is located

        :return: The facility_city of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this Dfr018Permits.

        The city in which the facility is located

        :param facility_city: The facility_city of this Dfr018Permits.
        :type facility_city: str
        """
        if facility_city is None:
            raise ValueError("Invalid value for `facility_city`, must not be `None`")

        self._facility_city = facility_city

    @property
    def facility_name(self):
        """Gets the facility_name of this Dfr018Permits.

        The name of the facility.

        :return: The facility_name of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Dfr018Permits.

        The name of the facility.

        :param facility_name: The facility_name of this Dfr018Permits.
        :type facility_name: str
        """
        if facility_name is None:
            raise ValueError("Invalid value for `facility_name`, must not be `None`")

        self._facility_name = facility_name

    @property
    def facility_state(self):
        """Gets the facility_state of this Dfr018Permits.

        The state in which the facility is located

        :return: The facility_state of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this Dfr018Permits.

        The state in which the facility is located

        :param facility_state: The facility_state of this Dfr018Permits.
        :type facility_state: str
        """
        if facility_state is None:
            raise ValueError("Invalid value for `facility_state`, must not be `None`")

        self._facility_state = facility_state

    @property
    def facility_status(self):
        """Gets the facility_status of this Dfr018Permits.

        The Air Program Status is given for each source ID (Operating; Planned; Under construction; Temporarily closed;  Permanently closed; and Seasonal)  For CWA, the Permit Compliance System (PCS) designates a permitted facility as being Active or Inactive. Under the CWA, all facilities discharging pollutants from a point source (e.g., a pipe) to surface waters must have a NPDES permit. For CWA, ICISNPDES designates a permit as Effective, Administratively Continued, Expired, Not Needed, Pending, Retired, or Terminated. RCRA facilities (sites) are designated as Active or Inactive. The following provides RCRA site activity status definitions and explains site activity status designation.

        :return: The facility_status of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_status

    @facility_status.setter
    def facility_status(self, facility_status):
        """Sets the facility_status of this Dfr018Permits.

        The Air Program Status is given for each source ID (Operating; Planned; Under construction; Temporarily closed;  Permanently closed; and Seasonal)  For CWA, the Permit Compliance System (PCS) designates a permitted facility as being Active or Inactive. Under the CWA, all facilities discharging pollutants from a point source (e.g., a pipe) to surface waters must have a NPDES permit. For CWA, ICISNPDES designates a permit as Effective, Administratively Continued, Expired, Not Needed, Pending, Retired, or Terminated. RCRA facilities (sites) are designated as Active or Inactive. The following provides RCRA site activity status definitions and explains site activity status designation.

        :param facility_status: The facility_status of this Dfr018Permits.
        :type facility_status: str
        """
        if facility_status is None:
            raise ValueError("Invalid value for `facility_status`, must not be `None`")

        self._facility_status = facility_status

    @property
    def facility_street(self):
        """Gets the facility_street of this Dfr018Permits.

        The street address of the facility

        :return: The facility_street of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_street

    @facility_street.setter
    def facility_street(self, facility_street):
        """Sets the facility_street of this Dfr018Permits.

        The street address of the facility

        :param facility_street: The facility_street of this Dfr018Permits.
        :type facility_street: str
        """
        if facility_street is None:
            raise ValueError("Invalid value for `facility_street`, must not be `None`")

        self._facility_street = facility_street

    @property
    def facility_zip(self):
        """Gets the facility_zip of this Dfr018Permits.

        The zip code of the area in which the facility is located

        :return: The facility_zip of this Dfr018Permits.
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this Dfr018Permits.

        The zip code of the area in which the facility is located

        :param facility_zip: The facility_zip of this Dfr018Permits.
        :type facility_zip: str
        """
        if facility_zip is None:
            raise ValueError("Invalid value for `facility_zip`, must not be `None`")

        self._facility_zip = facility_zip

    @property
    def has_bio_rpt(self):
        """Gets the has_bio_rpt of this Dfr018Permits.

        Indicates if the facility has an associated Biosolids Facility Report.

        :return: The has_bio_rpt of this Dfr018Permits.
        :rtype: str
        """
        return self._has_bio_rpt

    @has_bio_rpt.setter
    def has_bio_rpt(self, has_bio_rpt):
        """Sets the has_bio_rpt of this Dfr018Permits.

        Indicates if the facility has an associated Biosolids Facility Report.

        :param has_bio_rpt: The has_bio_rpt of this Dfr018Permits.
        :type has_bio_rpt: str
        """
        if has_bio_rpt is None:
            raise ValueError("Invalid value for `has_bio_rpt`, must not be `None`")

        self._has_bio_rpt = has_bio_rpt

    @property
    def has_icis_sso_rpt(self):
        """Gets the has_icis_sso_rpt of this Dfr018Permits.

        ??

        :return: The has_icis_sso_rpt of this Dfr018Permits.
        :rtype: str
        """
        return self._has_icis_sso_rpt

    @has_icis_sso_rpt.setter
    def has_icis_sso_rpt(self, has_icis_sso_rpt):
        """Sets the has_icis_sso_rpt of this Dfr018Permits.

        ??

        :param has_icis_sso_rpt: The has_icis_sso_rpt of this Dfr018Permits.
        :type has_icis_sso_rpt: str
        """
        if has_icis_sso_rpt is None:
            raise ValueError("Invalid value for `has_icis_sso_rpt`, must not be `None`")

        self._has_icis_sso_rpt = has_icis_sso_rpt

    @property
    def hdatum_desc(self):
        """Gets the hdatum_desc of this Dfr018Permits.

        ??

        :return: The hdatum_desc of this Dfr018Permits.
        :rtype: str
        """
        return self._hdatum_desc

    @hdatum_desc.setter
    def hdatum_desc(self, hdatum_desc):
        """Sets the hdatum_desc of this Dfr018Permits.

        ??

        :param hdatum_desc: The hdatum_desc of this Dfr018Permits.
        :type hdatum_desc: str
        """
        if hdatum_desc is None:
            raise ValueError("Invalid value for `hdatum_desc`, must not be `None`")

        self._hdatum_desc = hdatum_desc

    @property
    def indian_country(self):
        """Gets the indian_country of this Dfr018Permits.

        Indicates whether the facility is located in Indian Country

        :return: The indian_country of this Dfr018Permits.
        :rtype: str
        """
        return self._indian_country

    @indian_country.setter
    def indian_country(self, indian_country):
        """Sets the indian_country of this Dfr018Permits.

        Indicates whether the facility is located in Indian Country

        :param indian_country: The indian_country of this Dfr018Permits.
        :type indian_country: str
        """
        if indian_country is None:
            raise ValueError("Invalid value for `indian_country`, must not be `None`")

        self._indian_country = indian_country

    @property
    def latitude(self):
        """Gets the latitude of this Dfr018Permits.

        The latitude of the facility or permit holder as maintained in each data system.

        :return: The latitude of this Dfr018Permits.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Dfr018Permits.

        The latitude of the facility or permit holder as maintained in each data system.

        :param latitude: The latitude of this Dfr018Permits.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Dfr018Permits.

        The longitude of the facility or permit holder as maintained in each data system

        :return: The longitude of this Dfr018Permits.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Dfr018Permits.

        The longitude of the facility or permit holder as maintained in each data system

        :param longitude: The longitude of this Dfr018Permits.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def naics(self):
        """Gets the naics of this Dfr018Permits.

        The North American Industry Classification System codes

        :return: The naics of this Dfr018Permits.
        :rtype: str
        """
        return self._naics

    @naics.setter
    def naics(self, naics):
        """Sets the naics of this Dfr018Permits.

        The North American Industry Classification System codes

        :param naics: The naics of this Dfr018Permits.
        :type naics: str
        """
        if naics is None:
            raise ValueError("Invalid value for `naics`, must not be `None`")

        self._naics = naics

    @property
    def ref_point_desc(self):
        """Gets the ref_point_desc of this Dfr018Permits.

        ??

        :return: The ref_point_desc of this Dfr018Permits.
        :rtype: str
        """
        return self._ref_point_desc

    @ref_point_desc.setter
    def ref_point_desc(self, ref_point_desc):
        """Sets the ref_point_desc of this Dfr018Permits.

        ??

        :param ref_point_desc: The ref_point_desc of this Dfr018Permits.
        :type ref_point_desc: str
        """
        if ref_point_desc is None:
            raise ValueError("Invalid value for `ref_point_desc`, must not be `None`")

        self._ref_point_desc = ref_point_desc

    @property
    def sic(self):
        """Gets the sic of this Dfr018Permits.

        Standard Industrial Classification codes

        :return: The sic of this Dfr018Permits.
        :rtype: str
        """
        return self._sic

    @sic.setter
    def sic(self, sic):
        """Sets the sic of this Dfr018Permits.

        Standard Industrial Classification codes

        :param sic: The sic of this Dfr018Permits.
        :type sic: str
        """
        if sic is None:
            raise ValueError("Invalid value for `sic`, must not be `None`")

        self._sic = sic

    @property
    def scale(self):
        """Gets the scale of this Dfr018Permits.

        ??

        :return: The scale of this Dfr018Permits.
        :rtype: str
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Dfr018Permits.

        ??

        :param scale: The scale of this Dfr018Permits.
        :type scale: str
        """
        if scale is None:
            raise ValueError("Invalid value for `scale`, must not be `None`")

        self._scale = scale

    @property
    def source_id(self):
        """Gets the source_id of this Dfr018Permits.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr018Permits.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr018Permits.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr018Permits.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Dfr018Permits.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Dfr018Permits.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Dfr018Permits.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Dfr018Permits.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def universe(self):
        """Gets the universe of this Dfr018Permits.

        This field provides further description on type of permit or record for each data system as follows: - For CAA  = The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable sources include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement actions, or included on a Compliance Monitoring Strategy plan. The Clean Air Act requires that delegated agencies and EPA track all federally reportable sources in Air Facility System (AFS). - For CWA  = Each CWA Source ID or National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or Minor discharger. - For RCRA = RCRA Source ID or permits for Treatment, Storage and Disposal facilities are identified by TSD, Large Quantity Generators are identified by LQG. Other values include Permit Workload (PMT), Closure Workload (CLO), Small Quantity Generator Universe (SQG), Conditionally-Exempt Small Quantity Generator (CESQG), Post-Closure Workload (POST CL), and Transporters.

        :return: The universe of this Dfr018Permits.
        :rtype: str
        """
        return self._universe

    @universe.setter
    def universe(self, universe):
        """Sets the universe of this Dfr018Permits.

        This field provides further description on type of permit or record for each data system as follows: - For CAA  = The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable sources include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement actions, or included on a Compliance Monitoring Strategy plan. The Clean Air Act requires that delegated agencies and EPA track all federally reportable sources in Air Facility System (AFS). - For CWA  = Each CWA Source ID or National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or Minor discharger. - For RCRA = RCRA Source ID or permits for Treatment, Storage and Disposal facilities are identified by TSD, Large Quantity Generators are identified by LQG. Other values include Permit Workload (PMT), Closure Workload (CLO), Small Quantity Generator Universe (SQG), Conditionally-Exempt Small Quantity Generator (CESQG), Post-Closure Workload (POST CL), and Transporters.

        :param universe: The universe of this Dfr018Permits.
        :type universe: str
        """
        if universe is None:
            raise ValueError("Invalid value for `universe`, must not be `None`")

        self._universe = universe
