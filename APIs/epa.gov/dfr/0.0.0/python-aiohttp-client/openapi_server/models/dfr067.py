# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr067(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_name: str=None, case_id: str=None, case_name: str=None, case_type: str=None, comp_action_cost: str=None, federal_penalty: str=None, issue_date: str=None, latest_settlement_entered_date: str=None, law_section_code: str=None, lead_agency: str=None, number_settlements: str=None, sep_cost: str=None, settlement_date: str=None, state_local_penalty: str=None, statute_code: str=None, total_cost_recovery: str=None):
        """Dfr067 - a model defined in OpenAPI

        :param activity_name: The activity_name of this Dfr067.
        :param case_id: The case_id of this Dfr067.
        :param case_name: The case_name of this Dfr067.
        :param case_type: The case_type of this Dfr067.
        :param comp_action_cost: The comp_action_cost of this Dfr067.
        :param federal_penalty: The federal_penalty of this Dfr067.
        :param issue_date: The issue_date of this Dfr067.
        :param latest_settlement_entered_date: The latest_settlement_entered_date of this Dfr067.
        :param law_section_code: The law_section_code of this Dfr067.
        :param lead_agency: The lead_agency of this Dfr067.
        :param number_settlements: The number_settlements of this Dfr067.
        :param sep_cost: The sep_cost of this Dfr067.
        :param settlement_date: The settlement_date of this Dfr067.
        :param state_local_penalty: The state_local_penalty of this Dfr067.
        :param statute_code: The statute_code of this Dfr067.
        :param total_cost_recovery: The total_cost_recovery of this Dfr067.
        """
        self.openapi_types = {
            'activity_name': str,
            'case_id': str,
            'case_name': str,
            'case_type': str,
            'comp_action_cost': str,
            'federal_penalty': str,
            'issue_date': str,
            'latest_settlement_entered_date': str,
            'law_section_code': str,
            'lead_agency': str,
            'number_settlements': str,
            'sep_cost': str,
            'settlement_date': str,
            'state_local_penalty': str,
            'statute_code': str,
            'total_cost_recovery': str
        }

        self.attribute_map = {
            'activity_name': 'ActivityName',
            'case_id': 'CaseID',
            'case_name': 'CaseName',
            'case_type': 'CaseType',
            'comp_action_cost': 'CompActionCost',
            'federal_penalty': 'FederalPenalty',
            'issue_date': 'IssueDate',
            'latest_settlement_entered_date': 'LatestSettlementEnteredDate',
            'law_section_code': 'LawSectionCode',
            'lead_agency': 'LeadAgency',
            'number_settlements': 'NumberSettlements',
            'sep_cost': 'SepCost',
            'settlement_date': 'SettlementDate',
            'state_local_penalty': 'StateLocalPenalty',
            'statute_code': 'StatuteCode',
            'total_cost_recovery': 'TotalCostRecovery'
        }

        self._activity_name = activity_name
        self._case_id = case_id
        self._case_name = case_name
        self._case_type = case_type
        self._comp_action_cost = comp_action_cost
        self._federal_penalty = federal_penalty
        self._issue_date = issue_date
        self._latest_settlement_entered_date = latest_settlement_entered_date
        self._law_section_code = law_section_code
        self._lead_agency = lead_agency
        self._number_settlements = number_settlements
        self._sep_cost = sep_cost
        self._settlement_date = settlement_date
        self._state_local_penalty = state_local_penalty
        self._statute_code = statute_code
        self._total_cost_recovery = total_cost_recovery

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr067':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr067 of this Dfr067.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_name(self):
        """Gets the activity_name of this Dfr067.

        The user-created name for an activity.

        :return: The activity_name of this Dfr067.
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this Dfr067.

        The user-created name for an activity.

        :param activity_name: The activity_name of this Dfr067.
        :type activity_name: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")

        self._activity_name = activity_name

    @property
    def case_id(self):
        """Gets the case_id of this Dfr067.

        Air Facility System (AFS) ID.

        :return: The case_id of this Dfr067.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Dfr067.

        Air Facility System (AFS) ID.

        :param case_id: The case_id of this Dfr067.
        :type case_id: str
        """
        if case_id is None:
            raise ValueError("Invalid value for `case_id`, must not be `None`")

        self._case_id = case_id

    @property
    def case_name(self):
        """Gets the case_name of this Dfr067.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :return: The case_name of this Dfr067.
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this Dfr067.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :param case_name: The case_name of this Dfr067.
        :type case_name: str
        """
        if case_name is None:
            raise ValueError("Invalid value for `case_name`, must not be `None`")

        self._case_name = case_name

    @property
    def case_type(self):
        """Gets the case_type of this Dfr067.

        The unique code that identifies a type of compliance event or enforcement action.

        :return: The case_type of this Dfr067.
        :rtype: str
        """
        return self._case_type

    @case_type.setter
    def case_type(self, case_type):
        """Sets the case_type of this Dfr067.

        The unique code that identifies a type of compliance event or enforcement action.

        :param case_type: The case_type of this Dfr067.
        :type case_type: str
        """
        if case_type is None:
            raise ValueError("Invalid value for `case_type`, must not be `None`")

        self._case_type = case_type

    @property
    def comp_action_cost(self):
        """Gets the comp_action_cost of this Dfr067.

        The whole dollar amount of the estimated or actual value of the complying action activities.

        :return: The comp_action_cost of this Dfr067.
        :rtype: str
        """
        return self._comp_action_cost

    @comp_action_cost.setter
    def comp_action_cost(self, comp_action_cost):
        """Sets the comp_action_cost of this Dfr067.

        The whole dollar amount of the estimated or actual value of the complying action activities.

        :param comp_action_cost: The comp_action_cost of this Dfr067.
        :type comp_action_cost: str
        """
        if comp_action_cost is None:
            raise ValueError("Invalid value for `comp_action_cost`, must not be `None`")

        self._comp_action_cost = comp_action_cost

    @property
    def federal_penalty(self):
        """Gets the federal_penalty of this Dfr067.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :return: The federal_penalty of this Dfr067.
        :rtype: str
        """
        return self._federal_penalty

    @federal_penalty.setter
    def federal_penalty(self, federal_penalty):
        """Sets the federal_penalty of this Dfr067.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :param federal_penalty: The federal_penalty of this Dfr067.
        :type federal_penalty: str
        """
        if federal_penalty is None:
            raise ValueError("Invalid value for `federal_penalty`, must not be `None`")

        self._federal_penalty = federal_penalty

    @property
    def issue_date(self):
        """Gets the issue_date of this Dfr067.

        For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.

        :return: The issue_date of this Dfr067.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Dfr067.

        For administrative cases, this field indicates the date that the complaint or Administrative Order (AO) was signed by the appropriate authority and issued to the respondent. For judicial cases, this field indicates the date that the complaint was filed with the Clerk of the Court.

        :param issue_date: The issue_date of this Dfr067.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")

        self._issue_date = issue_date

    @property
    def latest_settlement_entered_date(self):
        """Gets the latest_settlement_entered_date of this Dfr067.

        The date that the final order is signed and issued by the enforcement authority.

        :return: The latest_settlement_entered_date of this Dfr067.
        :rtype: str
        """
        return self._latest_settlement_entered_date

    @latest_settlement_entered_date.setter
    def latest_settlement_entered_date(self, latest_settlement_entered_date):
        """Sets the latest_settlement_entered_date of this Dfr067.

        The date that the final order is signed and issued by the enforcement authority.

        :param latest_settlement_entered_date: The latest_settlement_entered_date of this Dfr067.
        :type latest_settlement_entered_date: str
        """
        if latest_settlement_entered_date is None:
            raise ValueError("Invalid value for `latest_settlement_entered_date`, must not be `None`")

        self._latest_settlement_entered_date = latest_settlement_entered_date

    @property
    def law_section_code(self):
        """Gets the law_section_code of this Dfr067.

        The unique identifier for the Section(s) of law violated and cited in the activity.

        :return: The law_section_code of this Dfr067.
        :rtype: str
        """
        return self._law_section_code

    @law_section_code.setter
    def law_section_code(self, law_section_code):
        """Sets the law_section_code of this Dfr067.

        The unique identifier for the Section(s) of law violated and cited in the activity.

        :param law_section_code: The law_section_code of this Dfr067.
        :type law_section_code: str
        """
        if law_section_code is None:
            raise ValueError("Invalid value for `law_section_code`, must not be `None`")

        self._law_section_code = law_section_code

    @property
    def lead_agency(self):
        """Gets the lead_agency of this Dfr067.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead_agency of this Dfr067.
        :rtype: str
        """
        return self._lead_agency

    @lead_agency.setter
    def lead_agency(self, lead_agency):
        """Sets the lead_agency of this Dfr067.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead_agency: The lead_agency of this Dfr067.
        :type lead_agency: str
        """
        if lead_agency is None:
            raise ValueError("Invalid value for `lead_agency`, must not be `None`")

        self._lead_agency = lead_agency

    @property
    def number_settlements(self):
        """Gets the number_settlements of this Dfr067.

        The number of final orders issued under the enforcement action.

        :return: The number_settlements of this Dfr067.
        :rtype: str
        """
        return self._number_settlements

    @number_settlements.setter
    def number_settlements(self, number_settlements):
        """Sets the number_settlements of this Dfr067.

        The number of final orders issued under the enforcement action.

        :param number_settlements: The number_settlements of this Dfr067.
        :type number_settlements: str
        """
        if number_settlements is None:
            raise ValueError("Invalid value for `number_settlements`, must not be `None`")

        self._number_settlements = number_settlements

    @property
    def sep_cost(self):
        """Gets the sep_cost of this Dfr067.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The sep_cost of this Dfr067.
        :rtype: str
        """
        return self._sep_cost

    @sep_cost.setter
    def sep_cost(self, sep_cost):
        """Sets the sep_cost of this Dfr067.

        The total value of all SEPs for all settlements at the enforcement case.

        :param sep_cost: The sep_cost of this Dfr067.
        :type sep_cost: str
        """
        if sep_cost is None:
            raise ValueError("Invalid value for `sep_cost`, must not be `None`")

        self._sep_cost = sep_cost

    @property
    def settlement_date(self):
        """Gets the settlement_date of this Dfr067.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :return: The settlement_date of this Dfr067.
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this Dfr067.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :param settlement_date: The settlement_date of this Dfr067.
        :type settlement_date: str
        """
        if settlement_date is None:
            raise ValueError("Invalid value for `settlement_date`, must not be `None`")

        self._settlement_date = settlement_date

    @property
    def state_local_penalty(self):
        """Gets the state_local_penalty of this Dfr067.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :return: The state_local_penalty of this Dfr067.
        :rtype: str
        """
        return self._state_local_penalty

    @state_local_penalty.setter
    def state_local_penalty(self, state_local_penalty):
        """Sets the state_local_penalty of this Dfr067.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :param state_local_penalty: The state_local_penalty of this Dfr067.
        :type state_local_penalty: str
        """
        if state_local_penalty is None:
            raise ValueError("Invalid value for `state_local_penalty`, must not be `None`")

        self._state_local_penalty = state_local_penalty

    @property
    def statute_code(self):
        """Gets the statute_code of this Dfr067.

        Air Facility System (AFS) ID.

        :return: The statute_code of this Dfr067.
        :rtype: str
        """
        return self._statute_code

    @statute_code.setter
    def statute_code(self, statute_code):
        """Sets the statute_code of this Dfr067.

        Air Facility System (AFS) ID.

        :param statute_code: The statute_code of this Dfr067.
        :type statute_code: str
        """
        if statute_code is None:
            raise ValueError("Invalid value for `statute_code`, must not be `None`")

        self._statute_code = statute_code

    @property
    def total_cost_recovery(self):
        """Gets the total_cost_recovery of this Dfr067.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :return: The total_cost_recovery of this Dfr067.
        :rtype: str
        """
        return self._total_cost_recovery

    @total_cost_recovery.setter
    def total_cost_recovery(self, total_cost_recovery):
        """Sets the total_cost_recovery of this Dfr067.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :param total_cost_recovery: The total_cost_recovery of this Dfr067.
        :type total_cost_recovery: str
        """
        if total_cost_recovery is None:
            raise ValueError("Invalid value for `total_cost_recovery`, must not be `None`")

        self._total_cost_recovery = total_cost_recovery
