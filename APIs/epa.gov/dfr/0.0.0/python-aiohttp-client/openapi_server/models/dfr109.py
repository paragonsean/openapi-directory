# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr109(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agency: str=None, enforcement_action_type_desc: str=None, enforcement_date: str=None, enforcement_id: str=None, enforcement_type: str=None):
        """Dfr109 - a model defined in OpenAPI

        :param agency: The agency of this Dfr109.
        :param enforcement_action_type_desc: The enforcement_action_type_desc of this Dfr109.
        :param enforcement_date: The enforcement_date of this Dfr109.
        :param enforcement_id: The enforcement_id of this Dfr109.
        :param enforcement_type: The enforcement_type of this Dfr109.
        """
        self.openapi_types = {
            'agency': str,
            'enforcement_action_type_desc': str,
            'enforcement_date': str,
            'enforcement_id': str,
            'enforcement_type': str
        }

        self.attribute_map = {
            'agency': 'Agency',
            'enforcement_action_type_desc': 'EnforcementActionTypeDesc',
            'enforcement_date': 'EnforcementDate',
            'enforcement_id': 'EnforcementId',
            'enforcement_type': 'EnforcementType'
        }

        self._agency = agency
        self._enforcement_action_type_desc = enforcement_action_type_desc
        self._enforcement_date = enforcement_date
        self._enforcement_id = enforcement_id
        self._enforcement_type = enforcement_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr109':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr109 of this Dfr109.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agency(self):
        """Gets the agency of this Dfr109.

        Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"

        :return: The agency of this Dfr109.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Dfr109.

        Identifies the lead agency (e.g., EPA, State) conducting the inspection.  Values: State abbreviation or \"EPA\"

        :param agency: The agency of this Dfr109.
        :type agency: str
        """
        if agency is None:
            raise ValueError("Invalid value for `agency`, must not be `None`")

        self._agency = agency

    @property
    def enforcement_action_type_desc(self):
        """Gets the enforcement_action_type_desc of this Dfr109.

        Text description of type of enforcement action.

        :return: The enforcement_action_type_desc of this Dfr109.
        :rtype: str
        """
        return self._enforcement_action_type_desc

    @enforcement_action_type_desc.setter
    def enforcement_action_type_desc(self, enforcement_action_type_desc):
        """Sets the enforcement_action_type_desc of this Dfr109.

        Text description of type of enforcement action.

        :param enforcement_action_type_desc: The enforcement_action_type_desc of this Dfr109.
        :type enforcement_action_type_desc: str
        """
        if enforcement_action_type_desc is None:
            raise ValueError("Invalid value for `enforcement_action_type_desc`, must not be `None`")

        self._enforcement_action_type_desc = enforcement_action_type_desc

    @property
    def enforcement_date(self):
        """Gets the enforcement_date of this Dfr109.

        Date of Enforcement.

        :return: The enforcement_date of this Dfr109.
        :rtype: str
        """
        return self._enforcement_date

    @enforcement_date.setter
    def enforcement_date(self, enforcement_date):
        """Sets the enforcement_date of this Dfr109.

        Date of Enforcement.

        :param enforcement_date: The enforcement_date of this Dfr109.
        :type enforcement_date: str
        """
        if enforcement_date is None:
            raise ValueError("Invalid value for `enforcement_date`, must not be `None`")

        self._enforcement_date = enforcement_date

    @property
    def enforcement_id(self):
        """Gets the enforcement_id of this Dfr109.

        The internal numerick key identifier used to inuqiely identify enforcement case activities.

        :return: The enforcement_id of this Dfr109.
        :rtype: str
        """
        return self._enforcement_id

    @enforcement_id.setter
    def enforcement_id(self, enforcement_id):
        """Sets the enforcement_id of this Dfr109.

        The internal numerick key identifier used to inuqiely identify enforcement case activities.

        :param enforcement_id: The enforcement_id of this Dfr109.
        :type enforcement_id: str
        """
        if enforcement_id is None:
            raise ValueError("Invalid value for `enforcement_id`, must not be `None`")

        self._enforcement_id = enforcement_id

    @property
    def enforcement_type(self):
        """Gets the enforcement_type of this Dfr109.

        A text description of the Enforcement Action type.

        :return: The enforcement_type of this Dfr109.
        :rtype: str
        """
        return self._enforcement_type

    @enforcement_type.setter
    def enforcement_type(self, enforcement_type):
        """Sets the enforcement_type of this Dfr109.

        A text description of the Enforcement Action type.

        :param enforcement_type: The enforcement_type of this Dfr109.
        :type enforcement_type: str
        """
        if enforcement_type is None:
            raise ValueError("Invalid value for `enforcement_type`, must not be `None`")

        self._enforcement_type = enforcement_type
