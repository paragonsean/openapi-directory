# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr084 import Dfr084
from openapi_server import util


class Dfr130Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, sic: Dfr084=None):
        """Dfr130Results - a model defined in OpenAPI

        :param message: The message of this Dfr130Results.
        :param sic: The sic of this Dfr130Results.
        """
        self.openapi_types = {
            'message': str,
            'sic': Dfr084
        }

        self.attribute_map = {
            'message': 'Message',
            'sic': 'SIC'
        }

        self._message = message
        self._sic = sic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr130Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr130_Results of this Dfr130Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Dfr130Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr130Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr130Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr130Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sic(self):
        """Gets the sic of this Dfr130Results.


        :return: The sic of this Dfr130Results.
        :rtype: Dfr084
        """
        return self._sic

    @sic.setter
    def sic(self, sic):
        """Sets the sic of this Dfr130Results.


        :param sic: The sic of this Dfr130Results.
        :type sic: Dfr084
        """

        self._sic = sic
