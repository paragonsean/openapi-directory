# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr109 import Dfr109
from openapi_server import util


class Dfr110(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance_period_begin_date: str=None, compliance_period_end_date: str=None, contaminant_name: str=None, enforcement_actions: List[Dfr109]=None, federal_mcl: str=None, federal_rule: str=None, resolved_date: str=None, source_id: str=None, state_mcl: str=None, status: str=None, violation_category_code: str=None, violation_category_desc: str=None, violation_id: str=None, violation_measure: str=None):
        """Dfr110 - a model defined in OpenAPI

        :param compliance_period_begin_date: The compliance_period_begin_date of this Dfr110.
        :param compliance_period_end_date: The compliance_period_end_date of this Dfr110.
        :param contaminant_name: The contaminant_name of this Dfr110.
        :param enforcement_actions: The enforcement_actions of this Dfr110.
        :param federal_mcl: The federal_mcl of this Dfr110.
        :param federal_rule: The federal_rule of this Dfr110.
        :param resolved_date: The resolved_date of this Dfr110.
        :param source_id: The source_id of this Dfr110.
        :param state_mcl: The state_mcl of this Dfr110.
        :param status: The status of this Dfr110.
        :param violation_category_code: The violation_category_code of this Dfr110.
        :param violation_category_desc: The violation_category_desc of this Dfr110.
        :param violation_id: The violation_id of this Dfr110.
        :param violation_measure: The violation_measure of this Dfr110.
        """
        self.openapi_types = {
            'compliance_period_begin_date': str,
            'compliance_period_end_date': str,
            'contaminant_name': str,
            'enforcement_actions': List[Dfr109],
            'federal_mcl': str,
            'federal_rule': str,
            'resolved_date': str,
            'source_id': str,
            'state_mcl': str,
            'status': str,
            'violation_category_code': str,
            'violation_category_desc': str,
            'violation_id': str,
            'violation_measure': str
        }

        self.attribute_map = {
            'compliance_period_begin_date': 'CompliancePeriodBeginDate',
            'compliance_period_end_date': 'CompliancePeriodEndDate',
            'contaminant_name': 'ContaminantName',
            'enforcement_actions': 'EnforcementActions',
            'federal_mcl': 'FederalMCL',
            'federal_rule': 'FederalRule',
            'resolved_date': 'ResolvedDate',
            'source_id': 'SourceID',
            'state_mcl': 'StateMCL',
            'status': 'Status',
            'violation_category_code': 'ViolationCategoryCode',
            'violation_category_desc': 'ViolationCategoryDesc',
            'violation_id': 'ViolationID',
            'violation_measure': 'ViolationMeasure'
        }

        self._compliance_period_begin_date = compliance_period_begin_date
        self._compliance_period_end_date = compliance_period_end_date
        self._contaminant_name = contaminant_name
        self._enforcement_actions = enforcement_actions
        self._federal_mcl = federal_mcl
        self._federal_rule = federal_rule
        self._resolved_date = resolved_date
        self._source_id = source_id
        self._state_mcl = state_mcl
        self._status = status
        self._violation_category_code = violation_category_code
        self._violation_category_desc = violation_category_desc
        self._violation_id = violation_id
        self._violation_measure = violation_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr110':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr110 of this Dfr110.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance_period_begin_date(self):
        """Gets the compliance_period_begin_date of this Dfr110.

        The beginning date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.

        :return: The compliance_period_begin_date of this Dfr110.
        :rtype: str
        """
        return self._compliance_period_begin_date

    @compliance_period_begin_date.setter
    def compliance_period_begin_date(self, compliance_period_begin_date):
        """Sets the compliance_period_begin_date of this Dfr110.

        The beginning date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.

        :param compliance_period_begin_date: The compliance_period_begin_date of this Dfr110.
        :type compliance_period_begin_date: str
        """
        if compliance_period_begin_date is None:
            raise ValueError("Invalid value for `compliance_period_begin_date`, must not be `None`")

        self._compliance_period_begin_date = compliance_period_begin_date

    @property
    def compliance_period_end_date(self):
        """Gets the compliance_period_end_date of this Dfr110.

        The end date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.

        :return: The compliance_period_end_date of this Dfr110.
        :rtype: str
        """
        return self._compliance_period_end_date

    @compliance_period_end_date.setter
    def compliance_period_end_date(self, compliance_period_end_date):
        """Sets the compliance_period_end_date of this Dfr110.

        The end date of the time period during which a violation took place. For some violations this period corresponds to a regular water quality monitoring period, such as a month or quarter; in other cases it may initially be open-ended, and remain that way until the violation is resolved, i.e. until EPA or the state files a resolving enforcement action to indicate that either the system has returned to compliance or no further action is necessary.

        :param compliance_period_end_date: The compliance_period_end_date of this Dfr110.
        :type compliance_period_end_date: str
        """
        if compliance_period_end_date is None:
            raise ValueError("Invalid value for `compliance_period_end_date`, must not be `None`")

        self._compliance_period_end_date = compliance_period_end_date

    @property
    def contaminant_name(self):
        """Gets the contaminant_name of this Dfr110.

        City

        :return: The contaminant_name of this Dfr110.
        :rtype: str
        """
        return self._contaminant_name

    @contaminant_name.setter
    def contaminant_name(self, contaminant_name):
        """Sets the contaminant_name of this Dfr110.

        City

        :param contaminant_name: The contaminant_name of this Dfr110.
        :type contaminant_name: str
        """
        if contaminant_name is None:
            raise ValueError("Invalid value for `contaminant_name`, must not be `None`")

        self._contaminant_name = contaminant_name

    @property
    def enforcement_actions(self):
        """Gets the enforcement_actions of this Dfr110.


        :return: The enforcement_actions of this Dfr110.
        :rtype: List[Dfr109]
        """
        return self._enforcement_actions

    @enforcement_actions.setter
    def enforcement_actions(self, enforcement_actions):
        """Sets the enforcement_actions of this Dfr110.


        :param enforcement_actions: The enforcement_actions of this Dfr110.
        :type enforcement_actions: List[Dfr109]
        """
        if enforcement_actions is None:
            raise ValueError("Invalid value for `enforcement_actions`, must not be `None`")

        self._enforcement_actions = enforcement_actions

    @property
    def federal_mcl(self):
        """Gets the federal_mcl of this Dfr110.

        Maximum contaminant levels (MCLs) or maximum residual disinfectant levels (MRDLs), which specify the highest concentrations of contaminants or disinfectants, respectively, allowed in drinking water; or of treatment technique (TT) rules, which specify required processes intended to reduce the amounts of contaminants in drinking water.

        :return: The federal_mcl of this Dfr110.
        :rtype: str
        """
        return self._federal_mcl

    @federal_mcl.setter
    def federal_mcl(self, federal_mcl):
        """Sets the federal_mcl of this Dfr110.

        Maximum contaminant levels (MCLs) or maximum residual disinfectant levels (MRDLs), which specify the highest concentrations of contaminants or disinfectants, respectively, allowed in drinking water; or of treatment technique (TT) rules, which specify required processes intended to reduce the amounts of contaminants in drinking water.

        :param federal_mcl: The federal_mcl of this Dfr110.
        :type federal_mcl: str
        """
        if federal_mcl is None:
            raise ValueError("Invalid value for `federal_mcl`, must not be `None`")

        self._federal_mcl = federal_mcl

    @property
    def federal_rule(self):
        """Gets the federal_rule of this Dfr110.

        ???

        :return: The federal_rule of this Dfr110.
        :rtype: str
        """
        return self._federal_rule

    @federal_rule.setter
    def federal_rule(self, federal_rule):
        """Sets the federal_rule of this Dfr110.

        ???

        :param federal_rule: The federal_rule of this Dfr110.
        :type federal_rule: str
        """
        if federal_rule is None:
            raise ValueError("Invalid value for `federal_rule`, must not be `None`")

        self._federal_rule = federal_rule

    @property
    def resolved_date(self):
        """Gets the resolved_date of this Dfr110.

        The resolved date of the drinking water violation (MM/DD/YYYY)

        :return: The resolved_date of this Dfr110.
        :rtype: str
        """
        return self._resolved_date

    @resolved_date.setter
    def resolved_date(self, resolved_date):
        """Sets the resolved_date of this Dfr110.

        The resolved date of the drinking water violation (MM/DD/YYYY)

        :param resolved_date: The resolved_date of this Dfr110.
        :type resolved_date: str
        """
        if resolved_date is None:
            raise ValueError("Invalid value for `resolved_date`, must not be `None`")

        self._resolved_date = resolved_date

    @property
    def source_id(self):
        """Gets the source_id of this Dfr110.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr110.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr110.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr110.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def state_mcl(self):
        """Gets the state_mcl of this Dfr110.

        County

        :return: The state_mcl of this Dfr110.
        :rtype: str
        """
        return self._state_mcl

    @state_mcl.setter
    def state_mcl(self, state_mcl):
        """Sets the state_mcl of this Dfr110.

        County

        :param state_mcl: The state_mcl of this Dfr110.
        :type state_mcl: str
        """
        if state_mcl is None:
            raise ValueError("Invalid value for `state_mcl`, must not be `None`")

        self._state_mcl = state_mcl

    @property
    def status(self):
        """Gets the status of this Dfr110.

        Describes the status of the drinking water violation. Violation statuses include: - Resolved: The violation has at least one resolving enforcement action. In SDWIS, this indicates that either the system has returned to compliance from the violation, the rule that was violated was no longer applicable, or no further action was needed. - Archived: The violation is not Resolved, but is more than five years past its compliance period end date. In keeping with the Enforcement Response Policy, the violation no longer contributes to the public water system's overall compliance status. Unresolved violations are also marked as Archived when a system ceases operations (becomes inactive). - Addressed: The violation is not Resolved or Archived, and is addressed by one or more formal enforcement actions. - Unaddressed: The violation is not Resolved or Archived, and has not been addressed by formal enforcement.

        :return: The status of this Dfr110.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dfr110.

        Describes the status of the drinking water violation. Violation statuses include: - Resolved: The violation has at least one resolving enforcement action. In SDWIS, this indicates that either the system has returned to compliance from the violation, the rule that was violated was no longer applicable, or no further action was needed. - Archived: The violation is not Resolved, but is more than five years past its compliance period end date. In keeping with the Enforcement Response Policy, the violation no longer contributes to the public water system's overall compliance status. Unresolved violations are also marked as Archived when a system ceases operations (becomes inactive). - Addressed: The violation is not Resolved or Archived, and is addressed by one or more formal enforcement actions. - Unaddressed: The violation is not Resolved or Archived, and has not been addressed by formal enforcement.

        :param status: The status of this Dfr110.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def violation_category_code(self):
        """Gets the violation_category_code of this Dfr110.

        Categories of violations that may be reported

        :return: The violation_category_code of this Dfr110.
        :rtype: str
        """
        return self._violation_category_code

    @violation_category_code.setter
    def violation_category_code(self, violation_category_code):
        """Sets the violation_category_code of this Dfr110.

        Categories of violations that may be reported

        :param violation_category_code: The violation_category_code of this Dfr110.
        :type violation_category_code: str
        """
        if violation_category_code is None:
            raise ValueError("Invalid value for `violation_category_code`, must not be `None`")

        self._violation_category_code = violation_category_code

    @property
    def violation_category_desc(self):
        """Gets the violation_category_desc of this Dfr110.

        A description of the violation category.

        :return: The violation_category_desc of this Dfr110.
        :rtype: str
        """
        return self._violation_category_desc

    @violation_category_desc.setter
    def violation_category_desc(self, violation_category_desc):
        """Sets the violation_category_desc of this Dfr110.

        A description of the violation category.

        :param violation_category_desc: The violation_category_desc of this Dfr110.
        :type violation_category_desc: str
        """
        if violation_category_desc is None:
            raise ValueError("Invalid value for `violation_category_desc`, must not be `None`")

        self._violation_category_desc = violation_category_desc

    @property
    def violation_id(self):
        """Gets the violation_id of this Dfr110.

        An identifer from SDWA that uniquely identifies the violation.

        :return: The violation_id of this Dfr110.
        :rtype: str
        """
        return self._violation_id

    @violation_id.setter
    def violation_id(self, violation_id):
        """Sets the violation_id of this Dfr110.

        An identifer from SDWA that uniquely identifies the violation.

        :param violation_id: The violation_id of this Dfr110.
        :type violation_id: str
        """
        if violation_id is None:
            raise ValueError("Invalid value for `violation_id`, must not be `None`")

        self._violation_id = violation_id

    @property
    def violation_measure(self):
        """Gets the violation_measure of this Dfr110.

        A numeric value that represents the analytical result of a contaminant that exceeded the Maximum Contaminant Level (MCL) for that contaminant.

        :return: The violation_measure of this Dfr110.
        :rtype: str
        """
        return self._violation_measure

    @violation_measure.setter
    def violation_measure(self, violation_measure):
        """Sets the violation_measure of this Dfr110.

        A numeric value that represents the analytical result of a contaminant that exceeded the Maximum Contaminant Level (MCL) for that contaminant.

        :param violation_measure: The violation_measure of this Dfr110.
        :type violation_measure: str
        """
        if violation_measure is None:
            raise ValueError("Invalid value for `violation_measure`, must not be `None`")

        self._violation_measure = violation_measure
