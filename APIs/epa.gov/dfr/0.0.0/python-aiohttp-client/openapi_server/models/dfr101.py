# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr101(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, off_site_transfers_potws: str=None, releases_to_land: str=None, source_id: str=None, surface_water_discharges: str=None, total_air_emissions: str=None, total_off_site_releases: str=None, total_on_site_releases: str=None, total_releases_transfers: str=None, underground_injections: str=None, year: str=None):
        """Dfr101 - a model defined in OpenAPI

        :param off_site_transfers_potws: The off_site_transfers_potws of this Dfr101.
        :param releases_to_land: The releases_to_land of this Dfr101.
        :param source_id: The source_id of this Dfr101.
        :param surface_water_discharges: The surface_water_discharges of this Dfr101.
        :param total_air_emissions: The total_air_emissions of this Dfr101.
        :param total_off_site_releases: The total_off_site_releases of this Dfr101.
        :param total_on_site_releases: The total_on_site_releases of this Dfr101.
        :param total_releases_transfers: The total_releases_transfers of this Dfr101.
        :param underground_injections: The underground_injections of this Dfr101.
        :param year: The year of this Dfr101.
        """
        self.openapi_types = {
            'off_site_transfers_potws': str,
            'releases_to_land': str,
            'source_id': str,
            'surface_water_discharges': str,
            'total_air_emissions': str,
            'total_off_site_releases': str,
            'total_on_site_releases': str,
            'total_releases_transfers': str,
            'underground_injections': str,
            'year': str
        }

        self.attribute_map = {
            'off_site_transfers_potws': 'OffSiteTransfersPOTWS',
            'releases_to_land': 'ReleasesToLand',
            'source_id': 'SourceID',
            'surface_water_discharges': 'SurfaceWaterDischarges',
            'total_air_emissions': 'TotalAirEmissions',
            'total_off_site_releases': 'TotalOffSiteReleases',
            'total_on_site_releases': 'TotalOnSiteReleases',
            'total_releases_transfers': 'TotalReleasesTransfers',
            'underground_injections': 'UndergroundInjections',
            'year': 'Year'
        }

        self._off_site_transfers_potws = off_site_transfers_potws
        self._releases_to_land = releases_to_land
        self._source_id = source_id
        self._surface_water_discharges = surface_water_discharges
        self._total_air_emissions = total_air_emissions
        self._total_off_site_releases = total_off_site_releases
        self._total_on_site_releases = total_on_site_releases
        self._total_releases_transfers = total_releases_transfers
        self._underground_injections = underground_injections
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr101':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr101 of this Dfr101.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def off_site_transfers_potws(self):
        """Gets the off_site_transfers_potws of this Dfr101.

        The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs).

        :return: The off_site_transfers_potws of this Dfr101.
        :rtype: str
        """
        return self._off_site_transfers_potws

    @off_site_transfers_potws.setter
    def off_site_transfers_potws(self, off_site_transfers_potws):
        """Sets the off_site_transfers_potws of this Dfr101.

        The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs).

        :param off_site_transfers_potws: The off_site_transfers_potws of this Dfr101.
        :type off_site_transfers_potws: str
        """
        if off_site_transfers_potws is None:
            raise ValueError("Invalid value for `off_site_transfers_potws`, must not be `None`")

        self._off_site_transfers_potws = off_site_transfers_potws

    @property
    def releases_to_land(self):
        """Gets the releases_to_land of this Dfr101.

        Total releases to land on-site (includes landfills), in pounds per year.

        :return: The releases_to_land of this Dfr101.
        :rtype: str
        """
        return self._releases_to_land

    @releases_to_land.setter
    def releases_to_land(self, releases_to_land):
        """Sets the releases_to_land of this Dfr101.

        Total releases to land on-site (includes landfills), in pounds per year.

        :param releases_to_land: The releases_to_land of this Dfr101.
        :type releases_to_land: str
        """
        if releases_to_land is None:
            raise ValueError("Invalid value for `releases_to_land`, must not be `None`")

        self._releases_to_land = releases_to_land

    @property
    def source_id(self):
        """Gets the source_id of this Dfr101.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Dfr101.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Dfr101.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Dfr101.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def surface_water_discharges(self):
        """Gets the surface_water_discharges of this Dfr101.

        The total direct discharges to receiving streams or water bodies, in pounds per year.

        :return: The surface_water_discharges of this Dfr101.
        :rtype: str
        """
        return self._surface_water_discharges

    @surface_water_discharges.setter
    def surface_water_discharges(self, surface_water_discharges):
        """Sets the surface_water_discharges of this Dfr101.

        The total direct discharges to receiving streams or water bodies, in pounds per year.

        :param surface_water_discharges: The surface_water_discharges of this Dfr101.
        :type surface_water_discharges: str
        """
        if surface_water_discharges is None:
            raise ValueError("Invalid value for `surface_water_discharges`, must not be `None`")

        self._surface_water_discharges = surface_water_discharges

    @property
    def total_air_emissions(self):
        """Gets the total_air_emissions of this Dfr101.

        The total fugitive (non-point air emissions) and stack or point air emissions, in pounds per year.

        :return: The total_air_emissions of this Dfr101.
        :rtype: str
        """
        return self._total_air_emissions

    @total_air_emissions.setter
    def total_air_emissions(self, total_air_emissions):
        """Sets the total_air_emissions of this Dfr101.

        The total fugitive (non-point air emissions) and stack or point air emissions, in pounds per year.

        :param total_air_emissions: The total_air_emissions of this Dfr101.
        :type total_air_emissions: str
        """
        if total_air_emissions is None:
            raise ValueError("Invalid value for `total_air_emissions`, must not be `None`")

        self._total_air_emissions = total_air_emissions

    @property
    def total_off_site_releases(self):
        """Gets the total_off_site_releases of this Dfr101.

        The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs) and other off-site locations.

        :return: The total_off_site_releases of this Dfr101.
        :rtype: str
        """
        return self._total_off_site_releases

    @total_off_site_releases.setter
    def total_off_site_releases(self, total_off_site_releases):
        """Sets the total_off_site_releases of this Dfr101.

        The total amount, in pounds per year, transferred off site to Publicly Owned Treatment Works (POTWs) and other off-site locations.

        :param total_off_site_releases: The total_off_site_releases of this Dfr101.
        :type total_off_site_releases: str
        """
        if total_off_site_releases is None:
            raise ValueError("Invalid value for `total_off_site_releases`, must not be `None`")

        self._total_off_site_releases = total_off_site_releases

    @property
    def total_on_site_releases(self):
        """Gets the total_on_site_releases of this Dfr101.

        Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.

        :return: The total_on_site_releases of this Dfr101.
        :rtype: str
        """
        return self._total_on_site_releases

    @total_on_site_releases.setter
    def total_on_site_releases(self, total_on_site_releases):
        """Sets the total_on_site_releases of this Dfr101.

        Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.

        :param total_on_site_releases: The total_on_site_releases of this Dfr101.
        :type total_on_site_releases: str
        """
        if total_on_site_releases is None:
            raise ValueError("Invalid value for `total_on_site_releases`, must not be `None`")

        self._total_on_site_releases = total_on_site_releases

    @property
    def total_releases_transfers(self):
        """Gets the total_releases_transfers of this Dfr101.

        Grand total for Air Emissions, Surface Water Discharges, Underground Injections, Releases to Land, On-Site Releases and Off-Site Transfers in pounds per year for all types of chemicals.

        :return: The total_releases_transfers of this Dfr101.
        :rtype: str
        """
        return self._total_releases_transfers

    @total_releases_transfers.setter
    def total_releases_transfers(self, total_releases_transfers):
        """Sets the total_releases_transfers of this Dfr101.

        Grand total for Air Emissions, Surface Water Discharges, Underground Injections, Releases to Land, On-Site Releases and Off-Site Transfers in pounds per year for all types of chemicals.

        :param total_releases_transfers: The total_releases_transfers of this Dfr101.
        :type total_releases_transfers: str
        """
        if total_releases_transfers is None:
            raise ValueError("Invalid value for `total_releases_transfers`, must not be `None`")

        self._total_releases_transfers = total_releases_transfers

    @property
    def underground_injections(self):
        """Gets the underground_injections of this Dfr101.

        The total underground injections to wells on-site, in pounds per year.

        :return: The underground_injections of this Dfr101.
        :rtype: str
        """
        return self._underground_injections

    @underground_injections.setter
    def underground_injections(self, underground_injections):
        """Sets the underground_injections of this Dfr101.

        The total underground injections to wells on-site, in pounds per year.

        :param underground_injections: The underground_injections of this Dfr101.
        :type underground_injections: str
        """
        if underground_injections is None:
            raise ValueError("Invalid value for `underground_injections`, must not be `None`")

        self._underground_injections = underground_injections

    @property
    def year(self):
        """Gets the year of this Dfr101.

        The calendar year of a time dimension (reporting table) record.

        :return: The year of this Dfr101.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Dfr101.

        The calendar year of a time dimension (reporting table) record.

        :param year: The year of this Dfr101.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
