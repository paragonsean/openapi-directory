# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr045 import Dfr045
from openapi_server import util


class Dfr043(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, violations: List[Dfr045]=None):
        """Dfr043 - a model defined in OpenAPI

        :param violations: The violations of this Dfr043.
        """
        self.openapi_types = {
            'violations': List[Dfr045]
        }

        self.attribute_map = {
            'violations': 'Violations'
        }

        self._violations = violations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr043':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr043 of this Dfr043.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def violations(self):
        """Gets the violations of this Dfr043.


        :return: The violations of this Dfr043.
        :rtype: List[Dfr045]
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this Dfr043.


        :param violations: The violations of this Dfr043.
        :type violations: List[Dfr045]
        """
        if violations is None:
            raise ValueError("Invalid value for `violations`, must not be `None`")

        self._violations = violations
