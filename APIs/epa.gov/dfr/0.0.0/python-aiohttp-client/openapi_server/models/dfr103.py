# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dfr103(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chemical_name: str=None, year1_pounds: str=None, year2_pounds: str=None, year3_pounds: str=None, year4_pounds: str=None, year5_pounds: str=None, year6_pounds: str=None, year7_pounds: str=None, year8_pounds: str=None, year9_pounds: str=None):
        """Dfr103 - a model defined in OpenAPI

        :param chemical_name: The chemical_name of this Dfr103.
        :param year1_pounds: The year1_pounds of this Dfr103.
        :param year2_pounds: The year2_pounds of this Dfr103.
        :param year3_pounds: The year3_pounds of this Dfr103.
        :param year4_pounds: The year4_pounds of this Dfr103.
        :param year5_pounds: The year5_pounds of this Dfr103.
        :param year6_pounds: The year6_pounds of this Dfr103.
        :param year7_pounds: The year7_pounds of this Dfr103.
        :param year8_pounds: The year8_pounds of this Dfr103.
        :param year9_pounds: The year9_pounds of this Dfr103.
        """
        self.openapi_types = {
            'chemical_name': str,
            'year1_pounds': str,
            'year2_pounds': str,
            'year3_pounds': str,
            'year4_pounds': str,
            'year5_pounds': str,
            'year6_pounds': str,
            'year7_pounds': str,
            'year8_pounds': str,
            'year9_pounds': str
        }

        self.attribute_map = {
            'chemical_name': 'ChemicalName',
            'year1_pounds': 'Year1Pounds',
            'year2_pounds': 'Year2Pounds',
            'year3_pounds': 'Year3Pounds',
            'year4_pounds': 'Year4Pounds',
            'year5_pounds': 'Year5Pounds',
            'year6_pounds': 'Year6Pounds',
            'year7_pounds': 'Year7Pounds',
            'year8_pounds': 'Year8Pounds',
            'year9_pounds': 'Year9Pounds'
        }

        self._chemical_name = chemical_name
        self._year1_pounds = year1_pounds
        self._year2_pounds = year2_pounds
        self._year3_pounds = year3_pounds
        self._year4_pounds = year4_pounds
        self._year5_pounds = year5_pounds
        self._year6_pounds = year6_pounds
        self._year7_pounds = year7_pounds
        self._year8_pounds = year8_pounds
        self._year9_pounds = year9_pounds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr103':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr103 of this Dfr103.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chemical_name(self):
        """Gets the chemical_name of this Dfr103.

        The TRI chemical to which the data in this row applies.

        :return: The chemical_name of this Dfr103.
        :rtype: str
        """
        return self._chemical_name

    @chemical_name.setter
    def chemical_name(self, chemical_name):
        """Sets the chemical_name of this Dfr103.

        The TRI chemical to which the data in this row applies.

        :param chemical_name: The chemical_name of this Dfr103.
        :type chemical_name: str
        """
        if chemical_name is None:
            raise ValueError("Invalid value for `chemical_name`, must not be `None`")

        self._chemical_name = chemical_name

    @property
    def year1_pounds(self):
        """Gets the year1_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year1_pounds of this Dfr103.
        :rtype: str
        """
        return self._year1_pounds

    @year1_pounds.setter
    def year1_pounds(self, year1_pounds):
        """Sets the year1_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year1_pounds: The year1_pounds of this Dfr103.
        :type year1_pounds: str
        """
        if year1_pounds is None:
            raise ValueError("Invalid value for `year1_pounds`, must not be `None`")

        self._year1_pounds = year1_pounds

    @property
    def year2_pounds(self):
        """Gets the year2_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year2_pounds of this Dfr103.
        :rtype: str
        """
        return self._year2_pounds

    @year2_pounds.setter
    def year2_pounds(self, year2_pounds):
        """Sets the year2_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year2_pounds: The year2_pounds of this Dfr103.
        :type year2_pounds: str
        """
        if year2_pounds is None:
            raise ValueError("Invalid value for `year2_pounds`, must not be `None`")

        self._year2_pounds = year2_pounds

    @property
    def year3_pounds(self):
        """Gets the year3_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year3_pounds of this Dfr103.
        :rtype: str
        """
        return self._year3_pounds

    @year3_pounds.setter
    def year3_pounds(self, year3_pounds):
        """Sets the year3_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year3_pounds: The year3_pounds of this Dfr103.
        :type year3_pounds: str
        """
        if year3_pounds is None:
            raise ValueError("Invalid value for `year3_pounds`, must not be `None`")

        self._year3_pounds = year3_pounds

    @property
    def year4_pounds(self):
        """Gets the year4_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year4_pounds of this Dfr103.
        :rtype: str
        """
        return self._year4_pounds

    @year4_pounds.setter
    def year4_pounds(self, year4_pounds):
        """Sets the year4_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year4_pounds: The year4_pounds of this Dfr103.
        :type year4_pounds: str
        """
        if year4_pounds is None:
            raise ValueError("Invalid value for `year4_pounds`, must not be `None`")

        self._year4_pounds = year4_pounds

    @property
    def year5_pounds(self):
        """Gets the year5_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year5_pounds of this Dfr103.
        :rtype: str
        """
        return self._year5_pounds

    @year5_pounds.setter
    def year5_pounds(self, year5_pounds):
        """Sets the year5_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year5_pounds: The year5_pounds of this Dfr103.
        :type year5_pounds: str
        """
        if year5_pounds is None:
            raise ValueError("Invalid value for `year5_pounds`, must not be `None`")

        self._year5_pounds = year5_pounds

    @property
    def year6_pounds(self):
        """Gets the year6_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year6_pounds of this Dfr103.
        :rtype: str
        """
        return self._year6_pounds

    @year6_pounds.setter
    def year6_pounds(self, year6_pounds):
        """Sets the year6_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year6_pounds: The year6_pounds of this Dfr103.
        :type year6_pounds: str
        """
        if year6_pounds is None:
            raise ValueError("Invalid value for `year6_pounds`, must not be `None`")

        self._year6_pounds = year6_pounds

    @property
    def year7_pounds(self):
        """Gets the year7_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year7_pounds of this Dfr103.
        :rtype: str
        """
        return self._year7_pounds

    @year7_pounds.setter
    def year7_pounds(self, year7_pounds):
        """Sets the year7_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year7_pounds: The year7_pounds of this Dfr103.
        :type year7_pounds: str
        """
        if year7_pounds is None:
            raise ValueError("Invalid value for `year7_pounds`, must not be `None`")

        self._year7_pounds = year7_pounds

    @property
    def year8_pounds(self):
        """Gets the year8_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year8_pounds of this Dfr103.
        :rtype: str
        """
        return self._year8_pounds

    @year8_pounds.setter
    def year8_pounds(self, year8_pounds):
        """Sets the year8_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year8_pounds: The year8_pounds of this Dfr103.
        :type year8_pounds: str
        """
        if year8_pounds is None:
            raise ValueError("Invalid value for `year8_pounds`, must not be `None`")

        self._year8_pounds = year8_pounds

    @property
    def year9_pounds(self):
        """Gets the year9_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :return: The year9_pounds of this Dfr103.
        :rtype: str
        """
        return self._year9_pounds

    @year9_pounds.setter
    def year9_pounds(self, year9_pounds):
        """Sets the year9_pounds of this Dfr103.

        The total pounds either released to air, discharged to surface water, injected underground, landfilled on-site, or transferred off-site for disposal or to a POTW.

        :param year9_pounds: The year9_pounds of this Dfr103.
        :type year9_pounds: str
        """
        if year9_pounds is None:
            raise ValueError("Invalid value for `year9_pounds`, must not be `None`")

        self._year9_pounds = year9_pounds
