# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dfr018_permits import Dfr018Permits
from openapi_server.models.dfr018_reports import Dfr018Reports
from openapi_server import util


class Dfr123Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, permits: List[Dfr018Permits]=None, reports: Dfr018Reports=None):
        """Dfr123Results - a model defined in OpenAPI

        :param message: The message of this Dfr123Results.
        :param permits: The permits of this Dfr123Results.
        :param reports: The reports of this Dfr123Results.
        """
        self.openapi_types = {
            'message': str,
            'permits': List[Dfr018Permits],
            'reports': Dfr018Reports
        }

        self.attribute_map = {
            'message': 'Message',
            'permits': 'Permits',
            'reports': 'Reports'
        }

        self._message = message
        self._permits = permits
        self._reports = reports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dfr123Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dfr123_Results of this Dfr123Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Dfr123Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Dfr123Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Dfr123Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Dfr123Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def permits(self):
        """Gets the permits of this Dfr123Results.


        :return: The permits of this Dfr123Results.
        :rtype: List[Dfr018Permits]
        """
        return self._permits

    @permits.setter
    def permits(self, permits):
        """Sets the permits of this Dfr123Results.


        :param permits: The permits of this Dfr123Results.
        :type permits: List[Dfr018Permits]
        """

        self._permits = permits

    @property
    def reports(self):
        """Gets the reports of this Dfr123Results.


        :return: The reports of this Dfr123Results.
        :rtype: Dfr018Reports
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this Dfr123Results.


        :param reports: The reports of this Dfr123Results.
        :type reports: Dfr018Reports
        """

        self._reports = reports
