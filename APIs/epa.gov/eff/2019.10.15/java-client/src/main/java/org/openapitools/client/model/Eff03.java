/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Eff01;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff03 {
  public static final String SERIALIZED_NAME_DISCHARGE_MONITORING_REPORTS = "DischargeMonitoringReports";
  @SerializedName(SERIALIZED_NAME_DISCHARGE_MONITORING_REPORTS)
  private List<Eff01> dischargeMonitoringReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORING_LOCATION_CODE = "MonitoringLocationCode";
  @SerializedName(SERIALIZED_NAME_MONITORING_LOCATION_CODE)
  private String monitoringLocationCode;

  public static final String SERIALIZED_NAME_MONITORING_LOCATION_DESC = "MonitoringLocationDesc";
  @SerializedName(SERIALIZED_NAME_MONITORING_LOCATION_DESC)
  private String monitoringLocationDesc;

  public static final String SERIALIZED_NAME_PARAMETER_CODE = "ParameterCode";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CODE)
  private String parameterCode;

  public static final String SERIALIZED_NAME_PARAMETER_DESC = "ParameterDesc";
  @SerializedName(SERIALIZED_NAME_PARAMETER_DESC)
  private String parameterDesc;

  public static final String SERIALIZED_NAME_STAY_TYPE_CODE = "StayTypeCode";
  @SerializedName(SERIALIZED_NAME_STAY_TYPE_CODE)
  private String stayTypeCode;

  public static final String SERIALIZED_NAME_STAY_TYPE_DESC = "StayTypeDesc";
  @SerializedName(SERIALIZED_NAME_STAY_TYPE_DESC)
  private String stayTypeDesc;

  public Eff03() {
  }

  public Eff03 dischargeMonitoringReports(List<Eff01> dischargeMonitoringReports) {
    this.dischargeMonitoringReports = dischargeMonitoringReports;
    return this;
  }

  public Eff03 addDischargeMonitoringReportsItem(Eff01 dischargeMonitoringReportsItem) {
    if (this.dischargeMonitoringReports == null) {
      this.dischargeMonitoringReports = new ArrayList<>();
    }
    this.dischargeMonitoringReports.add(dischargeMonitoringReportsItem);
    return this;
  }

  /**
   * An array of Discharge Monitoring Report (DMR) data.
   * @return dischargeMonitoringReports
   */
  @javax.annotation.Nonnull
  public List<Eff01> getDischargeMonitoringReports() {
    return dischargeMonitoringReports;
  }

  public void setDischargeMonitoringReports(List<Eff01> dischargeMonitoringReports) {
    this.dischargeMonitoringReports = dischargeMonitoringReports;
  }


  public Eff03 monitoringLocationCode(String monitoringLocationCode) {
    this.monitoringLocationCode = monitoringLocationCode;
    return this;
  }

  /**
   * The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature
   * @return monitoringLocationCode
   */
  @javax.annotation.Nonnull
  public String getMonitoringLocationCode() {
    return monitoringLocationCode;
  }

  public void setMonitoringLocationCode(String monitoringLocationCode) {
    this.monitoringLocationCode = monitoringLocationCode;
  }


  public Eff03 monitoringLocationDesc(String monitoringLocationDesc) {
    this.monitoringLocationDesc = monitoringLocationDesc;
    return this;
  }

  /**
   * The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies
   * @return monitoringLocationDesc
   */
  @javax.annotation.Nonnull
  public String getMonitoringLocationDesc() {
    return monitoringLocationDesc;
  }

  public void setMonitoringLocationDesc(String monitoringLocationDesc) {
    this.monitoringLocationDesc = monitoringLocationDesc;
  }


  public Eff03 parameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
    return this;
  }

  /**
   * The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)
   * @return parameterCode
   */
  @javax.annotation.Nonnull
  public String getParameterCode() {
    return parameterCode;
  }

  public void setParameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
  }


  public Eff03 parameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
    return this;
  }

  /**
   * The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code
   * @return parameterDesc
   */
  @javax.annotation.Nonnull
  public String getParameterDesc() {
    return parameterDesc;
  }

  public void setParameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
  }


  public Eff03 stayTypeCode(String stayTypeCode) {
    this.stayTypeCode = stayTypeCode;
    return this;
  }

  /**
   * The unique identifier of the type of stay applied to a limit (e.g., X, Y, Z), which indicates whether the limits do not appear on the DMR at all, are treated as monitor only, or have a stay value in effect during the period of the stay
   * @return stayTypeCode
   */
  @javax.annotation.Nonnull
  public String getStayTypeCode() {
    return stayTypeCode;
  }

  public void setStayTypeCode(String stayTypeCode) {
    this.stayTypeCode = stayTypeCode;
  }


  public Eff03 stayTypeDesc(String stayTypeDesc) {
    this.stayTypeDesc = stayTypeDesc;
    return this;
  }

  /**
   * The name of the type of stay applied to a limit, which indicates whether the limits do not appear on the DMR at all (X), are treated as monitor only (Y), or have a stay value in effect during the period of the stay (Z)
   * @return stayTypeDesc
   */
  @javax.annotation.Nonnull
  public String getStayTypeDesc() {
    return stayTypeDesc;
  }

  public void setStayTypeDesc(String stayTypeDesc) {
    this.stayTypeDesc = stayTypeDesc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff03 eff03 = (Eff03) o;
    return Objects.equals(this.dischargeMonitoringReports, eff03.dischargeMonitoringReports) &&
        Objects.equals(this.monitoringLocationCode, eff03.monitoringLocationCode) &&
        Objects.equals(this.monitoringLocationDesc, eff03.monitoringLocationDesc) &&
        Objects.equals(this.parameterCode, eff03.parameterCode) &&
        Objects.equals(this.parameterDesc, eff03.parameterDesc) &&
        Objects.equals(this.stayTypeCode, eff03.stayTypeCode) &&
        Objects.equals(this.stayTypeDesc, eff03.stayTypeDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dischargeMonitoringReports, monitoringLocationCode, monitoringLocationDesc, parameterCode, parameterDesc, stayTypeCode, stayTypeDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff03 {\n");
    sb.append("    dischargeMonitoringReports: ").append(toIndentedString(dischargeMonitoringReports)).append("\n");
    sb.append("    monitoringLocationCode: ").append(toIndentedString(monitoringLocationCode)).append("\n");
    sb.append("    monitoringLocationDesc: ").append(toIndentedString(monitoringLocationDesc)).append("\n");
    sb.append("    parameterCode: ").append(toIndentedString(parameterCode)).append("\n");
    sb.append("    parameterDesc: ").append(toIndentedString(parameterDesc)).append("\n");
    sb.append("    stayTypeCode: ").append(toIndentedString(stayTypeCode)).append("\n");
    sb.append("    stayTypeDesc: ").append(toIndentedString(stayTypeDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DischargeMonitoringReports");
    openapiFields.add("MonitoringLocationCode");
    openapiFields.add("MonitoringLocationDesc");
    openapiFields.add("ParameterCode");
    openapiFields.add("ParameterDesc");
    openapiFields.add("StayTypeCode");
    openapiFields.add("StayTypeDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DischargeMonitoringReports");
    openapiRequiredFields.add("MonitoringLocationCode");
    openapiRequiredFields.add("MonitoringLocationDesc");
    openapiRequiredFields.add("ParameterCode");
    openapiRequiredFields.add("ParameterDesc");
    openapiRequiredFields.add("StayTypeCode");
    openapiRequiredFields.add("StayTypeDesc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff03
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff03.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff03 is not found in the empty JSON string", Eff03.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff03.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff03` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Eff03.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("DischargeMonitoringReports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DischargeMonitoringReports` to be an array in the JSON string but got `%s`", jsonObj.get("DischargeMonitoringReports").toString()));
      }

      JsonArray jsonArraydischargeMonitoringReports = jsonObj.getAsJsonArray("DischargeMonitoringReports");
      // validate the required field `DischargeMonitoringReports` (array)
      for (int i = 0; i < jsonArraydischargeMonitoringReports.size(); i++) {
        Eff01.validateJsonElement(jsonArraydischargeMonitoringReports.get(i));
      };
      if (!jsonObj.get("MonitoringLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringLocationCode").toString()));
      }
      if (!jsonObj.get("MonitoringLocationDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringLocationDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringLocationDesc").toString()));
      }
      if (!jsonObj.get("ParameterCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterCode").toString()));
      }
      if (!jsonObj.get("ParameterDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterDesc").toString()));
      }
      if (!jsonObj.get("StayTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StayTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StayTypeCode").toString()));
      }
      if (!jsonObj.get("StayTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StayTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StayTypeDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff03.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff03' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff03> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff03.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff03>() {
           @Override
           public void write(JsonWriter out, Eff03 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff03 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff03 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff03
   * @throws IOException if the JSON string is invalid with respect to Eff03
   */
  public static Eff03 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff03.class);
  }

  /**
   * Convert an instance of Eff03 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

