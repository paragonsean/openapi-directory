/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Linked Permits Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff06 {
  public static final String SERIALIZED_NAME_CW_P_CITY = "CWPCity";
  @SerializedName(SERIALIZED_NAME_CW_P_CITY)
  private String cwPCity;

  public static final String SERIALIZED_NAME_CW_P_CURRENT_S_N_C_STATUS = "CWPCurrentSNCStatus";
  @SerializedName(SERIALIZED_NAME_CW_P_CURRENT_S_N_C_STATUS)
  private String cwPCurrentSNCStatus;

  public static final String SERIALIZED_NAME_CW_P_MAJOR_MINOR_STATUS_FLAG = "CWPMajorMinorStatusFlag";
  @SerializedName(SERIALIZED_NAME_CW_P_MAJOR_MINOR_STATUS_FLAG)
  private String cwPMajorMinorStatusFlag;

  public static final String SERIALIZED_NAME_CW_P_NAME = "CWPName";
  @SerializedName(SERIALIZED_NAME_CW_P_NAME)
  private String cwPName;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_STATUS_DESC = "CWPPermitStatusDesc";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_STATUS_DESC)
  private String cwPPermitStatusDesc;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_TYPE_DESC = "CWPPermitTypeDesc";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_TYPE_DESC)
  private String cwPPermitTypeDesc;

  public static final String SERIALIZED_NAME_CW_P_STATE = "CWPState";
  @SerializedName(SERIALIZED_NAME_CW_P_STATE)
  private String cwPState;

  public static final String SERIALIZED_NAME_CW_P_STREET = "CWPStreet";
  @SerializedName(SERIALIZED_NAME_CW_P_STREET)
  private String cwPStreet;

  public static final String SERIALIZED_NAME_CW_P_ZIP = "CWPZip";
  @SerializedName(SERIALIZED_NAME_CW_P_ZIP)
  private String cwPZip;

  public static final String SERIALIZED_NAME_SOURCE_ID = "SourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public Eff06() {
  }

  public Eff06 cwPCity(String cwPCity) {
    this.cwPCity = cwPCity;
    return this;
  }

  /**
   * City in which the facility is located.
   * @return cwPCity
   */
  @javax.annotation.Nonnull
  public String getCwPCity() {
    return cwPCity;
  }

  public void setCwPCity(String cwPCity) {
    this.cwPCity = cwPCity;
  }


  public Eff06 cwPCurrentSNCStatus(String cwPCurrentSNCStatus) {
    this.cwPCurrentSNCStatus = cwPCurrentSNCStatus;
    return this;
  }

  /**
   * The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
   * @return cwPCurrentSNCStatus
   */
  @javax.annotation.Nonnull
  public String getCwPCurrentSNCStatus() {
    return cwPCurrentSNCStatus;
  }

  public void setCwPCurrentSNCStatus(String cwPCurrentSNCStatus) {
    this.cwPCurrentSNCStatus = cwPCurrentSNCStatus;
  }


  public Eff06 cwPMajorMinorStatusFlag(String cwPMajorMinorStatusFlag) {
    this.cwPMajorMinorStatusFlag = cwPMajorMinorStatusFlag;
    return this;
  }

  /**
   * Facilities marked \&quot;M\&quot; for major refers to CWA major permittees. - M &#x3D; Major - N &#x3D; Minor
   * @return cwPMajorMinorStatusFlag
   */
  @javax.annotation.Nonnull
  public String getCwPMajorMinorStatusFlag() {
    return cwPMajorMinorStatusFlag;
  }

  public void setCwPMajorMinorStatusFlag(String cwPMajorMinorStatusFlag) {
    this.cwPMajorMinorStatusFlag = cwPMajorMinorStatusFlag;
  }


  public Eff06 cwPName(String cwPName) {
    this.cwPName = cwPName;
    return this;
  }

  /**
   * Facility or permit holder name, as maintained in ICIS-NPDES.
   * @return cwPName
   */
  @javax.annotation.Nonnull
  public String getCwPName() {
    return cwPName;
  }

  public void setCwPName(String cwPName) {
    this.cwPName = cwPName;
  }


  public Eff06 cwPPermitStatusDesc(String cwPPermitStatusDesc) {
    this.cwPPermitStatusDesc = cwPPermitStatusDesc;
    return this;
  }

  /**
   * The current stage/status in the NPDES permit life cycle.
   * @return cwPPermitStatusDesc
   */
  @javax.annotation.Nonnull
  public String getCwPPermitStatusDesc() {
    return cwPPermitStatusDesc;
  }

  public void setCwPPermitStatusDesc(String cwPPermitStatusDesc) {
    this.cwPPermitStatusDesc = cwPPermitStatusDesc;
  }


  public Eff06 cwPPermitTypeDesc(String cwPPermitTypeDesc) {
    this.cwPPermitTypeDesc = cwPPermitTypeDesc;
    return this;
  }

  /**
   * NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility
   * @return cwPPermitTypeDesc
   */
  @javax.annotation.Nonnull
  public String getCwPPermitTypeDesc() {
    return cwPPermitTypeDesc;
  }

  public void setCwPPermitTypeDesc(String cwPPermitTypeDesc) {
    this.cwPPermitTypeDesc = cwPPermitTypeDesc;
  }


  public Eff06 cwPState(String cwPState) {
    this.cwPState = cwPState;
    return this;
  }

  /**
   * Facility location - two-digit state abbreviation.
   * @return cwPState
   */
  @javax.annotation.Nonnull
  public String getCwPState() {
    return cwPState;
  }

  public void setCwPState(String cwPState) {
    this.cwPState = cwPState;
  }


  public Eff06 cwPStreet(String cwPStreet) {
    this.cwPStreet = cwPStreet;
    return this;
  }

  /**
   * Facility street address
   * @return cwPStreet
   */
  @javax.annotation.Nonnull
  public String getCwPStreet() {
    return cwPStreet;
  }

  public void setCwPStreet(String cwPStreet) {
    this.cwPStreet = cwPStreet;
  }


  public Eff06 cwPZip(String cwPZip) {
    this.cwPZip = cwPZip;
    return this;
  }

  /**
   * Facility ZIP code
   * @return cwPZip
   */
  @javax.annotation.Nonnull
  public String getCwPZip() {
    return cwPZip;
  }

  public void setCwPZip(String cwPZip) {
    this.cwPZip = cwPZip;
  }


  public Eff06 sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff06 eff06 = (Eff06) o;
    return Objects.equals(this.cwPCity, eff06.cwPCity) &&
        Objects.equals(this.cwPCurrentSNCStatus, eff06.cwPCurrentSNCStatus) &&
        Objects.equals(this.cwPMajorMinorStatusFlag, eff06.cwPMajorMinorStatusFlag) &&
        Objects.equals(this.cwPName, eff06.cwPName) &&
        Objects.equals(this.cwPPermitStatusDesc, eff06.cwPPermitStatusDesc) &&
        Objects.equals(this.cwPPermitTypeDesc, eff06.cwPPermitTypeDesc) &&
        Objects.equals(this.cwPState, eff06.cwPState) &&
        Objects.equals(this.cwPStreet, eff06.cwPStreet) &&
        Objects.equals(this.cwPZip, eff06.cwPZip) &&
        Objects.equals(this.sourceId, eff06.sourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cwPCity, cwPCurrentSNCStatus, cwPMajorMinorStatusFlag, cwPName, cwPPermitStatusDesc, cwPPermitTypeDesc, cwPState, cwPStreet, cwPZip, sourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff06 {\n");
    sb.append("    cwPCity: ").append(toIndentedString(cwPCity)).append("\n");
    sb.append("    cwPCurrentSNCStatus: ").append(toIndentedString(cwPCurrentSNCStatus)).append("\n");
    sb.append("    cwPMajorMinorStatusFlag: ").append(toIndentedString(cwPMajorMinorStatusFlag)).append("\n");
    sb.append("    cwPName: ").append(toIndentedString(cwPName)).append("\n");
    sb.append("    cwPPermitStatusDesc: ").append(toIndentedString(cwPPermitStatusDesc)).append("\n");
    sb.append("    cwPPermitTypeDesc: ").append(toIndentedString(cwPPermitTypeDesc)).append("\n");
    sb.append("    cwPState: ").append(toIndentedString(cwPState)).append("\n");
    sb.append("    cwPStreet: ").append(toIndentedString(cwPStreet)).append("\n");
    sb.append("    cwPZip: ").append(toIndentedString(cwPZip)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CWPCity");
    openapiFields.add("CWPCurrentSNCStatus");
    openapiFields.add("CWPMajorMinorStatusFlag");
    openapiFields.add("CWPName");
    openapiFields.add("CWPPermitStatusDesc");
    openapiFields.add("CWPPermitTypeDesc");
    openapiFields.add("CWPState");
    openapiFields.add("CWPStreet");
    openapiFields.add("CWPZip");
    openapiFields.add("SourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CWPCity");
    openapiRequiredFields.add("CWPCurrentSNCStatus");
    openapiRequiredFields.add("CWPMajorMinorStatusFlag");
    openapiRequiredFields.add("CWPName");
    openapiRequiredFields.add("CWPPermitStatusDesc");
    openapiRequiredFields.add("CWPPermitTypeDesc");
    openapiRequiredFields.add("CWPState");
    openapiRequiredFields.add("CWPStreet");
    openapiRequiredFields.add("CWPZip");
    openapiRequiredFields.add("SourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff06
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff06.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff06 is not found in the empty JSON string", Eff06.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff06.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff06` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Eff06.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CWPCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCity").toString()));
      }
      if (!jsonObj.get("CWPCurrentSNCStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCurrentSNCStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCurrentSNCStatus").toString()));
      }
      if (!jsonObj.get("CWPMajorMinorStatusFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPMajorMinorStatusFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPMajorMinorStatusFlag").toString()));
      }
      if (!jsonObj.get("CWPName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPName").toString()));
      }
      if (!jsonObj.get("CWPPermitStatusDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitStatusDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitStatusDesc").toString()));
      }
      if (!jsonObj.get("CWPPermitTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitTypeDesc").toString()));
      }
      if (!jsonObj.get("CWPState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPState").toString()));
      }
      if (!jsonObj.get("CWPStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStreet").toString()));
      }
      if (!jsonObj.get("CWPZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPZip").toString()));
      }
      if (!jsonObj.get("SourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff06.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff06' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff06> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff06.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff06>() {
           @Override
           public void write(JsonWriter out, Eff06 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff06 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff06 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff06
   * @throws IOException if the JSON string is invalid with respect to Eff06
   */
  public static Eff06 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff06.class);
  }

  /**
   * Convert an instance of Eff06 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

