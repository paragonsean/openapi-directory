/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Eff02;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Discharge Monitoring Reports Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff01 {
  public static final String SERIALIZED_NAME_DM_R_EVENT_ID = "DMREventId";
  @SerializedName(SERIALIZED_NAME_DM_R_EVENT_ID)
  private String dmREventId;

  public static final String SERIALIZED_NAME_DM_R_FORM_VALUE_ID = "DMRFormValueId";
  @SerializedName(SERIALIZED_NAME_DM_R_FORM_VALUE_ID)
  private String dmRFormValueId;

  public static final String SERIALIZED_NAME_DM_R_UNIT_CODE = "DMRUnitCode";
  @SerializedName(SERIALIZED_NAME_DM_R_UNIT_CODE)
  private String dmRUnitCode;

  public static final String SERIALIZED_NAME_DM_R_UNIT_DESC = "DMRUnitDesc";
  @SerializedName(SERIALIZED_NAME_DM_R_UNIT_DESC)
  private String dmRUnitDesc;

  public static final String SERIALIZED_NAME_DM_R_VALUE_ID = "DMRValueId";
  @SerializedName(SERIALIZED_NAME_DM_R_VALUE_ID)
  private String dmRValueId;

  public static final String SERIALIZED_NAME_DM_R_VALUE_NMBR = "DMRValueNmbr";
  @SerializedName(SERIALIZED_NAME_DM_R_VALUE_NMBR)
  private String dmRValueNmbr;

  public static final String SERIALIZED_NAME_DM_R_VALUE_QUALIFIER_CODE = "DMRValueQualifierCode";
  @SerializedName(SERIALIZED_NAME_DM_R_VALUE_QUALIFIER_CODE)
  private String dmRValueQualifierCode;

  public static final String SERIALIZED_NAME_DM_R_VALUE_STD_UNITS = "DMRValueStdUnits";
  @SerializedName(SERIALIZED_NAME_DM_R_VALUE_STD_UNITS)
  private String dmRValueStdUnits;

  public static final String SERIALIZED_NAME_DAYS_LATE = "DaysLate";
  @SerializedName(SERIALIZED_NAME_DAYS_LATE)
  private String daysLate;

  public static final String SERIALIZED_NAME_EXCEEDENCE_PCT = "ExceedencePct";
  @SerializedName(SERIALIZED_NAME_EXCEEDENCE_PCT)
  private String exceedencePct;

  public static final String SERIALIZED_NAME_LIMIT_BEGIN_DATE = "LimitBeginDate";
  @SerializedName(SERIALIZED_NAME_LIMIT_BEGIN_DATE)
  private String limitBeginDate;

  public static final String SERIALIZED_NAME_LIMIT_END_DATE = "LimitEndDate";
  @SerializedName(SERIALIZED_NAME_LIMIT_END_DATE)
  private String limitEndDate;

  public static final String SERIALIZED_NAME_LIMIT_ID = "LimitId";
  @SerializedName(SERIALIZED_NAME_LIMIT_ID)
  private String limitId;

  public static final String SERIALIZED_NAME_LIMIT_SET_ID = "LimitSetId";
  @SerializedName(SERIALIZED_NAME_LIMIT_SET_ID)
  private String limitSetId;

  public static final String SERIALIZED_NAME_LIMIT_SET_SCHEDULE_ID = "LimitSetScheduleId";
  @SerializedName(SERIALIZED_NAME_LIMIT_SET_SCHEDULE_ID)
  private String limitSetScheduleId;

  public static final String SERIALIZED_NAME_LIMIT_TYPE_CODE = "LimitTypeCode";
  @SerializedName(SERIALIZED_NAME_LIMIT_TYPE_CODE)
  private String limitTypeCode;

  public static final String SERIALIZED_NAME_LIMIT_UNIT_CODE = "LimitUnitCode";
  @SerializedName(SERIALIZED_NAME_LIMIT_UNIT_CODE)
  private String limitUnitCode;

  public static final String SERIALIZED_NAME_LIMIT_UNIT_DESC = "LimitUnitDesc";
  @SerializedName(SERIALIZED_NAME_LIMIT_UNIT_DESC)
  private String limitUnitDesc;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_ID = "LimitValueId";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_ID)
  private String limitValueId;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_NMBR = "LimitValueNmbr";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_NMBR)
  private String limitValueNmbr;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_QUALIFIER_CODE = "LimitValueQualifierCode";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_QUALIFIER_CODE)
  private String limitValueQualifierCode;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_STD_UNITS = "LimitValueStdUnits";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_STD_UNITS)
  private String limitValueStdUnits;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_TYPE_CODE = "LimitValueTypeCode";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_TYPE_CODE)
  private String limitValueTypeCode;

  public static final String SERIALIZED_NAME_LIMIT_VALUE_TYPE_DESC = "LimitValueTypeDesc";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE_TYPE_DESC)
  private String limitValueTypeDesc;

  public static final String SERIALIZED_NAME_MONITORING_PERIOD_END_DATE = "MonitoringPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_MONITORING_PERIOD_END_DATE)
  private String monitoringPeriodEndDate;

  public static final String SERIALIZED_NAME_NO_D_E_DESC = "NODEDesc";
  @SerializedName(SERIALIZED_NAME_NO_D_E_DESC)
  private String noDEDesc;

  public static final String SERIALIZED_NAME_NO_D_I_CODE = "NODICode";
  @SerializedName(SERIALIZED_NAME_NO_D_I_CODE)
  private String noDICode;

  public static final String SERIALIZED_NAME_NP_D_E_S_VIOLATIONS = "NPDESViolations";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_VIOLATIONS)
  private List<Eff02> npDESViolations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NMBR_OF_SUBMISSION = "NmbrOfSubmission";
  @SerializedName(SERIALIZED_NAME_NMBR_OF_SUBMISSION)
  private String nmbrOfSubmission;

  public static final String SERIALIZED_NAME_PERM_FEATURE_ID = "PermFeatureId";
  @SerializedName(SERIALIZED_NAME_PERM_FEATURE_ID)
  private String permFeatureId;

  public static final String SERIALIZED_NAME_STATISTICAL_BASE_CODE = "StatisticalBaseCode";
  @SerializedName(SERIALIZED_NAME_STATISTICAL_BASE_CODE)
  private String statisticalBaseCode;

  public static final String SERIALIZED_NAME_STATISTICAL_BASE_DESC = "StatisticalBaseDesc";
  @SerializedName(SERIALIZED_NAME_STATISTICAL_BASE_DESC)
  private String statisticalBaseDesc;

  public static final String SERIALIZED_NAME_STATISTICAL_BASE_TYPE_CODE = "StatisticalBaseTypeCode";
  @SerializedName(SERIALIZED_NAME_STATISTICAL_BASE_TYPE_CODE)
  private String statisticalBaseTypeCode;

  public static final String SERIALIZED_NAME_STATISTICAL_BASE_TYPE_DESC = "StatisticalBaseTypeDesc";
  @SerializedName(SERIALIZED_NAME_STATISTICAL_BASE_TYPE_DESC)
  private String statisticalBaseTypeDesc;

  public static final String SERIALIZED_NAME_STAY_VALUE_NMBR = "StayValueNmbr";
  @SerializedName(SERIALIZED_NAME_STAY_VALUE_NMBR)
  private String stayValueNmbr;

  public static final String SERIALIZED_NAME_STD_UNIT_CODE = "StdUnitCode";
  @SerializedName(SERIALIZED_NAME_STD_UNIT_CODE)
  private String stdUnitCode;

  public static final String SERIALIZED_NAME_STD_UNIT_DESC = "StdUnitDesc";
  @SerializedName(SERIALIZED_NAME_STD_UNIT_DESC)
  private String stdUnitDesc;

  public static final String SERIALIZED_NAME_VALUE_RECEIVED_DATE = "ValueReceivedDate";
  @SerializedName(SERIALIZED_NAME_VALUE_RECEIVED_DATE)
  private String valueReceivedDate;

  public static final String SERIALIZED_NAME_VALUE_TYPE_CODE = "ValueTypeCode";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE_CODE)
  private String valueTypeCode;

  public static final String SERIALIZED_NAME_VALUE_TYPE_DESC = "ValueTypeDesc";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE_DESC)
  private String valueTypeDesc;

  public static final String SERIALIZED_NAME_VERSION_NMBR = "VersionNmbr";
  @SerializedName(SERIALIZED_NAME_VERSION_NMBR)
  private String versionNmbr;

  public Eff01() {
  }

  public Eff01 dmREventId(String dmREventId) {
    this.dmREventId = dmREventId;
    return this;
  }

  /**
   * The sequence ID identifying the DMR Event.
   * @return dmREventId
   */
  @javax.annotation.Nonnull
  public String getDmREventId() {
    return dmREventId;
  }

  public void setDmREventId(String dmREventId) {
    this.dmREventId = dmREventId;
  }


  public Eff01 dmRFormValueId(String dmRFormValueId) {
    this.dmRFormValueId = dmRFormValueId;
    return this;
  }

  /**
   * The sequence ID identifying the DMR Form Value.
   * @return dmRFormValueId
   */
  @javax.annotation.Nonnull
  public String getDmRFormValueId() {
    return dmRFormValueId;
  }

  public void setDmRFormValueId(String dmRFormValueId) {
    this.dmRFormValueId = dmRFormValueId;
  }


  public Eff01 dmRUnitCode(String dmRUnitCode) {
    this.dmRUnitCode = dmRUnitCode;
    return this;
  }

  /**
   * The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered into ICIS-NPDES
   * @return dmRUnitCode
   */
  @javax.annotation.Nonnull
  public String getDmRUnitCode() {
    return dmRUnitCode;
  }

  public void setDmRUnitCode(String dmRUnitCode) {
    this.dmRUnitCode = dmRUnitCode;
  }


  public Eff01 dmRUnitDesc(String dmRUnitDesc) {
    this.dmRUnitDesc = dmRUnitDesc;
    return this;
  }

  /**
   * The short description of the unit of measure applicable to limit or DMR values
   * @return dmRUnitDesc
   */
  @javax.annotation.Nonnull
  public String getDmRUnitDesc() {
    return dmRUnitDesc;
  }

  public void setDmRUnitDesc(String dmRUnitDesc) {
    this.dmRUnitDesc = dmRUnitDesc;
  }


  public Eff01 dmRValueId(String dmRValueId) {
    this.dmRValueId = dmRValueId;
    return this;
  }

  /**
   * The unique identifier for the DMR value generated in ICIS-NPDES
   * @return dmRValueId
   */
  @javax.annotation.Nonnull
  public String getDmRValueId() {
    return dmRValueId;
  }

  public void setDmRValueId(String dmRValueId) {
    this.dmRValueId = dmRValueId;
  }


  public Eff01 dmRValueNmbr(String dmRValueNmbr) {
    this.dmRValueNmbr = dmRValueNmbr;
    return this;
  }

  /**
   * The DMR value number reported on the DMR Form
   * @return dmRValueNmbr
   */
  @javax.annotation.Nonnull
  public String getDmRValueNmbr() {
    return dmRValueNmbr;
  }

  public void setDmRValueNmbr(String dmRValueNmbr) {
    this.dmRValueNmbr = dmRValueNmbr;
  }


  public Eff01 dmRValueQualifierCode(String dmRValueQualifierCode) {
    this.dmRValueQualifierCode = dmRValueQualifierCode;
    return this;
  }

  /**
   * The unique code identifying the DMR value operator (i.e., &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, T, E, &#x3D;). E indicates an estimated value. T indicates too numerous to count
   * @return dmRValueQualifierCode
   */
  @javax.annotation.Nonnull
  public String getDmRValueQualifierCode() {
    return dmRValueQualifierCode;
  }

  public void setDmRValueQualifierCode(String dmRValueQualifierCode) {
    this.dmRValueQualifierCode = dmRValueQualifierCode;
  }


  public Eff01 dmRValueStdUnits(String dmRValueStdUnits) {
    this.dmRValueStdUnits = dmRValueStdUnits;
    return this;
  }

  /**
   * The DMR value expressed in standard units, as calculated in ICIS-NPDES
   * @return dmRValueStdUnits
   */
  @javax.annotation.Nonnull
  public String getDmRValueStdUnits() {
    return dmRValueStdUnits;
  }

  public void setDmRValueStdUnits(String dmRValueStdUnits) {
    this.dmRValueStdUnits = dmRValueStdUnits;
  }


  public Eff01 daysLate(String daysLate) {
    this.daysLate = daysLate;
    return this;
  }

  /**
   * The number of days the DMR value is late, as generated in ICIS-NPDES
   * @return daysLate
   */
  @javax.annotation.Nonnull
  public String getDaysLate() {
    return daysLate;
  }

  public void setDaysLate(String daysLate) {
    this.daysLate = daysLate;
  }


  public Eff01 exceedencePct(String exceedencePct) {
    this.exceedencePct = exceedencePct;
    return this;
  }

  /**
   * The percent by which the DMR value (or adjusted value) exceeded its limit (or stay) value, as generated in ICIS-NPDES
   * @return exceedencePct
   */
  @javax.annotation.Nonnull
  public String getExceedencePct() {
    return exceedencePct;
  }

  public void setExceedencePct(String exceedencePct) {
    this.exceedencePct = exceedencePct;
  }


  public Eff01 limitBeginDate(String limitBeginDate) {
    this.limitBeginDate = limitBeginDate;
    return this;
  }

  /**
   * The date on which a limit becomes in effect for a particular parameter in a limit set
   * @return limitBeginDate
   */
  @javax.annotation.Nonnull
  public String getLimitBeginDate() {
    return limitBeginDate;
  }

  public void setLimitBeginDate(String limitBeginDate) {
    this.limitBeginDate = limitBeginDate;
  }


  public Eff01 limitEndDate(String limitEndDate) {
    this.limitEndDate = limitEndDate;
    return this;
  }

  /**
   * The date on which a limit stops being in effect for a particular parameter in a limit set
   * @return limitEndDate
   */
  @javax.annotation.Nonnull
  public String getLimitEndDate() {
    return limitEndDate;
  }

  public void setLimitEndDate(String limitEndDate) {
    this.limitEndDate = limitEndDate;
  }


  public Eff01 limitId(String limitId) {
    this.limitId = limitId;
    return this;
  }

  /**
   * The unique identifier for a limit parameter record
   * @return limitId
   */
  @javax.annotation.Nonnull
  public String getLimitId() {
    return limitId;
  }

  public void setLimitId(String limitId) {
    this.limitId = limitId;
  }


  public Eff01 limitSetId(String limitSetId) {
    this.limitSetId = limitSetId;
    return this;
  }

  /**
   * The unique identifier for a limit set, generated in ICIS-NPDES
   * @return limitSetId
   */
  @javax.annotation.Nonnull
  public String getLimitSetId() {
    return limitSetId;
  }

  public void setLimitSetId(String limitSetId) {
    this.limitSetId = limitSetId;
  }


  public Eff01 limitSetScheduleId(String limitSetScheduleId) {
    this.limitSetScheduleId = limitSetScheduleId;
    return this;
  }

  /**
   * The unique identifier of the Limit Set Schedule, generated in ICIS-NPDES
   * @return limitSetScheduleId
   */
  @javax.annotation.Nonnull
  public String getLimitSetScheduleId() {
    return limitSetScheduleId;
  }

  public void setLimitSetScheduleId(String limitSetScheduleId) {
    this.limitSetScheduleId = limitSetScheduleId;
  }


  public Eff01 limitTypeCode(String limitTypeCode) {
    this.limitTypeCode = limitTypeCode;
    return this;
  }

  /**
   * Get limitTypeCode
   * @return limitTypeCode
   */
  @javax.annotation.Nonnull
  public String getLimitTypeCode() {
    return limitTypeCode;
  }

  public void setLimitTypeCode(String limitTypeCode) {
    this.limitTypeCode = limitTypeCode;
  }


  public Eff01 limitUnitCode(String limitUnitCode) {
    this.limitUnitCode = limitUnitCode;
    return this;
  }

  /**
   * The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered by the user
   * @return limitUnitCode
   */
  @javax.annotation.Nonnull
  public String getLimitUnitCode() {
    return limitUnitCode;
  }

  public void setLimitUnitCode(String limitUnitCode) {
    this.limitUnitCode = limitUnitCode;
  }


  public Eff01 limitUnitDesc(String limitUnitDesc) {
    this.limitUnitDesc = limitUnitDesc;
    return this;
  }

  /**
   * The short description of the unit of measure applicable to limit or DMR values
   * @return limitUnitDesc
   */
  @javax.annotation.Nonnull
  public String getLimitUnitDesc() {
    return limitUnitDesc;
  }

  public void setLimitUnitDesc(String limitUnitDesc) {
    this.limitUnitDesc = limitUnitDesc;
  }


  public Eff01 limitValueId(String limitValueId) {
    this.limitValueId = limitValueId;
    return this;
  }

  /**
   * The unique identifier in ICIS-NPDES for the Limit Value
   * @return limitValueId
   */
  @javax.annotation.Nonnull
  public String getLimitValueId() {
    return limitValueId;
  }

  public void setLimitValueId(String limitValueId) {
    this.limitValueId = limitValueId;
  }


  public Eff01 limitValueNmbr(String limitValueNmbr) {
    this.limitValueNmbr = limitValueNmbr;
    return this;
  }

  /**
   * The numerical limit for a given parameter
   * @return limitValueNmbr
   */
  @javax.annotation.Nonnull
  public String getLimitValueNmbr() {
    return limitValueNmbr;
  }

  public void setLimitValueNmbr(String limitValueNmbr) {
    this.limitValueNmbr = limitValueNmbr;
  }


  public Eff01 limitValueQualifierCode(String limitValueQualifierCode) {
    this.limitValueQualifierCode = limitValueQualifierCode;
    return this;
  }

  /**
   * The unique code identifying the limit value operator (i.e., &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, T, E, &#x3D;). E indicates an estimated value. T indicates too numerous to count
   * @return limitValueQualifierCode
   */
  @javax.annotation.Nonnull
  public String getLimitValueQualifierCode() {
    return limitValueQualifierCode;
  }

  public void setLimitValueQualifierCode(String limitValueQualifierCode) {
    this.limitValueQualifierCode = limitValueQualifierCode;
  }


  public Eff01 limitValueStdUnits(String limitValueStdUnits) {
    this.limitValueStdUnits = limitValueStdUnits;
    return this;
  }

  /**
   * The limit value expressed in standard units, as calculated in ICIS-NPDES
   * @return limitValueStdUnits
   */
  @javax.annotation.Nonnull
  public String getLimitValueStdUnits() {
    return limitValueStdUnits;
  }

  public void setLimitValueStdUnits(String limitValueStdUnits) {
    this.limitValueStdUnits = limitValueStdUnits;
  }


  public Eff01 limitValueTypeCode(String limitValueTypeCode) {
    this.limitValueTypeCode = limitValueTypeCode;
    return this;
  }

  /**
   * The code indicating the type of value the limit is given as (i.e., Q1, Q2, C1, C2, C3)
   * @return limitValueTypeCode
   */
  @javax.annotation.Nonnull
  public String getLimitValueTypeCode() {
    return limitValueTypeCode;
  }

  public void setLimitValueTypeCode(String limitValueTypeCode) {
    this.limitValueTypeCode = limitValueTypeCode;
  }


  public Eff01 limitValueTypeDesc(String limitValueTypeDesc) {
    this.limitValueTypeDesc = limitValueTypeDesc;
    return this;
  }

  /**
   * The description indicating the type of value the limit is given as (e.g., Concentration, Quantity)
   * @return limitValueTypeDesc
   */
  @javax.annotation.Nonnull
  public String getLimitValueTypeDesc() {
    return limitValueTypeDesc;
  }

  public void setLimitValueTypeDesc(String limitValueTypeDesc) {
    this.limitValueTypeDesc = limitValueTypeDesc;
  }


  public Eff01 monitoringPeriodEndDate(String monitoringPeriodEndDate) {
    this.monitoringPeriodEndDate = monitoringPeriodEndDate;
    return this;
  }

  /**
   * The date that the monitoring period for the values covered by the DMR Form ends
   * @return monitoringPeriodEndDate
   */
  @javax.annotation.Nonnull
  public String getMonitoringPeriodEndDate() {
    return monitoringPeriodEndDate;
  }

  public void setMonitoringPeriodEndDate(String monitoringPeriodEndDate) {
    this.monitoringPeriodEndDate = monitoringPeriodEndDate;
  }


  public Eff01 noDEDesc(String noDEDesc) {
    this.noDEDesc = noDEDesc;
    return this;
  }

  /**
   * Get noDEDesc
   * @return noDEDesc
   */
  @javax.annotation.Nonnull
  public String getNoDEDesc() {
    return noDEDesc;
  }

  public void setNoDEDesc(String noDEDesc) {
    this.noDEDesc = noDEDesc;
  }


  public Eff01 noDICode(String noDICode) {
    this.noDICode = noDICode;
    return this;
  }

  /**
   * The unique code indicating why no DMR Value was submitted by the permittee for a Monitoring Period End Date
   * @return noDICode
   */
  @javax.annotation.Nonnull
  public String getNoDICode() {
    return noDICode;
  }

  public void setNoDICode(String noDICode) {
    this.noDICode = noDICode;
  }


  public Eff01 npDESViolations(List<Eff02> npDESViolations) {
    this.npDESViolations = npDESViolations;
    return this;
  }

  public Eff01 addNpDESViolationsItem(Eff02 npDESViolationsItem) {
    if (this.npDESViolations == null) {
      this.npDESViolations = new ArrayList<>();
    }
    this.npDESViolations.add(npDESViolationsItem);
    return this;
  }

  /**
   * Get npDESViolations
   * @return npDESViolations
   */
  @javax.annotation.Nullable
  public List<Eff02> getNpDESViolations() {
    return npDESViolations;
  }

  public void setNpDESViolations(List<Eff02> npDESViolations) {
    this.npDESViolations = npDESViolations;
  }


  public Eff01 nmbrOfSubmission(String nmbrOfSubmission) {
    this.nmbrOfSubmission = nmbrOfSubmission;
    return this;
  }

  /**
   * The number of months of discharges represented on each DMR for the limit set (e.g., monthly &#x3D; 1, bi-monthly &#x3D; 2, quarterly &#x3D; 3, triannual &#x3D; 4, semi-annual &#x3D; 6, annual &#x3D; 12). This data element will be blank for Unscheduled Limit Sets
   * @return nmbrOfSubmission
   */
  @javax.annotation.Nonnull
  public String getNmbrOfSubmission() {
    return nmbrOfSubmission;
  }

  public void setNmbrOfSubmission(String nmbrOfSubmission) {
    this.nmbrOfSubmission = nmbrOfSubmission;
  }


  public Eff01 permFeatureId(String permFeatureId) {
    this.permFeatureId = permFeatureId;
    return this;
  }

  /**
   * The unique identifier in ICIS-NPDES of a permitted feature or outfall
   * @return permFeatureId
   */
  @javax.annotation.Nonnull
  public String getPermFeatureId() {
    return permFeatureId;
  }

  public void setPermFeatureId(String permFeatureId) {
    this.permFeatureId = permFeatureId;
  }


  public Eff01 statisticalBaseCode(String statisticalBaseCode) {
    this.statisticalBaseCode = statisticalBaseCode;
    return this;
  }

  /**
   * The code representing the unit of measure applicable to the limit and DMR values entered by the user (e.g., 30-day average, daily maximum)
   * @return statisticalBaseCode
   */
  @javax.annotation.Nonnull
  public String getStatisticalBaseCode() {
    return statisticalBaseCode;
  }

  public void setStatisticalBaseCode(String statisticalBaseCode) {
    this.statisticalBaseCode = statisticalBaseCode;
  }


  public Eff01 statisticalBaseDesc(String statisticalBaseDesc) {
    this.statisticalBaseDesc = statisticalBaseDesc;
    return this;
  }

  /**
   * Get statisticalBaseDesc
   * @return statisticalBaseDesc
   */
  @javax.annotation.Nonnull
  public String getStatisticalBaseDesc() {
    return statisticalBaseDesc;
  }

  public void setStatisticalBaseDesc(String statisticalBaseDesc) {
    this.statisticalBaseDesc = statisticalBaseDesc;
  }


  public Eff01 statisticalBaseTypeCode(String statisticalBaseTypeCode) {
    this.statisticalBaseTypeCode = statisticalBaseTypeCode;
    return this;
  }

  /**
   * The code indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
   * @return statisticalBaseTypeCode
   */
  @javax.annotation.Nonnull
  public String getStatisticalBaseTypeCode() {
    return statisticalBaseTypeCode;
  }

  public void setStatisticalBaseTypeCode(String statisticalBaseTypeCode) {
    this.statisticalBaseTypeCode = statisticalBaseTypeCode;
  }


  public Eff01 statisticalBaseTypeDesc(String statisticalBaseTypeDesc) {
    this.statisticalBaseTypeDesc = statisticalBaseTypeDesc;
    return this;
  }

  /**
   * A short description for indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
   * @return statisticalBaseTypeDesc
   */
  @javax.annotation.Nonnull
  public String getStatisticalBaseTypeDesc() {
    return statisticalBaseTypeDesc;
  }

  public void setStatisticalBaseTypeDesc(String statisticalBaseTypeDesc) {
    this.statisticalBaseTypeDesc = statisticalBaseTypeDesc;
  }


  public Eff01 stayValueNmbr(String stayValueNmbr) {
    this.stayValueNmbr = stayValueNmbr;
    return this;
  }

  /**
   * The numeric limit value imposed during the period of the stay for the limit; if entered, during the stay period, ICIS-NPDES will use this limit value for calculating compliance rather than the actual limit value
   * @return stayValueNmbr
   */
  @javax.annotation.Nonnull
  public String getStayValueNmbr() {
    return stayValueNmbr;
  }

  public void setStayValueNmbr(String stayValueNmbr) {
    this.stayValueNmbr = stayValueNmbr;
  }


  public Eff01 stdUnitCode(String stdUnitCode) {
    this.stdUnitCode = stdUnitCode;
    return this;
  }

  /**
   * The code representing the standard unit of measure applicable to quantity or concentration limits and measurements as entered by the user
   * @return stdUnitCode
   */
  @javax.annotation.Nonnull
  public String getStdUnitCode() {
    return stdUnitCode;
  }

  public void setStdUnitCode(String stdUnitCode) {
    this.stdUnitCode = stdUnitCode;
  }


  public Eff01 stdUnitDesc(String stdUnitDesc) {
    this.stdUnitDesc = stdUnitDesc;
    return this;
  }

  /**
   * The short description of the standard unit of measure applicable to limit or DMR values
   * @return stdUnitDesc
   */
  @javax.annotation.Nonnull
  public String getStdUnitDesc() {
    return stdUnitDesc;
  }

  public void setStdUnitDesc(String stdUnitDesc) {
    this.stdUnitDesc = stdUnitDesc;
  }


  public Eff01 valueReceivedDate(String valueReceivedDate) {
    this.valueReceivedDate = valueReceivedDate;
    return this;
  }

  /**
   * The date the DMR value was received by the regulatory authority
   * @return valueReceivedDate
   */
  @javax.annotation.Nonnull
  public String getValueReceivedDate() {
    return valueReceivedDate;
  }

  public void setValueReceivedDate(String valueReceivedDate) {
    this.valueReceivedDate = valueReceivedDate;
  }


  public Eff01 valueTypeCode(String valueTypeCode) {
    this.valueTypeCode = valueTypeCode;
    return this;
  }

  /**
   * The indication of the limit value type (e.g., Quantity 1, Concentration 2)
   * @return valueTypeCode
   */
  @javax.annotation.Nonnull
  public String getValueTypeCode() {
    return valueTypeCode;
  }

  public void setValueTypeCode(String valueTypeCode) {
    this.valueTypeCode = valueTypeCode;
  }


  public Eff01 valueTypeDesc(String valueTypeDesc) {
    this.valueTypeDesc = valueTypeDesc;
    return this;
  }

  /**
   * The type of value the measured number is given as (e.g., Concentration, Quantity)
   * @return valueTypeDesc
   */
  @javax.annotation.Nonnull
  public String getValueTypeDesc() {
    return valueTypeDesc;
  }

  public void setValueTypeDesc(String valueTypeDesc) {
    this.valueTypeDesc = valueTypeDesc;
  }


  public Eff01 versionNmbr(String versionNmbr) {
    this.versionNmbr = versionNmbr;
    return this;
  }

  /**
   * The version of the permit when a modification or reissuance is applied to the permit. Version &#x3D; 0 indicates the original permit issuance
   * @return versionNmbr
   */
  @javax.annotation.Nonnull
  public String getVersionNmbr() {
    return versionNmbr;
  }

  public void setVersionNmbr(String versionNmbr) {
    this.versionNmbr = versionNmbr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff01 eff01 = (Eff01) o;
    return Objects.equals(this.dmREventId, eff01.dmREventId) &&
        Objects.equals(this.dmRFormValueId, eff01.dmRFormValueId) &&
        Objects.equals(this.dmRUnitCode, eff01.dmRUnitCode) &&
        Objects.equals(this.dmRUnitDesc, eff01.dmRUnitDesc) &&
        Objects.equals(this.dmRValueId, eff01.dmRValueId) &&
        Objects.equals(this.dmRValueNmbr, eff01.dmRValueNmbr) &&
        Objects.equals(this.dmRValueQualifierCode, eff01.dmRValueQualifierCode) &&
        Objects.equals(this.dmRValueStdUnits, eff01.dmRValueStdUnits) &&
        Objects.equals(this.daysLate, eff01.daysLate) &&
        Objects.equals(this.exceedencePct, eff01.exceedencePct) &&
        Objects.equals(this.limitBeginDate, eff01.limitBeginDate) &&
        Objects.equals(this.limitEndDate, eff01.limitEndDate) &&
        Objects.equals(this.limitId, eff01.limitId) &&
        Objects.equals(this.limitSetId, eff01.limitSetId) &&
        Objects.equals(this.limitSetScheduleId, eff01.limitSetScheduleId) &&
        Objects.equals(this.limitTypeCode, eff01.limitTypeCode) &&
        Objects.equals(this.limitUnitCode, eff01.limitUnitCode) &&
        Objects.equals(this.limitUnitDesc, eff01.limitUnitDesc) &&
        Objects.equals(this.limitValueId, eff01.limitValueId) &&
        Objects.equals(this.limitValueNmbr, eff01.limitValueNmbr) &&
        Objects.equals(this.limitValueQualifierCode, eff01.limitValueQualifierCode) &&
        Objects.equals(this.limitValueStdUnits, eff01.limitValueStdUnits) &&
        Objects.equals(this.limitValueTypeCode, eff01.limitValueTypeCode) &&
        Objects.equals(this.limitValueTypeDesc, eff01.limitValueTypeDesc) &&
        Objects.equals(this.monitoringPeriodEndDate, eff01.monitoringPeriodEndDate) &&
        Objects.equals(this.noDEDesc, eff01.noDEDesc) &&
        Objects.equals(this.noDICode, eff01.noDICode) &&
        Objects.equals(this.npDESViolations, eff01.npDESViolations) &&
        Objects.equals(this.nmbrOfSubmission, eff01.nmbrOfSubmission) &&
        Objects.equals(this.permFeatureId, eff01.permFeatureId) &&
        Objects.equals(this.statisticalBaseCode, eff01.statisticalBaseCode) &&
        Objects.equals(this.statisticalBaseDesc, eff01.statisticalBaseDesc) &&
        Objects.equals(this.statisticalBaseTypeCode, eff01.statisticalBaseTypeCode) &&
        Objects.equals(this.statisticalBaseTypeDesc, eff01.statisticalBaseTypeDesc) &&
        Objects.equals(this.stayValueNmbr, eff01.stayValueNmbr) &&
        Objects.equals(this.stdUnitCode, eff01.stdUnitCode) &&
        Objects.equals(this.stdUnitDesc, eff01.stdUnitDesc) &&
        Objects.equals(this.valueReceivedDate, eff01.valueReceivedDate) &&
        Objects.equals(this.valueTypeCode, eff01.valueTypeCode) &&
        Objects.equals(this.valueTypeDesc, eff01.valueTypeDesc) &&
        Objects.equals(this.versionNmbr, eff01.versionNmbr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dmREventId, dmRFormValueId, dmRUnitCode, dmRUnitDesc, dmRValueId, dmRValueNmbr, dmRValueQualifierCode, dmRValueStdUnits, daysLate, exceedencePct, limitBeginDate, limitEndDate, limitId, limitSetId, limitSetScheduleId, limitTypeCode, limitUnitCode, limitUnitDesc, limitValueId, limitValueNmbr, limitValueQualifierCode, limitValueStdUnits, limitValueTypeCode, limitValueTypeDesc, monitoringPeriodEndDate, noDEDesc, noDICode, npDESViolations, nmbrOfSubmission, permFeatureId, statisticalBaseCode, statisticalBaseDesc, statisticalBaseTypeCode, statisticalBaseTypeDesc, stayValueNmbr, stdUnitCode, stdUnitDesc, valueReceivedDate, valueTypeCode, valueTypeDesc, versionNmbr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff01 {\n");
    sb.append("    dmREventId: ").append(toIndentedString(dmREventId)).append("\n");
    sb.append("    dmRFormValueId: ").append(toIndentedString(dmRFormValueId)).append("\n");
    sb.append("    dmRUnitCode: ").append(toIndentedString(dmRUnitCode)).append("\n");
    sb.append("    dmRUnitDesc: ").append(toIndentedString(dmRUnitDesc)).append("\n");
    sb.append("    dmRValueId: ").append(toIndentedString(dmRValueId)).append("\n");
    sb.append("    dmRValueNmbr: ").append(toIndentedString(dmRValueNmbr)).append("\n");
    sb.append("    dmRValueQualifierCode: ").append(toIndentedString(dmRValueQualifierCode)).append("\n");
    sb.append("    dmRValueStdUnits: ").append(toIndentedString(dmRValueStdUnits)).append("\n");
    sb.append("    daysLate: ").append(toIndentedString(daysLate)).append("\n");
    sb.append("    exceedencePct: ").append(toIndentedString(exceedencePct)).append("\n");
    sb.append("    limitBeginDate: ").append(toIndentedString(limitBeginDate)).append("\n");
    sb.append("    limitEndDate: ").append(toIndentedString(limitEndDate)).append("\n");
    sb.append("    limitId: ").append(toIndentedString(limitId)).append("\n");
    sb.append("    limitSetId: ").append(toIndentedString(limitSetId)).append("\n");
    sb.append("    limitSetScheduleId: ").append(toIndentedString(limitSetScheduleId)).append("\n");
    sb.append("    limitTypeCode: ").append(toIndentedString(limitTypeCode)).append("\n");
    sb.append("    limitUnitCode: ").append(toIndentedString(limitUnitCode)).append("\n");
    sb.append("    limitUnitDesc: ").append(toIndentedString(limitUnitDesc)).append("\n");
    sb.append("    limitValueId: ").append(toIndentedString(limitValueId)).append("\n");
    sb.append("    limitValueNmbr: ").append(toIndentedString(limitValueNmbr)).append("\n");
    sb.append("    limitValueQualifierCode: ").append(toIndentedString(limitValueQualifierCode)).append("\n");
    sb.append("    limitValueStdUnits: ").append(toIndentedString(limitValueStdUnits)).append("\n");
    sb.append("    limitValueTypeCode: ").append(toIndentedString(limitValueTypeCode)).append("\n");
    sb.append("    limitValueTypeDesc: ").append(toIndentedString(limitValueTypeDesc)).append("\n");
    sb.append("    monitoringPeriodEndDate: ").append(toIndentedString(monitoringPeriodEndDate)).append("\n");
    sb.append("    noDEDesc: ").append(toIndentedString(noDEDesc)).append("\n");
    sb.append("    noDICode: ").append(toIndentedString(noDICode)).append("\n");
    sb.append("    npDESViolations: ").append(toIndentedString(npDESViolations)).append("\n");
    sb.append("    nmbrOfSubmission: ").append(toIndentedString(nmbrOfSubmission)).append("\n");
    sb.append("    permFeatureId: ").append(toIndentedString(permFeatureId)).append("\n");
    sb.append("    statisticalBaseCode: ").append(toIndentedString(statisticalBaseCode)).append("\n");
    sb.append("    statisticalBaseDesc: ").append(toIndentedString(statisticalBaseDesc)).append("\n");
    sb.append("    statisticalBaseTypeCode: ").append(toIndentedString(statisticalBaseTypeCode)).append("\n");
    sb.append("    statisticalBaseTypeDesc: ").append(toIndentedString(statisticalBaseTypeDesc)).append("\n");
    sb.append("    stayValueNmbr: ").append(toIndentedString(stayValueNmbr)).append("\n");
    sb.append("    stdUnitCode: ").append(toIndentedString(stdUnitCode)).append("\n");
    sb.append("    stdUnitDesc: ").append(toIndentedString(stdUnitDesc)).append("\n");
    sb.append("    valueReceivedDate: ").append(toIndentedString(valueReceivedDate)).append("\n");
    sb.append("    valueTypeCode: ").append(toIndentedString(valueTypeCode)).append("\n");
    sb.append("    valueTypeDesc: ").append(toIndentedString(valueTypeDesc)).append("\n");
    sb.append("    versionNmbr: ").append(toIndentedString(versionNmbr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DMREventId");
    openapiFields.add("DMRFormValueId");
    openapiFields.add("DMRUnitCode");
    openapiFields.add("DMRUnitDesc");
    openapiFields.add("DMRValueId");
    openapiFields.add("DMRValueNmbr");
    openapiFields.add("DMRValueQualifierCode");
    openapiFields.add("DMRValueStdUnits");
    openapiFields.add("DaysLate");
    openapiFields.add("ExceedencePct");
    openapiFields.add("LimitBeginDate");
    openapiFields.add("LimitEndDate");
    openapiFields.add("LimitId");
    openapiFields.add("LimitSetId");
    openapiFields.add("LimitSetScheduleId");
    openapiFields.add("LimitTypeCode");
    openapiFields.add("LimitUnitCode");
    openapiFields.add("LimitUnitDesc");
    openapiFields.add("LimitValueId");
    openapiFields.add("LimitValueNmbr");
    openapiFields.add("LimitValueQualifierCode");
    openapiFields.add("LimitValueStdUnits");
    openapiFields.add("LimitValueTypeCode");
    openapiFields.add("LimitValueTypeDesc");
    openapiFields.add("MonitoringPeriodEndDate");
    openapiFields.add("NODEDesc");
    openapiFields.add("NODICode");
    openapiFields.add("NPDESViolations");
    openapiFields.add("NmbrOfSubmission");
    openapiFields.add("PermFeatureId");
    openapiFields.add("StatisticalBaseCode");
    openapiFields.add("StatisticalBaseDesc");
    openapiFields.add("StatisticalBaseTypeCode");
    openapiFields.add("StatisticalBaseTypeDesc");
    openapiFields.add("StayValueNmbr");
    openapiFields.add("StdUnitCode");
    openapiFields.add("StdUnitDesc");
    openapiFields.add("ValueReceivedDate");
    openapiFields.add("ValueTypeCode");
    openapiFields.add("ValueTypeDesc");
    openapiFields.add("VersionNmbr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DMREventId");
    openapiRequiredFields.add("DMRFormValueId");
    openapiRequiredFields.add("DMRUnitCode");
    openapiRequiredFields.add("DMRUnitDesc");
    openapiRequiredFields.add("DMRValueId");
    openapiRequiredFields.add("DMRValueNmbr");
    openapiRequiredFields.add("DMRValueQualifierCode");
    openapiRequiredFields.add("DMRValueStdUnits");
    openapiRequiredFields.add("DaysLate");
    openapiRequiredFields.add("ExceedencePct");
    openapiRequiredFields.add("LimitBeginDate");
    openapiRequiredFields.add("LimitEndDate");
    openapiRequiredFields.add("LimitId");
    openapiRequiredFields.add("LimitSetId");
    openapiRequiredFields.add("LimitSetScheduleId");
    openapiRequiredFields.add("LimitTypeCode");
    openapiRequiredFields.add("LimitUnitCode");
    openapiRequiredFields.add("LimitUnitDesc");
    openapiRequiredFields.add("LimitValueId");
    openapiRequiredFields.add("LimitValueNmbr");
    openapiRequiredFields.add("LimitValueQualifierCode");
    openapiRequiredFields.add("LimitValueStdUnits");
    openapiRequiredFields.add("LimitValueTypeCode");
    openapiRequiredFields.add("LimitValueTypeDesc");
    openapiRequiredFields.add("MonitoringPeriodEndDate");
    openapiRequiredFields.add("NODEDesc");
    openapiRequiredFields.add("NODICode");
    openapiRequiredFields.add("NmbrOfSubmission");
    openapiRequiredFields.add("PermFeatureId");
    openapiRequiredFields.add("StatisticalBaseCode");
    openapiRequiredFields.add("StatisticalBaseDesc");
    openapiRequiredFields.add("StatisticalBaseTypeCode");
    openapiRequiredFields.add("StatisticalBaseTypeDesc");
    openapiRequiredFields.add("StayValueNmbr");
    openapiRequiredFields.add("StdUnitCode");
    openapiRequiredFields.add("StdUnitDesc");
    openapiRequiredFields.add("ValueReceivedDate");
    openapiRequiredFields.add("ValueTypeCode");
    openapiRequiredFields.add("ValueTypeDesc");
    openapiRequiredFields.add("VersionNmbr");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff01
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff01.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff01 is not found in the empty JSON string", Eff01.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff01.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff01` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Eff01.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DMREventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMREventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMREventId").toString()));
      }
      if (!jsonObj.get("DMRFormValueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRFormValueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRFormValueId").toString()));
      }
      if (!jsonObj.get("DMRUnitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRUnitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRUnitCode").toString()));
      }
      if (!jsonObj.get("DMRUnitDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRUnitDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRUnitDesc").toString()));
      }
      if (!jsonObj.get("DMRValueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRValueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRValueId").toString()));
      }
      if (!jsonObj.get("DMRValueNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRValueNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRValueNmbr").toString()));
      }
      if (!jsonObj.get("DMRValueQualifierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRValueQualifierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRValueQualifierCode").toString()));
      }
      if (!jsonObj.get("DMRValueStdUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRValueStdUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRValueStdUnits").toString()));
      }
      if (!jsonObj.get("DaysLate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DaysLate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DaysLate").toString()));
      }
      if (!jsonObj.get("ExceedencePct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExceedencePct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExceedencePct").toString()));
      }
      if (!jsonObj.get("LimitBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitBeginDate").toString()));
      }
      if (!jsonObj.get("LimitEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitEndDate").toString()));
      }
      if (!jsonObj.get("LimitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitId").toString()));
      }
      if (!jsonObj.get("LimitSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitSetId").toString()));
      }
      if (!jsonObj.get("LimitSetScheduleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitSetScheduleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitSetScheduleId").toString()));
      }
      if (!jsonObj.get("LimitTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitTypeCode").toString()));
      }
      if (!jsonObj.get("LimitUnitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitUnitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitUnitCode").toString()));
      }
      if (!jsonObj.get("LimitUnitDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitUnitDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitUnitDesc").toString()));
      }
      if (!jsonObj.get("LimitValueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueId").toString()));
      }
      if (!jsonObj.get("LimitValueNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueNmbr").toString()));
      }
      if (!jsonObj.get("LimitValueQualifierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueQualifierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueQualifierCode").toString()));
      }
      if (!jsonObj.get("LimitValueStdUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueStdUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueStdUnits").toString()));
      }
      if (!jsonObj.get("LimitValueTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueTypeCode").toString()));
      }
      if (!jsonObj.get("LimitValueTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitValueTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitValueTypeDesc").toString()));
      }
      if (!jsonObj.get("MonitoringPeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonitoringPeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonitoringPeriodEndDate").toString()));
      }
      if (!jsonObj.get("NODEDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NODEDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NODEDesc").toString()));
      }
      if (!jsonObj.get("NODICode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NODICode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NODICode").toString()));
      }
      if (jsonObj.get("NPDESViolations") != null && !jsonObj.get("NPDESViolations").isJsonNull()) {
        JsonArray jsonArraynpDESViolations = jsonObj.getAsJsonArray("NPDESViolations");
        if (jsonArraynpDESViolations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NPDESViolations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NPDESViolations` to be an array in the JSON string but got `%s`", jsonObj.get("NPDESViolations").toString()));
          }

          // validate the optional field `NPDESViolations` (array)
          for (int i = 0; i < jsonArraynpDESViolations.size(); i++) {
            Eff02.validateJsonElement(jsonArraynpDESViolations.get(i));
          };
        }
      }
      if (!jsonObj.get("NmbrOfSubmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NmbrOfSubmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NmbrOfSubmission").toString()));
      }
      if (!jsonObj.get("PermFeatureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermFeatureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermFeatureId").toString()));
      }
      if (!jsonObj.get("StatisticalBaseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatisticalBaseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatisticalBaseCode").toString()));
      }
      if (!jsonObj.get("StatisticalBaseDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatisticalBaseDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatisticalBaseDesc").toString()));
      }
      if (!jsonObj.get("StatisticalBaseTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatisticalBaseTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatisticalBaseTypeCode").toString()));
      }
      if (!jsonObj.get("StatisticalBaseTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatisticalBaseTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatisticalBaseTypeDesc").toString()));
      }
      if (!jsonObj.get("StayValueNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StayValueNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StayValueNmbr").toString()));
      }
      if (!jsonObj.get("StdUnitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StdUnitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StdUnitCode").toString()));
      }
      if (!jsonObj.get("StdUnitDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StdUnitDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StdUnitDesc").toString()));
      }
      if (!jsonObj.get("ValueReceivedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValueReceivedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValueReceivedDate").toString()));
      }
      if (!jsonObj.get("ValueTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValueTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValueTypeCode").toString()));
      }
      if (!jsonObj.get("ValueTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValueTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValueTypeDesc").toString()));
      }
      if (!jsonObj.get("VersionNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VersionNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VersionNmbr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff01.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff01' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff01> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff01.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff01>() {
           @Override
           public void write(JsonWriter out, Eff01 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff01 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff01 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff01
   * @throws IOException if the JSON string is invalid with respect to Eff01
   */
  public static Eff01 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff01.class);
  }

  /**
   * Convert an instance of Eff01 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

