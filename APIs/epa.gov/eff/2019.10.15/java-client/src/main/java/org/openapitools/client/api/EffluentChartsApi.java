/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EffRestServicesGetEffluentChartGet200Response;
import org.openapitools.client.model.EffRestServicesGetSummaryChartGet200Response;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EffluentChartsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EffluentChartsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EffluentChartsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for effRestServicesDownloadEffluentChartGet
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesDownloadEffluentChartGetCall(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.download_effluent_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        if (outfall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outfall", outfall));
        }

        if (parameterCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_code", parameterCode));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesDownloadEffluentChartGetValidateBeforeCall(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesDownloadEffluentChartGet(Async)");
        }

        return effRestServicesDownloadEffluentChartGetCall(pId, outfall, parameterCode, startDate, endDate, _callback);

    }

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public File effRestServicesDownloadEffluentChartGet(String pId, String outfall, String parameterCode, String startDate, String endDate) throws ApiException {
        ApiResponse<File> localVarResp = effRestServicesDownloadEffluentChartGetWithHttpInfo(pId, outfall, parameterCode, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> effRestServicesDownloadEffluentChartGetWithHttpInfo(String pId, String outfall, String parameterCode, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesDownloadEffluentChartGetValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Effluent Charts Download Service (asynchronously)
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesDownloadEffluentChartGetAsync(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesDownloadEffluentChartGetValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for effRestServicesDownloadEffluentChartPost
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesDownloadEffluentChartPostCall(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.download_effluent_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        if (outfall != null) {
            localVarFormParams.put("outfall", outfall);
        }

        if (parameterCode != null) {
            localVarFormParams.put("parameter_code", parameterCode);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesDownloadEffluentChartPostValidateBeforeCall(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesDownloadEffluentChartPost(Async)");
        }

        return effRestServicesDownloadEffluentChartPostCall(pId, outfall, parameterCode, startDate, endDate, _callback);

    }

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public File effRestServicesDownloadEffluentChartPost(String pId, String outfall, String parameterCode, String startDate, String endDate) throws ApiException {
        ApiResponse<File> localVarResp = effRestServicesDownloadEffluentChartPostWithHttpInfo(pId, outfall, parameterCode, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> effRestServicesDownloadEffluentChartPostWithHttpInfo(String pId, String outfall, String parameterCode, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesDownloadEffluentChartPostValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Effluent Charts Download Service (asynchronously)
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesDownloadEffluentChartPostAsync(String pId, String outfall, String parameterCode, String startDate, String endDate, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesDownloadEffluentChartPostValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for effRestServicesGetEffluentChartGet
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetEffluentChartGetCall(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.get_effluent_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        if (outfall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outfall", outfall));
        }

        if (parameterCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_code", parameterCode));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesGetEffluentChartGetValidateBeforeCall(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesGetEffluentChartGet(Async)");
        }

        return effRestServicesGetEffluentChartGetCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, _callback);

    }

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @return EffRestServicesGetEffluentChartGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public EffRestServicesGetEffluentChartGet200Response effRestServicesGetEffluentChartGet(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback) throws ApiException {
        ApiResponse<EffRestServicesGetEffluentChartGet200Response> localVarResp = effRestServicesGetEffluentChartGetWithHttpInfo(pId, outfall, parameterCode, startDate, endDate, output, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @return ApiResponse&lt;EffRestServicesGetEffluentChartGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EffRestServicesGetEffluentChartGet200Response> effRestServicesGetEffluentChartGetWithHttpInfo(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesGetEffluentChartGetValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, null);
        Type localVarReturnType = new TypeToken<EffRestServicesGetEffluentChartGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detailed Effluent Chart Service (asynchronously)
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetEffluentChartGetAsync(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback<EffRestServicesGetEffluentChartGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesGetEffluentChartGetValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<EffRestServicesGetEffluentChartGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for effRestServicesGetEffluentChartPost
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetEffluentChartPostCall(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.get_effluent_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        if (outfall != null) {
            localVarFormParams.put("outfall", outfall);
        }

        if (parameterCode != null) {
            localVarFormParams.put("parameter_code", parameterCode);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesGetEffluentChartPostValidateBeforeCall(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesGetEffluentChartPost(Async)");
        }

        return effRestServicesGetEffluentChartPostCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, _callback);

    }

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @return EffRestServicesGetEffluentChartGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public EffRestServicesGetEffluentChartGet200Response effRestServicesGetEffluentChartPost(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback) throws ApiException {
        ApiResponse<EffRestServicesGetEffluentChartGet200Response> localVarResp = effRestServicesGetEffluentChartPostWithHttpInfo(pId, outfall, parameterCode, startDate, endDate, output, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @return ApiResponse&lt;EffRestServicesGetEffluentChartGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EffRestServicesGetEffluentChartGet200Response> effRestServicesGetEffluentChartPostWithHttpInfo(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesGetEffluentChartPostValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, null);
        Type localVarReturnType = new TypeToken<EffRestServicesGetEffluentChartGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detailed Effluent Chart Service (asynchronously)
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param pId Identifier for the service. (required)
     * @param outfall Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge. (optional)
     * @param parameterCode Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with detailed effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetEffluentChartPostAsync(String pId, String outfall, String parameterCode, String startDate, String endDate, String output, String paramCallback, final ApiCallback<EffRestServicesGetEffluentChartGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesGetEffluentChartPostValidateBeforeCall(pId, outfall, parameterCode, startDate, endDate, output, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<EffRestServicesGetEffluentChartGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for effRestServicesGetSummaryChartGet
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetSummaryChartGetCall(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.get_summary_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesGetSummaryChartGetValidateBeforeCall(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesGetSummaryChartGet(Async)");
        }

        return effRestServicesGetSummaryChartGetCall(pId, output, paramCallback, startDate, endDate, _callback);

    }

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return EffRestServicesGetSummaryChartGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public EffRestServicesGetSummaryChartGet200Response effRestServicesGetSummaryChartGet(String pId, String output, String paramCallback, String startDate, String endDate) throws ApiException {
        ApiResponse<EffRestServicesGetSummaryChartGet200Response> localVarResp = effRestServicesGetSummaryChartGetWithHttpInfo(pId, output, paramCallback, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return ApiResponse&lt;EffRestServicesGetSummaryChartGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EffRestServicesGetSummaryChartGet200Response> effRestServicesGetSummaryChartGetWithHttpInfo(String pId, String output, String paramCallback, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesGetSummaryChartGetValidateBeforeCall(pId, output, paramCallback, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<EffRestServicesGetSummaryChartGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Effluent Chart Service (asynchronously)
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetSummaryChartGetAsync(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback<EffRestServicesGetSummaryChartGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesGetSummaryChartGetValidateBeforeCall(pId, output, paramCallback, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<EffRestServicesGetSummaryChartGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for effRestServicesGetSummaryChartPost
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetSummaryChartPostCall(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eff_rest_services.get_summary_chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call effRestServicesGetSummaryChartPostValidateBeforeCall(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling effRestServicesGetSummaryChartPost(Async)");
        }

        return effRestServicesGetSummaryChartPostCall(pId, output, paramCallback, startDate, endDate, _callback);

    }

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return EffRestServicesGetSummaryChartGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public EffRestServicesGetSummaryChartGet200Response effRestServicesGetSummaryChartPost(String pId, String output, String paramCallback, String startDate, String endDate) throws ApiException {
        ApiResponse<EffRestServicesGetSummaryChartGet200Response> localVarResp = effRestServicesGetSummaryChartPostWithHttpInfo(pId, output, paramCallback, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @return ApiResponse&lt;EffRestServicesGetSummaryChartGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EffRestServicesGetSummaryChartGet200Response> effRestServicesGetSummaryChartPostWithHttpInfo(String pId, String output, String paramCallback, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = effRestServicesGetSummaryChartPostValidateBeforeCall(pId, output, paramCallback, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<EffRestServicesGetSummaryChartGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Effluent Chart Service (asynchronously)
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param startDate The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param endDate The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object with summary effluent information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call effRestServicesGetSummaryChartPostAsync(String pId, String output, String paramCallback, String startDate, String endDate, final ApiCallback<EffRestServicesGetSummaryChartGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = effRestServicesGetSummaryChartPostValidateBeforeCall(pId, output, paramCallback, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<EffRestServicesGetSummaryChartGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
