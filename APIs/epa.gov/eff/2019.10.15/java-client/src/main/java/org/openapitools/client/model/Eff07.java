/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff07 {
  public static final String SERIALIZED_NAME_CURRENT_VIO_STATUS = "CurrentVioStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_VIO_STATUS)
  private String currentVioStatus;

  public static final String SERIALIZED_NAME_MAX_VIO_STATUS = "MaxVioStatus";
  @SerializedName(SERIALIZED_NAME_MAX_VIO_STATUS)
  private String maxVioStatus;

  public static final String SERIALIZED_NAME_PARAMETER_CODE = "ParameterCode";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CODE)
  private String parameterCode;

  public static final String SERIALIZED_NAME_PARAMETER_DESC = "ParameterDesc";
  @SerializedName(SERIALIZED_NAME_PARAMETER_DESC)
  private String parameterDesc;

  public Eff07() {
  }

  public Eff07 currentVioStatus(String currentVioStatus) {
    this.currentVioStatus = currentVioStatus;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the current monitoring period
   * @return currentVioStatus
   */
  @javax.annotation.Nonnull
  public String getCurrentVioStatus() {
    return currentVioStatus;
  }

  public void setCurrentVioStatus(String currentVioStatus) {
    this.currentVioStatus = currentVioStatus;
  }


  public Eff07 maxVioStatus(String maxVioStatus) {
    this.maxVioStatus = maxVioStatus;
    return this;
  }

  /**
   * The most severe compliance status for an outfall and parameter during the entire selected date range
   * @return maxVioStatus
   */
  @javax.annotation.Nonnull
  public String getMaxVioStatus() {
    return maxVioStatus;
  }

  public void setMaxVioStatus(String maxVioStatus) {
    this.maxVioStatus = maxVioStatus;
  }


  public Eff07 parameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
    return this;
  }

  /**
   * The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)
   * @return parameterCode
   */
  @javax.annotation.Nonnull
  public String getParameterCode() {
    return parameterCode;
  }

  public void setParameterCode(String parameterCode) {
    this.parameterCode = parameterCode;
  }


  public Eff07 parameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
    return this;
  }

  /**
   * The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code
   * @return parameterDesc
   */
  @javax.annotation.Nonnull
  public String getParameterDesc() {
    return parameterDesc;
  }

  public void setParameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff07 eff07 = (Eff07) o;
    return Objects.equals(this.currentVioStatus, eff07.currentVioStatus) &&
        Objects.equals(this.maxVioStatus, eff07.maxVioStatus) &&
        Objects.equals(this.parameterCode, eff07.parameterCode) &&
        Objects.equals(this.parameterDesc, eff07.parameterDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentVioStatus, maxVioStatus, parameterCode, parameterDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff07 {\n");
    sb.append("    currentVioStatus: ").append(toIndentedString(currentVioStatus)).append("\n");
    sb.append("    maxVioStatus: ").append(toIndentedString(maxVioStatus)).append("\n");
    sb.append("    parameterCode: ").append(toIndentedString(parameterCode)).append("\n");
    sb.append("    parameterDesc: ").append(toIndentedString(parameterDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentVioStatus");
    openapiFields.add("MaxVioStatus");
    openapiFields.add("ParameterCode");
    openapiFields.add("ParameterDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentVioStatus");
    openapiRequiredFields.add("MaxVioStatus");
    openapiRequiredFields.add("ParameterCode");
    openapiRequiredFields.add("ParameterDesc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff07
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff07.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff07 is not found in the empty JSON string", Eff07.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff07.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff07` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Eff07.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CurrentVioStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentVioStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentVioStatus").toString()));
      }
      if (!jsonObj.get("MaxVioStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxVioStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxVioStatus").toString()));
      }
      if (!jsonObj.get("ParameterCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterCode").toString()));
      }
      if (!jsonObj.get("ParameterDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff07.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff07' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff07> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff07.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff07>() {
           @Override
           public void write(JsonWriter out, Eff07 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff07 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff07 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff07
   * @throws IOException if the JSON string is invalid with respect to Eff07
   */
  public static Eff07 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff07.class);
  }

  /**
   * Convert an instance of Eff07 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

