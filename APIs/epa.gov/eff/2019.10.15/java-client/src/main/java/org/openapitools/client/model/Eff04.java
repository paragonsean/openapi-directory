/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Eff03;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permit Features Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff04 {
  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<Eff03> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERM_FEATURE_NMBR = "PermFeatureNmbr";
  @SerializedName(SERIALIZED_NAME_PERM_FEATURE_NMBR)
  private String permFeatureNmbr;

  public static final String SERIALIZED_NAME_PERM_FEATURE_TYPE_CODE = "PermFeatureTypeCode";
  @SerializedName(SERIALIZED_NAME_PERM_FEATURE_TYPE_CODE)
  private String permFeatureTypeCode;

  public static final String SERIALIZED_NAME_PERM_FEATURE_TYPE_DESC = "PermFeatureTypeDesc";
  @SerializedName(SERIALIZED_NAME_PERM_FEATURE_TYPE_DESC)
  private String permFeatureTypeDesc;

  public Eff04() {
  }

  public Eff04 parameters(List<Eff03> parameters) {
    this.parameters = parameters;
    return this;
  }

  public Eff04 addParametersItem(Eff03 parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Array of Effuent Limit Parameters
   * @return parameters
   */
  @javax.annotation.Nonnull
  public List<Eff03> getParameters() {
    return parameters;
  }

  public void setParameters(List<Eff03> parameters) {
    this.parameters = parameters;
  }


  public Eff04 permFeatureNmbr(String permFeatureNmbr) {
    this.permFeatureNmbr = permFeatureNmbr;
    return this;
  }

  /**
   * A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
   * @return permFeatureNmbr
   */
  @javax.annotation.Nonnull
  public String getPermFeatureNmbr() {
    return permFeatureNmbr;
  }

  public void setPermFeatureNmbr(String permFeatureNmbr) {
    this.permFeatureNmbr = permFeatureNmbr;
  }


  public Eff04 permFeatureTypeCode(String permFeatureTypeCode) {
    this.permFeatureTypeCode = permFeatureTypeCode;
    return this;
  }

  /**
   * The code indicating the type of permitted feature (e.g., EXO)
   * @return permFeatureTypeCode
   */
  @javax.annotation.Nonnull
  public String getPermFeatureTypeCode() {
    return permFeatureTypeCode;
  }

  public void setPermFeatureTypeCode(String permFeatureTypeCode) {
    this.permFeatureTypeCode = permFeatureTypeCode;
  }


  public Eff04 permFeatureTypeDesc(String permFeatureTypeDesc) {
    this.permFeatureTypeDesc = permFeatureTypeDesc;
    return this;
  }

  /**
   * The description indicating the type of permitted feature (e.g., External Outfall, Internal Outfall, Sum)
   * @return permFeatureTypeDesc
   */
  @javax.annotation.Nonnull
  public String getPermFeatureTypeDesc() {
    return permFeatureTypeDesc;
  }

  public void setPermFeatureTypeDesc(String permFeatureTypeDesc) {
    this.permFeatureTypeDesc = permFeatureTypeDesc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff04 eff04 = (Eff04) o;
    return Objects.equals(this.parameters, eff04.parameters) &&
        Objects.equals(this.permFeatureNmbr, eff04.permFeatureNmbr) &&
        Objects.equals(this.permFeatureTypeCode, eff04.permFeatureTypeCode) &&
        Objects.equals(this.permFeatureTypeDesc, eff04.permFeatureTypeDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameters, permFeatureNmbr, permFeatureTypeCode, permFeatureTypeDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff04 {\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    permFeatureNmbr: ").append(toIndentedString(permFeatureNmbr)).append("\n");
    sb.append("    permFeatureTypeCode: ").append(toIndentedString(permFeatureTypeCode)).append("\n");
    sb.append("    permFeatureTypeDesc: ").append(toIndentedString(permFeatureTypeDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Parameters");
    openapiFields.add("PermFeatureNmbr");
    openapiFields.add("PermFeatureTypeCode");
    openapiFields.add("PermFeatureTypeDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Parameters");
    openapiRequiredFields.add("PermFeatureNmbr");
    openapiRequiredFields.add("PermFeatureTypeCode");
    openapiRequiredFields.add("PermFeatureTypeDesc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff04
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff04.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff04 is not found in the empty JSON string", Eff04.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff04.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff04` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Eff04.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
      }

      JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
      // validate the required field `Parameters` (array)
      for (int i = 0; i < jsonArrayparameters.size(); i++) {
        Eff03.validateJsonElement(jsonArrayparameters.get(i));
      };
      if (!jsonObj.get("PermFeatureNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermFeatureNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermFeatureNmbr").toString()));
      }
      if (!jsonObj.get("PermFeatureTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermFeatureTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermFeatureTypeCode").toString()));
      }
      if (!jsonObj.get("PermFeatureTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermFeatureTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermFeatureTypeDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff04.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff04' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff04> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff04.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff04>() {
           @Override
           public void write(JsonWriter out, Eff04 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff04 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff04 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff04
   * @throws IOException if the JSON string is invalid with respect to Eff04
   */
  public static Eff04 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff04.class);
  }

  /**
   * Convert an instance of Eff04 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

