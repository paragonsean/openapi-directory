/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NPDES Violations Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:14.258408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Eff02 {
  public static final String SERIALIZED_NAME_NP_D_E_S_VIOLATION_ID = "NPDESViolationId";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_VIOLATION_ID)
  private String npDESViolationId;

  public static final String SERIALIZED_NAME_RN_C_DETECTION_CODE = "RNCDetectionCode";
  @SerializedName(SERIALIZED_NAME_RN_C_DETECTION_CODE)
  private String rnCDetectionCode;

  public static final String SERIALIZED_NAME_RN_C_DETECTION_DATE = "RNCDetectionDate";
  @SerializedName(SERIALIZED_NAME_RN_C_DETECTION_DATE)
  private String rnCDetectionDate;

  public static final String SERIALIZED_NAME_RN_C_DETECTION_DESC = "RNCDetectionDesc";
  @SerializedName(SERIALIZED_NAME_RN_C_DETECTION_DESC)
  private String rnCDetectionDesc;

  public static final String SERIALIZED_NAME_RN_C_RESOLUTION_CODE = "RNCResolutionCode";
  @SerializedName(SERIALIZED_NAME_RN_C_RESOLUTION_CODE)
  private String rnCResolutionCode;

  public static final String SERIALIZED_NAME_RN_C_RESOLUTION_DATE = "RNCResolutionDate";
  @SerializedName(SERIALIZED_NAME_RN_C_RESOLUTION_DATE)
  private String rnCResolutionDate;

  public static final String SERIALIZED_NAME_RN_C_RESOLUTION_DESC = "RNCResolutionDesc";
  @SerializedName(SERIALIZED_NAME_RN_C_RESOLUTION_DESC)
  private String rnCResolutionDesc;

  public static final String SERIALIZED_NAME_VIOLATION_CODE = "ViolationCode";
  @SerializedName(SERIALIZED_NAME_VIOLATION_CODE)
  private String violationCode;

  public static final String SERIALIZED_NAME_VIOLATION_DESC = "ViolationDesc";
  @SerializedName(SERIALIZED_NAME_VIOLATION_DESC)
  private String violationDesc;

  public static final String SERIALIZED_NAME_VIOLATION_SEVERITY = "ViolationSeverity";
  @SerializedName(SERIALIZED_NAME_VIOLATION_SEVERITY)
  private String violationSeverity;

  public static final String SERIALIZED_NAME_VIOLATION_SEVERITY_DESC = "ViolationSeverityDesc";
  @SerializedName(SERIALIZED_NAME_VIOLATION_SEVERITY_DESC)
  private String violationSeverityDesc;

  public Eff02() {
  }

  public Eff02 npDESViolationId(String npDESViolationId) {
    this.npDESViolationId = npDESViolationId;
    return this;
  }

  /**
   * The unique identifier in ICIS-NPDES for the NPDES Violation
   * @return npDESViolationId
   */
  @javax.annotation.Nullable
  public String getNpDESViolationId() {
    return npDESViolationId;
  }

  public void setNpDESViolationId(String npDESViolationId) {
    this.npDESViolationId = npDESViolationId;
  }


  public Eff02 rnCDetectionCode(String rnCDetectionCode) {
    this.rnCDetectionCode = rnCDetectionCode;
    return this;
  }

  /**
   * The code indicating the reportable noncompliance (RNC) detected for a violation: - A &#x3D; Enforcement Order - B &#x3D; Manual 2A4 - Pass-Through - C &#x3D; Chronic Violation - D &#x3D; Manual Other - E &#x3D; Manual 2F - Permit Narrative - F &#x3D; Manual 2G - Violation of Concern - G &#x3D; Manual 2A1 - Effluent Violation - H &#x3D; Chronic Violation, Non-Monthly Average - I &#x3D; Manual 2A2 - Unauthorized Bypass - J &#x3D; Manual 2A3 - Unpermitted Discharge - K &#x3D; Non-receipt Violation, Non-Monthly Average - N &#x3D; Non-Receipt of DMR/Schedule Report - P &#x3D; Enforcement Order, Non-Monthly Average - Q &#x3D; Manual 2B - Pretreatment - R &#x3D; TRC Limitations Exceeded, Non-Monthly Average - S &#x3D; Schedule Violation - T &#x3D; TRC Limitations Exceeded - U &#x3D; Other Violation with TRC Non-Monthly Average - V &#x3D; Other Violation with TRC - W &#x3D; Manual 2E - Deficient Report - X &#x3D; Manual Other Violation with TRC - Y &#x3D; Manual TRC - Z &#x3D; Manual Chronic
   * @return rnCDetectionCode
   */
  @javax.annotation.Nullable
  public String getRnCDetectionCode() {
    return rnCDetectionCode;
  }

  public void setRnCDetectionCode(String rnCDetectionCode) {
    this.rnCDetectionCode = rnCDetectionCode;
  }


  public Eff02 rnCDetectionDate(String rnCDetectionDate) {
    this.rnCDetectionDate = rnCDetectionDate;
    return this;
  }

  /**
   * The date that the exceedance was detected
   * @return rnCDetectionDate
   */
  @javax.annotation.Nullable
  public String getRnCDetectionDate() {
    return rnCDetectionDate;
  }

  public void setRnCDetectionDate(String rnCDetectionDate) {
    this.rnCDetectionDate = rnCDetectionDate;
  }


  public Eff02 rnCDetectionDesc(String rnCDetectionDesc) {
    this.rnCDetectionDesc = rnCDetectionDesc;
    return this;
  }

  /**
   * A description of the reportable noncompliance (RNC) detected
   * @return rnCDetectionDesc
   */
  @javax.annotation.Nullable
  public String getRnCDetectionDesc() {
    return rnCDetectionDesc;
  }

  public void setRnCDetectionDesc(String rnCDetectionDesc) {
    this.rnCDetectionDesc = rnCDetectionDesc;
  }


  public Eff02 rnCResolutionCode(String rnCResolutionCode) {
    this.rnCResolutionCode = rnCResolutionCode;
    return this;
  }

  /**
   * The code indicating the resolution of noncompliance (RNC) for a violation
   * @return rnCResolutionCode
   */
  @javax.annotation.Nullable
  public String getRnCResolutionCode() {
    return rnCResolutionCode;
  }

  public void setRnCResolutionCode(String rnCResolutionCode) {
    this.rnCResolutionCode = rnCResolutionCode;
  }


  public Eff02 rnCResolutionDate(String rnCResolutionDate) {
    this.rnCResolutionDate = rnCResolutionDate;
    return this;
  }

  /**
   * The date RNC was marked to its current resolution status. It can be entered manually or automatically
   * @return rnCResolutionDate
   */
  @javax.annotation.Nullable
  public String getRnCResolutionDate() {
    return rnCResolutionDate;
  }

  public void setRnCResolutionDate(String rnCResolutionDate) {
    this.rnCResolutionDate = rnCResolutionDate;
  }


  public Eff02 rnCResolutionDesc(String rnCResolutionDesc) {
    this.rnCResolutionDesc = rnCResolutionDesc;
    return this;
  }

  /**
   * - 1 &#x3D; Unresolved RNC - 2 &#x3D; Back into Compliance - 3 &#x3D; Due to Formal Enforcement Action Final Order with Compliance Schedule - 4 &#x3D; In Compliance with Formal Enforcement Action Final Order Requirement - 5 &#x3D; Resolved RP by NPDES Closure of Enforcement Action Final Order with Compliance Schedule - 6 &#x3D; Manual Resolution by Enforcement Action - 7 &#x3D; Manual RP - In Compliance with Formal Enforcement Action Order Requirement - 8 &#x3D; Manual Due to Formal Enforcement Action Formal Order - 9 &#x3D; Manual by Back into Compliance - A &#x3D; Manual Unresolved RNC - B &#x3D; Manual by EPA/State/Tribal Action
   * @return rnCResolutionDesc
   */
  @javax.annotation.Nullable
  public String getRnCResolutionDesc() {
    return rnCResolutionDesc;
  }

  public void setRnCResolutionDesc(String rnCResolutionDesc) {
    this.rnCResolutionDesc = rnCResolutionDesc;
  }


  public Eff02 violationCode(String violationCode) {
    this.violationCode = violationCode;
    return this;
  }

  /**
   * The code identifying which type of Violation has occurred (e.g., D80 &#x3D; Required Monitoring DMR Value Non-Receipt, E90 &#x3D; Effluent Violation, C20 &#x3D; Schedule Event Achieved Late)
   * @return violationCode
   */
  @javax.annotation.Nullable
  public String getViolationCode() {
    return violationCode;
  }

  public void setViolationCode(String violationCode) {
    this.violationCode = violationCode;
  }


  public Eff02 violationDesc(String violationDesc) {
    this.violationDesc = violationDesc;
    return this;
  }

  /**
   * A description of which type of violation has occurred
   * @return violationDesc
   */
  @javax.annotation.Nullable
  public String getViolationDesc() {
    return violationDesc;
  }

  public void setViolationDesc(String violationDesc) {
    this.violationDesc = violationDesc;
  }


  public Eff02 violationSeverity(String violationSeverity) {
    this.violationSeverity = violationSeverity;
    return this;
  }

  /**
   * - 0 &#x3D; no violation. - 1 &#x3D; monitoring or reporting violation - 2 &#x3D; effluent violation, i.e., discharge in excess of permitted limit - 3 &#x3D; reportable noncompliance - 5 &#x3D; significant noncompliance
   * @return violationSeverity
   */
  @javax.annotation.Nullable
  public String getViolationSeverity() {
    return violationSeverity;
  }

  public void setViolationSeverity(String violationSeverity) {
    this.violationSeverity = violationSeverity;
  }


  public Eff02 violationSeverityDesc(String violationSeverityDesc) {
    this.violationSeverityDesc = violationSeverityDesc;
    return this;
  }

  /**
   * Get violationSeverityDesc
   * @return violationSeverityDesc
   */
  @javax.annotation.Nullable
  public String getViolationSeverityDesc() {
    return violationSeverityDesc;
  }

  public void setViolationSeverityDesc(String violationSeverityDesc) {
    this.violationSeverityDesc = violationSeverityDesc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eff02 eff02 = (Eff02) o;
    return Objects.equals(this.npDESViolationId, eff02.npDESViolationId) &&
        Objects.equals(this.rnCDetectionCode, eff02.rnCDetectionCode) &&
        Objects.equals(this.rnCDetectionDate, eff02.rnCDetectionDate) &&
        Objects.equals(this.rnCDetectionDesc, eff02.rnCDetectionDesc) &&
        Objects.equals(this.rnCResolutionCode, eff02.rnCResolutionCode) &&
        Objects.equals(this.rnCResolutionDate, eff02.rnCResolutionDate) &&
        Objects.equals(this.rnCResolutionDesc, eff02.rnCResolutionDesc) &&
        Objects.equals(this.violationCode, eff02.violationCode) &&
        Objects.equals(this.violationDesc, eff02.violationDesc) &&
        Objects.equals(this.violationSeverity, eff02.violationSeverity) &&
        Objects.equals(this.violationSeverityDesc, eff02.violationSeverityDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(npDESViolationId, rnCDetectionCode, rnCDetectionDate, rnCDetectionDesc, rnCResolutionCode, rnCResolutionDate, rnCResolutionDesc, violationCode, violationDesc, violationSeverity, violationSeverityDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eff02 {\n");
    sb.append("    npDESViolationId: ").append(toIndentedString(npDESViolationId)).append("\n");
    sb.append("    rnCDetectionCode: ").append(toIndentedString(rnCDetectionCode)).append("\n");
    sb.append("    rnCDetectionDate: ").append(toIndentedString(rnCDetectionDate)).append("\n");
    sb.append("    rnCDetectionDesc: ").append(toIndentedString(rnCDetectionDesc)).append("\n");
    sb.append("    rnCResolutionCode: ").append(toIndentedString(rnCResolutionCode)).append("\n");
    sb.append("    rnCResolutionDate: ").append(toIndentedString(rnCResolutionDate)).append("\n");
    sb.append("    rnCResolutionDesc: ").append(toIndentedString(rnCResolutionDesc)).append("\n");
    sb.append("    violationCode: ").append(toIndentedString(violationCode)).append("\n");
    sb.append("    violationDesc: ").append(toIndentedString(violationDesc)).append("\n");
    sb.append("    violationSeverity: ").append(toIndentedString(violationSeverity)).append("\n");
    sb.append("    violationSeverityDesc: ").append(toIndentedString(violationSeverityDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NPDESViolationId");
    openapiFields.add("RNCDetectionCode");
    openapiFields.add("RNCDetectionDate");
    openapiFields.add("RNCDetectionDesc");
    openapiFields.add("RNCResolutionCode");
    openapiFields.add("RNCResolutionDate");
    openapiFields.add("RNCResolutionDesc");
    openapiFields.add("ViolationCode");
    openapiFields.add("ViolationDesc");
    openapiFields.add("ViolationSeverity");
    openapiFields.add("ViolationSeverityDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Eff02
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Eff02.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Eff02 is not found in the empty JSON string", Eff02.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Eff02.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Eff02` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NPDESViolationId") != null && !jsonObj.get("NPDESViolationId").isJsonNull()) && !jsonObj.get("NPDESViolationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESViolationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESViolationId").toString()));
      }
      if ((jsonObj.get("RNCDetectionCode") != null && !jsonObj.get("RNCDetectionCode").isJsonNull()) && !jsonObj.get("RNCDetectionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCDetectionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCDetectionCode").toString()));
      }
      if ((jsonObj.get("RNCDetectionDate") != null && !jsonObj.get("RNCDetectionDate").isJsonNull()) && !jsonObj.get("RNCDetectionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCDetectionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCDetectionDate").toString()));
      }
      if ((jsonObj.get("RNCDetectionDesc") != null && !jsonObj.get("RNCDetectionDesc").isJsonNull()) && !jsonObj.get("RNCDetectionDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCDetectionDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCDetectionDesc").toString()));
      }
      if ((jsonObj.get("RNCResolutionCode") != null && !jsonObj.get("RNCResolutionCode").isJsonNull()) && !jsonObj.get("RNCResolutionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCResolutionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCResolutionCode").toString()));
      }
      if ((jsonObj.get("RNCResolutionDate") != null && !jsonObj.get("RNCResolutionDate").isJsonNull()) && !jsonObj.get("RNCResolutionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCResolutionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCResolutionDate").toString()));
      }
      if ((jsonObj.get("RNCResolutionDesc") != null && !jsonObj.get("RNCResolutionDesc").isJsonNull()) && !jsonObj.get("RNCResolutionDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RNCResolutionDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RNCResolutionDesc").toString()));
      }
      if ((jsonObj.get("ViolationCode") != null && !jsonObj.get("ViolationCode").isJsonNull()) && !jsonObj.get("ViolationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationCode").toString()));
      }
      if ((jsonObj.get("ViolationDesc") != null && !jsonObj.get("ViolationDesc").isJsonNull()) && !jsonObj.get("ViolationDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationDesc").toString()));
      }
      if ((jsonObj.get("ViolationSeverity") != null && !jsonObj.get("ViolationSeverity").isJsonNull()) && !jsonObj.get("ViolationSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationSeverity").toString()));
      }
      if ((jsonObj.get("ViolationSeverityDesc") != null && !jsonObj.get("ViolationSeverityDesc").isJsonNull()) && !jsonObj.get("ViolationSeverityDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationSeverityDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationSeverityDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Eff02.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Eff02' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Eff02> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Eff02.class));

       return (TypeAdapter<T>) new TypeAdapter<Eff02>() {
           @Override
           public void write(JsonWriter out, Eff02 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Eff02 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Eff02 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Eff02
   * @throws IOException if the JSON string is invalid with respect to Eff02
   */
  public static Eff02 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Eff02.class);
  }

  /**
   * Convert an instance of Eff02 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

