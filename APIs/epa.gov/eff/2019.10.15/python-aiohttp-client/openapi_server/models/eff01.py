# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eff02 import Eff02
from openapi_server import util


class Eff01(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dmr_event_id: str=None, dmr_form_value_id: str=None, dmr_unit_code: str=None, dmr_unit_desc: str=None, dmr_value_id: str=None, dmr_value_nmbr: str=None, dmr_value_qualifier_code: str=None, dmr_value_std_units: str=None, days_late: str=None, exceedence_pct: str=None, limit_begin_date: str=None, limit_end_date: str=None, limit_id: str=None, limit_set_id: str=None, limit_set_schedule_id: str=None, limit_type_code: str=None, limit_unit_code: str=None, limit_unit_desc: str=None, limit_value_id: str=None, limit_value_nmbr: str=None, limit_value_qualifier_code: str=None, limit_value_std_units: str=None, limit_value_type_code: str=None, limit_value_type_desc: str=None, monitoring_period_end_date: str=None, node_desc: str=None, nodi_code: str=None, npdes_violations: List[Eff02]=None, nmbr_of_submission: str=None, perm_feature_id: str=None, statistical_base_code: str=None, statistical_base_desc: str=None, statistical_base_type_code: str=None, statistical_base_type_desc: str=None, stay_value_nmbr: str=None, std_unit_code: str=None, std_unit_desc: str=None, value_received_date: str=None, value_type_code: str=None, value_type_desc: str=None, version_nmbr: str=None):
        """Eff01 - a model defined in OpenAPI

        :param dmr_event_id: The dmr_event_id of this Eff01.
        :param dmr_form_value_id: The dmr_form_value_id of this Eff01.
        :param dmr_unit_code: The dmr_unit_code of this Eff01.
        :param dmr_unit_desc: The dmr_unit_desc of this Eff01.
        :param dmr_value_id: The dmr_value_id of this Eff01.
        :param dmr_value_nmbr: The dmr_value_nmbr of this Eff01.
        :param dmr_value_qualifier_code: The dmr_value_qualifier_code of this Eff01.
        :param dmr_value_std_units: The dmr_value_std_units of this Eff01.
        :param days_late: The days_late of this Eff01.
        :param exceedence_pct: The exceedence_pct of this Eff01.
        :param limit_begin_date: The limit_begin_date of this Eff01.
        :param limit_end_date: The limit_end_date of this Eff01.
        :param limit_id: The limit_id of this Eff01.
        :param limit_set_id: The limit_set_id of this Eff01.
        :param limit_set_schedule_id: The limit_set_schedule_id of this Eff01.
        :param limit_type_code: The limit_type_code of this Eff01.
        :param limit_unit_code: The limit_unit_code of this Eff01.
        :param limit_unit_desc: The limit_unit_desc of this Eff01.
        :param limit_value_id: The limit_value_id of this Eff01.
        :param limit_value_nmbr: The limit_value_nmbr of this Eff01.
        :param limit_value_qualifier_code: The limit_value_qualifier_code of this Eff01.
        :param limit_value_std_units: The limit_value_std_units of this Eff01.
        :param limit_value_type_code: The limit_value_type_code of this Eff01.
        :param limit_value_type_desc: The limit_value_type_desc of this Eff01.
        :param monitoring_period_end_date: The monitoring_period_end_date of this Eff01.
        :param node_desc: The node_desc of this Eff01.
        :param nodi_code: The nodi_code of this Eff01.
        :param npdes_violations: The npdes_violations of this Eff01.
        :param nmbr_of_submission: The nmbr_of_submission of this Eff01.
        :param perm_feature_id: The perm_feature_id of this Eff01.
        :param statistical_base_code: The statistical_base_code of this Eff01.
        :param statistical_base_desc: The statistical_base_desc of this Eff01.
        :param statistical_base_type_code: The statistical_base_type_code of this Eff01.
        :param statistical_base_type_desc: The statistical_base_type_desc of this Eff01.
        :param stay_value_nmbr: The stay_value_nmbr of this Eff01.
        :param std_unit_code: The std_unit_code of this Eff01.
        :param std_unit_desc: The std_unit_desc of this Eff01.
        :param value_received_date: The value_received_date of this Eff01.
        :param value_type_code: The value_type_code of this Eff01.
        :param value_type_desc: The value_type_desc of this Eff01.
        :param version_nmbr: The version_nmbr of this Eff01.
        """
        self.openapi_types = {
            'dmr_event_id': str,
            'dmr_form_value_id': str,
            'dmr_unit_code': str,
            'dmr_unit_desc': str,
            'dmr_value_id': str,
            'dmr_value_nmbr': str,
            'dmr_value_qualifier_code': str,
            'dmr_value_std_units': str,
            'days_late': str,
            'exceedence_pct': str,
            'limit_begin_date': str,
            'limit_end_date': str,
            'limit_id': str,
            'limit_set_id': str,
            'limit_set_schedule_id': str,
            'limit_type_code': str,
            'limit_unit_code': str,
            'limit_unit_desc': str,
            'limit_value_id': str,
            'limit_value_nmbr': str,
            'limit_value_qualifier_code': str,
            'limit_value_std_units': str,
            'limit_value_type_code': str,
            'limit_value_type_desc': str,
            'monitoring_period_end_date': str,
            'node_desc': str,
            'nodi_code': str,
            'npdes_violations': List[Eff02],
            'nmbr_of_submission': str,
            'perm_feature_id': str,
            'statistical_base_code': str,
            'statistical_base_desc': str,
            'statistical_base_type_code': str,
            'statistical_base_type_desc': str,
            'stay_value_nmbr': str,
            'std_unit_code': str,
            'std_unit_desc': str,
            'value_received_date': str,
            'value_type_code': str,
            'value_type_desc': str,
            'version_nmbr': str
        }

        self.attribute_map = {
            'dmr_event_id': 'DMREventId',
            'dmr_form_value_id': 'DMRFormValueId',
            'dmr_unit_code': 'DMRUnitCode',
            'dmr_unit_desc': 'DMRUnitDesc',
            'dmr_value_id': 'DMRValueId',
            'dmr_value_nmbr': 'DMRValueNmbr',
            'dmr_value_qualifier_code': 'DMRValueQualifierCode',
            'dmr_value_std_units': 'DMRValueStdUnits',
            'days_late': 'DaysLate',
            'exceedence_pct': 'ExceedencePct',
            'limit_begin_date': 'LimitBeginDate',
            'limit_end_date': 'LimitEndDate',
            'limit_id': 'LimitId',
            'limit_set_id': 'LimitSetId',
            'limit_set_schedule_id': 'LimitSetScheduleId',
            'limit_type_code': 'LimitTypeCode',
            'limit_unit_code': 'LimitUnitCode',
            'limit_unit_desc': 'LimitUnitDesc',
            'limit_value_id': 'LimitValueId',
            'limit_value_nmbr': 'LimitValueNmbr',
            'limit_value_qualifier_code': 'LimitValueQualifierCode',
            'limit_value_std_units': 'LimitValueStdUnits',
            'limit_value_type_code': 'LimitValueTypeCode',
            'limit_value_type_desc': 'LimitValueTypeDesc',
            'monitoring_period_end_date': 'MonitoringPeriodEndDate',
            'node_desc': 'NODEDesc',
            'nodi_code': 'NODICode',
            'npdes_violations': 'NPDESViolations',
            'nmbr_of_submission': 'NmbrOfSubmission',
            'perm_feature_id': 'PermFeatureId',
            'statistical_base_code': 'StatisticalBaseCode',
            'statistical_base_desc': 'StatisticalBaseDesc',
            'statistical_base_type_code': 'StatisticalBaseTypeCode',
            'statistical_base_type_desc': 'StatisticalBaseTypeDesc',
            'stay_value_nmbr': 'StayValueNmbr',
            'std_unit_code': 'StdUnitCode',
            'std_unit_desc': 'StdUnitDesc',
            'value_received_date': 'ValueReceivedDate',
            'value_type_code': 'ValueTypeCode',
            'value_type_desc': 'ValueTypeDesc',
            'version_nmbr': 'VersionNmbr'
        }

        self._dmr_event_id = dmr_event_id
        self._dmr_form_value_id = dmr_form_value_id
        self._dmr_unit_code = dmr_unit_code
        self._dmr_unit_desc = dmr_unit_desc
        self._dmr_value_id = dmr_value_id
        self._dmr_value_nmbr = dmr_value_nmbr
        self._dmr_value_qualifier_code = dmr_value_qualifier_code
        self._dmr_value_std_units = dmr_value_std_units
        self._days_late = days_late
        self._exceedence_pct = exceedence_pct
        self._limit_begin_date = limit_begin_date
        self._limit_end_date = limit_end_date
        self._limit_id = limit_id
        self._limit_set_id = limit_set_id
        self._limit_set_schedule_id = limit_set_schedule_id
        self._limit_type_code = limit_type_code
        self._limit_unit_code = limit_unit_code
        self._limit_unit_desc = limit_unit_desc
        self._limit_value_id = limit_value_id
        self._limit_value_nmbr = limit_value_nmbr
        self._limit_value_qualifier_code = limit_value_qualifier_code
        self._limit_value_std_units = limit_value_std_units
        self._limit_value_type_code = limit_value_type_code
        self._limit_value_type_desc = limit_value_type_desc
        self._monitoring_period_end_date = monitoring_period_end_date
        self._node_desc = node_desc
        self._nodi_code = nodi_code
        self._npdes_violations = npdes_violations
        self._nmbr_of_submission = nmbr_of_submission
        self._perm_feature_id = perm_feature_id
        self._statistical_base_code = statistical_base_code
        self._statistical_base_desc = statistical_base_desc
        self._statistical_base_type_code = statistical_base_type_code
        self._statistical_base_type_desc = statistical_base_type_desc
        self._stay_value_nmbr = stay_value_nmbr
        self._std_unit_code = std_unit_code
        self._std_unit_desc = std_unit_desc
        self._value_received_date = value_received_date
        self._value_type_code = value_type_code
        self._value_type_desc = value_type_desc
        self._version_nmbr = version_nmbr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff01':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff01 of this Eff01.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dmr_event_id(self):
        """Gets the dmr_event_id of this Eff01.

        The sequence ID identifying the DMR Event.

        :return: The dmr_event_id of this Eff01.
        :rtype: str
        """
        return self._dmr_event_id

    @dmr_event_id.setter
    def dmr_event_id(self, dmr_event_id):
        """Sets the dmr_event_id of this Eff01.

        The sequence ID identifying the DMR Event.

        :param dmr_event_id: The dmr_event_id of this Eff01.
        :type dmr_event_id: str
        """
        if dmr_event_id is None:
            raise ValueError("Invalid value for `dmr_event_id`, must not be `None`")

        self._dmr_event_id = dmr_event_id

    @property
    def dmr_form_value_id(self):
        """Gets the dmr_form_value_id of this Eff01.

        The sequence ID identifying the DMR Form Value.

        :return: The dmr_form_value_id of this Eff01.
        :rtype: str
        """
        return self._dmr_form_value_id

    @dmr_form_value_id.setter
    def dmr_form_value_id(self, dmr_form_value_id):
        """Sets the dmr_form_value_id of this Eff01.

        The sequence ID identifying the DMR Form Value.

        :param dmr_form_value_id: The dmr_form_value_id of this Eff01.
        :type dmr_form_value_id: str
        """
        if dmr_form_value_id is None:
            raise ValueError("Invalid value for `dmr_form_value_id`, must not be `None`")

        self._dmr_form_value_id = dmr_form_value_id

    @property
    def dmr_unit_code(self):
        """Gets the dmr_unit_code of this Eff01.

        The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered into ICIS-NPDES

        :return: The dmr_unit_code of this Eff01.
        :rtype: str
        """
        return self._dmr_unit_code

    @dmr_unit_code.setter
    def dmr_unit_code(self, dmr_unit_code):
        """Sets the dmr_unit_code of this Eff01.

        The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered into ICIS-NPDES

        :param dmr_unit_code: The dmr_unit_code of this Eff01.
        :type dmr_unit_code: str
        """
        if dmr_unit_code is None:
            raise ValueError("Invalid value for `dmr_unit_code`, must not be `None`")

        self._dmr_unit_code = dmr_unit_code

    @property
    def dmr_unit_desc(self):
        """Gets the dmr_unit_desc of this Eff01.

        The short description of the unit of measure applicable to limit or DMR values

        :return: The dmr_unit_desc of this Eff01.
        :rtype: str
        """
        return self._dmr_unit_desc

    @dmr_unit_desc.setter
    def dmr_unit_desc(self, dmr_unit_desc):
        """Sets the dmr_unit_desc of this Eff01.

        The short description of the unit of measure applicable to limit or DMR values

        :param dmr_unit_desc: The dmr_unit_desc of this Eff01.
        :type dmr_unit_desc: str
        """
        if dmr_unit_desc is None:
            raise ValueError("Invalid value for `dmr_unit_desc`, must not be `None`")

        self._dmr_unit_desc = dmr_unit_desc

    @property
    def dmr_value_id(self):
        """Gets the dmr_value_id of this Eff01.

        The unique identifier for the DMR value generated in ICIS-NPDES

        :return: The dmr_value_id of this Eff01.
        :rtype: str
        """
        return self._dmr_value_id

    @dmr_value_id.setter
    def dmr_value_id(self, dmr_value_id):
        """Sets the dmr_value_id of this Eff01.

        The unique identifier for the DMR value generated in ICIS-NPDES

        :param dmr_value_id: The dmr_value_id of this Eff01.
        :type dmr_value_id: str
        """
        if dmr_value_id is None:
            raise ValueError("Invalid value for `dmr_value_id`, must not be `None`")

        self._dmr_value_id = dmr_value_id

    @property
    def dmr_value_nmbr(self):
        """Gets the dmr_value_nmbr of this Eff01.

        The DMR value number reported on the DMR Form

        :return: The dmr_value_nmbr of this Eff01.
        :rtype: str
        """
        return self._dmr_value_nmbr

    @dmr_value_nmbr.setter
    def dmr_value_nmbr(self, dmr_value_nmbr):
        """Sets the dmr_value_nmbr of this Eff01.

        The DMR value number reported on the DMR Form

        :param dmr_value_nmbr: The dmr_value_nmbr of this Eff01.
        :type dmr_value_nmbr: str
        """
        if dmr_value_nmbr is None:
            raise ValueError("Invalid value for `dmr_value_nmbr`, must not be `None`")

        self._dmr_value_nmbr = dmr_value_nmbr

    @property
    def dmr_value_qualifier_code(self):
        """Gets the dmr_value_qualifier_code of this Eff01.

        The unique code identifying the DMR value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count

        :return: The dmr_value_qualifier_code of this Eff01.
        :rtype: str
        """
        return self._dmr_value_qualifier_code

    @dmr_value_qualifier_code.setter
    def dmr_value_qualifier_code(self, dmr_value_qualifier_code):
        """Sets the dmr_value_qualifier_code of this Eff01.

        The unique code identifying the DMR value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count

        :param dmr_value_qualifier_code: The dmr_value_qualifier_code of this Eff01.
        :type dmr_value_qualifier_code: str
        """
        if dmr_value_qualifier_code is None:
            raise ValueError("Invalid value for `dmr_value_qualifier_code`, must not be `None`")

        self._dmr_value_qualifier_code = dmr_value_qualifier_code

    @property
    def dmr_value_std_units(self):
        """Gets the dmr_value_std_units of this Eff01.

        The DMR value expressed in standard units, as calculated in ICIS-NPDES

        :return: The dmr_value_std_units of this Eff01.
        :rtype: str
        """
        return self._dmr_value_std_units

    @dmr_value_std_units.setter
    def dmr_value_std_units(self, dmr_value_std_units):
        """Sets the dmr_value_std_units of this Eff01.

        The DMR value expressed in standard units, as calculated in ICIS-NPDES

        :param dmr_value_std_units: The dmr_value_std_units of this Eff01.
        :type dmr_value_std_units: str
        """
        if dmr_value_std_units is None:
            raise ValueError("Invalid value for `dmr_value_std_units`, must not be `None`")

        self._dmr_value_std_units = dmr_value_std_units

    @property
    def days_late(self):
        """Gets the days_late of this Eff01.

        The number of days the DMR value is late, as generated in ICIS-NPDES

        :return: The days_late of this Eff01.
        :rtype: str
        """
        return self._days_late

    @days_late.setter
    def days_late(self, days_late):
        """Sets the days_late of this Eff01.

        The number of days the DMR value is late, as generated in ICIS-NPDES

        :param days_late: The days_late of this Eff01.
        :type days_late: str
        """
        if days_late is None:
            raise ValueError("Invalid value for `days_late`, must not be `None`")

        self._days_late = days_late

    @property
    def exceedence_pct(self):
        """Gets the exceedence_pct of this Eff01.

        The percent by which the DMR value (or adjusted value) exceeded its limit (or stay) value, as generated in ICIS-NPDES

        :return: The exceedence_pct of this Eff01.
        :rtype: str
        """
        return self._exceedence_pct

    @exceedence_pct.setter
    def exceedence_pct(self, exceedence_pct):
        """Sets the exceedence_pct of this Eff01.

        The percent by which the DMR value (or adjusted value) exceeded its limit (or stay) value, as generated in ICIS-NPDES

        :param exceedence_pct: The exceedence_pct of this Eff01.
        :type exceedence_pct: str
        """
        if exceedence_pct is None:
            raise ValueError("Invalid value for `exceedence_pct`, must not be `None`")

        self._exceedence_pct = exceedence_pct

    @property
    def limit_begin_date(self):
        """Gets the limit_begin_date of this Eff01.

        The date on which a limit becomes in effect for a particular parameter in a limit set

        :return: The limit_begin_date of this Eff01.
        :rtype: str
        """
        return self._limit_begin_date

    @limit_begin_date.setter
    def limit_begin_date(self, limit_begin_date):
        """Sets the limit_begin_date of this Eff01.

        The date on which a limit becomes in effect for a particular parameter in a limit set

        :param limit_begin_date: The limit_begin_date of this Eff01.
        :type limit_begin_date: str
        """
        if limit_begin_date is None:
            raise ValueError("Invalid value for `limit_begin_date`, must not be `None`")

        self._limit_begin_date = limit_begin_date

    @property
    def limit_end_date(self):
        """Gets the limit_end_date of this Eff01.

        The date on which a limit stops being in effect for a particular parameter in a limit set

        :return: The limit_end_date of this Eff01.
        :rtype: str
        """
        return self._limit_end_date

    @limit_end_date.setter
    def limit_end_date(self, limit_end_date):
        """Sets the limit_end_date of this Eff01.

        The date on which a limit stops being in effect for a particular parameter in a limit set

        :param limit_end_date: The limit_end_date of this Eff01.
        :type limit_end_date: str
        """
        if limit_end_date is None:
            raise ValueError("Invalid value for `limit_end_date`, must not be `None`")

        self._limit_end_date = limit_end_date

    @property
    def limit_id(self):
        """Gets the limit_id of this Eff01.

        The unique identifier for a limit parameter record

        :return: The limit_id of this Eff01.
        :rtype: str
        """
        return self._limit_id

    @limit_id.setter
    def limit_id(self, limit_id):
        """Sets the limit_id of this Eff01.

        The unique identifier for a limit parameter record

        :param limit_id: The limit_id of this Eff01.
        :type limit_id: str
        """
        if limit_id is None:
            raise ValueError("Invalid value for `limit_id`, must not be `None`")

        self._limit_id = limit_id

    @property
    def limit_set_id(self):
        """Gets the limit_set_id of this Eff01.

        The unique identifier for a limit set, generated in ICIS-NPDES

        :return: The limit_set_id of this Eff01.
        :rtype: str
        """
        return self._limit_set_id

    @limit_set_id.setter
    def limit_set_id(self, limit_set_id):
        """Sets the limit_set_id of this Eff01.

        The unique identifier for a limit set, generated in ICIS-NPDES

        :param limit_set_id: The limit_set_id of this Eff01.
        :type limit_set_id: str
        """
        if limit_set_id is None:
            raise ValueError("Invalid value for `limit_set_id`, must not be `None`")

        self._limit_set_id = limit_set_id

    @property
    def limit_set_schedule_id(self):
        """Gets the limit_set_schedule_id of this Eff01.

        The unique identifier of the Limit Set Schedule, generated in ICIS-NPDES

        :return: The limit_set_schedule_id of this Eff01.
        :rtype: str
        """
        return self._limit_set_schedule_id

    @limit_set_schedule_id.setter
    def limit_set_schedule_id(self, limit_set_schedule_id):
        """Sets the limit_set_schedule_id of this Eff01.

        The unique identifier of the Limit Set Schedule, generated in ICIS-NPDES

        :param limit_set_schedule_id: The limit_set_schedule_id of this Eff01.
        :type limit_set_schedule_id: str
        """
        if limit_set_schedule_id is None:
            raise ValueError("Invalid value for `limit_set_schedule_id`, must not be `None`")

        self._limit_set_schedule_id = limit_set_schedule_id

    @property
    def limit_type_code(self):
        """Gets the limit_type_code of this Eff01.


        :return: The limit_type_code of this Eff01.
        :rtype: str
        """
        return self._limit_type_code

    @limit_type_code.setter
    def limit_type_code(self, limit_type_code):
        """Sets the limit_type_code of this Eff01.


        :param limit_type_code: The limit_type_code of this Eff01.
        :type limit_type_code: str
        """
        if limit_type_code is None:
            raise ValueError("Invalid value for `limit_type_code`, must not be `None`")

        self._limit_type_code = limit_type_code

    @property
    def limit_unit_code(self):
        """Gets the limit_unit_code of this Eff01.

        The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered by the user

        :return: The limit_unit_code of this Eff01.
        :rtype: str
        """
        return self._limit_unit_code

    @limit_unit_code.setter
    def limit_unit_code(self, limit_unit_code):
        """Sets the limit_unit_code of this Eff01.

        The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered by the user

        :param limit_unit_code: The limit_unit_code of this Eff01.
        :type limit_unit_code: str
        """
        if limit_unit_code is None:
            raise ValueError("Invalid value for `limit_unit_code`, must not be `None`")

        self._limit_unit_code = limit_unit_code

    @property
    def limit_unit_desc(self):
        """Gets the limit_unit_desc of this Eff01.

        The short description of the unit of measure applicable to limit or DMR values

        :return: The limit_unit_desc of this Eff01.
        :rtype: str
        """
        return self._limit_unit_desc

    @limit_unit_desc.setter
    def limit_unit_desc(self, limit_unit_desc):
        """Sets the limit_unit_desc of this Eff01.

        The short description of the unit of measure applicable to limit or DMR values

        :param limit_unit_desc: The limit_unit_desc of this Eff01.
        :type limit_unit_desc: str
        """
        if limit_unit_desc is None:
            raise ValueError("Invalid value for `limit_unit_desc`, must not be `None`")

        self._limit_unit_desc = limit_unit_desc

    @property
    def limit_value_id(self):
        """Gets the limit_value_id of this Eff01.

        The unique identifier in ICIS-NPDES for the Limit Value

        :return: The limit_value_id of this Eff01.
        :rtype: str
        """
        return self._limit_value_id

    @limit_value_id.setter
    def limit_value_id(self, limit_value_id):
        """Sets the limit_value_id of this Eff01.

        The unique identifier in ICIS-NPDES for the Limit Value

        :param limit_value_id: The limit_value_id of this Eff01.
        :type limit_value_id: str
        """
        if limit_value_id is None:
            raise ValueError("Invalid value for `limit_value_id`, must not be `None`")

        self._limit_value_id = limit_value_id

    @property
    def limit_value_nmbr(self):
        """Gets the limit_value_nmbr of this Eff01.

        The numerical limit for a given parameter

        :return: The limit_value_nmbr of this Eff01.
        :rtype: str
        """
        return self._limit_value_nmbr

    @limit_value_nmbr.setter
    def limit_value_nmbr(self, limit_value_nmbr):
        """Sets the limit_value_nmbr of this Eff01.

        The numerical limit for a given parameter

        :param limit_value_nmbr: The limit_value_nmbr of this Eff01.
        :type limit_value_nmbr: str
        """
        if limit_value_nmbr is None:
            raise ValueError("Invalid value for `limit_value_nmbr`, must not be `None`")

        self._limit_value_nmbr = limit_value_nmbr

    @property
    def limit_value_qualifier_code(self):
        """Gets the limit_value_qualifier_code of this Eff01.

        The unique code identifying the limit value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count

        :return: The limit_value_qualifier_code of this Eff01.
        :rtype: str
        """
        return self._limit_value_qualifier_code

    @limit_value_qualifier_code.setter
    def limit_value_qualifier_code(self, limit_value_qualifier_code):
        """Sets the limit_value_qualifier_code of this Eff01.

        The unique code identifying the limit value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count

        :param limit_value_qualifier_code: The limit_value_qualifier_code of this Eff01.
        :type limit_value_qualifier_code: str
        """
        if limit_value_qualifier_code is None:
            raise ValueError("Invalid value for `limit_value_qualifier_code`, must not be `None`")

        self._limit_value_qualifier_code = limit_value_qualifier_code

    @property
    def limit_value_std_units(self):
        """Gets the limit_value_std_units of this Eff01.

        The limit value expressed in standard units, as calculated in ICIS-NPDES

        :return: The limit_value_std_units of this Eff01.
        :rtype: str
        """
        return self._limit_value_std_units

    @limit_value_std_units.setter
    def limit_value_std_units(self, limit_value_std_units):
        """Sets the limit_value_std_units of this Eff01.

        The limit value expressed in standard units, as calculated in ICIS-NPDES

        :param limit_value_std_units: The limit_value_std_units of this Eff01.
        :type limit_value_std_units: str
        """
        if limit_value_std_units is None:
            raise ValueError("Invalid value for `limit_value_std_units`, must not be `None`")

        self._limit_value_std_units = limit_value_std_units

    @property
    def limit_value_type_code(self):
        """Gets the limit_value_type_code of this Eff01.

        The code indicating the type of value the limit is given as (i.e., Q1, Q2, C1, C2, C3)

        :return: The limit_value_type_code of this Eff01.
        :rtype: str
        """
        return self._limit_value_type_code

    @limit_value_type_code.setter
    def limit_value_type_code(self, limit_value_type_code):
        """Sets the limit_value_type_code of this Eff01.

        The code indicating the type of value the limit is given as (i.e., Q1, Q2, C1, C2, C3)

        :param limit_value_type_code: The limit_value_type_code of this Eff01.
        :type limit_value_type_code: str
        """
        if limit_value_type_code is None:
            raise ValueError("Invalid value for `limit_value_type_code`, must not be `None`")

        self._limit_value_type_code = limit_value_type_code

    @property
    def limit_value_type_desc(self):
        """Gets the limit_value_type_desc of this Eff01.

        The description indicating the type of value the limit is given as (e.g., Concentration, Quantity)

        :return: The limit_value_type_desc of this Eff01.
        :rtype: str
        """
        return self._limit_value_type_desc

    @limit_value_type_desc.setter
    def limit_value_type_desc(self, limit_value_type_desc):
        """Sets the limit_value_type_desc of this Eff01.

        The description indicating the type of value the limit is given as (e.g., Concentration, Quantity)

        :param limit_value_type_desc: The limit_value_type_desc of this Eff01.
        :type limit_value_type_desc: str
        """
        if limit_value_type_desc is None:
            raise ValueError("Invalid value for `limit_value_type_desc`, must not be `None`")

        self._limit_value_type_desc = limit_value_type_desc

    @property
    def monitoring_period_end_date(self):
        """Gets the monitoring_period_end_date of this Eff01.

        The date that the monitoring period for the values covered by the DMR Form ends

        :return: The monitoring_period_end_date of this Eff01.
        :rtype: str
        """
        return self._monitoring_period_end_date

    @monitoring_period_end_date.setter
    def monitoring_period_end_date(self, monitoring_period_end_date):
        """Sets the monitoring_period_end_date of this Eff01.

        The date that the monitoring period for the values covered by the DMR Form ends

        :param monitoring_period_end_date: The monitoring_period_end_date of this Eff01.
        :type monitoring_period_end_date: str
        """
        if monitoring_period_end_date is None:
            raise ValueError("Invalid value for `monitoring_period_end_date`, must not be `None`")

        self._monitoring_period_end_date = monitoring_period_end_date

    @property
    def node_desc(self):
        """Gets the node_desc of this Eff01.


        :return: The node_desc of this Eff01.
        :rtype: str
        """
        return self._node_desc

    @node_desc.setter
    def node_desc(self, node_desc):
        """Sets the node_desc of this Eff01.


        :param node_desc: The node_desc of this Eff01.
        :type node_desc: str
        """
        if node_desc is None:
            raise ValueError("Invalid value for `node_desc`, must not be `None`")

        self._node_desc = node_desc

    @property
    def nodi_code(self):
        """Gets the nodi_code of this Eff01.

        The unique code indicating why no DMR Value was submitted by the permittee for a Monitoring Period End Date

        :return: The nodi_code of this Eff01.
        :rtype: str
        """
        return self._nodi_code

    @nodi_code.setter
    def nodi_code(self, nodi_code):
        """Sets the nodi_code of this Eff01.

        The unique code indicating why no DMR Value was submitted by the permittee for a Monitoring Period End Date

        :param nodi_code: The nodi_code of this Eff01.
        :type nodi_code: str
        """
        if nodi_code is None:
            raise ValueError("Invalid value for `nodi_code`, must not be `None`")

        self._nodi_code = nodi_code

    @property
    def npdes_violations(self):
        """Gets the npdes_violations of this Eff01.


        :return: The npdes_violations of this Eff01.
        :rtype: List[Eff02]
        """
        return self._npdes_violations

    @npdes_violations.setter
    def npdes_violations(self, npdes_violations):
        """Sets the npdes_violations of this Eff01.


        :param npdes_violations: The npdes_violations of this Eff01.
        :type npdes_violations: List[Eff02]
        """

        self._npdes_violations = npdes_violations

    @property
    def nmbr_of_submission(self):
        """Gets the nmbr_of_submission of this Eff01.

        The number of months of discharges represented on each DMR for the limit set (e.g., monthly = 1, bi-monthly = 2, quarterly = 3, triannual = 4, semi-annual = 6, annual = 12). This data element will be blank for Unscheduled Limit Sets

        :return: The nmbr_of_submission of this Eff01.
        :rtype: str
        """
        return self._nmbr_of_submission

    @nmbr_of_submission.setter
    def nmbr_of_submission(self, nmbr_of_submission):
        """Sets the nmbr_of_submission of this Eff01.

        The number of months of discharges represented on each DMR for the limit set (e.g., monthly = 1, bi-monthly = 2, quarterly = 3, triannual = 4, semi-annual = 6, annual = 12). This data element will be blank for Unscheduled Limit Sets

        :param nmbr_of_submission: The nmbr_of_submission of this Eff01.
        :type nmbr_of_submission: str
        """
        if nmbr_of_submission is None:
            raise ValueError("Invalid value for `nmbr_of_submission`, must not be `None`")

        self._nmbr_of_submission = nmbr_of_submission

    @property
    def perm_feature_id(self):
        """Gets the perm_feature_id of this Eff01.

        The unique identifier in ICIS-NPDES of a permitted feature or outfall

        :return: The perm_feature_id of this Eff01.
        :rtype: str
        """
        return self._perm_feature_id

    @perm_feature_id.setter
    def perm_feature_id(self, perm_feature_id):
        """Sets the perm_feature_id of this Eff01.

        The unique identifier in ICIS-NPDES of a permitted feature or outfall

        :param perm_feature_id: The perm_feature_id of this Eff01.
        :type perm_feature_id: str
        """
        if perm_feature_id is None:
            raise ValueError("Invalid value for `perm_feature_id`, must not be `None`")

        self._perm_feature_id = perm_feature_id

    @property
    def statistical_base_code(self):
        """Gets the statistical_base_code of this Eff01.

        The code representing the unit of measure applicable to the limit and DMR values entered by the user (e.g., 30-day average, daily maximum)

        :return: The statistical_base_code of this Eff01.
        :rtype: str
        """
        return self._statistical_base_code

    @statistical_base_code.setter
    def statistical_base_code(self, statistical_base_code):
        """Sets the statistical_base_code of this Eff01.

        The code representing the unit of measure applicable to the limit and DMR values entered by the user (e.g., 30-day average, daily maximum)

        :param statistical_base_code: The statistical_base_code of this Eff01.
        :type statistical_base_code: str
        """
        if statistical_base_code is None:
            raise ValueError("Invalid value for `statistical_base_code`, must not be `None`")

        self._statistical_base_code = statistical_base_code

    @property
    def statistical_base_desc(self):
        """Gets the statistical_base_desc of this Eff01.


        :return: The statistical_base_desc of this Eff01.
        :rtype: str
        """
        return self._statistical_base_desc

    @statistical_base_desc.setter
    def statistical_base_desc(self, statistical_base_desc):
        """Sets the statistical_base_desc of this Eff01.


        :param statistical_base_desc: The statistical_base_desc of this Eff01.
        :type statistical_base_desc: str
        """
        if statistical_base_desc is None:
            raise ValueError("Invalid value for `statistical_base_desc`, must not be `None`")

        self._statistical_base_desc = statistical_base_desc

    @property
    def statistical_base_type_code(self):
        """Gets the statistical_base_type_code of this Eff01.

        The code indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value

        :return: The statistical_base_type_code of this Eff01.
        :rtype: str
        """
        return self._statistical_base_type_code

    @statistical_base_type_code.setter
    def statistical_base_type_code(self, statistical_base_type_code):
        """Sets the statistical_base_type_code of this Eff01.

        The code indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value

        :param statistical_base_type_code: The statistical_base_type_code of this Eff01.
        :type statistical_base_type_code: str
        """
        if statistical_base_type_code is None:
            raise ValueError("Invalid value for `statistical_base_type_code`, must not be `None`")

        self._statistical_base_type_code = statistical_base_type_code

    @property
    def statistical_base_type_desc(self):
        """Gets the statistical_base_type_desc of this Eff01.

        A short description for indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value

        :return: The statistical_base_type_desc of this Eff01.
        :rtype: str
        """
        return self._statistical_base_type_desc

    @statistical_base_type_desc.setter
    def statistical_base_type_desc(self, statistical_base_type_desc):
        """Sets the statistical_base_type_desc of this Eff01.

        A short description for indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value

        :param statistical_base_type_desc: The statistical_base_type_desc of this Eff01.
        :type statistical_base_type_desc: str
        """
        if statistical_base_type_desc is None:
            raise ValueError("Invalid value for `statistical_base_type_desc`, must not be `None`")

        self._statistical_base_type_desc = statistical_base_type_desc

    @property
    def stay_value_nmbr(self):
        """Gets the stay_value_nmbr of this Eff01.

        The numeric limit value imposed during the period of the stay for the limit; if entered, during the stay period, ICIS-NPDES will use this limit value for calculating compliance rather than the actual limit value

        :return: The stay_value_nmbr of this Eff01.
        :rtype: str
        """
        return self._stay_value_nmbr

    @stay_value_nmbr.setter
    def stay_value_nmbr(self, stay_value_nmbr):
        """Sets the stay_value_nmbr of this Eff01.

        The numeric limit value imposed during the period of the stay for the limit; if entered, during the stay period, ICIS-NPDES will use this limit value for calculating compliance rather than the actual limit value

        :param stay_value_nmbr: The stay_value_nmbr of this Eff01.
        :type stay_value_nmbr: str
        """
        if stay_value_nmbr is None:
            raise ValueError("Invalid value for `stay_value_nmbr`, must not be `None`")

        self._stay_value_nmbr = stay_value_nmbr

    @property
    def std_unit_code(self):
        """Gets the std_unit_code of this Eff01.

        The code representing the standard unit of measure applicable to quantity or concentration limits and measurements as entered by the user

        :return: The std_unit_code of this Eff01.
        :rtype: str
        """
        return self._std_unit_code

    @std_unit_code.setter
    def std_unit_code(self, std_unit_code):
        """Sets the std_unit_code of this Eff01.

        The code representing the standard unit of measure applicable to quantity or concentration limits and measurements as entered by the user

        :param std_unit_code: The std_unit_code of this Eff01.
        :type std_unit_code: str
        """
        if std_unit_code is None:
            raise ValueError("Invalid value for `std_unit_code`, must not be `None`")

        self._std_unit_code = std_unit_code

    @property
    def std_unit_desc(self):
        """Gets the std_unit_desc of this Eff01.

        The short description of the standard unit of measure applicable to limit or DMR values

        :return: The std_unit_desc of this Eff01.
        :rtype: str
        """
        return self._std_unit_desc

    @std_unit_desc.setter
    def std_unit_desc(self, std_unit_desc):
        """Sets the std_unit_desc of this Eff01.

        The short description of the standard unit of measure applicable to limit or DMR values

        :param std_unit_desc: The std_unit_desc of this Eff01.
        :type std_unit_desc: str
        """
        if std_unit_desc is None:
            raise ValueError("Invalid value for `std_unit_desc`, must not be `None`")

        self._std_unit_desc = std_unit_desc

    @property
    def value_received_date(self):
        """Gets the value_received_date of this Eff01.

        The date the DMR value was received by the regulatory authority

        :return: The value_received_date of this Eff01.
        :rtype: str
        """
        return self._value_received_date

    @value_received_date.setter
    def value_received_date(self, value_received_date):
        """Sets the value_received_date of this Eff01.

        The date the DMR value was received by the regulatory authority

        :param value_received_date: The value_received_date of this Eff01.
        :type value_received_date: str
        """
        if value_received_date is None:
            raise ValueError("Invalid value for `value_received_date`, must not be `None`")

        self._value_received_date = value_received_date

    @property
    def value_type_code(self):
        """Gets the value_type_code of this Eff01.

        The indication of the limit value type (e.g., Quantity 1, Concentration 2)

        :return: The value_type_code of this Eff01.
        :rtype: str
        """
        return self._value_type_code

    @value_type_code.setter
    def value_type_code(self, value_type_code):
        """Sets the value_type_code of this Eff01.

        The indication of the limit value type (e.g., Quantity 1, Concentration 2)

        :param value_type_code: The value_type_code of this Eff01.
        :type value_type_code: str
        """
        if value_type_code is None:
            raise ValueError("Invalid value for `value_type_code`, must not be `None`")

        self._value_type_code = value_type_code

    @property
    def value_type_desc(self):
        """Gets the value_type_desc of this Eff01.

        The type of value the measured number is given as (e.g., Concentration, Quantity)

        :return: The value_type_desc of this Eff01.
        :rtype: str
        """
        return self._value_type_desc

    @value_type_desc.setter
    def value_type_desc(self, value_type_desc):
        """Sets the value_type_desc of this Eff01.

        The type of value the measured number is given as (e.g., Concentration, Quantity)

        :param value_type_desc: The value_type_desc of this Eff01.
        :type value_type_desc: str
        """
        if value_type_desc is None:
            raise ValueError("Invalid value for `value_type_desc`, must not be `None`")

        self._value_type_desc = value_type_desc

    @property
    def version_nmbr(self):
        """Gets the version_nmbr of this Eff01.

        The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance

        :return: The version_nmbr of this Eff01.
        :rtype: str
        """
        return self._version_nmbr

    @version_nmbr.setter
    def version_nmbr(self, version_nmbr):
        """Sets the version_nmbr of this Eff01.

        The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance

        :param version_nmbr: The version_nmbr of this Eff01.
        :type version_nmbr: str
        """
        if version_nmbr is None:
            raise ValueError("Invalid value for `version_nmbr`, must not be `None`")

        self._version_nmbr = version_nmbr
