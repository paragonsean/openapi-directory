# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eff01 import Eff01
from openapi_server import util


class Eff03(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discharge_monitoring_reports: List[Eff01]=None, monitoring_location_code: str=None, monitoring_location_desc: str=None, parameter_code: str=None, parameter_desc: str=None, stay_type_code: str=None, stay_type_desc: str=None):
        """Eff03 - a model defined in OpenAPI

        :param discharge_monitoring_reports: The discharge_monitoring_reports of this Eff03.
        :param monitoring_location_code: The monitoring_location_code of this Eff03.
        :param monitoring_location_desc: The monitoring_location_desc of this Eff03.
        :param parameter_code: The parameter_code of this Eff03.
        :param parameter_desc: The parameter_desc of this Eff03.
        :param stay_type_code: The stay_type_code of this Eff03.
        :param stay_type_desc: The stay_type_desc of this Eff03.
        """
        self.openapi_types = {
            'discharge_monitoring_reports': List[Eff01],
            'monitoring_location_code': str,
            'monitoring_location_desc': str,
            'parameter_code': str,
            'parameter_desc': str,
            'stay_type_code': str,
            'stay_type_desc': str
        }

        self.attribute_map = {
            'discharge_monitoring_reports': 'DischargeMonitoringReports',
            'monitoring_location_code': 'MonitoringLocationCode',
            'monitoring_location_desc': 'MonitoringLocationDesc',
            'parameter_code': 'ParameterCode',
            'parameter_desc': 'ParameterDesc',
            'stay_type_code': 'StayTypeCode',
            'stay_type_desc': 'StayTypeDesc'
        }

        self._discharge_monitoring_reports = discharge_monitoring_reports
        self._monitoring_location_code = monitoring_location_code
        self._monitoring_location_desc = monitoring_location_desc
        self._parameter_code = parameter_code
        self._parameter_desc = parameter_desc
        self._stay_type_code = stay_type_code
        self._stay_type_desc = stay_type_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff03':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff03 of this Eff03.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discharge_monitoring_reports(self):
        """Gets the discharge_monitoring_reports of this Eff03.

        An array of Discharge Monitoring Report (DMR) data.

        :return: The discharge_monitoring_reports of this Eff03.
        :rtype: List[Eff01]
        """
        return self._discharge_monitoring_reports

    @discharge_monitoring_reports.setter
    def discharge_monitoring_reports(self, discharge_monitoring_reports):
        """Sets the discharge_monitoring_reports of this Eff03.

        An array of Discharge Monitoring Report (DMR) data.

        :param discharge_monitoring_reports: The discharge_monitoring_reports of this Eff03.
        :type discharge_monitoring_reports: List[Eff01]
        """
        if discharge_monitoring_reports is None:
            raise ValueError("Invalid value for `discharge_monitoring_reports`, must not be `None`")

        self._discharge_monitoring_reports = discharge_monitoring_reports

    @property
    def monitoring_location_code(self):
        """Gets the monitoring_location_code of this Eff03.

        The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature

        :return: The monitoring_location_code of this Eff03.
        :rtype: str
        """
        return self._monitoring_location_code

    @monitoring_location_code.setter
    def monitoring_location_code(self, monitoring_location_code):
        """Sets the monitoring_location_code of this Eff03.

        The code that the monitoring location at which the monitoring requirement (and effluent limit if limited) applies. One parameter may have several monitoring location codes pertaining to the same permitted feature

        :param monitoring_location_code: The monitoring_location_code of this Eff03.
        :type monitoring_location_code: str
        """
        if monitoring_location_code is None:
            raise ValueError("Invalid value for `monitoring_location_code`, must not be `None`")

        self._monitoring_location_code = monitoring_location_code

    @property
    def monitoring_location_desc(self):
        """Gets the monitoring_location_desc of this Eff03.

        The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies

        :return: The monitoring_location_desc of this Eff03.
        :rtype: str
        """
        return self._monitoring_location_desc

    @monitoring_location_desc.setter
    def monitoring_location_desc(self, monitoring_location_desc):
        """Sets the monitoring_location_desc of this Eff03.

        The name of the monitoring location at which the monitoring requirement (and effluent limit if limited) applies

        :param monitoring_location_desc: The monitoring_location_desc of this Eff03.
        :type monitoring_location_desc: str
        """
        if monitoring_location_desc is None:
            raise ValueError("Invalid value for `monitoring_location_desc`, must not be `None`")

        self._monitoring_location_desc = monitoring_location_desc

    @property
    def parameter_code(self):
        """Gets the parameter_code of this Eff03.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :return: The parameter_code of this Eff03.
        :rtype: str
        """
        return self._parameter_code

    @parameter_code.setter
    def parameter_code(self, parameter_code):
        """Sets the parameter_code of this Eff03.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :param parameter_code: The parameter_code of this Eff03.
        :type parameter_code: str
        """
        if parameter_code is None:
            raise ValueError("Invalid value for `parameter_code`, must not be `None`")

        self._parameter_code = parameter_code

    @property
    def parameter_desc(self):
        """Gets the parameter_desc of this Eff03.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :return: The parameter_desc of this Eff03.
        :rtype: str
        """
        return self._parameter_desc

    @parameter_desc.setter
    def parameter_desc(self, parameter_desc):
        """Sets the parameter_desc of this Eff03.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :param parameter_desc: The parameter_desc of this Eff03.
        :type parameter_desc: str
        """
        if parameter_desc is None:
            raise ValueError("Invalid value for `parameter_desc`, must not be `None`")

        self._parameter_desc = parameter_desc

    @property
    def stay_type_code(self):
        """Gets the stay_type_code of this Eff03.

        The unique identifier of the type of stay applied to a limit (e.g., X, Y, Z), which indicates whether the limits do not appear on the DMR at all, are treated as monitor only, or have a stay value in effect during the period of the stay

        :return: The stay_type_code of this Eff03.
        :rtype: str
        """
        return self._stay_type_code

    @stay_type_code.setter
    def stay_type_code(self, stay_type_code):
        """Sets the stay_type_code of this Eff03.

        The unique identifier of the type of stay applied to a limit (e.g., X, Y, Z), which indicates whether the limits do not appear on the DMR at all, are treated as monitor only, or have a stay value in effect during the period of the stay

        :param stay_type_code: The stay_type_code of this Eff03.
        :type stay_type_code: str
        """
        if stay_type_code is None:
            raise ValueError("Invalid value for `stay_type_code`, must not be `None`")

        self._stay_type_code = stay_type_code

    @property
    def stay_type_desc(self):
        """Gets the stay_type_desc of this Eff03.

        The name of the type of stay applied to a limit, which indicates whether the limits do not appear on the DMR at all (X), are treated as monitor only (Y), or have a stay value in effect during the period of the stay (Z)

        :return: The stay_type_desc of this Eff03.
        :rtype: str
        """
        return self._stay_type_desc

    @stay_type_desc.setter
    def stay_type_desc(self, stay_type_desc):
        """Sets the stay_type_desc of this Eff03.

        The name of the type of stay applied to a limit, which indicates whether the limits do not appear on the DMR at all (X), are treated as monitor only (Y), or have a stay value in effect during the period of the stay (Z)

        :param stay_type_desc: The stay_type_desc of this Eff03.
        :type stay_type_desc: str
        """
        if stay_type_desc is None:
            raise ValueError("Invalid value for `stay_type_desc`, must not be `None`")

        self._stay_type_desc = stay_type_desc
