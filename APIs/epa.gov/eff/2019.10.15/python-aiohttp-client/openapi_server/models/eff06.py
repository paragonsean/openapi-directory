# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Eff06(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cwp_city: str=None, cwp_current_snc_status: str=None, cwp_major_minor_status_flag: str=None, cwp_name: str=None, cwp_permit_status_desc: str=None, cwp_permit_type_desc: str=None, cwp_state: str=None, cwp_street: str=None, cwp_zip: str=None, source_id: str=None):
        """Eff06 - a model defined in OpenAPI

        :param cwp_city: The cwp_city of this Eff06.
        :param cwp_current_snc_status: The cwp_current_snc_status of this Eff06.
        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Eff06.
        :param cwp_name: The cwp_name of this Eff06.
        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Eff06.
        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Eff06.
        :param cwp_state: The cwp_state of this Eff06.
        :param cwp_street: The cwp_street of this Eff06.
        :param cwp_zip: The cwp_zip of this Eff06.
        :param source_id: The source_id of this Eff06.
        """
        self.openapi_types = {
            'cwp_city': str,
            'cwp_current_snc_status': str,
            'cwp_major_minor_status_flag': str,
            'cwp_name': str,
            'cwp_permit_status_desc': str,
            'cwp_permit_type_desc': str,
            'cwp_state': str,
            'cwp_street': str,
            'cwp_zip': str,
            'source_id': str
        }

        self.attribute_map = {
            'cwp_city': 'CWPCity',
            'cwp_current_snc_status': 'CWPCurrentSNCStatus',
            'cwp_major_minor_status_flag': 'CWPMajorMinorStatusFlag',
            'cwp_name': 'CWPName',
            'cwp_permit_status_desc': 'CWPPermitStatusDesc',
            'cwp_permit_type_desc': 'CWPPermitTypeDesc',
            'cwp_state': 'CWPState',
            'cwp_street': 'CWPStreet',
            'cwp_zip': 'CWPZip',
            'source_id': 'SourceId'
        }

        self._cwp_city = cwp_city
        self._cwp_current_snc_status = cwp_current_snc_status
        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag
        self._cwp_name = cwp_name
        self._cwp_permit_status_desc = cwp_permit_status_desc
        self._cwp_permit_type_desc = cwp_permit_type_desc
        self._cwp_state = cwp_state
        self._cwp_street = cwp_street
        self._cwp_zip = cwp_zip
        self._source_id = source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff06':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff06 of this Eff06.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cwp_city(self):
        """Gets the cwp_city of this Eff06.

        City in which the facility is located.

        :return: The cwp_city of this Eff06.
        :rtype: str
        """
        return self._cwp_city

    @cwp_city.setter
    def cwp_city(self, cwp_city):
        """Sets the cwp_city of this Eff06.

        City in which the facility is located.

        :param cwp_city: The cwp_city of this Eff06.
        :type cwp_city: str
        """
        if cwp_city is None:
            raise ValueError("Invalid value for `cwp_city`, must not be `None`")

        self._cwp_city = cwp_city

    @property
    def cwp_current_snc_status(self):
        """Gets the cwp_current_snc_status of this Eff06.

        The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.

        :return: The cwp_current_snc_status of this Eff06.
        :rtype: str
        """
        return self._cwp_current_snc_status

    @cwp_current_snc_status.setter
    def cwp_current_snc_status(self, cwp_current_snc_status):
        """Sets the cwp_current_snc_status of this Eff06.

        The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.

        :param cwp_current_snc_status: The cwp_current_snc_status of this Eff06.
        :type cwp_current_snc_status: str
        """
        if cwp_current_snc_status is None:
            raise ValueError("Invalid value for `cwp_current_snc_status`, must not be `None`")

        self._cwp_current_snc_status = cwp_current_snc_status

    @property
    def cwp_major_minor_status_flag(self):
        """Gets the cwp_major_minor_status_flag of this Eff06.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :return: The cwp_major_minor_status_flag of this Eff06.
        :rtype: str
        """
        return self._cwp_major_minor_status_flag

    @cwp_major_minor_status_flag.setter
    def cwp_major_minor_status_flag(self, cwp_major_minor_status_flag):
        """Sets the cwp_major_minor_status_flag of this Eff06.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Eff06.
        :type cwp_major_minor_status_flag: str
        """
        if cwp_major_minor_status_flag is None:
            raise ValueError("Invalid value for `cwp_major_minor_status_flag`, must not be `None`")

        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag

    @property
    def cwp_name(self):
        """Gets the cwp_name of this Eff06.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :return: The cwp_name of this Eff06.
        :rtype: str
        """
        return self._cwp_name

    @cwp_name.setter
    def cwp_name(self, cwp_name):
        """Sets the cwp_name of this Eff06.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :param cwp_name: The cwp_name of this Eff06.
        :type cwp_name: str
        """
        if cwp_name is None:
            raise ValueError("Invalid value for `cwp_name`, must not be `None`")

        self._cwp_name = cwp_name

    @property
    def cwp_permit_status_desc(self):
        """Gets the cwp_permit_status_desc of this Eff06.

        The current stage/status in the NPDES permit life cycle.

        :return: The cwp_permit_status_desc of this Eff06.
        :rtype: str
        """
        return self._cwp_permit_status_desc

    @cwp_permit_status_desc.setter
    def cwp_permit_status_desc(self, cwp_permit_status_desc):
        """Sets the cwp_permit_status_desc of this Eff06.

        The current stage/status in the NPDES permit life cycle.

        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Eff06.
        :type cwp_permit_status_desc: str
        """
        if cwp_permit_status_desc is None:
            raise ValueError("Invalid value for `cwp_permit_status_desc`, must not be `None`")

        self._cwp_permit_status_desc = cwp_permit_status_desc

    @property
    def cwp_permit_type_desc(self):
        """Gets the cwp_permit_type_desc of this Eff06.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :return: The cwp_permit_type_desc of this Eff06.
        :rtype: str
        """
        return self._cwp_permit_type_desc

    @cwp_permit_type_desc.setter
    def cwp_permit_type_desc(self, cwp_permit_type_desc):
        """Sets the cwp_permit_type_desc of this Eff06.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Eff06.
        :type cwp_permit_type_desc: str
        """
        if cwp_permit_type_desc is None:
            raise ValueError("Invalid value for `cwp_permit_type_desc`, must not be `None`")

        self._cwp_permit_type_desc = cwp_permit_type_desc

    @property
    def cwp_state(self):
        """Gets the cwp_state of this Eff06.

        Facility location - two-digit state abbreviation.

        :return: The cwp_state of this Eff06.
        :rtype: str
        """
        return self._cwp_state

    @cwp_state.setter
    def cwp_state(self, cwp_state):
        """Sets the cwp_state of this Eff06.

        Facility location - two-digit state abbreviation.

        :param cwp_state: The cwp_state of this Eff06.
        :type cwp_state: str
        """
        if cwp_state is None:
            raise ValueError("Invalid value for `cwp_state`, must not be `None`")

        self._cwp_state = cwp_state

    @property
    def cwp_street(self):
        """Gets the cwp_street of this Eff06.

        Facility street address

        :return: The cwp_street of this Eff06.
        :rtype: str
        """
        return self._cwp_street

    @cwp_street.setter
    def cwp_street(self, cwp_street):
        """Sets the cwp_street of this Eff06.

        Facility street address

        :param cwp_street: The cwp_street of this Eff06.
        :type cwp_street: str
        """
        if cwp_street is None:
            raise ValueError("Invalid value for `cwp_street`, must not be `None`")

        self._cwp_street = cwp_street

    @property
    def cwp_zip(self):
        """Gets the cwp_zip of this Eff06.

        Facility ZIP code

        :return: The cwp_zip of this Eff06.
        :rtype: str
        """
        return self._cwp_zip

    @cwp_zip.setter
    def cwp_zip(self, cwp_zip):
        """Sets the cwp_zip of this Eff06.

        Facility ZIP code

        :param cwp_zip: The cwp_zip of this Eff06.
        :type cwp_zip: str
        """
        if cwp_zip is None:
            raise ValueError("Invalid value for `cwp_zip`, must not be `None`")

        self._cwp_zip = cwp_zip

    @property
    def source_id(self):
        """Gets the source_id of this Eff06.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Eff06.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Eff06.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Eff06.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id
