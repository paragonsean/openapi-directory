# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Eff07(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_vio_status: str=None, max_vio_status: str=None, parameter_code: str=None, parameter_desc: str=None):
        """Eff07 - a model defined in OpenAPI

        :param current_vio_status: The current_vio_status of this Eff07.
        :param max_vio_status: The max_vio_status of this Eff07.
        :param parameter_code: The parameter_code of this Eff07.
        :param parameter_desc: The parameter_desc of this Eff07.
        """
        self.openapi_types = {
            'current_vio_status': str,
            'max_vio_status': str,
            'parameter_code': str,
            'parameter_desc': str
        }

        self.attribute_map = {
            'current_vio_status': 'CurrentVioStatus',
            'max_vio_status': 'MaxVioStatus',
            'parameter_code': 'ParameterCode',
            'parameter_desc': 'ParameterDesc'
        }

        self._current_vio_status = current_vio_status
        self._max_vio_status = max_vio_status
        self._parameter_code = parameter_code
        self._parameter_desc = parameter_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff07':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff07 of this Eff07.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_vio_status(self):
        """Gets the current_vio_status of this Eff07.

        The most severe compliance status for an outfall and parameter during the current monitoring period

        :return: The current_vio_status of this Eff07.
        :rtype: str
        """
        return self._current_vio_status

    @current_vio_status.setter
    def current_vio_status(self, current_vio_status):
        """Sets the current_vio_status of this Eff07.

        The most severe compliance status for an outfall and parameter during the current monitoring period

        :param current_vio_status: The current_vio_status of this Eff07.
        :type current_vio_status: str
        """
        if current_vio_status is None:
            raise ValueError("Invalid value for `current_vio_status`, must not be `None`")

        self._current_vio_status = current_vio_status

    @property
    def max_vio_status(self):
        """Gets the max_vio_status of this Eff07.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :return: The max_vio_status of this Eff07.
        :rtype: str
        """
        return self._max_vio_status

    @max_vio_status.setter
    def max_vio_status(self, max_vio_status):
        """Sets the max_vio_status of this Eff07.

        The most severe compliance status for an outfall and parameter during the entire selected date range

        :param max_vio_status: The max_vio_status of this Eff07.
        :type max_vio_status: str
        """
        if max_vio_status is None:
            raise ValueError("Invalid value for `max_vio_status`, must not be `None`")

        self._max_vio_status = max_vio_status

    @property
    def parameter_code(self):
        """Gets the parameter_code of this Eff07.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :return: The parameter_code of this Eff07.
        :rtype: str
        """
        return self._parameter_code

    @parameter_code.setter
    def parameter_code(self, parameter_code):
        """Sets the parameter_code of this Eff07.

        The unique 5 digit numeric code identifying the parameter. If the code is less than 5 digits in the .CSV, append zeros to the beginning of the number (e.g., 100 is equivalent to 00100)

        :param parameter_code: The parameter_code of this Eff07.
        :type parameter_code: str
        """
        if parameter_code is None:
            raise ValueError("Invalid value for `parameter_code`, must not be `None`")

        self._parameter_code = parameter_code

    @property
    def parameter_desc(self):
        """Gets the parameter_desc of this Eff07.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :return: The parameter_desc of this Eff07.
        :rtype: str
        """
        return self._parameter_desc

    @parameter_desc.setter
    def parameter_desc(self, parameter_desc):
        """Sets the parameter_desc of this Eff07.

        The pollutant name and form (e.g., dissolved, suspended) associated with the parameter code

        :param parameter_desc: The parameter_desc of this Eff07.
        :type parameter_desc: str
        """
        if parameter_desc is None:
            raise ValueError("Invalid value for `parameter_desc`, must not be `None`")

        self._parameter_desc = parameter_desc
