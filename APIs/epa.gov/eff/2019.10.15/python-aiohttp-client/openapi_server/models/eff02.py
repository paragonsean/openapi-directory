# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Eff02(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, npdes_violation_id: str=None, rnc_detection_code: str=None, rnc_detection_date: str=None, rnc_detection_desc: str=None, rnc_resolution_code: str=None, rnc_resolution_date: str=None, rnc_resolution_desc: str=None, violation_code: str=None, violation_desc: str=None, violation_severity: str=None, violation_severity_desc: str=None):
        """Eff02 - a model defined in OpenAPI

        :param npdes_violation_id: The npdes_violation_id of this Eff02.
        :param rnc_detection_code: The rnc_detection_code of this Eff02.
        :param rnc_detection_date: The rnc_detection_date of this Eff02.
        :param rnc_detection_desc: The rnc_detection_desc of this Eff02.
        :param rnc_resolution_code: The rnc_resolution_code of this Eff02.
        :param rnc_resolution_date: The rnc_resolution_date of this Eff02.
        :param rnc_resolution_desc: The rnc_resolution_desc of this Eff02.
        :param violation_code: The violation_code of this Eff02.
        :param violation_desc: The violation_desc of this Eff02.
        :param violation_severity: The violation_severity of this Eff02.
        :param violation_severity_desc: The violation_severity_desc of this Eff02.
        """
        self.openapi_types = {
            'npdes_violation_id': str,
            'rnc_detection_code': str,
            'rnc_detection_date': str,
            'rnc_detection_desc': str,
            'rnc_resolution_code': str,
            'rnc_resolution_date': str,
            'rnc_resolution_desc': str,
            'violation_code': str,
            'violation_desc': str,
            'violation_severity': str,
            'violation_severity_desc': str
        }

        self.attribute_map = {
            'npdes_violation_id': 'NPDESViolationId',
            'rnc_detection_code': 'RNCDetectionCode',
            'rnc_detection_date': 'RNCDetectionDate',
            'rnc_detection_desc': 'RNCDetectionDesc',
            'rnc_resolution_code': 'RNCResolutionCode',
            'rnc_resolution_date': 'RNCResolutionDate',
            'rnc_resolution_desc': 'RNCResolutionDesc',
            'violation_code': 'ViolationCode',
            'violation_desc': 'ViolationDesc',
            'violation_severity': 'ViolationSeverity',
            'violation_severity_desc': 'ViolationSeverityDesc'
        }

        self._npdes_violation_id = npdes_violation_id
        self._rnc_detection_code = rnc_detection_code
        self._rnc_detection_date = rnc_detection_date
        self._rnc_detection_desc = rnc_detection_desc
        self._rnc_resolution_code = rnc_resolution_code
        self._rnc_resolution_date = rnc_resolution_date
        self._rnc_resolution_desc = rnc_resolution_desc
        self._violation_code = violation_code
        self._violation_desc = violation_desc
        self._violation_severity = violation_severity
        self._violation_severity_desc = violation_severity_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff02':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff02 of this Eff02.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def npdes_violation_id(self):
        """Gets the npdes_violation_id of this Eff02.

        The unique identifier in ICIS-NPDES for the NPDES Violation

        :return: The npdes_violation_id of this Eff02.
        :rtype: str
        """
        return self._npdes_violation_id

    @npdes_violation_id.setter
    def npdes_violation_id(self, npdes_violation_id):
        """Sets the npdes_violation_id of this Eff02.

        The unique identifier in ICIS-NPDES for the NPDES Violation

        :param npdes_violation_id: The npdes_violation_id of this Eff02.
        :type npdes_violation_id: str
        """

        self._npdes_violation_id = npdes_violation_id

    @property
    def rnc_detection_code(self):
        """Gets the rnc_detection_code of this Eff02.

        The code indicating the reportable noncompliance (RNC) detected for a violation: - A = Enforcement Order - B = Manual 2A4 - Pass-Through - C = Chronic Violation - D = Manual Other - E = Manual 2F - Permit Narrative - F = Manual 2G - Violation of Concern - G = Manual 2A1 - Effluent Violation - H = Chronic Violation, Non-Monthly Average - I = Manual 2A2 - Unauthorized Bypass - J = Manual 2A3 - Unpermitted Discharge - K = Non-receipt Violation, Non-Monthly Average - N = Non-Receipt of DMR/Schedule Report - P = Enforcement Order, Non-Monthly Average - Q = Manual 2B - Pretreatment - R = TRC Limitations Exceeded, Non-Monthly Average - S = Schedule Violation - T = TRC Limitations Exceeded - U = Other Violation with TRC Non-Monthly Average - V = Other Violation with TRC - W = Manual 2E - Deficient Report - X = Manual Other Violation with TRC - Y = Manual TRC - Z = Manual Chronic

        :return: The rnc_detection_code of this Eff02.
        :rtype: str
        """
        return self._rnc_detection_code

    @rnc_detection_code.setter
    def rnc_detection_code(self, rnc_detection_code):
        """Sets the rnc_detection_code of this Eff02.

        The code indicating the reportable noncompliance (RNC) detected for a violation: - A = Enforcement Order - B = Manual 2A4 - Pass-Through - C = Chronic Violation - D = Manual Other - E = Manual 2F - Permit Narrative - F = Manual 2G - Violation of Concern - G = Manual 2A1 - Effluent Violation - H = Chronic Violation, Non-Monthly Average - I = Manual 2A2 - Unauthorized Bypass - J = Manual 2A3 - Unpermitted Discharge - K = Non-receipt Violation, Non-Monthly Average - N = Non-Receipt of DMR/Schedule Report - P = Enforcement Order, Non-Monthly Average - Q = Manual 2B - Pretreatment - R = TRC Limitations Exceeded, Non-Monthly Average - S = Schedule Violation - T = TRC Limitations Exceeded - U = Other Violation with TRC Non-Monthly Average - V = Other Violation with TRC - W = Manual 2E - Deficient Report - X = Manual Other Violation with TRC - Y = Manual TRC - Z = Manual Chronic

        :param rnc_detection_code: The rnc_detection_code of this Eff02.
        :type rnc_detection_code: str
        """

        self._rnc_detection_code = rnc_detection_code

    @property
    def rnc_detection_date(self):
        """Gets the rnc_detection_date of this Eff02.

        The date that the exceedance was detected

        :return: The rnc_detection_date of this Eff02.
        :rtype: str
        """
        return self._rnc_detection_date

    @rnc_detection_date.setter
    def rnc_detection_date(self, rnc_detection_date):
        """Sets the rnc_detection_date of this Eff02.

        The date that the exceedance was detected

        :param rnc_detection_date: The rnc_detection_date of this Eff02.
        :type rnc_detection_date: str
        """

        self._rnc_detection_date = rnc_detection_date

    @property
    def rnc_detection_desc(self):
        """Gets the rnc_detection_desc of this Eff02.

        A description of the reportable noncompliance (RNC) detected

        :return: The rnc_detection_desc of this Eff02.
        :rtype: str
        """
        return self._rnc_detection_desc

    @rnc_detection_desc.setter
    def rnc_detection_desc(self, rnc_detection_desc):
        """Sets the rnc_detection_desc of this Eff02.

        A description of the reportable noncompliance (RNC) detected

        :param rnc_detection_desc: The rnc_detection_desc of this Eff02.
        :type rnc_detection_desc: str
        """

        self._rnc_detection_desc = rnc_detection_desc

    @property
    def rnc_resolution_code(self):
        """Gets the rnc_resolution_code of this Eff02.

        The code indicating the resolution of noncompliance (RNC) for a violation

        :return: The rnc_resolution_code of this Eff02.
        :rtype: str
        """
        return self._rnc_resolution_code

    @rnc_resolution_code.setter
    def rnc_resolution_code(self, rnc_resolution_code):
        """Sets the rnc_resolution_code of this Eff02.

        The code indicating the resolution of noncompliance (RNC) for a violation

        :param rnc_resolution_code: The rnc_resolution_code of this Eff02.
        :type rnc_resolution_code: str
        """

        self._rnc_resolution_code = rnc_resolution_code

    @property
    def rnc_resolution_date(self):
        """Gets the rnc_resolution_date of this Eff02.

        The date RNC was marked to its current resolution status. It can be entered manually or automatically

        :return: The rnc_resolution_date of this Eff02.
        :rtype: str
        """
        return self._rnc_resolution_date

    @rnc_resolution_date.setter
    def rnc_resolution_date(self, rnc_resolution_date):
        """Sets the rnc_resolution_date of this Eff02.

        The date RNC was marked to its current resolution status. It can be entered manually or automatically

        :param rnc_resolution_date: The rnc_resolution_date of this Eff02.
        :type rnc_resolution_date: str
        """

        self._rnc_resolution_date = rnc_resolution_date

    @property
    def rnc_resolution_desc(self):
        """Gets the rnc_resolution_desc of this Eff02.

        - 1 = Unresolved RNC - 2 = Back into Compliance - 3 = Due to Formal Enforcement Action Final Order with Compliance Schedule - 4 = In Compliance with Formal Enforcement Action Final Order Requirement - 5 = Resolved RP by NPDES Closure of Enforcement Action Final Order with Compliance Schedule - 6 = Manual Resolution by Enforcement Action - 7 = Manual RP - In Compliance with Formal Enforcement Action Order Requirement - 8 = Manual Due to Formal Enforcement Action Formal Order - 9 = Manual by Back into Compliance - A = Manual Unresolved RNC - B = Manual by EPA/State/Tribal Action

        :return: The rnc_resolution_desc of this Eff02.
        :rtype: str
        """
        return self._rnc_resolution_desc

    @rnc_resolution_desc.setter
    def rnc_resolution_desc(self, rnc_resolution_desc):
        """Sets the rnc_resolution_desc of this Eff02.

        - 1 = Unresolved RNC - 2 = Back into Compliance - 3 = Due to Formal Enforcement Action Final Order with Compliance Schedule - 4 = In Compliance with Formal Enforcement Action Final Order Requirement - 5 = Resolved RP by NPDES Closure of Enforcement Action Final Order with Compliance Schedule - 6 = Manual Resolution by Enforcement Action - 7 = Manual RP - In Compliance with Formal Enforcement Action Order Requirement - 8 = Manual Due to Formal Enforcement Action Formal Order - 9 = Manual by Back into Compliance - A = Manual Unresolved RNC - B = Manual by EPA/State/Tribal Action

        :param rnc_resolution_desc: The rnc_resolution_desc of this Eff02.
        :type rnc_resolution_desc: str
        """

        self._rnc_resolution_desc = rnc_resolution_desc

    @property
    def violation_code(self):
        """Gets the violation_code of this Eff02.

        The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)

        :return: The violation_code of this Eff02.
        :rtype: str
        """
        return self._violation_code

    @violation_code.setter
    def violation_code(self, violation_code):
        """Sets the violation_code of this Eff02.

        The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)

        :param violation_code: The violation_code of this Eff02.
        :type violation_code: str
        """

        self._violation_code = violation_code

    @property
    def violation_desc(self):
        """Gets the violation_desc of this Eff02.

        A description of which type of violation has occurred

        :return: The violation_desc of this Eff02.
        :rtype: str
        """
        return self._violation_desc

    @violation_desc.setter
    def violation_desc(self, violation_desc):
        """Sets the violation_desc of this Eff02.

        A description of which type of violation has occurred

        :param violation_desc: The violation_desc of this Eff02.
        :type violation_desc: str
        """

        self._violation_desc = violation_desc

    @property
    def violation_severity(self):
        """Gets the violation_severity of this Eff02.

        - 0 = no violation. - 1 = monitoring or reporting violation - 2 = effluent violation, i.e., discharge in excess of permitted limit - 3 = reportable noncompliance - 5 = significant noncompliance

        :return: The violation_severity of this Eff02.
        :rtype: str
        """
        return self._violation_severity

    @violation_severity.setter
    def violation_severity(self, violation_severity):
        """Sets the violation_severity of this Eff02.

        - 0 = no violation. - 1 = monitoring or reporting violation - 2 = effluent violation, i.e., discharge in excess of permitted limit - 3 = reportable noncompliance - 5 = significant noncompliance

        :param violation_severity: The violation_severity of this Eff02.
        :type violation_severity: str
        """

        self._violation_severity = violation_severity

    @property
    def violation_severity_desc(self):
        """Gets the violation_severity_desc of this Eff02.


        :return: The violation_severity_desc of this Eff02.
        :rtype: str
        """
        return self._violation_severity_desc

    @violation_severity_desc.setter
    def violation_severity_desc(self, violation_severity_desc):
        """Sets the violation_severity_desc of this Eff02.


        :param violation_severity_desc: The violation_severity_desc of this Eff02.
        :type violation_severity_desc: str
        """

        self._violation_severity_desc = violation_severity_desc
