# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eff03 import Eff03
from openapi_server import util


class Eff04(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: List[Eff03]=None, perm_feature_nmbr: str=None, perm_feature_type_code: str=None, perm_feature_type_desc: str=None):
        """Eff04 - a model defined in OpenAPI

        :param parameters: The parameters of this Eff04.
        :param perm_feature_nmbr: The perm_feature_nmbr of this Eff04.
        :param perm_feature_type_code: The perm_feature_type_code of this Eff04.
        :param perm_feature_type_desc: The perm_feature_type_desc of this Eff04.
        """
        self.openapi_types = {
            'parameters': List[Eff03],
            'perm_feature_nmbr': str,
            'perm_feature_type_code': str,
            'perm_feature_type_desc': str
        }

        self.attribute_map = {
            'parameters': 'Parameters',
            'perm_feature_nmbr': 'PermFeatureNmbr',
            'perm_feature_type_code': 'PermFeatureTypeCode',
            'perm_feature_type_desc': 'PermFeatureTypeDesc'
        }

        self._parameters = parameters
        self._perm_feature_nmbr = perm_feature_nmbr
        self._perm_feature_type_code = perm_feature_type_code
        self._perm_feature_type_desc = perm_feature_type_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff04':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff04 of this Eff04.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this Eff04.

        Array of Effuent Limit Parameters

        :return: The parameters of this Eff04.
        :rtype: List[Eff03]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Eff04.

        Array of Effuent Limit Parameters

        :param parameters: The parameters of this Eff04.
        :type parameters: List[Eff03]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def perm_feature_nmbr(self):
        """Gets the perm_feature_nmbr of this Eff04.

        A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)

        :return: The perm_feature_nmbr of this Eff04.
        :rtype: str
        """
        return self._perm_feature_nmbr

    @perm_feature_nmbr.setter
    def perm_feature_nmbr(self, perm_feature_nmbr):
        """Sets the perm_feature_nmbr of this Eff04.

        A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)

        :param perm_feature_nmbr: The perm_feature_nmbr of this Eff04.
        :type perm_feature_nmbr: str
        """
        if perm_feature_nmbr is None:
            raise ValueError("Invalid value for `perm_feature_nmbr`, must not be `None`")

        self._perm_feature_nmbr = perm_feature_nmbr

    @property
    def perm_feature_type_code(self):
        """Gets the perm_feature_type_code of this Eff04.

        The code indicating the type of permitted feature (e.g., EXO)

        :return: The perm_feature_type_code of this Eff04.
        :rtype: str
        """
        return self._perm_feature_type_code

    @perm_feature_type_code.setter
    def perm_feature_type_code(self, perm_feature_type_code):
        """Sets the perm_feature_type_code of this Eff04.

        The code indicating the type of permitted feature (e.g., EXO)

        :param perm_feature_type_code: The perm_feature_type_code of this Eff04.
        :type perm_feature_type_code: str
        """
        if perm_feature_type_code is None:
            raise ValueError("Invalid value for `perm_feature_type_code`, must not be `None`")

        self._perm_feature_type_code = perm_feature_type_code

    @property
    def perm_feature_type_desc(self):
        """Gets the perm_feature_type_desc of this Eff04.

        The description indicating the type of permitted feature (e.g., External Outfall, Internal Outfall, Sum)

        :return: The perm_feature_type_desc of this Eff04.
        :rtype: str
        """
        return self._perm_feature_type_desc

    @perm_feature_type_desc.setter
    def perm_feature_type_desc(self, perm_feature_type_desc):
        """Sets the perm_feature_type_desc of this Eff04.

        The description indicating the type of permitted feature (e.g., External Outfall, Internal Outfall, Sum)

        :param perm_feature_type_desc: The perm_feature_type_desc of this Eff04.
        :type perm_feature_type_desc: str
        """
        if perm_feature_type_desc is None:
            raise ValueError("Invalid value for `perm_feature_type_desc`, must not be `None`")

        self._perm_feature_type_desc = perm_feature_type_desc
