# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eff04 import Eff04
from openapi_server import util


class Eff05(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cwp_city: str=None, cwp_current_snc_status: str=None, cwp_major_minor_status_flag: str=None, cwp_name: str=None, cwp_permit_status_desc: str=None, cwp_permit_type_desc: str=None, cwp_state: str=None, cwp_street: str=None, cwp_zip: str=None, epa_system: str=None, end_date: str=None, message: str=None, perm_features: List[Eff04]=None, registry_id: str=None, source_id: str=None, start_date: str=None, statute: str=None):
        """Eff05 - a model defined in OpenAPI

        :param cwp_city: The cwp_city of this Eff05.
        :param cwp_current_snc_status: The cwp_current_snc_status of this Eff05.
        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Eff05.
        :param cwp_name: The cwp_name of this Eff05.
        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Eff05.
        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Eff05.
        :param cwp_state: The cwp_state of this Eff05.
        :param cwp_street: The cwp_street of this Eff05.
        :param cwp_zip: The cwp_zip of this Eff05.
        :param epa_system: The epa_system of this Eff05.
        :param end_date: The end_date of this Eff05.
        :param message: The message of this Eff05.
        :param perm_features: The perm_features of this Eff05.
        :param registry_id: The registry_id of this Eff05.
        :param source_id: The source_id of this Eff05.
        :param start_date: The start_date of this Eff05.
        :param statute: The statute of this Eff05.
        """
        self.openapi_types = {
            'cwp_city': str,
            'cwp_current_snc_status': str,
            'cwp_major_minor_status_flag': str,
            'cwp_name': str,
            'cwp_permit_status_desc': str,
            'cwp_permit_type_desc': str,
            'cwp_state': str,
            'cwp_street': str,
            'cwp_zip': str,
            'epa_system': str,
            'end_date': str,
            'message': str,
            'perm_features': List[Eff04],
            'registry_id': str,
            'source_id': str,
            'start_date': str,
            'statute': str
        }

        self.attribute_map = {
            'cwp_city': 'CWPCity',
            'cwp_current_snc_status': 'CWPCurrentSNCStatus',
            'cwp_major_minor_status_flag': 'CWPMajorMinorStatusFlag',
            'cwp_name': 'CWPName',
            'cwp_permit_status_desc': 'CWPPermitStatusDesc',
            'cwp_permit_type_desc': 'CWPPermitTypeDesc',
            'cwp_state': 'CWPState',
            'cwp_street': 'CWPStreet',
            'cwp_zip': 'CWPZip',
            'epa_system': 'EPASystem',
            'end_date': 'EndDate',
            'message': 'Message',
            'perm_features': 'PermFeatures',
            'registry_id': 'RegistryId',
            'source_id': 'SourceId',
            'start_date': 'StartDate',
            'statute': 'Statute'
        }

        self._cwp_city = cwp_city
        self._cwp_current_snc_status = cwp_current_snc_status
        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag
        self._cwp_name = cwp_name
        self._cwp_permit_status_desc = cwp_permit_status_desc
        self._cwp_permit_type_desc = cwp_permit_type_desc
        self._cwp_state = cwp_state
        self._cwp_street = cwp_street
        self._cwp_zip = cwp_zip
        self._epa_system = epa_system
        self._end_date = end_date
        self._message = message
        self._perm_features = perm_features
        self._registry_id = registry_id
        self._source_id = source_id
        self._start_date = start_date
        self._statute = statute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Eff05':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eff05 of this Eff05.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cwp_city(self):
        """Gets the cwp_city of this Eff05.

        City in which the facility is located.

        :return: The cwp_city of this Eff05.
        :rtype: str
        """
        return self._cwp_city

    @cwp_city.setter
    def cwp_city(self, cwp_city):
        """Sets the cwp_city of this Eff05.

        City in which the facility is located.

        :param cwp_city: The cwp_city of this Eff05.
        :type cwp_city: str
        """
        if cwp_city is None:
            raise ValueError("Invalid value for `cwp_city`, must not be `None`")

        self._cwp_city = cwp_city

    @property
    def cwp_current_snc_status(self):
        """Gets the cwp_current_snc_status of this Eff05.

        The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.

        :return: The cwp_current_snc_status of this Eff05.
        :rtype: str
        """
        return self._cwp_current_snc_status

    @cwp_current_snc_status.setter
    def cwp_current_snc_status(self, cwp_current_snc_status):
        """Sets the cwp_current_snc_status of this Eff05.

        The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.

        :param cwp_current_snc_status: The cwp_current_snc_status of this Eff05.
        :type cwp_current_snc_status: str
        """
        if cwp_current_snc_status is None:
            raise ValueError("Invalid value for `cwp_current_snc_status`, must not be `None`")

        self._cwp_current_snc_status = cwp_current_snc_status

    @property
    def cwp_major_minor_status_flag(self):
        """Gets the cwp_major_minor_status_flag of this Eff05.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :return: The cwp_major_minor_status_flag of this Eff05.
        :rtype: str
        """
        return self._cwp_major_minor_status_flag

    @cwp_major_minor_status_flag.setter
    def cwp_major_minor_status_flag(self, cwp_major_minor_status_flag):
        """Sets the cwp_major_minor_status_flag of this Eff05.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Eff05.
        :type cwp_major_minor_status_flag: str
        """
        if cwp_major_minor_status_flag is None:
            raise ValueError("Invalid value for `cwp_major_minor_status_flag`, must not be `None`")

        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag

    @property
    def cwp_name(self):
        """Gets the cwp_name of this Eff05.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :return: The cwp_name of this Eff05.
        :rtype: str
        """
        return self._cwp_name

    @cwp_name.setter
    def cwp_name(self, cwp_name):
        """Sets the cwp_name of this Eff05.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :param cwp_name: The cwp_name of this Eff05.
        :type cwp_name: str
        """
        if cwp_name is None:
            raise ValueError("Invalid value for `cwp_name`, must not be `None`")

        self._cwp_name = cwp_name

    @property
    def cwp_permit_status_desc(self):
        """Gets the cwp_permit_status_desc of this Eff05.

        The current stage/status in the NPDES permit life cycle.

        :return: The cwp_permit_status_desc of this Eff05.
        :rtype: str
        """
        return self._cwp_permit_status_desc

    @cwp_permit_status_desc.setter
    def cwp_permit_status_desc(self, cwp_permit_status_desc):
        """Sets the cwp_permit_status_desc of this Eff05.

        The current stage/status in the NPDES permit life cycle.

        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Eff05.
        :type cwp_permit_status_desc: str
        """
        if cwp_permit_status_desc is None:
            raise ValueError("Invalid value for `cwp_permit_status_desc`, must not be `None`")

        self._cwp_permit_status_desc = cwp_permit_status_desc

    @property
    def cwp_permit_type_desc(self):
        """Gets the cwp_permit_type_desc of this Eff05.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :return: The cwp_permit_type_desc of this Eff05.
        :rtype: str
        """
        return self._cwp_permit_type_desc

    @cwp_permit_type_desc.setter
    def cwp_permit_type_desc(self, cwp_permit_type_desc):
        """Sets the cwp_permit_type_desc of this Eff05.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Eff05.
        :type cwp_permit_type_desc: str
        """
        if cwp_permit_type_desc is None:
            raise ValueError("Invalid value for `cwp_permit_type_desc`, must not be `None`")

        self._cwp_permit_type_desc = cwp_permit_type_desc

    @property
    def cwp_state(self):
        """Gets the cwp_state of this Eff05.

        Facility location - two-digit state abbreviation.

        :return: The cwp_state of this Eff05.
        :rtype: str
        """
        return self._cwp_state

    @cwp_state.setter
    def cwp_state(self, cwp_state):
        """Sets the cwp_state of this Eff05.

        Facility location - two-digit state abbreviation.

        :param cwp_state: The cwp_state of this Eff05.
        :type cwp_state: str
        """
        if cwp_state is None:
            raise ValueError("Invalid value for `cwp_state`, must not be `None`")

        self._cwp_state = cwp_state

    @property
    def cwp_street(self):
        """Gets the cwp_street of this Eff05.

        Facility street address

        :return: The cwp_street of this Eff05.
        :rtype: str
        """
        return self._cwp_street

    @cwp_street.setter
    def cwp_street(self, cwp_street):
        """Sets the cwp_street of this Eff05.

        Facility street address

        :param cwp_street: The cwp_street of this Eff05.
        :type cwp_street: str
        """
        if cwp_street is None:
            raise ValueError("Invalid value for `cwp_street`, must not be `None`")

        self._cwp_street = cwp_street

    @property
    def cwp_zip(self):
        """Gets the cwp_zip of this Eff05.

        Facility ZIP code

        :return: The cwp_zip of this Eff05.
        :rtype: str
        """
        return self._cwp_zip

    @cwp_zip.setter
    def cwp_zip(self, cwp_zip):
        """Sets the cwp_zip of this Eff05.

        Facility ZIP code

        :param cwp_zip: The cwp_zip of this Eff05.
        :type cwp_zip: str
        """
        if cwp_zip is None:
            raise ValueError("Invalid value for `cwp_zip`, must not be `None`")

        self._cwp_zip = cwp_zip

    @property
    def epa_system(self):
        """Gets the epa_system of this Eff05.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Eff05.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Eff05.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Eff05.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def end_date(self):
        """Gets the end_date of this Eff05.

        End date for the date range of interest. Formatted as mm/dd/yyyy

        :return: The end_date of this Eff05.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Eff05.

        End date for the date range of interest. Formatted as mm/dd/yyyy

        :param end_date: The end_date of this Eff05.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def message(self):
        """Gets the message of this Eff05.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Eff05.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Eff05.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Eff05.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def perm_features(self):
        """Gets the perm_features of this Eff05.

        Array of Permitted Features

        :return: The perm_features of this Eff05.
        :rtype: List[Eff04]
        """
        return self._perm_features

    @perm_features.setter
    def perm_features(self, perm_features):
        """Sets the perm_features of this Eff05.

        Array of Permitted Features

        :param perm_features: The perm_features of this Eff05.
        :type perm_features: List[Eff04]
        """

        self._perm_features = perm_features

    @property
    def registry_id(self):
        """Gets the registry_id of this Eff05.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :return: The registry_id of this Eff05.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Eff05.

        12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records

        :param registry_id: The registry_id of this Eff05.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def source_id(self):
        """Gets the source_id of this Eff05.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Eff05.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Eff05.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Eff05.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def start_date(self):
        """Gets the start_date of this Eff05.

        Starting date for the date range of interest. Formatted as mm/dd/yyyy

        :return: The start_date of this Eff05.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Eff05.

        Starting date for the date range of interest. Formatted as mm/dd/yyyy

        :param start_date: The start_date of this Eff05.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def statute(self):
        """Gets the statute of this Eff05.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Eff05.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Eff05.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Eff05.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute
