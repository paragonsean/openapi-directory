/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eff02 from './Eff02';

/**
 * The Eff01 model module.
 * @module model/Eff01
 * @version 2019.10.15
 */
class Eff01 {
    /**
     * Constructs a new <code>Eff01</code>.
     * Discharge Monitoring Reports Object
     * @alias module:model/Eff01
     * @param dMREventId {String} The sequence ID identifying the DMR Event.
     * @param dMRFormValueId {String} The sequence ID identifying the DMR Form Value.
     * @param dMRUnitCode {String} The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered into ICIS-NPDES
     * @param dMRUnitDesc {String} The short description of the unit of measure applicable to limit or DMR values
     * @param dMRValueId {String} The unique identifier for the DMR value generated in ICIS-NPDES
     * @param dMRValueNmbr {String} The DMR value number reported on the DMR Form
     * @param dMRValueQualifierCode {String} The unique code identifying the DMR value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count
     * @param dMRValueStdUnits {String} The DMR value expressed in standard units, as calculated in ICIS-NPDES
     * @param daysLate {String} The number of days the DMR value is late, as generated in ICIS-NPDES
     * @param exceedencePct {String} The percent by which the DMR value (or adjusted value) exceeded its limit (or stay) value, as generated in ICIS-NPDES
     * @param limitBeginDate {String} The date on which a limit becomes in effect for a particular parameter in a limit set
     * @param limitEndDate {String} The date on which a limit stops being in effect for a particular parameter in a limit set
     * @param limitId {String} The unique identifier for a limit parameter record
     * @param limitSetId {String} The unique identifier for a limit set, generated in ICIS-NPDES
     * @param limitSetScheduleId {String} The unique identifier of the Limit Set Schedule, generated in ICIS-NPDES
     * @param limitTypeCode {String} 
     * @param limitUnitCode {String} The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered by the user
     * @param limitUnitDesc {String} The short description of the unit of measure applicable to limit or DMR values
     * @param limitValueId {String} The unique identifier in ICIS-NPDES for the Limit Value
     * @param limitValueNmbr {String} The numerical limit for a given parameter
     * @param limitValueQualifierCode {String} The unique code identifying the limit value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count
     * @param limitValueStdUnits {String} The limit value expressed in standard units, as calculated in ICIS-NPDES
     * @param limitValueTypeCode {String} The code indicating the type of value the limit is given as (i.e., Q1, Q2, C1, C2, C3)
     * @param limitValueTypeDesc {String} The description indicating the type of value the limit is given as (e.g., Concentration, Quantity)
     * @param monitoringPeriodEndDate {String} The date that the monitoring period for the values covered by the DMR Form ends
     * @param nODEDesc {String} 
     * @param nODICode {String} The unique code indicating why no DMR Value was submitted by the permittee for a Monitoring Period End Date
     * @param nmbrOfSubmission {String} The number of months of discharges represented on each DMR for the limit set (e.g., monthly = 1, bi-monthly = 2, quarterly = 3, triannual = 4, semi-annual = 6, annual = 12). This data element will be blank for Unscheduled Limit Sets
     * @param permFeatureId {String} The unique identifier in ICIS-NPDES of a permitted feature or outfall
     * @param statisticalBaseCode {String} The code representing the unit of measure applicable to the limit and DMR values entered by the user (e.g., 30-day average, daily maximum)
     * @param statisticalBaseDesc {String} 
     * @param statisticalBaseTypeCode {String} The code indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
     * @param statisticalBaseTypeDesc {String} A short description for indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
     * @param stayValueNmbr {String} The numeric limit value imposed during the period of the stay for the limit; if entered, during the stay period, ICIS-NPDES will use this limit value for calculating compliance rather than the actual limit value
     * @param stdUnitCode {String} The code representing the standard unit of measure applicable to quantity or concentration limits and measurements as entered by the user
     * @param stdUnitDesc {String} The short description of the standard unit of measure applicable to limit or DMR values
     * @param valueReceivedDate {String} The date the DMR value was received by the regulatory authority
     * @param valueTypeCode {String} The indication of the limit value type (e.g., Quantity 1, Concentration 2)
     * @param valueTypeDesc {String} The type of value the measured number is given as (e.g., Concentration, Quantity)
     * @param versionNmbr {String} The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance
     */
    constructor(dMREventId, dMRFormValueId, dMRUnitCode, dMRUnitDesc, dMRValueId, dMRValueNmbr, dMRValueQualifierCode, dMRValueStdUnits, daysLate, exceedencePct, limitBeginDate, limitEndDate, limitId, limitSetId, limitSetScheduleId, limitTypeCode, limitUnitCode, limitUnitDesc, limitValueId, limitValueNmbr, limitValueQualifierCode, limitValueStdUnits, limitValueTypeCode, limitValueTypeDesc, monitoringPeriodEndDate, nODEDesc, nODICode, nmbrOfSubmission, permFeatureId, statisticalBaseCode, statisticalBaseDesc, statisticalBaseTypeCode, statisticalBaseTypeDesc, stayValueNmbr, stdUnitCode, stdUnitDesc, valueReceivedDate, valueTypeCode, valueTypeDesc, versionNmbr) { 
        
        Eff01.initialize(this, dMREventId, dMRFormValueId, dMRUnitCode, dMRUnitDesc, dMRValueId, dMRValueNmbr, dMRValueQualifierCode, dMRValueStdUnits, daysLate, exceedencePct, limitBeginDate, limitEndDate, limitId, limitSetId, limitSetScheduleId, limitTypeCode, limitUnitCode, limitUnitDesc, limitValueId, limitValueNmbr, limitValueQualifierCode, limitValueStdUnits, limitValueTypeCode, limitValueTypeDesc, monitoringPeriodEndDate, nODEDesc, nODICode, nmbrOfSubmission, permFeatureId, statisticalBaseCode, statisticalBaseDesc, statisticalBaseTypeCode, statisticalBaseTypeDesc, stayValueNmbr, stdUnitCode, stdUnitDesc, valueReceivedDate, valueTypeCode, valueTypeDesc, versionNmbr);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dMREventId, dMRFormValueId, dMRUnitCode, dMRUnitDesc, dMRValueId, dMRValueNmbr, dMRValueQualifierCode, dMRValueStdUnits, daysLate, exceedencePct, limitBeginDate, limitEndDate, limitId, limitSetId, limitSetScheduleId, limitTypeCode, limitUnitCode, limitUnitDesc, limitValueId, limitValueNmbr, limitValueQualifierCode, limitValueStdUnits, limitValueTypeCode, limitValueTypeDesc, monitoringPeriodEndDate, nODEDesc, nODICode, nmbrOfSubmission, permFeatureId, statisticalBaseCode, statisticalBaseDesc, statisticalBaseTypeCode, statisticalBaseTypeDesc, stayValueNmbr, stdUnitCode, stdUnitDesc, valueReceivedDate, valueTypeCode, valueTypeDesc, versionNmbr) { 
        obj['DMREventId'] = dMREventId;
        obj['DMRFormValueId'] = dMRFormValueId;
        obj['DMRUnitCode'] = dMRUnitCode;
        obj['DMRUnitDesc'] = dMRUnitDesc;
        obj['DMRValueId'] = dMRValueId;
        obj['DMRValueNmbr'] = dMRValueNmbr;
        obj['DMRValueQualifierCode'] = dMRValueQualifierCode;
        obj['DMRValueStdUnits'] = dMRValueStdUnits;
        obj['DaysLate'] = daysLate;
        obj['ExceedencePct'] = exceedencePct;
        obj['LimitBeginDate'] = limitBeginDate;
        obj['LimitEndDate'] = limitEndDate;
        obj['LimitId'] = limitId;
        obj['LimitSetId'] = limitSetId;
        obj['LimitSetScheduleId'] = limitSetScheduleId;
        obj['LimitTypeCode'] = limitTypeCode;
        obj['LimitUnitCode'] = limitUnitCode;
        obj['LimitUnitDesc'] = limitUnitDesc;
        obj['LimitValueId'] = limitValueId;
        obj['LimitValueNmbr'] = limitValueNmbr;
        obj['LimitValueQualifierCode'] = limitValueQualifierCode;
        obj['LimitValueStdUnits'] = limitValueStdUnits;
        obj['LimitValueTypeCode'] = limitValueTypeCode;
        obj['LimitValueTypeDesc'] = limitValueTypeDesc;
        obj['MonitoringPeriodEndDate'] = monitoringPeriodEndDate;
        obj['NODEDesc'] = nODEDesc;
        obj['NODICode'] = nODICode;
        obj['NmbrOfSubmission'] = nmbrOfSubmission;
        obj['PermFeatureId'] = permFeatureId;
        obj['StatisticalBaseCode'] = statisticalBaseCode;
        obj['StatisticalBaseDesc'] = statisticalBaseDesc;
        obj['StatisticalBaseTypeCode'] = statisticalBaseTypeCode;
        obj['StatisticalBaseTypeDesc'] = statisticalBaseTypeDesc;
        obj['StayValueNmbr'] = stayValueNmbr;
        obj['StdUnitCode'] = stdUnitCode;
        obj['StdUnitDesc'] = stdUnitDesc;
        obj['ValueReceivedDate'] = valueReceivedDate;
        obj['ValueTypeCode'] = valueTypeCode;
        obj['ValueTypeDesc'] = valueTypeDesc;
        obj['VersionNmbr'] = versionNmbr;
    }

    /**
     * Constructs a <code>Eff01</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Eff01} obj Optional instance to populate.
     * @return {module:model/Eff01} The populated <code>Eff01</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Eff01();

            if (data.hasOwnProperty('DMREventId')) {
                obj['DMREventId'] = ApiClient.convertToType(data['DMREventId'], 'String');
            }
            if (data.hasOwnProperty('DMRFormValueId')) {
                obj['DMRFormValueId'] = ApiClient.convertToType(data['DMRFormValueId'], 'String');
            }
            if (data.hasOwnProperty('DMRUnitCode')) {
                obj['DMRUnitCode'] = ApiClient.convertToType(data['DMRUnitCode'], 'String');
            }
            if (data.hasOwnProperty('DMRUnitDesc')) {
                obj['DMRUnitDesc'] = ApiClient.convertToType(data['DMRUnitDesc'], 'String');
            }
            if (data.hasOwnProperty('DMRValueId')) {
                obj['DMRValueId'] = ApiClient.convertToType(data['DMRValueId'], 'String');
            }
            if (data.hasOwnProperty('DMRValueNmbr')) {
                obj['DMRValueNmbr'] = ApiClient.convertToType(data['DMRValueNmbr'], 'String');
            }
            if (data.hasOwnProperty('DMRValueQualifierCode')) {
                obj['DMRValueQualifierCode'] = ApiClient.convertToType(data['DMRValueQualifierCode'], 'String');
            }
            if (data.hasOwnProperty('DMRValueStdUnits')) {
                obj['DMRValueStdUnits'] = ApiClient.convertToType(data['DMRValueStdUnits'], 'String');
            }
            if (data.hasOwnProperty('DaysLate')) {
                obj['DaysLate'] = ApiClient.convertToType(data['DaysLate'], 'String');
            }
            if (data.hasOwnProperty('ExceedencePct')) {
                obj['ExceedencePct'] = ApiClient.convertToType(data['ExceedencePct'], 'String');
            }
            if (data.hasOwnProperty('LimitBeginDate')) {
                obj['LimitBeginDate'] = ApiClient.convertToType(data['LimitBeginDate'], 'String');
            }
            if (data.hasOwnProperty('LimitEndDate')) {
                obj['LimitEndDate'] = ApiClient.convertToType(data['LimitEndDate'], 'String');
            }
            if (data.hasOwnProperty('LimitId')) {
                obj['LimitId'] = ApiClient.convertToType(data['LimitId'], 'String');
            }
            if (data.hasOwnProperty('LimitSetId')) {
                obj['LimitSetId'] = ApiClient.convertToType(data['LimitSetId'], 'String');
            }
            if (data.hasOwnProperty('LimitSetScheduleId')) {
                obj['LimitSetScheduleId'] = ApiClient.convertToType(data['LimitSetScheduleId'], 'String');
            }
            if (data.hasOwnProperty('LimitTypeCode')) {
                obj['LimitTypeCode'] = ApiClient.convertToType(data['LimitTypeCode'], 'String');
            }
            if (data.hasOwnProperty('LimitUnitCode')) {
                obj['LimitUnitCode'] = ApiClient.convertToType(data['LimitUnitCode'], 'String');
            }
            if (data.hasOwnProperty('LimitUnitDesc')) {
                obj['LimitUnitDesc'] = ApiClient.convertToType(data['LimitUnitDesc'], 'String');
            }
            if (data.hasOwnProperty('LimitValueId')) {
                obj['LimitValueId'] = ApiClient.convertToType(data['LimitValueId'], 'String');
            }
            if (data.hasOwnProperty('LimitValueNmbr')) {
                obj['LimitValueNmbr'] = ApiClient.convertToType(data['LimitValueNmbr'], 'String');
            }
            if (data.hasOwnProperty('LimitValueQualifierCode')) {
                obj['LimitValueQualifierCode'] = ApiClient.convertToType(data['LimitValueQualifierCode'], 'String');
            }
            if (data.hasOwnProperty('LimitValueStdUnits')) {
                obj['LimitValueStdUnits'] = ApiClient.convertToType(data['LimitValueStdUnits'], 'String');
            }
            if (data.hasOwnProperty('LimitValueTypeCode')) {
                obj['LimitValueTypeCode'] = ApiClient.convertToType(data['LimitValueTypeCode'], 'String');
            }
            if (data.hasOwnProperty('LimitValueTypeDesc')) {
                obj['LimitValueTypeDesc'] = ApiClient.convertToType(data['LimitValueTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('MonitoringPeriodEndDate')) {
                obj['MonitoringPeriodEndDate'] = ApiClient.convertToType(data['MonitoringPeriodEndDate'], 'String');
            }
            if (data.hasOwnProperty('NODEDesc')) {
                obj['NODEDesc'] = ApiClient.convertToType(data['NODEDesc'], 'String');
            }
            if (data.hasOwnProperty('NODICode')) {
                obj['NODICode'] = ApiClient.convertToType(data['NODICode'], 'String');
            }
            if (data.hasOwnProperty('NPDESViolations')) {
                obj['NPDESViolations'] = ApiClient.convertToType(data['NPDESViolations'], [Eff02]);
            }
            if (data.hasOwnProperty('NmbrOfSubmission')) {
                obj['NmbrOfSubmission'] = ApiClient.convertToType(data['NmbrOfSubmission'], 'String');
            }
            if (data.hasOwnProperty('PermFeatureId')) {
                obj['PermFeatureId'] = ApiClient.convertToType(data['PermFeatureId'], 'String');
            }
            if (data.hasOwnProperty('StatisticalBaseCode')) {
                obj['StatisticalBaseCode'] = ApiClient.convertToType(data['StatisticalBaseCode'], 'String');
            }
            if (data.hasOwnProperty('StatisticalBaseDesc')) {
                obj['StatisticalBaseDesc'] = ApiClient.convertToType(data['StatisticalBaseDesc'], 'String');
            }
            if (data.hasOwnProperty('StatisticalBaseTypeCode')) {
                obj['StatisticalBaseTypeCode'] = ApiClient.convertToType(data['StatisticalBaseTypeCode'], 'String');
            }
            if (data.hasOwnProperty('StatisticalBaseTypeDesc')) {
                obj['StatisticalBaseTypeDesc'] = ApiClient.convertToType(data['StatisticalBaseTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('StayValueNmbr')) {
                obj['StayValueNmbr'] = ApiClient.convertToType(data['StayValueNmbr'], 'String');
            }
            if (data.hasOwnProperty('StdUnitCode')) {
                obj['StdUnitCode'] = ApiClient.convertToType(data['StdUnitCode'], 'String');
            }
            if (data.hasOwnProperty('StdUnitDesc')) {
                obj['StdUnitDesc'] = ApiClient.convertToType(data['StdUnitDesc'], 'String');
            }
            if (data.hasOwnProperty('ValueReceivedDate')) {
                obj['ValueReceivedDate'] = ApiClient.convertToType(data['ValueReceivedDate'], 'String');
            }
            if (data.hasOwnProperty('ValueTypeCode')) {
                obj['ValueTypeCode'] = ApiClient.convertToType(data['ValueTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ValueTypeDesc')) {
                obj['ValueTypeDesc'] = ApiClient.convertToType(data['ValueTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('VersionNmbr')) {
                obj['VersionNmbr'] = ApiClient.convertToType(data['VersionNmbr'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Eff01</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Eff01</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Eff01.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DMREventId'] && !(typeof data['DMREventId'] === 'string' || data['DMREventId'] instanceof String)) {
            throw new Error("Expected the field `DMREventId` to be a primitive type in the JSON string but got " + data['DMREventId']);
        }
        // ensure the json data is a string
        if (data['DMRFormValueId'] && !(typeof data['DMRFormValueId'] === 'string' || data['DMRFormValueId'] instanceof String)) {
            throw new Error("Expected the field `DMRFormValueId` to be a primitive type in the JSON string but got " + data['DMRFormValueId']);
        }
        // ensure the json data is a string
        if (data['DMRUnitCode'] && !(typeof data['DMRUnitCode'] === 'string' || data['DMRUnitCode'] instanceof String)) {
            throw new Error("Expected the field `DMRUnitCode` to be a primitive type in the JSON string but got " + data['DMRUnitCode']);
        }
        // ensure the json data is a string
        if (data['DMRUnitDesc'] && !(typeof data['DMRUnitDesc'] === 'string' || data['DMRUnitDesc'] instanceof String)) {
            throw new Error("Expected the field `DMRUnitDesc` to be a primitive type in the JSON string but got " + data['DMRUnitDesc']);
        }
        // ensure the json data is a string
        if (data['DMRValueId'] && !(typeof data['DMRValueId'] === 'string' || data['DMRValueId'] instanceof String)) {
            throw new Error("Expected the field `DMRValueId` to be a primitive type in the JSON string but got " + data['DMRValueId']);
        }
        // ensure the json data is a string
        if (data['DMRValueNmbr'] && !(typeof data['DMRValueNmbr'] === 'string' || data['DMRValueNmbr'] instanceof String)) {
            throw new Error("Expected the field `DMRValueNmbr` to be a primitive type in the JSON string but got " + data['DMRValueNmbr']);
        }
        // ensure the json data is a string
        if (data['DMRValueQualifierCode'] && !(typeof data['DMRValueQualifierCode'] === 'string' || data['DMRValueQualifierCode'] instanceof String)) {
            throw new Error("Expected the field `DMRValueQualifierCode` to be a primitive type in the JSON string but got " + data['DMRValueQualifierCode']);
        }
        // ensure the json data is a string
        if (data['DMRValueStdUnits'] && !(typeof data['DMRValueStdUnits'] === 'string' || data['DMRValueStdUnits'] instanceof String)) {
            throw new Error("Expected the field `DMRValueStdUnits` to be a primitive type in the JSON string but got " + data['DMRValueStdUnits']);
        }
        // ensure the json data is a string
        if (data['DaysLate'] && !(typeof data['DaysLate'] === 'string' || data['DaysLate'] instanceof String)) {
            throw new Error("Expected the field `DaysLate` to be a primitive type in the JSON string but got " + data['DaysLate']);
        }
        // ensure the json data is a string
        if (data['ExceedencePct'] && !(typeof data['ExceedencePct'] === 'string' || data['ExceedencePct'] instanceof String)) {
            throw new Error("Expected the field `ExceedencePct` to be a primitive type in the JSON string but got " + data['ExceedencePct']);
        }
        // ensure the json data is a string
        if (data['LimitBeginDate'] && !(typeof data['LimitBeginDate'] === 'string' || data['LimitBeginDate'] instanceof String)) {
            throw new Error("Expected the field `LimitBeginDate` to be a primitive type in the JSON string but got " + data['LimitBeginDate']);
        }
        // ensure the json data is a string
        if (data['LimitEndDate'] && !(typeof data['LimitEndDate'] === 'string' || data['LimitEndDate'] instanceof String)) {
            throw new Error("Expected the field `LimitEndDate` to be a primitive type in the JSON string but got " + data['LimitEndDate']);
        }
        // ensure the json data is a string
        if (data['LimitId'] && !(typeof data['LimitId'] === 'string' || data['LimitId'] instanceof String)) {
            throw new Error("Expected the field `LimitId` to be a primitive type in the JSON string but got " + data['LimitId']);
        }
        // ensure the json data is a string
        if (data['LimitSetId'] && !(typeof data['LimitSetId'] === 'string' || data['LimitSetId'] instanceof String)) {
            throw new Error("Expected the field `LimitSetId` to be a primitive type in the JSON string but got " + data['LimitSetId']);
        }
        // ensure the json data is a string
        if (data['LimitSetScheduleId'] && !(typeof data['LimitSetScheduleId'] === 'string' || data['LimitSetScheduleId'] instanceof String)) {
            throw new Error("Expected the field `LimitSetScheduleId` to be a primitive type in the JSON string but got " + data['LimitSetScheduleId']);
        }
        // ensure the json data is a string
        if (data['LimitTypeCode'] && !(typeof data['LimitTypeCode'] === 'string' || data['LimitTypeCode'] instanceof String)) {
            throw new Error("Expected the field `LimitTypeCode` to be a primitive type in the JSON string but got " + data['LimitTypeCode']);
        }
        // ensure the json data is a string
        if (data['LimitUnitCode'] && !(typeof data['LimitUnitCode'] === 'string' || data['LimitUnitCode'] instanceof String)) {
            throw new Error("Expected the field `LimitUnitCode` to be a primitive type in the JSON string but got " + data['LimitUnitCode']);
        }
        // ensure the json data is a string
        if (data['LimitUnitDesc'] && !(typeof data['LimitUnitDesc'] === 'string' || data['LimitUnitDesc'] instanceof String)) {
            throw new Error("Expected the field `LimitUnitDesc` to be a primitive type in the JSON string but got " + data['LimitUnitDesc']);
        }
        // ensure the json data is a string
        if (data['LimitValueId'] && !(typeof data['LimitValueId'] === 'string' || data['LimitValueId'] instanceof String)) {
            throw new Error("Expected the field `LimitValueId` to be a primitive type in the JSON string but got " + data['LimitValueId']);
        }
        // ensure the json data is a string
        if (data['LimitValueNmbr'] && !(typeof data['LimitValueNmbr'] === 'string' || data['LimitValueNmbr'] instanceof String)) {
            throw new Error("Expected the field `LimitValueNmbr` to be a primitive type in the JSON string but got " + data['LimitValueNmbr']);
        }
        // ensure the json data is a string
        if (data['LimitValueQualifierCode'] && !(typeof data['LimitValueQualifierCode'] === 'string' || data['LimitValueQualifierCode'] instanceof String)) {
            throw new Error("Expected the field `LimitValueQualifierCode` to be a primitive type in the JSON string but got " + data['LimitValueQualifierCode']);
        }
        // ensure the json data is a string
        if (data['LimitValueStdUnits'] && !(typeof data['LimitValueStdUnits'] === 'string' || data['LimitValueStdUnits'] instanceof String)) {
            throw new Error("Expected the field `LimitValueStdUnits` to be a primitive type in the JSON string but got " + data['LimitValueStdUnits']);
        }
        // ensure the json data is a string
        if (data['LimitValueTypeCode'] && !(typeof data['LimitValueTypeCode'] === 'string' || data['LimitValueTypeCode'] instanceof String)) {
            throw new Error("Expected the field `LimitValueTypeCode` to be a primitive type in the JSON string but got " + data['LimitValueTypeCode']);
        }
        // ensure the json data is a string
        if (data['LimitValueTypeDesc'] && !(typeof data['LimitValueTypeDesc'] === 'string' || data['LimitValueTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `LimitValueTypeDesc` to be a primitive type in the JSON string but got " + data['LimitValueTypeDesc']);
        }
        // ensure the json data is a string
        if (data['MonitoringPeriodEndDate'] && !(typeof data['MonitoringPeriodEndDate'] === 'string' || data['MonitoringPeriodEndDate'] instanceof String)) {
            throw new Error("Expected the field `MonitoringPeriodEndDate` to be a primitive type in the JSON string but got " + data['MonitoringPeriodEndDate']);
        }
        // ensure the json data is a string
        if (data['NODEDesc'] && !(typeof data['NODEDesc'] === 'string' || data['NODEDesc'] instanceof String)) {
            throw new Error("Expected the field `NODEDesc` to be a primitive type in the JSON string but got " + data['NODEDesc']);
        }
        // ensure the json data is a string
        if (data['NODICode'] && !(typeof data['NODICode'] === 'string' || data['NODICode'] instanceof String)) {
            throw new Error("Expected the field `NODICode` to be a primitive type in the JSON string but got " + data['NODICode']);
        }
        if (data['NPDESViolations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NPDESViolations'])) {
                throw new Error("Expected the field `NPDESViolations` to be an array in the JSON data but got " + data['NPDESViolations']);
            }
            // validate the optional field `NPDESViolations` (array)
            for (const item of data['NPDESViolations']) {
                Eff02.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NmbrOfSubmission'] && !(typeof data['NmbrOfSubmission'] === 'string' || data['NmbrOfSubmission'] instanceof String)) {
            throw new Error("Expected the field `NmbrOfSubmission` to be a primitive type in the JSON string but got " + data['NmbrOfSubmission']);
        }
        // ensure the json data is a string
        if (data['PermFeatureId'] && !(typeof data['PermFeatureId'] === 'string' || data['PermFeatureId'] instanceof String)) {
            throw new Error("Expected the field `PermFeatureId` to be a primitive type in the JSON string but got " + data['PermFeatureId']);
        }
        // ensure the json data is a string
        if (data['StatisticalBaseCode'] && !(typeof data['StatisticalBaseCode'] === 'string' || data['StatisticalBaseCode'] instanceof String)) {
            throw new Error("Expected the field `StatisticalBaseCode` to be a primitive type in the JSON string but got " + data['StatisticalBaseCode']);
        }
        // ensure the json data is a string
        if (data['StatisticalBaseDesc'] && !(typeof data['StatisticalBaseDesc'] === 'string' || data['StatisticalBaseDesc'] instanceof String)) {
            throw new Error("Expected the field `StatisticalBaseDesc` to be a primitive type in the JSON string but got " + data['StatisticalBaseDesc']);
        }
        // ensure the json data is a string
        if (data['StatisticalBaseTypeCode'] && !(typeof data['StatisticalBaseTypeCode'] === 'string' || data['StatisticalBaseTypeCode'] instanceof String)) {
            throw new Error("Expected the field `StatisticalBaseTypeCode` to be a primitive type in the JSON string but got " + data['StatisticalBaseTypeCode']);
        }
        // ensure the json data is a string
        if (data['StatisticalBaseTypeDesc'] && !(typeof data['StatisticalBaseTypeDesc'] === 'string' || data['StatisticalBaseTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `StatisticalBaseTypeDesc` to be a primitive type in the JSON string but got " + data['StatisticalBaseTypeDesc']);
        }
        // ensure the json data is a string
        if (data['StayValueNmbr'] && !(typeof data['StayValueNmbr'] === 'string' || data['StayValueNmbr'] instanceof String)) {
            throw new Error("Expected the field `StayValueNmbr` to be a primitive type in the JSON string but got " + data['StayValueNmbr']);
        }
        // ensure the json data is a string
        if (data['StdUnitCode'] && !(typeof data['StdUnitCode'] === 'string' || data['StdUnitCode'] instanceof String)) {
            throw new Error("Expected the field `StdUnitCode` to be a primitive type in the JSON string but got " + data['StdUnitCode']);
        }
        // ensure the json data is a string
        if (data['StdUnitDesc'] && !(typeof data['StdUnitDesc'] === 'string' || data['StdUnitDesc'] instanceof String)) {
            throw new Error("Expected the field `StdUnitDesc` to be a primitive type in the JSON string but got " + data['StdUnitDesc']);
        }
        // ensure the json data is a string
        if (data['ValueReceivedDate'] && !(typeof data['ValueReceivedDate'] === 'string' || data['ValueReceivedDate'] instanceof String)) {
            throw new Error("Expected the field `ValueReceivedDate` to be a primitive type in the JSON string but got " + data['ValueReceivedDate']);
        }
        // ensure the json data is a string
        if (data['ValueTypeCode'] && !(typeof data['ValueTypeCode'] === 'string' || data['ValueTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ValueTypeCode` to be a primitive type in the JSON string but got " + data['ValueTypeCode']);
        }
        // ensure the json data is a string
        if (data['ValueTypeDesc'] && !(typeof data['ValueTypeDesc'] === 'string' || data['ValueTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `ValueTypeDesc` to be a primitive type in the JSON string but got " + data['ValueTypeDesc']);
        }
        // ensure the json data is a string
        if (data['VersionNmbr'] && !(typeof data['VersionNmbr'] === 'string' || data['VersionNmbr'] instanceof String)) {
            throw new Error("Expected the field `VersionNmbr` to be a primitive type in the JSON string but got " + data['VersionNmbr']);
        }

        return true;
    }


}

Eff01.RequiredProperties = ["DMREventId", "DMRFormValueId", "DMRUnitCode", "DMRUnitDesc", "DMRValueId", "DMRValueNmbr", "DMRValueQualifierCode", "DMRValueStdUnits", "DaysLate", "ExceedencePct", "LimitBeginDate", "LimitEndDate", "LimitId", "LimitSetId", "LimitSetScheduleId", "LimitTypeCode", "LimitUnitCode", "LimitUnitDesc", "LimitValueId", "LimitValueNmbr", "LimitValueQualifierCode", "LimitValueStdUnits", "LimitValueTypeCode", "LimitValueTypeDesc", "MonitoringPeriodEndDate", "NODEDesc", "NODICode", "NmbrOfSubmission", "PermFeatureId", "StatisticalBaseCode", "StatisticalBaseDesc", "StatisticalBaseTypeCode", "StatisticalBaseTypeDesc", "StayValueNmbr", "StdUnitCode", "StdUnitDesc", "ValueReceivedDate", "ValueTypeCode", "ValueTypeDesc", "VersionNmbr"];

/**
 * The sequence ID identifying the DMR Event.
 * @member {String} DMREventId
 */
Eff01.prototype['DMREventId'] = undefined;

/**
 * The sequence ID identifying the DMR Form Value.
 * @member {String} DMRFormValueId
 */
Eff01.prototype['DMRFormValueId'] = undefined;

/**
 * The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered into ICIS-NPDES
 * @member {String} DMRUnitCode
 */
Eff01.prototype['DMRUnitCode'] = undefined;

/**
 * The short description of the unit of measure applicable to limit or DMR values
 * @member {String} DMRUnitDesc
 */
Eff01.prototype['DMRUnitDesc'] = undefined;

/**
 * The unique identifier for the DMR value generated in ICIS-NPDES
 * @member {String} DMRValueId
 */
Eff01.prototype['DMRValueId'] = undefined;

/**
 * The DMR value number reported on the DMR Form
 * @member {String} DMRValueNmbr
 */
Eff01.prototype['DMRValueNmbr'] = undefined;

/**
 * The unique code identifying the DMR value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count
 * @member {String} DMRValueQualifierCode
 */
Eff01.prototype['DMRValueQualifierCode'] = undefined;

/**
 * The DMR value expressed in standard units, as calculated in ICIS-NPDES
 * @member {String} DMRValueStdUnits
 */
Eff01.prototype['DMRValueStdUnits'] = undefined;

/**
 * The number of days the DMR value is late, as generated in ICIS-NPDES
 * @member {String} DaysLate
 */
Eff01.prototype['DaysLate'] = undefined;

/**
 * The percent by which the DMR value (or adjusted value) exceeded its limit (or stay) value, as generated in ICIS-NPDES
 * @member {String} ExceedencePct
 */
Eff01.prototype['ExceedencePct'] = undefined;

/**
 * The date on which a limit becomes in effect for a particular parameter in a limit set
 * @member {String} LimitBeginDate
 */
Eff01.prototype['LimitBeginDate'] = undefined;

/**
 * The date on which a limit stops being in effect for a particular parameter in a limit set
 * @member {String} LimitEndDate
 */
Eff01.prototype['LimitEndDate'] = undefined;

/**
 * The unique identifier for a limit parameter record
 * @member {String} LimitId
 */
Eff01.prototype['LimitId'] = undefined;

/**
 * The unique identifier for a limit set, generated in ICIS-NPDES
 * @member {String} LimitSetId
 */
Eff01.prototype['LimitSetId'] = undefined;

/**
 * The unique identifier of the Limit Set Schedule, generated in ICIS-NPDES
 * @member {String} LimitSetScheduleId
 */
Eff01.prototype['LimitSetScheduleId'] = undefined;

/**
 * @member {String} LimitTypeCode
 */
Eff01.prototype['LimitTypeCode'] = undefined;

/**
 * The code representing the unit of measure applicable to quantity or concentration limits and measurements as entered by the user
 * @member {String} LimitUnitCode
 */
Eff01.prototype['LimitUnitCode'] = undefined;

/**
 * The short description of the unit of measure applicable to limit or DMR values
 * @member {String} LimitUnitDesc
 */
Eff01.prototype['LimitUnitDesc'] = undefined;

/**
 * The unique identifier in ICIS-NPDES for the Limit Value
 * @member {String} LimitValueId
 */
Eff01.prototype['LimitValueId'] = undefined;

/**
 * The numerical limit for a given parameter
 * @member {String} LimitValueNmbr
 */
Eff01.prototype['LimitValueNmbr'] = undefined;

/**
 * The unique code identifying the limit value operator (i.e., <, <=, >, >=, T, E, =). E indicates an estimated value. T indicates too numerous to count
 * @member {String} LimitValueQualifierCode
 */
Eff01.prototype['LimitValueQualifierCode'] = undefined;

/**
 * The limit value expressed in standard units, as calculated in ICIS-NPDES
 * @member {String} LimitValueStdUnits
 */
Eff01.prototype['LimitValueStdUnits'] = undefined;

/**
 * The code indicating the type of value the limit is given as (i.e., Q1, Q2, C1, C2, C3)
 * @member {String} LimitValueTypeCode
 */
Eff01.prototype['LimitValueTypeCode'] = undefined;

/**
 * The description indicating the type of value the limit is given as (e.g., Concentration, Quantity)
 * @member {String} LimitValueTypeDesc
 */
Eff01.prototype['LimitValueTypeDesc'] = undefined;

/**
 * The date that the monitoring period for the values covered by the DMR Form ends
 * @member {String} MonitoringPeriodEndDate
 */
Eff01.prototype['MonitoringPeriodEndDate'] = undefined;

/**
 * @member {String} NODEDesc
 */
Eff01.prototype['NODEDesc'] = undefined;

/**
 * The unique code indicating why no DMR Value was submitted by the permittee for a Monitoring Period End Date
 * @member {String} NODICode
 */
Eff01.prototype['NODICode'] = undefined;

/**
 * @member {Array.<module:model/Eff02>} NPDESViolations
 */
Eff01.prototype['NPDESViolations'] = undefined;

/**
 * The number of months of discharges represented on each DMR for the limit set (e.g., monthly = 1, bi-monthly = 2, quarterly = 3, triannual = 4, semi-annual = 6, annual = 12). This data element will be blank for Unscheduled Limit Sets
 * @member {String} NmbrOfSubmission
 */
Eff01.prototype['NmbrOfSubmission'] = undefined;

/**
 * The unique identifier in ICIS-NPDES of a permitted feature or outfall
 * @member {String} PermFeatureId
 */
Eff01.prototype['PermFeatureId'] = undefined;

/**
 * The code representing the unit of measure applicable to the limit and DMR values entered by the user (e.g., 30-day average, daily maximum)
 * @member {String} StatisticalBaseCode
 */
Eff01.prototype['StatisticalBaseCode'] = undefined;

/**
 * @member {String} StatisticalBaseDesc
 */
Eff01.prototype['StatisticalBaseDesc'] = undefined;

/**
 * The code indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
 * @member {String} StatisticalBaseTypeCode
 */
Eff01.prototype['StatisticalBaseTypeCode'] = undefined;

/**
 * A short description for indicating whether the statistical base code is a minimum, average, or maximum for purposes of calculating compliance against the limit value
 * @member {String} StatisticalBaseTypeDesc
 */
Eff01.prototype['StatisticalBaseTypeDesc'] = undefined;

/**
 * The numeric limit value imposed during the period of the stay for the limit; if entered, during the stay period, ICIS-NPDES will use this limit value for calculating compliance rather than the actual limit value
 * @member {String} StayValueNmbr
 */
Eff01.prototype['StayValueNmbr'] = undefined;

/**
 * The code representing the standard unit of measure applicable to quantity or concentration limits and measurements as entered by the user
 * @member {String} StdUnitCode
 */
Eff01.prototype['StdUnitCode'] = undefined;

/**
 * The short description of the standard unit of measure applicable to limit or DMR values
 * @member {String} StdUnitDesc
 */
Eff01.prototype['StdUnitDesc'] = undefined;

/**
 * The date the DMR value was received by the regulatory authority
 * @member {String} ValueReceivedDate
 */
Eff01.prototype['ValueReceivedDate'] = undefined;

/**
 * The indication of the limit value type (e.g., Quantity 1, Concentration 2)
 * @member {String} ValueTypeCode
 */
Eff01.prototype['ValueTypeCode'] = undefined;

/**
 * The type of value the measured number is given as (e.g., Concentration, Quantity)
 * @member {String} ValueTypeDesc
 */
Eff01.prototype['ValueTypeDesc'] = undefined;

/**
 * The version of the permit when a modification or reissuance is applied to the permit. Version = 0 indicates the original permit issuance
 * @member {String} VersionNmbr
 */
Eff01.prototype['VersionNmbr'] = undefined;






export default Eff01;

