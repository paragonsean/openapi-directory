/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eff04 from './Eff04';

/**
 * The Eff05 model module.
 * @module model/Eff05
 * @version 2019.10.15
 */
class Eff05 {
    /**
     * Constructs a new <code>Eff05</code>.
     * Results Object
     * @alias module:model/Eff05
     * @param cWPCity {String} City in which the facility is located.
     * @param cWPCurrentSNCStatus {String} The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
     * @param cWPMajorMinorStatusFlag {String} Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor
     * @param cWPName {String} Facility or permit holder name, as maintained in ICIS-NPDES.
     * @param cWPPermitStatusDesc {String} The current stage/status in the NPDES permit life cycle.
     * @param cWPPermitTypeDesc {String} NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility
     * @param cWPState {String} Facility location - two-digit state abbreviation.
     * @param cWPStreet {String} Facility street address
     * @param cWPZip {String} Facility ZIP code
     * @param ePASystem {String} The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
     * @param endDate {String} End date for the date range of interest. Formatted as mm/dd/yyyy
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     * @param registryId {String} 12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records
     * @param sourceId {String} Unique Identifier assigned by EPA.
     * @param startDate {String} Starting date for the date range of interest. Formatted as mm/dd/yyyy
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     */
    constructor(cWPCity, cWPCurrentSNCStatus, cWPMajorMinorStatusFlag, cWPName, cWPPermitStatusDesc, cWPPermitTypeDesc, cWPState, cWPStreet, cWPZip, ePASystem, endDate, message, registryId, sourceId, startDate, statute) { 
        
        Eff05.initialize(this, cWPCity, cWPCurrentSNCStatus, cWPMajorMinorStatusFlag, cWPName, cWPPermitStatusDesc, cWPPermitTypeDesc, cWPState, cWPStreet, cWPZip, ePASystem, endDate, message, registryId, sourceId, startDate, statute);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cWPCity, cWPCurrentSNCStatus, cWPMajorMinorStatusFlag, cWPName, cWPPermitStatusDesc, cWPPermitTypeDesc, cWPState, cWPStreet, cWPZip, ePASystem, endDate, message, registryId, sourceId, startDate, statute) { 
        obj['CWPCity'] = cWPCity;
        obj['CWPCurrentSNCStatus'] = cWPCurrentSNCStatus;
        obj['CWPMajorMinorStatusFlag'] = cWPMajorMinorStatusFlag;
        obj['CWPName'] = cWPName;
        obj['CWPPermitStatusDesc'] = cWPPermitStatusDesc;
        obj['CWPPermitTypeDesc'] = cWPPermitTypeDesc;
        obj['CWPState'] = cWPState;
        obj['CWPStreet'] = cWPStreet;
        obj['CWPZip'] = cWPZip;
        obj['EPASystem'] = ePASystem;
        obj['EndDate'] = endDate;
        obj['Message'] = message;
        obj['RegistryId'] = registryId;
        obj['SourceId'] = sourceId;
        obj['StartDate'] = startDate;
        obj['Statute'] = statute;
    }

    /**
     * Constructs a <code>Eff05</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Eff05} obj Optional instance to populate.
     * @return {module:model/Eff05} The populated <code>Eff05</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Eff05();

            if (data.hasOwnProperty('CWPCity')) {
                obj['CWPCity'] = ApiClient.convertToType(data['CWPCity'], 'String');
            }
            if (data.hasOwnProperty('CWPCurrentSNCStatus')) {
                obj['CWPCurrentSNCStatus'] = ApiClient.convertToType(data['CWPCurrentSNCStatus'], 'String');
            }
            if (data.hasOwnProperty('CWPMajorMinorStatusFlag')) {
                obj['CWPMajorMinorStatusFlag'] = ApiClient.convertToType(data['CWPMajorMinorStatusFlag'], 'String');
            }
            if (data.hasOwnProperty('CWPName')) {
                obj['CWPName'] = ApiClient.convertToType(data['CWPName'], 'String');
            }
            if (data.hasOwnProperty('CWPPermitStatusDesc')) {
                obj['CWPPermitStatusDesc'] = ApiClient.convertToType(data['CWPPermitStatusDesc'], 'String');
            }
            if (data.hasOwnProperty('CWPPermitTypeDesc')) {
                obj['CWPPermitTypeDesc'] = ApiClient.convertToType(data['CWPPermitTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('CWPState')) {
                obj['CWPState'] = ApiClient.convertToType(data['CWPState'], 'String');
            }
            if (data.hasOwnProperty('CWPStreet')) {
                obj['CWPStreet'] = ApiClient.convertToType(data['CWPStreet'], 'String');
            }
            if (data.hasOwnProperty('CWPZip')) {
                obj['CWPZip'] = ApiClient.convertToType(data['CWPZip'], 'String');
            }
            if (data.hasOwnProperty('EPASystem')) {
                obj['EPASystem'] = ApiClient.convertToType(data['EPASystem'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('PermFeatures')) {
                obj['PermFeatures'] = ApiClient.convertToType(data['PermFeatures'], [Eff04]);
            }
            if (data.hasOwnProperty('RegistryId')) {
                obj['RegistryId'] = ApiClient.convertToType(data['RegistryId'], 'String');
            }
            if (data.hasOwnProperty('SourceId')) {
                obj['SourceId'] = ApiClient.convertToType(data['SourceId'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Eff05</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Eff05</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Eff05.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CWPCity'] && !(typeof data['CWPCity'] === 'string' || data['CWPCity'] instanceof String)) {
            throw new Error("Expected the field `CWPCity` to be a primitive type in the JSON string but got " + data['CWPCity']);
        }
        // ensure the json data is a string
        if (data['CWPCurrentSNCStatus'] && !(typeof data['CWPCurrentSNCStatus'] === 'string' || data['CWPCurrentSNCStatus'] instanceof String)) {
            throw new Error("Expected the field `CWPCurrentSNCStatus` to be a primitive type in the JSON string but got " + data['CWPCurrentSNCStatus']);
        }
        // ensure the json data is a string
        if (data['CWPMajorMinorStatusFlag'] && !(typeof data['CWPMajorMinorStatusFlag'] === 'string' || data['CWPMajorMinorStatusFlag'] instanceof String)) {
            throw new Error("Expected the field `CWPMajorMinorStatusFlag` to be a primitive type in the JSON string but got " + data['CWPMajorMinorStatusFlag']);
        }
        // ensure the json data is a string
        if (data['CWPName'] && !(typeof data['CWPName'] === 'string' || data['CWPName'] instanceof String)) {
            throw new Error("Expected the field `CWPName` to be a primitive type in the JSON string but got " + data['CWPName']);
        }
        // ensure the json data is a string
        if (data['CWPPermitStatusDesc'] && !(typeof data['CWPPermitStatusDesc'] === 'string' || data['CWPPermitStatusDesc'] instanceof String)) {
            throw new Error("Expected the field `CWPPermitStatusDesc` to be a primitive type in the JSON string but got " + data['CWPPermitStatusDesc']);
        }
        // ensure the json data is a string
        if (data['CWPPermitTypeDesc'] && !(typeof data['CWPPermitTypeDesc'] === 'string' || data['CWPPermitTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `CWPPermitTypeDesc` to be a primitive type in the JSON string but got " + data['CWPPermitTypeDesc']);
        }
        // ensure the json data is a string
        if (data['CWPState'] && !(typeof data['CWPState'] === 'string' || data['CWPState'] instanceof String)) {
            throw new Error("Expected the field `CWPState` to be a primitive type in the JSON string but got " + data['CWPState']);
        }
        // ensure the json data is a string
        if (data['CWPStreet'] && !(typeof data['CWPStreet'] === 'string' || data['CWPStreet'] instanceof String)) {
            throw new Error("Expected the field `CWPStreet` to be a primitive type in the JSON string but got " + data['CWPStreet']);
        }
        // ensure the json data is a string
        if (data['CWPZip'] && !(typeof data['CWPZip'] === 'string' || data['CWPZip'] instanceof String)) {
            throw new Error("Expected the field `CWPZip` to be a primitive type in the JSON string but got " + data['CWPZip']);
        }
        // ensure the json data is a string
        if (data['EPASystem'] && !(typeof data['EPASystem'] === 'string' || data['EPASystem'] instanceof String)) {
            throw new Error("Expected the field `EPASystem` to be a primitive type in the JSON string but got " + data['EPASystem']);
        }
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        if (data['PermFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PermFeatures'])) {
                throw new Error("Expected the field `PermFeatures` to be an array in the JSON data but got " + data['PermFeatures']);
            }
            // validate the optional field `PermFeatures` (array)
            for (const item of data['PermFeatures']) {
                Eff04.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['RegistryId'] && !(typeof data['RegistryId'] === 'string' || data['RegistryId'] instanceof String)) {
            throw new Error("Expected the field `RegistryId` to be a primitive type in the JSON string but got " + data['RegistryId']);
        }
        // ensure the json data is a string
        if (data['SourceId'] && !(typeof data['SourceId'] === 'string' || data['SourceId'] instanceof String)) {
            throw new Error("Expected the field `SourceId` to be a primitive type in the JSON string but got " + data['SourceId']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }

        return true;
    }


}

Eff05.RequiredProperties = ["CWPCity", "CWPCurrentSNCStatus", "CWPMajorMinorStatusFlag", "CWPName", "CWPPermitStatusDesc", "CWPPermitTypeDesc", "CWPState", "CWPStreet", "CWPZip", "EPASystem", "EndDate", "Message", "RegistryId", "SourceId", "StartDate", "Statute"];

/**
 * City in which the facility is located.
 * @member {String} CWPCity
 */
Eff05.prototype['CWPCity'] = undefined;

/**
 * The type of noncompliance when a major source is in significant violation or a minor source has a Category 1 violation.
 * @member {String} CWPCurrentSNCStatus
 */
Eff05.prototype['CWPCurrentSNCStatus'] = undefined;

/**
 * Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor
 * @member {String} CWPMajorMinorStatusFlag
 */
Eff05.prototype['CWPMajorMinorStatusFlag'] = undefined;

/**
 * Facility or permit holder name, as maintained in ICIS-NPDES.
 * @member {String} CWPName
 */
Eff05.prototype['CWPName'] = undefined;

/**
 * The current stage/status in the NPDES permit life cycle.
 * @member {String} CWPPermitStatusDesc
 */
Eff05.prototype['CWPPermitStatusDesc'] = undefined;

/**
 * NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility
 * @member {String} CWPPermitTypeDesc
 */
Eff05.prototype['CWPPermitTypeDesc'] = undefined;

/**
 * Facility location - two-digit state abbreviation.
 * @member {String} CWPState
 */
Eff05.prototype['CWPState'] = undefined;

/**
 * Facility street address
 * @member {String} CWPStreet
 */
Eff05.prototype['CWPStreet'] = undefined;

/**
 * Facility ZIP code
 * @member {String} CWPZip
 */
Eff05.prototype['CWPZip'] = undefined;

/**
 * The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
 * @member {String} EPASystem
 */
Eff05.prototype['EPASystem'] = undefined;

/**
 * End date for the date range of interest. Formatted as mm/dd/yyyy
 * @member {String} EndDate
 */
Eff05.prototype['EndDate'] = undefined;

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Eff05.prototype['Message'] = undefined;

/**
 * Array of Permitted Features
 * @member {Array.<module:model/Eff04>} PermFeatures
 */
Eff05.prototype['PermFeatures'] = undefined;

/**
 * 12-digit Facility Registry Service (FRS) identification number.  FRS uniquely identifies a facility by assigning an identification number (FRS ID), and uses this FRS ID to link together all EPA regulatory program database records
 * @member {String} RegistryId
 */
Eff05.prototype['RegistryId'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceId
 */
Eff05.prototype['SourceId'] = undefined;

/**
 * Starting date for the date range of interest. Formatted as mm/dd/yyyy
 * @member {String} StartDate
 */
Eff05.prototype['StartDate'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Eff05.prototype['Statute'] = undefined;






export default Eff05;

