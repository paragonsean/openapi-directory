/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eff07 from './Eff07';

/**
 * The Eff08 model module.
 * @module model/Eff08
 * @version 2019.10.15
 */
class Eff08 {
    /**
     * Constructs a new <code>Eff08</code>.
     * Permit Features Object
     * @alias module:model/Eff08
     * @param parameters {Array.<module:model/Eff07>} 
     * @param permFeatureNmbr {String} A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
     * @param permFeatureTypeCode {String} The code indicating the type of permitted feature (e.g., EXO)
     * @param permFeatureTypeDesc {String} The description indicating the type of permitted feature (e.g., External Outfall, Internal Outfall, Sum)
     */
    constructor(parameters, permFeatureNmbr, permFeatureTypeCode, permFeatureTypeDesc) { 
        
        Eff08.initialize(this, parameters, permFeatureNmbr, permFeatureTypeCode, permFeatureTypeDesc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parameters, permFeatureNmbr, permFeatureTypeCode, permFeatureTypeDesc) { 
        obj['Parameters'] = parameters;
        obj['PermFeatureNmbr'] = permFeatureNmbr;
        obj['PermFeatureTypeCode'] = permFeatureTypeCode;
        obj['PermFeatureTypeDesc'] = permFeatureTypeDesc;
    }

    /**
     * Constructs a <code>Eff08</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Eff08} obj Optional instance to populate.
     * @return {module:model/Eff08} The populated <code>Eff08</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Eff08();

            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], [Eff07]);
            }
            if (data.hasOwnProperty('PermFeatureNmbr')) {
                obj['PermFeatureNmbr'] = ApiClient.convertToType(data['PermFeatureNmbr'], 'String');
            }
            if (data.hasOwnProperty('PermFeatureTypeCode')) {
                obj['PermFeatureTypeCode'] = ApiClient.convertToType(data['PermFeatureTypeCode'], 'String');
            }
            if (data.hasOwnProperty('PermFeatureTypeDesc')) {
                obj['PermFeatureTypeDesc'] = ApiClient.convertToType(data['PermFeatureTypeDesc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Eff08</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Eff08</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Eff08.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Parameters'])) {
                throw new Error("Expected the field `Parameters` to be an array in the JSON data but got " + data['Parameters']);
            }
            // validate the optional field `Parameters` (array)
            for (const item of data['Parameters']) {
                Eff07.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PermFeatureNmbr'] && !(typeof data['PermFeatureNmbr'] === 'string' || data['PermFeatureNmbr'] instanceof String)) {
            throw new Error("Expected the field `PermFeatureNmbr` to be a primitive type in the JSON string but got " + data['PermFeatureNmbr']);
        }
        // ensure the json data is a string
        if (data['PermFeatureTypeCode'] && !(typeof data['PermFeatureTypeCode'] === 'string' || data['PermFeatureTypeCode'] instanceof String)) {
            throw new Error("Expected the field `PermFeatureTypeCode` to be a primitive type in the JSON string but got " + data['PermFeatureTypeCode']);
        }
        // ensure the json data is a string
        if (data['PermFeatureTypeDesc'] && !(typeof data['PermFeatureTypeDesc'] === 'string' || data['PermFeatureTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `PermFeatureTypeDesc` to be a primitive type in the JSON string but got " + data['PermFeatureTypeDesc']);
        }

        return true;
    }


}

Eff08.RequiredProperties = ["Parameters", "PermFeatureNmbr", "PermFeatureTypeCode", "PermFeatureTypeDesc"];

/**
 * @member {Array.<module:model/Eff07>} Parameters
 */
Eff08.prototype['Parameters'] = undefined;

/**
 * A three-character code in ICIS-NPDES that identifies the point of discharge (e.g., outfall) for a facility. A NPDES permit may have multiple points of discharge. If the code is less than three characters in the .CSV, append zeros to the beginning of the number (e.g., 1 is equivalent to 001)
 * @member {String} PermFeatureNmbr
 */
Eff08.prototype['PermFeatureNmbr'] = undefined;

/**
 * The code indicating the type of permitted feature (e.g., EXO)
 * @member {String} PermFeatureTypeCode
 */
Eff08.prototype['PermFeatureTypeCode'] = undefined;

/**
 * The description indicating the type of permitted feature (e.g., External Outfall, Internal Outfall, Sum)
 * @member {String} PermFeatureTypeDesc
 */
Eff08.prototype['PermFeatureTypeDesc'] = undefined;






export default Eff08;

