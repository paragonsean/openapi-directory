/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Eff02 model module.
 * @module model/Eff02
 * @version 2019.10.15
 */
class Eff02 {
    /**
     * Constructs a new <code>Eff02</code>.
     * NPDES Violations Object
     * @alias module:model/Eff02
     */
    constructor() { 
        
        Eff02.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Eff02</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Eff02} obj Optional instance to populate.
     * @return {module:model/Eff02} The populated <code>Eff02</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Eff02();

            if (data.hasOwnProperty('NPDESViolationId')) {
                obj['NPDESViolationId'] = ApiClient.convertToType(data['NPDESViolationId'], 'String');
            }
            if (data.hasOwnProperty('RNCDetectionCode')) {
                obj['RNCDetectionCode'] = ApiClient.convertToType(data['RNCDetectionCode'], 'String');
            }
            if (data.hasOwnProperty('RNCDetectionDate')) {
                obj['RNCDetectionDate'] = ApiClient.convertToType(data['RNCDetectionDate'], 'String');
            }
            if (data.hasOwnProperty('RNCDetectionDesc')) {
                obj['RNCDetectionDesc'] = ApiClient.convertToType(data['RNCDetectionDesc'], 'String');
            }
            if (data.hasOwnProperty('RNCResolutionCode')) {
                obj['RNCResolutionCode'] = ApiClient.convertToType(data['RNCResolutionCode'], 'String');
            }
            if (data.hasOwnProperty('RNCResolutionDate')) {
                obj['RNCResolutionDate'] = ApiClient.convertToType(data['RNCResolutionDate'], 'String');
            }
            if (data.hasOwnProperty('RNCResolutionDesc')) {
                obj['RNCResolutionDesc'] = ApiClient.convertToType(data['RNCResolutionDesc'], 'String');
            }
            if (data.hasOwnProperty('ViolationCode')) {
                obj['ViolationCode'] = ApiClient.convertToType(data['ViolationCode'], 'String');
            }
            if (data.hasOwnProperty('ViolationDesc')) {
                obj['ViolationDesc'] = ApiClient.convertToType(data['ViolationDesc'], 'String');
            }
            if (data.hasOwnProperty('ViolationSeverity')) {
                obj['ViolationSeverity'] = ApiClient.convertToType(data['ViolationSeverity'], 'String');
            }
            if (data.hasOwnProperty('ViolationSeverityDesc')) {
                obj['ViolationSeverityDesc'] = ApiClient.convertToType(data['ViolationSeverityDesc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Eff02</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Eff02</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NPDESViolationId'] && !(typeof data['NPDESViolationId'] === 'string' || data['NPDESViolationId'] instanceof String)) {
            throw new Error("Expected the field `NPDESViolationId` to be a primitive type in the JSON string but got " + data['NPDESViolationId']);
        }
        // ensure the json data is a string
        if (data['RNCDetectionCode'] && !(typeof data['RNCDetectionCode'] === 'string' || data['RNCDetectionCode'] instanceof String)) {
            throw new Error("Expected the field `RNCDetectionCode` to be a primitive type in the JSON string but got " + data['RNCDetectionCode']);
        }
        // ensure the json data is a string
        if (data['RNCDetectionDate'] && !(typeof data['RNCDetectionDate'] === 'string' || data['RNCDetectionDate'] instanceof String)) {
            throw new Error("Expected the field `RNCDetectionDate` to be a primitive type in the JSON string but got " + data['RNCDetectionDate']);
        }
        // ensure the json data is a string
        if (data['RNCDetectionDesc'] && !(typeof data['RNCDetectionDesc'] === 'string' || data['RNCDetectionDesc'] instanceof String)) {
            throw new Error("Expected the field `RNCDetectionDesc` to be a primitive type in the JSON string but got " + data['RNCDetectionDesc']);
        }
        // ensure the json data is a string
        if (data['RNCResolutionCode'] && !(typeof data['RNCResolutionCode'] === 'string' || data['RNCResolutionCode'] instanceof String)) {
            throw new Error("Expected the field `RNCResolutionCode` to be a primitive type in the JSON string but got " + data['RNCResolutionCode']);
        }
        // ensure the json data is a string
        if (data['RNCResolutionDate'] && !(typeof data['RNCResolutionDate'] === 'string' || data['RNCResolutionDate'] instanceof String)) {
            throw new Error("Expected the field `RNCResolutionDate` to be a primitive type in the JSON string but got " + data['RNCResolutionDate']);
        }
        // ensure the json data is a string
        if (data['RNCResolutionDesc'] && !(typeof data['RNCResolutionDesc'] === 'string' || data['RNCResolutionDesc'] instanceof String)) {
            throw new Error("Expected the field `RNCResolutionDesc` to be a primitive type in the JSON string but got " + data['RNCResolutionDesc']);
        }
        // ensure the json data is a string
        if (data['ViolationCode'] && !(typeof data['ViolationCode'] === 'string' || data['ViolationCode'] instanceof String)) {
            throw new Error("Expected the field `ViolationCode` to be a primitive type in the JSON string but got " + data['ViolationCode']);
        }
        // ensure the json data is a string
        if (data['ViolationDesc'] && !(typeof data['ViolationDesc'] === 'string' || data['ViolationDesc'] instanceof String)) {
            throw new Error("Expected the field `ViolationDesc` to be a primitive type in the JSON string but got " + data['ViolationDesc']);
        }
        // ensure the json data is a string
        if (data['ViolationSeverity'] && !(typeof data['ViolationSeverity'] === 'string' || data['ViolationSeverity'] instanceof String)) {
            throw new Error("Expected the field `ViolationSeverity` to be a primitive type in the JSON string but got " + data['ViolationSeverity']);
        }
        // ensure the json data is a string
        if (data['ViolationSeverityDesc'] && !(typeof data['ViolationSeverityDesc'] === 'string' || data['ViolationSeverityDesc'] instanceof String)) {
            throw new Error("Expected the field `ViolationSeverityDesc` to be a primitive type in the JSON string but got " + data['ViolationSeverityDesc']);
        }

        return true;
    }


}



/**
 * The unique identifier in ICIS-NPDES for the NPDES Violation
 * @member {String} NPDESViolationId
 */
Eff02.prototype['NPDESViolationId'] = undefined;

/**
 * The code indicating the reportable noncompliance (RNC) detected for a violation: - A = Enforcement Order - B = Manual 2A4 - Pass-Through - C = Chronic Violation - D = Manual Other - E = Manual 2F - Permit Narrative - F = Manual 2G - Violation of Concern - G = Manual 2A1 - Effluent Violation - H = Chronic Violation, Non-Monthly Average - I = Manual 2A2 - Unauthorized Bypass - J = Manual 2A3 - Unpermitted Discharge - K = Non-receipt Violation, Non-Monthly Average - N = Non-Receipt of DMR/Schedule Report - P = Enforcement Order, Non-Monthly Average - Q = Manual 2B - Pretreatment - R = TRC Limitations Exceeded, Non-Monthly Average - S = Schedule Violation - T = TRC Limitations Exceeded - U = Other Violation with TRC Non-Monthly Average - V = Other Violation with TRC - W = Manual 2E - Deficient Report - X = Manual Other Violation with TRC - Y = Manual TRC - Z = Manual Chronic
 * @member {String} RNCDetectionCode
 */
Eff02.prototype['RNCDetectionCode'] = undefined;

/**
 * The date that the exceedance was detected
 * @member {String} RNCDetectionDate
 */
Eff02.prototype['RNCDetectionDate'] = undefined;

/**
 * A description of the reportable noncompliance (RNC) detected
 * @member {String} RNCDetectionDesc
 */
Eff02.prototype['RNCDetectionDesc'] = undefined;

/**
 * The code indicating the resolution of noncompliance (RNC) for a violation
 * @member {String} RNCResolutionCode
 */
Eff02.prototype['RNCResolutionCode'] = undefined;

/**
 * The date RNC was marked to its current resolution status. It can be entered manually or automatically
 * @member {String} RNCResolutionDate
 */
Eff02.prototype['RNCResolutionDate'] = undefined;

/**
 * - 1 = Unresolved RNC - 2 = Back into Compliance - 3 = Due to Formal Enforcement Action Final Order with Compliance Schedule - 4 = In Compliance with Formal Enforcement Action Final Order Requirement - 5 = Resolved RP by NPDES Closure of Enforcement Action Final Order with Compliance Schedule - 6 = Manual Resolution by Enforcement Action - 7 = Manual RP - In Compliance with Formal Enforcement Action Order Requirement - 8 = Manual Due to Formal Enforcement Action Formal Order - 9 = Manual by Back into Compliance - A = Manual Unresolved RNC - B = Manual by EPA/State/Tribal Action
 * @member {String} RNCResolutionDesc
 */
Eff02.prototype['RNCResolutionDesc'] = undefined;

/**
 * The code identifying which type of Violation has occurred (e.g., D80 = Required Monitoring DMR Value Non-Receipt, E90 = Effluent Violation, C20 = Schedule Event Achieved Late)
 * @member {String} ViolationCode
 */
Eff02.prototype['ViolationCode'] = undefined;

/**
 * A description of which type of violation has occurred
 * @member {String} ViolationDesc
 */
Eff02.prototype['ViolationDesc'] = undefined;

/**
 * - 0 = no violation. - 1 = monitoring or reporting violation - 2 = effluent violation, i.e., discharge in excess of permitted limit - 3 = reportable noncompliance - 5 = significant noncompliance
 * @member {String} ViolationSeverity
 */
Eff02.prototype['ViolationSeverity'] = undefined;

/**
 * @member {String} ViolationSeverityDesc
 */
Eff02.prototype['ViolationSeverityDesc'] = undefined;






export default Eff02;

