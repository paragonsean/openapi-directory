/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EffRestServicesGetEffluentChartGet200Response from '../model/EffRestServicesGetEffluentChartGet200Response';
import EffRestServicesGetSummaryChartGet200Response from '../model/EffRestServicesGetSummaryChartGet200Response';

/**
* EffluentCharts service.
* @module api/EffluentChartsApi
* @version 2019.10.15
*/
export default class EffluentChartsApi {

    /**
    * Constructs a new EffluentChartsApi. 
    * @alias module:api/EffluentChartsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the effRestServicesDownloadEffluentChartGet operation.
     * @callback module:api/EffluentChartsApi~effRestServicesDownloadEffluentChartGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {String} [outfall] Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge.
     * @param {String} [parameterCode] Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:api/EffluentChartsApi~effRestServicesDownloadEffluentChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    effRestServicesDownloadEffluentChartGet(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesDownloadEffluentChartGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'p_id': pId,
        'outfall': opts['outfall'],
        'parameter_code': opts['parameterCode'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/eff_rest_services.download_effluent_chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the effRestServicesDownloadEffluentChartPost operation.
     * @callback module:api/EffluentChartsApi~effRestServicesDownloadEffluentChartPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Effluent Charts Download Service
     * Downloads tabular Discharge Monitoring Report (DMR) and compliance data for one NPDES permit as a CSV.
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {String} [outfall] Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge.
     * @param {String} [parameterCode] Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:api/EffluentChartsApi~effRestServicesDownloadEffluentChartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    effRestServicesDownloadEffluentChartPost(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesDownloadEffluentChartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'p_id': pId,
        'outfall': opts['outfall'],
        'parameter_code': opts['parameterCode'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/eff_rest_services.download_effluent_chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the effRestServicesGetEffluentChartGet operation.
     * @callback module:api/EffluentChartsApi~effRestServicesGetEffluentChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EffRestServicesGetEffluentChartGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {String} [outfall] Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge.
     * @param {String} [parameterCode] Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {module:api/EffluentChartsApi~effRestServicesGetEffluentChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EffRestServicesGetEffluentChartGet200Response}
     */
    effRestServicesGetEffluentChartGet(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesGetEffluentChartGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'p_id': pId,
        'outfall': opts['outfall'],
        'parameter_code': opts['parameterCode'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'output': opts['output'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = EffRestServicesGetEffluentChartGet200Response;
      return this.apiClient.callApi(
        '/eff_rest_services.get_effluent_chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the effRestServicesGetEffluentChartPost operation.
     * @callback module:api/EffluentChartsApi~effRestServicesGetEffluentChartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EffRestServicesGetEffluentChartGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detailed Effluent Chart Service
     * Discharge Monitoring Report (DMR) data supporting each effluent chart for one NPDES permit. Includes Discharge Monitoring Reports and NPDES Violations.   
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {String} [outfall] Three-character code that identifies the point of discharge (e.g., pipe or outfall) for a facility. A single NPDES ID may have multiple points of discharge.
     * @param {String} [parameterCode] Five-digit numeric code identifying the parameter. See Parameter Lookup documentation for a complete list of codes.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {module:api/EffluentChartsApi~effRestServicesGetEffluentChartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EffRestServicesGetEffluentChartGet200Response}
     */
    effRestServicesGetEffluentChartPost(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesGetEffluentChartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'p_id': pId,
        'outfall': opts['outfall'],
        'parameter_code': opts['parameterCode'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'output': opts['output'],
        'callback': opts['callback']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = EffRestServicesGetEffluentChartGet200Response;
      return this.apiClient.callApi(
        '/eff_rest_services.get_effluent_chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the effRestServicesGetSummaryChartGet operation.
     * @callback module:api/EffluentChartsApi~effRestServicesGetSummaryChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EffRestServicesGetSummaryChartGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:api/EffluentChartsApi~effRestServicesGetSummaryChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EffRestServicesGetSummaryChartGet200Response}
     */
    effRestServicesGetSummaryChartGet(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesGetSummaryChartGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'p_id': pId,
        'output': opts['output'],
        'callback': opts['callback'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = EffRestServicesGetSummaryChartGet200Response;
      return this.apiClient.callApi(
        '/eff_rest_services.get_summary_chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the effRestServicesGetSummaryChartPost operation.
     * @callback module:api/EffluentChartsApi~effRestServicesGetSummaryChartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EffRestServicesGetSummaryChartGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary Effluent Chart Service
     * Summary of compliance status each outfall and parameter for one NPDES permit. Provides the current compliance status and overall compliance status for the date range of interest. This service supports the Summary Matrix on the Effluent Charts.
     * @param {String} pId Identifier for the service.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [startDate] The start date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with end_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {String} [endDate] The end date (mm/dd/yyyy) for the date range of interest. Must be used in conjunction with start_date. If start_date and end_date are not specified, the service will return the last three years of data.
     * @param {module:api/EffluentChartsApi~effRestServicesGetSummaryChartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EffRestServicesGetSummaryChartGet200Response}
     */
    effRestServicesGetSummaryChartPost(pId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling effRestServicesGetSummaryChartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'p_id': pId,
        'output': opts['output'],
        'callback': opts['callback'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = EffRestServicesGetSummaryChartGet200Response;
      return this.apiClient.callApi(
        '/eff_rest_services.get_summary_chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
