/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEff09.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEff09::OAIEff09(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEff09::OAIEff09() {
    this->initializeModel();
}

OAIEff09::~OAIEff09() {}

void OAIEff09::initializeModel() {

    m_cwp_city_isSet = false;
    m_cwp_city_isValid = false;

    m_cwp_current_snc_status_isSet = false;
    m_cwp_current_snc_status_isValid = false;

    m_cwp_major_minor_status_flag_isSet = false;
    m_cwp_major_minor_status_flag_isValid = false;

    m_cwp_name_isSet = false;
    m_cwp_name_isValid = false;

    m_cwp_permit_status_desc_isSet = false;
    m_cwp_permit_status_desc_isValid = false;

    m_cwp_permit_type_desc_isSet = false;
    m_cwp_permit_type_desc_isValid = false;

    m_cwp_state_isSet = false;
    m_cwp_state_isValid = false;

    m_cwp_street_isSet = false;
    m_cwp_street_isValid = false;

    m_cwp_zip_isSet = false;
    m_cwp_zip_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_linked_permits_isSet = false;
    m_linked_permits_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_perm_features_isSet = false;
    m_perm_features_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;
}

void OAIEff09::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEff09::fromJsonObject(QJsonObject json) {

    m_cwp_city_isValid = ::OpenAPI::fromJsonValue(m_cwp_city, json[QString("CWPCity")]);
    m_cwp_city_isSet = !json[QString("CWPCity")].isNull() && m_cwp_city_isValid;

    m_cwp_current_snc_status_isValid = ::OpenAPI::fromJsonValue(m_cwp_current_snc_status, json[QString("CWPCurrentSNCStatus")]);
    m_cwp_current_snc_status_isSet = !json[QString("CWPCurrentSNCStatus")].isNull() && m_cwp_current_snc_status_isValid;

    m_cwp_major_minor_status_flag_isValid = ::OpenAPI::fromJsonValue(m_cwp_major_minor_status_flag, json[QString("CWPMajorMinorStatusFlag")]);
    m_cwp_major_minor_status_flag_isSet = !json[QString("CWPMajorMinorStatusFlag")].isNull() && m_cwp_major_minor_status_flag_isValid;

    m_cwp_name_isValid = ::OpenAPI::fromJsonValue(m_cwp_name, json[QString("CWPName")]);
    m_cwp_name_isSet = !json[QString("CWPName")].isNull() && m_cwp_name_isValid;

    m_cwp_permit_status_desc_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_status_desc, json[QString("CWPPermitStatusDesc")]);
    m_cwp_permit_status_desc_isSet = !json[QString("CWPPermitStatusDesc")].isNull() && m_cwp_permit_status_desc_isValid;

    m_cwp_permit_type_desc_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_type_desc, json[QString("CWPPermitTypeDesc")]);
    m_cwp_permit_type_desc_isSet = !json[QString("CWPPermitTypeDesc")].isNull() && m_cwp_permit_type_desc_isValid;

    m_cwp_state_isValid = ::OpenAPI::fromJsonValue(m_cwp_state, json[QString("CWPState")]);
    m_cwp_state_isSet = !json[QString("CWPState")].isNull() && m_cwp_state_isValid;

    m_cwp_street_isValid = ::OpenAPI::fromJsonValue(m_cwp_street, json[QString("CWPStreet")]);
    m_cwp_street_isSet = !json[QString("CWPStreet")].isNull() && m_cwp_street_isValid;

    m_cwp_zip_isValid = ::OpenAPI::fromJsonValue(m_cwp_zip, json[QString("CWPZip")]);
    m_cwp_zip_isSet = !json[QString("CWPZip")].isNull() && m_cwp_zip_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_linked_permits_isValid = ::OpenAPI::fromJsonValue(m_linked_permits, json[QString("LinkedPermits")]);
    m_linked_permits_isSet = !json[QString("LinkedPermits")].isNull() && m_linked_permits_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_perm_features_isValid = ::OpenAPI::fromJsonValue(m_perm_features, json[QString("PermFeatures")]);
    m_perm_features_isSet = !json[QString("PermFeatures")].isNull() && m_perm_features_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryId")]);
    m_registry_id_isSet = !json[QString("RegistryId")].isNull() && m_registry_id_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceId")]);
    m_source_id_isSet = !json[QString("SourceId")].isNull() && m_source_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;
}

QString OAIEff09::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEff09::asJsonObject() const {
    QJsonObject obj;
    if (m_cwp_city_isSet) {
        obj.insert(QString("CWPCity"), ::OpenAPI::toJsonValue(m_cwp_city));
    }
    if (m_cwp_current_snc_status_isSet) {
        obj.insert(QString("CWPCurrentSNCStatus"), ::OpenAPI::toJsonValue(m_cwp_current_snc_status));
    }
    if (m_cwp_major_minor_status_flag_isSet) {
        obj.insert(QString("CWPMajorMinorStatusFlag"), ::OpenAPI::toJsonValue(m_cwp_major_minor_status_flag));
    }
    if (m_cwp_name_isSet) {
        obj.insert(QString("CWPName"), ::OpenAPI::toJsonValue(m_cwp_name));
    }
    if (m_cwp_permit_status_desc_isSet) {
        obj.insert(QString("CWPPermitStatusDesc"), ::OpenAPI::toJsonValue(m_cwp_permit_status_desc));
    }
    if (m_cwp_permit_type_desc_isSet) {
        obj.insert(QString("CWPPermitTypeDesc"), ::OpenAPI::toJsonValue(m_cwp_permit_type_desc));
    }
    if (m_cwp_state_isSet) {
        obj.insert(QString("CWPState"), ::OpenAPI::toJsonValue(m_cwp_state));
    }
    if (m_cwp_street_isSet) {
        obj.insert(QString("CWPStreet"), ::OpenAPI::toJsonValue(m_cwp_street));
    }
    if (m_cwp_zip_isSet) {
        obj.insert(QString("CWPZip"), ::OpenAPI::toJsonValue(m_cwp_zip));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_linked_permits.size() > 0) {
        obj.insert(QString("LinkedPermits"), ::OpenAPI::toJsonValue(m_linked_permits));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_perm_features.size() > 0) {
        obj.insert(QString("PermFeatures"), ::OpenAPI::toJsonValue(m_perm_features));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    return obj;
}

QString OAIEff09::getCwpCity() const {
    return m_cwp_city;
}
void OAIEff09::setCwpCity(const QString &cwp_city) {
    m_cwp_city = cwp_city;
    m_cwp_city_isSet = true;
}

bool OAIEff09::is_cwp_city_Set() const{
    return m_cwp_city_isSet;
}

bool OAIEff09::is_cwp_city_Valid() const{
    return m_cwp_city_isValid;
}

QString OAIEff09::getCwpCurrentSncStatus() const {
    return m_cwp_current_snc_status;
}
void OAIEff09::setCwpCurrentSncStatus(const QString &cwp_current_snc_status) {
    m_cwp_current_snc_status = cwp_current_snc_status;
    m_cwp_current_snc_status_isSet = true;
}

bool OAIEff09::is_cwp_current_snc_status_Set() const{
    return m_cwp_current_snc_status_isSet;
}

bool OAIEff09::is_cwp_current_snc_status_Valid() const{
    return m_cwp_current_snc_status_isValid;
}

QString OAIEff09::getCwpMajorMinorStatusFlag() const {
    return m_cwp_major_minor_status_flag;
}
void OAIEff09::setCwpMajorMinorStatusFlag(const QString &cwp_major_minor_status_flag) {
    m_cwp_major_minor_status_flag = cwp_major_minor_status_flag;
    m_cwp_major_minor_status_flag_isSet = true;
}

bool OAIEff09::is_cwp_major_minor_status_flag_Set() const{
    return m_cwp_major_minor_status_flag_isSet;
}

bool OAIEff09::is_cwp_major_minor_status_flag_Valid() const{
    return m_cwp_major_minor_status_flag_isValid;
}

QString OAIEff09::getCwpName() const {
    return m_cwp_name;
}
void OAIEff09::setCwpName(const QString &cwp_name) {
    m_cwp_name = cwp_name;
    m_cwp_name_isSet = true;
}

bool OAIEff09::is_cwp_name_Set() const{
    return m_cwp_name_isSet;
}

bool OAIEff09::is_cwp_name_Valid() const{
    return m_cwp_name_isValid;
}

QString OAIEff09::getCwpPermitStatusDesc() const {
    return m_cwp_permit_status_desc;
}
void OAIEff09::setCwpPermitStatusDesc(const QString &cwp_permit_status_desc) {
    m_cwp_permit_status_desc = cwp_permit_status_desc;
    m_cwp_permit_status_desc_isSet = true;
}

bool OAIEff09::is_cwp_permit_status_desc_Set() const{
    return m_cwp_permit_status_desc_isSet;
}

bool OAIEff09::is_cwp_permit_status_desc_Valid() const{
    return m_cwp_permit_status_desc_isValid;
}

QString OAIEff09::getCwpPermitTypeDesc() const {
    return m_cwp_permit_type_desc;
}
void OAIEff09::setCwpPermitTypeDesc(const QString &cwp_permit_type_desc) {
    m_cwp_permit_type_desc = cwp_permit_type_desc;
    m_cwp_permit_type_desc_isSet = true;
}

bool OAIEff09::is_cwp_permit_type_desc_Set() const{
    return m_cwp_permit_type_desc_isSet;
}

bool OAIEff09::is_cwp_permit_type_desc_Valid() const{
    return m_cwp_permit_type_desc_isValid;
}

QString OAIEff09::getCwpState() const {
    return m_cwp_state;
}
void OAIEff09::setCwpState(const QString &cwp_state) {
    m_cwp_state = cwp_state;
    m_cwp_state_isSet = true;
}

bool OAIEff09::is_cwp_state_Set() const{
    return m_cwp_state_isSet;
}

bool OAIEff09::is_cwp_state_Valid() const{
    return m_cwp_state_isValid;
}

QString OAIEff09::getCwpStreet() const {
    return m_cwp_street;
}
void OAIEff09::setCwpStreet(const QString &cwp_street) {
    m_cwp_street = cwp_street;
    m_cwp_street_isSet = true;
}

bool OAIEff09::is_cwp_street_Set() const{
    return m_cwp_street_isSet;
}

bool OAIEff09::is_cwp_street_Valid() const{
    return m_cwp_street_isValid;
}

QString OAIEff09::getCwpZip() const {
    return m_cwp_zip;
}
void OAIEff09::setCwpZip(const QString &cwp_zip) {
    m_cwp_zip = cwp_zip;
    m_cwp_zip_isSet = true;
}

bool OAIEff09::is_cwp_zip_Set() const{
    return m_cwp_zip_isSet;
}

bool OAIEff09::is_cwp_zip_Valid() const{
    return m_cwp_zip_isValid;
}

QString OAIEff09::getEpaSystem() const {
    return m_epa_system;
}
void OAIEff09::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIEff09::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIEff09::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIEff09::getEndDate() const {
    return m_end_date;
}
void OAIEff09::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEff09::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEff09::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIEff06> OAIEff09::getLinkedPermits() const {
    return m_linked_permits;
}
void OAIEff09::setLinkedPermits(const QList<OAIEff06> &linked_permits) {
    m_linked_permits = linked_permits;
    m_linked_permits_isSet = true;
}

bool OAIEff09::is_linked_permits_Set() const{
    return m_linked_permits_isSet;
}

bool OAIEff09::is_linked_permits_Valid() const{
    return m_linked_permits_isValid;
}

QString OAIEff09::getMessage() const {
    return m_message;
}
void OAIEff09::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEff09::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEff09::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIEff08> OAIEff09::getPermFeatures() const {
    return m_perm_features;
}
void OAIEff09::setPermFeatures(const QList<OAIEff08> &perm_features) {
    m_perm_features = perm_features;
    m_perm_features_isSet = true;
}

bool OAIEff09::is_perm_features_Set() const{
    return m_perm_features_isSet;
}

bool OAIEff09::is_perm_features_Valid() const{
    return m_perm_features_isValid;
}

QString OAIEff09::getRegistryId() const {
    return m_registry_id;
}
void OAIEff09::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIEff09::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIEff09::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIEff09::getSourceId() const {
    return m_source_id;
}
void OAIEff09::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIEff09::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIEff09::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIEff09::getStartDate() const {
    return m_start_date;
}
void OAIEff09::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEff09::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEff09::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEff09::getStatute() const {
    return m_statute;
}
void OAIEff09::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIEff09::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIEff09::is_statute_Valid() const{
    return m_statute_isValid;
}

bool OAIEff09::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cwp_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_current_snc_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_major_minor_status_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_status_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_permits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEff09::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cwp_city_isValid && m_cwp_current_snc_status_isValid && m_cwp_major_minor_status_flag_isValid && m_cwp_name_isValid && m_cwp_permit_status_desc_isValid && m_cwp_permit_type_desc_isValid && m_cwp_state_isValid && m_cwp_street_isValid && m_cwp_zip_isValid && m_epa_system_isValid && m_end_date_isValid && m_message_isValid && m_registry_id_isValid && m_source_id_isValid && m_start_date_isValid && m_statute_isValid && true;
}

} // namespace OpenAPI
