/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEffluentChartsApi_H
#define OAI_OAIEffluentChartsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_eff_rest_services_get_effluent_chart_get_200_response.h"
#include "OAI_eff_rest_services_get_summary_chart_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEffluentChartsApi : public QObject {
    Q_OBJECT

public:
    OAIEffluentChartsApi(const int timeOut = 0);
    ~OAIEffluentChartsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  outfall QString [optional]
    * @param[in]  parameter_code QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void effRestServicesDownloadEffluentChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameter_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  outfall QString [optional]
    * @param[in]  parameter_code QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void effRestServicesDownloadEffluentChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameter_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  outfall QString [optional]
    * @param[in]  parameter_code QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void effRestServicesGetEffluentChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameter_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  outfall QString [optional]
    * @param[in]  parameter_code QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void effRestServicesGetEffluentChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameter_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void effRestServicesGetSummaryChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void effRestServicesGetSummaryChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void effRestServicesDownloadEffluentChartGetCallback(OAIHttpRequestWorker *worker);
    void effRestServicesDownloadEffluentChartPostCallback(OAIHttpRequestWorker *worker);
    void effRestServicesGetEffluentChartGetCallback(OAIHttpRequestWorker *worker);
    void effRestServicesGetEffluentChartPostCallback(OAIHttpRequestWorker *worker);
    void effRestServicesGetSummaryChartGetCallback(OAIHttpRequestWorker *worker);
    void effRestServicesGetSummaryChartPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void effRestServicesDownloadEffluentChartGetSignal(OAIHttpFileElement summary);
    void effRestServicesDownloadEffluentChartPostSignal(OAIHttpFileElement summary);
    void effRestServicesGetEffluentChartGetSignal(OAI_eff_rest_services_get_effluent_chart_get_200_response summary);
    void effRestServicesGetEffluentChartPostSignal(OAI_eff_rest_services_get_effluent_chart_get_200_response summary);
    void effRestServicesGetSummaryChartGetSignal(OAI_eff_rest_services_get_summary_chart_get_200_response summary);
    void effRestServicesGetSummaryChartPostSignal(OAI_eff_rest_services_get_summary_chart_get_200_response summary);


    void effRestServicesDownloadEffluentChartGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void effRestServicesDownloadEffluentChartPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void effRestServicesGetEffluentChartGetSignalFull(OAIHttpRequestWorker *worker, OAI_eff_rest_services_get_effluent_chart_get_200_response summary);
    void effRestServicesGetEffluentChartPostSignalFull(OAIHttpRequestWorker *worker, OAI_eff_rest_services_get_effluent_chart_get_200_response summary);
    void effRestServicesGetSummaryChartGetSignalFull(OAIHttpRequestWorker *worker, OAI_eff_rest_services_get_summary_chart_get_200_response summary);
    void effRestServicesGetSummaryChartPostSignalFull(OAIHttpRequestWorker *worker, OAI_eff_rest_services_get_summary_chart_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use effRestServicesDownloadEffluentChartGetSignalError() instead")
    void effRestServicesDownloadEffluentChartGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesDownloadEffluentChartGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesDownloadEffluentChartPostSignalError() instead")
    void effRestServicesDownloadEffluentChartPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesDownloadEffluentChartPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetEffluentChartGetSignalError() instead")
    void effRestServicesGetEffluentChartGetSignalE(OAI_eff_rest_services_get_effluent_chart_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetEffluentChartGetSignalError(OAI_eff_rest_services_get_effluent_chart_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetEffluentChartPostSignalError() instead")
    void effRestServicesGetEffluentChartPostSignalE(OAI_eff_rest_services_get_effluent_chart_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetEffluentChartPostSignalError(OAI_eff_rest_services_get_effluent_chart_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetSummaryChartGetSignalError() instead")
    void effRestServicesGetSummaryChartGetSignalE(OAI_eff_rest_services_get_summary_chart_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetSummaryChartGetSignalError(OAI_eff_rest_services_get_summary_chart_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetSummaryChartPostSignalError() instead")
    void effRestServicesGetSummaryChartPostSignalE(OAI_eff_rest_services_get_summary_chart_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetSummaryChartPostSignalError(OAI_eff_rest_services_get_summary_chart_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use effRestServicesDownloadEffluentChartGetSignalErrorFull() instead")
    void effRestServicesDownloadEffluentChartGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesDownloadEffluentChartGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesDownloadEffluentChartPostSignalErrorFull() instead")
    void effRestServicesDownloadEffluentChartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesDownloadEffluentChartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetEffluentChartGetSignalErrorFull() instead")
    void effRestServicesGetEffluentChartGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetEffluentChartGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetEffluentChartPostSignalErrorFull() instead")
    void effRestServicesGetEffluentChartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetEffluentChartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetSummaryChartGetSignalErrorFull() instead")
    void effRestServicesGetSummaryChartGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetSummaryChartGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use effRestServicesGetSummaryChartPostSignalErrorFull() instead")
    void effRestServicesGetSummaryChartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void effRestServicesGetSummaryChartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
