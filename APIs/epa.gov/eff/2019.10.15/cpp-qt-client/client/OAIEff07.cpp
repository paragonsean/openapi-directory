/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEff07.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEff07::OAIEff07(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEff07::OAIEff07() {
    this->initializeModel();
}

OAIEff07::~OAIEff07() {}

void OAIEff07::initializeModel() {

    m_current_vio_status_isSet = false;
    m_current_vio_status_isValid = false;

    m_max_vio_status_isSet = false;
    m_max_vio_status_isValid = false;

    m_parameter_code_isSet = false;
    m_parameter_code_isValid = false;

    m_parameter_desc_isSet = false;
    m_parameter_desc_isValid = false;
}

void OAIEff07::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEff07::fromJsonObject(QJsonObject json) {

    m_current_vio_status_isValid = ::OpenAPI::fromJsonValue(m_current_vio_status, json[QString("CurrentVioStatus")]);
    m_current_vio_status_isSet = !json[QString("CurrentVioStatus")].isNull() && m_current_vio_status_isValid;

    m_max_vio_status_isValid = ::OpenAPI::fromJsonValue(m_max_vio_status, json[QString("MaxVioStatus")]);
    m_max_vio_status_isSet = !json[QString("MaxVioStatus")].isNull() && m_max_vio_status_isValid;

    m_parameter_code_isValid = ::OpenAPI::fromJsonValue(m_parameter_code, json[QString("ParameterCode")]);
    m_parameter_code_isSet = !json[QString("ParameterCode")].isNull() && m_parameter_code_isValid;

    m_parameter_desc_isValid = ::OpenAPI::fromJsonValue(m_parameter_desc, json[QString("ParameterDesc")]);
    m_parameter_desc_isSet = !json[QString("ParameterDesc")].isNull() && m_parameter_desc_isValid;
}

QString OAIEff07::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEff07::asJsonObject() const {
    QJsonObject obj;
    if (m_current_vio_status_isSet) {
        obj.insert(QString("CurrentVioStatus"), ::OpenAPI::toJsonValue(m_current_vio_status));
    }
    if (m_max_vio_status_isSet) {
        obj.insert(QString("MaxVioStatus"), ::OpenAPI::toJsonValue(m_max_vio_status));
    }
    if (m_parameter_code_isSet) {
        obj.insert(QString("ParameterCode"), ::OpenAPI::toJsonValue(m_parameter_code));
    }
    if (m_parameter_desc_isSet) {
        obj.insert(QString("ParameterDesc"), ::OpenAPI::toJsonValue(m_parameter_desc));
    }
    return obj;
}

QString OAIEff07::getCurrentVioStatus() const {
    return m_current_vio_status;
}
void OAIEff07::setCurrentVioStatus(const QString &current_vio_status) {
    m_current_vio_status = current_vio_status;
    m_current_vio_status_isSet = true;
}

bool OAIEff07::is_current_vio_status_Set() const{
    return m_current_vio_status_isSet;
}

bool OAIEff07::is_current_vio_status_Valid() const{
    return m_current_vio_status_isValid;
}

QString OAIEff07::getMaxVioStatus() const {
    return m_max_vio_status;
}
void OAIEff07::setMaxVioStatus(const QString &max_vio_status) {
    m_max_vio_status = max_vio_status;
    m_max_vio_status_isSet = true;
}

bool OAIEff07::is_max_vio_status_Set() const{
    return m_max_vio_status_isSet;
}

bool OAIEff07::is_max_vio_status_Valid() const{
    return m_max_vio_status_isValid;
}

QString OAIEff07::getParameterCode() const {
    return m_parameter_code;
}
void OAIEff07::setParameterCode(const QString &parameter_code) {
    m_parameter_code = parameter_code;
    m_parameter_code_isSet = true;
}

bool OAIEff07::is_parameter_code_Set() const{
    return m_parameter_code_isSet;
}

bool OAIEff07::is_parameter_code_Valid() const{
    return m_parameter_code_isValid;
}

QString OAIEff07::getParameterDesc() const {
    return m_parameter_desc;
}
void OAIEff07::setParameterDesc(const QString &parameter_desc) {
    m_parameter_desc = parameter_desc;
    m_parameter_desc_isSet = true;
}

bool OAIEff07::is_parameter_desc_Set() const{
    return m_parameter_desc_isSet;
}

bool OAIEff07::is_parameter_desc_Valid() const{
    return m_parameter_desc_isValid;
}

bool OAIEff07::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_vio_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_vio_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_desc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEff07::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_vio_status_isValid && m_max_vio_status_isValid && m_parameter_code_isValid && m_parameter_desc_isValid && true;
}

} // namespace OpenAPI
