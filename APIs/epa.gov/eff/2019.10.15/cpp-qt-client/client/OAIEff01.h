/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEff01.h
 *
 * Discharge Monitoring Reports Object
 */

#ifndef OAIEff01_H
#define OAIEff01_H

#include <QJsonObject>

#include "OAIEff02.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEff02;

class OAIEff01 : public OAIObject {
public:
    OAIEff01();
    OAIEff01(QString json);
    ~OAIEff01() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDmrEventId() const;
    void setDmrEventId(const QString &dmr_event_id);
    bool is_dmr_event_id_Set() const;
    bool is_dmr_event_id_Valid() const;

    QString getDmrFormValueId() const;
    void setDmrFormValueId(const QString &dmr_form_value_id);
    bool is_dmr_form_value_id_Set() const;
    bool is_dmr_form_value_id_Valid() const;

    QString getDmrUnitCode() const;
    void setDmrUnitCode(const QString &dmr_unit_code);
    bool is_dmr_unit_code_Set() const;
    bool is_dmr_unit_code_Valid() const;

    QString getDmrUnitDesc() const;
    void setDmrUnitDesc(const QString &dmr_unit_desc);
    bool is_dmr_unit_desc_Set() const;
    bool is_dmr_unit_desc_Valid() const;

    QString getDmrValueId() const;
    void setDmrValueId(const QString &dmr_value_id);
    bool is_dmr_value_id_Set() const;
    bool is_dmr_value_id_Valid() const;

    QString getDmrValueNmbr() const;
    void setDmrValueNmbr(const QString &dmr_value_nmbr);
    bool is_dmr_value_nmbr_Set() const;
    bool is_dmr_value_nmbr_Valid() const;

    QString getDmrValueQualifierCode() const;
    void setDmrValueQualifierCode(const QString &dmr_value_qualifier_code);
    bool is_dmr_value_qualifier_code_Set() const;
    bool is_dmr_value_qualifier_code_Valid() const;

    QString getDmrValueStdUnits() const;
    void setDmrValueStdUnits(const QString &dmr_value_std_units);
    bool is_dmr_value_std_units_Set() const;
    bool is_dmr_value_std_units_Valid() const;

    QString getDaysLate() const;
    void setDaysLate(const QString &days_late);
    bool is_days_late_Set() const;
    bool is_days_late_Valid() const;

    QString getExceedencePct() const;
    void setExceedencePct(const QString &exceedence_pct);
    bool is_exceedence_pct_Set() const;
    bool is_exceedence_pct_Valid() const;

    QString getLimitBeginDate() const;
    void setLimitBeginDate(const QString &limit_begin_date);
    bool is_limit_begin_date_Set() const;
    bool is_limit_begin_date_Valid() const;

    QString getLimitEndDate() const;
    void setLimitEndDate(const QString &limit_end_date);
    bool is_limit_end_date_Set() const;
    bool is_limit_end_date_Valid() const;

    QString getLimitId() const;
    void setLimitId(const QString &limit_id);
    bool is_limit_id_Set() const;
    bool is_limit_id_Valid() const;

    QString getLimitSetId() const;
    void setLimitSetId(const QString &limit_set_id);
    bool is_limit_set_id_Set() const;
    bool is_limit_set_id_Valid() const;

    QString getLimitSetScheduleId() const;
    void setLimitSetScheduleId(const QString &limit_set_schedule_id);
    bool is_limit_set_schedule_id_Set() const;
    bool is_limit_set_schedule_id_Valid() const;

    QString getLimitTypeCode() const;
    void setLimitTypeCode(const QString &limit_type_code);
    bool is_limit_type_code_Set() const;
    bool is_limit_type_code_Valid() const;

    QString getLimitUnitCode() const;
    void setLimitUnitCode(const QString &limit_unit_code);
    bool is_limit_unit_code_Set() const;
    bool is_limit_unit_code_Valid() const;

    QString getLimitUnitDesc() const;
    void setLimitUnitDesc(const QString &limit_unit_desc);
    bool is_limit_unit_desc_Set() const;
    bool is_limit_unit_desc_Valid() const;

    QString getLimitValueId() const;
    void setLimitValueId(const QString &limit_value_id);
    bool is_limit_value_id_Set() const;
    bool is_limit_value_id_Valid() const;

    QString getLimitValueNmbr() const;
    void setLimitValueNmbr(const QString &limit_value_nmbr);
    bool is_limit_value_nmbr_Set() const;
    bool is_limit_value_nmbr_Valid() const;

    QString getLimitValueQualifierCode() const;
    void setLimitValueQualifierCode(const QString &limit_value_qualifier_code);
    bool is_limit_value_qualifier_code_Set() const;
    bool is_limit_value_qualifier_code_Valid() const;

    QString getLimitValueStdUnits() const;
    void setLimitValueStdUnits(const QString &limit_value_std_units);
    bool is_limit_value_std_units_Set() const;
    bool is_limit_value_std_units_Valid() const;

    QString getLimitValueTypeCode() const;
    void setLimitValueTypeCode(const QString &limit_value_type_code);
    bool is_limit_value_type_code_Set() const;
    bool is_limit_value_type_code_Valid() const;

    QString getLimitValueTypeDesc() const;
    void setLimitValueTypeDesc(const QString &limit_value_type_desc);
    bool is_limit_value_type_desc_Set() const;
    bool is_limit_value_type_desc_Valid() const;

    QString getMonitoringPeriodEndDate() const;
    void setMonitoringPeriodEndDate(const QString &monitoring_period_end_date);
    bool is_monitoring_period_end_date_Set() const;
    bool is_monitoring_period_end_date_Valid() const;

    QString getNodeDesc() const;
    void setNodeDesc(const QString &node_desc);
    bool is_node_desc_Set() const;
    bool is_node_desc_Valid() const;

    QString getNodiCode() const;
    void setNodiCode(const QString &nodi_code);
    bool is_nodi_code_Set() const;
    bool is_nodi_code_Valid() const;

    QList<OAIEff02> getNpdesViolations() const;
    void setNpdesViolations(const QList<OAIEff02> &npdes_violations);
    bool is_npdes_violations_Set() const;
    bool is_npdes_violations_Valid() const;

    QString getNmbrOfSubmission() const;
    void setNmbrOfSubmission(const QString &nmbr_of_submission);
    bool is_nmbr_of_submission_Set() const;
    bool is_nmbr_of_submission_Valid() const;

    QString getPermFeatureId() const;
    void setPermFeatureId(const QString &perm_feature_id);
    bool is_perm_feature_id_Set() const;
    bool is_perm_feature_id_Valid() const;

    QString getStatisticalBaseCode() const;
    void setStatisticalBaseCode(const QString &statistical_base_code);
    bool is_statistical_base_code_Set() const;
    bool is_statistical_base_code_Valid() const;

    QString getStatisticalBaseDesc() const;
    void setStatisticalBaseDesc(const QString &statistical_base_desc);
    bool is_statistical_base_desc_Set() const;
    bool is_statistical_base_desc_Valid() const;

    QString getStatisticalBaseTypeCode() const;
    void setStatisticalBaseTypeCode(const QString &statistical_base_type_code);
    bool is_statistical_base_type_code_Set() const;
    bool is_statistical_base_type_code_Valid() const;

    QString getStatisticalBaseTypeDesc() const;
    void setStatisticalBaseTypeDesc(const QString &statistical_base_type_desc);
    bool is_statistical_base_type_desc_Set() const;
    bool is_statistical_base_type_desc_Valid() const;

    QString getStayValueNmbr() const;
    void setStayValueNmbr(const QString &stay_value_nmbr);
    bool is_stay_value_nmbr_Set() const;
    bool is_stay_value_nmbr_Valid() const;

    QString getStdUnitCode() const;
    void setStdUnitCode(const QString &std_unit_code);
    bool is_std_unit_code_Set() const;
    bool is_std_unit_code_Valid() const;

    QString getStdUnitDesc() const;
    void setStdUnitDesc(const QString &std_unit_desc);
    bool is_std_unit_desc_Set() const;
    bool is_std_unit_desc_Valid() const;

    QString getValueReceivedDate() const;
    void setValueReceivedDate(const QString &value_received_date);
    bool is_value_received_date_Set() const;
    bool is_value_received_date_Valid() const;

    QString getValueTypeCode() const;
    void setValueTypeCode(const QString &value_type_code);
    bool is_value_type_code_Set() const;
    bool is_value_type_code_Valid() const;

    QString getValueTypeDesc() const;
    void setValueTypeDesc(const QString &value_type_desc);
    bool is_value_type_desc_Set() const;
    bool is_value_type_desc_Valid() const;

    QString getVersionNmbr() const;
    void setVersionNmbr(const QString &version_nmbr);
    bool is_version_nmbr_Set() const;
    bool is_version_nmbr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dmr_event_id;
    bool m_dmr_event_id_isSet;
    bool m_dmr_event_id_isValid;

    QString m_dmr_form_value_id;
    bool m_dmr_form_value_id_isSet;
    bool m_dmr_form_value_id_isValid;

    QString m_dmr_unit_code;
    bool m_dmr_unit_code_isSet;
    bool m_dmr_unit_code_isValid;

    QString m_dmr_unit_desc;
    bool m_dmr_unit_desc_isSet;
    bool m_dmr_unit_desc_isValid;

    QString m_dmr_value_id;
    bool m_dmr_value_id_isSet;
    bool m_dmr_value_id_isValid;

    QString m_dmr_value_nmbr;
    bool m_dmr_value_nmbr_isSet;
    bool m_dmr_value_nmbr_isValid;

    QString m_dmr_value_qualifier_code;
    bool m_dmr_value_qualifier_code_isSet;
    bool m_dmr_value_qualifier_code_isValid;

    QString m_dmr_value_std_units;
    bool m_dmr_value_std_units_isSet;
    bool m_dmr_value_std_units_isValid;

    QString m_days_late;
    bool m_days_late_isSet;
    bool m_days_late_isValid;

    QString m_exceedence_pct;
    bool m_exceedence_pct_isSet;
    bool m_exceedence_pct_isValid;

    QString m_limit_begin_date;
    bool m_limit_begin_date_isSet;
    bool m_limit_begin_date_isValid;

    QString m_limit_end_date;
    bool m_limit_end_date_isSet;
    bool m_limit_end_date_isValid;

    QString m_limit_id;
    bool m_limit_id_isSet;
    bool m_limit_id_isValid;

    QString m_limit_set_id;
    bool m_limit_set_id_isSet;
    bool m_limit_set_id_isValid;

    QString m_limit_set_schedule_id;
    bool m_limit_set_schedule_id_isSet;
    bool m_limit_set_schedule_id_isValid;

    QString m_limit_type_code;
    bool m_limit_type_code_isSet;
    bool m_limit_type_code_isValid;

    QString m_limit_unit_code;
    bool m_limit_unit_code_isSet;
    bool m_limit_unit_code_isValid;

    QString m_limit_unit_desc;
    bool m_limit_unit_desc_isSet;
    bool m_limit_unit_desc_isValid;

    QString m_limit_value_id;
    bool m_limit_value_id_isSet;
    bool m_limit_value_id_isValid;

    QString m_limit_value_nmbr;
    bool m_limit_value_nmbr_isSet;
    bool m_limit_value_nmbr_isValid;

    QString m_limit_value_qualifier_code;
    bool m_limit_value_qualifier_code_isSet;
    bool m_limit_value_qualifier_code_isValid;

    QString m_limit_value_std_units;
    bool m_limit_value_std_units_isSet;
    bool m_limit_value_std_units_isValid;

    QString m_limit_value_type_code;
    bool m_limit_value_type_code_isSet;
    bool m_limit_value_type_code_isValid;

    QString m_limit_value_type_desc;
    bool m_limit_value_type_desc_isSet;
    bool m_limit_value_type_desc_isValid;

    QString m_monitoring_period_end_date;
    bool m_monitoring_period_end_date_isSet;
    bool m_monitoring_period_end_date_isValid;

    QString m_node_desc;
    bool m_node_desc_isSet;
    bool m_node_desc_isValid;

    QString m_nodi_code;
    bool m_nodi_code_isSet;
    bool m_nodi_code_isValid;

    QList<OAIEff02> m_npdes_violations;
    bool m_npdes_violations_isSet;
    bool m_npdes_violations_isValid;

    QString m_nmbr_of_submission;
    bool m_nmbr_of_submission_isSet;
    bool m_nmbr_of_submission_isValid;

    QString m_perm_feature_id;
    bool m_perm_feature_id_isSet;
    bool m_perm_feature_id_isValid;

    QString m_statistical_base_code;
    bool m_statistical_base_code_isSet;
    bool m_statistical_base_code_isValid;

    QString m_statistical_base_desc;
    bool m_statistical_base_desc_isSet;
    bool m_statistical_base_desc_isValid;

    QString m_statistical_base_type_code;
    bool m_statistical_base_type_code_isSet;
    bool m_statistical_base_type_code_isValid;

    QString m_statistical_base_type_desc;
    bool m_statistical_base_type_desc_isSet;
    bool m_statistical_base_type_desc_isValid;

    QString m_stay_value_nmbr;
    bool m_stay_value_nmbr_isSet;
    bool m_stay_value_nmbr_isValid;

    QString m_std_unit_code;
    bool m_std_unit_code_isSet;
    bool m_std_unit_code_isValid;

    QString m_std_unit_desc;
    bool m_std_unit_desc_isSet;
    bool m_std_unit_desc_isValid;

    QString m_value_received_date;
    bool m_value_received_date_isSet;
    bool m_value_received_date_isValid;

    QString m_value_type_code;
    bool m_value_type_code_isSet;
    bool m_value_type_code_isValid;

    QString m_value_type_desc;
    bool m_value_type_desc_isSet;
    bool m_value_type_desc_isValid;

    QString m_version_nmbr;
    bool m_version_nmbr_isSet;
    bool m_version_nmbr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEff01)

#endif // OAIEff01_H
