/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffluentChartsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEffluentChartsApi::OAIEffluentChartsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEffluentChartsApi::~OAIEffluentChartsApi() {
}

void OAIEffluentChartsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://echodata.epa.gov/echo"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("effRestServicesDownloadEffluentChartGet", defaultConf);
    _serverIndices.insert("effRestServicesDownloadEffluentChartGet", 0);
    _serverConfigs.insert("effRestServicesDownloadEffluentChartPost", defaultConf);
    _serverIndices.insert("effRestServicesDownloadEffluentChartPost", 0);
    _serverConfigs.insert("effRestServicesGetEffluentChartGet", defaultConf);
    _serverIndices.insert("effRestServicesGetEffluentChartGet", 0);
    _serverConfigs.insert("effRestServicesGetEffluentChartPost", defaultConf);
    _serverIndices.insert("effRestServicesGetEffluentChartPost", 0);
    _serverConfigs.insert("effRestServicesGetSummaryChartGet", defaultConf);
    _serverIndices.insert("effRestServicesGetSummaryChartGet", 0);
    _serverConfigs.insert("effRestServicesGetSummaryChartPost", defaultConf);
    _serverIndices.insert("effRestServicesGetSummaryChartPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEffluentChartsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEffluentChartsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEffluentChartsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEffluentChartsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEffluentChartsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEffluentChartsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEffluentChartsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEffluentChartsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEffluentChartsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEffluentChartsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEffluentChartsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEffluentChartsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEffluentChartsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEffluentChartsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEffluentChartsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEffluentChartsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEffluentChartsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEffluentChartsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEffluentChartsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEffluentChartsApi::effRestServicesDownloadEffluentChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall, const ::OpenAPI::OptionalParam<QString> &parameter_code, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date) {
    QString fullPath = QString(_serverConfigs["effRestServicesDownloadEffluentChartGet"][_serverIndices.value("effRestServicesDownloadEffluentChartGet")].URL()+"/eff_rest_services.download_effluent_chart");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (outfall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "outfall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("outfall")).append(querySuffix).append(QUrl::toPercentEncoding(outfall.stringValue()));
    }
    if (parameter_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parameter_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parameter_code")).append(querySuffix).append(QUrl::toPercentEncoding(parameter_code.stringValue()));
    }
    if (start_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(start_date.stringValue()));
    }
    if (end_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(end_date.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesDownloadEffluentChartGetCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesDownloadEffluentChartGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesDownloadEffluentChartGetSignal(output);
        Q_EMIT effRestServicesDownloadEffluentChartGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesDownloadEffluentChartGetSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesDownloadEffluentChartGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesDownloadEffluentChartGetSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesDownloadEffluentChartGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::effRestServicesDownloadEffluentChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall, const ::OpenAPI::OptionalParam<QString> &parameter_code, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date) {
    QString fullPath = QString(_serverConfigs["effRestServicesDownloadEffluentChartPost"][_serverIndices.value("effRestServicesDownloadEffluentChartPost")].URL()+"/eff_rest_services.download_effluent_chart");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id));
    }
    if (outfall.hasValue())
    {
        input.add_var("outfall", ::OpenAPI::toStringValue(outfall.value()));
    }
    if (parameter_code.hasValue())
    {
        input.add_var("parameter_code", ::OpenAPI::toStringValue(parameter_code.value()));
    }
    if (start_date.hasValue())
    {
        input.add_var("start_date", ::OpenAPI::toStringValue(start_date.value()));
    }
    if (end_date.hasValue())
    {
        input.add_var("end_date", ::OpenAPI::toStringValue(end_date.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesDownloadEffluentChartPostCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesDownloadEffluentChartPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesDownloadEffluentChartPostSignal(output);
        Q_EMIT effRestServicesDownloadEffluentChartPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesDownloadEffluentChartPostSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesDownloadEffluentChartPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesDownloadEffluentChartPostSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesDownloadEffluentChartPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::effRestServicesGetEffluentChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall, const ::OpenAPI::OptionalParam<QString> &parameter_code, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["effRestServicesGetEffluentChartGet"][_serverIndices.value("effRestServicesGetEffluentChartGet")].URL()+"/eff_rest_services.get_effluent_chart");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (outfall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "outfall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("outfall")).append(querySuffix).append(QUrl::toPercentEncoding(outfall.stringValue()));
    }
    if (parameter_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parameter_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parameter_code")).append(querySuffix).append(QUrl::toPercentEncoding(parameter_code.stringValue()));
    }
    if (start_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(start_date.stringValue()));
    }
    if (end_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(end_date.stringValue()));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesGetEffluentChartGetCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesGetEffluentChartGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_eff_rest_services_get_effluent_chart_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesGetEffluentChartGetSignal(output);
        Q_EMIT effRestServicesGetEffluentChartGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesGetEffluentChartGetSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesGetEffluentChartGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesGetEffluentChartGetSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesGetEffluentChartGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::effRestServicesGetEffluentChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &outfall, const ::OpenAPI::OptionalParam<QString> &parameter_code, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["effRestServicesGetEffluentChartPost"][_serverIndices.value("effRestServicesGetEffluentChartPost")].URL()+"/eff_rest_services.get_effluent_chart");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id));
    }
    if (outfall.hasValue())
    {
        input.add_var("outfall", ::OpenAPI::toStringValue(outfall.value()));
    }
    if (parameter_code.hasValue())
    {
        input.add_var("parameter_code", ::OpenAPI::toStringValue(parameter_code.value()));
    }
    if (start_date.hasValue())
    {
        input.add_var("start_date", ::OpenAPI::toStringValue(start_date.value()));
    }
    if (end_date.hasValue())
    {
        input.add_var("end_date", ::OpenAPI::toStringValue(end_date.value()));
    }
    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesGetEffluentChartPostCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesGetEffluentChartPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_eff_rest_services_get_effluent_chart_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesGetEffluentChartPostSignal(output);
        Q_EMIT effRestServicesGetEffluentChartPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesGetEffluentChartPostSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesGetEffluentChartPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesGetEffluentChartPostSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesGetEffluentChartPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::effRestServicesGetSummaryChartGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date) {
    QString fullPath = QString(_serverConfigs["effRestServicesGetSummaryChartGet"][_serverIndices.value("effRestServicesGetSummaryChartGet")].URL()+"/eff_rest_services.get_summary_chart");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (start_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(start_date.stringValue()));
    }
    if (end_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(end_date.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesGetSummaryChartGetCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesGetSummaryChartGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_eff_rest_services_get_summary_chart_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesGetSummaryChartGetSignal(output);
        Q_EMIT effRestServicesGetSummaryChartGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesGetSummaryChartGetSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesGetSummaryChartGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesGetSummaryChartGetSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesGetSummaryChartGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::effRestServicesGetSummaryChartPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date) {
    QString fullPath = QString(_serverConfigs["effRestServicesGetSummaryChartPost"][_serverIndices.value("effRestServicesGetSummaryChartPost")].URL()+"/eff_rest_services.get_summary_chart");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id));
    }
    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (start_date.hasValue())
    {
        input.add_var("start_date", ::OpenAPI::toStringValue(start_date.value()));
    }
    if (end_date.hasValue())
    {
        input.add_var("end_date", ::OpenAPI::toStringValue(end_date.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEffluentChartsApi::effRestServicesGetSummaryChartPostCallback);
    connect(this, &OAIEffluentChartsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEffluentChartsApi::effRestServicesGetSummaryChartPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_eff_rest_services_get_summary_chart_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT effRestServicesGetSummaryChartPostSignal(output);
        Q_EMIT effRestServicesGetSummaryChartPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT effRestServicesGetSummaryChartPostSignalE(output, error_type, error_str);
        Q_EMIT effRestServicesGetSummaryChartPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT effRestServicesGetSummaryChartPostSignalError(output, error_type, error_str);
        Q_EMIT effRestServicesGetSummaryChartPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEffluentChartsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
