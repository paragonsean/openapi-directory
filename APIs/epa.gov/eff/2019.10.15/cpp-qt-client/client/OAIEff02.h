/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEff02.h
 *
 * NPDES Violations Object
 */

#ifndef OAIEff02_H
#define OAIEff02_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEff02 : public OAIObject {
public:
    OAIEff02();
    OAIEff02(QString json);
    ~OAIEff02() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNpdesViolationId() const;
    void setNpdesViolationId(const QString &npdes_violation_id);
    bool is_npdes_violation_id_Set() const;
    bool is_npdes_violation_id_Valid() const;

    QString getRncDetectionCode() const;
    void setRncDetectionCode(const QString &rnc_detection_code);
    bool is_rnc_detection_code_Set() const;
    bool is_rnc_detection_code_Valid() const;

    QString getRncDetectionDate() const;
    void setRncDetectionDate(const QString &rnc_detection_date);
    bool is_rnc_detection_date_Set() const;
    bool is_rnc_detection_date_Valid() const;

    QString getRncDetectionDesc() const;
    void setRncDetectionDesc(const QString &rnc_detection_desc);
    bool is_rnc_detection_desc_Set() const;
    bool is_rnc_detection_desc_Valid() const;

    QString getRncResolutionCode() const;
    void setRncResolutionCode(const QString &rnc_resolution_code);
    bool is_rnc_resolution_code_Set() const;
    bool is_rnc_resolution_code_Valid() const;

    QString getRncResolutionDate() const;
    void setRncResolutionDate(const QString &rnc_resolution_date);
    bool is_rnc_resolution_date_Set() const;
    bool is_rnc_resolution_date_Valid() const;

    QString getRncResolutionDesc() const;
    void setRncResolutionDesc(const QString &rnc_resolution_desc);
    bool is_rnc_resolution_desc_Set() const;
    bool is_rnc_resolution_desc_Valid() const;

    QString getViolationCode() const;
    void setViolationCode(const QString &violation_code);
    bool is_violation_code_Set() const;
    bool is_violation_code_Valid() const;

    QString getViolationDesc() const;
    void setViolationDesc(const QString &violation_desc);
    bool is_violation_desc_Set() const;
    bool is_violation_desc_Valid() const;

    QString getViolationSeverity() const;
    void setViolationSeverity(const QString &violation_severity);
    bool is_violation_severity_Set() const;
    bool is_violation_severity_Valid() const;

    QString getViolationSeverityDesc() const;
    void setViolationSeverityDesc(const QString &violation_severity_desc);
    bool is_violation_severity_desc_Set() const;
    bool is_violation_severity_desc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_npdes_violation_id;
    bool m_npdes_violation_id_isSet;
    bool m_npdes_violation_id_isValid;

    QString m_rnc_detection_code;
    bool m_rnc_detection_code_isSet;
    bool m_rnc_detection_code_isValid;

    QString m_rnc_detection_date;
    bool m_rnc_detection_date_isSet;
    bool m_rnc_detection_date_isValid;

    QString m_rnc_detection_desc;
    bool m_rnc_detection_desc_isSet;
    bool m_rnc_detection_desc_isValid;

    QString m_rnc_resolution_code;
    bool m_rnc_resolution_code_isSet;
    bool m_rnc_resolution_code_isValid;

    QString m_rnc_resolution_date;
    bool m_rnc_resolution_date_isSet;
    bool m_rnc_resolution_date_isValid;

    QString m_rnc_resolution_desc;
    bool m_rnc_resolution_desc_isSet;
    bool m_rnc_resolution_desc_isValid;

    QString m_violation_code;
    bool m_violation_code_isSet;
    bool m_violation_code_isValid;

    QString m_violation_desc;
    bool m_violation_desc_isSet;
    bool m_violation_desc_isValid;

    QString m_violation_severity;
    bool m_violation_severity_isSet;
    bool m_violation_severity_isValid;

    QString m_violation_severity_desc;
    bool m_violation_severity_desc_isSet;
    bool m_violation_severity_desc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEff02)

#endif // OAIEff02_H
