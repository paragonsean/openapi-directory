/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEff01.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEff01::OAIEff01(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEff01::OAIEff01() {
    this->initializeModel();
}

OAIEff01::~OAIEff01() {}

void OAIEff01::initializeModel() {

    m_dmr_event_id_isSet = false;
    m_dmr_event_id_isValid = false;

    m_dmr_form_value_id_isSet = false;
    m_dmr_form_value_id_isValid = false;

    m_dmr_unit_code_isSet = false;
    m_dmr_unit_code_isValid = false;

    m_dmr_unit_desc_isSet = false;
    m_dmr_unit_desc_isValid = false;

    m_dmr_value_id_isSet = false;
    m_dmr_value_id_isValid = false;

    m_dmr_value_nmbr_isSet = false;
    m_dmr_value_nmbr_isValid = false;

    m_dmr_value_qualifier_code_isSet = false;
    m_dmr_value_qualifier_code_isValid = false;

    m_dmr_value_std_units_isSet = false;
    m_dmr_value_std_units_isValid = false;

    m_days_late_isSet = false;
    m_days_late_isValid = false;

    m_exceedence_pct_isSet = false;
    m_exceedence_pct_isValid = false;

    m_limit_begin_date_isSet = false;
    m_limit_begin_date_isValid = false;

    m_limit_end_date_isSet = false;
    m_limit_end_date_isValid = false;

    m_limit_id_isSet = false;
    m_limit_id_isValid = false;

    m_limit_set_id_isSet = false;
    m_limit_set_id_isValid = false;

    m_limit_set_schedule_id_isSet = false;
    m_limit_set_schedule_id_isValid = false;

    m_limit_type_code_isSet = false;
    m_limit_type_code_isValid = false;

    m_limit_unit_code_isSet = false;
    m_limit_unit_code_isValid = false;

    m_limit_unit_desc_isSet = false;
    m_limit_unit_desc_isValid = false;

    m_limit_value_id_isSet = false;
    m_limit_value_id_isValid = false;

    m_limit_value_nmbr_isSet = false;
    m_limit_value_nmbr_isValid = false;

    m_limit_value_qualifier_code_isSet = false;
    m_limit_value_qualifier_code_isValid = false;

    m_limit_value_std_units_isSet = false;
    m_limit_value_std_units_isValid = false;

    m_limit_value_type_code_isSet = false;
    m_limit_value_type_code_isValid = false;

    m_limit_value_type_desc_isSet = false;
    m_limit_value_type_desc_isValid = false;

    m_monitoring_period_end_date_isSet = false;
    m_monitoring_period_end_date_isValid = false;

    m_node_desc_isSet = false;
    m_node_desc_isValid = false;

    m_nodi_code_isSet = false;
    m_nodi_code_isValid = false;

    m_npdes_violations_isSet = false;
    m_npdes_violations_isValid = false;

    m_nmbr_of_submission_isSet = false;
    m_nmbr_of_submission_isValid = false;

    m_perm_feature_id_isSet = false;
    m_perm_feature_id_isValid = false;

    m_statistical_base_code_isSet = false;
    m_statistical_base_code_isValid = false;

    m_statistical_base_desc_isSet = false;
    m_statistical_base_desc_isValid = false;

    m_statistical_base_type_code_isSet = false;
    m_statistical_base_type_code_isValid = false;

    m_statistical_base_type_desc_isSet = false;
    m_statistical_base_type_desc_isValid = false;

    m_stay_value_nmbr_isSet = false;
    m_stay_value_nmbr_isValid = false;

    m_std_unit_code_isSet = false;
    m_std_unit_code_isValid = false;

    m_std_unit_desc_isSet = false;
    m_std_unit_desc_isValid = false;

    m_value_received_date_isSet = false;
    m_value_received_date_isValid = false;

    m_value_type_code_isSet = false;
    m_value_type_code_isValid = false;

    m_value_type_desc_isSet = false;
    m_value_type_desc_isValid = false;

    m_version_nmbr_isSet = false;
    m_version_nmbr_isValid = false;
}

void OAIEff01::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEff01::fromJsonObject(QJsonObject json) {

    m_dmr_event_id_isValid = ::OpenAPI::fromJsonValue(m_dmr_event_id, json[QString("DMREventId")]);
    m_dmr_event_id_isSet = !json[QString("DMREventId")].isNull() && m_dmr_event_id_isValid;

    m_dmr_form_value_id_isValid = ::OpenAPI::fromJsonValue(m_dmr_form_value_id, json[QString("DMRFormValueId")]);
    m_dmr_form_value_id_isSet = !json[QString("DMRFormValueId")].isNull() && m_dmr_form_value_id_isValid;

    m_dmr_unit_code_isValid = ::OpenAPI::fromJsonValue(m_dmr_unit_code, json[QString("DMRUnitCode")]);
    m_dmr_unit_code_isSet = !json[QString("DMRUnitCode")].isNull() && m_dmr_unit_code_isValid;

    m_dmr_unit_desc_isValid = ::OpenAPI::fromJsonValue(m_dmr_unit_desc, json[QString("DMRUnitDesc")]);
    m_dmr_unit_desc_isSet = !json[QString("DMRUnitDesc")].isNull() && m_dmr_unit_desc_isValid;

    m_dmr_value_id_isValid = ::OpenAPI::fromJsonValue(m_dmr_value_id, json[QString("DMRValueId")]);
    m_dmr_value_id_isSet = !json[QString("DMRValueId")].isNull() && m_dmr_value_id_isValid;

    m_dmr_value_nmbr_isValid = ::OpenAPI::fromJsonValue(m_dmr_value_nmbr, json[QString("DMRValueNmbr")]);
    m_dmr_value_nmbr_isSet = !json[QString("DMRValueNmbr")].isNull() && m_dmr_value_nmbr_isValid;

    m_dmr_value_qualifier_code_isValid = ::OpenAPI::fromJsonValue(m_dmr_value_qualifier_code, json[QString("DMRValueQualifierCode")]);
    m_dmr_value_qualifier_code_isSet = !json[QString("DMRValueQualifierCode")].isNull() && m_dmr_value_qualifier_code_isValid;

    m_dmr_value_std_units_isValid = ::OpenAPI::fromJsonValue(m_dmr_value_std_units, json[QString("DMRValueStdUnits")]);
    m_dmr_value_std_units_isSet = !json[QString("DMRValueStdUnits")].isNull() && m_dmr_value_std_units_isValid;

    m_days_late_isValid = ::OpenAPI::fromJsonValue(m_days_late, json[QString("DaysLate")]);
    m_days_late_isSet = !json[QString("DaysLate")].isNull() && m_days_late_isValid;

    m_exceedence_pct_isValid = ::OpenAPI::fromJsonValue(m_exceedence_pct, json[QString("ExceedencePct")]);
    m_exceedence_pct_isSet = !json[QString("ExceedencePct")].isNull() && m_exceedence_pct_isValid;

    m_limit_begin_date_isValid = ::OpenAPI::fromJsonValue(m_limit_begin_date, json[QString("LimitBeginDate")]);
    m_limit_begin_date_isSet = !json[QString("LimitBeginDate")].isNull() && m_limit_begin_date_isValid;

    m_limit_end_date_isValid = ::OpenAPI::fromJsonValue(m_limit_end_date, json[QString("LimitEndDate")]);
    m_limit_end_date_isSet = !json[QString("LimitEndDate")].isNull() && m_limit_end_date_isValid;

    m_limit_id_isValid = ::OpenAPI::fromJsonValue(m_limit_id, json[QString("LimitId")]);
    m_limit_id_isSet = !json[QString("LimitId")].isNull() && m_limit_id_isValid;

    m_limit_set_id_isValid = ::OpenAPI::fromJsonValue(m_limit_set_id, json[QString("LimitSetId")]);
    m_limit_set_id_isSet = !json[QString("LimitSetId")].isNull() && m_limit_set_id_isValid;

    m_limit_set_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_limit_set_schedule_id, json[QString("LimitSetScheduleId")]);
    m_limit_set_schedule_id_isSet = !json[QString("LimitSetScheduleId")].isNull() && m_limit_set_schedule_id_isValid;

    m_limit_type_code_isValid = ::OpenAPI::fromJsonValue(m_limit_type_code, json[QString("LimitTypeCode")]);
    m_limit_type_code_isSet = !json[QString("LimitTypeCode")].isNull() && m_limit_type_code_isValid;

    m_limit_unit_code_isValid = ::OpenAPI::fromJsonValue(m_limit_unit_code, json[QString("LimitUnitCode")]);
    m_limit_unit_code_isSet = !json[QString("LimitUnitCode")].isNull() && m_limit_unit_code_isValid;

    m_limit_unit_desc_isValid = ::OpenAPI::fromJsonValue(m_limit_unit_desc, json[QString("LimitUnitDesc")]);
    m_limit_unit_desc_isSet = !json[QString("LimitUnitDesc")].isNull() && m_limit_unit_desc_isValid;

    m_limit_value_id_isValid = ::OpenAPI::fromJsonValue(m_limit_value_id, json[QString("LimitValueId")]);
    m_limit_value_id_isSet = !json[QString("LimitValueId")].isNull() && m_limit_value_id_isValid;

    m_limit_value_nmbr_isValid = ::OpenAPI::fromJsonValue(m_limit_value_nmbr, json[QString("LimitValueNmbr")]);
    m_limit_value_nmbr_isSet = !json[QString("LimitValueNmbr")].isNull() && m_limit_value_nmbr_isValid;

    m_limit_value_qualifier_code_isValid = ::OpenAPI::fromJsonValue(m_limit_value_qualifier_code, json[QString("LimitValueQualifierCode")]);
    m_limit_value_qualifier_code_isSet = !json[QString("LimitValueQualifierCode")].isNull() && m_limit_value_qualifier_code_isValid;

    m_limit_value_std_units_isValid = ::OpenAPI::fromJsonValue(m_limit_value_std_units, json[QString("LimitValueStdUnits")]);
    m_limit_value_std_units_isSet = !json[QString("LimitValueStdUnits")].isNull() && m_limit_value_std_units_isValid;

    m_limit_value_type_code_isValid = ::OpenAPI::fromJsonValue(m_limit_value_type_code, json[QString("LimitValueTypeCode")]);
    m_limit_value_type_code_isSet = !json[QString("LimitValueTypeCode")].isNull() && m_limit_value_type_code_isValid;

    m_limit_value_type_desc_isValid = ::OpenAPI::fromJsonValue(m_limit_value_type_desc, json[QString("LimitValueTypeDesc")]);
    m_limit_value_type_desc_isSet = !json[QString("LimitValueTypeDesc")].isNull() && m_limit_value_type_desc_isValid;

    m_monitoring_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_monitoring_period_end_date, json[QString("MonitoringPeriodEndDate")]);
    m_monitoring_period_end_date_isSet = !json[QString("MonitoringPeriodEndDate")].isNull() && m_monitoring_period_end_date_isValid;

    m_node_desc_isValid = ::OpenAPI::fromJsonValue(m_node_desc, json[QString("NODEDesc")]);
    m_node_desc_isSet = !json[QString("NODEDesc")].isNull() && m_node_desc_isValid;

    m_nodi_code_isValid = ::OpenAPI::fromJsonValue(m_nodi_code, json[QString("NODICode")]);
    m_nodi_code_isSet = !json[QString("NODICode")].isNull() && m_nodi_code_isValid;

    m_npdes_violations_isValid = ::OpenAPI::fromJsonValue(m_npdes_violations, json[QString("NPDESViolations")]);
    m_npdes_violations_isSet = !json[QString("NPDESViolations")].isNull() && m_npdes_violations_isValid;

    m_nmbr_of_submission_isValid = ::OpenAPI::fromJsonValue(m_nmbr_of_submission, json[QString("NmbrOfSubmission")]);
    m_nmbr_of_submission_isSet = !json[QString("NmbrOfSubmission")].isNull() && m_nmbr_of_submission_isValid;

    m_perm_feature_id_isValid = ::OpenAPI::fromJsonValue(m_perm_feature_id, json[QString("PermFeatureId")]);
    m_perm_feature_id_isSet = !json[QString("PermFeatureId")].isNull() && m_perm_feature_id_isValid;

    m_statistical_base_code_isValid = ::OpenAPI::fromJsonValue(m_statistical_base_code, json[QString("StatisticalBaseCode")]);
    m_statistical_base_code_isSet = !json[QString("StatisticalBaseCode")].isNull() && m_statistical_base_code_isValid;

    m_statistical_base_desc_isValid = ::OpenAPI::fromJsonValue(m_statistical_base_desc, json[QString("StatisticalBaseDesc")]);
    m_statistical_base_desc_isSet = !json[QString("StatisticalBaseDesc")].isNull() && m_statistical_base_desc_isValid;

    m_statistical_base_type_code_isValid = ::OpenAPI::fromJsonValue(m_statistical_base_type_code, json[QString("StatisticalBaseTypeCode")]);
    m_statistical_base_type_code_isSet = !json[QString("StatisticalBaseTypeCode")].isNull() && m_statistical_base_type_code_isValid;

    m_statistical_base_type_desc_isValid = ::OpenAPI::fromJsonValue(m_statistical_base_type_desc, json[QString("StatisticalBaseTypeDesc")]);
    m_statistical_base_type_desc_isSet = !json[QString("StatisticalBaseTypeDesc")].isNull() && m_statistical_base_type_desc_isValid;

    m_stay_value_nmbr_isValid = ::OpenAPI::fromJsonValue(m_stay_value_nmbr, json[QString("StayValueNmbr")]);
    m_stay_value_nmbr_isSet = !json[QString("StayValueNmbr")].isNull() && m_stay_value_nmbr_isValid;

    m_std_unit_code_isValid = ::OpenAPI::fromJsonValue(m_std_unit_code, json[QString("StdUnitCode")]);
    m_std_unit_code_isSet = !json[QString("StdUnitCode")].isNull() && m_std_unit_code_isValid;

    m_std_unit_desc_isValid = ::OpenAPI::fromJsonValue(m_std_unit_desc, json[QString("StdUnitDesc")]);
    m_std_unit_desc_isSet = !json[QString("StdUnitDesc")].isNull() && m_std_unit_desc_isValid;

    m_value_received_date_isValid = ::OpenAPI::fromJsonValue(m_value_received_date, json[QString("ValueReceivedDate")]);
    m_value_received_date_isSet = !json[QString("ValueReceivedDate")].isNull() && m_value_received_date_isValid;

    m_value_type_code_isValid = ::OpenAPI::fromJsonValue(m_value_type_code, json[QString("ValueTypeCode")]);
    m_value_type_code_isSet = !json[QString("ValueTypeCode")].isNull() && m_value_type_code_isValid;

    m_value_type_desc_isValid = ::OpenAPI::fromJsonValue(m_value_type_desc, json[QString("ValueTypeDesc")]);
    m_value_type_desc_isSet = !json[QString("ValueTypeDesc")].isNull() && m_value_type_desc_isValid;

    m_version_nmbr_isValid = ::OpenAPI::fromJsonValue(m_version_nmbr, json[QString("VersionNmbr")]);
    m_version_nmbr_isSet = !json[QString("VersionNmbr")].isNull() && m_version_nmbr_isValid;
}

QString OAIEff01::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEff01::asJsonObject() const {
    QJsonObject obj;
    if (m_dmr_event_id_isSet) {
        obj.insert(QString("DMREventId"), ::OpenAPI::toJsonValue(m_dmr_event_id));
    }
    if (m_dmr_form_value_id_isSet) {
        obj.insert(QString("DMRFormValueId"), ::OpenAPI::toJsonValue(m_dmr_form_value_id));
    }
    if (m_dmr_unit_code_isSet) {
        obj.insert(QString("DMRUnitCode"), ::OpenAPI::toJsonValue(m_dmr_unit_code));
    }
    if (m_dmr_unit_desc_isSet) {
        obj.insert(QString("DMRUnitDesc"), ::OpenAPI::toJsonValue(m_dmr_unit_desc));
    }
    if (m_dmr_value_id_isSet) {
        obj.insert(QString("DMRValueId"), ::OpenAPI::toJsonValue(m_dmr_value_id));
    }
    if (m_dmr_value_nmbr_isSet) {
        obj.insert(QString("DMRValueNmbr"), ::OpenAPI::toJsonValue(m_dmr_value_nmbr));
    }
    if (m_dmr_value_qualifier_code_isSet) {
        obj.insert(QString("DMRValueQualifierCode"), ::OpenAPI::toJsonValue(m_dmr_value_qualifier_code));
    }
    if (m_dmr_value_std_units_isSet) {
        obj.insert(QString("DMRValueStdUnits"), ::OpenAPI::toJsonValue(m_dmr_value_std_units));
    }
    if (m_days_late_isSet) {
        obj.insert(QString("DaysLate"), ::OpenAPI::toJsonValue(m_days_late));
    }
    if (m_exceedence_pct_isSet) {
        obj.insert(QString("ExceedencePct"), ::OpenAPI::toJsonValue(m_exceedence_pct));
    }
    if (m_limit_begin_date_isSet) {
        obj.insert(QString("LimitBeginDate"), ::OpenAPI::toJsonValue(m_limit_begin_date));
    }
    if (m_limit_end_date_isSet) {
        obj.insert(QString("LimitEndDate"), ::OpenAPI::toJsonValue(m_limit_end_date));
    }
    if (m_limit_id_isSet) {
        obj.insert(QString("LimitId"), ::OpenAPI::toJsonValue(m_limit_id));
    }
    if (m_limit_set_id_isSet) {
        obj.insert(QString("LimitSetId"), ::OpenAPI::toJsonValue(m_limit_set_id));
    }
    if (m_limit_set_schedule_id_isSet) {
        obj.insert(QString("LimitSetScheduleId"), ::OpenAPI::toJsonValue(m_limit_set_schedule_id));
    }
    if (m_limit_type_code_isSet) {
        obj.insert(QString("LimitTypeCode"), ::OpenAPI::toJsonValue(m_limit_type_code));
    }
    if (m_limit_unit_code_isSet) {
        obj.insert(QString("LimitUnitCode"), ::OpenAPI::toJsonValue(m_limit_unit_code));
    }
    if (m_limit_unit_desc_isSet) {
        obj.insert(QString("LimitUnitDesc"), ::OpenAPI::toJsonValue(m_limit_unit_desc));
    }
    if (m_limit_value_id_isSet) {
        obj.insert(QString("LimitValueId"), ::OpenAPI::toJsonValue(m_limit_value_id));
    }
    if (m_limit_value_nmbr_isSet) {
        obj.insert(QString("LimitValueNmbr"), ::OpenAPI::toJsonValue(m_limit_value_nmbr));
    }
    if (m_limit_value_qualifier_code_isSet) {
        obj.insert(QString("LimitValueQualifierCode"), ::OpenAPI::toJsonValue(m_limit_value_qualifier_code));
    }
    if (m_limit_value_std_units_isSet) {
        obj.insert(QString("LimitValueStdUnits"), ::OpenAPI::toJsonValue(m_limit_value_std_units));
    }
    if (m_limit_value_type_code_isSet) {
        obj.insert(QString("LimitValueTypeCode"), ::OpenAPI::toJsonValue(m_limit_value_type_code));
    }
    if (m_limit_value_type_desc_isSet) {
        obj.insert(QString("LimitValueTypeDesc"), ::OpenAPI::toJsonValue(m_limit_value_type_desc));
    }
    if (m_monitoring_period_end_date_isSet) {
        obj.insert(QString("MonitoringPeriodEndDate"), ::OpenAPI::toJsonValue(m_monitoring_period_end_date));
    }
    if (m_node_desc_isSet) {
        obj.insert(QString("NODEDesc"), ::OpenAPI::toJsonValue(m_node_desc));
    }
    if (m_nodi_code_isSet) {
        obj.insert(QString("NODICode"), ::OpenAPI::toJsonValue(m_nodi_code));
    }
    if (m_npdes_violations.size() > 0) {
        obj.insert(QString("NPDESViolations"), ::OpenAPI::toJsonValue(m_npdes_violations));
    }
    if (m_nmbr_of_submission_isSet) {
        obj.insert(QString("NmbrOfSubmission"), ::OpenAPI::toJsonValue(m_nmbr_of_submission));
    }
    if (m_perm_feature_id_isSet) {
        obj.insert(QString("PermFeatureId"), ::OpenAPI::toJsonValue(m_perm_feature_id));
    }
    if (m_statistical_base_code_isSet) {
        obj.insert(QString("StatisticalBaseCode"), ::OpenAPI::toJsonValue(m_statistical_base_code));
    }
    if (m_statistical_base_desc_isSet) {
        obj.insert(QString("StatisticalBaseDesc"), ::OpenAPI::toJsonValue(m_statistical_base_desc));
    }
    if (m_statistical_base_type_code_isSet) {
        obj.insert(QString("StatisticalBaseTypeCode"), ::OpenAPI::toJsonValue(m_statistical_base_type_code));
    }
    if (m_statistical_base_type_desc_isSet) {
        obj.insert(QString("StatisticalBaseTypeDesc"), ::OpenAPI::toJsonValue(m_statistical_base_type_desc));
    }
    if (m_stay_value_nmbr_isSet) {
        obj.insert(QString("StayValueNmbr"), ::OpenAPI::toJsonValue(m_stay_value_nmbr));
    }
    if (m_std_unit_code_isSet) {
        obj.insert(QString("StdUnitCode"), ::OpenAPI::toJsonValue(m_std_unit_code));
    }
    if (m_std_unit_desc_isSet) {
        obj.insert(QString("StdUnitDesc"), ::OpenAPI::toJsonValue(m_std_unit_desc));
    }
    if (m_value_received_date_isSet) {
        obj.insert(QString("ValueReceivedDate"), ::OpenAPI::toJsonValue(m_value_received_date));
    }
    if (m_value_type_code_isSet) {
        obj.insert(QString("ValueTypeCode"), ::OpenAPI::toJsonValue(m_value_type_code));
    }
    if (m_value_type_desc_isSet) {
        obj.insert(QString("ValueTypeDesc"), ::OpenAPI::toJsonValue(m_value_type_desc));
    }
    if (m_version_nmbr_isSet) {
        obj.insert(QString("VersionNmbr"), ::OpenAPI::toJsonValue(m_version_nmbr));
    }
    return obj;
}

QString OAIEff01::getDmrEventId() const {
    return m_dmr_event_id;
}
void OAIEff01::setDmrEventId(const QString &dmr_event_id) {
    m_dmr_event_id = dmr_event_id;
    m_dmr_event_id_isSet = true;
}

bool OAIEff01::is_dmr_event_id_Set() const{
    return m_dmr_event_id_isSet;
}

bool OAIEff01::is_dmr_event_id_Valid() const{
    return m_dmr_event_id_isValid;
}

QString OAIEff01::getDmrFormValueId() const {
    return m_dmr_form_value_id;
}
void OAIEff01::setDmrFormValueId(const QString &dmr_form_value_id) {
    m_dmr_form_value_id = dmr_form_value_id;
    m_dmr_form_value_id_isSet = true;
}

bool OAIEff01::is_dmr_form_value_id_Set() const{
    return m_dmr_form_value_id_isSet;
}

bool OAIEff01::is_dmr_form_value_id_Valid() const{
    return m_dmr_form_value_id_isValid;
}

QString OAIEff01::getDmrUnitCode() const {
    return m_dmr_unit_code;
}
void OAIEff01::setDmrUnitCode(const QString &dmr_unit_code) {
    m_dmr_unit_code = dmr_unit_code;
    m_dmr_unit_code_isSet = true;
}

bool OAIEff01::is_dmr_unit_code_Set() const{
    return m_dmr_unit_code_isSet;
}

bool OAIEff01::is_dmr_unit_code_Valid() const{
    return m_dmr_unit_code_isValid;
}

QString OAIEff01::getDmrUnitDesc() const {
    return m_dmr_unit_desc;
}
void OAIEff01::setDmrUnitDesc(const QString &dmr_unit_desc) {
    m_dmr_unit_desc = dmr_unit_desc;
    m_dmr_unit_desc_isSet = true;
}

bool OAIEff01::is_dmr_unit_desc_Set() const{
    return m_dmr_unit_desc_isSet;
}

bool OAIEff01::is_dmr_unit_desc_Valid() const{
    return m_dmr_unit_desc_isValid;
}

QString OAIEff01::getDmrValueId() const {
    return m_dmr_value_id;
}
void OAIEff01::setDmrValueId(const QString &dmr_value_id) {
    m_dmr_value_id = dmr_value_id;
    m_dmr_value_id_isSet = true;
}

bool OAIEff01::is_dmr_value_id_Set() const{
    return m_dmr_value_id_isSet;
}

bool OAIEff01::is_dmr_value_id_Valid() const{
    return m_dmr_value_id_isValid;
}

QString OAIEff01::getDmrValueNmbr() const {
    return m_dmr_value_nmbr;
}
void OAIEff01::setDmrValueNmbr(const QString &dmr_value_nmbr) {
    m_dmr_value_nmbr = dmr_value_nmbr;
    m_dmr_value_nmbr_isSet = true;
}

bool OAIEff01::is_dmr_value_nmbr_Set() const{
    return m_dmr_value_nmbr_isSet;
}

bool OAIEff01::is_dmr_value_nmbr_Valid() const{
    return m_dmr_value_nmbr_isValid;
}

QString OAIEff01::getDmrValueQualifierCode() const {
    return m_dmr_value_qualifier_code;
}
void OAIEff01::setDmrValueQualifierCode(const QString &dmr_value_qualifier_code) {
    m_dmr_value_qualifier_code = dmr_value_qualifier_code;
    m_dmr_value_qualifier_code_isSet = true;
}

bool OAIEff01::is_dmr_value_qualifier_code_Set() const{
    return m_dmr_value_qualifier_code_isSet;
}

bool OAIEff01::is_dmr_value_qualifier_code_Valid() const{
    return m_dmr_value_qualifier_code_isValid;
}

QString OAIEff01::getDmrValueStdUnits() const {
    return m_dmr_value_std_units;
}
void OAIEff01::setDmrValueStdUnits(const QString &dmr_value_std_units) {
    m_dmr_value_std_units = dmr_value_std_units;
    m_dmr_value_std_units_isSet = true;
}

bool OAIEff01::is_dmr_value_std_units_Set() const{
    return m_dmr_value_std_units_isSet;
}

bool OAIEff01::is_dmr_value_std_units_Valid() const{
    return m_dmr_value_std_units_isValid;
}

QString OAIEff01::getDaysLate() const {
    return m_days_late;
}
void OAIEff01::setDaysLate(const QString &days_late) {
    m_days_late = days_late;
    m_days_late_isSet = true;
}

bool OAIEff01::is_days_late_Set() const{
    return m_days_late_isSet;
}

bool OAIEff01::is_days_late_Valid() const{
    return m_days_late_isValid;
}

QString OAIEff01::getExceedencePct() const {
    return m_exceedence_pct;
}
void OAIEff01::setExceedencePct(const QString &exceedence_pct) {
    m_exceedence_pct = exceedence_pct;
    m_exceedence_pct_isSet = true;
}

bool OAIEff01::is_exceedence_pct_Set() const{
    return m_exceedence_pct_isSet;
}

bool OAIEff01::is_exceedence_pct_Valid() const{
    return m_exceedence_pct_isValid;
}

QString OAIEff01::getLimitBeginDate() const {
    return m_limit_begin_date;
}
void OAIEff01::setLimitBeginDate(const QString &limit_begin_date) {
    m_limit_begin_date = limit_begin_date;
    m_limit_begin_date_isSet = true;
}

bool OAIEff01::is_limit_begin_date_Set() const{
    return m_limit_begin_date_isSet;
}

bool OAIEff01::is_limit_begin_date_Valid() const{
    return m_limit_begin_date_isValid;
}

QString OAIEff01::getLimitEndDate() const {
    return m_limit_end_date;
}
void OAIEff01::setLimitEndDate(const QString &limit_end_date) {
    m_limit_end_date = limit_end_date;
    m_limit_end_date_isSet = true;
}

bool OAIEff01::is_limit_end_date_Set() const{
    return m_limit_end_date_isSet;
}

bool OAIEff01::is_limit_end_date_Valid() const{
    return m_limit_end_date_isValid;
}

QString OAIEff01::getLimitId() const {
    return m_limit_id;
}
void OAIEff01::setLimitId(const QString &limit_id) {
    m_limit_id = limit_id;
    m_limit_id_isSet = true;
}

bool OAIEff01::is_limit_id_Set() const{
    return m_limit_id_isSet;
}

bool OAIEff01::is_limit_id_Valid() const{
    return m_limit_id_isValid;
}

QString OAIEff01::getLimitSetId() const {
    return m_limit_set_id;
}
void OAIEff01::setLimitSetId(const QString &limit_set_id) {
    m_limit_set_id = limit_set_id;
    m_limit_set_id_isSet = true;
}

bool OAIEff01::is_limit_set_id_Set() const{
    return m_limit_set_id_isSet;
}

bool OAIEff01::is_limit_set_id_Valid() const{
    return m_limit_set_id_isValid;
}

QString OAIEff01::getLimitSetScheduleId() const {
    return m_limit_set_schedule_id;
}
void OAIEff01::setLimitSetScheduleId(const QString &limit_set_schedule_id) {
    m_limit_set_schedule_id = limit_set_schedule_id;
    m_limit_set_schedule_id_isSet = true;
}

bool OAIEff01::is_limit_set_schedule_id_Set() const{
    return m_limit_set_schedule_id_isSet;
}

bool OAIEff01::is_limit_set_schedule_id_Valid() const{
    return m_limit_set_schedule_id_isValid;
}

QString OAIEff01::getLimitTypeCode() const {
    return m_limit_type_code;
}
void OAIEff01::setLimitTypeCode(const QString &limit_type_code) {
    m_limit_type_code = limit_type_code;
    m_limit_type_code_isSet = true;
}

bool OAIEff01::is_limit_type_code_Set() const{
    return m_limit_type_code_isSet;
}

bool OAIEff01::is_limit_type_code_Valid() const{
    return m_limit_type_code_isValid;
}

QString OAIEff01::getLimitUnitCode() const {
    return m_limit_unit_code;
}
void OAIEff01::setLimitUnitCode(const QString &limit_unit_code) {
    m_limit_unit_code = limit_unit_code;
    m_limit_unit_code_isSet = true;
}

bool OAIEff01::is_limit_unit_code_Set() const{
    return m_limit_unit_code_isSet;
}

bool OAIEff01::is_limit_unit_code_Valid() const{
    return m_limit_unit_code_isValid;
}

QString OAIEff01::getLimitUnitDesc() const {
    return m_limit_unit_desc;
}
void OAIEff01::setLimitUnitDesc(const QString &limit_unit_desc) {
    m_limit_unit_desc = limit_unit_desc;
    m_limit_unit_desc_isSet = true;
}

bool OAIEff01::is_limit_unit_desc_Set() const{
    return m_limit_unit_desc_isSet;
}

bool OAIEff01::is_limit_unit_desc_Valid() const{
    return m_limit_unit_desc_isValid;
}

QString OAIEff01::getLimitValueId() const {
    return m_limit_value_id;
}
void OAIEff01::setLimitValueId(const QString &limit_value_id) {
    m_limit_value_id = limit_value_id;
    m_limit_value_id_isSet = true;
}

bool OAIEff01::is_limit_value_id_Set() const{
    return m_limit_value_id_isSet;
}

bool OAIEff01::is_limit_value_id_Valid() const{
    return m_limit_value_id_isValid;
}

QString OAIEff01::getLimitValueNmbr() const {
    return m_limit_value_nmbr;
}
void OAIEff01::setLimitValueNmbr(const QString &limit_value_nmbr) {
    m_limit_value_nmbr = limit_value_nmbr;
    m_limit_value_nmbr_isSet = true;
}

bool OAIEff01::is_limit_value_nmbr_Set() const{
    return m_limit_value_nmbr_isSet;
}

bool OAIEff01::is_limit_value_nmbr_Valid() const{
    return m_limit_value_nmbr_isValid;
}

QString OAIEff01::getLimitValueQualifierCode() const {
    return m_limit_value_qualifier_code;
}
void OAIEff01::setLimitValueQualifierCode(const QString &limit_value_qualifier_code) {
    m_limit_value_qualifier_code = limit_value_qualifier_code;
    m_limit_value_qualifier_code_isSet = true;
}

bool OAIEff01::is_limit_value_qualifier_code_Set() const{
    return m_limit_value_qualifier_code_isSet;
}

bool OAIEff01::is_limit_value_qualifier_code_Valid() const{
    return m_limit_value_qualifier_code_isValid;
}

QString OAIEff01::getLimitValueStdUnits() const {
    return m_limit_value_std_units;
}
void OAIEff01::setLimitValueStdUnits(const QString &limit_value_std_units) {
    m_limit_value_std_units = limit_value_std_units;
    m_limit_value_std_units_isSet = true;
}

bool OAIEff01::is_limit_value_std_units_Set() const{
    return m_limit_value_std_units_isSet;
}

bool OAIEff01::is_limit_value_std_units_Valid() const{
    return m_limit_value_std_units_isValid;
}

QString OAIEff01::getLimitValueTypeCode() const {
    return m_limit_value_type_code;
}
void OAIEff01::setLimitValueTypeCode(const QString &limit_value_type_code) {
    m_limit_value_type_code = limit_value_type_code;
    m_limit_value_type_code_isSet = true;
}

bool OAIEff01::is_limit_value_type_code_Set() const{
    return m_limit_value_type_code_isSet;
}

bool OAIEff01::is_limit_value_type_code_Valid() const{
    return m_limit_value_type_code_isValid;
}

QString OAIEff01::getLimitValueTypeDesc() const {
    return m_limit_value_type_desc;
}
void OAIEff01::setLimitValueTypeDesc(const QString &limit_value_type_desc) {
    m_limit_value_type_desc = limit_value_type_desc;
    m_limit_value_type_desc_isSet = true;
}

bool OAIEff01::is_limit_value_type_desc_Set() const{
    return m_limit_value_type_desc_isSet;
}

bool OAIEff01::is_limit_value_type_desc_Valid() const{
    return m_limit_value_type_desc_isValid;
}

QString OAIEff01::getMonitoringPeriodEndDate() const {
    return m_monitoring_period_end_date;
}
void OAIEff01::setMonitoringPeriodEndDate(const QString &monitoring_period_end_date) {
    m_monitoring_period_end_date = monitoring_period_end_date;
    m_monitoring_period_end_date_isSet = true;
}

bool OAIEff01::is_monitoring_period_end_date_Set() const{
    return m_monitoring_period_end_date_isSet;
}

bool OAIEff01::is_monitoring_period_end_date_Valid() const{
    return m_monitoring_period_end_date_isValid;
}

QString OAIEff01::getNodeDesc() const {
    return m_node_desc;
}
void OAIEff01::setNodeDesc(const QString &node_desc) {
    m_node_desc = node_desc;
    m_node_desc_isSet = true;
}

bool OAIEff01::is_node_desc_Set() const{
    return m_node_desc_isSet;
}

bool OAIEff01::is_node_desc_Valid() const{
    return m_node_desc_isValid;
}

QString OAIEff01::getNodiCode() const {
    return m_nodi_code;
}
void OAIEff01::setNodiCode(const QString &nodi_code) {
    m_nodi_code = nodi_code;
    m_nodi_code_isSet = true;
}

bool OAIEff01::is_nodi_code_Set() const{
    return m_nodi_code_isSet;
}

bool OAIEff01::is_nodi_code_Valid() const{
    return m_nodi_code_isValid;
}

QList<OAIEff02> OAIEff01::getNpdesViolations() const {
    return m_npdes_violations;
}
void OAIEff01::setNpdesViolations(const QList<OAIEff02> &npdes_violations) {
    m_npdes_violations = npdes_violations;
    m_npdes_violations_isSet = true;
}

bool OAIEff01::is_npdes_violations_Set() const{
    return m_npdes_violations_isSet;
}

bool OAIEff01::is_npdes_violations_Valid() const{
    return m_npdes_violations_isValid;
}

QString OAIEff01::getNmbrOfSubmission() const {
    return m_nmbr_of_submission;
}
void OAIEff01::setNmbrOfSubmission(const QString &nmbr_of_submission) {
    m_nmbr_of_submission = nmbr_of_submission;
    m_nmbr_of_submission_isSet = true;
}

bool OAIEff01::is_nmbr_of_submission_Set() const{
    return m_nmbr_of_submission_isSet;
}

bool OAIEff01::is_nmbr_of_submission_Valid() const{
    return m_nmbr_of_submission_isValid;
}

QString OAIEff01::getPermFeatureId() const {
    return m_perm_feature_id;
}
void OAIEff01::setPermFeatureId(const QString &perm_feature_id) {
    m_perm_feature_id = perm_feature_id;
    m_perm_feature_id_isSet = true;
}

bool OAIEff01::is_perm_feature_id_Set() const{
    return m_perm_feature_id_isSet;
}

bool OAIEff01::is_perm_feature_id_Valid() const{
    return m_perm_feature_id_isValid;
}

QString OAIEff01::getStatisticalBaseCode() const {
    return m_statistical_base_code;
}
void OAIEff01::setStatisticalBaseCode(const QString &statistical_base_code) {
    m_statistical_base_code = statistical_base_code;
    m_statistical_base_code_isSet = true;
}

bool OAIEff01::is_statistical_base_code_Set() const{
    return m_statistical_base_code_isSet;
}

bool OAIEff01::is_statistical_base_code_Valid() const{
    return m_statistical_base_code_isValid;
}

QString OAIEff01::getStatisticalBaseDesc() const {
    return m_statistical_base_desc;
}
void OAIEff01::setStatisticalBaseDesc(const QString &statistical_base_desc) {
    m_statistical_base_desc = statistical_base_desc;
    m_statistical_base_desc_isSet = true;
}

bool OAIEff01::is_statistical_base_desc_Set() const{
    return m_statistical_base_desc_isSet;
}

bool OAIEff01::is_statistical_base_desc_Valid() const{
    return m_statistical_base_desc_isValid;
}

QString OAIEff01::getStatisticalBaseTypeCode() const {
    return m_statistical_base_type_code;
}
void OAIEff01::setStatisticalBaseTypeCode(const QString &statistical_base_type_code) {
    m_statistical_base_type_code = statistical_base_type_code;
    m_statistical_base_type_code_isSet = true;
}

bool OAIEff01::is_statistical_base_type_code_Set() const{
    return m_statistical_base_type_code_isSet;
}

bool OAIEff01::is_statistical_base_type_code_Valid() const{
    return m_statistical_base_type_code_isValid;
}

QString OAIEff01::getStatisticalBaseTypeDesc() const {
    return m_statistical_base_type_desc;
}
void OAIEff01::setStatisticalBaseTypeDesc(const QString &statistical_base_type_desc) {
    m_statistical_base_type_desc = statistical_base_type_desc;
    m_statistical_base_type_desc_isSet = true;
}

bool OAIEff01::is_statistical_base_type_desc_Set() const{
    return m_statistical_base_type_desc_isSet;
}

bool OAIEff01::is_statistical_base_type_desc_Valid() const{
    return m_statistical_base_type_desc_isValid;
}

QString OAIEff01::getStayValueNmbr() const {
    return m_stay_value_nmbr;
}
void OAIEff01::setStayValueNmbr(const QString &stay_value_nmbr) {
    m_stay_value_nmbr = stay_value_nmbr;
    m_stay_value_nmbr_isSet = true;
}

bool OAIEff01::is_stay_value_nmbr_Set() const{
    return m_stay_value_nmbr_isSet;
}

bool OAIEff01::is_stay_value_nmbr_Valid() const{
    return m_stay_value_nmbr_isValid;
}

QString OAIEff01::getStdUnitCode() const {
    return m_std_unit_code;
}
void OAIEff01::setStdUnitCode(const QString &std_unit_code) {
    m_std_unit_code = std_unit_code;
    m_std_unit_code_isSet = true;
}

bool OAIEff01::is_std_unit_code_Set() const{
    return m_std_unit_code_isSet;
}

bool OAIEff01::is_std_unit_code_Valid() const{
    return m_std_unit_code_isValid;
}

QString OAIEff01::getStdUnitDesc() const {
    return m_std_unit_desc;
}
void OAIEff01::setStdUnitDesc(const QString &std_unit_desc) {
    m_std_unit_desc = std_unit_desc;
    m_std_unit_desc_isSet = true;
}

bool OAIEff01::is_std_unit_desc_Set() const{
    return m_std_unit_desc_isSet;
}

bool OAIEff01::is_std_unit_desc_Valid() const{
    return m_std_unit_desc_isValid;
}

QString OAIEff01::getValueReceivedDate() const {
    return m_value_received_date;
}
void OAIEff01::setValueReceivedDate(const QString &value_received_date) {
    m_value_received_date = value_received_date;
    m_value_received_date_isSet = true;
}

bool OAIEff01::is_value_received_date_Set() const{
    return m_value_received_date_isSet;
}

bool OAIEff01::is_value_received_date_Valid() const{
    return m_value_received_date_isValid;
}

QString OAIEff01::getValueTypeCode() const {
    return m_value_type_code;
}
void OAIEff01::setValueTypeCode(const QString &value_type_code) {
    m_value_type_code = value_type_code;
    m_value_type_code_isSet = true;
}

bool OAIEff01::is_value_type_code_Set() const{
    return m_value_type_code_isSet;
}

bool OAIEff01::is_value_type_code_Valid() const{
    return m_value_type_code_isValid;
}

QString OAIEff01::getValueTypeDesc() const {
    return m_value_type_desc;
}
void OAIEff01::setValueTypeDesc(const QString &value_type_desc) {
    m_value_type_desc = value_type_desc;
    m_value_type_desc_isSet = true;
}

bool OAIEff01::is_value_type_desc_Set() const{
    return m_value_type_desc_isSet;
}

bool OAIEff01::is_value_type_desc_Valid() const{
    return m_value_type_desc_isValid;
}

QString OAIEff01::getVersionNmbr() const {
    return m_version_nmbr;
}
void OAIEff01::setVersionNmbr(const QString &version_nmbr) {
    m_version_nmbr = version_nmbr;
    m_version_nmbr_isSet = true;
}

bool OAIEff01::is_version_nmbr_Set() const{
    return m_version_nmbr_isSet;
}

bool OAIEff01::is_version_nmbr_Valid() const{
    return m_version_nmbr_isValid;
}

bool OAIEff01::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dmr_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_form_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_unit_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_value_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_value_qualifier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_value_std_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_late_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceedence_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_set_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_unit_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_qualifier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_std_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_value_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodi_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdes_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nmbr_of_submission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_feature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_base_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_base_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_base_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_base_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stay_value_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_unit_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEff01::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dmr_event_id_isValid && m_dmr_form_value_id_isValid && m_dmr_unit_code_isValid && m_dmr_unit_desc_isValid && m_dmr_value_id_isValid && m_dmr_value_nmbr_isValid && m_dmr_value_qualifier_code_isValid && m_dmr_value_std_units_isValid && m_days_late_isValid && m_exceedence_pct_isValid && m_limit_begin_date_isValid && m_limit_end_date_isValid && m_limit_id_isValid && m_limit_set_id_isValid && m_limit_set_schedule_id_isValid && m_limit_type_code_isValid && m_limit_unit_code_isValid && m_limit_unit_desc_isValid && m_limit_value_id_isValid && m_limit_value_nmbr_isValid && m_limit_value_qualifier_code_isValid && m_limit_value_std_units_isValid && m_limit_value_type_code_isValid && m_limit_value_type_desc_isValid && m_monitoring_period_end_date_isValid && m_node_desc_isValid && m_nodi_code_isValid && m_nmbr_of_submission_isValid && m_perm_feature_id_isValid && m_statistical_base_code_isValid && m_statistical_base_desc_isValid && m_statistical_base_type_code_isValid && m_statistical_base_type_desc_isValid && m_stay_value_nmbr_isValid && m_std_unit_code_isValid && m_std_unit_desc_isValid && m_value_received_date_isValid && m_value_type_code_isValid && m_value_type_desc_isValid && m_version_nmbr_isValid && true;
}

} // namespace OpenAPI
