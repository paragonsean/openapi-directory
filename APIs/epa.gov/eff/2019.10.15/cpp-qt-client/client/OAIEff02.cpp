/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEff02.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEff02::OAIEff02(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEff02::OAIEff02() {
    this->initializeModel();
}

OAIEff02::~OAIEff02() {}

void OAIEff02::initializeModel() {

    m_npdes_violation_id_isSet = false;
    m_npdes_violation_id_isValid = false;

    m_rnc_detection_code_isSet = false;
    m_rnc_detection_code_isValid = false;

    m_rnc_detection_date_isSet = false;
    m_rnc_detection_date_isValid = false;

    m_rnc_detection_desc_isSet = false;
    m_rnc_detection_desc_isValid = false;

    m_rnc_resolution_code_isSet = false;
    m_rnc_resolution_code_isValid = false;

    m_rnc_resolution_date_isSet = false;
    m_rnc_resolution_date_isValid = false;

    m_rnc_resolution_desc_isSet = false;
    m_rnc_resolution_desc_isValid = false;

    m_violation_code_isSet = false;
    m_violation_code_isValid = false;

    m_violation_desc_isSet = false;
    m_violation_desc_isValid = false;

    m_violation_severity_isSet = false;
    m_violation_severity_isValid = false;

    m_violation_severity_desc_isSet = false;
    m_violation_severity_desc_isValid = false;
}

void OAIEff02::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEff02::fromJsonObject(QJsonObject json) {

    m_npdes_violation_id_isValid = ::OpenAPI::fromJsonValue(m_npdes_violation_id, json[QString("NPDESViolationId")]);
    m_npdes_violation_id_isSet = !json[QString("NPDESViolationId")].isNull() && m_npdes_violation_id_isValid;

    m_rnc_detection_code_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_code, json[QString("RNCDetectionCode")]);
    m_rnc_detection_code_isSet = !json[QString("RNCDetectionCode")].isNull() && m_rnc_detection_code_isValid;

    m_rnc_detection_date_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_date, json[QString("RNCDetectionDate")]);
    m_rnc_detection_date_isSet = !json[QString("RNCDetectionDate")].isNull() && m_rnc_detection_date_isValid;

    m_rnc_detection_desc_isValid = ::OpenAPI::fromJsonValue(m_rnc_detection_desc, json[QString("RNCDetectionDesc")]);
    m_rnc_detection_desc_isSet = !json[QString("RNCDetectionDesc")].isNull() && m_rnc_detection_desc_isValid;

    m_rnc_resolution_code_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_code, json[QString("RNCResolutionCode")]);
    m_rnc_resolution_code_isSet = !json[QString("RNCResolutionCode")].isNull() && m_rnc_resolution_code_isValid;

    m_rnc_resolution_date_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_date, json[QString("RNCResolutionDate")]);
    m_rnc_resolution_date_isSet = !json[QString("RNCResolutionDate")].isNull() && m_rnc_resolution_date_isValid;

    m_rnc_resolution_desc_isValid = ::OpenAPI::fromJsonValue(m_rnc_resolution_desc, json[QString("RNCResolutionDesc")]);
    m_rnc_resolution_desc_isSet = !json[QString("RNCResolutionDesc")].isNull() && m_rnc_resolution_desc_isValid;

    m_violation_code_isValid = ::OpenAPI::fromJsonValue(m_violation_code, json[QString("ViolationCode")]);
    m_violation_code_isSet = !json[QString("ViolationCode")].isNull() && m_violation_code_isValid;

    m_violation_desc_isValid = ::OpenAPI::fromJsonValue(m_violation_desc, json[QString("ViolationDesc")]);
    m_violation_desc_isSet = !json[QString("ViolationDesc")].isNull() && m_violation_desc_isValid;

    m_violation_severity_isValid = ::OpenAPI::fromJsonValue(m_violation_severity, json[QString("ViolationSeverity")]);
    m_violation_severity_isSet = !json[QString("ViolationSeverity")].isNull() && m_violation_severity_isValid;

    m_violation_severity_desc_isValid = ::OpenAPI::fromJsonValue(m_violation_severity_desc, json[QString("ViolationSeverityDesc")]);
    m_violation_severity_desc_isSet = !json[QString("ViolationSeverityDesc")].isNull() && m_violation_severity_desc_isValid;
}

QString OAIEff02::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEff02::asJsonObject() const {
    QJsonObject obj;
    if (m_npdes_violation_id_isSet) {
        obj.insert(QString("NPDESViolationId"), ::OpenAPI::toJsonValue(m_npdes_violation_id));
    }
    if (m_rnc_detection_code_isSet) {
        obj.insert(QString("RNCDetectionCode"), ::OpenAPI::toJsonValue(m_rnc_detection_code));
    }
    if (m_rnc_detection_date_isSet) {
        obj.insert(QString("RNCDetectionDate"), ::OpenAPI::toJsonValue(m_rnc_detection_date));
    }
    if (m_rnc_detection_desc_isSet) {
        obj.insert(QString("RNCDetectionDesc"), ::OpenAPI::toJsonValue(m_rnc_detection_desc));
    }
    if (m_rnc_resolution_code_isSet) {
        obj.insert(QString("RNCResolutionCode"), ::OpenAPI::toJsonValue(m_rnc_resolution_code));
    }
    if (m_rnc_resolution_date_isSet) {
        obj.insert(QString("RNCResolutionDate"), ::OpenAPI::toJsonValue(m_rnc_resolution_date));
    }
    if (m_rnc_resolution_desc_isSet) {
        obj.insert(QString("RNCResolutionDesc"), ::OpenAPI::toJsonValue(m_rnc_resolution_desc));
    }
    if (m_violation_code_isSet) {
        obj.insert(QString("ViolationCode"), ::OpenAPI::toJsonValue(m_violation_code));
    }
    if (m_violation_desc_isSet) {
        obj.insert(QString("ViolationDesc"), ::OpenAPI::toJsonValue(m_violation_desc));
    }
    if (m_violation_severity_isSet) {
        obj.insert(QString("ViolationSeverity"), ::OpenAPI::toJsonValue(m_violation_severity));
    }
    if (m_violation_severity_desc_isSet) {
        obj.insert(QString("ViolationSeverityDesc"), ::OpenAPI::toJsonValue(m_violation_severity_desc));
    }
    return obj;
}

QString OAIEff02::getNpdesViolationId() const {
    return m_npdes_violation_id;
}
void OAIEff02::setNpdesViolationId(const QString &npdes_violation_id) {
    m_npdes_violation_id = npdes_violation_id;
    m_npdes_violation_id_isSet = true;
}

bool OAIEff02::is_npdes_violation_id_Set() const{
    return m_npdes_violation_id_isSet;
}

bool OAIEff02::is_npdes_violation_id_Valid() const{
    return m_npdes_violation_id_isValid;
}

QString OAIEff02::getRncDetectionCode() const {
    return m_rnc_detection_code;
}
void OAIEff02::setRncDetectionCode(const QString &rnc_detection_code) {
    m_rnc_detection_code = rnc_detection_code;
    m_rnc_detection_code_isSet = true;
}

bool OAIEff02::is_rnc_detection_code_Set() const{
    return m_rnc_detection_code_isSet;
}

bool OAIEff02::is_rnc_detection_code_Valid() const{
    return m_rnc_detection_code_isValid;
}

QString OAIEff02::getRncDetectionDate() const {
    return m_rnc_detection_date;
}
void OAIEff02::setRncDetectionDate(const QString &rnc_detection_date) {
    m_rnc_detection_date = rnc_detection_date;
    m_rnc_detection_date_isSet = true;
}

bool OAIEff02::is_rnc_detection_date_Set() const{
    return m_rnc_detection_date_isSet;
}

bool OAIEff02::is_rnc_detection_date_Valid() const{
    return m_rnc_detection_date_isValid;
}

QString OAIEff02::getRncDetectionDesc() const {
    return m_rnc_detection_desc;
}
void OAIEff02::setRncDetectionDesc(const QString &rnc_detection_desc) {
    m_rnc_detection_desc = rnc_detection_desc;
    m_rnc_detection_desc_isSet = true;
}

bool OAIEff02::is_rnc_detection_desc_Set() const{
    return m_rnc_detection_desc_isSet;
}

bool OAIEff02::is_rnc_detection_desc_Valid() const{
    return m_rnc_detection_desc_isValid;
}

QString OAIEff02::getRncResolutionCode() const {
    return m_rnc_resolution_code;
}
void OAIEff02::setRncResolutionCode(const QString &rnc_resolution_code) {
    m_rnc_resolution_code = rnc_resolution_code;
    m_rnc_resolution_code_isSet = true;
}

bool OAIEff02::is_rnc_resolution_code_Set() const{
    return m_rnc_resolution_code_isSet;
}

bool OAIEff02::is_rnc_resolution_code_Valid() const{
    return m_rnc_resolution_code_isValid;
}

QString OAIEff02::getRncResolutionDate() const {
    return m_rnc_resolution_date;
}
void OAIEff02::setRncResolutionDate(const QString &rnc_resolution_date) {
    m_rnc_resolution_date = rnc_resolution_date;
    m_rnc_resolution_date_isSet = true;
}

bool OAIEff02::is_rnc_resolution_date_Set() const{
    return m_rnc_resolution_date_isSet;
}

bool OAIEff02::is_rnc_resolution_date_Valid() const{
    return m_rnc_resolution_date_isValid;
}

QString OAIEff02::getRncResolutionDesc() const {
    return m_rnc_resolution_desc;
}
void OAIEff02::setRncResolutionDesc(const QString &rnc_resolution_desc) {
    m_rnc_resolution_desc = rnc_resolution_desc;
    m_rnc_resolution_desc_isSet = true;
}

bool OAIEff02::is_rnc_resolution_desc_Set() const{
    return m_rnc_resolution_desc_isSet;
}

bool OAIEff02::is_rnc_resolution_desc_Valid() const{
    return m_rnc_resolution_desc_isValid;
}

QString OAIEff02::getViolationCode() const {
    return m_violation_code;
}
void OAIEff02::setViolationCode(const QString &violation_code) {
    m_violation_code = violation_code;
    m_violation_code_isSet = true;
}

bool OAIEff02::is_violation_code_Set() const{
    return m_violation_code_isSet;
}

bool OAIEff02::is_violation_code_Valid() const{
    return m_violation_code_isValid;
}

QString OAIEff02::getViolationDesc() const {
    return m_violation_desc;
}
void OAIEff02::setViolationDesc(const QString &violation_desc) {
    m_violation_desc = violation_desc;
    m_violation_desc_isSet = true;
}

bool OAIEff02::is_violation_desc_Set() const{
    return m_violation_desc_isSet;
}

bool OAIEff02::is_violation_desc_Valid() const{
    return m_violation_desc_isValid;
}

QString OAIEff02::getViolationSeverity() const {
    return m_violation_severity;
}
void OAIEff02::setViolationSeverity(const QString &violation_severity) {
    m_violation_severity = violation_severity;
    m_violation_severity_isSet = true;
}

bool OAIEff02::is_violation_severity_Set() const{
    return m_violation_severity_isSet;
}

bool OAIEff02::is_violation_severity_Valid() const{
    return m_violation_severity_isValid;
}

QString OAIEff02::getViolationSeverityDesc() const {
    return m_violation_severity_desc;
}
void OAIEff02::setViolationSeverityDesc(const QString &violation_severity_desc) {
    m_violation_severity_desc = violation_severity_desc;
    m_violation_severity_desc_isSet = true;
}

bool OAIEff02::is_violation_severity_desc_Set() const{
    return m_violation_severity_desc_isSet;
}

bool OAIEff02::is_violation_severity_desc_Valid() const{
    return m_violation_severity_desc_isValid;
}

bool OAIEff02::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_npdes_violation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_detection_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rnc_resolution_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_severity_desc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEff02::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
