/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Effluent Charting and Reporting
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.   ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    EFF Rest Services provides the data for ECHO's Effluent Charts, a set of dynamic charts and tables of permitted effluent limits, releases, and violations over time for Clean Water Act (CWA) wastewater discharge permits issued under the National Pollutant Discharge Elimination System (NPDES).    See Effluent Charts Help (https://echo.epa.gov/help/reports/effluent-charts-help) for additional information. \\ The are 3 service end points for Effluent Charts:  get_summary_chart, get_effluent_chart, and download_effluent_chart. \\  <b>1)</b>  Use get_summary_chart to retrieve a summary matrix of effluent parameters by effluent outfall and an overall violation status for a provided NPDES Permit and date range.  <b>2)</b>  Use get_effluent_chart to retrieve detailed Discharge Limit, DMR and NPDES Violation information for a provided NPDES Permit, date range, effluent parameter, or outfall.  <b>3)</b>  Use download_effluent_chart to generate a Comma Separated Value (CSV) file of the detailed data provided with get_effluent chart, for a provided NPDES Permit, date range, effluent parameter, or outfall. \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEff04.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEff04::OAIEff04(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEff04::OAIEff04() {
    this->initializeModel();
}

OAIEff04::~OAIEff04() {}

void OAIEff04::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_perm_feature_nmbr_isSet = false;
    m_perm_feature_nmbr_isValid = false;

    m_perm_feature_type_code_isSet = false;
    m_perm_feature_type_code_isValid = false;

    m_perm_feature_type_desc_isSet = false;
    m_perm_feature_type_desc_isValid = false;
}

void OAIEff04::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEff04::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_perm_feature_nmbr_isValid = ::OpenAPI::fromJsonValue(m_perm_feature_nmbr, json[QString("PermFeatureNmbr")]);
    m_perm_feature_nmbr_isSet = !json[QString("PermFeatureNmbr")].isNull() && m_perm_feature_nmbr_isValid;

    m_perm_feature_type_code_isValid = ::OpenAPI::fromJsonValue(m_perm_feature_type_code, json[QString("PermFeatureTypeCode")]);
    m_perm_feature_type_code_isSet = !json[QString("PermFeatureTypeCode")].isNull() && m_perm_feature_type_code_isValid;

    m_perm_feature_type_desc_isValid = ::OpenAPI::fromJsonValue(m_perm_feature_type_desc, json[QString("PermFeatureTypeDesc")]);
    m_perm_feature_type_desc_isSet = !json[QString("PermFeatureTypeDesc")].isNull() && m_perm_feature_type_desc_isValid;
}

QString OAIEff04::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEff04::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_perm_feature_nmbr_isSet) {
        obj.insert(QString("PermFeatureNmbr"), ::OpenAPI::toJsonValue(m_perm_feature_nmbr));
    }
    if (m_perm_feature_type_code_isSet) {
        obj.insert(QString("PermFeatureTypeCode"), ::OpenAPI::toJsonValue(m_perm_feature_type_code));
    }
    if (m_perm_feature_type_desc_isSet) {
        obj.insert(QString("PermFeatureTypeDesc"), ::OpenAPI::toJsonValue(m_perm_feature_type_desc));
    }
    return obj;
}

QList<OAIEff03> OAIEff04::getParameters() const {
    return m_parameters;
}
void OAIEff04::setParameters(const QList<OAIEff03> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIEff04::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIEff04::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIEff04::getPermFeatureNmbr() const {
    return m_perm_feature_nmbr;
}
void OAIEff04::setPermFeatureNmbr(const QString &perm_feature_nmbr) {
    m_perm_feature_nmbr = perm_feature_nmbr;
    m_perm_feature_nmbr_isSet = true;
}

bool OAIEff04::is_perm_feature_nmbr_Set() const{
    return m_perm_feature_nmbr_isSet;
}

bool OAIEff04::is_perm_feature_nmbr_Valid() const{
    return m_perm_feature_nmbr_isValid;
}

QString OAIEff04::getPermFeatureTypeCode() const {
    return m_perm_feature_type_code;
}
void OAIEff04::setPermFeatureTypeCode(const QString &perm_feature_type_code) {
    m_perm_feature_type_code = perm_feature_type_code;
    m_perm_feature_type_code_isSet = true;
}

bool OAIEff04::is_perm_feature_type_code_Set() const{
    return m_perm_feature_type_code_isSet;
}

bool OAIEff04::is_perm_feature_type_code_Valid() const{
    return m_perm_feature_type_code_isValid;
}

QString OAIEff04::getPermFeatureTypeDesc() const {
    return m_perm_feature_type_desc;
}
void OAIEff04::setPermFeatureTypeDesc(const QString &perm_feature_type_desc) {
    m_perm_feature_type_desc = perm_feature_type_desc;
    m_perm_feature_type_desc_isSet = true;
}

bool OAIEff04::is_perm_feature_type_desc_Set() const{
    return m_perm_feature_type_desc_isSet;
}

bool OAIEff04::is_perm_feature_type_desc_Valid() const{
    return m_perm_feature_type_desc_isValid;
}

bool OAIEff04::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_feature_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_feature_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_feature_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEff04::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameters_isValid && m_perm_feature_nmbr_isValid && m_perm_feature_type_code_isValid && m_perm_feature_type_desc_isValid && true;
}

} // namespace OpenAPI
