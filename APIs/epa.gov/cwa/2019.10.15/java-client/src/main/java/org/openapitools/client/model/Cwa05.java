/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cluster Data Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:43.792236-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cwa05 {
  public static final String SERIALIZED_NAME_BIO_C_V_ROWS = "BioCVRows";
  @SerializedName(SERIALIZED_NAME_BIO_C_V_ROWS)
  private String bioCVRows;

  public static final String SERIALIZED_NAME_BIO_V3_ROWS = "BioV3Rows";
  @SerializedName(SERIALIZED_NAME_BIO_V3_ROWS)
  private String bioV3Rows;

  public static final String SERIALIZED_NAME_CV_ROWS = "CVRows";
  @SerializedName(SERIALIZED_NAME_CV_ROWS)
  private String cvRows;

  public static final String SERIALIZED_NAME_CLUSTER_COUNT = "ClusterCount";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COUNT)
  private String clusterCount;

  public static final String SERIALIZED_NAME_CLUSTER_ICON = "ClusterIcon";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ICON)
  private String clusterIcon;

  public static final String SERIALIZED_NAME_CLUSTER_LATITUDE = "ClusterLatitude";
  @SerializedName(SERIALIZED_NAME_CLUSTER_LATITUDE)
  private String clusterLatitude;

  public static final String SERIALIZED_NAME_CLUSTER_LONGITUDE = "ClusterLongitude";
  @SerializedName(SERIALIZED_NAME_CLUSTER_LONGITUDE)
  private String clusterLongitude;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "ClusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "ClusterType";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private String clusterType;

  public static final String SERIALIZED_NAME_CLUSTER_VALUE = "ClusterValue";
  @SerializedName(SERIALIZED_NAME_CLUSTER_VALUE)
  private String clusterValue;

  public static final String SERIALIZED_NAME_EP_A_REGION_CODE = "EPARegionCode";
  @SerializedName(SERIALIZED_NAME_EP_A_REGION_CODE)
  private String epARegionCode;

  public static final String SERIALIZED_NAME_FE_A_ROWS = "FEARows";
  @SerializedName(SERIALIZED_NAME_FE_A_ROWS)
  private String feARows;

  public static final String SERIALIZED_NAME_IN_S_P_ROWS = "INSPRows";
  @SerializedName(SERIALIZED_NAME_IN_S_P_ROWS)
  private String inSPRows;

  public static final String SERIALIZED_NAME_INDIAN_COUNTRY_ROWS = "IndianCountryRows";
  @SerializedName(SERIALIZED_NAME_INDIAN_COUNTRY_ROWS)
  private String indianCountryRows;

  public static final String SERIALIZED_NAME_INF_F_E_A_ROWS = "InfFEARows";
  @SerializedName(SERIALIZED_NAME_INF_F_E_A_ROWS)
  private String infFEARows;

  public static final String SERIALIZED_NAME_OBJECT_ID = "ObjectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_SV_ROWS = "SVRows";
  @SerializedName(SERIALIZED_NAME_SV_ROWS)
  private String svRows;

  public static final String SERIALIZED_NAME_TOTAL_PENALTIES = "TotalPenalties";
  @SerializedName(SERIALIZED_NAME_TOTAL_PENALTIES)
  private String totalPenalties;

  public static final String SERIALIZED_NAME_V3_ROWS = "V3Rows";
  @SerializedName(SERIALIZED_NAME_V3_ROWS)
  private String v3Rows;

  public static final String SERIALIZED_NAME_VIO_LAST4_Q_ROWS = "VioLast4QRows";
  @SerializedName(SERIALIZED_NAME_VIO_LAST4_Q_ROWS)
  private String vioLast4QRows;

  public Cwa05() {
  }

  public Cwa05 bioCVRows(String bioCVRows) {
    this.bioCVRows = bioCVRows;
    return this;
  }

  /**
   * Number of facilities with current biosolid-related violations.
   * @return bioCVRows
   */
  @javax.annotation.Nonnull
  public String getBioCVRows() {
    return bioCVRows;
  }

  public void setBioCVRows(String bioCVRows) {
    this.bioCVRows = bioCVRows;
  }


  public Cwa05 bioV3Rows(String bioV3Rows) {
    this.bioV3Rows = bioV3Rows;
    return this;
  }

  /**
   * Number of facilities having one or more quarters of biosolid-related non-compliance in the last three years.
   * @return bioV3Rows
   */
  @javax.annotation.Nonnull
  public String getBioV3Rows() {
    return bioV3Rows;
  }

  public void setBioV3Rows(String bioV3Rows) {
    this.bioV3Rows = bioV3Rows;
  }


  public Cwa05 cvRows(String cvRows) {
    this.cvRows = cvRows;
    return this;
  }

  /**
   * Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
   * @return cvRows
   */
  @javax.annotation.Nonnull
  public String getCvRows() {
    return cvRows;
  }

  public void setCvRows(String cvRows) {
    this.cvRows = cvRows;
  }


  public Cwa05 clusterCount(String clusterCount) {
    this.clusterCount = clusterCount;
    return this;
  }

  /**
   * The number of facilities or cases in the cluster.
   * @return clusterCount
   */
  @javax.annotation.Nonnull
  public String getClusterCount() {
    return clusterCount;
  }

  public void setClusterCount(String clusterCount) {
    this.clusterCount = clusterCount;
  }


  public Cwa05 clusterIcon(String clusterIcon) {
    this.clusterIcon = clusterIcon;
    return this;
  }

  /**
   * The icon file used to reprsent the cluster.
   * @return clusterIcon
   */
  @javax.annotation.Nonnull
  public String getClusterIcon() {
    return clusterIcon;
  }

  public void setClusterIcon(String clusterIcon) {
    this.clusterIcon = clusterIcon;
  }


  public Cwa05 clusterLatitude(String clusterLatitude) {
    this.clusterLatitude = clusterLatitude;
    return this;
  }

  /**
   * The latitude in decimal degrees expressed using the NAD83 horizontal datum.
   * @return clusterLatitude
   */
  @javax.annotation.Nonnull
  public String getClusterLatitude() {
    return clusterLatitude;
  }

  public void setClusterLatitude(String clusterLatitude) {
    this.clusterLatitude = clusterLatitude;
  }


  public Cwa05 clusterLongitude(String clusterLongitude) {
    this.clusterLongitude = clusterLongitude;
    return this;
  }

  /**
   * The longitude in decimal degrees expressed using the NAD83 horizontal datum.
   * @return clusterLongitude
   */
  @javax.annotation.Nonnull
  public String getClusterLongitude() {
    return clusterLongitude;
  }

  public void setClusterLongitude(String clusterLongitude) {
    this.clusterLongitude = clusterLongitude;
  }


  public Cwa05 clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314
   * @return clusterName
   */
  @javax.annotation.Nonnull
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public Cwa05 clusterType(String clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  /**
   * The representative geographic area used for clustering.  Examples:  State, County, Zip Code
   * @return clusterType
   */
  @javax.annotation.Nonnull
  public String getClusterType() {
    return clusterType;
  }

  public void setClusterType(String clusterType) {
    this.clusterType = clusterType;
  }


  public Cwa05 clusterValue(String clusterValue) {
    this.clusterValue = clusterValue;
    return this;
  }

  /**
   * The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011
   * @return clusterValue
   */
  @javax.annotation.Nonnull
  public String getClusterValue() {
    return clusterValue;
  }

  public void setClusterValue(String clusterValue) {
    this.clusterValue = clusterValue;
  }


  public Cwa05 epARegionCode(String epARegionCode) {
    this.epARegionCode = epARegionCode;
    return this;
  }

  /**
   * The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
   * @return epARegionCode
   */
  @javax.annotation.Nonnull
  public String getEpARegionCode() {
    return epARegionCode;
  }

  public void setEpARegionCode(String epARegionCode) {
    this.epARegionCode = epARegionCode;
  }


  public Cwa05 feARows(String feARows) {
    this.feARows = feARows;
    return this;
  }

  /**
   * Summary count of the number of facilities with a formal enforcement action in the past five years
   * @return feARows
   */
  @javax.annotation.Nonnull
  public String getFeARows() {
    return feARows;
  }

  public void setFeARows(String feARows) {
    this.feARows = feARows;
  }


  public Cwa05 inSPRows(String inSPRows) {
    this.inSPRows = inSPRows;
    return this;
  }

  /**
   * Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
   * @return inSPRows
   */
  @javax.annotation.Nonnull
  public String getInSPRows() {
    return inSPRows;
  }

  public void setInSPRows(String inSPRows) {
    this.inSPRows = inSPRows;
  }


  public Cwa05 indianCountryRows(String indianCountryRows) {
    this.indianCountryRows = indianCountryRows;
    return this;
  }

  /**
   * Number of facilities with tribal_flag populated
   * @return indianCountryRows
   */
  @javax.annotation.Nonnull
  public String getIndianCountryRows() {
    return indianCountryRows;
  }

  public void setIndianCountryRows(String indianCountryRows) {
    this.indianCountryRows = indianCountryRows;
  }


  public Cwa05 infFEARows(String infFEARows) {
    this.infFEARows = infFEARows;
    return this;
  }

  /**
   * Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT &gt; 0)
   * @return infFEARows
   */
  @javax.annotation.Nonnull
  public String getInfFEARows() {
    return infFEARows;
  }

  public void setInfFEARows(String infFEARows) {
    this.infFEARows = infFEARows;
  }


  public Cwa05 objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * Sequential number assigned to each facility or cluster returned.
   * @return objectId
   */
  @javax.annotation.Nonnull
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public Cwa05 svRows(String svRows) {
    this.svRows = svRows;
    return this;
  }

  /**
   * Number of facilities with curr_sv_flag populated (CWP_STATUS &#x3D; \&quot;Significant Violation\&quot;)
   * @return svRows
   */
  @javax.annotation.Nonnull
  public String getSvRows() {
    return svRows;
  }

  public void setSvRows(String svRows) {
    this.svRows = svRows;
  }


  public Cwa05 totalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
    return this;
  }

  /**
   * The total dollar amount of either assessed or final penalties within the five year time period
   * @return totalPenalties
   */
  @javax.annotation.Nonnull
  public String getTotalPenalties() {
    return totalPenalties;
  }

  public void setTotalPenalties(String totalPenalties) {
    this.totalPenalties = totalPenalties;
  }


  public Cwa05 v3Rows(String v3Rows) {
    this.v3Rows = v3Rows;
    return this;
  }

  /**
   * Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
   * @return v3Rows
   */
  @javax.annotation.Nonnull
  public String getV3Rows() {
    return v3Rows;
  }

  public void setV3Rows(String v3Rows) {
    this.v3Rows = v3Rows;
  }


  public Cwa05 vioLast4QRows(String vioLast4QRows) {
    this.vioLast4QRows = vioLast4QRows;
    return this;
  }

  /**
   * The number of facilities with a violation in the last year.
   * @return vioLast4QRows
   */
  @javax.annotation.Nonnull
  public String getVioLast4QRows() {
    return vioLast4QRows;
  }

  public void setVioLast4QRows(String vioLast4QRows) {
    this.vioLast4QRows = vioLast4QRows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cwa05 cwa05 = (Cwa05) o;
    return Objects.equals(this.bioCVRows, cwa05.bioCVRows) &&
        Objects.equals(this.bioV3Rows, cwa05.bioV3Rows) &&
        Objects.equals(this.cvRows, cwa05.cvRows) &&
        Objects.equals(this.clusterCount, cwa05.clusterCount) &&
        Objects.equals(this.clusterIcon, cwa05.clusterIcon) &&
        Objects.equals(this.clusterLatitude, cwa05.clusterLatitude) &&
        Objects.equals(this.clusterLongitude, cwa05.clusterLongitude) &&
        Objects.equals(this.clusterName, cwa05.clusterName) &&
        Objects.equals(this.clusterType, cwa05.clusterType) &&
        Objects.equals(this.clusterValue, cwa05.clusterValue) &&
        Objects.equals(this.epARegionCode, cwa05.epARegionCode) &&
        Objects.equals(this.feARows, cwa05.feARows) &&
        Objects.equals(this.inSPRows, cwa05.inSPRows) &&
        Objects.equals(this.indianCountryRows, cwa05.indianCountryRows) &&
        Objects.equals(this.infFEARows, cwa05.infFEARows) &&
        Objects.equals(this.objectId, cwa05.objectId) &&
        Objects.equals(this.svRows, cwa05.svRows) &&
        Objects.equals(this.totalPenalties, cwa05.totalPenalties) &&
        Objects.equals(this.v3Rows, cwa05.v3Rows) &&
        Objects.equals(this.vioLast4QRows, cwa05.vioLast4QRows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bioCVRows, bioV3Rows, cvRows, clusterCount, clusterIcon, clusterLatitude, clusterLongitude, clusterName, clusterType, clusterValue, epARegionCode, feARows, inSPRows, indianCountryRows, infFEARows, objectId, svRows, totalPenalties, v3Rows, vioLast4QRows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cwa05 {\n");
    sb.append("    bioCVRows: ").append(toIndentedString(bioCVRows)).append("\n");
    sb.append("    bioV3Rows: ").append(toIndentedString(bioV3Rows)).append("\n");
    sb.append("    cvRows: ").append(toIndentedString(cvRows)).append("\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    clusterIcon: ").append(toIndentedString(clusterIcon)).append("\n");
    sb.append("    clusterLatitude: ").append(toIndentedString(clusterLatitude)).append("\n");
    sb.append("    clusterLongitude: ").append(toIndentedString(clusterLongitude)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    clusterValue: ").append(toIndentedString(clusterValue)).append("\n");
    sb.append("    epARegionCode: ").append(toIndentedString(epARegionCode)).append("\n");
    sb.append("    feARows: ").append(toIndentedString(feARows)).append("\n");
    sb.append("    inSPRows: ").append(toIndentedString(inSPRows)).append("\n");
    sb.append("    indianCountryRows: ").append(toIndentedString(indianCountryRows)).append("\n");
    sb.append("    infFEARows: ").append(toIndentedString(infFEARows)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    svRows: ").append(toIndentedString(svRows)).append("\n");
    sb.append("    totalPenalties: ").append(toIndentedString(totalPenalties)).append("\n");
    sb.append("    v3Rows: ").append(toIndentedString(v3Rows)).append("\n");
    sb.append("    vioLast4QRows: ").append(toIndentedString(vioLast4QRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BioCVRows");
    openapiFields.add("BioV3Rows");
    openapiFields.add("CVRows");
    openapiFields.add("ClusterCount");
    openapiFields.add("ClusterIcon");
    openapiFields.add("ClusterLatitude");
    openapiFields.add("ClusterLongitude");
    openapiFields.add("ClusterName");
    openapiFields.add("ClusterType");
    openapiFields.add("ClusterValue");
    openapiFields.add("EPARegionCode");
    openapiFields.add("FEARows");
    openapiFields.add("INSPRows");
    openapiFields.add("IndianCountryRows");
    openapiFields.add("InfFEARows");
    openapiFields.add("ObjectId");
    openapiFields.add("SVRows");
    openapiFields.add("TotalPenalties");
    openapiFields.add("V3Rows");
    openapiFields.add("VioLast4QRows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BioCVRows");
    openapiRequiredFields.add("BioV3Rows");
    openapiRequiredFields.add("CVRows");
    openapiRequiredFields.add("ClusterCount");
    openapiRequiredFields.add("ClusterIcon");
    openapiRequiredFields.add("ClusterLatitude");
    openapiRequiredFields.add("ClusterLongitude");
    openapiRequiredFields.add("ClusterName");
    openapiRequiredFields.add("ClusterType");
    openapiRequiredFields.add("ClusterValue");
    openapiRequiredFields.add("EPARegionCode");
    openapiRequiredFields.add("FEARows");
    openapiRequiredFields.add("INSPRows");
    openapiRequiredFields.add("IndianCountryRows");
    openapiRequiredFields.add("InfFEARows");
    openapiRequiredFields.add("ObjectId");
    openapiRequiredFields.add("SVRows");
    openapiRequiredFields.add("TotalPenalties");
    openapiRequiredFields.add("V3Rows");
    openapiRequiredFields.add("VioLast4QRows");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cwa05
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cwa05.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cwa05 is not found in the empty JSON string", Cwa05.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cwa05.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cwa05` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Cwa05.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("BioCVRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioCVRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioCVRows").toString()));
      }
      if (!jsonObj.get("BioV3Rows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioV3Rows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioV3Rows").toString()));
      }
      if (!jsonObj.get("CVRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CVRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CVRows").toString()));
      }
      if (!jsonObj.get("ClusterCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterCount").toString()));
      }
      if (!jsonObj.get("ClusterIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterIcon").toString()));
      }
      if (!jsonObj.get("ClusterLatitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterLatitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterLatitude").toString()));
      }
      if (!jsonObj.get("ClusterLongitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterLongitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterLongitude").toString()));
      }
      if (!jsonObj.get("ClusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterName").toString()));
      }
      if (!jsonObj.get("ClusterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterType").toString()));
      }
      if (!jsonObj.get("ClusterValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterValue").toString()));
      }
      if (!jsonObj.get("EPARegionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPARegionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPARegionCode").toString()));
      }
      if (!jsonObj.get("FEARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FEARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FEARows").toString()));
      }
      if (!jsonObj.get("INSPRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `INSPRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("INSPRows").toString()));
      }
      if (!jsonObj.get("IndianCountryRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndianCountryRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndianCountryRows").toString()));
      }
      if (!jsonObj.get("InfFEARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InfFEARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InfFEARows").toString()));
      }
      if (!jsonObj.get("ObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectId").toString()));
      }
      if (!jsonObj.get("SVRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SVRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SVRows").toString()));
      }
      if (!jsonObj.get("TotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPenalties").toString()));
      }
      if (!jsonObj.get("V3Rows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `V3Rows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("V3Rows").toString()));
      }
      if (!jsonObj.get("VioLast4QRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VioLast4QRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VioLast4QRows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cwa05.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cwa05' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cwa05> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cwa05.class));

       return (TypeAdapter<T>) new TypeAdapter<Cwa05>() {
           @Override
           public void write(JsonWriter out, Cwa05 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cwa05 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cwa05 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cwa05
   * @throws IOException if the JSON string is invalid with respect to Cwa05
   */
  public static Cwa05 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cwa05.class);
  }

  /**
   * Convert an instance of Cwa05 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

