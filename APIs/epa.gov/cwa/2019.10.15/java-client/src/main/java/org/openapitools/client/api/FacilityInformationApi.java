/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CwaRestServicesGetFacilitiesGet200Response;
import org.openapitools.client.model.CwaRestServicesGetFacilityInfoGet200Response;
import org.openapitools.client.model.CwaRestServicesGetGeojsonGet200Response;
import org.openapitools.client.model.CwaRestServicesGetMapGet200Response;
import org.openapitools.client.model.CwaRestServicesGetQidGet200Response;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacilityInformationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacilityInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacilityInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cwaRestServicesGetDownloadGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetDownloadGetCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetDownloadGetValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetDownloadGet(Async)");
        }

        return cwaRestServicesGetDownloadGetCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File cwaRestServicesGetDownloadGet(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = cwaRestServicesGetDownloadGetWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cwaRestServicesGetDownloadGetWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetDownloadGetAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetDownloadGetValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetDownloadPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetDownloadPostCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetDownloadPostValidateBeforeCall(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetDownloadPost(Async)");
        }

        return cwaRestServicesGetDownloadPostCall(qid, output, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File cwaRestServicesGetDownloadPost(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = cwaRestServicesGetDownloadPostWithHttpInfo(qid, output, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Download Data Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cwaRestServicesGetDownloadPostWithHttpInfo(String qid, String output, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Download Data Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return a comma separated value (CSV) file of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetDownloadPostAsync(String qid, String output, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetDownloadPostValidateBeforeCall(qid, output, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetFacilitiesGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilitiesGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (pC1lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lat", pC1lat));
        }

        if (pC1lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c1lon", pC1lon));
        }

        if (pC2lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lat", pC2lat));
        }

        if (pC2lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_c2lon", pC2lon));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pFf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ff", pFf));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pIv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iv", pIv));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pImpCauGrp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_imp_cau_grp", pImpCauGrp));
        }

        if (pImpPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_imp_pol", pImpPol));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pPstat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pstat", pPstat));
        }

        if (pPtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ptype", pPtype));
        }

        if (pPcomp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pcomp", pPcomp));
        }

        if (pPlimits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_plimits", pPlimits));
        }

        if (pPcss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pcss", pPcss));
        }

        if (pPexp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pexp", pPexp));
        }

        if (pOwop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_owop", pOwop));
        }

        if (pIpfti != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ipfti", pIpfti));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pIdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt1", pIdt1));
        }

        if (pIdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt2", pIdt2));
        }

        if (pPityp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pityp", pPityp));
        }

        if (pPfead1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead1", pPfead1));
        }

        if (pPfead2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead2", pPfead2));
        }

        if (pPfeat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfeat", pPfeat));
        }

        if (pPccs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pccs", pPccs));
        }

        if (pPexcd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pexcd", pPexcd));
        }

        if (pPsncq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psncq", pPsncq));
        }

        if (pPctrack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pctrack", pPctrack));
        }

        if (pDwd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_dwd", pDwd));
        }

        if (pPt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pt", pPt));
        }

        if (pPdwdist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pdwdist", pPdwdist));
        }

        if (pPswdpc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswdpc", pPswdpc));
        }

        if (pPswdmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswdmp", pPswdmp));
        }

        if (pPswpol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswpol", pPswpol));
        }

        if (pPswcas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswcas", pPswcas));
        }

        if (pPswparam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswparam", pPswparam));
        }

        if (pPswvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswvio", pPswvio));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pRadwbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radwbd", pRadwbd));
        }

        if (pFrswbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frswbd", pFrswbd));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pPidall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pidall", pPidall));
        }

        if (pMonthsLastDmr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_months_last_dmr", pMonthsLastDmr));
        }

        if (pLastDmrWithin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_last_dmr_within", pLastDmrWithin));
        }

        if (pIndsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_indsw", pIndsw));
        }

        if (pMsgpPtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_msgp_ptype", pMsgpPtype));
        }

        if (pMonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mon_type", pMonType));
        }

        if (pIagency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iagency", pIagency));
        }

        if (pPermittingAgency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_permitting_agency", pPermittingAgency));
        }

        if (pIsws != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_isws", pIsws));
        }

        if (pIswss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iswss", pIswss));
        }

        if (pIswssID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iswssID", pIswssID));
        }

        if (pDs1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ds1", pDs1));
        }

        if (pDs2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ds2", pDs2));
        }

        if (pDa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_da1", pDa1));
        }

        if (pDa2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_da2", pDa2));
        }

        if (pMS4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_MS4", pMS4));
        }

        if (pOoFN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooFN", pOoFN));
        }

        if (pOoFNtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooFNtype", pOoFNtype));
        }

        if (pOoSA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSA", pOoSA));
        }

        if (pOoSA1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSA1", pOoSA1));
        }

        if (pOoCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooCt", pOoCt));
        }

        if (pOoSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSt", pOoSt));
        }

        if (pOoZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooZip", pOoZip));
        }

        if (pFacIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_ico", pFacIco));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pAlrexceed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_alrexceed", pAlrexceed));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (pBioFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_flag", pBioFlag));
        }

        if (pBioFacType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_fac_type", pBioFacType));
        }

        if (pBioTrtmntProcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_trtmnt_procs", pBioTrtmntProcs));
        }

        if (pBioAnalyMethodCatgry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_analy_method_catgry", pBioAnalyMethodCatgry));
        }

        if (pBioTotalVolumeAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_total_volume_amt", pBioTotalVolumeAmt));
        }

        if (pBioMgmtPrctceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_type", pBioMgmtPrctceType));
        }

        if (pBioMgmtPrctceStype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_stype", pBioMgmtPrctceStype));
        }

        if (pBioMgmtPrctceHandler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_handler", pBioMgmtPrctceHandler));
        }

        if (pBioMgmtContainer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_container", pBioMgmtContainer));
        }

        if (pBioMgmtPathogen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_pathogen", pBioMgmtPathogen));
        }

        if (pBioMgmtPathred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_pathred", pBioMgmtPathred));
        }

        if (pBioMgmtVector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_vector", pBioMgmtVector));
        }

        if (pBioMgmtDefCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_def_category", pBioMgmtDefCategory));
        }

        if (pBioMgmtDeficiencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_deficiencies", pBioMgmtDeficiencies));
        }

        if (pBioVioCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_vio_code", pBioVioCode));
        }

        if (pBioCurrentVio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_current_vio", pBioCurrentVio));
        }

        if (pBioQtrsInVio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_qtrs_in_vio", pBioQtrsInVio));
        }

        if (pBioRptYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_rpt_year", pBioRptYear));
        }

        if (pBioVioLastYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_vio_last_year", pBioVioLastYear));
        }

        if (pMsgpRptYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_msgp_rpt_year", pMsgpRptYear));
        }

        if (pVioLastYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_vio_last_year", pVioLastYear));
        }

        if (queryset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryset", queryset));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (maplist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maplist", maplist));
        }

        if (summarylist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarylist", summarylist));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pE90Count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_e90_count", pE90Count));
        }

        if (pE90Years != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_e90_years", pE90Years));
        }

        if (pPsc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psc", pPsc));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetFacilitiesGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        return cwaRestServicesGetFacilitiesGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, _callback);

    }

    /**
     * Clean Water Act (CWA) Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return CwaRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetFacilitiesGet200Response cwaRestServicesGetFacilitiesGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        ApiResponse<CwaRestServicesGetFacilitiesGet200Response> localVarResp = cwaRestServicesGetFacilitiesGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetFacilitiesGet200Response> cwaRestServicesGetFacilitiesGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Facility Search Service (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilitiesGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback<CwaRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetFacilitiesGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetFacilitiesPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilitiesPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (pC1lat != null) {
            localVarFormParams.put("p_c1lat", pC1lat);
        }

        if (pC1lon != null) {
            localVarFormParams.put("p_c1lon", pC1lon);
        }

        if (pC2lat != null) {
            localVarFormParams.put("p_c2lat", pC2lat);
        }

        if (pC2lon != null) {
            localVarFormParams.put("p_c2lon", pC2lon);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pFf != null) {
            localVarFormParams.put("p_ff", pFf);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pIv != null) {
            localVarFormParams.put("p_iv", pIv);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pImpCauGrp != null) {
            localVarFormParams.put("p_imp_cau_grp", pImpCauGrp);
        }

        if (pImpPol != null) {
            localVarFormParams.put("p_imp_pol", pImpPol);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pPstat != null) {
            localVarFormParams.put("p_pstat", pPstat);
        }

        if (pPtype != null) {
            localVarFormParams.put("p_ptype", pPtype);
        }

        if (pPcomp != null) {
            localVarFormParams.put("p_pcomp", pPcomp);
        }

        if (pPlimits != null) {
            localVarFormParams.put("p_plimits", pPlimits);
        }

        if (pPcss != null) {
            localVarFormParams.put("p_pcss", pPcss);
        }

        if (pPexp != null) {
            localVarFormParams.put("p_pexp", pPexp);
        }

        if (pOwop != null) {
            localVarFormParams.put("p_owop", pOwop);
        }

        if (pIpfti != null) {
            localVarFormParams.put("p_ipfti", pIpfti);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pIdt1 != null) {
            localVarFormParams.put("p_idt1", pIdt1);
        }

        if (pIdt2 != null) {
            localVarFormParams.put("p_idt2", pIdt2);
        }

        if (pPityp != null) {
            localVarFormParams.put("p_pityp", pPityp);
        }

        if (pPfead1 != null) {
            localVarFormParams.put("p_pfead1", pPfead1);
        }

        if (pPfead2 != null) {
            localVarFormParams.put("p_pfead2", pPfead2);
        }

        if (pPfeat != null) {
            localVarFormParams.put("p_pfeat", pPfeat);
        }

        if (pPccs != null) {
            localVarFormParams.put("p_pccs", pPccs);
        }

        if (pPexcd != null) {
            localVarFormParams.put("p_pexcd", pPexcd);
        }

        if (pPsncq != null) {
            localVarFormParams.put("p_psncq", pPsncq);
        }

        if (pPctrack != null) {
            localVarFormParams.put("p_pctrack", pPctrack);
        }

        if (pDwd != null) {
            localVarFormParams.put("p_dwd", pDwd);
        }

        if (pPt != null) {
            localVarFormParams.put("p_pt", pPt);
        }

        if (pPdwdist != null) {
            localVarFormParams.put("p_pdwdist", pPdwdist);
        }

        if (pPswdpc != null) {
            localVarFormParams.put("p_pswdpc", pPswdpc);
        }

        if (pPswdmp != null) {
            localVarFormParams.put("p_pswdmp", pPswdmp);
        }

        if (pPswpol != null) {
            localVarFormParams.put("p_pswpol", pPswpol);
        }

        if (pPswcas != null) {
            localVarFormParams.put("p_pswcas", pPswcas);
        }

        if (pPswparam != null) {
            localVarFormParams.put("p_pswparam", pPswparam);
        }

        if (pPswvio != null) {
            localVarFormParams.put("p_pswvio", pPswvio);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pRadwbd != null) {
            localVarFormParams.put("p_radwbd", pRadwbd);
        }

        if (pFrswbd != null) {
            localVarFormParams.put("p_frswbd", pFrswbd);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pPidall != null) {
            localVarFormParams.put("p_pidall", pPidall);
        }

        if (pMonthsLastDmr != null) {
            localVarFormParams.put("p_months_last_dmr", pMonthsLastDmr);
        }

        if (pLastDmrWithin != null) {
            localVarFormParams.put("p_last_dmr_within", pLastDmrWithin);
        }

        if (pIndsw != null) {
            localVarFormParams.put("p_indsw", pIndsw);
        }

        if (pMsgpPtype != null) {
            localVarFormParams.put("p_msgp_ptype", pMsgpPtype);
        }

        if (pMonType != null) {
            localVarFormParams.put("p_mon_type", pMonType);
        }

        if (pIagency != null) {
            localVarFormParams.put("p_iagency", pIagency);
        }

        if (pPermittingAgency != null) {
            localVarFormParams.put("p_permitting_agency", pPermittingAgency);
        }

        if (pIsws != null) {
            localVarFormParams.put("p_isws", pIsws);
        }

        if (pIswss != null) {
            localVarFormParams.put("p_iswss", pIswss);
        }

        if (pIswssID != null) {
            localVarFormParams.put("p_iswssID", pIswssID);
        }

        if (pDs1 != null) {
            localVarFormParams.put("p_ds1", pDs1);
        }

        if (pDs2 != null) {
            localVarFormParams.put("p_ds2", pDs2);
        }

        if (pDa1 != null) {
            localVarFormParams.put("p_da1", pDa1);
        }

        if (pDa2 != null) {
            localVarFormParams.put("p_da2", pDa2);
        }

        if (pMS4 != null) {
            localVarFormParams.put("p_MS4", pMS4);
        }

        if (pOoFN != null) {
            localVarFormParams.put("p_ooFN", pOoFN);
        }

        if (pOoFNtype != null) {
            localVarFormParams.put("p_ooFNtype", pOoFNtype);
        }

        if (pOoSA != null) {
            localVarFormParams.put("p_ooSA", pOoSA);
        }

        if (pOoSA1 != null) {
            localVarFormParams.put("p_ooSA1", pOoSA1);
        }

        if (pOoCt != null) {
            localVarFormParams.put("p_ooCt", pOoCt);
        }

        if (pOoSt != null) {
            localVarFormParams.put("p_ooSt", pOoSt);
        }

        if (pOoZip != null) {
            localVarFormParams.put("p_ooZip", pOoZip);
        }

        if (pFacIco != null) {
            localVarFormParams.put("p_fac_ico", pFacIco);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pAlrexceed != null) {
            localVarFormParams.put("p_alrexceed", pAlrexceed);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (pBioFlag != null) {
            localVarFormParams.put("p_bio_flag", pBioFlag);
        }

        if (pBioFacType != null) {
            localVarFormParams.put("p_bio_fac_type", pBioFacType);
        }

        if (pBioTrtmntProcs != null) {
            localVarFormParams.put("p_bio_trtmnt_procs", pBioTrtmntProcs);
        }

        if (pBioAnalyMethodCatgry != null) {
            localVarFormParams.put("p_bio_analy_method_catgry", pBioAnalyMethodCatgry);
        }

        if (pBioTotalVolumeAmt != null) {
            localVarFormParams.put("p_bio_total_volume_amt", pBioTotalVolumeAmt);
        }

        if (pBioMgmtPrctceType != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_type", pBioMgmtPrctceType);
        }

        if (pBioMgmtPrctceStype != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_stype", pBioMgmtPrctceStype);
        }

        if (pBioMgmtPrctceHandler != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_handler", pBioMgmtPrctceHandler);
        }

        if (pBioMgmtContainer != null) {
            localVarFormParams.put("p_bio_mgmt_container", pBioMgmtContainer);
        }

        if (pBioMgmtPathogen != null) {
            localVarFormParams.put("p_bio_mgmt_pathogen", pBioMgmtPathogen);
        }

        if (pBioMgmtPathred != null) {
            localVarFormParams.put("p_bio_mgmt_pathred", pBioMgmtPathred);
        }

        if (pBioMgmtVector != null) {
            localVarFormParams.put("p_bio_mgmt_vector", pBioMgmtVector);
        }

        if (pBioMgmtDefCategory != null) {
            localVarFormParams.put("p_bio_mgmt_def_category", pBioMgmtDefCategory);
        }

        if (pBioMgmtDeficiencies != null) {
            localVarFormParams.put("p_bio_mgmt_deficiencies", pBioMgmtDeficiencies);
        }

        if (pBioVioCode != null) {
            localVarFormParams.put("p_bio_vio_code", pBioVioCode);
        }

        if (pBioCurrentVio != null) {
            localVarFormParams.put("p_bio_current_vio", pBioCurrentVio);
        }

        if (pBioQtrsInVio != null) {
            localVarFormParams.put("p_bio_qtrs_in_vio", pBioQtrsInVio);
        }

        if (pBioRptYear != null) {
            localVarFormParams.put("p_bio_rpt_year", pBioRptYear);
        }

        if (pBioVioLastYear != null) {
            localVarFormParams.put("p_bio_vio_last_year", pBioVioLastYear);
        }

        if (pMsgpRptYear != null) {
            localVarFormParams.put("p_msgp_rpt_year", pMsgpRptYear);
        }

        if (pVioLastYear != null) {
            localVarFormParams.put("p_vio_last_year", pVioLastYear);
        }

        if (queryset != null) {
            localVarFormParams.put("queryset", queryset);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (maplist != null) {
            localVarFormParams.put("maplist", maplist);
        }

        if (summarylist != null) {
            localVarFormParams.put("summarylist", summarylist);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pE90Count != null) {
            localVarFormParams.put("p_e90_count", pE90Count);
        }

        if (pE90Years != null) {
            localVarFormParams.put("p_e90_years", pE90Years);
        }

        if (pPsc != null) {
            localVarFormParams.put("p_psc", pPsc);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetFacilitiesPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        return cwaRestServicesGetFacilitiesPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, _callback);

    }

    /**
     * Clean Water Act (CWA) Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return CwaRestServicesGetFacilitiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetFacilitiesGet200Response cwaRestServicesGetFacilitiesPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        ApiResponse<CwaRestServicesGetFacilitiesGet200Response> localVarResp = cwaRestServicesGetFacilitiesPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Facility Search Service
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetFacilitiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetFacilitiesGet200Response> cwaRestServicesGetFacilitiesPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilitiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Facility Search Service (asynchronously)
     * Validates query search parameters and returns query identifier.  Use the responseset parameter to set the page size
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param pC1lat In decimal degrees.  Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC1lon In decimal degrees.  Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lat In decimal degrees.  Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pC2lon In decimal degrees.  Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param queryset Query Limiter.  Enter a value to limit the number of records returned for each query. Value cannot exceed 70,000. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param maplist Map List Flag.  Provide a Y to return mappable coordinates representing the full geographic extent of the queryset (all facilities that met the selection criteria). (optional)
     * @param summarylist Summary List Flag.  Enter a Y to return a list of summary statistics based on the parameters submitted to the query service. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are summary statistics for the query and a query identifier (QID). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilitiesPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal pC1lat, BigDecimal pC1lon, BigDecimal pC2lat, BigDecimal pC2lon, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpCauGrp, String pImpPol, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal queryset, BigDecimal responseset, String tablelist, String maplist, String summarylist, String paramCallback, String qcolumns, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback<CwaRestServicesGetFacilitiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetFacilitiesPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, pC1lat, pC1lon, pC2lat, pC2lon, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpCauGrp, pImpPol, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, queryset, responseset, tablelist, maplist, summarylist, paramCallback, qcolumns, pE90Count, pE90Years, pPsc, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilitiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetFacilityInfoGet
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilityInfoGetCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pFn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fn", pFn));
        }

        if (pSa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa", pSa));
        }

        if (pSa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sa1", pSa1));
        }

        if (pCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ct", pCt));
        }

        if (pCo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_co", pCo));
        }

        if (pFips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fips", pFips));
        }

        if (pSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_st", pSt));
        }

        if (pZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_zip", pZip));
        }

        if (pFrs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frs", pFrs));
        }

        if (pReg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_reg", pReg));
        }

        if (pSic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic", pSic));
        }

        if (pNcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ncs", pNcs));
        }

        if (pPen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pen", pPen));
        }

        if (xmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmin", xmin));
        }

        if (ymin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymin", ymin));
        }

        if (xmax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xmax", xmax));
        }

        if (ymax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ymax", ymax));
        }

        if (pUsmex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_usmex", pUsmex));
        }

        if (pSic2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic2", pSic2));
        }

        if (pSic4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sic4", pSic4));
        }

        if (pFa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fa", pFa));
        }

        if (pFf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ff", pFf));
        }

        if (pAct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_act", pAct));
        }

        if (pMaj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_maj", pMaj));
        }

        if (pMact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mact", pMact));
        }

        if (pFea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fea", pFea));
        }

        if (pFeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feay", pFeay));
        }

        if (pFeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_feaa", pFeaa));
        }

        if (pIea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iea", pIea));
        }

        if (pIeay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieay", pIeay));
        }

        if (pIeaa != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ieaa", pIeaa));
        }

        if (pQiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qiv", pQiv));
        }

        if (pIv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iv", pIv));
        }

        if (pImpw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_impw", pImpw));
        }

        if (pImpPol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_imp_pol", pImpPol));
        }

        if (pImpCauGrp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_imp_cau_grp", pImpCauGrp));
        }

        if (pTrep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_trep", pTrep));
        }

        if (pPm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pm", pPm));
        }

        if (pPd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pd", pPd));
        }

        if (pIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ico", pIco));
        }

        if (pHuc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_huc", pHuc));
        }

        if (pPid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pid", pPid));
        }

        if (pMed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_med", pMed));
        }

        if (pYsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysl", pYsl));
        }

        if (pYsly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysly", pYsly));
        }

        if (pYsla != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ysla", pYsla));
        }

        if (pQs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qs", pQs));
        }

        if (pSfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_sfs", pSfs));
        }

        if (pTribeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribeid", pTribeid));
        }

        if (pTribename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribename", pTribename));
        }

        if (pTribedist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_tribedist", pTribedist));
        }

        if (pPstat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pstat", pPstat));
        }

        if (pPtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ptype", pPtype));
        }

        if (pPcomp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pcomp", pPcomp));
        }

        if (pPlimits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_plimits", pPlimits));
        }

        if (pPcss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pcss", pPcss));
        }

        if (pPexp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pexp", pPexp));
        }

        if (pOwop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_owop", pOwop));
        }

        if (pIpfti != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ipfti", pIpfti));
        }

        if (pAgoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_agoo", pAgoo));
        }

        if (pIdt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt1", pIdt1));
        }

        if (pIdt2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_idt2", pIdt2));
        }

        if (pPityp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pityp", pPityp));
        }

        if (pPfead1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead1", pPfead1));
        }

        if (pPfead2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfead2", pPfead2));
        }

        if (pPfeat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pfeat", pPfeat));
        }

        if (pPccs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pccs", pPccs));
        }

        if (pPexcd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pexcd", pPexcd));
        }

        if (pPsncq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psncq", pPsncq));
        }

        if (pPctrack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pctrack", pPctrack));
        }

        if (pDwd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_dwd", pDwd));
        }

        if (pPt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pt", pPt));
        }

        if (pPdwdist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pdwdist", pPdwdist));
        }

        if (pPswdpc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswdpc", pPswdpc));
        }

        if (pPswdmp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswdmp", pPswdmp));
        }

        if (pPswpol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswpol", pPswpol));
        }

        if (pPswcas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswcas", pPswcas));
        }

        if (pPswparam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswparam", pPswparam));
        }

        if (pPswvio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pswvio", pPswvio));
        }

        if (pWbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_wbd", pWbd));
        }

        if (pRadwbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radwbd", pRadwbd));
        }

        if (pFrswbd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_frswbd", pFrswbd));
        }

        if (pFntype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fntype", pFntype));
        }

        if (pPidall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pidall", pPidall));
        }

        if (pMonthsLastDmr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_months_last_dmr", pMonthsLastDmr));
        }

        if (pLastDmrWithin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_last_dmr_within", pLastDmrWithin));
        }

        if (pIndsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_indsw", pIndsw));
        }

        if (pMsgpPtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_msgp_ptype", pMsgpPtype));
        }

        if (pMonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_mon_type", pMonType));
        }

        if (pIagency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iagency", pIagency));
        }

        if (pPermittingAgency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_permitting_agency", pPermittingAgency));
        }

        if (pIsws != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_isws", pIsws));
        }

        if (pIswss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iswss", pIswss));
        }

        if (pIswssID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_iswssID", pIswssID));
        }

        if (pDs1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ds1", pDs1));
        }

        if (pDs2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ds2", pDs2));
        }

        if (pDa1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_da1", pDa1));
        }

        if (pDa2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_da2", pDa2));
        }

        if (pMS4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_MS4", pMS4));
        }

        if (pOoFN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooFN", pOoFN));
        }

        if (pOoFNtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooFNtype", pOoFNtype));
        }

        if (pOoSA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSA", pOoSA));
        }

        if (pOoSA1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSA1", pOoSA1));
        }

        if (pOoCt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooCt", pOoCt));
        }

        if (pOoSt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooSt", pOoSt));
        }

        if (pOoZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ooZip", pOoZip));
        }

        if (pFacIco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_ico", pFacIco));
        }

        if (pIcoo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_icoo", pIcoo));
        }

        if (pFacIcos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_fac_icos", pFacIcos));
        }

        if (pEjscreen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen", pEjscreen));
        }

        if (pAlrexceed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_alrexceed", pAlrexceed));
        }

        if (pLimitAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_limit_addr", pLimitAddr));
        }

        if (pLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_lat", pLat));
        }

        if (pLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_long", pLong));
        }

        if (pRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_radius", pRadius));
        }

        if (pEjscreenOver80cnt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_ejscreen_over80cnt", pEjscreenOver80cnt));
        }

        if (pBioFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_flag", pBioFlag));
        }

        if (pBioFacType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_fac_type", pBioFacType));
        }

        if (pBioTrtmntProcs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_trtmnt_procs", pBioTrtmntProcs));
        }

        if (pBioAnalyMethodCatgry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_analy_method_catgry", pBioAnalyMethodCatgry));
        }

        if (pBioTotalVolumeAmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_total_volume_amt", pBioTotalVolumeAmt));
        }

        if (pBioMgmtPrctceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_type", pBioMgmtPrctceType));
        }

        if (pBioMgmtPrctceStype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_stype", pBioMgmtPrctceStype));
        }

        if (pBioMgmtPrctceHandler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_prctce_handler", pBioMgmtPrctceHandler));
        }

        if (pBioMgmtContainer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_container", pBioMgmtContainer));
        }

        if (pBioMgmtPathogen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_pathogen", pBioMgmtPathogen));
        }

        if (pBioMgmtPathred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_pathred", pBioMgmtPathred));
        }

        if (pBioMgmtVector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_vector", pBioMgmtVector));
        }

        if (pBioMgmtDefCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_def_category", pBioMgmtDefCategory));
        }

        if (pBioMgmtDeficiencies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_mgmt_deficiencies", pBioMgmtDeficiencies));
        }

        if (pBioVioCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_vio_code", pBioVioCode));
        }

        if (pBioCurrentVio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_current_vio", pBioCurrentVio));
        }

        if (pBioQtrsInVio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_qtrs_in_vio", pBioQtrsInVio));
        }

        if (pBioRptYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_rpt_year", pBioRptYear));
        }

        if (pBioVioLastYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_bio_vio_last_year", pBioVioLastYear));
        }

        if (pMsgpRptYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_msgp_rpt_year", pMsgpRptYear));
        }

        if (pVioLastYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_vio_last_year", pVioLastYear));
        }

        if (responseset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseset", responseset));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        if (pE90Count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_e90_count", pE90Count));
        }

        if (pE90Years != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_e90_years", pE90Years));
        }

        if (pPsc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_psc", pPsc));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetFacilityInfoGetValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        return cwaRestServicesGetFacilityInfoGetCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, _callback);

    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return CwaRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetFacilityInfoGet200Response cwaRestServicesGetFacilityInfoGet(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        ApiResponse<CwaRestServicesGetFacilityInfoGet200Response> localVarResp = cwaRestServicesGetFacilityInfoGetWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetFacilityInfoGet200Response> cwaRestServicesGetFacilityInfoGetWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \&quot;LE5\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \&quot;22\&quot; to match all SIC codes beginning with 22.  Use the \&quot;%\&quot; character within strings to match any SIC values with the pattern.  For example, \&quot;2%21\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \&quot;Y\&quot; or \&quot;N\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \&quot;non-municipals\&quot; or \&quot;industrials\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \&quot;reach indexing\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \&quot;State\&quot; or \&quot;EPA\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \&quot;Y\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \&quot;Y\&quot; or \&quot;N\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \&quot;Y\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \&quot;NONE\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilityInfoGetAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback<CwaRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetFacilityInfoGetValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetFacilityInfoPost
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilityInfoPostCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_facility_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pFn != null) {
            localVarFormParams.put("p_fn", pFn);
        }

        if (pSa != null) {
            localVarFormParams.put("p_sa", pSa);
        }

        if (pSa1 != null) {
            localVarFormParams.put("p_sa1", pSa1);
        }

        if (pCt != null) {
            localVarFormParams.put("p_ct", pCt);
        }

        if (pCo != null) {
            localVarFormParams.put("p_co", pCo);
        }

        if (pFips != null) {
            localVarFormParams.put("p_fips", pFips);
        }

        if (pSt != null) {
            localVarFormParams.put("p_st", pSt);
        }

        if (pZip != null) {
            localVarFormParams.put("p_zip", pZip);
        }

        if (pFrs != null) {
            localVarFormParams.put("p_frs", pFrs);
        }

        if (pReg != null) {
            localVarFormParams.put("p_reg", pReg);
        }

        if (pSic != null) {
            localVarFormParams.put("p_sic", pSic);
        }

        if (pNcs != null) {
            localVarFormParams.put("p_ncs", pNcs);
        }

        if (pPen != null) {
            localVarFormParams.put("p_pen", pPen);
        }

        if (xmin != null) {
            localVarFormParams.put("xmin", xmin);
        }

        if (ymin != null) {
            localVarFormParams.put("ymin", ymin);
        }

        if (xmax != null) {
            localVarFormParams.put("xmax", xmax);
        }

        if (ymax != null) {
            localVarFormParams.put("ymax", ymax);
        }

        if (pUsmex != null) {
            localVarFormParams.put("p_usmex", pUsmex);
        }

        if (pSic2 != null) {
            localVarFormParams.put("p_sic2", pSic2);
        }

        if (pSic4 != null) {
            localVarFormParams.put("p_sic4", pSic4);
        }

        if (pFa != null) {
            localVarFormParams.put("p_fa", pFa);
        }

        if (pFf != null) {
            localVarFormParams.put("p_ff", pFf);
        }

        if (pAct != null) {
            localVarFormParams.put("p_act", pAct);
        }

        if (pMaj != null) {
            localVarFormParams.put("p_maj", pMaj);
        }

        if (pMact != null) {
            localVarFormParams.put("p_mact", pMact);
        }

        if (pFea != null) {
            localVarFormParams.put("p_fea", pFea);
        }

        if (pFeay != null) {
            localVarFormParams.put("p_feay", pFeay);
        }

        if (pFeaa != null) {
            localVarFormParams.put("p_feaa", pFeaa);
        }

        if (pIea != null) {
            localVarFormParams.put("p_iea", pIea);
        }

        if (pIeay != null) {
            localVarFormParams.put("p_ieay", pIeay);
        }

        if (pIeaa != null) {
            localVarFormParams.put("p_ieaa", pIeaa);
        }

        if (pQiv != null) {
            localVarFormParams.put("p_qiv", pQiv);
        }

        if (pIv != null) {
            localVarFormParams.put("p_iv", pIv);
        }

        if (pImpw != null) {
            localVarFormParams.put("p_impw", pImpw);
        }

        if (pImpPol != null) {
            localVarFormParams.put("p_imp_pol", pImpPol);
        }

        if (pImpCauGrp != null) {
            localVarFormParams.put("p_imp_cau_grp", pImpCauGrp);
        }

        if (pTrep != null) {
            localVarFormParams.put("p_trep", pTrep);
        }

        if (pPm != null) {
            localVarFormParams.put("p_pm", pPm);
        }

        if (pPd != null) {
            localVarFormParams.put("p_pd", pPd);
        }

        if (pIco != null) {
            localVarFormParams.put("p_ico", pIco);
        }

        if (pHuc != null) {
            localVarFormParams.put("p_huc", pHuc);
        }

        if (pPid != null) {
            localVarFormParams.put("p_pid", pPid);
        }

        if (pMed != null) {
            localVarFormParams.put("p_med", pMed);
        }

        if (pYsl != null) {
            localVarFormParams.put("p_ysl", pYsl);
        }

        if (pYsly != null) {
            localVarFormParams.put("p_ysly", pYsly);
        }

        if (pYsla != null) {
            localVarFormParams.put("p_ysla", pYsla);
        }

        if (pQs != null) {
            localVarFormParams.put("p_qs", pQs);
        }

        if (pSfs != null) {
            localVarFormParams.put("p_sfs", pSfs);
        }

        if (pTribeid != null) {
            localVarFormParams.put("p_tribeid", pTribeid);
        }

        if (pTribename != null) {
            localVarFormParams.put("p_tribename", pTribename);
        }

        if (pTribedist != null) {
            localVarFormParams.put("p_tribedist", pTribedist);
        }

        if (pPstat != null) {
            localVarFormParams.put("p_pstat", pPstat);
        }

        if (pPtype != null) {
            localVarFormParams.put("p_ptype", pPtype);
        }

        if (pPcomp != null) {
            localVarFormParams.put("p_pcomp", pPcomp);
        }

        if (pPlimits != null) {
            localVarFormParams.put("p_plimits", pPlimits);
        }

        if (pPcss != null) {
            localVarFormParams.put("p_pcss", pPcss);
        }

        if (pPexp != null) {
            localVarFormParams.put("p_pexp", pPexp);
        }

        if (pOwop != null) {
            localVarFormParams.put("p_owop", pOwop);
        }

        if (pIpfti != null) {
            localVarFormParams.put("p_ipfti", pIpfti);
        }

        if (pAgoo != null) {
            localVarFormParams.put("p_agoo", pAgoo);
        }

        if (pIdt1 != null) {
            localVarFormParams.put("p_idt1", pIdt1);
        }

        if (pIdt2 != null) {
            localVarFormParams.put("p_idt2", pIdt2);
        }

        if (pPityp != null) {
            localVarFormParams.put("p_pityp", pPityp);
        }

        if (pPfead1 != null) {
            localVarFormParams.put("p_pfead1", pPfead1);
        }

        if (pPfead2 != null) {
            localVarFormParams.put("p_pfead2", pPfead2);
        }

        if (pPfeat != null) {
            localVarFormParams.put("p_pfeat", pPfeat);
        }

        if (pPccs != null) {
            localVarFormParams.put("p_pccs", pPccs);
        }

        if (pPexcd != null) {
            localVarFormParams.put("p_pexcd", pPexcd);
        }

        if (pPsncq != null) {
            localVarFormParams.put("p_psncq", pPsncq);
        }

        if (pPctrack != null) {
            localVarFormParams.put("p_pctrack", pPctrack);
        }

        if (pDwd != null) {
            localVarFormParams.put("p_dwd", pDwd);
        }

        if (pPt != null) {
            localVarFormParams.put("p_pt", pPt);
        }

        if (pPdwdist != null) {
            localVarFormParams.put("p_pdwdist", pPdwdist);
        }

        if (pPswdpc != null) {
            localVarFormParams.put("p_pswdpc", pPswdpc);
        }

        if (pPswdmp != null) {
            localVarFormParams.put("p_pswdmp", pPswdmp);
        }

        if (pPswpol != null) {
            localVarFormParams.put("p_pswpol", pPswpol);
        }

        if (pPswcas != null) {
            localVarFormParams.put("p_pswcas", pPswcas);
        }

        if (pPswparam != null) {
            localVarFormParams.put("p_pswparam", pPswparam);
        }

        if (pPswvio != null) {
            localVarFormParams.put("p_pswvio", pPswvio);
        }

        if (pWbd != null) {
            localVarFormParams.put("p_wbd", pWbd);
        }

        if (pRadwbd != null) {
            localVarFormParams.put("p_radwbd", pRadwbd);
        }

        if (pFrswbd != null) {
            localVarFormParams.put("p_frswbd", pFrswbd);
        }

        if (pFntype != null) {
            localVarFormParams.put("p_fntype", pFntype);
        }

        if (pPidall != null) {
            localVarFormParams.put("p_pidall", pPidall);
        }

        if (pMonthsLastDmr != null) {
            localVarFormParams.put("p_months_last_dmr", pMonthsLastDmr);
        }

        if (pLastDmrWithin != null) {
            localVarFormParams.put("p_last_dmr_within", pLastDmrWithin);
        }

        if (pIndsw != null) {
            localVarFormParams.put("p_indsw", pIndsw);
        }

        if (pMsgpPtype != null) {
            localVarFormParams.put("p_msgp_ptype", pMsgpPtype);
        }

        if (pMonType != null) {
            localVarFormParams.put("p_mon_type", pMonType);
        }

        if (pIagency != null) {
            localVarFormParams.put("p_iagency", pIagency);
        }

        if (pPermittingAgency != null) {
            localVarFormParams.put("p_permitting_agency", pPermittingAgency);
        }

        if (pIsws != null) {
            localVarFormParams.put("p_isws", pIsws);
        }

        if (pIswss != null) {
            localVarFormParams.put("p_iswss", pIswss);
        }

        if (pIswssID != null) {
            localVarFormParams.put("p_iswssID", pIswssID);
        }

        if (pDs1 != null) {
            localVarFormParams.put("p_ds1", pDs1);
        }

        if (pDs2 != null) {
            localVarFormParams.put("p_ds2", pDs2);
        }

        if (pDa1 != null) {
            localVarFormParams.put("p_da1", pDa1);
        }

        if (pDa2 != null) {
            localVarFormParams.put("p_da2", pDa2);
        }

        if (pMS4 != null) {
            localVarFormParams.put("p_MS4", pMS4);
        }

        if (pOoFN != null) {
            localVarFormParams.put("p_ooFN", pOoFN);
        }

        if (pOoFNtype != null) {
            localVarFormParams.put("p_ooFNtype", pOoFNtype);
        }

        if (pOoSA != null) {
            localVarFormParams.put("p_ooSA", pOoSA);
        }

        if (pOoSA1 != null) {
            localVarFormParams.put("p_ooSA1", pOoSA1);
        }

        if (pOoCt != null) {
            localVarFormParams.put("p_ooCt", pOoCt);
        }

        if (pOoSt != null) {
            localVarFormParams.put("p_ooSt", pOoSt);
        }

        if (pOoZip != null) {
            localVarFormParams.put("p_ooZip", pOoZip);
        }

        if (pFacIco != null) {
            localVarFormParams.put("p_fac_ico", pFacIco);
        }

        if (pIcoo != null) {
            localVarFormParams.put("p_icoo", pIcoo);
        }

        if (pFacIcos != null) {
            localVarFormParams.put("p_fac_icos", pFacIcos);
        }

        if (pEjscreen != null) {
            localVarFormParams.put("p_ejscreen", pEjscreen);
        }

        if (pAlrexceed != null) {
            localVarFormParams.put("p_alrexceed", pAlrexceed);
        }

        if (pLimitAddr != null) {
            localVarFormParams.put("p_limit_addr", pLimitAddr);
        }

        if (pLat != null) {
            localVarFormParams.put("p_lat", pLat);
        }

        if (pLong != null) {
            localVarFormParams.put("p_long", pLong);
        }

        if (pRadius != null) {
            localVarFormParams.put("p_radius", pRadius);
        }

        if (pEjscreenOver80cnt != null) {
            localVarFormParams.put("p_ejscreen_over80cnt", pEjscreenOver80cnt);
        }

        if (pBioFlag != null) {
            localVarFormParams.put("p_bio_flag", pBioFlag);
        }

        if (pBioFacType != null) {
            localVarFormParams.put("p_bio_fac_type", pBioFacType);
        }

        if (pBioTrtmntProcs != null) {
            localVarFormParams.put("p_bio_trtmnt_procs", pBioTrtmntProcs);
        }

        if (pBioAnalyMethodCatgry != null) {
            localVarFormParams.put("p_bio_analy_method_catgry", pBioAnalyMethodCatgry);
        }

        if (pBioTotalVolumeAmt != null) {
            localVarFormParams.put("p_bio_total_volume_amt", pBioTotalVolumeAmt);
        }

        if (pBioMgmtPrctceType != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_type", pBioMgmtPrctceType);
        }

        if (pBioMgmtPrctceStype != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_stype", pBioMgmtPrctceStype);
        }

        if (pBioMgmtPrctceHandler != null) {
            localVarFormParams.put("p_bio_mgmt_prctce_handler", pBioMgmtPrctceHandler);
        }

        if (pBioMgmtContainer != null) {
            localVarFormParams.put("p_bio_mgmt_container", pBioMgmtContainer);
        }

        if (pBioMgmtPathogen != null) {
            localVarFormParams.put("p_bio_mgmt_pathogen", pBioMgmtPathogen);
        }

        if (pBioMgmtPathred != null) {
            localVarFormParams.put("p_bio_mgmt_pathred", pBioMgmtPathred);
        }

        if (pBioMgmtVector != null) {
            localVarFormParams.put("p_bio_mgmt_vector", pBioMgmtVector);
        }

        if (pBioMgmtDefCategory != null) {
            localVarFormParams.put("p_bio_mgmt_def_category", pBioMgmtDefCategory);
        }

        if (pBioMgmtDeficiencies != null) {
            localVarFormParams.put("p_bio_mgmt_deficiencies", pBioMgmtDeficiencies);
        }

        if (pBioVioCode != null) {
            localVarFormParams.put("p_bio_vio_code", pBioVioCode);
        }

        if (pBioCurrentVio != null) {
            localVarFormParams.put("p_bio_current_vio", pBioCurrentVio);
        }

        if (pBioQtrsInVio != null) {
            localVarFormParams.put("p_bio_qtrs_in_vio", pBioQtrsInVio);
        }

        if (pBioRptYear != null) {
            localVarFormParams.put("p_bio_rpt_year", pBioRptYear);
        }

        if (pBioVioLastYear != null) {
            localVarFormParams.put("p_bio_vio_last_year", pBioVioLastYear);
        }

        if (pMsgpRptYear != null) {
            localVarFormParams.put("p_msgp_rpt_year", pMsgpRptYear);
        }

        if (pVioLastYear != null) {
            localVarFormParams.put("p_vio_last_year", pVioLastYear);
        }

        if (responseset != null) {
            localVarFormParams.put("responseset", responseset);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        if (pE90Count != null) {
            localVarFormParams.put("p_e90_count", pE90Count);
        }

        if (pE90Years != null) {
            localVarFormParams.put("p_e90_years", pE90Years);
        }

        if (pPsc != null) {
            localVarFormParams.put("p_psc", pPsc);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetFacilityInfoPostValidateBeforeCall(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback _callback) throws ApiException {
        return cwaRestServicesGetFacilityInfoPostCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, _callback);

    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return CwaRestServicesGetFacilityInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetFacilityInfoGet200Response cwaRestServicesGetFacilityInfoPost(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        ApiResponse<CwaRestServicesGetFacilityInfoGet200Response> localVarResp = cwaRestServicesGetFacilityInfoPostWithHttpInfo(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetFacilityInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetFacilityInfoGet200Response> cwaRestServicesGetFacilityInfoPostWithHttpInfo(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilityInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Facility Enhanced Search Service (asynchronously)
     * Returns either an array of Facilities or an array of Clusters that meet the specified search criteria.
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. - CSV &#x3D; Facility results formatted as comma delimited file download. - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection. - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pFn Facility Name Filter. Enter one or more case-insensitive facility names to filter results.  Provide multiple values as a comma-delimited list.  See p_fntype for additional modifiers. (optional)
     * @param pSa Facility street address. Enter a complete or partial street address. (optional)
     * @param pSa1 Facility street address. Enter a complete or partial street address.   Note that p_sa1 is culmulative with p_sa. (optional)
     * @param pCt Facility City Filter. Enter a single case-insensitive city name to filter results. (optional)
     * @param pCo Facility County Filter. Provide a single county name in combination with a state value provided via p_st. (optional)
     * @param pFips FIPS Code Filter.  Enter a single 5-character Federal Information Processing Standards (FIPS) state + county value to restrict results.  E.g. to limit results to Kenosha County, Wisconsin, use 55059. (optional)
     * @param pSt Facility State and State-Equivalent Filter.  Provide one or more USPS postal abbreviations for states and state-equivalents to filter results.  Provide multiple values as a comma-delimited list. (optional)
     * @param pZip 5-Digit ZIP Code Filter. Provide one or more 5-digit postal zip codes to filter results.  May contain multiple comma-separated values. (optional)
     * @param pFrs Facility Registry Service ID Filter. Enter a single 12-digit FRS identifier to filter results. (optional)
     * @param pReg EPA Region Filter. Provide a single value of 01 thru 10 to restrict results to a single EPA region. (optional)
     * @param pSic Standard Industrial Classification (SIC) Code Filter.  Enter a single 4-digit SIC Code to filter results.  If more complex filtering is required, use p_sic2 and p_sic4. (optional)
     * @param pNcs North American Industry Classification System Filter. Enter two to six digits to filter results to facilities having matching NAICS codes.  Digits less than six will match to all codes beginning with the provided values. (optional)
     * @param pPen Last Penality Date Qualifier Filter.  Enter one of the following:    - NEVER &#x3D; No Penalties - ANY &#x3D; Any Penalty - LEXX &#x3D; Less than or equal to XX months.  Provide a number in place of XX, e.g. \\\&quot;LE5\\\&quot; for a facility with a penalty within previous 5 months. - GTXX &#x3D; Greater than XX months.  Provide a number in place of XX, eg. GT12, for a facility with the last penalty greater than 12 months ago. (optional)
     * @param xmin Minimum longitude value in decimal degrees. (optional)
     * @param ymin Minimum latitude value in decimal degrees. (optional)
     * @param xmax Maximum longitude value in decimal degrees. (optional)
     * @param ymax Maximum latitude value in decimal degrees. (optional)
     * @param pUsmex US-Mexico Border Flag.  Enter Y/N to restrict searches to facilities located within 100KM of the border. (optional)
     * @param pSic2 Standard Industrial Classification (SIC) Code Filter Alternate 2. Enter a wild-card search against SIC codes.  A final wild-card is always present allowing \\\&quot;22\\\&quot; to match all SIC codes beginning with 22.  Use the \\\&quot;%\\\&quot; character within strings to match any SIC values with the pattern.  For example, \\\&quot;2%21\\\&quot; matches 2021, 2121, 2221, etc. (optional)
     * @param pSic4 Standard Industrial Classification (SIC) Code Filter Alternate 3.  Enter the first 2, 3 or 4 SIC code digits to filter results to facilities having those code prefixes.  As this alternative does not utilize an index, p_sic2 will generally be quicker. (optional)
     * @param pFa Federal Agency. 1 character or 5-character values; may contain multiple comma-separated values. ALL will retrieve all facilities where the federal agency code is not null.  Use the Federal Agencies lookup service to obtain a list of values. (optional)
     * @param pFf Federal Facility Indicator Flag. Enter Y to restrict searches to federal facilities. (optional)
     * @param pAct Active Permits/Facilities Flag.  Provide Y or N to filter results to facilities with active permits.  A Y will select ICIS NPDES permits with a status of effective, continued, or expired. (optional)
     * @param pMaj Major Facility Flag.  Enter Y to restrict results to Major facilities only. (optional)
     * @param pMact CAA Maximum Achievable Control Technology (MACT) Subpart codes (alpha ID between 1 and 7 characters) applicable to the facility. (optional)
     * @param pFea Formal Enforcement Actions [within / not within] specified date range indicator. The date range is determined by parameters p_fead1 and p_fead2 or by parameter p_feay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pFeay Years (1 to 5) Range.  This value is used to create a date range for Formal Enforcement Actions (FEA). Used along with p_fea (which indicates whether to look within or outside of the date range) to find FEAs within (or not within) the number of years specified. (optional)
     * @param pFeaa Agency associated with Formal Enforcement Actions: - E &#x3D; EPA - S &#x3D; State - A &#x3D; All (optional)
     * @param pIea Informal Enforcement Actions [within / not within] specified date range.  The date range is determined by parameters p_iead1 and p_iead2 or by parameter p_ieay. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pIeay Years (1 to 5) Range.  This value is used to create a date range for Informal Enforcement Actions (IEA). Used along with p_iea (which indicates whether to look within or outside of the date range) to find IEAs within (or not within) the number of years specified. (optional)
     * @param pIeaa Agency associated with Informal Enforcement Actions. If left blank, both agencies are included. - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQiv Quarters in Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in noncompliance. (optional)
     * @param pIv Facility has a violation status of &#39;In Viol&#39; during any of the selected quarters.   Range: Fiscal Year 2020 Quarter 2 to Fiscal Year 2017 Quarter 2  Multiple values are comma delimited.   ||||||  Fiscal Years |||||| - FY2020 or FY20 or 2020 or 20 - FY2019 or FY19 or 2019 or 19 - FY2018 or FY18 or 2018 or 18 - FY2017 or FY17 or 2017 or 17  ||||| Fiscal Quarters ||||| - FY2020Q2 or FY20Q2 or 20202 or 202 or 13 - FY2020Q1 or FY20Q1 or 20201 or 201 or 12 - FY2019Q4 or FY19Q4 or 20194 or 194 or 11 - FY2019Q3 or FY19Q3 or 20193 or 193 or 10 - FY2019Q2 or FY19Q2 or 20192 or 192 or 9 - FY2019Q1 or FY19Q1 or 20191 or 191 or 8 - FY2018Q4 or FY18Q4 or 20184 or 184 or 7 - FY2018Q3 or FY18Q3 or 20183 or 183 or 6 - FY2018Q2 or FY18Q2 or 20182 or 182 or 5 - FY2018Q1 or FY18Q1 or 20181 or 181 or 4 - FY2017Q4 or FY17Q4 or 20174 or 174 or 3 - FY2017Q3 or FY17Q3 or 20173 or 173 or 2 - FY2017Q2 or FY17Q2 or 20172 or 172 or 1 (optional)
     * @param pImpw Discharging into Impaired Waters Flag. Enter Y to limit results to facilities with discharge to waterbodies listed as impaired in the ATTAINS database. (optional)
     * @param pImpPol Facility is discharging pollutants that are potentially contributing to the impairment of local waterbodies according to the ATTAINS database. (optional)
     * @param pImpCauGrp Facility is discharging a pollutant group causing a waterbody to be impaired.  Enter 1 through 34 (the internal number of the pollutant group); or enter a partial name such as Dioxin,Temp,tUrBidity. (optional)
     * @param pTrep Current Toxics Release Inventory (TRI) Reporter Limiter.  Enter one of the following codes to limit results. - CURR &#x3D; Current TRI reporter. - NONCURR &#x3D; Has reported to TRI in the past but not for the current reporting year. (optional)
     * @param pPm Percent Minority Population Limiter.  Enter a value to restrict results to facilities with a given percentage of minority population within 3-mile radius. - NONE &#x3D; 0% - GT5 &#x3D; greater than 5% - GT10 &#x3D; greater than 10% - GT25 &#x3D; greater than 25% - GT50 &#x3D; greater than 50% - GT75 &#x3D; greater than 75% (optional)
     * @param pPd Population Density Limiter (per sq mile). Enter a value to limit results to facilities located in area of a given population density. - NONE &#x3D; 0 population density per square mile - GT100 &#x3D; More than 100 population density per square mile - GT500 &#x3D; More than 500 population density per square mile - GT1000 &#x3D; More than 1000 population density per square mile - GT5000 &#x3D; More than 5000 population density per square mile - GT10000 &#x3D; More than 10000 population density per square mile - GT20000 &#x3D; More than 20000 population density per square mile (optional)
     * @param pIco Indian Country Flag.  Enter a \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to restrict searches to facilities inside or outside Indian Country. (optional)
     * @param pHuc 2-, 4-, 6-, or 8-character watershed code. May contain multiple comma-separated values. (optional)
     * @param pPid Nine-digit permit IDs. May contain up to 2000 comma-separated values. (optional)
     * @param pMed Filter Results by Media. - A &#x3D; Air - M &#x3D; RMP (Risk Management Plan) - R &#x3D; RCRA (Hazardous Waste) - S &#x3D; SDWA (Public Drinking Water Systems) - ALL &#x3D; Air and RCRA and Water (optional)
     * @param pYsl Last Facility Inspection [within / not within] Specified Date Range Indicator. The date range is determined by parameters p_idt1 and p_idt2 or by parameter p_ysly. - W &#x3D; within date range - N &#x3D; not within date range (optional)
     * @param pYsly Number of years (1 to 5) since last facility inspection.  A value of 1 means that it has been inspected within the year. (optional)
     * @param pYsla Facility Last Inspection Code Filter.  If left blank, both agencies are included.  Enter a value to limit results: - E &#x3D; EPA - S &#x3D; State (optional)
     * @param pQs Quick Search. Allows entry for city, state, and/or zip code. (optional)
     * @param pSfs Single Facility Search Filter.  Provide a facility name or program system identifier to limit results.  For the all data search, the FRS registry identifier is also searched. (optional)
     * @param pTribeid Numeric code for tribe (or list of tribes). (optional)
     * @param pTribename Tribe Name Filter.  Enter a single tribe name to filter results. (optional)
     * @param pTribedist Proximity to tribal land limiter. Enter an amount of mile between 0 and 25 to filter results.  This parameter is only evaluated if p_tribeid is populated. (optional)
     * @param pPstat Permit Status Filter.  Enter one or more of the following codes.  Provide multiple values as a comma-delimited list. - EFF &#x3D; Effective - EXP &#x3D; Expired - PND &#x3D; Pending - TRM &#x3D; Terminated - RET &#x3D; Retired - NON &#x3D; Not Needed - ADC &#x3D; Admin Continued (optional)
     * @param pPtype Permit Type Filter. Enter one or more code values to filter results.  Provide multiple values as a comma-delimited list. - NPD &#x3D; NPDES Individual Permit - NGP &#x3D; NPDES Master General Permit - GPC &#x3D; General Permit Covered Facility - SNN &#x3D; State Issued Master General Permit (Non-NPDES) - IIU &#x3D; Individual IU Permit (Non-NPDES) - SIN &#x3D; Individual State Issued Permit (Non-NPDES) - APR &#x3D; Associated Permit Record - UFT &#x3D; Unpermitted Facility (optional)
     * @param pPcomp Permit Component Code Filter.  Enter one or more codes to filter results.  Provide multiple values as a comma-delimited list. - PRE &#x3D; Pretreatment - CAF &#x3D; CAFO - CSO &#x3D; CSO - POT &#x3D; POTW - BIO &#x3D; Biosolids - SWS &#x3D; Storm Water Small MS4s - SWM &#x3D; Storm Water Medium/Large MS4s - SWI &#x3D; Storm Water Industrial - SWC &#x3D; Storm Water Construction (optional)
     * @param pPlimits Permit Limits Present Flag.  Enter Y to limit results to facilities have present permit limits. (optional)
     * @param pPcss Combined Sewer Systems Outflows Limiter.  Enter one of the following to limit results to facilities having the given count of CSS outflows. - ALL &#x3D; returns all facilities, regardless of the number of outflows. - GE1 &#x3D; returns facilities with one or more outflows. - GE10 &#x3D; returns facilities with ten or more outflows. - GE50 &#x3D; returns facilities with fifty or more outflows. (optional)
     * @param pPexp Permit Expired or Administratively Continued Limiter.  Enter one of the following values to filter results. - EXP &#x3D; limit results to facilities with permits expired or administratively continued. - EXPLE1YR &#x3D; limit resuls to facilities with permits expired administratively continued within the past year. - EXPGT1YR &#x3D; limit resuls to facilities with permits expired administratively continued more than a year ago. (optional)
     * @param pOwop Owner/Operator code filter.  Enter one of the following values to restrict results. - Federal &#x3D; Federal facilities regulated under the NPDES program. - POTW &#x3D; Publicly owned treatment works. Treatment works that are owned by a State, Tribe, or municipality. - Non-POTW &#x3D; Non-publicly owned treatment works. Often referred to as \\\&quot;non-municipals\\\&quot; or \\\&quot;industrials\\\&quot;. (optional)
     * @param pIpfti  (optional)
     * @param pAgoo Indicates whether to AND or OR the Owner/Operator parameter (p_owop) and the federal agency code (p_fa) parameters. (optional)
     * @param pIdt1 Beginning of date range of most recent facility inspection. (optional)
     * @param pIdt2 End of date range of most recent facility inspection. (optional)
     * @param pPityp Inspection Type Code.  See ICIS Compliance Monitor Types lookup serivce for a list of available codes and descriptions. (optional)
     * @param pPfead1 Formal Enforcement Action Date Range Start.  Enter a date in MM/DD/YYYY format to set the start of the range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfead2 Formal Enforcement Action Date Range End.  Enter a date in MM/DD/YYYY format to set the end of the date range for filtering by recent Formal Enforcement Action (FEA) taken against the facility within the last five years. (optional)
     * @param pPfeat Formal Enforcement Action (FEA) Code Filter.  Enter one or more three-letter FEA codes to restrict results to facilities with these attributes.  Use p_fead1 and p_fead2 parameters to further restrict this filter by entering a date range.  Provide multiple codes as a comma-delimited list. (optional)
     * @param pPccs Current Compliance Status: |||||||||||||||||||||||||||  Significant Noncompliance (SNC)  ||||||||||||||||||||||||||| - SNC &#x3D; E, S, X, T, D - E�&#x3D; E(EffViol) - S�&#x3D; S(CSchVio) - X &#x3D; X(EffNMth) - T &#x3D; T(CSchRpt) - D�&#x3D; D(DMR NR)  ||||||||||||||||||||||||||| Noncompliance (NC) ||||||||||||||||||||||||||| - NC &#x3D; N, V - N�&#x3D; N(RptViol) - V�&#x3D; V(NonRNCV)  ||||||||||||||||||||||||||| New Violations (PQV) ||||||||||||||||||||||||||| - PQV &#x3D; New Violations (13th Quarter)  ||||||||||||||||||||||||||| No Violations (NV) ||||||||||||||||||||||||||| - NV &#x3D; R, P, M, U, W , Blank, and No New Violations (no PQV) - R�&#x3D; R(Resolvd) - P�&#x3D; P(ResPend) - M�&#x3D; C(Manual) - U &#x3D; U(N/A) - W &#x3D; W(N/A) - Blank &#x3D; (null)  May contain multiple comma-separated values. (optional)
     * @param pPexcd 3-Year Effluent Exceedances Limiter.  Enter a value to restrict results to facilities with the given amount of exceedances in the past 3 years. - 0 &#x3D; facilities with no exceedances - GE0 &#x3D; facilities with one or more exceedances - GE10 &#x3D; facilities with ten or more exceedances - GE50 &#x3D; facilities with fifty or more exceedances - GE100 &#x3D; facilities with one hundred or more exceedances (optional)
     * @param pPsncq Quarters in Significant Noncompliance Limiter.  Enter a coded value to limit results to facilities with given quarter of significant noncompliance. - Z &#x3D; Zero quarters in significant noncompliance. - GEXX &#x3D; Replacing XX with a numeric value, that number of quarterd or more in significant noncompliance. - GTXX &#x3D; Replacing XX with a numeric value, more than that number of quarters in significant noncompliance. (optional)
     * @param pPctrack Compliance Tracking Limiter. Provide a keyword to indicate the extent to which data is being entered and effluent exceedances are being identified. - Off - Partial - On (optional)
     * @param pDwd Direct Water Discharges. Pounds of toxic chemicals released directly to surface water as reported to the Toxics Release Inventory. (optional)
     * @param pPt POTW Transfers. Pounds of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW) as reported to the Toxics Release Inventory. (optional)
     * @param pPdwdist Distance (in miles) to downstream drinking water intake. (optional)
     * @param pPswdpc Pollutant Category Code:  Values: WTR for Water, AIR for Air (optional)
     * @param pPswdmp Used to determine limit begin and end dates for surface water discharges. Number represents years from current date. (optional)
     * @param pPswpol For CWA, pollutant names for surface water discharges. for Drinking Water, SDWIS Violation contaminant codes for unaddressed violations that have occurred in the last 3 years. May contain multiple comma-separated values. (optional)
     * @param pPswcas CAS numbers for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswparam Parameter codes for surface water discharges. May contain multiple comma-separated values. (optional)
     * @param pPswvio Used in conjuction with parameters p_pswpol and p_pswparam, indicates whether search should only include pollutants with violations. (optional)
     * @param pWbd 2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pRadwbd 2-, 4-, 6-, 8-, 10-, or 12 character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Will search against WBD values otained by \\\&quot;reach indexing\\\&quot; NPDES permits against the medium resolution National Hydrography Dataset.  (optional)
     * @param pFrswbd Works exactly the same as the p_wbd parameter.  2-, 4-, 6-, 8-, 10-, or 12-character watershed (WBD from the USGS Watershed Boundary Dataset). May contain multiple comma-separated values.  Uses the FRS Best Pick Coordinate to obtain the WBD12 Huc value. (optional)
     * @param pFntype Controls type of text search performed on facility name with parameter p_fn. - EXACT &#x3D; Find facilities having the exact provided name(s). - BEGINS &#x3D; Find facilities with names starting with the provided term(s). - ALL &#x3D; Find facilities using Oracle text search terms. - CONTAINS &#x3D;  (optional)
     * @param pPidall Controls whether search is restricted to existing system. Y means the search will match the p_pid parameter against all associated permits (AIR, RCRA, SDWIS, etc). (optional)
     * @param pMonthsLastDmr The number of months since the last Discharge Monitoring Report has been submitted. (optional)
     * @param pLastDmrWithin W value returns facilities that have submitted DMRs within the number of months specified by p_months_last_dmr. An N value returns facilities that have not submitted a DMR within the specified number of months. (optional)
     * @param pIndsw Industrial Stormwater Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pMsgpPtype Multi-Sector General Purpose Permit Type.  Enter a value to filter results by MSGP Permit Type. - NOI &#x3D; Notice of Intent - NOE &#x3D; No Exposure Certification (optional)
     * @param pMonType For use with the Industrial Stormwater search only. Valid values are BENCHGS fro Benchmark (Alert Limit) G2 Ore, BENCH for Benchmark (Alert Limit), and ELG fro Effluent Limitation Guidelines(ELG)(Effluent Limit).   (optional)
     * @param pIagency Issuing Agency Limiter.  Enter a single value to filter results by the issuing agency, e.g. \\\&quot;State\\\&quot; or \\\&quot;EPA\\\&quot;. (optional)
     * @param pPermittingAgency  (optional)
     * @param pIsws Multi-Sector General Purpose Permit Subsector Individual Identifier.  Enter a value to filter results. (optional)
     * @param pIswss Multi-Sector General Purpose Permit Subsector Group Code.  Enter a value to filter results. (optional)
     * @param pIswssID Multi-Sector General Purpose Permit Sector Code.  Enter a value to filter results. (optional)
     * @param pDs1 Submitted Date Filter Start.  To filter by the date of submission, enter a start date here and an end date in the p_ds2 parameter.  Both dates are required for filtering. (optional)
     * @param pDs2 Submitted Date Filter End.  To filter by the date of submission, enter an end date here and a start date in the p_ds1 parameter.  Both dates are required for filtering. (optional)
     * @param pDa1 Active Date Filter Start.  To filter by the active date, enter a start date here and an end date in the p_da2 parameter.  Both dates are required for filtering. (optional)
     * @param pDa2 Active Date Filter End.  To filter by the active date, enter an end date here and a start date in the p_da1 parameter.  Both dates are required for filtering. (optional)
     * @param pMS4 Municipal Separate Storm Water Sewer (MS4) Permit Flag.  Enter a Y or N to filter results by this type of permit. (optional)
     * @param pOoFN Owner/Operator Name. Enter the owner/operator name of the facility. (optional)
     * @param pOoFNtype Owner/Operator Name Multiple Selection Evaluator.   (optional)
     * @param pOoSA Owner/Operator Address.  Enter the address of the owner/operator of the facility. (optional)
     * @param pOoSA1 Owner/Operator Address Line 2.  Enter the line 2 address of the owner/operator of the facility. (optional)
     * @param pOoCt Owner/Operator City. Enter the city where the owner/operator of the facility is located. (optional)
     * @param pOoSt Owner/Operator State.  Enter the standardized postal state code where the owner/operator of the facility is located. (optional)
     * @param pOoZip Owner/Operator Zip Code.  Enter the postal zip code where the owner/operator of the facility is located. (optional)
     * @param pFacIco FRS tribal land code flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land code. (optional)
     * @param pIcoo Indian country search and/or flag.  Enter \\\&quot;Y\\\&quot; to set indian country search conditions to return any results found using p_ico, p_fac_ico or p_fac_icoo.  Otherwise only results matching all provided p_ico, p_fac_ico or p_fac_icoo conditions will be returned. (optional)
     * @param pFacIcos FRS tribal land spatial flag.  Enter \\\&quot;Y\\\&quot; or \\\&quot;N\\\&quot; to include or exclude facilities based on FRS tribal land spatial flag. (optional)
     * @param pEjscreen Enter \\\&quot;Y\\\&quot; to limit facilities to Census block groups where one of more Environmental Justice indexes above 80th percentile. (optional)
     * @param pAlrexceed Alert Limits Exceedences Limiter.  Enter a numeric value to restrict results to facilities having the given amount or more of alert limits exceedances. (optional)
     * @param pLimitAddr Limit Address Search Flag.  Enter Y to restrict facility searches to native data source only.   (optional)
     * @param pLat Latitude location in decimal degrees. (optional)
     * @param pLong Longitude location in decimal degrees. (optional)
     * @param pRadius Spatial Search Radius.  Enter a radius up to 100 miles in which to spatially search for facilities. (optional)
     * @param pEjscreenOver80cnt The number of Environmenmt Justice Indicators above the 80th percentile.  Valid values are 1 through 11. (optional)
     * @param pBioFlag A Y value will select all biosolid-related permits. (optional)
     * @param pBioFacType The code indicating the reporting obligation reason:  - POT &#x3D; A POTW with a design flow rate equal to or greater than one million gallons per day - CLI &#x3D; A Class I Sludge Management Facility as defined in 40 CFR 503.9 - PPL &#x3D; A POTW that serves 10,000 people or more - OTH &#x3D; Otherwise required to report (e.g., permit condition, enforcement action) - NOA &#x3D; None of the above (optional)
     * @param pBioTrtmntProcs The biosolids or sewage sludge treatment process or processes at the facility:  - AER &#x3D; Aerobic Digestion - AIR &#x3D; Air Drying (or Sludge Drying Beds) - ANA &#x3D; Anaerobic Digestion - COD &#x3D; Beta Ray Irradiation - COM &#x3D; Lower Temperature Composting - DEW &#x3D; Pasteurization - DIS &#x3D; Gamma Ray Irradiation - HEA &#x3D; Heat Drying (e.g., Flash Dryer, Spray Dryer, Rotary Dryer) - HET &#x3D; Heat Treatment (Liquid Sewage Sludge Heated to 356 Deg. F/180 Deg. C or Higher for 30 min.) - HTC &#x3D; Higher Temperature Composting - MET &#x3D; Methane or Biogas Capture and Recovery - OTH &#x3D; Other Treatment Process - PRE &#x3D; Preliminary Operations (e.g., Sludge Grinding, Degritting, Blending) - SLU &#x3D; Sludge Lagoon - STA &#x3D; Lime Stabilization - THE &#x3D; Temporary Sludge Storage (Sewage Sludge Stored on Land 2 Years or Less, Not in Sewage Sludge Unit) - THI &#x3D; Thickening (Gravity and/or Flotation Thickening, Centrifugation, Belt Filter Press, Vacuum Filter) - THM &#x3D; Thermophilic Aerobic Digestion - UND &#x3D; Long-Term Sludge Storage (Sewage Sludge Stored on Land 2 Years or More, not in Sewage Sludge Unit)\\\&quot; (optional)
     * @param pBioAnalyMethodCatgry The unique code for the category of the analytic methods used by the facility to analyze regulated parameters (including enteric viruses, fecal coliforms, helminth ova, and Salmonella sp.) at the facility:  - PAT &#x3D; Pathogens - MET &#x3D; Metals - NIT &#x3D; Nitrogen Compounds - OTH &#x3D; Other Analytes (optional)
     * @param pBioTotalVolumeAmt Total annual amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.  - EQ0 &#x3D; 0 - IN0_1 &#x3D; GT 0 but LT 1 - IN0_289  &#x3D;  GT 0 but LT 290 MT/year - IN290_1499  &#x3D;  GE 290 but LT 1500 MT/year - IN1500_14999  &#x3D;  GE 1500 but LT 15,000 - GE15000  &#x3D;  GE 15,000 (optional)
     * @param pBioMgmtPrctceType The unique code that identifies the type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility. The facility will separately report the management practice for each biosolids or sewage sludge form and pathogen class. This data element will also identify the management practices used by surface disposal site owners/operators (see 40 CFR 503.24):  - BIN &#x3D; Incineration - BLN &#x3D; Land Application - BOT &#x3D; Other Management Practice - BSD &#x3D; Surface Disposal (optional)
     * @param pBioMgmtPrctceStype This is the code indicating additional detail about the type of Management Practice used for a volume of Biosolids or Sewage Sludge:  - ADV &#x3D; Advanced Alkaline Stabilized Biosolids Distribution &amp; Marketing - AGR &#x3D; Agricultural Land Application - COM &#x3D; Distribution and Marketing - Compost - DEE &#x3D; Deep-well Injection Disposal - DIS &#x3D; Disposal in a Municipal Landfill (under 40 CFR 258) - DMO &#x3D; Distribution and Marketing - Other - HEA &#x3D; Heat Dried Biosolids Distribution &amp; Marketing - OTL &#x3D; Other Land Application Management Practice Detail - OTO &#x3D; Other Management Practice Detail - RSA &#x3D; Reclamation Site Application - SEN &#x3D; Sent to Cement Kiln for Use as Alternative Energy - STO &#x3D; Storage - UIC &#x3D; Use in Construction - UPS &#x3D; Used in Production of Syngas - USE &#x3D; Use as Daily Cover for Municipal Landfill (under 40 CFR 258) (optional)
     * @param pBioMgmtPrctceHandler This is the code indicating the type of Biosolids or Sewage Sludge handlers/preparers.  - OWN &#x3D; Owner or Operator - OFF &#x3D; Off-Site Third-Party Handler or Preparer (optional)
     * @param pBioMgmtContainer The code that identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags. The facility separately reports the form for each biosolids or sewage sludge management practice or practices used by the facility and pathogen class:  - BUL &#x3D; Bulk - BAG &#x3D; Bag or Container (optional)
     * @param pBioMgmtPathogen This code identifies the pathogen class [e.g., Class A, Class B, Not Applicable (Incineration)] for biosolids or sewage sludge generated by the facility. The facility will separately report the pathogen class for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form. It also is used to filter applicable Pathogen Reduction and Vector Attraction Reduction Options as well as Land Application Management Practice Deficiencies. Only reqired for some of the mgmt. practice types:  - AAA &#x3D; Class A - AEQ &#x3D; Class A EQ (sale/give away) - BBB &#x3D; Class B - NAP &#x3D; Not Applicable (Incineration) (optional)
     * @param pBioMgmtPathred This is the description of the option used by the facility to control pathogen for a Biosolids Management Practice:  - A1 &#x3D; Class A - Alternative 1: Time/Temperature - A2 &#x3D; Class A - Alternative 2: pH/Temperature/Percent Solids - A3 &#x3D; Class A - Alternative 3: Test Enteric Viruses and Helminth ova; Operating Parameters - A4 &#x3D; Class A - Alternative 4: Test Enteric Viruses and Helminth ova; No New Solids - A51 &#x3D; Class A - Alternative 5: PFRP 1: Composting - A52 &#x3D; Class A - Alternative 5: PFRP 2: Heat Drying - A53 &#x3D; Class A - Alternative 5: PFRP 3: Liquid heat treatment - A54 &#x3D; Class A - Alternative 5: PFRP 4: Thermophilic Aerobic Digestion (ATAD) - A55 &#x3D; Class A - Alternative 5 PFPR 5: Beta Ray Irradiation - A56 &#x3D; Class A - Alternative 5 PFPR 6: Gamma Ray Irradiation - A57 &#x3D; Class A - Alternative 5: PFRP 7: Pasteurization - A6 &#x3D; Class A - Alternative 6: PFRP Equivalency - B1 &#x3D; Class B - Alternative 1: Fecal Coliform Geometric Mean - B21 &#x3D; Class B - Alternative 2 PSRP 1: Aerobic Digestion - B22 &#x3D; Class B - Alternative 2 PSRP 2: Air Drying - B23 &#x3D; Class B - Alternative 2 PSRP 3: Anaerobic Digestion - B24 &#x3D; Class B - Alternative 2 PSRP 4: Composting - B25 &#x3D; Class B - Alternative 2 PSRP 5: Lime Stabilization - B3 &#x3D; Class B - Alternative 3: PSRP Equivalency - PH &#x3D; pH Adjustment (Domestic Septage) (optional)
     * @param pBioMgmtVector The unique code that identifies the option used by the facility for vector attraction reduction. See a listing of these vector attraction reduction options at 40 CFR 503.33(b)(1) through (11). The facility will separately report the vector attraction reduction options for each biosolids or sewage sludge management practice used by the facility and by each biosolids or sewage sludge form as well as by each biosolids or sewage sludge pathogen class:  - VR1 &#x3D; Option 1 - Volatile Solids Reduction - VR2 &#x3D; Option 2 - Bench-Scale Volatile Solids Reduction (Anaerobic Bench Test) - VR3 &#x3D; Option 3 - Bench-Scale Volatile Solids Reduction (Aerobic Bench Test w/ Percent Solids - 2% or Less) - VR4 &#x3D; Option 4 - Specific Oxygen Uptake Rate - VR5 &#x3D; Option 5 - Aerobic Processing (Thermophilic Aerobic Digestion/Composting) - VR6 &#x3D; Option 6 - Alkaline Treatment - VR7 &#x3D; Option 7 - Drying (Equal to or Greater than 75 Percent) - VR8 &#x3D; Option 8 - Drying (Equal to or Greater than 90 Percent) - VR9 &#x3D; Option 9 - Sewage Sludge Injection - V10 &#x3D; Option 10 - Sewage Sludge Timely Incorporation into Land - V11 &#x3D; Option 11 - Sewage Sludge Covered at the End of Each Operating Day (optional)
     * @param pBioMgmtDefCategory This is the code indicating the type of NPDES special regulatory program deficiency:  - INC &#x3D; Biosolids Incineration - LNA &#x3D; Biosolids Land Application - LNB &#x3D; Biosolids Land Application - Pathogen Class B - OTB &#x3D; Biosolids Other Management Practice - SFD &#x3D; Biosolids Surface Disposal (optional)
     * @param pBioMgmtDeficiencies The number of times noncompliance was reported by the facility in the last 3 years. The results returned will include facilities whose number of reported noncompliance events is greater than or equal to the number entered. (optional)
     * @param pBioVioCode The Biosolids Single Event Violation Code.  Enter one or mode codes. (optional)
     * @param pBioCurrentVio Indicator of whether the facility is currently in violation for biosolids under the Clean Water Act, in the 12th or 13th quarter:  - Y &#x3D; Yes - N &#x3D; No (optional)
     * @param pBioQtrsInVio The number of quarters, in the last three years, where the facility was in violation for a biosolids violation type.  The results returned will include facilities whose number of quarters with violations is greater than or equal to the number entered. (optional)
     * @param pBioRptYear The last year that the permittee submitted an annual Biosolids report.  Valid values are NONE and any year greater or equal to 2016. (optional)
     * @param pBioVioLastYear Identifies if a biosolids violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param pMsgpRptYear The last year that a MSGP report was submitted for the permit.  Valid values are \\\&quot;NONE\\\&quot; and any year Greater or Eqal to 2015. (optional)
     * @param pVioLastYear Identifies if a permit violation has occured in the last year.  Valid values are Y and N. (optional)
     * @param responseset Response Set Limiter. Enter a value to limit the number of records per page. Value cannot exceed 1,000. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param pE90Count Number of E90 Exceedances.  Identifies water permits with a number of E90 (Effluient Exceedances) &gt;&#x3D; the value provided for the last number of years provided by the p_e90_years value. (optional)
     * @param pE90Years Number of years for the p_e90_count search.  Identified the past number of years to be used for the p_e90_count search. (optional)
     * @param pPsc Point Source Category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results will either be an array of Facilities or an array of Clusters. The search will return clusters if the number of facilities returned is greater than the resposeset size, otherwise individual facility records will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetFacilityInfoPostAsync(String output, String pFn, String pSa, String pSa1, String pCt, String pCo, String pFips, String pSt, String pZip, String pFrs, String pReg, String pSic, String pNcs, String pPen, BigDecimal xmin, BigDecimal ymin, BigDecimal xmax, BigDecimal ymax, String pUsmex, String pSic2, String pSic4, String pFa, String pFf, String pAct, String pMaj, String pMact, String pFea, BigDecimal pFeay, String pFeaa, String pIea, BigDecimal pIeay, String pIeaa, String pQiv, String pIv, String pImpw, String pImpPol, String pImpCauGrp, String pTrep, String pPm, String pPd, String pIco, String pHuc, String pPid, String pMed, String pYsl, BigDecimal pYsly, String pYsla, String pQs, String pSfs, BigDecimal pTribeid, String pTribename, BigDecimal pTribedist, String pPstat, String pPtype, String pPcomp, String pPlimits, String pPcss, String pPexp, String pOwop, String pIpfti, String pAgoo, String pIdt1, String pIdt2, String pPityp, String pPfead1, String pPfead2, String pPfeat, String pPccs, String pPexcd, String pPsncq, String pPctrack, String pDwd, String pPt, String pPdwdist, String pPswdpc, String pPswdmp, String pPswpol, String pPswcas, String pPswparam, String pPswvio, String pWbd, String pRadwbd, String pFrswbd, String pFntype, String pPidall, BigDecimal pMonthsLastDmr, String pLastDmrWithin, String pIndsw, String pMsgpPtype, String pMonType, String pIagency, String pPermittingAgency, String pIsws, String pIswss, String pIswssID, String pDs1, String pDs2, String pDa1, String pDa2, String pMS4, String pOoFN, String pOoFNtype, String pOoSA, String pOoSA1, String pOoCt, String pOoSt, String pOoZip, String pFacIco, String pIcoo, String pFacIcos, String pEjscreen, BigDecimal pAlrexceed, String pLimitAddr, BigDecimal pLat, BigDecimal pLong, BigDecimal pRadius, String pEjscreenOver80cnt, String pBioFlag, String pBioFacType, String pBioTrtmntProcs, String pBioAnalyMethodCatgry, String pBioTotalVolumeAmt, String pBioMgmtPrctceType, String pBioMgmtPrctceStype, String pBioMgmtPrctceHandler, String pBioMgmtContainer, String pBioMgmtPathogen, String pBioMgmtPathred, String pBioMgmtVector, String pBioMgmtDefCategory, BigDecimal pBioMgmtDeficiencies, String pBioVioCode, String pBioCurrentVio, BigDecimal pBioQtrsInVio, String pBioRptYear, String pBioVioLastYear, String pMsgpRptYear, String pVioLastYear, BigDecimal responseset, String paramCallback, String qcolumns, BigDecimal pPrettyPrint, BigDecimal pE90Count, BigDecimal pE90Years, String pPsc, final ApiCallback<CwaRestServicesGetFacilityInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetFacilityInfoPostValidateBeforeCall(output, pFn, pSa, pSa1, pCt, pCo, pFips, pSt, pZip, pFrs, pReg, pSic, pNcs, pPen, xmin, ymin, xmax, ymax, pUsmex, pSic2, pSic4, pFa, pFf, pAct, pMaj, pMact, pFea, pFeay, pFeaa, pIea, pIeay, pIeaa, pQiv, pIv, pImpw, pImpPol, pImpCauGrp, pTrep, pPm, pPd, pIco, pHuc, pPid, pMed, pYsl, pYsly, pYsla, pQs, pSfs, pTribeid, pTribename, pTribedist, pPstat, pPtype, pPcomp, pPlimits, pPcss, pPexp, pOwop, pIpfti, pAgoo, pIdt1, pIdt2, pPityp, pPfead1, pPfead2, pPfeat, pPccs, pPexcd, pPsncq, pPctrack, pDwd, pPt, pPdwdist, pPswdpc, pPswdmp, pPswpol, pPswcas, pPswparam, pPswvio, pWbd, pRadwbd, pFrswbd, pFntype, pPidall, pMonthsLastDmr, pLastDmrWithin, pIndsw, pMsgpPtype, pMonType, pIagency, pPermittingAgency, pIsws, pIswss, pIswssID, pDs1, pDs2, pDa1, pDa2, pMS4, pOoFN, pOoFNtype, pOoSA, pOoSA1, pOoCt, pOoSt, pOoZip, pFacIco, pIcoo, pFacIcos, pEjscreen, pAlrexceed, pLimitAddr, pLat, pLong, pRadius, pEjscreenOver80cnt, pBioFlag, pBioFacType, pBioTrtmntProcs, pBioAnalyMethodCatgry, pBioTotalVolumeAmt, pBioMgmtPrctceType, pBioMgmtPrctceStype, pBioMgmtPrctceHandler, pBioMgmtContainer, pBioMgmtPathogen, pBioMgmtPathred, pBioMgmtVector, pBioMgmtDefCategory, pBioMgmtDeficiencies, pBioVioCode, pBioCurrentVio, pBioQtrsInVio, pBioRptYear, pBioVioLastYear, pMsgpRptYear, pVioLastYear, responseset, paramCallback, qcolumns, pPrettyPrint, pE90Count, pE90Years, pPsc, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetFacilityInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetGeojsonGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetGeojsonGetCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetGeojsonGetValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetGeojsonGet(Async)");
        }

        return cwaRestServicesGetGeojsonGetCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return CwaRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetGeojsonGet200Response cwaRestServicesGetGeojsonGet(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<CwaRestServicesGetGeojsonGet200Response> localVarResp = cwaRestServicesGetGeojsonGetWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetGeojsonGet200Response> cwaRestServicesGetGeojsonGetWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetGeojsonGetAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<CwaRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetGeojsonGetValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetGeojsonPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetGeojsonPostCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_geojson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetGeojsonPostValidateBeforeCall(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetGeojsonPost(Async)");
        }

        return cwaRestServicesGetGeojsonPostCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return CwaRestServicesGetGeojsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetGeojsonGet200Response cwaRestServicesGetGeojsonPost(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<CwaRestServicesGetGeojsonGet200Response> localVarResp = cwaRestServicesGetGeojsonPostWithHttpInfo(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) GeoJSON Service
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetGeojsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetGeojsonGet200Response> cwaRestServicesGetGeojsonPostWithHttpInfo(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetGeojsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) GeoJSON Service (asynchronously)
     * Based on the QID obtained from a get_facilities or get_facility_info query, return GeoJSON of the facilities found.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - GEOJSON &#x3D; Facility results formatted as GeoJSON feature collection (default). - GEOJSONP &#x3D; Facility results formatted as GeoJSON feature collection with Padding. - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are formatted as a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetGeojsonPostAsync(String qid, String output, String paramCallback, BigDecimal newsort, String descending, String qcolumns, BigDecimal pPrettyPrint, final ApiCallback<CwaRestServicesGetGeojsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetGeojsonPostValidateBeforeCall(qid, output, paramCallback, newsort, descending, qcolumns, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetGeojsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetInfoClustersGet
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetInfoClustersGetCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (pQid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_qid", pQid));
        }

        if (pPrettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_pretty_print", pPrettyPrint));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetInfoClustersGetValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling cwaRestServicesGetInfoClustersGet(Async)");
        }

        return cwaRestServicesGetInfoClustersGetCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File cwaRestServicesGetInfoClustersGet(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = cwaRestServicesGetInfoClustersGetWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cwaRestServicesGetInfoClustersGetWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetInfoClustersGetAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetInfoClustersGetValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetInfoClustersPost
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetInfoClustersPostCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_info_clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (pQid != null) {
            localVarFormParams.put("p_qid", pQid);
        }

        if (pPrettyPrint != null) {
            localVarFormParams.put("p_pretty_print", pPrettyPrint);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetInfoClustersPostValidateBeforeCall(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pQid' is set
        if (pQid == null) {
            throw new ApiException("Missing the required parameter 'pQid' when calling cwaRestServicesGetInfoClustersPost(Async)");
        }

        return cwaRestServicesGetInfoClustersPostCall(pQid, output, pPrettyPrint, _callback);

    }

    /**
     * Clean Water Act (CWA) Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public File cwaRestServicesGetInfoClustersPost(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        ApiResponse<File> localVarResp = cwaRestServicesGetInfoClustersPostWithHttpInfo(pQid, output, pPrettyPrint);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Info Clusters Service
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cwaRestServicesGetInfoClustersPostWithHttpInfo(String pQid, String output, BigDecimal pPrettyPrint) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Info Clusters Service (asynchronously)
     * Based on the QID obtained from a clustered get_facility_info query, download cluster facility information as either a CSV or GEOJSON file.
     * @param pQid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - CSV &#x3D; Facility results formatted as comma delimited file download (default). - GEOJSOND &#x3D; Facility results formatted as GeoJSON feature collection download. (optional)
     * @param pPrettyPrint Optional flag to request GeoJSON formatted results to be pretty printed.  Only provide a numeric value when the output needs to be human readable as pretty printing has a performance cost. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are a comma separated value (CSV) file or a file containing a GeoJSON feature collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetInfoClustersPostAsync(String pQid, String output, BigDecimal pPrettyPrint, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetInfoClustersPostValidateBeforeCall(pQid, output, pPrettyPrint, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetMapGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetMapGetCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (tablelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tablelist", tablelist));
        }

        if (c1Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_lat", c1Lat));
        }

        if (c1Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c1_long", c1Long));
        }

        if (c2Lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_lat", c2Lat));
        }

        if (c2Long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c2_long", c2Long));
        }

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetMapGetValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetMapGet(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling cwaRestServicesGetMapGet(Async)");
        }

        return cwaRestServicesGetMapGetCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Clean Water Act (CWA) Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return CwaRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetMapGet200Response cwaRestServicesGetMapGet(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<CwaRestServicesGetMapGet200Response> localVarResp = cwaRestServicesGetMapGetWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetMapGet200Response> cwaRestServicesGetMapGetWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetMapGetAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<CwaRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetMapGetValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetMapPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetMapPostCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (tablelist != null) {
            localVarFormParams.put("tablelist", tablelist);
        }

        if (c1Lat != null) {
            localVarFormParams.put("c1_lat", c1Lat);
        }

        if (c1Long != null) {
            localVarFormParams.put("c1_long", c1Long);
        }

        if (c2Lat != null) {
            localVarFormParams.put("c2_lat", c2Lat);
        }

        if (c2Long != null) {
            localVarFormParams.put("c2_long", c2Long);
        }

        if (pId != null) {
            localVarFormParams.put("p_id", pId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetMapPostValidateBeforeCall(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetMapPost(Async)");
        }

        // verify the required parameter 'pId' is set
        if (pId == null) {
            throw new ApiException("Missing the required parameter 'pId' when calling cwaRestServicesGetMapPost(Async)");
        }

        return cwaRestServicesGetMapPostCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);

    }

    /**
     * Clean Water Act (CWA) Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return CwaRestServicesGetMapGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetMapGet200Response cwaRestServicesGetMapPost(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        ApiResponse<CwaRestServicesGetMapGet200Response> localVarResp = cwaRestServicesGetMapPostWithHttpInfo(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetMapGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetMapGet200Response> cwaRestServicesGetMapPostWithHttpInfo(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetMapGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Map Service (asynchronously)
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Nine-character code used to uniquely identify a permitted NPDES facility. The NPDES permit program regulates the direct discharge of pollutants into US waters. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetMapPostAsync(String qid, String pId, String output, String paramCallback, String tablelist, BigDecimal c1Lat, BigDecimal c1Long, BigDecimal c2Lat, BigDecimal c2Long, final ApiCallback<CwaRestServicesGetMapGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetMapPostValidateBeforeCall(qid, pId, output, paramCallback, tablelist, c1Lat, c1Long, c2Lat, c2Long, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetMapGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetQidGet
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetQidGetCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (qid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qid", qid));
        }

        if (pageno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageno", pageno));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (newsort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newsort", newsort));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (qcolumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qcolumns", qcolumns));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetQidGetValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetQidGet(Async)");
        }

        return cwaRestServicesGetQidGetCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Clean Water Act (CWA) Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return CwaRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetQidGet200Response cwaRestServicesGetQidGet(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<CwaRestServicesGetQidGet200Response> localVarResp = cwaRestServicesGetQidGetWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetQidGet200Response> cwaRestServicesGetQidGetWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Paginated Results Service (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetQidGetAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<CwaRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetQidGetValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cwaRestServicesGetQidPost
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetQidPostCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwa_rest_services.get_qid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (output != null) {
            localVarFormParams.put("output", output);
        }

        if (qid != null) {
            localVarFormParams.put("qid", qid);
        }

        if (pageno != null) {
            localVarFormParams.put("pageno", pageno);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (newsort != null) {
            localVarFormParams.put("newsort", newsort);
        }

        if (descending != null) {
            localVarFormParams.put("descending", descending);
        }

        if (qcolumns != null) {
            localVarFormParams.put("qcolumns", qcolumns);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cwaRestServicesGetQidPostValidateBeforeCall(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling cwaRestServicesGetQidPost(Async)");
        }

        return cwaRestServicesGetQidPostCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);

    }

    /**
     * Clean Water Act (CWA) Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return CwaRestServicesGetQidGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public CwaRestServicesGetQidGet200Response cwaRestServicesGetQidPost(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        ApiResponse<CwaRestServicesGetQidGet200Response> localVarResp = cwaRestServicesGetQidPostWithHttpInfo(qid, output, pageno, paramCallback, newsort, descending, qcolumns);
        return localVarResp.getData();
    }

    /**
     * Clean Water Act (CWA) Paginated Results Service
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @return ApiResponse&lt;CwaRestServicesGetQidGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CwaRestServicesGetQidGet200Response> cwaRestServicesGetQidPostWithHttpInfo(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns) throws ApiException {
        okhttp3.Call localVarCall = cwaRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, null);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetQidGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean Water Act (CWA) Paginated Results Service (asynchronously)
     * GET_QID is passed with a query ID corresponding to a previously run get_facilities query. It then returns a Facility object containing all matching facilities. The main purpose of GET_QID is for large querysets that contain multiple pages (responsesets) of output. GET_QID allows for pagination and for the selection and sorting of columns. 
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param pageno Indicates the number of the page to display. It is used only when the results are paginated. (optional, default to 1.0)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param newsort Output Sort Column.  Enter the number of the column on which the data will be sorted. If unpopulated results will sort on the first column. (optional)
     * @param descending Output Sort Column Descending Flag.  Enter Y to column identified in the newsort parameter descending.  Enter N to use ascending sort order. Used only when newsort parameter is populated. (optional)
     * @param qcolumns Used to customize service output.  A list of comma-separated column IDs of output objects that will be returned in the service query object or download.  Use the metadata service endpoint for a complete list of Ids and definitions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results are an array (page)  of CWA (ICIS NPDES) Facilities with the number of facilities equal to the responseset (page size). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cwaRestServicesGetQidPostAsync(String qid, String output, BigDecimal pageno, String paramCallback, BigDecimal newsort, String descending, String qcolumns, final ApiCallback<CwaRestServicesGetQidGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cwaRestServicesGetQidPostValidateBeforeCall(qid, output, pageno, paramCallback, newsort, descending, qcolumns, _callback);
        Type localVarReturnType = new TypeToken<CwaRestServicesGetQidGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
