/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeoJSON Properties Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:43.792236-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cwa10 {
  public static final String SERIALIZED_NAME_AI_R_I_DS = "AIRIDs";
  @SerializedName(SERIALIZED_NAME_AI_R_I_DS)
  private String aiRIDs;

  public static final String SERIALIZED_NAME_ACTIVE_LOWER48 = "ActiveLower48";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOWER48)
  private String activeLower48;

  public static final String SERIALIZED_NAME_ALR_EXCEEDENCES = "AlrExceedences";
  @SerializedName(SERIALIZED_NAME_ALR_EXCEEDENCES)
  private String alrExceedences;

  public static final String SERIALIZED_NAME_ASSOCIATED_POLLUTANT = "AssociatedPollutant";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_POLLUTANT)
  private String associatedPollutant;

  public static final String SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG = "AttainsAquaticLifeUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_AQUATIC_LIFE_USE_FLG)
  private String attainsAquaticLifeUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_AU_CATEGORY = "AttainsAuCategory";
  @SerializedName(SERIALIZED_NAME_ATTAINS_AU_CATEGORY)
  private String attainsAuCategory;

  public static final String SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS = "AttainsCauseGroups";
  @SerializedName(SERIALIZED_NAME_ATTAINS_CAUSE_GROUPS)
  private String attainsCauseGroups;

  public static final String SERIALIZED_NAME_ATTAINS_CYCLE_YEAR = "AttainsCycleYear";
  @SerializedName(SERIALIZED_NAME_ATTAINS_CYCLE_YEAR)
  private String attainsCycleYear;

  public static final String SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG = "AttainsExceptnlUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_EXCEPTNL_USE_FLG)
  private String attainsExceptnlUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_IMP_WATER_FLG = "AttainsImpWaterFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_IMP_WATER_FLG)
  private String attainsImpWaterFlg;

  public static final String SERIALIZED_NAME_ATTAINS_POSSIBLE_N_P_D_E_S_PARAMS = "AttainsPossibleNPDESParams";
  @SerializedName(SERIALIZED_NAME_ATTAINS_POSSIBLE_N_P_D_E_S_PARAMS)
  private String attainsPossibleNPDESParams;

  public static final String SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG = "AttainsRecreationUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_RECREATION_USE_FLG)
  private String attainsRecreationUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_SHELLFISH_USE_FLG = "AttainsShellfishUseFlg";
  @SerializedName(SERIALIZED_NAME_ATTAINS_SHELLFISH_USE_FLG)
  private String attainsShellfishUseFlg;

  public static final String SERIALIZED_NAME_ATTAINS_SOURCE = "AttainsSource";
  @SerializedName(SERIALIZED_NAME_ATTAINS_SOURCE)
  private String attainsSource;

  public static final String SERIALIZED_NAME_ATTAINS_STATE_CAUSES = "AttainsStateCauses";
  @SerializedName(SERIALIZED_NAME_ATTAINS_STATE_CAUSES)
  private String attainsStateCauses;

  public static final String SERIALIZED_NAME_BEACH_CLOSE_LAST2YRS_FLG = "BeachCloseLast2yrsFlg";
  @SerializedName(SERIALIZED_NAME_BEACH_CLOSE_LAST2YRS_FLG)
  private String beachCloseLast2yrsFlg;

  public static final String SERIALIZED_NAME_BEACH_CLOSE_LAST_YEAR_FLG = "BeachCloseLastYearFlg";
  @SerializedName(SERIALIZED_NAME_BEACH_CLOSE_LAST_YEAR_FLG)
  private String beachCloseLastYearFlg;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS = "BioAnalyMethodCatgrys";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS)
  private String bioAnalyMethodCatgrys;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS2016 = "BioAnalyMethodCatgrys2016";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS2016)
  private String bioAnalyMethodCatgrys2016;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS2017 = "BioAnalyMethodCatgrys2017";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHOD_CATGRYS2017)
  private String bioAnalyMethodCatgrys2017;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHODS = "BioAnalyMethods";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHODS)
  private String bioAnalyMethods;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHODS2016 = "BioAnalyMethods2016";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHODS2016)
  private String bioAnalyMethods2016;

  public static final String SERIALIZED_NAME_BIO_ANALY_METHODS2017 = "BioAnalyMethods2017";
  @SerializedName(SERIALIZED_NAME_BIO_ANALY_METHODS2017)
  private String bioAnalyMethods2017;

  public static final String SERIALIZED_NAME_BIO_COMMENT_TEXT = "BioCommentText";
  @SerializedName(SERIALIZED_NAME_BIO_COMMENT_TEXT)
  private String bioCommentText;

  public static final String SERIALIZED_NAME_BIO_COMMENT_TEXT2016 = "BioCommentText2016";
  @SerializedName(SERIALIZED_NAME_BIO_COMMENT_TEXT2016)
  private String bioCommentText2016;

  public static final String SERIALIZED_NAME_BIO_COMMENT_TEXT2017 = "BioCommentText2017";
  @SerializedName(SERIALIZED_NAME_BIO_COMMENT_TEXT2017)
  private String bioCommentText2017;

  public static final String SERIALIZED_NAME_BIO_INCINERATION_SUM = "BioIncinerationSum";
  @SerializedName(SERIALIZED_NAME_BIO_INCINERATION_SUM)
  private BigDecimal bioIncinerationSum;

  public static final String SERIALIZED_NAME_BIO_INCINERATION_SUM2016 = "BioIncinerationSum2016";
  @SerializedName(SERIALIZED_NAME_BIO_INCINERATION_SUM2016)
  private BigDecimal bioIncinerationSum2016;

  public static final String SERIALIZED_NAME_BIO_INCINERATION_SUM2017 = "BioIncinerationSum2017";
  @SerializedName(SERIALIZED_NAME_BIO_INCINERATION_SUM2017)
  private BigDecimal bioIncinerationSum2017;

  public static final String SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM = "BioLandApplicationSum";
  @SerializedName(SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM)
  private BigDecimal bioLandApplicationSum;

  public static final String SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM2016 = "BioLandApplicationSum2016";
  @SerializedName(SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM2016)
  private BigDecimal bioLandApplicationSum2016;

  public static final String SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM2017 = "BioLandApplicationSum2017";
  @SerializedName(SERIALIZED_NAME_BIO_LAND_APPLICATION_SUM2017)
  private BigDecimal bioLandApplicationSum2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_CONTAINERS = "BioMgmtContainers";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_CONTAINERS)
  private String bioMgmtContainers;

  public static final String SERIALIZED_NAME_BIO_MGMT_CONTAINERS2016 = "BioMgmtContainers2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_CONTAINERS2016)
  private String bioMgmtContainers2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_CONTAINERS2017 = "BioMgmtContainers2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_CONTAINERS2017)
  private String bioMgmtContainers2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES = "BioMgmtDefCategories";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES)
  private String bioMgmtDefCategories;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES2016 = "BioMgmtDefCategories2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES2016)
  private String bioMgmtDefCategories2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES2017 = "BioMgmtDefCategories2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CATEGORIES2017)
  private String bioMgmtDefCategories2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT = "BioMgmtDefCurrentCnt";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT)
  private BigDecimal bioMgmtDefCurrentCnt;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT2016 = "BioMgmtDefCurrentCnt2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT2016)
  private BigDecimal bioMgmtDefCurrentCnt2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT2017 = "BioMgmtDefCurrentCnt2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEF_CURRENT_CNT2017)
  private BigDecimal bioMgmtDefCurrentCnt2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES = "BioMgmtDeficiencies";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES)
  private String bioMgmtDeficiencies;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES2016 = "BioMgmtDeficiencies2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES2016)
  private String bioMgmtDeficiencies2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES2017 = "BioMgmtDeficiencies2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_DEFICIENCIES2017)
  private String bioMgmtDeficiencies2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_HANDLERS = "BioMgmtHandlers";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_HANDLERS)
  private String bioMgmtHandlers;

  public static final String SERIALIZED_NAME_BIO_MGMT_HANDLERS2016 = "BioMgmtHandlers2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_HANDLERS2016)
  private String bioMgmtHandlers2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_HANDLERS2017 = "BioMgmtHandlers2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_HANDLERS2017)
  private String bioMgmtHandlers2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHOGENS = "BioMgmtPathogens";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHOGENS)
  private String bioMgmtPathogens;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHOGENS2016 = "BioMgmtPathogens2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHOGENS2016)
  private String bioMgmtPathogens2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHOGENS2017 = "BioMgmtPathogens2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHOGENS2017)
  private String bioMgmtPathogens2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHREDS = "BioMgmtPathreds";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHREDS)
  private String bioMgmtPathreds;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHREDS2016 = "BioMgmtPathreds2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHREDS2016)
  private String bioMgmtPathreds2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_PATHREDS2017 = "BioMgmtPathreds2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PATHREDS2017)
  private String bioMgmtPathreds2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES = "BioMgmtPrctceStypes";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES)
  private String bioMgmtPrctceStypes;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES2016 = "BioMgmtPrctceStypes2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES2016)
  private String bioMgmtPrctceStypes2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES2017 = "BioMgmtPrctceStypes2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_STYPES2017)
  private String bioMgmtPrctceStypes2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES = "BioMgmtPrctceTypes";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES)
  private String bioMgmtPrctceTypes;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES2016 = "BioMgmtPrctceTypes2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES2016)
  private String bioMgmtPrctceTypes2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES2017 = "BioMgmtPrctceTypes2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_PRCTCE_TYPES2017)
  private String bioMgmtPrctceTypes2017;

  public static final String SERIALIZED_NAME_BIO_MGMT_VECTORS = "BioMgmtVectors";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_VECTORS)
  private String bioMgmtVectors;

  public static final String SERIALIZED_NAME_BIO_MGMT_VECTORS2016 = "BioMgmtVectors2016";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_VECTORS2016)
  private String bioMgmtVectors2016;

  public static final String SERIALIZED_NAME_BIO_MGMT_VECTORS2017 = "BioMgmtVectors2017";
  @SerializedName(SERIALIZED_NAME_BIO_MGMT_VECTORS2017)
  private String bioMgmtVectors2017;

  public static final String SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM = "BioOtherManagementSum";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM)
  private BigDecimal bioOtherManagementSum;

  public static final String SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM2016 = "BioOtherManagementSum2016";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM2016)
  private BigDecimal bioOtherManagementSum2016;

  public static final String SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM2017 = "BioOtherManagementSum2017";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MANAGEMENT_SUM2017)
  private BigDecimal bioOtherManagementSum2017;

  public static final String SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS = "BioOtherMgmtPrctcTxts";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS)
  private String bioOtherMgmtPrctcTxts;

  public static final String SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS2016 = "BioOtherMgmtPrctcTxts2016";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS2016)
  private String bioOtherMgmtPrctcTxts2016;

  public static final String SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS2017 = "BioOtherMgmtPrctcTxts2017";
  @SerializedName(SERIALIZED_NAME_BIO_OTHER_MGMT_PRCTC_TXTS2017)
  private String bioOtherMgmtPrctcTxts2017;

  public static final String SERIALIZED_NAME_BIO_QTRS_WITH_VIO = "BioQtrsWithVio";
  @SerializedName(SERIALIZED_NAME_BIO_QTRS_WITH_VIO)
  private BigDecimal bioQtrsWithVio;

  public static final String SERIALIZED_NAME_BIO_REPORT_DATE = "BioReportDate";
  @SerializedName(SERIALIZED_NAME_BIO_REPORT_DATE)
  private String bioReportDate;

  public static final String SERIALIZED_NAME_BIO_REPORT_DATE2016 = "BioReportDate2016";
  @SerializedName(SERIALIZED_NAME_BIO_REPORT_DATE2016)
  private String bioReportDate2016;

  public static final String SERIALIZED_NAME_BIO_REPORT_DATE2017 = "BioReportDate2017";
  @SerializedName(SERIALIZED_NAME_BIO_REPORT_DATE2017)
  private String bioReportDate2017;

  public static final String SERIALIZED_NAME_BIO_REPORT_YEAR = "BioReportYear";
  @SerializedName(SERIALIZED_NAME_BIO_REPORT_YEAR)
  private String bioReportYear;

  public static final String SERIALIZED_NAME_BIO_REPORT_YEARS = "BioReportYears";
  @SerializedName(SERIALIZED_NAME_BIO_REPORT_YEARS)
  private String bioReportYears;

  public static final String SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS = "BioReportingObligations";
  @SerializedName(SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS)
  private String bioReportingObligations;

  public static final String SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS2016 = "BioReportingObligations2016";
  @SerializedName(SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS2016)
  private String bioReportingObligations2016;

  public static final String SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS2017 = "BioReportingObligations2017";
  @SerializedName(SERIALIZED_NAME_BIO_REPORTING_OBLIGATIONS2017)
  private String bioReportingObligations2017;

  public static final String SERIALIZED_NAME_BIO_SURFACE_DISP_SUM = "BioSurfaceDispSum";
  @SerializedName(SERIALIZED_NAME_BIO_SURFACE_DISP_SUM)
  private BigDecimal bioSurfaceDispSum;

  public static final String SERIALIZED_NAME_BIO_SURFACE_DISP_SUM2016 = "BioSurfaceDispSum2016";
  @SerializedName(SERIALIZED_NAME_BIO_SURFACE_DISP_SUM2016)
  private BigDecimal bioSurfaceDispSum2016;

  public static final String SERIALIZED_NAME_BIO_SURFACE_DISP_SUM2017 = "BioSurfaceDispSum2017";
  @SerializedName(SERIALIZED_NAME_BIO_SURFACE_DISP_SUM2017)
  private BigDecimal bioSurfaceDispSum2017;

  public static final String SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT = "BioTotalVolumeAmt";
  @SerializedName(SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT)
  private BigDecimal bioTotalVolumeAmt;

  public static final String SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT2016 = "BioTotalVolumeAmt2016";
  @SerializedName(SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT2016)
  private BigDecimal bioTotalVolumeAmt2016;

  public static final String SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT2017 = "BioTotalVolumeAmt2017";
  @SerializedName(SERIALIZED_NAME_BIO_TOTAL_VOLUME_AMT2017)
  private BigDecimal bioTotalVolumeAmt2017;

  public static final String SERIALIZED_NAME_BIO_TRMNT_PRCSS_CMNT_TXTS2016 = "BioTrmntPrcssCmntTxts2016";
  @SerializedName(SERIALIZED_NAME_BIO_TRMNT_PRCSS_CMNT_TXTS2016)
  private String bioTrmntPrcssCmntTxts2016;

  public static final String SERIALIZED_NAME_BIO_TRMNT_PRCSS_CMNT_TXTS2017 = "BioTrmntPrcssCmntTxts2017";
  @SerializedName(SERIALIZED_NAME_BIO_TRMNT_PRCSS_CMNT_TXTS2017)
  private String bioTrmntPrcssCmntTxts2017;

  public static final String SERIALIZED_NAME_BIO_TRTMNT_PRCSS_CMMNT_TXTS = "BioTrtmntPrcssCmmntTxts";
  @SerializedName(SERIALIZED_NAME_BIO_TRTMNT_PRCSS_CMMNT_TXTS)
  private String bioTrtmntPrcssCmmntTxts;

  public static final String SERIALIZED_NAME_BIO_TRTMNT_PROCESSES = "BioTrtmntProcesses";
  @SerializedName(SERIALIZED_NAME_BIO_TRTMNT_PROCESSES)
  private String bioTrtmntProcesses;

  public static final String SERIALIZED_NAME_BIO_TRTMNT_PROCESSES2016 = "BioTrtmntProcesses2016";
  @SerializedName(SERIALIZED_NAME_BIO_TRTMNT_PROCESSES2016)
  private String bioTrtmntProcesses2016;

  public static final String SERIALIZED_NAME_BIO_TRTMNT_PROCESSES2017 = "BioTrtmntProcesses2017";
  @SerializedName(SERIALIZED_NAME_BIO_TRTMNT_PROCESSES2017)
  private String bioTrtmntProcesses2017;

  public static final String SERIALIZED_NAME_BIO_VIO_LAST_YEAR = "BioVioLastYear";
  @SerializedName(SERIALIZED_NAME_BIO_VIO_LAST_YEAR)
  private BigDecimal bioVioLastYear;

  public static final String SERIALIZED_NAME_BIO_VIO_LAST_YEAR_FLAG = "BioVioLastYearFlag";
  @SerializedName(SERIALIZED_NAME_BIO_VIO_LAST_YEAR_FLAG)
  private String bioVioLastYearFlag;

  public static final String SERIALIZED_NAME_BIO_VIO_STATUS = "BioVioStatus";
  @SerializedName(SERIALIZED_NAME_BIO_VIO_STATUS)
  private BigDecimal bioVioStatus;

  public static final String SERIALIZED_NAME_BIO_VIOL_FLAG = "BioViolFlag";
  @SerializedName(SERIALIZED_NAME_BIO_VIOL_FLAG)
  private BigDecimal bioViolFlag;

  public static final String SERIALIZED_NAME_BIOSOLIDS_FLAG = "BiosolidsFlag";
  @SerializedName(SERIALIZED_NAME_BIOSOLIDS_FLAG)
  private String biosolidsFlag;

  public static final String SERIALIZED_NAME_CW_P13QTRS_COMPL_HISTORY = "CWP13qtrsComplHistory";
  @SerializedName(SERIALIZED_NAME_CW_P13QTRS_COMPL_HISTORY)
  private String cwP13qtrsComplHistory;

  public static final String SERIALIZED_NAME_CW_P_ACTUAL_AVERAGE_FLOW_NMBR = "CWPActualAverageFlowNmbr";
  @SerializedName(SERIALIZED_NAME_CW_P_ACTUAL_AVERAGE_FLOW_NMBR)
  private BigDecimal cwPActualAverageFlowNmbr;

  public static final String SERIALIZED_NAME_CW_P_BIO_FEA_COUNT = "CWPBioFeaCount";
  @SerializedName(SERIALIZED_NAME_CW_P_BIO_FEA_COUNT)
  private BigDecimal cwPBioFeaCount;

  public static final String SERIALIZED_NAME_CW_P_BIO_IEA_COUNT = "CWPBioIeaCount";
  @SerializedName(SERIALIZED_NAME_CW_P_BIO_IEA_COUNT)
  private BigDecimal cwPBioIeaCount;

  public static final String SERIALIZED_NAME_CW_P_BIO_INSP_COUNT = "CWPBioInspCount";
  @SerializedName(SERIALIZED_NAME_CW_P_BIO_INSP_COUNT)
  private BigDecimal cwPBioInspCount;

  public static final String SERIALIZED_NAME_CW_P_BIO_PENALTIES = "CWPBioPenalties";
  @SerializedName(SERIALIZED_NAME_CW_P_BIO_PENALTIES)
  private BigDecimal cwPBioPenalties;

  public static final String SERIALIZED_NAME_CW_P_CASE_I_DS = "CWPCaseIDs";
  @SerializedName(SERIALIZED_NAME_CW_P_CASE_I_DS)
  private String cwPCaseIDs;

  public static final String SERIALIZED_NAME_CW_P_CITY = "CWPCity";
  @SerializedName(SERIALIZED_NAME_CW_P_CITY)
  private String cwPCity;

  public static final String SERIALIZED_NAME_CW_P_COMPLIANCE_TRACKING = "CWPComplianceTracking";
  @SerializedName(SERIALIZED_NAME_CW_P_COMPLIANCE_TRACKING)
  private String cwPComplianceTracking;

  public static final String SERIALIZED_NAME_CW_P_COUNTY = "CWPCounty";
  @SerializedName(SERIALIZED_NAME_CW_P_COUNTY)
  private String cwPCounty;

  public static final String SERIALIZED_NAME_CW_P_CSO_FLAG = "CWPCsoFlag";
  @SerializedName(SERIALIZED_NAME_CW_P_CSO_FLAG)
  private String cwPCsoFlag;

  public static final String SERIALIZED_NAME_CW_P_CSO_OUTFALLS = "CWPCsoOutfalls";
  @SerializedName(SERIALIZED_NAME_CW_P_CSO_OUTFALLS)
  private String cwPCsoOutfalls;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA = "CWPDateLastBioFea";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA)
  private String cwPDateLastBioFea;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA_E_P_A = "CWPDateLastBioFeaEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA_E_P_A)
  private String cwPDateLastBioFeaEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA_ST = "CWPDateLastBioFeaSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_FEA_ST)
  private String cwPDateLastBioFeaSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA = "CWPDateLastBioIea";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA)
  private String cwPDateLastBioIea;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA_E_P_A = "CWPDateLastBioIeaEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA_E_P_A)
  private String cwPDateLastBioIeaEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA_ST = "CWPDateLastBioIeaSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_IEA_ST)
  private String cwPDateLastBioIeaSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP = "CWPDateLastBioInsp";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP)
  private String cwPDateLastBioInsp;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP_E_P_A = "CWPDateLastBioInspEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP_E_P_A)
  private String cwPDateLastBioInspEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP_ST = "CWPDateLastBioInspSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_INSP_ST)
  private String cwPDateLastBioInspSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_BIO_PENALTY = "CWPDateLastBioPenalty";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_BIO_PENALTY)
  private String cwPDateLastBioPenalty;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_FEA = "CWPDateLastFea";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_FEA)
  private String cwPDateLastFea;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_FEA_E_P_A = "CWPDateLastFeaEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_FEA_E_P_A)
  private String cwPDateLastFeaEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_FEA_ST = "CWPDateLastFeaSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_FEA_ST)
  private String cwPDateLastFeaSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_IEA_E_P_A = "CWPDateLastIeaEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_IEA_E_P_A)
  private String cwPDateLastIeaEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_IEA_ST = "CWPDateLastIeaSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_IEA_ST)
  private String cwPDateLastIeaSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_INFORMAL_EA = "CWPDateLastInformalEa";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_INFORMAL_EA)
  private String cwPDateLastInformalEa;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_INSP_E_P_A = "CWPDateLastInspEPA";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_INSP_E_P_A)
  private String cwPDateLastInspEPA;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_INSP_ST = "CWPDateLastInspSt";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_INSP_ST)
  private String cwPDateLastInspSt;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_INSPECTION = "CWPDateLastInspection";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_INSPECTION)
  private String cwPDateLastInspection;

  public static final String SERIALIZED_NAME_CW_P_DATE_LAST_PENALTY = "CWPDateLastPenalty";
  @SerializedName(SERIALIZED_NAME_CW_P_DATE_LAST_PENALTY)
  private String cwPDateLastPenalty;

  public static final String SERIALIZED_NAME_CW_P_DAYS_LAST_BIO_INSP = "CWPDaysLastBioInsp";
  @SerializedName(SERIALIZED_NAME_CW_P_DAYS_LAST_BIO_INSP)
  private String cwPDaysLastBioInsp;

  public static final String SERIALIZED_NAME_CW_P_DAYS_LAST_INSPECTION = "CWPDaysLastInspection";
  @SerializedName(SERIALIZED_NAME_CW_P_DAYS_LAST_INSPECTION)
  private BigDecimal cwPDaysLastInspection;

  public static final String SERIALIZED_NAME_CW_P_E90_CNT = "CWPE90Cnt";
  @SerializedName(SERIALIZED_NAME_CW_P_E90_CNT)
  private BigDecimal cwPE90Cnt;

  public static final String SERIALIZED_NAME_CW_P_E_P_A_REGION = "CWPEPARegion";
  @SerializedName(SERIALIZED_NAME_CW_P_E_P_A_REGION)
  private String cwPEPARegion;

  public static final String SERIALIZED_NAME_CW_P_EFFECTIVE_DATE = "CWPEffectiveDate";
  @SerializedName(SERIALIZED_NAME_CW_P_EFFECTIVE_DATE)
  private String cwPEffectiveDate;

  public static final String SERIALIZED_NAME_CW_P_EXPIRATION_DATE = "CWPExpirationDate";
  @SerializedName(SERIALIZED_NAME_CW_P_EXPIRATION_DATE)
  private String cwPExpirationDate;

  public static final String SERIALIZED_NAME_CW_P_F_I_P_S_CODE = "CWPFIPSCode";
  @SerializedName(SERIALIZED_NAME_CW_P_F_I_P_S_CODE)
  private String cwPFIPSCode;

  public static final String SERIALIZED_NAME_CW_P_FACILITY_TYPE_CODE = "CWPFacilityTypeCode";
  @SerializedName(SERIALIZED_NAME_CW_P_FACILITY_TYPE_CODE)
  private String cwPFacilityTypeCode;

  public static final String SERIALIZED_NAME_CW_P_FACILITY_TYPE_INDICATOR = "CWPFacilityTypeIndicator";
  @SerializedName(SERIALIZED_NAME_CW_P_FACILITY_TYPE_INDICATOR)
  private String cwPFacilityTypeIndicator;

  public static final String SERIALIZED_NAME_CW_P_FORMAL_EA_CNT = "CWPFormalEaCnt";
  @SerializedName(SERIALIZED_NAME_CW_P_FORMAL_EA_CNT)
  private String cwPFormalEaCnt;

  public static final String SERIALIZED_NAME_CW_P_IMP_WATER_FLG = "CWPImpWaterFlg";
  @SerializedName(SERIALIZED_NAME_CW_P_IMP_WATER_FLG)
  private String cwPImpWaterFlg;

  public static final String SERIALIZED_NAME_CW_P_INDIAN_CNTRY_FLG = "CWPIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_CW_P_INDIAN_CNTRY_FLG)
  private String cwPIndianCntryFlg;

  public static final String SERIALIZED_NAME_CW_P_INFORMAL_ENF_ACT_COUNT = "CWPInformalEnfActCount";
  @SerializedName(SERIALIZED_NAME_CW_P_INFORMAL_ENF_ACT_COUNT)
  private BigDecimal cwPInformalEnfActCount;

  public static final String SERIALIZED_NAME_CW_P_INSPECTION_COUNT = "CWPInspectionCount";
  @SerializedName(SERIALIZED_NAME_CW_P_INSPECTION_COUNT)
  private BigDecimal cwPInspectionCount;

  public static final String SERIALIZED_NAME_CW_P_ISSUE_DATE = "CWPIssueDate";
  @SerializedName(SERIALIZED_NAME_CW_P_ISSUE_DATE)
  private String cwPIssueDate;

  public static final String SERIALIZED_NAME_CW_P_MAJOR_MINOR_STATUS_FLAG = "CWPMajorMinorStatusFlag";
  @SerializedName(SERIALIZED_NAME_CW_P_MAJOR_MINOR_STATUS_FLAG)
  private String cwPMajorMinorStatusFlag;

  public static final String SERIALIZED_NAME_CW_P_N_A_I_C_S_CODES = "CWPNAICSCodes";
  @SerializedName(SERIALIZED_NAME_CW_P_N_A_I_C_S_CODES)
  private String cwPNAICSCodes;

  public static final String SERIALIZED_NAME_CW_P_NAME = "CWPName";
  @SerializedName(SERIALIZED_NAME_CW_P_NAME)
  private String cwPName;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_STATUS_CODE = "CWPPermitStatusCode";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_STATUS_CODE)
  private String cwPPermitStatusCode;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_STATUS_DESC = "CWPPermitStatusDesc";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_STATUS_DESC)
  private String cwPPermitStatusDesc;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_TYPE_CODE = "CWPPermitTypeCode";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_TYPE_CODE)
  private String cwPPermitTypeCode;

  public static final String SERIALIZED_NAME_CW_P_PERMIT_TYPE_DESC = "CWPPermitTypeDesc";
  @SerializedName(SERIALIZED_NAME_CW_P_PERMIT_TYPE_DESC)
  private String cwPPermitTypeDesc;

  public static final String SERIALIZED_NAME_CW_P_QTRS_WITH_N_C = "CWPQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_CW_P_QTRS_WITH_N_C)
  private BigDecimal cwPQtrsWithNC;

  public static final String SERIALIZED_NAME_CW_P_QTRS_WITH_S_N_C = "CWPQtrsWithSNC";
  @SerializedName(SERIALIZED_NAME_CW_P_QTRS_WITH_S_N_C)
  private BigDecimal cwPQtrsWithSNC;

  public static final String SERIALIZED_NAME_CW_P_S_I_C_CODES = "CWPSICCodes";
  @SerializedName(SERIALIZED_NAME_CW_P_S_I_C_CODES)
  private String cwPSICCodes;

  public static final String SERIALIZED_NAME_CW_P_S_N_C_EVENT_DESC = "CWPSNCEventDesc";
  @SerializedName(SERIALIZED_NAME_CW_P_S_N_C_EVENT_DESC)
  private String cwPSNCEventDesc;

  public static final String SERIALIZED_NAME_CW_P_S_N_C_STATUS = "CWPSNCStatus";
  @SerializedName(SERIALIZED_NAME_CW_P_S_N_C_STATUS)
  private String cwPSNCStatus;

  public static final String SERIALIZED_NAME_CW_P_S_N_C_STATUS_DATE = "CWPSNCStatusDate";
  @SerializedName(SERIALIZED_NAME_CW_P_S_N_C_STATUS_DATE)
  private String cwPSNCStatusDate;

  public static final String SERIALIZED_NAME_CW_P_STATE = "CWPState";
  @SerializedName(SERIALIZED_NAME_CW_P_STATE)
  private String cwPState;

  public static final String SERIALIZED_NAME_CW_P_STATE_DISTRICT = "CWPStateDistrict";
  @SerializedName(SERIALIZED_NAME_CW_P_STATE_DISTRICT)
  private String cwPStateDistrict;

  public static final String SERIALIZED_NAME_CW_P_STATE_WATER_BODY_CODE = "CWPStateWaterBodyCode";
  @SerializedName(SERIALIZED_NAME_CW_P_STATE_WATER_BODY_CODE)
  private String cwPStateWaterBodyCode;

  public static final String SERIALIZED_NAME_CW_P_STATE_WATER_BODY_NAME = "CWPStateWaterBodyName";
  @SerializedName(SERIALIZED_NAME_CW_P_STATE_WATER_BODY_NAME)
  private String cwPStateWaterBodyName;

  public static final String SERIALIZED_NAME_CW_P_STATUS = "CWPStatus";
  @SerializedName(SERIALIZED_NAME_CW_P_STATUS)
  private String cwPStatus;

  public static final String SERIALIZED_NAME_CW_P_STREET = "CWPStreet";
  @SerializedName(SERIALIZED_NAME_CW_P_STREET)
  private String cwPStreet;

  public static final String SERIALIZED_NAME_CW_P_T_R_IBAL_LAND_CODE = "CWPTRIbalLandCode";
  @SerializedName(SERIALIZED_NAME_CW_P_T_R_IBAL_LAND_CODE)
  private String cwPTRIbalLandCode;

  public static final String SERIALIZED_NAME_CW_P_TERMINATION_DATE = "CWPTerminationDate";
  @SerializedName(SERIALIZED_NAME_CW_P_TERMINATION_DATE)
  private String cwPTerminationDate;

  public static final String SERIALIZED_NAME_CW_P_TOTAL_DESIGN_FLOW_NMBR = "CWPTotalDesignFlowNmbr";
  @SerializedName(SERIALIZED_NAME_CW_P_TOTAL_DESIGN_FLOW_NMBR)
  private BigDecimal cwPTotalDesignFlowNmbr;

  public static final String SERIALIZED_NAME_CW_P_TOTAL_PENALTIES = "CWPTotalPenalties";
  @SerializedName(SERIALIZED_NAME_CW_P_TOTAL_PENALTIES)
  private String cwPTotalPenalties;

  public static final String SERIALIZED_NAME_CW_P_VERSION_NMBR = "CWPVersionNmbr";
  @SerializedName(SERIALIZED_NAME_CW_P_VERSION_NMBR)
  private BigDecimal cwPVersionNmbr;

  public static final String SERIALIZED_NAME_CW_P_VIO_STATUS = "CWPVioStatus";
  @SerializedName(SERIALIZED_NAME_CW_P_VIO_STATUS)
  private String cwPVioStatus;

  public static final String SERIALIZED_NAME_CW_P_VIOL_STATUS = "CWPViolStatus";
  @SerializedName(SERIALIZED_NAME_CW_P_VIOL_STATUS)
  private String cwPViolStatus;

  public static final String SERIALIZED_NAME_CW_P_ZIP = "CWPZip";
  @SerializedName(SERIALIZED_NAME_CW_P_ZIP)
  private String cwPZip;

  public static final String SERIALIZED_NAME_CALCULATED_ACCURACY_METERS = "CalculatedAccuracyMeters";
  @SerializedName(SERIALIZED_NAME_CALCULATED_ACCURACY_METERS)
  private BigDecimal calculatedAccuracyMeters;

  public static final String SERIALIZED_NAME_CENSUS_BLOCK_GROUP = "CensusBlockGroup";
  @SerializedName(SERIALIZED_NAME_CENSUS_BLOCK_GROUP)
  private String censusBlockGroup;

  public static final String SERIALIZED_NAME_CERTIFIED_DATE = "CertifiedDate";
  @SerializedName(SERIALIZED_NAME_CERTIFIED_DATE)
  private String certifiedDate;

  public static final String SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG = "ChesapeakeBayFlag";
  @SerializedName(SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG)
  private String chesapeakeBayFlag;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "CollectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_CONTROL_MEASURE = "ControlMeasure";
  @SerializedName(SERIALIZED_NAME_CONTROL_MEASURE)
  private String controlMeasure;

  public static final String SERIALIZED_NAME_CONTROL_MEASURE_SCHEDULE = "ControlMeasureSchedule";
  @SerializedName(SERIALIZED_NAME_CONTROL_MEASURE_SCHEDULE)
  private String controlMeasureSchedule;

  public static final String SERIALIZED_NAME_CURR_SV_FLAG = "CurrSvFlag";
  @SerializedName(SERIALIZED_NAME_CURR_SV_FLAG)
  private BigDecimal currSvFlag;

  public static final String SERIALIZED_NAME_CURR_VIO_FLAG = "CurrVioFlag";
  @SerializedName(SERIALIZED_NAME_CURR_VIO_FLAG)
  private BigDecimal currVioFlag;

  public static final String SERIALIZED_NAME_DM_R_IMPAIRED_POLL = "DMRImpairedPoll";
  @SerializedName(SERIALIZED_NAME_DM_R_IMPAIRED_POLL)
  private String dmRImpairedPoll;

  public static final String SERIALIZED_NAME_DM_R_POUNDS = "DMRPounds";
  @SerializedName(SERIALIZED_NAME_DM_R_POUNDS)
  private BigDecimal dmRPounds;

  public static final String SERIALIZED_NAME_DM_R_TWPE = "DMRTwpe";
  @SerializedName(SERIALIZED_NAME_DM_R_TWPE)
  private BigDecimal dmRTwpe;

  public static final String SERIALIZED_NAME_DSCH_TO_MS4 = "DschToMs4";
  @SerializedName(SERIALIZED_NAME_DSCH_TO_MS4)
  private String dschToMs4;

  public static final String SERIALIZED_NAME_E90_EXCEEDS1YR = "E90Exceeds1yr";
  @SerializedName(SERIALIZED_NAME_E90_EXCEEDS1YR)
  private String e90Exceeds1yr;

  public static final String SERIALIZED_NAME_E90_EXCEEDS2YR = "E90Exceeds2yr";
  @SerializedName(SERIALIZED_NAME_E90_EXCEEDS2YR)
  private String e90Exceeds2yr;

  public static final String SERIALIZED_NAME_E90_EXCEEDS3YR = "E90Exceeds3yr";
  @SerializedName(SERIALIZED_NAME_E90_EXCEEDS3YR)
  private String e90Exceeds3yr;

  public static final String SERIALIZED_NAME_E90_EXCEEDS4YR = "E90Exceeds4yr";
  @SerializedName(SERIALIZED_NAME_E90_EXCEEDS4YR)
  private String e90Exceeds4yr;

  public static final String SERIALIZED_NAME_E90_EXCEEDS5YR = "E90Exceeds5yr";
  @SerializedName(SERIALIZED_NAME_E90_EXCEEDS5YR)
  private String e90Exceeds5yr;

  public static final String SERIALIZED_NAME_E90_POLLUTANTS1YR = "E90Pollutants1yr";
  @SerializedName(SERIALIZED_NAME_E90_POLLUTANTS1YR)
  private String e90Pollutants1yr;

  public static final String SERIALIZED_NAME_E90_POLLUTANTS2YR = "E90Pollutants2yr";
  @SerializedName(SERIALIZED_NAME_E90_POLLUTANTS2YR)
  private String e90Pollutants2yr;

  public static final String SERIALIZED_NAME_E90_POLLUTANTS3YR = "E90Pollutants3yr";
  @SerializedName(SERIALIZED_NAME_E90_POLLUTANTS3YR)
  private String e90Pollutants3yr;

  public static final String SERIALIZED_NAME_E90_POLLUTANTS4YR = "E90Pollutants4yr";
  @SerializedName(SERIALIZED_NAME_E90_POLLUTANTS4YR)
  private String e90Pollutants4yr;

  public static final String SERIALIZED_NAME_E90_POLLUTANTS5YR = "E90Pollutants5yr";
  @SerializedName(SERIALIZED_NAME_E90_POLLUTANTS5YR)
  private String e90Pollutants5yr;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_EA5YR_FLAG = "Ea5yrFlag";
  @SerializedName(SERIALIZED_NAME_EA5YR_FLAG)
  private BigDecimal ea5yrFlag;

  public static final String SERIALIZED_NAME_EFF_CHARTS_FLAG = "EffChartsFlag";
  @SerializedName(SERIALIZED_NAME_EFF_CHARTS_FLAG)
  private String effChartsFlag;

  public static final String SERIALIZED_NAME_EFF_EXCEEDS = "EffExceeds";
  @SerializedName(SERIALIZED_NAME_EFF_EXCEEDS)
  private BigDecimal effExceeds;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG = "EjscreenFlag";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG)
  private String ejscreenFlag;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG_US = "EjscreenFlagUs";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG_US)
  private String ejscreenFlagUs;

  public static final String SERIALIZED_NAME_ELECTR_RPT_WAIVER_EFF_DATE = "ElectrRptWaiverEffDate";
  @SerializedName(SERIALIZED_NAME_ELECTR_RPT_WAIVER_EFF_DATE)
  private String electrRptWaiverEffDate;

  public static final String SERIALIZED_NAME_ELECTR_RPT_WAIVER_EXP_DATE = "ElectrRptWaiverExpDate";
  @SerializedName(SERIALIZED_NAME_ELECTR_RPT_WAIVER_EXP_DATE)
  private String electrRptWaiverExpDate;

  public static final String SERIALIZED_NAME_ELECTR_RPT_WAIVER_TYPE_CODE = "ElectrRptWaiverTypeCode";
  @SerializedName(SERIALIZED_NAME_ELECTR_RPT_WAIVER_TYPE_CODE)
  private String electrRptWaiverTypeCode;

  public static final String SERIALIZED_NAME_ELECTR_RPT_WAIVER_TYPE_DESC = "ElectrRptWaiverTypeDesc";
  @SerializedName(SERIALIZED_NAME_ELECTR_RPT_WAIVER_TYPE_DESC)
  private String electrRptWaiverTypeDesc;

  public static final String SERIALIZED_NAME_ELECTR_SUBMISSION_TYPE_CODE = "ElectrSubmissionTypeCode";
  @SerializedName(SERIALIZED_NAME_ELECTR_SUBMISSION_TYPE_CODE)
  private String electrSubmissionTypeCode;

  public static final String SERIALIZED_NAME_ELECTR_SUBMISSION_TYPE_DESC = "ElectrSubmissionTypeDesc";
  @SerializedName(SERIALIZED_NAME_ELECTR_SUBMISSION_TYPE_DESC)
  private String electrSubmissionTypeDesc;

  public static final String SERIALIZED_NAME_EXPOSED_ACTIVITY = "ExposedActivity";
  @SerializedName(SERIALIZED_NAME_EXPOSED_ACTIVITY)
  private String exposedActivity;

  public static final String SERIALIZED_NAME_FAC_COUNTY_NAME = "FacCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_COUNTY_NAME)
  private String facCountyName;

  public static final String SERIALIZED_NAME_FAC_DERIVED_HUC = "FacDerivedHuc";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_HUC)
  private String facDerivedHuc;

  public static final String SERIALIZED_NAME_FAC_DERIVED_T_R_IBES = "FacDerivedTRIbes";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_T_R_IBES)
  private String facDerivedTRIbes;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D = "FacDerivedWBD";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D)
  private String facDerivedWBD;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8 = "FacDerivedWBDHu8";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8)
  private String facDerivedWBDHu8;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8_NAME = "FacDerivedWBDHu8Name";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_HU8_NAME)
  private String facDerivedWBDHu8Name;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME = "FacDerivedWBDName";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME)
  private String facDerivedWBDName;

  public static final String SERIALIZED_NAME_FAC_F_I_P_S_CODE = "FacFIPSCode";
  @SerializedName(SERIALIZED_NAME_FAC_F_I_P_S_CODE)
  private String facFIPSCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE = "FacFederalAgencyCode";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE)
  private String facFederalAgencyCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME = "FacFederalAgencyName";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME)
  private String facFederalAgencyName;

  public static final String SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG = "FacIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG)
  private String facIndianCntryFlg;

  public static final String SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG = "FacIndianSpatialFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG)
  private String facIndianSpatialFlg;

  public static final String SERIALIZED_NAME_FAC_MAP_FLG = "FacMapFlg";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_FLG)
  private String facMapFlg;

  public static final String SERIALIZED_NAME_FAC_MAP_ICON = "FacMapIcon";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_ICON)
  private String facMapIcon;

  public static final String SERIALIZED_NAME_FAC_PERCENT_MINORITY = "FacPercentMinority";
  @SerializedName(SERIALIZED_NAME_FAC_PERCENT_MINORITY)
  private BigDecimal facPercentMinority;

  public static final String SERIALIZED_NAME_FAC_POP_DEN = "FacPopDen";
  @SerializedName(SERIALIZED_NAME_FAC_POP_DEN)
  private BigDecimal facPopDen;

  public static final String SERIALIZED_NAME_FAC_STD_COUNTY_NAME = "FacStdCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_STD_COUNTY_NAME)
  private String facStdCountyName;

  public static final String SERIALIZED_NAME_FAC_T_R_I_POTW_TRANS = "FacTRIPotwTrans";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_POTW_TRANS)
  private String facTRIPotwTrans;

  public static final String SERIALIZED_NAME_FAC_T_R_I_REPORTER = "FacTRIReporter";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_REPORTER)
  private String facTRIReporter;

  public static final String SERIALIZED_NAME_FAC_T_R_I_SW_REL = "FacTRISwRel";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_SW_REL)
  private String facTRISwRel;

  public static final String SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG = "FacUsMexBorderFlg";
  @SerializedName(SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG)
  private String facUsMexBorderFlg;

  public static final String SERIALIZED_NAME_HISTORIC_CRITERION_CODE = "HistoricCriterionCode";
  @SerializedName(SERIALIZED_NAME_HISTORIC_CRITERION_CODE)
  private String historicCriterionCode;

  public static final String SERIALIZED_NAME_INDSW_FLAG = "IndswFlag";
  @SerializedName(SERIALIZED_NAME_INDSW_FLAG)
  private String indswFlag;

  public static final String SERIALIZED_NAME_INFEA5YR_FLAG = "Infea5yrFlag";
  @SerializedName(SERIALIZED_NAME_INFEA5YR_FLAG)
  private BigDecimal infea5yrFlag;

  public static final String SERIALIZED_NAME_INSP5YR_FLAG = "Insp5yrFlag";
  @SerializedName(SERIALIZED_NAME_INSP5YR_FLAG)
  private BigDecimal insp5yrFlag;

  public static final String SERIALIZED_NAME_INSP_DEF5YR_CNT = "InspDef5yrCnt";
  @SerializedName(SERIALIZED_NAME_INSP_DEF5YR_CNT)
  private BigDecimal inspDef5yrCnt;

  public static final String SERIALIZED_NAME_ISSUING_AGENCY = "IssuingAgency";
  @SerializedName(SERIALIZED_NAME_ISSUING_AGENCY)
  private String issuingAgency;

  public static final String SERIALIZED_NAME_LAST_D_M_R_VALUE_RCVD_DATE = "LastDMRValueRcvdDate";
  @SerializedName(SERIALIZED_NAME_LAST_D_M_R_VALUE_RCVD_DATE)
  private String lastDMRValueRcvdDate;

  public static final String SERIALIZED_NAME_LIM_POLLUTANT = "LimPollutant";
  @SerializedName(SERIALIZED_NAME_LIM_POLLUTANT)
  private String limPollutant;

  public static final String SERIALIZED_NAME_LOWER48 = "Lower48";
  @SerializedName(SERIALIZED_NAME_LOWER48)
  private String lower48;

  public static final String SERIALIZED_NAME_MAP = "Map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_MASTER_EXTERNAL_PERMIT_NMBR = "MasterExternalPermitNmbr";
  @SerializedName(SERIALIZED_NAME_MASTER_EXTERNAL_PERMIT_NMBR)
  private String masterExternalPermitNmbr;

  public static final String SERIALIZED_NAME_MAX_PCTILE_US = "MaxPctileUs";
  @SerializedName(SERIALIZED_NAME_MAX_PCTILE_US)
  private BigDecimal maxPctileUs;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private BigDecimal maxScore;

  public static final String SERIALIZED_NAME_MISS_D_M_R_QTRS = "MissDMRQtrs";
  @SerializedName(SERIALIZED_NAME_MISS_D_M_R_QTRS)
  private BigDecimal missDMRQtrs;

  public static final String SERIALIZED_NAME_MSGP_CORRECTIVE_ACTION_SMMRY = "MsgpCorrectiveActionSmmry";
  @SerializedName(SERIALIZED_NAME_MSGP_CORRECTIVE_ACTION_SMMRY)
  private String msgpCorrectiveActionSmmry;

  public static final String SERIALIZED_NAME_MSGP_FACILITY_INSPCTN_SMMRY = "MsgpFacilityInspctnSmmry";
  @SerializedName(SERIALIZED_NAME_MSGP_FACILITY_INSPCTN_SMMRY)
  private String msgpFacilityInspctnSmmry;

  public static final String SERIALIZED_NAME_MSGP_LAST_REPORT_YEAR = "MsgpLastReportYear";
  @SerializedName(SERIALIZED_NAME_MSGP_LAST_REPORT_YEAR)
  private String msgpLastReportYear;

  public static final String SERIALIZED_NAME_MSGP_NO_FURTHER_RDCTN_RTNLE = "MsgpNoFurtherRdctnRtnle";
  @SerializedName(SERIALIZED_NAME_MSGP_NO_FURTHER_RDCTN_RTNLE)
  private String msgpNoFurtherRdctnRtnle;

  public static final String SERIALIZED_NAME_MSGP_PERMIT_TYPE = "MsgpPermitType";
  @SerializedName(SERIALIZED_NAME_MSGP_PERMIT_TYPE)
  private String msgpPermitType;

  public static final String SERIALIZED_NAME_MSGP_VISUAL_ASSESSMENT_SMMRY = "MsgpVisualAssessmentSmmry";
  @SerializedName(SERIALIZED_NAME_MSGP_VISUAL_ASSESSMENT_SMMRY)
  private String msgpVisualAssessmentSmmry;

  public static final String SERIALIZED_NAME_NP_D_E_S_DATA_GROUPS = "NPDESDataGroups";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_DATA_GROUPS)
  private String npDESDataGroups;

  public static final String SERIALIZED_NAME_NP_D_E_S_DATA_GROUPS_DESCS = "NPDESDataGroupsDescs";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_DATA_GROUPS_DESCS)
  private String npDESDataGroupsDescs;

  public static final String SERIALIZED_NAME_NP_D_E_S_I_DS = "NPDESIDs";
  @SerializedName(SERIALIZED_NAME_NP_D_E_S_I_DS)
  private String npDESIDs;

  public static final String SERIALIZED_NAME_OTHER_PERMIT_I_DS = "OtherPermitIDs";
  @SerializedName(SERIALIZED_NAME_OTHER_PERMIT_I_DS)
  private String otherPermitIDs;

  public static final String SERIALIZED_NAME_OVER80_COUNT_US = "Over80CountUs";
  @SerializedName(SERIALIZED_NAME_OVER80_COUNT_US)
  private BigDecimal over80CountUs;

  public static final String SERIALIZED_NAME_PAST_CAL_YR_AVERAGE_FLOW = "PastCalYrAverageFlow";
  @SerializedName(SERIALIZED_NAME_PAST_CAL_YR_AVERAGE_FLOW)
  private String pastCalYrAverageFlow;

  public static final String SERIALIZED_NAME_PAST_CAL_YR_CONV_POL_OVR_LMT = "PastCalYrConvPolOvrLmt";
  @SerializedName(SERIALIZED_NAME_PAST_CAL_YR_CONV_POL_OVR_LMT)
  private BigDecimal pastCalYrConvPolOvrLmt;

  public static final String SERIALIZED_NAME_PAST_CAL_YR_CONV_POLLUTANTS = "PastCalYrConvPollutants";
  @SerializedName(SERIALIZED_NAME_PAST_CAL_YR_CONV_POLLUTANTS)
  private String pastCalYrConvPollutants;

  public static final String SERIALIZED_NAME_PAST_CAL_YR_TOXIC_POL_OVR_LMT = "PastCalYrToxicPolOvrLmt";
  @SerializedName(SERIALIZED_NAME_PAST_CAL_YR_TOXIC_POL_OVR_LMT)
  private BigDecimal pastCalYrToxicPolOvrLmt;

  public static final String SERIALIZED_NAME_PAST_CAL_YR_TOXIC_POLLUTANTS = "PastCalYrToxicPollutants";
  @SerializedName(SERIALIZED_NAME_PAST_CAL_YR_TOXIC_POLLUTANTS)
  private String pastCalYrToxicPollutants;

  public static final String SERIALIZED_NAME_PCTILE_CANCER_US = "PctileCancerUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_CANCER_US)
  private BigDecimal pctileCancerUs;

  public static final String SERIALIZED_NAME_PCTILE_DPM_US = "PctileDpmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_DPM_US)
  private BigDecimal pctileDpmUs;

  public static final String SERIALIZED_NAME_PCTILE_O3_US = "PctileO3Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_O3_US)
  private BigDecimal pctileO3Us;

  public static final String SERIALIZED_NAME_PCTILE_PCTPRE1960_US = "PctilePctpre1960Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_PCTPRE1960_US)
  private BigDecimal pctilePctpre1960Us;

  public static final String SERIALIZED_NAME_PCTILE_PM_US = "PctilePmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PM_US)
  private BigDecimal pctilePmUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US = "PctileProximityNPDESUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US)
  private BigDecimal pctileProximityNPDESUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US = "PctileProximityNplUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US)
  private BigDecimal pctileProximityNplUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US = "PctileProximityRmpUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US)
  private BigDecimal pctileProximityRmpUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US = "PctileProximityTsdfUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US)
  private BigDecimal pctileProximityTsdfUs;

  public static final String SERIALIZED_NAME_PCTILE_RESP_US = "PctileRespUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_RESP_US)
  private BigDecimal pctileRespUs;

  public static final String SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US = "PctileTrafficScoreUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US)
  private BigDecimal pctileTrafficScoreUs;

  public static final String SERIALIZED_NAME_PERMIT_COMPONENTS = "PermitComponents";
  @SerializedName(SERIALIZED_NAME_PERMIT_COMPONENTS)
  private String permitComponents;

  public static final String SERIALIZED_NAME_PERMIT_NAME = "PermitName";
  @SerializedName(SERIALIZED_NAME_PERMIT_NAME)
  private String permitName;

  public static final String SERIALIZED_NAME_PERMITTING_AGENCY = "PermittingAgency";
  @SerializedName(SERIALIZED_NAME_PERMITTING_AGENCY)
  private String permittingAgency;

  public static final String SERIALIZED_NAME_POLL_WITH_VIOLATION = "PollWithViolation";
  @SerializedName(SERIALIZED_NAME_POLL_WITH_VIOLATION)
  private String pollWithViolation;

  public static final String SERIALIZED_NAME_RC_R_A_I_DS = "RCRAIDs";
  @SerializedName(SERIALIZED_NAME_RC_R_A_I_DS)
  private String rcRAIDs;

  public static final String SERIALIZED_NAME_RAD_GNIS_NAME = "RadGnisName";
  @SerializedName(SERIALIZED_NAME_RAD_GNIS_NAME)
  private String radGnisName;

  public static final String SERIALIZED_NAME_RAD_HU12_NAME = "RadHu12Name";
  @SerializedName(SERIALIZED_NAME_RAD_HU12_NAME)
  private String radHu12Name;

  public static final String SERIALIZED_NAME_RAD_REACHCODE = "RadReachcode";
  @SerializedName(SERIALIZED_NAME_RAD_REACHCODE)
  private String radReachcode;

  public static final String SERIALIZED_NAME_RAD_W_B_D_HU8 = "RadWBDHu8";
  @SerializedName(SERIALIZED_NAME_RAD_W_B_D_HU8)
  private String radWBDHu8;

  public static final String SERIALIZED_NAME_RAD_W_B_D_HU8_NAME = "RadWBDHu8Name";
  @SerializedName(SERIALIZED_NAME_RAD_W_B_D_HU8_NAME)
  private String radWBDHu8Name;

  public static final String SERIALIZED_NAME_RAD_W_B_D_HUC12 = "RadWBDHuc12";
  @SerializedName(SERIALIZED_NAME_RAD_W_B_D_HUC12)
  private String radWBDHuc12;

  public static final String SERIALIZED_NAME_RECEIVING_MS4_NAME = "ReceivingMs4Name";
  @SerializedName(SERIALIZED_NAME_RECEIVING_MS4_NAME)
  private String receivingMs4Name;

  public static final String SERIALIZED_NAME_REFERENCE_POINT = "ReferencePoint";
  @SerializedName(SERIALIZED_NAME_REFERENCE_POINT)
  private String referencePoint;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_RMP_I_DS = "RmpIDs";
  @SerializedName(SERIALIZED_NAME_RMP_I_DS)
  private String rmpIDs;

  public static final String SERIALIZED_NAME_SD_W_A_I_DS = "SDWAIDs";
  @SerializedName(SERIALIZED_NAME_SD_W_A_I_DS)
  private String sdWAIDs;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_SECTOR = "Sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private String sector;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_SPECIES_CRITICAL_HABITAL_FLAG = "SpeciesCriticalHabitalFlag";
  @SerializedName(SERIALIZED_NAME_SPECIES_CRITICAL_HABITAL_FLAG)
  private String speciesCriticalHabitalFlag;

  public static final String SERIALIZED_NAME_STATE_AUTH_BIOSOLIDS = "StateAuthBiosolids";
  @SerializedName(SERIALIZED_NAME_STATE_AUTH_BIOSOLIDS)
  private String stateAuthBiosolids;

  public static final String SERIALIZED_NAME_STATE_AUTH_FEDFAC = "StateAuthFedfac";
  @SerializedName(SERIALIZED_NAME_STATE_AUTH_FEDFAC)
  private String stateAuthFedfac;

  public static final String SERIALIZED_NAME_STATE_AUTH_GEN = "StateAuthGen";
  @SerializedName(SERIALIZED_NAME_STATE_AUTH_GEN)
  private String stateAuthGen;

  public static final String SERIALIZED_NAME_STATE_AUTH_N_P_D_E_S = "StateAuthNPDES";
  @SerializedName(SERIALIZED_NAME_STATE_AUTH_N_P_D_E_S)
  private String stateAuthNPDES;

  public static final String SERIALIZED_NAME_STATE_AUTH_PRETREAT = "StateAuthPretreat";
  @SerializedName(SERIALIZED_NAME_STATE_AUTH_PRETREAT)
  private String stateAuthPretreat;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public static final String SERIALIZED_NAME_STORM_WATER_AREA = "StormWaterArea";
  @SerializedName(SERIALIZED_NAME_STORM_WATER_AREA)
  private String stormWaterArea;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "SubmittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private String submittedDate;

  public static final String SERIALIZED_NAME_SUBSECTOR = "Subsector";
  @SerializedName(SERIALIZED_NAME_SUBSECTOR)
  private String subsector;

  public static final String SERIALIZED_NAME_SWPPP_URL = "SwpppUrl";
  @SerializedName(SERIALIZED_NAME_SWPPP_URL)
  private String swpppUrl;

  public static final String SERIALIZED_NAME_TR_I_I_DS = "TRIIDs";
  @SerializedName(SERIALIZED_NAME_TR_I_I_DS)
  private String trIIDs;

  public static final String SERIALIZED_NAME_TR_IBAL_FLAG = "TRIbalFlag";
  @SerializedName(SERIALIZED_NAME_TR_IBAL_FLAG)
  private BigDecimal trIbalFlag;

  public static final String SERIALIZED_NAME_TYPE_OF_MONITORING = "TypeOfMonitoring";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_MONITORING)
  private String typeOfMonitoring;

  public static final String SERIALIZED_NAME_TYPE_OF_WATER = "TypeOfWater";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_WATER)
  private String typeOfWater;

  public static final String SERIALIZED_NAME_VIO_LAST_YEAR = "VioLastYear";
  @SerializedName(SERIALIZED_NAME_VIO_LAST_YEAR)
  private BigDecimal vioLastYear;

  public static final String SERIALIZED_NAME_VIOL_FLAG = "ViolFlag";
  @SerializedName(SERIALIZED_NAME_VIOL_FLAG)
  private BigDecimal violFlag;

  public static final String SERIALIZED_NAME_WEB_DOCS = "WebDocs";
  @SerializedName(SERIALIZED_NAME_WEB_DOCS)
  private String webDocs;

  public Cwa10() {
  }

  public Cwa10 aiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return aiRIDs
   */
  @javax.annotation.Nonnull
  public String getAiRIDs() {
    return aiRIDs;
  }

  public void setAiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
  }


  public Cwa10 activeLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
    return this;
  }

  /**
   * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
   * @return activeLower48
   */
  @javax.annotation.Nonnull
  public String getActiveLower48() {
    return activeLower48;
  }

  public void setActiveLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
  }


  public Cwa10 alrExceedences(String alrExceedences) {
    this.alrExceedences = alrExceedences;
    return this;
  }

  /**
   * Get alrExceedences
   * @return alrExceedences
   */
  @javax.annotation.Nonnull
  public String getAlrExceedences() {
    return alrExceedences;
  }

  public void setAlrExceedences(String alrExceedences) {
    this.alrExceedences = alrExceedences;
  }


  public Cwa10 associatedPollutant(String associatedPollutant) {
    this.associatedPollutant = associatedPollutant;
    return this;
  }

  /**
   * Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.
   * @return associatedPollutant
   */
  @javax.annotation.Nonnull
  public String getAssociatedPollutant() {
    return associatedPollutant;
  }

  public void setAssociatedPollutant(String associatedPollutant) {
    this.associatedPollutant = associatedPollutant;
  }


  public Cwa10 attainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.
   * @return attainsAquaticLifeUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsAquaticLifeUseFlg() {
    return attainsAquaticLifeUseFlg;
  }

  public void setAttainsAquaticLifeUseFlg(String attainsAquaticLifeUseFlg) {
    this.attainsAquaticLifeUseFlg = attainsAquaticLifeUseFlg;
  }


  public Cwa10 attainsAuCategory(String attainsAuCategory) {
    this.attainsAuCategory = attainsAuCategory;
    return this;
  }

  /**
   * The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  &#x3D; Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  &#x3D; Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a &#x3D; TMDL completed. A TMDL has been completed, but impairment still exists. - 4b &#x3D; TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c &#x3D; Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).
   * @return attainsAuCategory
   */
  @javax.annotation.Nonnull
  public String getAttainsAuCategory() {
    return attainsAuCategory;
  }

  public void setAttainsAuCategory(String attainsAuCategory) {
    this.attainsAuCategory = attainsAuCategory;
  }


  public Cwa10 attainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
    return this;
  }

  /**
   * Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
   * @return attainsCauseGroups
   */
  @javax.annotation.Nonnull
  public String getAttainsCauseGroups() {
    return attainsCauseGroups;
  }

  public void setAttainsCauseGroups(String attainsCauseGroups) {
    this.attainsCauseGroups = attainsCauseGroups;
  }


  public Cwa10 attainsCycleYear(String attainsCycleYear) {
    this.attainsCycleYear = attainsCycleYear;
    return this;
  }

  /**
   * The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.
   * @return attainsCycleYear
   */
  @javax.annotation.Nonnull
  public String getAttainsCycleYear() {
    return attainsCycleYear;
  }

  public void setAttainsCycleYear(String attainsCycleYear) {
    this.attainsCycleYear = attainsCycleYear;
  }


  public Cwa10 attainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.
   * @return attainsExceptnlUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsExceptnlUseFlg() {
    return attainsExceptnlUseFlg;
  }

  public void setAttainsExceptnlUseFlg(String attainsExceptnlUseFlg) {
    this.attainsExceptnlUseFlg = attainsExceptnlUseFlg;
  }


  public Cwa10 attainsImpWaterFlg(String attainsImpWaterFlg) {
    this.attainsImpWaterFlg = attainsImpWaterFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.
   * @return attainsImpWaterFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsImpWaterFlg() {
    return attainsImpWaterFlg;
  }

  public void setAttainsImpWaterFlg(String attainsImpWaterFlg) {
    this.attainsImpWaterFlg = attainsImpWaterFlg;
  }


  public Cwa10 attainsPossibleNPDESParams(String attainsPossibleNPDESParams) {
    this.attainsPossibleNPDESParams = attainsPossibleNPDESParams;
    return this;
  }

  /**
   * Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.
   * @return attainsPossibleNPDESParams
   */
  @javax.annotation.Nonnull
  public String getAttainsPossibleNPDESParams() {
    return attainsPossibleNPDESParams;
  }

  public void setAttainsPossibleNPDESParams(String attainsPossibleNPDESParams) {
    this.attainsPossibleNPDESParams = attainsPossibleNPDESParams;
  }


  public Cwa10 attainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.
   * @return attainsRecreationUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsRecreationUseFlg() {
    return attainsRecreationUseFlg;
  }

  public void setAttainsRecreationUseFlg(String attainsRecreationUseFlg) {
    this.attainsRecreationUseFlg = attainsRecreationUseFlg;
  }


  public Cwa10 attainsShellfishUseFlg(String attainsShellfishUseFlg) {
    this.attainsShellfishUseFlg = attainsShellfishUseFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.
   * @return attainsShellfishUseFlg
   */
  @javax.annotation.Nonnull
  public String getAttainsShellfishUseFlg() {
    return attainsShellfishUseFlg;
  }

  public void setAttainsShellfishUseFlg(String attainsShellfishUseFlg) {
    this.attainsShellfishUseFlg = attainsShellfishUseFlg;
  }


  public Cwa10 attainsSource(String attainsSource) {
    this.attainsSource = attainsSource;
    return this;
  }

  /**
   * The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking &amp; Implementation System (ATTAINS) database.
   * @return attainsSource
   */
  @javax.annotation.Nonnull
  public String getAttainsSource() {
    return attainsSource;
  }

  public void setAttainsSource(String attainsSource) {
    this.attainsSource = attainsSource;
  }


  public Cwa10 attainsStateCauses(String attainsStateCauses) {
    this.attainsStateCauses = attainsStateCauses;
    return this;
  }

  /**
   * Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.
   * @return attainsStateCauses
   */
  @javax.annotation.Nonnull
  public String getAttainsStateCauses() {
    return attainsStateCauses;
  }

  public void setAttainsStateCauses(String attainsStateCauses) {
    this.attainsStateCauses = attainsStateCauses;
  }


  public Cwa10 beachCloseLast2yrsFlg(String beachCloseLast2yrsFlg) {
    this.beachCloseLast2yrsFlg = beachCloseLast2yrsFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located on or near a waterbody with a beach closure within the last two years.
   * @return beachCloseLast2yrsFlg
   */
  @javax.annotation.Nonnull
  public String getBeachCloseLast2yrsFlg() {
    return beachCloseLast2yrsFlg;
  }

  public void setBeachCloseLast2yrsFlg(String beachCloseLast2yrsFlg) {
    this.beachCloseLast2yrsFlg = beachCloseLast2yrsFlg;
  }


  public Cwa10 beachCloseLastYearFlg(String beachCloseLastYearFlg) {
    this.beachCloseLastYearFlg = beachCloseLastYearFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located on or near a waterbody with a beach closure within the last year.
   * @return beachCloseLastYearFlg
   */
  @javax.annotation.Nonnull
  public String getBeachCloseLastYearFlg() {
    return beachCloseLastYearFlg;
  }

  public void setBeachCloseLastYearFlg(String beachCloseLastYearFlg) {
    this.beachCloseLastYearFlg = beachCloseLastYearFlg;
  }


  public Cwa10 bioAnalyMethodCatgrys(String bioAnalyMethodCatgrys) {
    this.bioAnalyMethodCatgrys = bioAnalyMethodCatgrys;
    return this;
  }

  /**
   * Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
   * @return bioAnalyMethodCatgrys
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethodCatgrys() {
    return bioAnalyMethodCatgrys;
  }

  public void setBioAnalyMethodCatgrys(String bioAnalyMethodCatgrys) {
    this.bioAnalyMethodCatgrys = bioAnalyMethodCatgrys;
  }


  public Cwa10 bioAnalyMethodCatgrys2016(String bioAnalyMethodCatgrys2016) {
    this.bioAnalyMethodCatgrys2016 = bioAnalyMethodCatgrys2016;
    return this;
  }

  /**
   * Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
   * @return bioAnalyMethodCatgrys2016
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethodCatgrys2016() {
    return bioAnalyMethodCatgrys2016;
  }

  public void setBioAnalyMethodCatgrys2016(String bioAnalyMethodCatgrys2016) {
    this.bioAnalyMethodCatgrys2016 = bioAnalyMethodCatgrys2016;
  }


  public Cwa10 bioAnalyMethodCatgrys2017(String bioAnalyMethodCatgrys2017) {
    this.bioAnalyMethodCatgrys2017 = bioAnalyMethodCatgrys2017;
    return this;
  }

  /**
   * Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.
   * @return bioAnalyMethodCatgrys2017
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethodCatgrys2017() {
    return bioAnalyMethodCatgrys2017;
  }

  public void setBioAnalyMethodCatgrys2017(String bioAnalyMethodCatgrys2017) {
    this.bioAnalyMethodCatgrys2017 = bioAnalyMethodCatgrys2017;
  }


  public Cwa10 bioAnalyMethods(String bioAnalyMethods) {
    this.bioAnalyMethods = bioAnalyMethods;
    return this;
  }

  /**
   * Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
   * @return bioAnalyMethods
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethods() {
    return bioAnalyMethods;
  }

  public void setBioAnalyMethods(String bioAnalyMethods) {
    this.bioAnalyMethods = bioAnalyMethods;
  }


  public Cwa10 bioAnalyMethods2016(String bioAnalyMethods2016) {
    this.bioAnalyMethods2016 = bioAnalyMethods2016;
    return this;
  }

  /**
   * Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
   * @return bioAnalyMethods2016
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethods2016() {
    return bioAnalyMethods2016;
  }

  public void setBioAnalyMethods2016(String bioAnalyMethods2016) {
    this.bioAnalyMethods2016 = bioAnalyMethods2016;
  }


  public Cwa10 bioAnalyMethods2017(String bioAnalyMethods2017) {
    this.bioAnalyMethods2017 = bioAnalyMethods2017;
    return this;
  }

  /**
   * Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.
   * @return bioAnalyMethods2017
   */
  @javax.annotation.Nonnull
  public String getBioAnalyMethods2017() {
    return bioAnalyMethods2017;
  }

  public void setBioAnalyMethods2017(String bioAnalyMethods2017) {
    this.bioAnalyMethods2017 = bioAnalyMethods2017;
  }


  public Cwa10 bioCommentText(String bioCommentText) {
    this.bioCommentText = bioCommentText;
    return this;
  }

  /**
   * Free text allowing the user to provide comments on the annual program report.
   * @return bioCommentText
   */
  @javax.annotation.Nonnull
  public String getBioCommentText() {
    return bioCommentText;
  }

  public void setBioCommentText(String bioCommentText) {
    this.bioCommentText = bioCommentText;
  }


  public Cwa10 bioCommentText2016(String bioCommentText2016) {
    this.bioCommentText2016 = bioCommentText2016;
    return this;
  }

  /**
   * Free text allowing the user to provide comments on the annual program report.
   * @return bioCommentText2016
   */
  @javax.annotation.Nonnull
  public String getBioCommentText2016() {
    return bioCommentText2016;
  }

  public void setBioCommentText2016(String bioCommentText2016) {
    this.bioCommentText2016 = bioCommentText2016;
  }


  public Cwa10 bioCommentText2017(String bioCommentText2017) {
    this.bioCommentText2017 = bioCommentText2017;
    return this;
  }

  /**
   * Free text allowing the user to provide comments on the annual program report.
   * @return bioCommentText2017
   */
  @javax.annotation.Nonnull
  public String getBioCommentText2017() {
    return bioCommentText2017;
  }

  public void setBioCommentText2017(String bioCommentText2017) {
    this.bioCommentText2017 = bioCommentText2017;
  }


  public Cwa10 bioIncinerationSum(BigDecimal bioIncinerationSum) {
    this.bioIncinerationSum = bioIncinerationSum;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids incinerated.
   * @return bioIncinerationSum
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioIncinerationSum() {
    return bioIncinerationSum;
  }

  public void setBioIncinerationSum(BigDecimal bioIncinerationSum) {
    this.bioIncinerationSum = bioIncinerationSum;
  }


  public Cwa10 bioIncinerationSum2016(BigDecimal bioIncinerationSum2016) {
    this.bioIncinerationSum2016 = bioIncinerationSum2016;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids incinerated.
   * @return bioIncinerationSum2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioIncinerationSum2016() {
    return bioIncinerationSum2016;
  }

  public void setBioIncinerationSum2016(BigDecimal bioIncinerationSum2016) {
    this.bioIncinerationSum2016 = bioIncinerationSum2016;
  }


  public Cwa10 bioIncinerationSum2017(BigDecimal bioIncinerationSum2017) {
    this.bioIncinerationSum2017 = bioIncinerationSum2017;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids incinerated.
   * @return bioIncinerationSum2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioIncinerationSum2017() {
    return bioIncinerationSum2017;
  }

  public void setBioIncinerationSum2017(BigDecimal bioIncinerationSum2017) {
    this.bioIncinerationSum2017 = bioIncinerationSum2017;
  }


  public Cwa10 bioLandApplicationSum(BigDecimal bioLandApplicationSum) {
    this.bioLandApplicationSum = bioLandApplicationSum;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids land applied.
   * @return bioLandApplicationSum
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioLandApplicationSum() {
    return bioLandApplicationSum;
  }

  public void setBioLandApplicationSum(BigDecimal bioLandApplicationSum) {
    this.bioLandApplicationSum = bioLandApplicationSum;
  }


  public Cwa10 bioLandApplicationSum2016(BigDecimal bioLandApplicationSum2016) {
    this.bioLandApplicationSum2016 = bioLandApplicationSum2016;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids land applied.
   * @return bioLandApplicationSum2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioLandApplicationSum2016() {
    return bioLandApplicationSum2016;
  }

  public void setBioLandApplicationSum2016(BigDecimal bioLandApplicationSum2016) {
    this.bioLandApplicationSum2016 = bioLandApplicationSum2016;
  }


  public Cwa10 bioLandApplicationSum2017(BigDecimal bioLandApplicationSum2017) {
    this.bioLandApplicationSum2017 = bioLandApplicationSum2017;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids land applied.
   * @return bioLandApplicationSum2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioLandApplicationSum2017() {
    return bioLandApplicationSum2017;
  }

  public void setBioLandApplicationSum2017(BigDecimal bioLandApplicationSum2017) {
    this.bioLandApplicationSum2017 = bioLandApplicationSum2017;
  }


  public Cwa10 bioMgmtContainers(String bioMgmtContainers) {
    this.bioMgmtContainers = bioMgmtContainers;
    return this;
  }

  /**
   * Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
   * @return bioMgmtContainers
   */
  @javax.annotation.Nonnull
  public String getBioMgmtContainers() {
    return bioMgmtContainers;
  }

  public void setBioMgmtContainers(String bioMgmtContainers) {
    this.bioMgmtContainers = bioMgmtContainers;
  }


  public Cwa10 bioMgmtContainers2016(String bioMgmtContainers2016) {
    this.bioMgmtContainers2016 = bioMgmtContainers2016;
    return this;
  }

  /**
   * Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
   * @return bioMgmtContainers2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtContainers2016() {
    return bioMgmtContainers2016;
  }

  public void setBioMgmtContainers2016(String bioMgmtContainers2016) {
    this.bioMgmtContainers2016 = bioMgmtContainers2016;
  }


  public Cwa10 bioMgmtContainers2017(String bioMgmtContainers2017) {
    this.bioMgmtContainers2017 = bioMgmtContainers2017;
    return this;
  }

  /**
   * Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.
   * @return bioMgmtContainers2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtContainers2017() {
    return bioMgmtContainers2017;
  }

  public void setBioMgmtContainers2017(String bioMgmtContainers2017) {
    this.bioMgmtContainers2017 = bioMgmtContainers2017;
  }


  public Cwa10 bioMgmtDefCategories(String bioMgmtDefCategories) {
    this.bioMgmtDefCategories = bioMgmtDefCategories;
    return this;
  }

  /**
   * Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
   * @return bioMgmtDefCategories
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDefCategories() {
    return bioMgmtDefCategories;
  }

  public void setBioMgmtDefCategories(String bioMgmtDefCategories) {
    this.bioMgmtDefCategories = bioMgmtDefCategories;
  }


  public Cwa10 bioMgmtDefCategories2016(String bioMgmtDefCategories2016) {
    this.bioMgmtDefCategories2016 = bioMgmtDefCategories2016;
    return this;
  }

  /**
   * Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
   * @return bioMgmtDefCategories2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDefCategories2016() {
    return bioMgmtDefCategories2016;
  }

  public void setBioMgmtDefCategories2016(String bioMgmtDefCategories2016) {
    this.bioMgmtDefCategories2016 = bioMgmtDefCategories2016;
  }


  public Cwa10 bioMgmtDefCategories2017(String bioMgmtDefCategories2017) {
    this.bioMgmtDefCategories2017 = bioMgmtDefCategories2017;
    return this;
  }

  /**
   * Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.
   * @return bioMgmtDefCategories2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDefCategories2017() {
    return bioMgmtDefCategories2017;
  }

  public void setBioMgmtDefCategories2017(String bioMgmtDefCategories2017) {
    this.bioMgmtDefCategories2017 = bioMgmtDefCategories2017;
  }


  public Cwa10 bioMgmtDefCurrentCnt(BigDecimal bioMgmtDefCurrentCnt) {
    this.bioMgmtDefCurrentCnt = bioMgmtDefCurrentCnt;
    return this;
  }

  /**
   * The number of times noncompliance reported by the facility in the last 3 years.
   * @return bioMgmtDefCurrentCnt
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioMgmtDefCurrentCnt() {
    return bioMgmtDefCurrentCnt;
  }

  public void setBioMgmtDefCurrentCnt(BigDecimal bioMgmtDefCurrentCnt) {
    this.bioMgmtDefCurrentCnt = bioMgmtDefCurrentCnt;
  }


  public Cwa10 bioMgmtDefCurrentCnt2016(BigDecimal bioMgmtDefCurrentCnt2016) {
    this.bioMgmtDefCurrentCnt2016 = bioMgmtDefCurrentCnt2016;
    return this;
  }

  /**
   * The number of times noncompliance reported by the facility in the last 3 years.
   * @return bioMgmtDefCurrentCnt2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioMgmtDefCurrentCnt2016() {
    return bioMgmtDefCurrentCnt2016;
  }

  public void setBioMgmtDefCurrentCnt2016(BigDecimal bioMgmtDefCurrentCnt2016) {
    this.bioMgmtDefCurrentCnt2016 = bioMgmtDefCurrentCnt2016;
  }


  public Cwa10 bioMgmtDefCurrentCnt2017(BigDecimal bioMgmtDefCurrentCnt2017) {
    this.bioMgmtDefCurrentCnt2017 = bioMgmtDefCurrentCnt2017;
    return this;
  }

  /**
   * The number of times noncompliance reported by the facility in the last 3 years.
   * @return bioMgmtDefCurrentCnt2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioMgmtDefCurrentCnt2017() {
    return bioMgmtDefCurrentCnt2017;
  }

  public void setBioMgmtDefCurrentCnt2017(BigDecimal bioMgmtDefCurrentCnt2017) {
    this.bioMgmtDefCurrentCnt2017 = bioMgmtDefCurrentCnt2017;
  }


  public Cwa10 bioMgmtDeficiencies(String bioMgmtDeficiencies) {
    this.bioMgmtDeficiencies = bioMgmtDeficiencies;
    return this;
  }

  /**
   * Indicates the type of NPDES special regulatory program deficiency.
   * @return bioMgmtDeficiencies
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDeficiencies() {
    return bioMgmtDeficiencies;
  }

  public void setBioMgmtDeficiencies(String bioMgmtDeficiencies) {
    this.bioMgmtDeficiencies = bioMgmtDeficiencies;
  }


  public Cwa10 bioMgmtDeficiencies2016(String bioMgmtDeficiencies2016) {
    this.bioMgmtDeficiencies2016 = bioMgmtDeficiencies2016;
    return this;
  }

  /**
   * Indicates the type of NPDES special regulatory program deficiency.
   * @return bioMgmtDeficiencies2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDeficiencies2016() {
    return bioMgmtDeficiencies2016;
  }

  public void setBioMgmtDeficiencies2016(String bioMgmtDeficiencies2016) {
    this.bioMgmtDeficiencies2016 = bioMgmtDeficiencies2016;
  }


  public Cwa10 bioMgmtDeficiencies2017(String bioMgmtDeficiencies2017) {
    this.bioMgmtDeficiencies2017 = bioMgmtDeficiencies2017;
    return this;
  }

  /**
   * Indicates the type of NPDES special regulatory program deficiency.
   * @return bioMgmtDeficiencies2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtDeficiencies2017() {
    return bioMgmtDeficiencies2017;
  }

  public void setBioMgmtDeficiencies2017(String bioMgmtDeficiencies2017) {
    this.bioMgmtDeficiencies2017 = bioMgmtDeficiencies2017;
  }


  public Cwa10 bioMgmtHandlers(String bioMgmtHandlers) {
    this.bioMgmtHandlers = bioMgmtHandlers;
    return this;
  }

  /**
   * Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
   * @return bioMgmtHandlers
   */
  @javax.annotation.Nonnull
  public String getBioMgmtHandlers() {
    return bioMgmtHandlers;
  }

  public void setBioMgmtHandlers(String bioMgmtHandlers) {
    this.bioMgmtHandlers = bioMgmtHandlers;
  }


  public Cwa10 bioMgmtHandlers2016(String bioMgmtHandlers2016) {
    this.bioMgmtHandlers2016 = bioMgmtHandlers2016;
    return this;
  }

  /**
   * Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
   * @return bioMgmtHandlers2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtHandlers2016() {
    return bioMgmtHandlers2016;
  }

  public void setBioMgmtHandlers2016(String bioMgmtHandlers2016) {
    this.bioMgmtHandlers2016 = bioMgmtHandlers2016;
  }


  public Cwa10 bioMgmtHandlers2017(String bioMgmtHandlers2017) {
    this.bioMgmtHandlers2017 = bioMgmtHandlers2017;
    return this;
  }

  /**
   * Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.
   * @return bioMgmtHandlers2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtHandlers2017() {
    return bioMgmtHandlers2017;
  }

  public void setBioMgmtHandlers2017(String bioMgmtHandlers2017) {
    this.bioMgmtHandlers2017 = bioMgmtHandlers2017;
  }


  public Cwa10 bioMgmtPathogens(String bioMgmtPathogens) {
    this.bioMgmtPathogens = bioMgmtPathogens;
    return this;
  }

  /**
   * Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
   * @return bioMgmtPathogens
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathogens() {
    return bioMgmtPathogens;
  }

  public void setBioMgmtPathogens(String bioMgmtPathogens) {
    this.bioMgmtPathogens = bioMgmtPathogens;
  }


  public Cwa10 bioMgmtPathogens2016(String bioMgmtPathogens2016) {
    this.bioMgmtPathogens2016 = bioMgmtPathogens2016;
    return this;
  }

  /**
   * Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
   * @return bioMgmtPathogens2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathogens2016() {
    return bioMgmtPathogens2016;
  }

  public void setBioMgmtPathogens2016(String bioMgmtPathogens2016) {
    this.bioMgmtPathogens2016 = bioMgmtPathogens2016;
  }


  public Cwa10 bioMgmtPathogens2017(String bioMgmtPathogens2017) {
    this.bioMgmtPathogens2017 = bioMgmtPathogens2017;
    return this;
  }

  /**
   * Identifies the pathogen class for biosolids or sewage sludge generated by the facility.
   * @return bioMgmtPathogens2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathogens2017() {
    return bioMgmtPathogens2017;
  }

  public void setBioMgmtPathogens2017(String bioMgmtPathogens2017) {
    this.bioMgmtPathogens2017 = bioMgmtPathogens2017;
  }


  public Cwa10 bioMgmtPathreds(String bioMgmtPathreds) {
    this.bioMgmtPathreds = bioMgmtPathreds;
    return this;
  }

  /**
   * Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
   * @return bioMgmtPathreds
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathreds() {
    return bioMgmtPathreds;
  }

  public void setBioMgmtPathreds(String bioMgmtPathreds) {
    this.bioMgmtPathreds = bioMgmtPathreds;
  }


  public Cwa10 bioMgmtPathreds2016(String bioMgmtPathreds2016) {
    this.bioMgmtPathreds2016 = bioMgmtPathreds2016;
    return this;
  }

  /**
   * Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
   * @return bioMgmtPathreds2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathreds2016() {
    return bioMgmtPathreds2016;
  }

  public void setBioMgmtPathreds2016(String bioMgmtPathreds2016) {
    this.bioMgmtPathreds2016 = bioMgmtPathreds2016;
  }


  public Cwa10 bioMgmtPathreds2017(String bioMgmtPathreds2017) {
    this.bioMgmtPathreds2017 = bioMgmtPathreds2017;
    return this;
  }

  /**
   * Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.
   * @return bioMgmtPathreds2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPathreds2017() {
    return bioMgmtPathreds2017;
  }

  public void setBioMgmtPathreds2017(String bioMgmtPathreds2017) {
    this.bioMgmtPathreds2017 = bioMgmtPathreds2017;
  }


  public Cwa10 bioMgmtPrctceStypes(String bioMgmtPrctceStypes) {
    this.bioMgmtPrctceStypes = bioMgmtPrctceStypes;
    return this;
  }

  /**
   * Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
   * @return bioMgmtPrctceStypes
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceStypes() {
    return bioMgmtPrctceStypes;
  }

  public void setBioMgmtPrctceStypes(String bioMgmtPrctceStypes) {
    this.bioMgmtPrctceStypes = bioMgmtPrctceStypes;
  }


  public Cwa10 bioMgmtPrctceStypes2016(String bioMgmtPrctceStypes2016) {
    this.bioMgmtPrctceStypes2016 = bioMgmtPrctceStypes2016;
    return this;
  }

  /**
   * Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
   * @return bioMgmtPrctceStypes2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceStypes2016() {
    return bioMgmtPrctceStypes2016;
  }

  public void setBioMgmtPrctceStypes2016(String bioMgmtPrctceStypes2016) {
    this.bioMgmtPrctceStypes2016 = bioMgmtPrctceStypes2016;
  }


  public Cwa10 bioMgmtPrctceStypes2017(String bioMgmtPrctceStypes2017) {
    this.bioMgmtPrctceStypes2017 = bioMgmtPrctceStypes2017;
    return this;
  }

  /**
   * Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.
   * @return bioMgmtPrctceStypes2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceStypes2017() {
    return bioMgmtPrctceStypes2017;
  }

  public void setBioMgmtPrctceStypes2017(String bioMgmtPrctceStypes2017) {
    this.bioMgmtPrctceStypes2017 = bioMgmtPrctceStypes2017;
  }


  public Cwa10 bioMgmtPrctceTypes(String bioMgmtPrctceTypes) {
    this.bioMgmtPrctceTypes = bioMgmtPrctceTypes;
    return this;
  }

  /**
   * The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
   * @return bioMgmtPrctceTypes
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceTypes() {
    return bioMgmtPrctceTypes;
  }

  public void setBioMgmtPrctceTypes(String bioMgmtPrctceTypes) {
    this.bioMgmtPrctceTypes = bioMgmtPrctceTypes;
  }


  public Cwa10 bioMgmtPrctceTypes2016(String bioMgmtPrctceTypes2016) {
    this.bioMgmtPrctceTypes2016 = bioMgmtPrctceTypes2016;
    return this;
  }

  /**
   * The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
   * @return bioMgmtPrctceTypes2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceTypes2016() {
    return bioMgmtPrctceTypes2016;
  }

  public void setBioMgmtPrctceTypes2016(String bioMgmtPrctceTypes2016) {
    this.bioMgmtPrctceTypes2016 = bioMgmtPrctceTypes2016;
  }


  public Cwa10 bioMgmtPrctceTypes2017(String bioMgmtPrctceTypes2017) {
    this.bioMgmtPrctceTypes2017 = bioMgmtPrctceTypes2017;
    return this;
  }

  /**
   * The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.
   * @return bioMgmtPrctceTypes2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtPrctceTypes2017() {
    return bioMgmtPrctceTypes2017;
  }

  public void setBioMgmtPrctceTypes2017(String bioMgmtPrctceTypes2017) {
    this.bioMgmtPrctceTypes2017 = bioMgmtPrctceTypes2017;
  }


  public Cwa10 bioMgmtVectors(String bioMgmtVectors) {
    this.bioMgmtVectors = bioMgmtVectors;
    return this;
  }

  /**
   * Identifies the option used by the facility for vector attraction reduction.
   * @return bioMgmtVectors
   */
  @javax.annotation.Nonnull
  public String getBioMgmtVectors() {
    return bioMgmtVectors;
  }

  public void setBioMgmtVectors(String bioMgmtVectors) {
    this.bioMgmtVectors = bioMgmtVectors;
  }


  public Cwa10 bioMgmtVectors2016(String bioMgmtVectors2016) {
    this.bioMgmtVectors2016 = bioMgmtVectors2016;
    return this;
  }

  /**
   * Identifies the option used by the facility for vector attraction reduction.
   * @return bioMgmtVectors2016
   */
  @javax.annotation.Nonnull
  public String getBioMgmtVectors2016() {
    return bioMgmtVectors2016;
  }

  public void setBioMgmtVectors2016(String bioMgmtVectors2016) {
    this.bioMgmtVectors2016 = bioMgmtVectors2016;
  }


  public Cwa10 bioMgmtVectors2017(String bioMgmtVectors2017) {
    this.bioMgmtVectors2017 = bioMgmtVectors2017;
    return this;
  }

  /**
   * Identifies the option used by the facility for vector attraction reduction.
   * @return bioMgmtVectors2017
   */
  @javax.annotation.Nonnull
  public String getBioMgmtVectors2017() {
    return bioMgmtVectors2017;
  }

  public void setBioMgmtVectors2017(String bioMgmtVectors2017) {
    this.bioMgmtVectors2017 = bioMgmtVectors2017;
  }


  public Cwa10 bioOtherManagementSum(BigDecimal bioOtherManagementSum) {
    this.bioOtherManagementSum = bioOtherManagementSum;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids managed using methods not previously described.
   * @return bioOtherManagementSum
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioOtherManagementSum() {
    return bioOtherManagementSum;
  }

  public void setBioOtherManagementSum(BigDecimal bioOtherManagementSum) {
    this.bioOtherManagementSum = bioOtherManagementSum;
  }


  public Cwa10 bioOtherManagementSum2016(BigDecimal bioOtherManagementSum2016) {
    this.bioOtherManagementSum2016 = bioOtherManagementSum2016;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids managed using methods not previously described.
   * @return bioOtherManagementSum2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioOtherManagementSum2016() {
    return bioOtherManagementSum2016;
  }

  public void setBioOtherManagementSum2016(BigDecimal bioOtherManagementSum2016) {
    this.bioOtherManagementSum2016 = bioOtherManagementSum2016;
  }


  public Cwa10 bioOtherManagementSum2017(BigDecimal bioOtherManagementSum2017) {
    this.bioOtherManagementSum2017 = bioOtherManagementSum2017;
    return this;
  }

  /**
   * The amount (dry metric tons) of biosolids managed using methods not previously described.
   * @return bioOtherManagementSum2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioOtherManagementSum2017() {
    return bioOtherManagementSum2017;
  }

  public void setBioOtherManagementSum2017(BigDecimal bioOtherManagementSum2017) {
    this.bioOtherManagementSum2017 = bioOtherManagementSum2017;
  }


  public Cwa10 bioOtherMgmtPrctcTxts(String bioOtherMgmtPrctcTxts) {
    this.bioOtherMgmtPrctcTxts = bioOtherMgmtPrctcTxts;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; Biosolids Management Practices.
   * @return bioOtherMgmtPrctcTxts
   */
  @javax.annotation.Nonnull
  public String getBioOtherMgmtPrctcTxts() {
    return bioOtherMgmtPrctcTxts;
  }

  public void setBioOtherMgmtPrctcTxts(String bioOtherMgmtPrctcTxts) {
    this.bioOtherMgmtPrctcTxts = bioOtherMgmtPrctcTxts;
  }


  public Cwa10 bioOtherMgmtPrctcTxts2016(String bioOtherMgmtPrctcTxts2016) {
    this.bioOtherMgmtPrctcTxts2016 = bioOtherMgmtPrctcTxts2016;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; Biosolids Management Practices.
   * @return bioOtherMgmtPrctcTxts2016
   */
  @javax.annotation.Nonnull
  public String getBioOtherMgmtPrctcTxts2016() {
    return bioOtherMgmtPrctcTxts2016;
  }

  public void setBioOtherMgmtPrctcTxts2016(String bioOtherMgmtPrctcTxts2016) {
    this.bioOtherMgmtPrctcTxts2016 = bioOtherMgmtPrctcTxts2016;
  }


  public Cwa10 bioOtherMgmtPrctcTxts2017(String bioOtherMgmtPrctcTxts2017) {
    this.bioOtherMgmtPrctcTxts2017 = bioOtherMgmtPrctcTxts2017;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; Biosolids Management Practices.
   * @return bioOtherMgmtPrctcTxts2017
   */
  @javax.annotation.Nonnull
  public String getBioOtherMgmtPrctcTxts2017() {
    return bioOtherMgmtPrctcTxts2017;
  }

  public void setBioOtherMgmtPrctcTxts2017(String bioOtherMgmtPrctcTxts2017) {
    this.bioOtherMgmtPrctcTxts2017 = bioOtherMgmtPrctcTxts2017;
  }


  public Cwa10 bioQtrsWithVio(BigDecimal bioQtrsWithVio) {
    this.bioQtrsWithVio = bioQtrsWithVio;
    return this;
  }

  /**
   * Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered with violations for biosolids.
   * @return bioQtrsWithVio
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioQtrsWithVio() {
    return bioQtrsWithVio;
  }

  public void setBioQtrsWithVio(BigDecimal bioQtrsWithVio) {
    this.bioQtrsWithVio = bioQtrsWithVio;
  }


  public Cwa10 bioReportDate(String bioReportDate) {
    this.bioReportDate = bioReportDate;
    return this;
  }

  /**
   * The date the report was received by EPA.
   * @return bioReportDate
   */
  @javax.annotation.Nonnull
  public String getBioReportDate() {
    return bioReportDate;
  }

  public void setBioReportDate(String bioReportDate) {
    this.bioReportDate = bioReportDate;
  }


  public Cwa10 bioReportDate2016(String bioReportDate2016) {
    this.bioReportDate2016 = bioReportDate2016;
    return this;
  }

  /**
   * The date the report was received by EPA.
   * @return bioReportDate2016
   */
  @javax.annotation.Nonnull
  public String getBioReportDate2016() {
    return bioReportDate2016;
  }

  public void setBioReportDate2016(String bioReportDate2016) {
    this.bioReportDate2016 = bioReportDate2016;
  }


  public Cwa10 bioReportDate2017(String bioReportDate2017) {
    this.bioReportDate2017 = bioReportDate2017;
    return this;
  }

  /**
   * The date the report was received by EPA.
   * @return bioReportDate2017
   */
  @javax.annotation.Nonnull
  public String getBioReportDate2017() {
    return bioReportDate2017;
  }

  public void setBioReportDate2017(String bioReportDate2017) {
    this.bioReportDate2017 = bioReportDate2017;
  }


  public Cwa10 bioReportYear(String bioReportYear) {
    this.bioReportYear = bioReportYear;
    return this;
  }

  /**
   * The calendar year corresponding to the Annual Biosolids Report.
   * @return bioReportYear
   */
  @javax.annotation.Nonnull
  public String getBioReportYear() {
    return bioReportYear;
  }

  public void setBioReportYear(String bioReportYear) {
    this.bioReportYear = bioReportYear;
  }


  public Cwa10 bioReportYears(String bioReportYears) {
    this.bioReportYears = bioReportYears;
    return this;
  }

  /**
   * Reporting years are determined by the year of the reporting period end date. Data reflect the last two reporting years.
   * @return bioReportYears
   */
  @javax.annotation.Nonnull
  public String getBioReportYears() {
    return bioReportYears;
  }

  public void setBioReportYears(String bioReportYears) {
    this.bioReportYears = bioReportYears;
  }


  public Cwa10 bioReportingObligations(String bioReportingObligations) {
    this.bioReportingObligations = bioReportingObligations;
    return this;
  }

  /**
   * Indicates the reporting obligation reason.
   * @return bioReportingObligations
   */
  @javax.annotation.Nonnull
  public String getBioReportingObligations() {
    return bioReportingObligations;
  }

  public void setBioReportingObligations(String bioReportingObligations) {
    this.bioReportingObligations = bioReportingObligations;
  }


  public Cwa10 bioReportingObligations2016(String bioReportingObligations2016) {
    this.bioReportingObligations2016 = bioReportingObligations2016;
    return this;
  }

  /**
   * Indicates the reporting obligation reason.
   * @return bioReportingObligations2016
   */
  @javax.annotation.Nonnull
  public String getBioReportingObligations2016() {
    return bioReportingObligations2016;
  }

  public void setBioReportingObligations2016(String bioReportingObligations2016) {
    this.bioReportingObligations2016 = bioReportingObligations2016;
  }


  public Cwa10 bioReportingObligations2017(String bioReportingObligations2017) {
    this.bioReportingObligations2017 = bioReportingObligations2017;
    return this;
  }

  /**
   * Indicates the reporting obligation reason.
   * @return bioReportingObligations2017
   */
  @javax.annotation.Nonnull
  public String getBioReportingObligations2017() {
    return bioReportingObligations2017;
  }

  public void setBioReportingObligations2017(String bioReportingObligations2017) {
    this.bioReportingObligations2017 = bioReportingObligations2017;
  }


  public Cwa10 bioSurfaceDispSum(BigDecimal bioSurfaceDispSum) {
    this.bioSurfaceDispSum = bioSurfaceDispSum;
    return this;
  }

  /**
   * The amount of surface disposal in dry metric tons (DMT).
   * @return bioSurfaceDispSum
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioSurfaceDispSum() {
    return bioSurfaceDispSum;
  }

  public void setBioSurfaceDispSum(BigDecimal bioSurfaceDispSum) {
    this.bioSurfaceDispSum = bioSurfaceDispSum;
  }


  public Cwa10 bioSurfaceDispSum2016(BigDecimal bioSurfaceDispSum2016) {
    this.bioSurfaceDispSum2016 = bioSurfaceDispSum2016;
    return this;
  }

  /**
   * The amount of surface disposal in dry metric tons (DMT).
   * @return bioSurfaceDispSum2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioSurfaceDispSum2016() {
    return bioSurfaceDispSum2016;
  }

  public void setBioSurfaceDispSum2016(BigDecimal bioSurfaceDispSum2016) {
    this.bioSurfaceDispSum2016 = bioSurfaceDispSum2016;
  }


  public Cwa10 bioSurfaceDispSum2017(BigDecimal bioSurfaceDispSum2017) {
    this.bioSurfaceDispSum2017 = bioSurfaceDispSum2017;
    return this;
  }

  /**
   * The amount of surface disposal in dry metric tons (DMT).
   * @return bioSurfaceDispSum2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioSurfaceDispSum2017() {
    return bioSurfaceDispSum2017;
  }

  public void setBioSurfaceDispSum2017(BigDecimal bioSurfaceDispSum2017) {
    this.bioSurfaceDispSum2017 = bioSurfaceDispSum2017;
  }


  public Cwa10 bioTotalVolumeAmt(BigDecimal bioTotalVolumeAmt) {
    this.bioTotalVolumeAmt = bioTotalVolumeAmt;
    return this;
  }

  /**
   * The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
   * @return bioTotalVolumeAmt
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioTotalVolumeAmt() {
    return bioTotalVolumeAmt;
  }

  public void setBioTotalVolumeAmt(BigDecimal bioTotalVolumeAmt) {
    this.bioTotalVolumeAmt = bioTotalVolumeAmt;
  }


  public Cwa10 bioTotalVolumeAmt2016(BigDecimal bioTotalVolumeAmt2016) {
    this.bioTotalVolumeAmt2016 = bioTotalVolumeAmt2016;
    return this;
  }

  /**
   * The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
   * @return bioTotalVolumeAmt2016
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioTotalVolumeAmt2016() {
    return bioTotalVolumeAmt2016;
  }

  public void setBioTotalVolumeAmt2016(BigDecimal bioTotalVolumeAmt2016) {
    this.bioTotalVolumeAmt2016 = bioTotalVolumeAmt2016;
  }


  public Cwa10 bioTotalVolumeAmt2017(BigDecimal bioTotalVolumeAmt2017) {
    this.bioTotalVolumeAmt2017 = bioTotalVolumeAmt2017;
    return this;
  }

  /**
   * The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.
   * @return bioTotalVolumeAmt2017
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioTotalVolumeAmt2017() {
    return bioTotalVolumeAmt2017;
  }

  public void setBioTotalVolumeAmt2017(BigDecimal bioTotalVolumeAmt2017) {
    this.bioTotalVolumeAmt2017 = bioTotalVolumeAmt2017;
  }


  public Cwa10 bioTrmntPrcssCmntTxts2016(String bioTrmntPrcssCmntTxts2016) {
    this.bioTrmntPrcssCmntTxts2016 = bioTrmntPrcssCmntTxts2016;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; biotreatment processes.
   * @return bioTrmntPrcssCmntTxts2016
   */
  @javax.annotation.Nonnull
  public String getBioTrmntPrcssCmntTxts2016() {
    return bioTrmntPrcssCmntTxts2016;
  }

  public void setBioTrmntPrcssCmntTxts2016(String bioTrmntPrcssCmntTxts2016) {
    this.bioTrmntPrcssCmntTxts2016 = bioTrmntPrcssCmntTxts2016;
  }


  public Cwa10 bioTrmntPrcssCmntTxts2017(String bioTrmntPrcssCmntTxts2017) {
    this.bioTrmntPrcssCmntTxts2017 = bioTrmntPrcssCmntTxts2017;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; biotreatment processes.
   * @return bioTrmntPrcssCmntTxts2017
   */
  @javax.annotation.Nonnull
  public String getBioTrmntPrcssCmntTxts2017() {
    return bioTrmntPrcssCmntTxts2017;
  }

  public void setBioTrmntPrcssCmntTxts2017(String bioTrmntPrcssCmntTxts2017) {
    this.bioTrmntPrcssCmntTxts2017 = bioTrmntPrcssCmntTxts2017;
  }


  public Cwa10 bioTrtmntPrcssCmmntTxts(String bioTrtmntPrcssCmmntTxts) {
    this.bioTrtmntPrcssCmmntTxts = bioTrtmntPrcssCmmntTxts;
    return this;
  }

  /**
   * Free text additional description of \&quot;other\&quot; biotreatment processes.
   * @return bioTrtmntPrcssCmmntTxts
   */
  @javax.annotation.Nonnull
  public String getBioTrtmntPrcssCmmntTxts() {
    return bioTrtmntPrcssCmmntTxts;
  }

  public void setBioTrtmntPrcssCmmntTxts(String bioTrtmntPrcssCmmntTxts) {
    this.bioTrtmntPrcssCmmntTxts = bioTrtmntPrcssCmmntTxts;
  }


  public Cwa10 bioTrtmntProcesses(String bioTrtmntProcesses) {
    this.bioTrtmntProcesses = bioTrtmntProcesses;
    return this;
  }

  /**
   * Identifies the biosolids or sewage sludge treatment process or processes at the facility.
   * @return bioTrtmntProcesses
   */
  @javax.annotation.Nonnull
  public String getBioTrtmntProcesses() {
    return bioTrtmntProcesses;
  }

  public void setBioTrtmntProcesses(String bioTrtmntProcesses) {
    this.bioTrtmntProcesses = bioTrtmntProcesses;
  }


  public Cwa10 bioTrtmntProcesses2016(String bioTrtmntProcesses2016) {
    this.bioTrtmntProcesses2016 = bioTrtmntProcesses2016;
    return this;
  }

  /**
   * Identifies the biosolids or sewage sludge treatment process or processes at the facility.
   * @return bioTrtmntProcesses2016
   */
  @javax.annotation.Nonnull
  public String getBioTrtmntProcesses2016() {
    return bioTrtmntProcesses2016;
  }

  public void setBioTrtmntProcesses2016(String bioTrtmntProcesses2016) {
    this.bioTrtmntProcesses2016 = bioTrtmntProcesses2016;
  }


  public Cwa10 bioTrtmntProcesses2017(String bioTrtmntProcesses2017) {
    this.bioTrtmntProcesses2017 = bioTrtmntProcesses2017;
    return this;
  }

  /**
   * Identifies the biosolids or sewage sludge treatment process or processes at the facility.
   * @return bioTrtmntProcesses2017
   */
  @javax.annotation.Nonnull
  public String getBioTrtmntProcesses2017() {
    return bioTrtmntProcesses2017;
  }

  public void setBioTrtmntProcesses2017(String bioTrtmntProcesses2017) {
    this.bioTrtmntProcesses2017 = bioTrtmntProcesses2017;
  }


  public Cwa10 bioVioLastYear(BigDecimal bioVioLastYear) {
    this.bioVioLastYear = bioVioLastYear;
    return this;
  }

  /**
   * A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.
   * @return bioVioLastYear
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioVioLastYear() {
    return bioVioLastYear;
  }

  public void setBioVioLastYear(BigDecimal bioVioLastYear) {
    this.bioVioLastYear = bioVioLastYear;
  }


  public Cwa10 bioVioLastYearFlag(String bioVioLastYearFlag) {
    this.bioVioLastYearFlag = bioVioLastYearFlag;
    return this;
  }

  /**
   * Y if the facility has a biosolids single event violation under the Clean Water Act in the last year. Note: Violations reported on the 2016 and 2017 Biosolids Annual Report are not updated with the weekly data refresh and may not be representative of a facility&#39;s recently submitted or updated report.�
   * @return bioVioLastYearFlag
   */
  @javax.annotation.Nonnull
  public String getBioVioLastYearFlag() {
    return bioVioLastYearFlag;
  }

  public void setBioVioLastYearFlag(String bioVioLastYearFlag) {
    this.bioVioLastYearFlag = bioVioLastYearFlag;
  }


  public Cwa10 bioVioStatus(BigDecimal bioVioStatus) {
    this.bioVioStatus = bioVioStatus;
    return this;
  }

  /**
   * A value of 1 indicates if the Biosolids facility currently has an unresolved biosolids related Single Event Violation.
   * @return bioVioStatus
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioVioStatus() {
    return bioVioStatus;
  }

  public void setBioVioStatus(BigDecimal bioVioStatus) {
    this.bioVioStatus = bioVioStatus;
  }


  public Cwa10 bioViolFlag(BigDecimal bioViolFlag) {
    this.bioViolFlag = bioViolFlag;
    return this;
  }

  /**
   * Displays \&quot;Yes\&quot; if the facility is in violation for biosolids under the Clean Water Act, in the last three years.
   * @return bioViolFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getBioViolFlag() {
    return bioViolFlag;
  }

  public void setBioViolFlag(BigDecimal bioViolFlag) {
    this.bioViolFlag = bioViolFlag;
  }


  public Cwa10 biosolidsFlag(String biosolidsFlag) {
    this.biosolidsFlag = biosolidsFlag;
    return this;
  }

  /**
   * A Yes/No field to indicate permits with biosolids management and compliance information.
   * @return biosolidsFlag
   */
  @javax.annotation.Nonnull
  public String getBiosolidsFlag() {
    return biosolidsFlag;
  }

  public void setBiosolidsFlag(String biosolidsFlag) {
    this.biosolidsFlag = biosolidsFlag;
  }


  public Cwa10 cwP13qtrsComplHistory(String cwP13qtrsComplHistory) {
    this.cwP13qtrsComplHistory = cwP13qtrsComplHistory;
    return this;
  }

  /**
   * The facility&#39;s 3-year or 13-quarter compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
   * @return cwP13qtrsComplHistory
   */
  @javax.annotation.Nonnull
  public String getCwP13qtrsComplHistory() {
    return cwP13qtrsComplHistory;
  }

  public void setCwP13qtrsComplHistory(String cwP13qtrsComplHistory) {
    this.cwP13qtrsComplHistory = cwP13qtrsComplHistory;
  }


  public Cwa10 cwPActualAverageFlowNmbr(BigDecimal cwPActualAverageFlowNmbr) {
    this.cwPActualAverageFlowNmbr = cwPActualAverageFlowNmbr;
    return this;
  }

  /**
   * The actual amount of the facility&#39;s wastewater flow measured in million gallons per day (MGD).
   * @return cwPActualAverageFlowNmbr
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPActualAverageFlowNmbr() {
    return cwPActualAverageFlowNmbr;
  }

  public void setCwPActualAverageFlowNmbr(BigDecimal cwPActualAverageFlowNmbr) {
    this.cwPActualAverageFlowNmbr = cwPActualAverageFlowNmbr;
  }


  public Cwa10 cwPBioFeaCount(BigDecimal cwPBioFeaCount) {
    this.cwPBioFeaCount = cwPBioFeaCount;
    return this;
  }

  /**
   * The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.
   * @return cwPBioFeaCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPBioFeaCount() {
    return cwPBioFeaCount;
  }

  public void setCwPBioFeaCount(BigDecimal cwPBioFeaCount) {
    this.cwPBioFeaCount = cwPBioFeaCount;
  }


  public Cwa10 cwPBioIeaCount(BigDecimal cwPBioIeaCount) {
    this.cwPBioIeaCount = cwPBioIeaCount;
    return this;
  }

  /**
   * The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.
   * @return cwPBioIeaCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPBioIeaCount() {
    return cwPBioIeaCount;
  }

  public void setCwPBioIeaCount(BigDecimal cwPBioIeaCount) {
    this.cwPBioIeaCount = cwPBioIeaCount;
  }


  public Cwa10 cwPBioInspCount(BigDecimal cwPBioInspCount) {
    this.cwPBioInspCount = cwPBioInspCount;
    return this;
  }

  /**
   * The count of Biosolids related Inspections that have occured for the facility.
   * @return cwPBioInspCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPBioInspCount() {
    return cwPBioInspCount;
  }

  public void setCwPBioInspCount(BigDecimal cwPBioInspCount) {
    this.cwPBioInspCount = cwPBioInspCount;
  }


  public Cwa10 cwPBioPenalties(BigDecimal cwPBioPenalties) {
    this.cwPBioPenalties = cwPBioPenalties;
    return this;
  }

  /**
   * The total amount of Biosolids related penalties that have been assessed against the facility.
   * @return cwPBioPenalties
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPBioPenalties() {
    return cwPBioPenalties;
  }

  public void setCwPBioPenalties(BigDecimal cwPBioPenalties) {
    this.cwPBioPenalties = cwPBioPenalties;
  }


  public Cwa10 cwPCaseIDs(String cwPCaseIDs) {
    this.cwPCaseIDs = cwPCaseIDs;
    return this;
  }

  /**
   * Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.
   * @return cwPCaseIDs
   */
  @javax.annotation.Nonnull
  public String getCwPCaseIDs() {
    return cwPCaseIDs;
  }

  public void setCwPCaseIDs(String cwPCaseIDs) {
    this.cwPCaseIDs = cwPCaseIDs;
  }


  public Cwa10 cwPCity(String cwPCity) {
    this.cwPCity = cwPCity;
    return this;
  }

  /**
   * City in which the facility is located.
   * @return cwPCity
   */
  @javax.annotation.Nonnull
  public String getCwPCity() {
    return cwPCity;
  }

  public void setCwPCity(String cwPCity) {
    this.cwPCity = cwPCity;
  }


  public Cwa10 cwPComplianceTracking(String cwPComplianceTracking) {
    this.cwPComplianceTracking = cwPComplianceTracking;
    return this;
  }

  /**
   * Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).
   * @return cwPComplianceTracking
   */
  @javax.annotation.Nonnull
  public String getCwPComplianceTracking() {
    return cwPComplianceTracking;
  }

  public void setCwPComplianceTracking(String cwPComplianceTracking) {
    this.cwPComplianceTracking = cwPComplianceTracking;
  }


  public Cwa10 cwPCounty(String cwPCounty) {
    this.cwPCounty = cwPCounty;
    return this;
  }

  /**
   * County in which the facility is located.
   * @return cwPCounty
   */
  @javax.annotation.Nonnull
  public String getCwPCounty() {
    return cwPCounty;
  }

  public void setCwPCounty(String cwPCounty) {
    this.cwPCounty = cwPCounty;
  }


  public Cwa10 cwPCsoFlag(String cwPCsoFlag) {
    this.cwPCsoFlag = cwPCsoFlag;
    return this;
  }

  /**
   * The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.
   * @return cwPCsoFlag
   */
  @javax.annotation.Nonnull
  public String getCwPCsoFlag() {
    return cwPCsoFlag;
  }

  public void setCwPCsoFlag(String cwPCsoFlag) {
    this.cwPCsoFlag = cwPCsoFlag;
  }


  public Cwa10 cwPCsoOutfalls(String cwPCsoOutfalls) {
    this.cwPCsoOutfalls = cwPCsoOutfalls;
    return this;
  }

  /**
   * The number of discharge outfalls at points prior to the treatment plant.
   * @return cwPCsoOutfalls
   */
  @javax.annotation.Nonnull
  public String getCwPCsoOutfalls() {
    return cwPCsoOutfalls;
  }

  public void setCwPCsoOutfalls(String cwPCsoOutfalls) {
    this.cwPCsoOutfalls = cwPCsoOutfalls;
  }


  public Cwa10 cwPDateLastBioFea(String cwPDateLastBioFea) {
    this.cwPDateLastBioFea = cwPDateLastBioFea;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed biosolids formal enforcement action taken against the facility within the last five years.
   * @return cwPDateLastBioFea
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioFea() {
    return cwPDateLastBioFea;
  }

  public void setCwPDateLastBioFea(String cwPDateLastBioFea) {
    this.cwPDateLastBioFea = cwPDateLastBioFea;
  }


  public Cwa10 cwPDateLastBioFeaEPA(String cwPDateLastBioFeaEPA) {
    this.cwPDateLastBioFeaEPA = cwPDateLastBioFeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.
   * @return cwPDateLastBioFeaEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioFeaEPA() {
    return cwPDateLastBioFeaEPA;
  }

  public void setCwPDateLastBioFeaEPA(String cwPDateLastBioFeaEPA) {
    this.cwPDateLastBioFeaEPA = cwPDateLastBioFeaEPA;
  }


  public Cwa10 cwPDateLastBioFeaSt(String cwPDateLastBioFeaSt) {
    this.cwPDateLastBioFeaSt = cwPDateLastBioFeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.
   * @return cwPDateLastBioFeaSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioFeaSt() {
    return cwPDateLastBioFeaSt;
  }

  public void setCwPDateLastBioFeaSt(String cwPDateLastBioFeaSt) {
    this.cwPDateLastBioFeaSt = cwPDateLastBioFeaSt;
  }


  public Cwa10 cwPDateLastBioIea(String cwPDateLastBioIea) {
    this.cwPDateLastBioIea = cwPDateLastBioIea;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility within the last five years.
   * @return cwPDateLastBioIea
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioIea() {
    return cwPDateLastBioIea;
  }

  public void setCwPDateLastBioIea(String cwPDateLastBioIea) {
    this.cwPDateLastBioIea = cwPDateLastBioIea;
  }


  public Cwa10 cwPDateLastBioIeaEPA(String cwPDateLastBioIeaEPA) {
    this.cwPDateLastBioIeaEPA = cwPDateLastBioIeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by EPA within the last five years.
   * @return cwPDateLastBioIeaEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioIeaEPA() {
    return cwPDateLastBioIeaEPA;
  }

  public void setCwPDateLastBioIeaEPA(String cwPDateLastBioIeaEPA) {
    this.cwPDateLastBioIeaEPA = cwPDateLastBioIeaEPA;
  }


  public Cwa10 cwPDateLastBioIeaSt(String cwPDateLastBioIeaSt) {
    this.cwPDateLastBioIeaSt = cwPDateLastBioIeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by a state environmental agency within the last five years.
   * @return cwPDateLastBioIeaSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioIeaSt() {
    return cwPDateLastBioIeaSt;
  }

  public void setCwPDateLastBioIeaSt(String cwPDateLastBioIeaSt) {
    this.cwPDateLastBioIeaSt = cwPDateLastBioIeaSt;
  }


  public Cwa10 cwPDateLastBioInsp(String cwPDateLastBioInsp) {
    this.cwPDateLastBioInsp = cwPDateLastBioInsp;
    return this;
  }

  /**
   * The date on which the most recent biosolids program inspection of the facility took place.
   * @return cwPDateLastBioInsp
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioInsp() {
    return cwPDateLastBioInsp;
  }

  public void setCwPDateLastBioInsp(String cwPDateLastBioInsp) {
    this.cwPDateLastBioInsp = cwPDateLastBioInsp;
  }


  public Cwa10 cwPDateLastBioInspEPA(String cwPDateLastBioInspEPA) {
    this.cwPDateLastBioInspEPA = cwPDateLastBioInspEPA;
    return this;
  }

  /**
   * Indicate the last inspection date by EPA
   * @return cwPDateLastBioInspEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioInspEPA() {
    return cwPDateLastBioInspEPA;
  }

  public void setCwPDateLastBioInspEPA(String cwPDateLastBioInspEPA) {
    this.cwPDateLastBioInspEPA = cwPDateLastBioInspEPA;
  }


  public Cwa10 cwPDateLastBioInspSt(String cwPDateLastBioInspSt) {
    this.cwPDateLastBioInspSt = cwPDateLastBioInspSt;
    return this;
  }

  /**
   * Indicate the last inspection date by state environmental agency
   * @return cwPDateLastBioInspSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioInspSt() {
    return cwPDateLastBioInspSt;
  }

  public void setCwPDateLastBioInspSt(String cwPDateLastBioInspSt) {
    this.cwPDateLastBioInspSt = cwPDateLastBioInspSt;
  }


  public Cwa10 cwPDateLastBioPenalty(String cwPDateLastBioPenalty) {
    this.cwPDateLastBioPenalty = cwPDateLastBioPenalty;
    return this;
  }

  /**
   * Indicates the date on which the most recent assessed (or final) biosolids penalty was taken against the facility within the last five years. This measure only includes penalties that have been entered in the program database ICIS-NPDES.
   * @return cwPDateLastBioPenalty
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastBioPenalty() {
    return cwPDateLastBioPenalty;
  }

  public void setCwPDateLastBioPenalty(String cwPDateLastBioPenalty) {
    this.cwPDateLastBioPenalty = cwPDateLastBioPenalty;
  }


  public Cwa10 cwPDateLastFea(String cwPDateLastFea) {
    this.cwPDateLastFea = cwPDateLastFea;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility.
   * @return cwPDateLastFea
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastFea() {
    return cwPDateLastFea;
  }

  public void setCwPDateLastFea(String cwPDateLastFea) {
    this.cwPDateLastFea = cwPDateLastFea;
  }


  public Cwa10 cwPDateLastFeaEPA(String cwPDateLastFeaEPA) {
    this.cwPDateLastFeaEPA = cwPDateLastFeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA.
   * @return cwPDateLastFeaEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastFeaEPA() {
    return cwPDateLastFeaEPA;
  }

  public void setCwPDateLastFeaEPA(String cwPDateLastFeaEPA) {
    this.cwPDateLastFeaEPA = cwPDateLastFeaEPA;
  }


  public Cwa10 cwPDateLastFeaSt(String cwPDateLastFeaSt) {
    this.cwPDateLastFeaSt = cwPDateLastFeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency.
   * @return cwPDateLastFeaSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastFeaSt() {
    return cwPDateLastFeaSt;
  }

  public void setCwPDateLastFeaSt(String cwPDateLastFeaSt) {
    this.cwPDateLastFeaSt = cwPDateLastFeaSt;
  }


  public Cwa10 cwPDateLastIeaEPA(String cwPDateLastIeaEPA) {
    this.cwPDateLastIeaEPA = cwPDateLastIeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA.
   * @return cwPDateLastIeaEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastIeaEPA() {
    return cwPDateLastIeaEPA;
  }

  public void setCwPDateLastIeaEPA(String cwPDateLastIeaEPA) {
    this.cwPDateLastIeaEPA = cwPDateLastIeaEPA;
  }


  public Cwa10 cwPDateLastIeaSt(String cwPDateLastIeaSt) {
    this.cwPDateLastIeaSt = cwPDateLastIeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency.
   * @return cwPDateLastIeaSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastIeaSt() {
    return cwPDateLastIeaSt;
  }

  public void setCwPDateLastIeaSt(String cwPDateLastIeaSt) {
    this.cwPDateLastIeaSt = cwPDateLastIeaSt;
  }


  public Cwa10 cwPDateLastInformalEa(String cwPDateLastInformalEa) {
    this.cwPDateLastInformalEa = cwPDateLastInformalEa;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the facility.
   * @return cwPDateLastInformalEa
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastInformalEa() {
    return cwPDateLastInformalEa;
  }

  public void setCwPDateLastInformalEa(String cwPDateLastInformalEa) {
    this.cwPDateLastInformalEa = cwPDateLastInformalEa;
  }


  public Cwa10 cwPDateLastInspEPA(String cwPDateLastInspEPA) {
    this.cwPDateLastInspEPA = cwPDateLastInspEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent inspection taken against the facility.
   * @return cwPDateLastInspEPA
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastInspEPA() {
    return cwPDateLastInspEPA;
  }

  public void setCwPDateLastInspEPA(String cwPDateLastInspEPA) {
    this.cwPDateLastInspEPA = cwPDateLastInspEPA;
  }


  public Cwa10 cwPDateLastInspSt(String cwPDateLastInspSt) {
    this.cwPDateLastInspSt = cwPDateLastInspSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency.
   * @return cwPDateLastInspSt
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastInspSt() {
    return cwPDateLastInspSt;
  }

  public void setCwPDateLastInspSt(String cwPDateLastInspSt) {
    this.cwPDateLastInspSt = cwPDateLastInspSt;
  }


  public Cwa10 cwPDateLastInspection(String cwPDateLastInspection) {
    this.cwPDateLastInspection = cwPDateLastInspection;
    return this;
  }

  /**
   * The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.
   * @return cwPDateLastInspection
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastInspection() {
    return cwPDateLastInspection;
  }

  public void setCwPDateLastInspection(String cwPDateLastInspection) {
    this.cwPDateLastInspection = cwPDateLastInspection;
  }


  public Cwa10 cwPDateLastPenalty(String cwPDateLastPenalty) {
    this.cwPDateLastPenalty = cwPDateLastPenalty;
    return this;
  }

  /**
   * Indicates date of most recent penalty against the facility.
   * @return cwPDateLastPenalty
   */
  @javax.annotation.Nonnull
  public String getCwPDateLastPenalty() {
    return cwPDateLastPenalty;
  }

  public void setCwPDateLastPenalty(String cwPDateLastPenalty) {
    this.cwPDateLastPenalty = cwPDateLastPenalty;
  }


  public Cwa10 cwPDaysLastBioInsp(String cwPDaysLastBioInsp) {
    this.cwPDaysLastBioInsp = cwPDaysLastBioInsp;
    return this;
  }

  /**
   * Indicates the number of days since the most recent Biosolids related inspection of the facility.
   * @return cwPDaysLastBioInsp
   */
  @javax.annotation.Nonnull
  public String getCwPDaysLastBioInsp() {
    return cwPDaysLastBioInsp;
  }

  public void setCwPDaysLastBioInsp(String cwPDaysLastBioInsp) {
    this.cwPDaysLastBioInsp = cwPDaysLastBioInsp;
  }


  public Cwa10 cwPDaysLastInspection(BigDecimal cwPDaysLastInspection) {
    this.cwPDaysLastInspection = cwPDaysLastInspection;
    return this;
  }

  /**
   * Indicates the number of days since the most recent inspection of the facility.
   * @return cwPDaysLastInspection
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPDaysLastInspection() {
    return cwPDaysLastInspection;
  }

  public void setCwPDaysLastInspection(BigDecimal cwPDaysLastInspection) {
    this.cwPDaysLastInspection = cwPDaysLastInspection;
  }


  public Cwa10 cwPE90Cnt(BigDecimal cwPE90Cnt) {
    this.cwPE90Cnt = cwPE90Cnt;
    return this;
  }

  /**
   * Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.
   * @return cwPE90Cnt
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPE90Cnt() {
    return cwPE90Cnt;
  }

  public void setCwPE90Cnt(BigDecimal cwPE90Cnt) {
    this.cwPE90Cnt = cwPE90Cnt;
  }


  public Cwa10 cwPEPARegion(String cwPEPARegion) {
    this.cwPEPARegion = cwPEPARegion;
    return this;
  }

  /**
   * The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.
   * @return cwPEPARegion
   */
  @javax.annotation.Nonnull
  public String getCwPEPARegion() {
    return cwPEPARegion;
  }

  public void setCwPEPARegion(String cwPEPARegion) {
    this.cwPEPARegion = cwPEPARegion;
  }


  public Cwa10 cwPEffectiveDate(String cwPEffectiveDate) {
    this.cwPEffectiveDate = cwPEffectiveDate;
    return this;
  }

  /**
   * Date (MM/DD/YYYY) that the permit became effective.
   * @return cwPEffectiveDate
   */
  @javax.annotation.Nonnull
  public String getCwPEffectiveDate() {
    return cwPEffectiveDate;
  }

  public void setCwPEffectiveDate(String cwPEffectiveDate) {
    this.cwPEffectiveDate = cwPEffectiveDate;
  }


  public Cwa10 cwPExpirationDate(String cwPExpirationDate) {
    this.cwPExpirationDate = cwPExpirationDate;
    return this;
  }

  /**
   * Date that the permit expires.
   * @return cwPExpirationDate
   */
  @javax.annotation.Nonnull
  public String getCwPExpirationDate() {
    return cwPExpirationDate;
  }

  public void setCwPExpirationDate(String cwPExpirationDate) {
    this.cwPExpirationDate = cwPExpirationDate;
  }


  public Cwa10 cwPFIPSCode(String cwPFIPSCode) {
    this.cwPFIPSCode = cwPFIPSCode;
    return this;
  }

  /**
   * A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.
   * @return cwPFIPSCode
   */
  @javax.annotation.Nonnull
  public String getCwPFIPSCode() {
    return cwPFIPSCode;
  }

  public void setCwPFIPSCode(String cwPFIPSCode) {
    this.cwPFIPSCode = cwPFIPSCode;
  }


  public Cwa10 cwPFacilityTypeCode(String cwPFacilityTypeCode) {
    this.cwPFacilityTypeCode = cwPFacilityTypeCode;
    return this;
  }

  /**
   * Get cwPFacilityTypeCode
   * @return cwPFacilityTypeCode
   */
  @javax.annotation.Nonnull
  public String getCwPFacilityTypeCode() {
    return cwPFacilityTypeCode;
  }

  public void setCwPFacilityTypeCode(String cwPFacilityTypeCode) {
    this.cwPFacilityTypeCode = cwPFacilityTypeCode;
  }


  public Cwa10 cwPFacilityTypeIndicator(String cwPFacilityTypeIndicator) {
    this.cwPFacilityTypeIndicator = cwPFacilityTypeIndicator;
    return this;
  }

  /**
   * Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.
   * @return cwPFacilityTypeIndicator
   */
  @javax.annotation.Nonnull
  public String getCwPFacilityTypeIndicator() {
    return cwPFacilityTypeIndicator;
  }

  public void setCwPFacilityTypeIndicator(String cwPFacilityTypeIndicator) {
    this.cwPFacilityTypeIndicator = cwPFacilityTypeIndicator;
  }


  public Cwa10 cwPFormalEaCnt(String cwPFormalEaCnt) {
    this.cwPFormalEaCnt = cwPFormalEaCnt;
    return this;
  }

  /**
   * Indicates the total number of enforcement actions taken against the facility within the last five years. \&quot;NA\&quot; indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.
   * @return cwPFormalEaCnt
   */
  @javax.annotation.Nonnull
  public String getCwPFormalEaCnt() {
    return cwPFormalEaCnt;
  }

  public void setCwPFormalEaCnt(String cwPFormalEaCnt) {
    this.cwPFormalEaCnt = cwPFormalEaCnt;
  }


  public Cwa10 cwPImpWaterFlg(String cwPImpWaterFlg) {
    this.cwPImpWaterFlg = cwPImpWaterFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.
   * @return cwPImpWaterFlg
   */
  @javax.annotation.Nonnull
  public String getCwPImpWaterFlg() {
    return cwPImpWaterFlg;
  }

  public void setCwPImpWaterFlg(String cwPImpWaterFlg) {
    this.cwPImpWaterFlg = cwPImpWaterFlg;
  }


  public Cwa10 cwPIndianCntryFlg(String cwPIndianCntryFlg) {
    this.cwPIndianCntryFlg = cwPIndianCntryFlg;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if a facility is located in Indian country.
   * @return cwPIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getCwPIndianCntryFlg() {
    return cwPIndianCntryFlg;
  }

  public void setCwPIndianCntryFlg(String cwPIndianCntryFlg) {
    this.cwPIndianCntryFlg = cwPIndianCntryFlg;
  }


  public Cwa10 cwPInformalEnfActCount(BigDecimal cwPInformalEnfActCount) {
    this.cwPInformalEnfActCount = cwPInformalEnfActCount;
    return this;
  }

  /**
   * Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.
   * @return cwPInformalEnfActCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPInformalEnfActCount() {
    return cwPInformalEnfActCount;
  }

  public void setCwPInformalEnfActCount(BigDecimal cwPInformalEnfActCount) {
    this.cwPInformalEnfActCount = cwPInformalEnfActCount;
  }


  public Cwa10 cwPInspectionCount(BigDecimal cwPInspectionCount) {
    this.cwPInspectionCount = cwPInspectionCount;
    return this;
  }

  /**
   * The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.
   * @return cwPInspectionCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPInspectionCount() {
    return cwPInspectionCount;
  }

  public void setCwPInspectionCount(BigDecimal cwPInspectionCount) {
    this.cwPInspectionCount = cwPInspectionCount;
  }


  public Cwa10 cwPIssueDate(String cwPIssueDate) {
    this.cwPIssueDate = cwPIssueDate;
    return this;
  }

  /**
   * Date (MM/DD/YYYY) that the permit was issued.
   * @return cwPIssueDate
   */
  @javax.annotation.Nonnull
  public String getCwPIssueDate() {
    return cwPIssueDate;
  }

  public void setCwPIssueDate(String cwPIssueDate) {
    this.cwPIssueDate = cwPIssueDate;
  }


  public Cwa10 cwPMajorMinorStatusFlag(String cwPMajorMinorStatusFlag) {
    this.cwPMajorMinorStatusFlag = cwPMajorMinorStatusFlag;
    return this;
  }

  /**
   * Facilities marked \&quot;M\&quot; for major refers to CWA major permittees. - M &#x3D; Major - N &#x3D; Minor
   * @return cwPMajorMinorStatusFlag
   */
  @javax.annotation.Nonnull
  public String getCwPMajorMinorStatusFlag() {
    return cwPMajorMinorStatusFlag;
  }

  public void setCwPMajorMinorStatusFlag(String cwPMajorMinorStatusFlag) {
    this.cwPMajorMinorStatusFlag = cwPMajorMinorStatusFlag;
  }


  public Cwa10 cwPNAICSCodes(String cwPNAICSCodes) {
    this.cwPNAICSCodes = cwPNAICSCodes;
    return this;
  }

  /**
   * Indicates the facility&#39;s or permit&#39;s primary North American Industry Classification System (NAICS) Code.
   * @return cwPNAICSCodes
   */
  @javax.annotation.Nonnull
  public String getCwPNAICSCodes() {
    return cwPNAICSCodes;
  }

  public void setCwPNAICSCodes(String cwPNAICSCodes) {
    this.cwPNAICSCodes = cwPNAICSCodes;
  }


  public Cwa10 cwPName(String cwPName) {
    this.cwPName = cwPName;
    return this;
  }

  /**
   * Facility or permit holder name, as maintained in ICIS-NPDES.
   * @return cwPName
   */
  @javax.annotation.Nonnull
  public String getCwPName() {
    return cwPName;
  }

  public void setCwPName(String cwPName) {
    this.cwPName = cwPName;
  }


  public Cwa10 cwPPermitStatusCode(String cwPPermitStatusCode) {
    this.cwPPermitStatusCode = cwPPermitStatusCode;
    return this;
  }

  /**
   * The code associated with the facility&#39;s NPDES permit status.
   * @return cwPPermitStatusCode
   */
  @javax.annotation.Nonnull
  public String getCwPPermitStatusCode() {
    return cwPPermitStatusCode;
  }

  public void setCwPPermitStatusCode(String cwPPermitStatusCode) {
    this.cwPPermitStatusCode = cwPPermitStatusCode;
  }


  public Cwa10 cwPPermitStatusDesc(String cwPPermitStatusDesc) {
    this.cwPPermitStatusDesc = cwPPermitStatusDesc;
    return this;
  }

  /**
   * The current stage/status in the NPDES permit life cycle.
   * @return cwPPermitStatusDesc
   */
  @javax.annotation.Nonnull
  public String getCwPPermitStatusDesc() {
    return cwPPermitStatusDesc;
  }

  public void setCwPPermitStatusDesc(String cwPPermitStatusDesc) {
    this.cwPPermitStatusDesc = cwPPermitStatusDesc;
  }


  public Cwa10 cwPPermitTypeCode(String cwPPermitTypeCode) {
    this.cwPPermitTypeCode = cwPPermitTypeCode;
    return this;
  }

  /**
   * The code associated with the facility&#39;s NPDES permit classification.
   * @return cwPPermitTypeCode
   */
  @javax.annotation.Nonnull
  public String getCwPPermitTypeCode() {
    return cwPPermitTypeCode;
  }

  public void setCwPPermitTypeCode(String cwPPermitTypeCode) {
    this.cwPPermitTypeCode = cwPPermitTypeCode;
  }


  public Cwa10 cwPPermitTypeDesc(String cwPPermitTypeDesc) {
    this.cwPPermitTypeDesc = cwPPermitTypeDesc;
    return this;
  }

  /**
   * NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility
   * @return cwPPermitTypeDesc
   */
  @javax.annotation.Nonnull
  public String getCwPPermitTypeDesc() {
    return cwPPermitTypeDesc;
  }

  public void setCwPPermitTypeDesc(String cwPPermitTypeDesc) {
    this.cwPPermitTypeDesc = cwPPermitTypeDesc;
  }


  public Cwa10 cwPQtrsWithNC(BigDecimal cwPQtrsWithNC) {
    this.cwPQtrsWithNC = cwPQtrsWithNC;
    return this;
  }

  /**
   * Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in noncompliance (NC) status, or in Significant Noncompliance (SNC), as described above under Compliance Status.
   * @return cwPQtrsWithNC
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPQtrsWithNC() {
    return cwPQtrsWithNC;
  }

  public void setCwPQtrsWithNC(BigDecimal cwPQtrsWithNC) {
    this.cwPQtrsWithNC = cwPQtrsWithNC;
  }


  public Cwa10 cwPQtrsWithSNC(BigDecimal cwPQtrsWithSNC) {
    this.cwPQtrsWithSNC = cwPQtrsWithSNC;
    return this;
  }

  /**
   * Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Noncompliance (SNC), as described above under Compliance Status.
   * @return cwPQtrsWithSNC
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPQtrsWithSNC() {
    return cwPQtrsWithSNC;
  }

  public void setCwPQtrsWithSNC(BigDecimal cwPQtrsWithSNC) {
    this.cwPQtrsWithSNC = cwPQtrsWithSNC;
  }


  public Cwa10 cwPSICCodes(String cwPSICCodes) {
    this.cwPSICCodes = cwPSICCodes;
    return this;
  }

  /**
   * Indicates the facility&#39;s or permit&#39;s primary Standard Industrial Classification (SIC) Code.
   * @return cwPSICCodes
   */
  @javax.annotation.Nonnull
  public String getCwPSICCodes() {
    return cwPSICCodes;
  }

  public void setCwPSICCodes(String cwPSICCodes) {
    this.cwPSICCodes = cwPSICCodes;
  }


  public Cwa10 cwPSNCEventDesc(String cwPSNCEventDesc) {
    this.cwPSNCEventDesc = cwPSNCEventDesc;
    return this;
  }

  /**
   * Describes the event that resulted in the facility&#39;s status of Significant Noncompliance.
   * @return cwPSNCEventDesc
   */
  @javax.annotation.Nonnull
  public String getCwPSNCEventDesc() {
    return cwPSNCEventDesc;
  }

  public void setCwPSNCEventDesc(String cwPSNCEventDesc) {
    this.cwPSNCEventDesc = cwPSNCEventDesc;
  }


  public Cwa10 cwPSNCStatus(String cwPSNCStatus) {
    this.cwPSNCStatus = cwPSNCStatus;
    return this;
  }

  /**
   * Indicates when a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation.
   * @return cwPSNCStatus
   */
  @javax.annotation.Nonnull
  public String getCwPSNCStatus() {
    return cwPSNCStatus;
  }

  public void setCwPSNCStatus(String cwPSNCStatus) {
    this.cwPSNCStatus = cwPSNCStatus;
  }


  public Cwa10 cwPSNCStatusDate(String cwPSNCStatusDate) {
    this.cwPSNCStatusDate = cwPSNCStatusDate;
    return this;
  }

  /**
   * The status date of the facility&#39;s Significant Noncompliance designation.
   * @return cwPSNCStatusDate
   */
  @javax.annotation.Nonnull
  public String getCwPSNCStatusDate() {
    return cwPSNCStatusDate;
  }

  public void setCwPSNCStatusDate(String cwPSNCStatusDate) {
    this.cwPSNCStatusDate = cwPSNCStatusDate;
  }


  public Cwa10 cwPState(String cwPState) {
    this.cwPState = cwPState;
    return this;
  }

  /**
   * Facility location - two-digit state abbreviation.
   * @return cwPState
   */
  @javax.annotation.Nonnull
  public String getCwPState() {
    return cwPState;
  }

  public void setCwPState(String cwPState) {
    this.cwPState = cwPState;
  }


  public Cwa10 cwPStateDistrict(String cwPStateDistrict) {
    this.cwPStateDistrict = cwPStateDistrict;
    return this;
  }

  /**
   * The State Congressional District the facility is located within.
   * @return cwPStateDistrict
   */
  @javax.annotation.Nonnull
  public String getCwPStateDistrict() {
    return cwPStateDistrict;
  }

  public void setCwPStateDistrict(String cwPStateDistrict) {
    this.cwPStateDistrict = cwPStateDistrict;
  }


  public Cwa10 cwPStateWaterBodyCode(String cwPStateWaterBodyCode) {
    this.cwPStateWaterBodyCode = cwPStateWaterBodyCode;
    return this;
  }

  /**
   * Code from the Assessment TMDL Tracking &amp; Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)
   * @return cwPStateWaterBodyCode
   */
  @javax.annotation.Nonnull
  public String getCwPStateWaterBodyCode() {
    return cwPStateWaterBodyCode;
  }

  public void setCwPStateWaterBodyCode(String cwPStateWaterBodyCode) {
    this.cwPStateWaterBodyCode = cwPStateWaterBodyCode;
  }


  public Cwa10 cwPStateWaterBodyName(String cwPStateWaterBodyName) {
    this.cwPStateWaterBodyName = cwPStateWaterBodyName;
    return this;
  }

  /**
   * The name of the watershed from the ATTAINS database in which the facility resides.
   * @return cwPStateWaterBodyName
   */
  @javax.annotation.Nonnull
  public String getCwPStateWaterBodyName() {
    return cwPStateWaterBodyName;
  }

  public void setCwPStateWaterBodyName(String cwPStateWaterBodyName) {
    this.cwPStateWaterBodyName = cwPStateWaterBodyName;
  }


  public Cwa10 cwPStatus(String cwPStatus) {
    this.cwPStatus = cwPStatus;
    return this;
  }

  /**
   * An indication of the facility&#39;s current compliance status under the Clean Water Act: - Significant Violation - Noncompliance - No Violation - Unknown
   * @return cwPStatus
   */
  @javax.annotation.Nonnull
  public String getCwPStatus() {
    return cwPStatus;
  }

  public void setCwPStatus(String cwPStatus) {
    this.cwPStatus = cwPStatus;
  }


  public Cwa10 cwPStreet(String cwPStreet) {
    this.cwPStreet = cwPStreet;
    return this;
  }

  /**
   * Facility street address
   * @return cwPStreet
   */
  @javax.annotation.Nonnull
  public String getCwPStreet() {
    return cwPStreet;
  }

  public void setCwPStreet(String cwPStreet) {
    this.cwPStreet = cwPStreet;
  }


  public Cwa10 cwPTRIbalLandCode(String cwPTRIbalLandCode) {
    this.cwPTRIbalLandCode = cwPTRIbalLandCode;
    return this;
  }

  /**
   * From ICIS, the unique identifier for every unit of land within Indian Country.
   * @return cwPTRIbalLandCode
   */
  @javax.annotation.Nonnull
  public String getCwPTRIbalLandCode() {
    return cwPTRIbalLandCode;
  }

  public void setCwPTRIbalLandCode(String cwPTRIbalLandCode) {
    this.cwPTRIbalLandCode = cwPTRIbalLandCode;
  }


  public Cwa10 cwPTerminationDate(String cwPTerminationDate) {
    this.cwPTerminationDate = cwPTerminationDate;
    return this;
  }

  /**
   * Date (MM/DD/YYYY) that the permit was terminated.
   * @return cwPTerminationDate
   */
  @javax.annotation.Nonnull
  public String getCwPTerminationDate() {
    return cwPTerminationDate;
  }

  public void setCwPTerminationDate(String cwPTerminationDate) {
    this.cwPTerminationDate = cwPTerminationDate;
  }


  public Cwa10 cwPTotalDesignFlowNmbr(BigDecimal cwPTotalDesignFlowNmbr) {
    this.cwPTotalDesignFlowNmbr = cwPTotalDesignFlowNmbr;
    return this;
  }

  /**
   * The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.
   * @return cwPTotalDesignFlowNmbr
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPTotalDesignFlowNmbr() {
    return cwPTotalDesignFlowNmbr;
  }

  public void setCwPTotalDesignFlowNmbr(BigDecimal cwPTotalDesignFlowNmbr) {
    this.cwPTotalDesignFlowNmbr = cwPTotalDesignFlowNmbr;
  }


  public Cwa10 cwPTotalPenalties(String cwPTotalPenalties) {
    this.cwPTotalPenalties = cwPTotalPenalties;
    return this;
  }

  /**
   * The total penalty value incurred over 5 years.
   * @return cwPTotalPenalties
   */
  @javax.annotation.Nonnull
  public String getCwPTotalPenalties() {
    return cwPTotalPenalties;
  }

  public void setCwPTotalPenalties(String cwPTotalPenalties) {
    this.cwPTotalPenalties = cwPTotalPenalties;
  }


  public Cwa10 cwPVersionNmbr(BigDecimal cwPVersionNmbr) {
    this.cwPVersionNmbr = cwPVersionNmbr;
    return this;
  }

  /**
   * The version number of the facility&#39;s NPDES permit.
   * @return cwPVersionNmbr
   */
  @javax.annotation.Nonnull
  public BigDecimal getCwPVersionNmbr() {
    return cwPVersionNmbr;
  }

  public void setCwPVersionNmbr(BigDecimal cwPVersionNmbr) {
    this.cwPVersionNmbr = cwPVersionNmbr;
  }


  public Cwa10 cwPVioStatus(String cwPVioStatus) {
    this.cwPVioStatus = cwPVioStatus;
    return this;
  }

  /**
   * The current Reportable Non Compliance value for the facility.
   * @return cwPVioStatus
   */
  @javax.annotation.Nonnull
  public String getCwPVioStatus() {
    return cwPVioStatus;
  }

  public void setCwPVioStatus(String cwPVioStatus) {
    this.cwPVioStatus = cwPVioStatus;
  }


  public Cwa10 cwPViolStatus(String cwPViolStatus) {
    this.cwPViolStatus = cwPViolStatus;
    return this;
  }

  /**
   * Indicates if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.
   * @return cwPViolStatus
   */
  @javax.annotation.Nonnull
  public String getCwPViolStatus() {
    return cwPViolStatus;
  }

  public void setCwPViolStatus(String cwPViolStatus) {
    this.cwPViolStatus = cwPViolStatus;
  }


  public Cwa10 cwPZip(String cwPZip) {
    this.cwPZip = cwPZip;
    return this;
  }

  /**
   * Facility ZIP code
   * @return cwPZip
   */
  @javax.annotation.Nonnull
  public String getCwPZip() {
    return cwPZip;
  }

  public void setCwPZip(String cwPZip) {
    this.cwPZip = cwPZip;
  }


  public Cwa10 calculatedAccuracyMeters(BigDecimal calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
    return this;
  }

  /**
   * Indicates the calculated accuracy in meters for the facilities geospatial coordinate.  Generally, the accuracy is directly linked to the collection method where GPS methods are more accurate that manual methods like map or photo interpolations.
   * @return calculatedAccuracyMeters
   */
  @javax.annotation.Nonnull
  public BigDecimal getCalculatedAccuracyMeters() {
    return calculatedAccuracyMeters;
  }

  public void setCalculatedAccuracyMeters(BigDecimal calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
  }


  public Cwa10 censusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
    return this;
  }

  /**
   * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
   * @return censusBlockGroup
   */
  @javax.annotation.Nonnull
  public String getCensusBlockGroup() {
    return censusBlockGroup;
  }

  public void setCensusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
  }


  public Cwa10 certifiedDate(String certifiedDate) {
    this.certifiedDate = certifiedDate;
    return this;
  }

  /**
   * The issue date or effective date of the permit.
   * @return certifiedDate
   */
  @javax.annotation.Nonnull
  public String getCertifiedDate() {
    return certifiedDate;
  }

  public void setCertifiedDate(String certifiedDate) {
    this.certifiedDate = certifiedDate;
  }


  public Cwa10 chesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located within the Chesapeake Bay watershed.
   * @return chesapeakeBayFlag
   */
  @javax.annotation.Nonnull
  public String getChesapeakeBayFlag() {
    return chesapeakeBayFlag;
  }

  public void setChesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
  }


  public Cwa10 collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * ??
   * @return collectionMethod
   */
  @javax.annotation.Nonnull
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public Cwa10 controlMeasure(String controlMeasure) {
    this.controlMeasure = controlMeasure;
    return this;
  }

  /**
   * Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.
   * @return controlMeasure
   */
  @javax.annotation.Nonnull
  public String getControlMeasure() {
    return controlMeasure;
  }

  public void setControlMeasure(String controlMeasure) {
    this.controlMeasure = controlMeasure;
  }


  public Cwa10 controlMeasureSchedule(String controlMeasureSchedule) {
    this.controlMeasureSchedule = controlMeasureSchedule;
    return this;
  }

  /**
   * Description of schedule for control measures associated with good housekeeping and maintenance.
   * @return controlMeasureSchedule
   */
  @javax.annotation.Nonnull
  public String getControlMeasureSchedule() {
    return controlMeasureSchedule;
  }

  public void setControlMeasureSchedule(String controlMeasureSchedule) {
    this.controlMeasureSchedule = controlMeasureSchedule;
  }


  public Cwa10 currSvFlag(BigDecimal currSvFlag) {
    this.currSvFlag = currSvFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current significant violation. 1 &#x3D; Yes
   * @return currSvFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getCurrSvFlag() {
    return currSvFlag;
  }

  public void setCurrSvFlag(BigDecimal currSvFlag) {
    this.currSvFlag = currSvFlag;
  }


  public Cwa10 currVioFlag(BigDecimal currVioFlag) {
    this.currVioFlag = currVioFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current violation. 1 &#x3D; Yes
   * @return currVioFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getCurrVioFlag() {
    return currVioFlag;
  }

  public void setCurrVioFlag(BigDecimal currVioFlag) {
    this.currVioFlag = currVioFlag;
  }


  public Cwa10 dmRImpairedPoll(String dmRImpairedPoll) {
    this.dmRImpairedPoll = dmRImpairedPoll;
    return this;
  }

  /**
   * The pollutants with limits or monitoring requirements in a facility&#39;s NPDES permit with the potential to contribute to impairment of local waterbodies
   * @return dmRImpairedPoll
   */
  @javax.annotation.Nonnull
  public String getDmRImpairedPoll() {
    return dmRImpairedPoll;
  }

  public void setDmRImpairedPoll(String dmRImpairedPoll) {
    this.dmRImpairedPoll = dmRImpairedPoll;
  }


  public Cwa10 dmRPounds(BigDecimal dmRPounds) {
    this.dmRPounds = dmRPounds;
    return this;
  }

  /**
   * Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.
   * @return dmRPounds
   */
  @javax.annotation.Nonnull
  public BigDecimal getDmRPounds() {
    return dmRPounds;
  }

  public void setDmRPounds(BigDecimal dmRPounds) {
    this.dmRPounds = dmRPounds;
  }


  public Cwa10 dmRTwpe(BigDecimal dmRTwpe) {
    this.dmRTwpe = dmRTwpe;
    return this;
  }

  /**
   * Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.
   * @return dmRTwpe
   */
  @javax.annotation.Nonnull
  public BigDecimal getDmRTwpe() {
    return dmRTwpe;
  }

  public void setDmRTwpe(BigDecimal dmRTwpe) {
    this.dmRTwpe = dmRTwpe;
  }


  public Cwa10 dschToMs4(String dschToMs4) {
    this.dschToMs4 = dschToMs4;
    return this;
  }

  /**
   * Indicates�if a facility discharges into a Municipal Separate Storm Sewer System (MS4).
   * @return dschToMs4
   */
  @javax.annotation.Nonnull
  public String getDschToMs4() {
    return dschToMs4;
  }

  public void setDschToMs4(String dschToMs4) {
    this.dschToMs4 = dschToMs4;
  }


  public Cwa10 e90Exceeds1yr(String e90Exceeds1yr) {
    this.e90Exceeds1yr = e90Exceeds1yr;
    return this;
  }

  /**
   * The number of E90 Exceedences in the last year.
   * @return e90Exceeds1yr
   */
  @javax.annotation.Nonnull
  public String getE90Exceeds1yr() {
    return e90Exceeds1yr;
  }

  public void setE90Exceeds1yr(String e90Exceeds1yr) {
    this.e90Exceeds1yr = e90Exceeds1yr;
  }


  public Cwa10 e90Exceeds2yr(String e90Exceeds2yr) {
    this.e90Exceeds2yr = e90Exceeds2yr;
    return this;
  }

  /**
   * The number of E90 Exceedences in the last 2 years.
   * @return e90Exceeds2yr
   */
  @javax.annotation.Nonnull
  public String getE90Exceeds2yr() {
    return e90Exceeds2yr;
  }

  public void setE90Exceeds2yr(String e90Exceeds2yr) {
    this.e90Exceeds2yr = e90Exceeds2yr;
  }


  public Cwa10 e90Exceeds3yr(String e90Exceeds3yr) {
    this.e90Exceeds3yr = e90Exceeds3yr;
    return this;
  }

  /**
   * The number of E90 Exceedences in the last 3 years.
   * @return e90Exceeds3yr
   */
  @javax.annotation.Nonnull
  public String getE90Exceeds3yr() {
    return e90Exceeds3yr;
  }

  public void setE90Exceeds3yr(String e90Exceeds3yr) {
    this.e90Exceeds3yr = e90Exceeds3yr;
  }


  public Cwa10 e90Exceeds4yr(String e90Exceeds4yr) {
    this.e90Exceeds4yr = e90Exceeds4yr;
    return this;
  }

  /**
   * The number of E90 Exceedences in the last 4 years.
   * @return e90Exceeds4yr
   */
  @javax.annotation.Nonnull
  public String getE90Exceeds4yr() {
    return e90Exceeds4yr;
  }

  public void setE90Exceeds4yr(String e90Exceeds4yr) {
    this.e90Exceeds4yr = e90Exceeds4yr;
  }


  public Cwa10 e90Exceeds5yr(String e90Exceeds5yr) {
    this.e90Exceeds5yr = e90Exceeds5yr;
    return this;
  }

  /**
   * The number of E90 Exceedences in the last 5 years.
   * @return e90Exceeds5yr
   */
  @javax.annotation.Nonnull
  public String getE90Exceeds5yr() {
    return e90Exceeds5yr;
  }

  public void setE90Exceeds5yr(String e90Exceeds5yr) {
    this.e90Exceeds5yr = e90Exceeds5yr;
  }


  public Cwa10 e90Pollutants1yr(String e90Pollutants1yr) {
    this.e90Pollutants1yr = e90Pollutants1yr;
    return this;
  }

  /**
   * The pollutants for the E90 Exceedences in the last year.
   * @return e90Pollutants1yr
   */
  @javax.annotation.Nonnull
  public String getE90Pollutants1yr() {
    return e90Pollutants1yr;
  }

  public void setE90Pollutants1yr(String e90Pollutants1yr) {
    this.e90Pollutants1yr = e90Pollutants1yr;
  }


  public Cwa10 e90Pollutants2yr(String e90Pollutants2yr) {
    this.e90Pollutants2yr = e90Pollutants2yr;
    return this;
  }

  /**
   * The pollutants for the E90 Exceedences in the last 2 years.
   * @return e90Pollutants2yr
   */
  @javax.annotation.Nonnull
  public String getE90Pollutants2yr() {
    return e90Pollutants2yr;
  }

  public void setE90Pollutants2yr(String e90Pollutants2yr) {
    this.e90Pollutants2yr = e90Pollutants2yr;
  }


  public Cwa10 e90Pollutants3yr(String e90Pollutants3yr) {
    this.e90Pollutants3yr = e90Pollutants3yr;
    return this;
  }

  /**
   * The pollutants for the E90 Exceedences in the last 3 years.
   * @return e90Pollutants3yr
   */
  @javax.annotation.Nonnull
  public String getE90Pollutants3yr() {
    return e90Pollutants3yr;
  }

  public void setE90Pollutants3yr(String e90Pollutants3yr) {
    this.e90Pollutants3yr = e90Pollutants3yr;
  }


  public Cwa10 e90Pollutants4yr(String e90Pollutants4yr) {
    this.e90Pollutants4yr = e90Pollutants4yr;
    return this;
  }

  /**
   * The pollutants for the E90 Exceedences in the last 4 years.
   * @return e90Pollutants4yr
   */
  @javax.annotation.Nonnull
  public String getE90Pollutants4yr() {
    return e90Pollutants4yr;
  }

  public void setE90Pollutants4yr(String e90Pollutants4yr) {
    this.e90Pollutants4yr = e90Pollutants4yr;
  }


  public Cwa10 e90Pollutants5yr(String e90Pollutants5yr) {
    this.e90Pollutants5yr = e90Pollutants5yr;
    return this;
  }

  /**
   * The pollutants for the E90 Exceedences in the last 5 years.
   * @return e90Pollutants5yr
   */
  @javax.annotation.Nonnull
  public String getE90Pollutants5yr() {
    return e90Pollutants5yr;
  }

  public void setE90Pollutants5yr(String e90Pollutants5yr) {
    this.e90Pollutants5yr = e90Pollutants5yr;
  }


  public Cwa10 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Cwa10 ea5yrFlag(BigDecimal ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes
   * @return ea5yrFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getEa5yrFlag() {
    return ea5yrFlag;
  }

  public void setEa5yrFlag(BigDecimal ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
  }


  public Cwa10 effChartsFlag(String effChartsFlag) {
    this.effChartsFlag = effChartsFlag;
    return this;
  }

  /**
   * Get effChartsFlag
   * @return effChartsFlag
   */
  @javax.annotation.Nonnull
  public String getEffChartsFlag() {
    return effChartsFlag;
  }

  public void setEffChartsFlag(String effChartsFlag) {
    this.effChartsFlag = effChartsFlag;
  }


  public Cwa10 effExceeds(BigDecimal effExceeds) {
    this.effExceeds = effExceeds;
    return this;
  }

  /**
   * The number of E90 Effluent Violations in the last 3 years.
   * @return effExceeds
   */
  @javax.annotation.Nonnull
  public BigDecimal getEffExceeds() {
    return effExceeds;
  }

  public void setEffExceeds(BigDecimal effExceeds) {
    this.effExceeds = effExceeds;
  }


  public Cwa10 ejscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlag
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlag() {
    return ejscreenFlag;
  }

  public void setEjscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
  }


  public Cwa10 ejscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlagUs
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlagUs() {
    return ejscreenFlagUs;
  }

  public void setEjscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
  }


  public Cwa10 electrRptWaiverEffDate(String electrRptWaiverEffDate) {
    this.electrRptWaiverEffDate = electrRptWaiverEffDate;
    return this;
  }

  /**
   * This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.
   * @return electrRptWaiverEffDate
   */
  @javax.annotation.Nonnull
  public String getElectrRptWaiverEffDate() {
    return electrRptWaiverEffDate;
  }

  public void setElectrRptWaiverEffDate(String electrRptWaiverEffDate) {
    this.electrRptWaiverEffDate = electrRptWaiverEffDate;
  }


  public Cwa10 electrRptWaiverExpDate(String electrRptWaiverExpDate) {
    this.electrRptWaiverExpDate = electrRptWaiverExpDate;
    return this;
  }

  /**
   * This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.
   * @return electrRptWaiverExpDate
   */
  @javax.annotation.Nonnull
  public String getElectrRptWaiverExpDate() {
    return electrRptWaiverExpDate;
  }

  public void setElectrRptWaiverExpDate(String electrRptWaiverExpDate) {
    this.electrRptWaiverExpDate = electrRptWaiverExpDate;
  }


  public Cwa10 electrRptWaiverTypeCode(String electrRptWaiverTypeCode) {
    this.electrRptWaiverTypeCode = electrRptWaiverTypeCode;
    return this;
  }

  /**
   * The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
   * @return electrRptWaiverTypeCode
   */
  @javax.annotation.Nonnull
  public String getElectrRptWaiverTypeCode() {
    return electrRptWaiverTypeCode;
  }

  public void setElectrRptWaiverTypeCode(String electrRptWaiverTypeCode) {
    this.electrRptWaiverTypeCode = electrRptWaiverTypeCode;
  }


  public Cwa10 electrRptWaiverTypeDesc(String electrRptWaiverTypeDesc) {
    this.electrRptWaiverTypeDesc = electrRptWaiverTypeDesc;
    return this;
  }

  /**
   * Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.
   * @return electrRptWaiverTypeDesc
   */
  @javax.annotation.Nonnull
  public String getElectrRptWaiverTypeDesc() {
    return electrRptWaiverTypeDesc;
  }

  public void setElectrRptWaiverTypeDesc(String electrRptWaiverTypeDesc) {
    this.electrRptWaiverTypeDesc = electrRptWaiverTypeDesc;
  }


  public Cwa10 electrSubmissionTypeCode(String electrSubmissionTypeCode) {
    this.electrSubmissionTypeCode = electrSubmissionTypeCode;
    return this;
  }

  /**
   * This is the code indicating the means by which the data were submitted electronically.
   * @return electrSubmissionTypeCode
   */
  @javax.annotation.Nonnull
  public String getElectrSubmissionTypeCode() {
    return electrSubmissionTypeCode;
  }

  public void setElectrSubmissionTypeCode(String electrSubmissionTypeCode) {
    this.electrSubmissionTypeCode = electrSubmissionTypeCode;
  }


  public Cwa10 electrSubmissionTypeDesc(String electrSubmissionTypeDesc) {
    this.electrSubmissionTypeDesc = electrSubmissionTypeDesc;
    return this;
  }

  /**
   * This is the description of the code indicating the means by which the data were submitted electronically.
   * @return electrSubmissionTypeDesc
   */
  @javax.annotation.Nonnull
  public String getElectrSubmissionTypeDesc() {
    return electrSubmissionTypeDesc;
  }

  public void setElectrSubmissionTypeDesc(String electrSubmissionTypeDesc) {
    this.electrSubmissionTypeDesc = electrSubmissionTypeDesc;
  }


  public Cwa10 exposedActivity(String exposedActivity) {
    this.exposedActivity = exposedActivity;
    return this;
  }

  /**
   * Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.
   * @return exposedActivity
   */
  @javax.annotation.Nonnull
  public String getExposedActivity() {
    return exposedActivity;
  }

  public void setExposedActivity(String exposedActivity) {
    this.exposedActivity = exposedActivity;
  }


  public Cwa10 facCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
    return this;
  }

  /**
   * The facility county name from EPA&#39;s Facility Registry System
   * @return facCountyName
   */
  @javax.annotation.Nonnull
  public String getFacCountyName() {
    return facCountyName;
  }

  public void setFacCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
  }


  public Cwa10 facDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
    return this;
  }

  /**
   * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
   * @return facDerivedHuc
   */
  @javax.annotation.Nonnull
  public String getFacDerivedHuc() {
    return facDerivedHuc;
  }

  public void setFacDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
  }


  public Cwa10 facDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
    return this;
  }

  /**
   * The tribes or tribal territories located within 25 miles of the facility&#39;s location.
   * @return facDerivedTRIbes
   */
  @javax.annotation.Nonnull
  public String getFacDerivedTRIbes() {
    return facDerivedTRIbes;
  }

  public void setFacDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
  }


  public Cwa10 facDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
    return this;
  }

  /**
   * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
   * @return facDerivedWBD
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBD() {
    return facDerivedWBD;
  }

  public void setFacDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
  }


  public Cwa10 facDerivedWBDHu8(String facDerivedWBDHu8) {
    this.facDerivedWBDHu8 = facDerivedWBDHu8;
    return this;
  }

  /**
   * Spatially derived HUC based on the facility&#39;s geographic coordinates in FRS.
   * @return facDerivedWBDHu8
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDHu8() {
    return facDerivedWBDHu8;
  }

  public void setFacDerivedWBDHu8(String facDerivedWBDHu8) {
    this.facDerivedWBDHu8 = facDerivedWBDHu8;
  }


  public Cwa10 facDerivedWBDHu8Name(String facDerivedWBDHu8Name) {
    this.facDerivedWBDHu8Name = facDerivedWBDHu8Name;
    return this;
  }

  /**
   * The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility&#39;s geographic coordinates in FRS.
   * @return facDerivedWBDHu8Name
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDHu8Name() {
    return facDerivedWBDHu8Name;
  }

  public void setFacDerivedWBDHu8Name(String facDerivedWBDHu8Name) {
    this.facDerivedWBDHu8Name = facDerivedWBDHu8Name;
  }


  public Cwa10 facDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
    return this;
  }

  /**
   * The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
   * @return facDerivedWBDName
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDName() {
    return facDerivedWBDName;
  }

  public void setFacDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
  }


  public Cwa10 facFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
    return this;
  }

  /**
   * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
   * @return facFIPSCode
   */
  @javax.annotation.Nonnull
  public String getFacFIPSCode() {
    return facFIPSCode;
  }

  public void setFacFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
  }


  public Cwa10 facFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
    return this;
  }

  /**
   * Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C &#x3D; Civilian Federal Agency; D &#x3D; Department of Defense; E &#x3D; Department of Energy; X &#x3D; Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
   * @return facFederalAgencyCode
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyCode() {
    return facFederalAgencyCode;
  }

  public void setFacFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
  }


  public Cwa10 facFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
    return this;
  }

  /**
   * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
   * @return facFederalAgencyName
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyName() {
    return facFederalAgencyName;
  }

  public void setFacFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
  }


  public Cwa10 facIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
    return this;
  }

  /**
   * Flag showing Y/N whether the facility is located in Indian Country.
   * @return facIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianCntryFlg() {
    return facIndianCntryFlg;
  }

  public void setFacIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
  }


  public Cwa10 facIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
    return this;
  }

  /**
   * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
   * @return facIndianSpatialFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianSpatialFlg() {
    return facIndianSpatialFlg;
  }

  public void setFacIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
  }


  public Cwa10 facMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
    return this;
  }

  /**
   * Graphical indicator denoting whether geographical data required to map a facility are available.
   * @return facMapFlg
   */
  @javax.annotation.Nonnull
  public String getFacMapFlg() {
    return facMapFlg;
  }

  public void setFacMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
  }


  public Cwa10 facMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
    return this;
  }

  /**
   * The default map icon image file calculated for the facility by the ECHO program.
   * @return facMapIcon
   */
  @javax.annotation.Nonnull
  public String getFacMapIcon() {
    return facMapIcon;
  }

  public void setFacMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
  }


  public Cwa10 facPercentMinority(BigDecimal facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
    return this;
  }

  /**
   * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
   * @return facPercentMinority
   */
  @javax.annotation.Nonnull
  public BigDecimal getFacPercentMinority() {
    return facPercentMinority;
  }

  public void setFacPercentMinority(BigDecimal facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
  }


  public Cwa10 facPopDen(BigDecimal facPopDen) {
    this.facPopDen = facPopDen;
    return this;
  }

  /**
   * The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).
   * @return facPopDen
   */
  @javax.annotation.Nonnull
  public BigDecimal getFacPopDen() {
    return facPopDen;
  }

  public void setFacPopDen(BigDecimal facPopDen) {
    this.facPopDen = facPopDen;
  }


  public Cwa10 facStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
    return this;
  }

  /**
   * The standardized  facility county name from EPA&#39;s Facility Registry System
   * @return facStdCountyName
   */
  @javax.annotation.Nonnull
  public String getFacStdCountyName() {
    return facStdCountyName;
  }

  public void setFacStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
  }


  public Cwa10 facTRIPotwTrans(String facTRIPotwTrans) {
    this.facTRIPotwTrans = facTRIPotwTrans;
    return this;
  }

  /**
   * POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.
   * @return facTRIPotwTrans
   */
  @javax.annotation.Nonnull
  public String getFacTRIPotwTrans() {
    return facTRIPotwTrans;
  }

  public void setFacTRIPotwTrans(String facTRIPotwTrans) {
    this.facTRIPotwTrans = facTRIPotwTrans;
  }


  public Cwa10 facTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
    return this;
  }

  /**
   * Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
   * @return facTRIReporter
   */
  @javax.annotation.Nonnull
  public String getFacTRIReporter() {
    return facTRIReporter;
  }

  public void setFacTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
  }


  public Cwa10 facTRISwRel(String facTRISwRel) {
    this.facTRISwRel = facTRISwRel;
    return this;
  }

  /**
   * Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.
   * @return facTRISwRel
   */
  @javax.annotation.Nonnull
  public String getFacTRISwRel() {
    return facTRISwRel;
  }

  public void setFacTRISwRel(String facTRISwRel) {
    this.facTRISwRel = facTRISwRel;
  }


  public Cwa10 facUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
    return this;
  }

  /**
   * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
   * @return facUsMexBorderFlg
   */
  @javax.annotation.Nonnull
  public String getFacUsMexBorderFlg() {
    return facUsMexBorderFlg;
  }

  public void setFacUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
  }


  public Cwa10 historicCriterionCode(String historicCriterionCode) {
    this.historicCriterionCode = historicCriterionCode;
    return this;
  }

  /**
   * Indicates the eligibility criteria for historic properties preservation.
   * @return historicCriterionCode
   */
  @javax.annotation.Nonnull
  public String getHistoricCriterionCode() {
    return historicCriterionCode;
  }

  public void setHistoricCriterionCode(String historicCriterionCode) {
    this.historicCriterionCode = historicCriterionCode;
  }


  public Cwa10 indswFlag(String indswFlag) {
    this.indswFlag = indswFlag;
    return this;
  }

  /**
   * A value of Y indicates an Industrial Stormwater Permit.
   * @return indswFlag
   */
  @javax.annotation.Nonnull
  public String getIndswFlag() {
    return indswFlag;
  }

  public void setIndswFlag(String indswFlag) {
    this.indswFlag = indswFlag;
  }


  public Cwa10 infea5yrFlag(BigDecimal infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.
   * @return infea5yrFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getInfea5yrFlag() {
    return infea5yrFlag;
  }

  public void setInfea5yrFlag(BigDecimal infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
  }


  public Cwa10 insp5yrFlag(BigDecimal insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
   * @return insp5yrFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getInsp5yrFlag() {
    return insp5yrFlag;
  }

  public void setInsp5yrFlag(BigDecimal insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
  }


  public Cwa10 inspDef5yrCnt(BigDecimal inspDef5yrCnt) {
    this.inspDef5yrCnt = inspDef5yrCnt;
    return this;
  }

  /**
   * Get inspDef5yrCnt
   * @return inspDef5yrCnt
   */
  @javax.annotation.Nonnull
  public BigDecimal getInspDef5yrCnt() {
    return inspDef5yrCnt;
  }

  public void setInspDef5yrCnt(BigDecimal inspDef5yrCnt) {
    this.inspDef5yrCnt = inspDef5yrCnt;
  }


  public Cwa10 issuingAgency(String issuingAgency) {
    this.issuingAgency = issuingAgency;
    return this;
  }

  /**
   * This is the name of the organization issuing or granting a permit.
   * @return issuingAgency
   */
  @javax.annotation.Nonnull
  public String getIssuingAgency() {
    return issuingAgency;
  }

  public void setIssuingAgency(String issuingAgency) {
    this.issuingAgency = issuingAgency;
  }


  public Cwa10 lastDMRValueRcvdDate(String lastDMRValueRcvdDate) {
    this.lastDMRValueRcvdDate = lastDMRValueRcvdDate;
    return this;
  }

  /**
   * The latest date that a Discharge Monitoring Report was received by the State or EPA.
   * @return lastDMRValueRcvdDate
   */
  @javax.annotation.Nonnull
  public String getLastDMRValueRcvdDate() {
    return lastDMRValueRcvdDate;
  }

  public void setLastDMRValueRcvdDate(String lastDMRValueRcvdDate) {
    this.lastDMRValueRcvdDate = lastDMRValueRcvdDate;
  }


  public Cwa10 limPollutant(String limPollutant) {
    this.limPollutant = limPollutant;
    return this;
  }

  /**
   * The list of pollutants with enforceable (i.e., numeric limits or monitoring only) and/or benchmark limits in the current version of a NPDES permit.
   * @return limPollutant
   */
  @javax.annotation.Nonnull
  public String getLimPollutant() {
    return limPollutant;
  }

  public void setLimPollutant(String limPollutant) {
    this.limPollutant = limPollutant;
  }


  public Cwa10 lower48(String lower48) {
    this.lower48 = lower48;
    return this;
  }

  /**
   * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
   * @return lower48
   */
  @javax.annotation.Nonnull
  public String getLower48() {
    return lower48;
  }

  public void setLower48(String lower48) {
    this.lower48 = lower48;
  }


  public Cwa10 map(String map) {
    this.map = map;
    return this;
  }

  /**
   * No Longer Used.
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public Cwa10 masterExternalPermitNmbr(String masterExternalPermitNmbr) {
    this.masterExternalPermitNmbr = masterExternalPermitNmbr;
    return this;
  }

  /**
   * This is the unique identifier for the Master General Permit for a General Permit Covered Facility.
   * @return masterExternalPermitNmbr
   */
  @javax.annotation.Nonnull
  public String getMasterExternalPermitNmbr() {
    return masterExternalPermitNmbr;
  }

  public void setMasterExternalPermitNmbr(String masterExternalPermitNmbr) {
    this.masterExternalPermitNmbr = masterExternalPermitNmbr;
  }


  public Cwa10 maxPctileUs(BigDecimal maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
    return this;
  }

  /**
   * The maximum percentile from all individual EJSCREEN indicators.
   * @return maxPctileUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxPctileUs() {
    return maxPctileUs;
  }

  public void setMaxPctileUs(BigDecimal maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
  }


  public Cwa10 maxScore(BigDecimal maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * [Col. 121]
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(BigDecimal maxScore) {
    this.maxScore = maxScore;
  }


  public Cwa10 missDMRQtrs(BigDecimal missDMRQtrs) {
    this.missDMRQtrs = missDMRQtrs;
    return this;
  }

  /**
   * Count of the number of quarters, out of the last twelve quarters, in which EPA&#39;s data system was not able to determine the facility-level compliance status.
   * @return missDMRQtrs
   */
  @javax.annotation.Nonnull
  public BigDecimal getMissDMRQtrs() {
    return missDMRQtrs;
  }

  public void setMissDMRQtrs(BigDecimal missDMRQtrs) {
    this.missDMRQtrs = missDMRQtrs;
  }


  public Cwa10 msgpCorrectiveActionSmmry(String msgpCorrectiveActionSmmry) {
    this.msgpCorrectiveActionSmmry = msgpCorrectiveActionSmmry;
    return this;
  }

  /**
   * Summary of the corrective action documentation (part 4.3 of the permit) during the MSGP annual report year.
   * @return msgpCorrectiveActionSmmry
   */
  @javax.annotation.Nonnull
  public String getMsgpCorrectiveActionSmmry() {
    return msgpCorrectiveActionSmmry;
  }

  public void setMsgpCorrectiveActionSmmry(String msgpCorrectiveActionSmmry) {
    this.msgpCorrectiveActionSmmry = msgpCorrectiveActionSmmry;
  }


  public Cwa10 msgpFacilityInspctnSmmry(String msgpFacilityInspctnSmmry) {
    this.msgpFacilityInspctnSmmry = msgpFacilityInspctnSmmry;
    return this;
  }

  /**
   * Summary of the quarterly facility inspection documentation (part 3.1 of the permit) during the MSGP annual report year.
   * @return msgpFacilityInspctnSmmry
   */
  @javax.annotation.Nonnull
  public String getMsgpFacilityInspctnSmmry() {
    return msgpFacilityInspctnSmmry;
  }

  public void setMsgpFacilityInspctnSmmry(String msgpFacilityInspctnSmmry) {
    this.msgpFacilityInspctnSmmry = msgpFacilityInspctnSmmry;
  }


  public Cwa10 msgpLastReportYear(String msgpLastReportYear) {
    this.msgpLastReportYear = msgpLastReportYear;
    return this;
  }

  /**
   * The calendar year of the latest MSGP annual report submitted by the permitted facility.
   * @return msgpLastReportYear
   */
  @javax.annotation.Nonnull
  public String getMsgpLastReportYear() {
    return msgpLastReportYear;
  }

  public void setMsgpLastReportYear(String msgpLastReportYear) {
    this.msgpLastReportYear = msgpLastReportYear;
  }


  public Cwa10 msgpNoFurtherRdctnRtnle(String msgpNoFurtherRdctnRtnle) {
    this.msgpNoFurtherRdctnRtnle = msgpNoFurtherRdctnRtnle;
    return this;
  }

  /**
   * Description of rationale for why no further reductions are achievable (part 6.2.1.2 of the permit) during the MSGP annual report year.
   * @return msgpNoFurtherRdctnRtnle
   */
  @javax.annotation.Nonnull
  public String getMsgpNoFurtherRdctnRtnle() {
    return msgpNoFurtherRdctnRtnle;
  }

  public void setMsgpNoFurtherRdctnRtnle(String msgpNoFurtherRdctnRtnle) {
    this.msgpNoFurtherRdctnRtnle = msgpNoFurtherRdctnRtnle;
  }


  public Cwa10 msgpPermitType(String msgpPermitType) {
    this.msgpPermitType = msgpPermitType;
    return this;
  }

  /**
   * The Industrial stormwater permit type.
   * @return msgpPermitType
   */
  @javax.annotation.Nonnull
  public String getMsgpPermitType() {
    return msgpPermitType;
  }

  public void setMsgpPermitType(String msgpPermitType) {
    this.msgpPermitType = msgpPermitType;
  }


  public Cwa10 msgpVisualAssessmentSmmry(String msgpVisualAssessmentSmmry) {
    this.msgpVisualAssessmentSmmry = msgpVisualAssessmentSmmry;
    return this;
  }

  /**
   * Summary of the quarterly visual assessment documentation (part 3.3 of the permit) during the MSGP annual report year.
   * @return msgpVisualAssessmentSmmry
   */
  @javax.annotation.Nonnull
  public String getMsgpVisualAssessmentSmmry() {
    return msgpVisualAssessmentSmmry;
  }

  public void setMsgpVisualAssessmentSmmry(String msgpVisualAssessmentSmmry) {
    this.msgpVisualAssessmentSmmry = msgpVisualAssessmentSmmry;
  }


  public Cwa10 npDESDataGroups(String npDESDataGroups) {
    this.npDESDataGroups = npDESDataGroups;
    return this;
  }

  /**
   * This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.
   * @return npDESDataGroups
   */
  @javax.annotation.Nonnull
  public String getNpDESDataGroups() {
    return npDESDataGroups;
  }

  public void setNpDESDataGroups(String npDESDataGroups) {
    this.npDESDataGroups = npDESDataGroups;
  }


  public Cwa10 npDESDataGroupsDescs(String npDESDataGroupsDescs) {
    this.npDESDataGroupsDescs = npDESDataGroupsDescs;
    return this;
  }

  /**
   * Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.
   * @return npDESDataGroupsDescs
   */
  @javax.annotation.Nonnull
  public String getNpDESDataGroupsDescs() {
    return npDESDataGroupsDescs;
  }

  public void setNpDESDataGroupsDescs(String npDESDataGroupsDescs) {
    this.npDESDataGroupsDescs = npDESDataGroupsDescs;
  }


  public Cwa10 npDESIDs(String npDESIDs) {
    this.npDESIDs = npDESIDs;
    return this;
  }

  /**
   * Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)
   * @return npDESIDs
   */
  @javax.annotation.Nonnull
  public String getNpDESIDs() {
    return npDESIDs;
  }

  public void setNpDESIDs(String npDESIDs) {
    this.npDESIDs = npDESIDs;
  }


  public Cwa10 otherPermitIDs(String otherPermitIDs) {
    this.otherPermitIDs = otherPermitIDs;
    return this;
  }

  /**
   * Get otherPermitIDs
   * @return otherPermitIDs
   */
  @javax.annotation.Nonnull
  public String getOtherPermitIDs() {
    return otherPermitIDs;
  }

  public void setOtherPermitIDs(String otherPermitIDs) {
    this.otherPermitIDs = otherPermitIDs;
  }


  public Cwa10 over80CountUs(BigDecimal over80CountUs) {
    this.over80CountUs = over80CountUs;
    return this;
  }

  /**
   * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
   * @return over80CountUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getOver80CountUs() {
    return over80CountUs;
  }

  public void setOver80CountUs(BigDecimal over80CountUs) {
    this.over80CountUs = over80CountUs;
  }


  public Cwa10 pastCalYrAverageFlow(String pastCalYrAverageFlow) {
    this.pastCalYrAverageFlow = pastCalYrAverageFlow;
    return this;
  }

  /**
   * The past calendar year average flow in Million Gallons a Day (MGD).
   * @return pastCalYrAverageFlow
   */
  @javax.annotation.Nonnull
  public String getPastCalYrAverageFlow() {
    return pastCalYrAverageFlow;
  }

  public void setPastCalYrAverageFlow(String pastCalYrAverageFlow) {
    this.pastCalYrAverageFlow = pastCalYrAverageFlow;
  }


  public Cwa10 pastCalYrConvPolOvrLmt(BigDecimal pastCalYrConvPolOvrLmt) {
    this.pastCalYrConvPolOvrLmt = pastCalYrConvPolOvrLmt;
    return this;
  }

  /**
   * Total load over limit of conventional pollutant pounds equivalent discharged by the NPDES ID for the most recent complete calendar year.
   * @return pastCalYrConvPolOvrLmt
   */
  @javax.annotation.Nonnull
  public BigDecimal getPastCalYrConvPolOvrLmt() {
    return pastCalYrConvPolOvrLmt;
  }

  public void setPastCalYrConvPolOvrLmt(BigDecimal pastCalYrConvPolOvrLmt) {
    this.pastCalYrConvPolOvrLmt = pastCalYrConvPolOvrLmt;
  }


  public Cwa10 pastCalYrConvPollutants(String pastCalYrConvPollutants) {
    this.pastCalYrConvPollutants = pastCalYrConvPollutants;
    return this;
  }

  /**
   * Total pounds of conventional pollutants discharged by the NPDES ID for the most recent complete calendar year.
   * @return pastCalYrConvPollutants
   */
  @javax.annotation.Nonnull
  public String getPastCalYrConvPollutants() {
    return pastCalYrConvPollutants;
  }

  public void setPastCalYrConvPollutants(String pastCalYrConvPollutants) {
    this.pastCalYrConvPollutants = pastCalYrConvPollutants;
  }


  public Cwa10 pastCalYrToxicPolOvrLmt(BigDecimal pastCalYrToxicPolOvrLmt) {
    this.pastCalYrToxicPolOvrLmt = pastCalYrToxicPolOvrLmt;
    return this;
  }

  /**
   * Total load over limit of toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year.
   * @return pastCalYrToxicPolOvrLmt
   */
  @javax.annotation.Nonnull
  public BigDecimal getPastCalYrToxicPolOvrLmt() {
    return pastCalYrToxicPolOvrLmt;
  }

  public void setPastCalYrToxicPolOvrLmt(BigDecimal pastCalYrToxicPolOvrLmt) {
    this.pastCalYrToxicPolOvrLmt = pastCalYrToxicPolOvrLmt;
  }


  public Cwa10 pastCalYrToxicPollutants(String pastCalYrToxicPollutants) {
    this.pastCalYrToxicPollutants = pastCalYrToxicPollutants;
    return this;
  }

  /**
   * The toxic pollutants discharged by the NPDES facility for the most recent complete calendar year.
   * @return pastCalYrToxicPollutants
   */
  @javax.annotation.Nonnull
  public String getPastCalYrToxicPollutants() {
    return pastCalYrToxicPollutants;
  }

  public void setPastCalYrToxicPollutants(String pastCalYrToxicPollutants) {
    this.pastCalYrToxicPollutants = pastCalYrToxicPollutants;
  }


  public Cwa10 pctileCancerUs(BigDecimal pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
   * @return pctileCancerUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileCancerUs() {
    return pctileCancerUs;
  }

  public void setPctileCancerUs(BigDecimal pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
  }


  public Cwa10 pctileDpmUs(BigDecimal pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
   * @return pctileDpmUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileDpmUs() {
    return pctileDpmUs;
  }

  public void setPctileDpmUs(BigDecimal pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
  }


  public Cwa10 pctileO3Us(BigDecimal pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN ozone indicator.
   * @return pctileO3Us
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileO3Us() {
    return pctileO3Us;
  }

  public void setPctileO3Us(BigDecimal pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
  }


  public Cwa10 pctilePctpre1960Us(BigDecimal pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
   * @return pctilePctpre1960Us
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctilePctpre1960Us() {
    return pctilePctpre1960Us;
  }

  public void setPctilePctpre1960Us(BigDecimal pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
  }


  public Cwa10 pctilePmUs(BigDecimal pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
   * @return pctilePmUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctilePmUs() {
    return pctilePmUs;
  }

  public void setPctilePmUs(BigDecimal pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
  }


  public Cwa10 pctileProximityNPDESUs(BigDecimal pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
   * @return pctileProximityNPDESUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileProximityNPDESUs() {
    return pctileProximityNPDESUs;
  }

  public void setPctileProximityNPDESUs(BigDecimal pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
  }


  public Cwa10 pctileProximityNplUs(BigDecimal pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
   * @return pctileProximityNplUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileProximityNplUs() {
    return pctileProximityNplUs;
  }

  public void setPctileProximityNplUs(BigDecimal pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
  }


  public Cwa10 pctileProximityRmpUs(BigDecimal pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
   * @return pctileProximityRmpUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileProximityRmpUs() {
    return pctileProximityRmpUs;
  }

  public void setPctileProximityRmpUs(BigDecimal pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
  }


  public Cwa10 pctileProximityTsdfUs(BigDecimal pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
   * @return pctileProximityTsdfUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileProximityTsdfUs() {
    return pctileProximityTsdfUs;
  }

  public void setPctileProximityTsdfUs(BigDecimal pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
  }


  public Cwa10 pctileRespUs(BigDecimal pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
   * @return pctileRespUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileRespUs() {
    return pctileRespUs;
  }

  public void setPctileRespUs(BigDecimal pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
  }


  public Cwa10 pctileTrafficScoreUs(BigDecimal pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
   * @return pctileTrafficScoreUs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPctileTrafficScoreUs() {
    return pctileTrafficScoreUs;
  }

  public void setPctileTrafficScoreUs(BigDecimal pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
  }


  public Cwa10 permitComponents(String permitComponents) {
    this.permitComponents = permitComponents;
    return this;
  }

  /**
   * Indicates the permit component(s) associated with the NPDES Permit Program Area.
   * @return permitComponents
   */
  @javax.annotation.Nonnull
  public String getPermitComponents() {
    return permitComponents;
  }

  public void setPermitComponents(String permitComponents) {
    this.permitComponents = permitComponents;
  }


  public Cwa10 permitName(String permitName) {
    this.permitName = permitName;
    return this;
  }

  /**
   * Get permitName
   * @return permitName
   */
  @javax.annotation.Nonnull
  public String getPermitName() {
    return permitName;
  }

  public void setPermitName(String permitName) {
    this.permitName = permitName;
  }


  public Cwa10 permittingAgency(String permittingAgency) {
    this.permittingAgency = permittingAgency;
    return this;
  }

  /**
   * This is the type of organization issuing or granting a permit.
   * @return permittingAgency
   */
  @javax.annotation.Nonnull
  public String getPermittingAgency() {
    return permittingAgency;
  }

  public void setPermittingAgency(String permittingAgency) {
    this.permittingAgency = permittingAgency;
  }


  public Cwa10 pollWithViolation(String pollWithViolation) {
    this.pollWithViolation = pollWithViolation;
    return this;
  }

  /**
   * The names of pollutants with effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.
   * @return pollWithViolation
   */
  @javax.annotation.Nonnull
  public String getPollWithViolation() {
    return pollWithViolation;
  }

  public void setPollWithViolation(String pollWithViolation) {
    this.pollWithViolation = pollWithViolation;
  }


  public Cwa10 rcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
    return this;
  }

  /**
   * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
   * @return rcRAIDs
   */
  @javax.annotation.Nonnull
  public String getRcRAIDs() {
    return rcRAIDs;
  }

  public void setRcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
  }


  public Cwa10 radGnisName(String radGnisName) {
    this.radGnisName = radGnisName;
    return this;
  }

  /**
   * The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.
   * @return radGnisName
   */
  @javax.annotation.Nonnull
  public String getRadGnisName() {
    return radGnisName;
  }

  public void setRadGnisName(String radGnisName) {
    this.radGnisName = radGnisName;
  }


  public Cwa10 radHu12Name(String radHu12Name) {
    this.radHu12Name = radHu12Name;
    return this;
  }

  /**
   * The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).
   * @return radHu12Name
   */
  @javax.annotation.Nonnull
  public String getRadHu12Name() {
    return radHu12Name;
  }

  public void setRadHu12Name(String radHu12Name) {
    this.radHu12Name = radHu12Name;
  }


  public Cwa10 radReachcode(String radReachcode) {
    this.radReachcode = radReachcode;
    return this;
  }

  /**
   * A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.
   * @return radReachcode
   */
  @javax.annotation.Nonnull
  public String getRadReachcode() {
    return radReachcode;
  }

  public void setRadReachcode(String radReachcode) {
    this.radReachcode = radReachcode;
  }


  public Cwa10 radWBDHu8(String radWBDHu8) {
    this.radWBDHu8 = radWBDHu8;
    return this;
  }

  /**
   * Hydrologic Unit Code (HUC) from the Reach Address Database (RAD), which is derived from the USGS Watershed Boundary Dataset.
   * @return radWBDHu8
   */
  @javax.annotation.Nonnull
  public String getRadWBDHu8() {
    return radWBDHu8;
  }

  public void setRadWBDHu8(String radWBDHu8) {
    this.radWBDHu8 = radWBDHu8;
  }


  public Cwa10 radWBDHu8Name(String radWBDHu8Name) {
    this.radWBDHu8Name = radWBDHu8Name;
    return this;
  }

  /**
   * The name of the hydrologic unit in which the facility may discharge, from the Reach Address Database (RAD) and derived from the USGS Watershed Boundary Dataset.
   * @return radWBDHu8Name
   */
  @javax.annotation.Nonnull
  public String getRadWBDHu8Name() {
    return radWBDHu8Name;
  }

  public void setRadWBDHu8Name(String radWBDHu8Name) {
    this.radWBDHu8Name = radWBDHu8Name;
  }


  public Cwa10 radWBDHuc12(String radWBDHuc12) {
    this.radWBDHuc12 = radWBDHuc12;
    return this;
  }

  /**
   * Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)
   * @return radWBDHuc12
   */
  @javax.annotation.Nonnull
  public String getRadWBDHuc12() {
    return radWBDHuc12;
  }

  public void setRadWBDHuc12(String radWBDHuc12) {
    this.radWBDHuc12 = radWBDHuc12;
  }


  public Cwa10 receivingMs4Name(String receivingMs4Name) {
    this.receivingMs4Name = receivingMs4Name;
    return this;
  }

  /**
   * This is the name of the receiving MS4(s).
   * @return receivingMs4Name
   */
  @javax.annotation.Nonnull
  public String getReceivingMs4Name() {
    return receivingMs4Name;
  }

  public void setReceivingMs4Name(String receivingMs4Name) {
    this.receivingMs4Name = receivingMs4Name;
  }


  public Cwa10 referencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
    return this;
  }

  /**
   * ??
   * @return referencePoint
   */
  @javax.annotation.Nonnull
  public String getReferencePoint() {
    return referencePoint;
  }

  public void setReferencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
  }


  public Cwa10 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Cwa10 rmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
    return this;
  }

  /**
   * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
   * @return rmpIDs
   */
  @javax.annotation.Nonnull
  public String getRmpIDs() {
    return rmpIDs;
  }

  public void setRmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
  }


  public Cwa10 sdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
    return this;
  }

  /**
   * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
   * @return sdWAIDs
   */
  @javax.annotation.Nonnull
  public String getSdWAIDs() {
    return sdWAIDs;
  }

  public void setSdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
  }


  public Cwa10 score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public Cwa10 sector(String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * The sector code and description for the industrial stormwater facility.
   * @return sector
   */
  @javax.annotation.Nonnull
  public String getSector() {
    return sector;
  }

  public void setSector(String sector) {
    this.sector = sector;
  }


  public Cwa10 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Cwa10 speciesCriticalHabitalFlag(String speciesCriticalHabitalFlag) {
    this.speciesCriticalHabitalFlag = speciesCriticalHabitalFlag;
    return this;
  }

  /**
   * This identifies if Endangered Species Act (ESA) provisions are met.
   * @return speciesCriticalHabitalFlag
   */
  @javax.annotation.Nonnull
  public String getSpeciesCriticalHabitalFlag() {
    return speciesCriticalHabitalFlag;
  }

  public void setSpeciesCriticalHabitalFlag(String speciesCriticalHabitalFlag) {
    this.speciesCriticalHabitalFlag = speciesCriticalHabitalFlag;
  }


  public Cwa10 stateAuthBiosolids(String stateAuthBiosolids) {
    this.stateAuthBiosolids = stateAuthBiosolids;
    return this;
  }

  /**
   * Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Biosolids.
   * @return stateAuthBiosolids
   */
  @javax.annotation.Nonnull
  public String getStateAuthBiosolids() {
    return stateAuthBiosolids;
  }

  public void setStateAuthBiosolids(String stateAuthBiosolids) {
    this.stateAuthBiosolids = stateAuthBiosolids;
  }


  public Cwa10 stateAuthFedfac(String stateAuthFedfac) {
    this.stateAuthFedfac = stateAuthFedfac;
    return this;
  }

  /**
   * Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized to regulate Federally owned facilities.
   * @return stateAuthFedfac
   */
  @javax.annotation.Nonnull
  public String getStateAuthFedfac() {
    return stateAuthFedfac;
  }

  public void setStateAuthFedfac(String stateAuthFedfac) {
    this.stateAuthFedfac = stateAuthFedfac;
  }


  public Cwa10 stateAuthGen(String stateAuthGen) {
    this.stateAuthGen = stateAuthGen;
    return this;
  }

  /**
   * Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for General NPDES Facilities.
   * @return stateAuthGen
   */
  @javax.annotation.Nonnull
  public String getStateAuthGen() {
    return stateAuthGen;
  }

  public void setStateAuthGen(String stateAuthGen) {
    this.stateAuthGen = stateAuthGen;
  }


  public Cwa10 stateAuthNPDES(String stateAuthNPDES) {
    this.stateAuthNPDES = stateAuthNPDES;
    return this;
  }

  /**
   * Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for NPDES Facilities.
   * @return stateAuthNPDES
   */
  @javax.annotation.Nonnull
  public String getStateAuthNPDES() {
    return stateAuthNPDES;
  }

  public void setStateAuthNPDES(String stateAuthNPDES) {
    this.stateAuthNPDES = stateAuthNPDES;
  }


  public Cwa10 stateAuthPretreat(String stateAuthPretreat) {
    this.stateAuthPretreat = stateAuthPretreat;
    return this;
  }

  /**
   * Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Pretreatment Facilities.
   * @return stateAuthPretreat
   */
  @javax.annotation.Nonnull
  public String getStateAuthPretreat() {
    return stateAuthPretreat;
  }

  public void setStateAuthPretreat(String stateAuthPretreat) {
    this.stateAuthPretreat = stateAuthPretreat;
  }


  public Cwa10 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }


  public Cwa10 stormWaterArea(String stormWaterArea) {
    this.stormWaterArea = stormWaterArea;
    return this;
  }

  /**
   * The estimated area of industrial activity at the site exposed to stormwater in acres.
   * @return stormWaterArea
   */
  @javax.annotation.Nonnull
  public String getStormWaterArea() {
    return stormWaterArea;
  }

  public void setStormWaterArea(String stormWaterArea) {
    this.stormWaterArea = stormWaterArea;
  }


  public Cwa10 submittedDate(String submittedDate) {
    this.submittedDate = submittedDate;
    return this;
  }

  /**
   * Date that the permit was submitted to the issuing agency.
   * @return submittedDate
   */
  @javax.annotation.Nonnull
  public String getSubmittedDate() {
    return submittedDate;
  }

  public void setSubmittedDate(String submittedDate) {
    this.submittedDate = submittedDate;
  }


  public Cwa10 subsector(String subsector) {
    this.subsector = subsector;
    return this;
  }

  /**
   * The industrial subsector associated with the facility.
   * @return subsector
   */
  @javax.annotation.Nonnull
  public String getSubsector() {
    return subsector;
  }

  public void setSubsector(String subsector) {
    this.subsector = subsector;
  }


  public Cwa10 swpppUrl(String swpppUrl) {
    this.swpppUrl = swpppUrl;
    return this;
  }

  /**
   * Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.
   * @return swpppUrl
   */
  @javax.annotation.Nonnull
  public String getSwpppUrl() {
    return swpppUrl;
  }

  public void setSwpppUrl(String swpppUrl) {
    this.swpppUrl = swpppUrl;
  }


  public Cwa10 trIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
    return this;
  }

  /**
   * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.
   * @return trIIDs
   */
  @javax.annotation.Nonnull
  public String getTrIIDs() {
    return trIIDs;
  }

  public void setTrIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
  }


  public Cwa10 trIbalFlag(BigDecimal trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
    return this;
  }

  /**
   * A value of \&quot;1\&quot; indicates that the facility is within an Indian Tribal or Alaskan Native Village area.
   * @return trIbalFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getTrIbalFlag() {
    return trIbalFlag;
  }

  public void setTrIbalFlag(BigDecimal trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
  }


  public Cwa10 typeOfMonitoring(String typeOfMonitoring) {
    this.typeOfMonitoring = typeOfMonitoring;
    return this;
  }

  /**
   * The type of monitoring specified in the SWPPP.
   * @return typeOfMonitoring
   */
  @javax.annotation.Nonnull
  public String getTypeOfMonitoring() {
    return typeOfMonitoring;
  }

  public void setTypeOfMonitoring(String typeOfMonitoring) {
    this.typeOfMonitoring = typeOfMonitoring;
  }


  public Cwa10 typeOfWater(String typeOfWater) {
    this.typeOfWater = typeOfWater;
    return this;
  }

  /**
   * The type of water body receiving discharges stormwater discharges specified in the SWPPP.
   * @return typeOfWater
   */
  @javax.annotation.Nonnull
  public String getTypeOfWater() {
    return typeOfWater;
  }

  public void setTypeOfWater(String typeOfWater) {
    this.typeOfWater = typeOfWater;
  }


  public Cwa10 vioLastYear(BigDecimal vioLastYear) {
    this.vioLastYear = vioLastYear;
    return this;
  }

  /**
   * A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.
   * @return vioLastYear
   */
  @javax.annotation.Nonnull
  public BigDecimal getVioLastYear() {
    return vioLastYear;
  }

  public void setVioLastYear(BigDecimal vioLastYear) {
    this.vioLastYear = vioLastYear;
  }


  public Cwa10 violFlag(BigDecimal violFlag) {
    this.violFlag = violFlag;
    return this;
  }

  /**
   * Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes
   * @return violFlag
   */
  @javax.annotation.Nonnull
  public BigDecimal getViolFlag() {
    return violFlag;
  }

  public void setViolFlag(BigDecimal violFlag) {
    this.violFlag = violFlag;
  }


  public Cwa10 webDocs(String webDocs) {
    this.webDocs = webDocs;
    return this;
  }

  /**
   * Contains flags that identify what web accessible documents are available for the facility.
   * @return webDocs
   */
  @javax.annotation.Nonnull
  public String getWebDocs() {
    return webDocs;
  }

  public void setWebDocs(String webDocs) {
    this.webDocs = webDocs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cwa10 cwa10 = (Cwa10) o;
    return Objects.equals(this.aiRIDs, cwa10.aiRIDs) &&
        Objects.equals(this.activeLower48, cwa10.activeLower48) &&
        Objects.equals(this.alrExceedences, cwa10.alrExceedences) &&
        Objects.equals(this.associatedPollutant, cwa10.associatedPollutant) &&
        Objects.equals(this.attainsAquaticLifeUseFlg, cwa10.attainsAquaticLifeUseFlg) &&
        Objects.equals(this.attainsAuCategory, cwa10.attainsAuCategory) &&
        Objects.equals(this.attainsCauseGroups, cwa10.attainsCauseGroups) &&
        Objects.equals(this.attainsCycleYear, cwa10.attainsCycleYear) &&
        Objects.equals(this.attainsExceptnlUseFlg, cwa10.attainsExceptnlUseFlg) &&
        Objects.equals(this.attainsImpWaterFlg, cwa10.attainsImpWaterFlg) &&
        Objects.equals(this.attainsPossibleNPDESParams, cwa10.attainsPossibleNPDESParams) &&
        Objects.equals(this.attainsRecreationUseFlg, cwa10.attainsRecreationUseFlg) &&
        Objects.equals(this.attainsShellfishUseFlg, cwa10.attainsShellfishUseFlg) &&
        Objects.equals(this.attainsSource, cwa10.attainsSource) &&
        Objects.equals(this.attainsStateCauses, cwa10.attainsStateCauses) &&
        Objects.equals(this.beachCloseLast2yrsFlg, cwa10.beachCloseLast2yrsFlg) &&
        Objects.equals(this.beachCloseLastYearFlg, cwa10.beachCloseLastYearFlg) &&
        Objects.equals(this.bioAnalyMethodCatgrys, cwa10.bioAnalyMethodCatgrys) &&
        Objects.equals(this.bioAnalyMethodCatgrys2016, cwa10.bioAnalyMethodCatgrys2016) &&
        Objects.equals(this.bioAnalyMethodCatgrys2017, cwa10.bioAnalyMethodCatgrys2017) &&
        Objects.equals(this.bioAnalyMethods, cwa10.bioAnalyMethods) &&
        Objects.equals(this.bioAnalyMethods2016, cwa10.bioAnalyMethods2016) &&
        Objects.equals(this.bioAnalyMethods2017, cwa10.bioAnalyMethods2017) &&
        Objects.equals(this.bioCommentText, cwa10.bioCommentText) &&
        Objects.equals(this.bioCommentText2016, cwa10.bioCommentText2016) &&
        Objects.equals(this.bioCommentText2017, cwa10.bioCommentText2017) &&
        Objects.equals(this.bioIncinerationSum, cwa10.bioIncinerationSum) &&
        Objects.equals(this.bioIncinerationSum2016, cwa10.bioIncinerationSum2016) &&
        Objects.equals(this.bioIncinerationSum2017, cwa10.bioIncinerationSum2017) &&
        Objects.equals(this.bioLandApplicationSum, cwa10.bioLandApplicationSum) &&
        Objects.equals(this.bioLandApplicationSum2016, cwa10.bioLandApplicationSum2016) &&
        Objects.equals(this.bioLandApplicationSum2017, cwa10.bioLandApplicationSum2017) &&
        Objects.equals(this.bioMgmtContainers, cwa10.bioMgmtContainers) &&
        Objects.equals(this.bioMgmtContainers2016, cwa10.bioMgmtContainers2016) &&
        Objects.equals(this.bioMgmtContainers2017, cwa10.bioMgmtContainers2017) &&
        Objects.equals(this.bioMgmtDefCategories, cwa10.bioMgmtDefCategories) &&
        Objects.equals(this.bioMgmtDefCategories2016, cwa10.bioMgmtDefCategories2016) &&
        Objects.equals(this.bioMgmtDefCategories2017, cwa10.bioMgmtDefCategories2017) &&
        Objects.equals(this.bioMgmtDefCurrentCnt, cwa10.bioMgmtDefCurrentCnt) &&
        Objects.equals(this.bioMgmtDefCurrentCnt2016, cwa10.bioMgmtDefCurrentCnt2016) &&
        Objects.equals(this.bioMgmtDefCurrentCnt2017, cwa10.bioMgmtDefCurrentCnt2017) &&
        Objects.equals(this.bioMgmtDeficiencies, cwa10.bioMgmtDeficiencies) &&
        Objects.equals(this.bioMgmtDeficiencies2016, cwa10.bioMgmtDeficiencies2016) &&
        Objects.equals(this.bioMgmtDeficiencies2017, cwa10.bioMgmtDeficiencies2017) &&
        Objects.equals(this.bioMgmtHandlers, cwa10.bioMgmtHandlers) &&
        Objects.equals(this.bioMgmtHandlers2016, cwa10.bioMgmtHandlers2016) &&
        Objects.equals(this.bioMgmtHandlers2017, cwa10.bioMgmtHandlers2017) &&
        Objects.equals(this.bioMgmtPathogens, cwa10.bioMgmtPathogens) &&
        Objects.equals(this.bioMgmtPathogens2016, cwa10.bioMgmtPathogens2016) &&
        Objects.equals(this.bioMgmtPathogens2017, cwa10.bioMgmtPathogens2017) &&
        Objects.equals(this.bioMgmtPathreds, cwa10.bioMgmtPathreds) &&
        Objects.equals(this.bioMgmtPathreds2016, cwa10.bioMgmtPathreds2016) &&
        Objects.equals(this.bioMgmtPathreds2017, cwa10.bioMgmtPathreds2017) &&
        Objects.equals(this.bioMgmtPrctceStypes, cwa10.bioMgmtPrctceStypes) &&
        Objects.equals(this.bioMgmtPrctceStypes2016, cwa10.bioMgmtPrctceStypes2016) &&
        Objects.equals(this.bioMgmtPrctceStypes2017, cwa10.bioMgmtPrctceStypes2017) &&
        Objects.equals(this.bioMgmtPrctceTypes, cwa10.bioMgmtPrctceTypes) &&
        Objects.equals(this.bioMgmtPrctceTypes2016, cwa10.bioMgmtPrctceTypes2016) &&
        Objects.equals(this.bioMgmtPrctceTypes2017, cwa10.bioMgmtPrctceTypes2017) &&
        Objects.equals(this.bioMgmtVectors, cwa10.bioMgmtVectors) &&
        Objects.equals(this.bioMgmtVectors2016, cwa10.bioMgmtVectors2016) &&
        Objects.equals(this.bioMgmtVectors2017, cwa10.bioMgmtVectors2017) &&
        Objects.equals(this.bioOtherManagementSum, cwa10.bioOtherManagementSum) &&
        Objects.equals(this.bioOtherManagementSum2016, cwa10.bioOtherManagementSum2016) &&
        Objects.equals(this.bioOtherManagementSum2017, cwa10.bioOtherManagementSum2017) &&
        Objects.equals(this.bioOtherMgmtPrctcTxts, cwa10.bioOtherMgmtPrctcTxts) &&
        Objects.equals(this.bioOtherMgmtPrctcTxts2016, cwa10.bioOtherMgmtPrctcTxts2016) &&
        Objects.equals(this.bioOtherMgmtPrctcTxts2017, cwa10.bioOtherMgmtPrctcTxts2017) &&
        Objects.equals(this.bioQtrsWithVio, cwa10.bioQtrsWithVio) &&
        Objects.equals(this.bioReportDate, cwa10.bioReportDate) &&
        Objects.equals(this.bioReportDate2016, cwa10.bioReportDate2016) &&
        Objects.equals(this.bioReportDate2017, cwa10.bioReportDate2017) &&
        Objects.equals(this.bioReportYear, cwa10.bioReportYear) &&
        Objects.equals(this.bioReportYears, cwa10.bioReportYears) &&
        Objects.equals(this.bioReportingObligations, cwa10.bioReportingObligations) &&
        Objects.equals(this.bioReportingObligations2016, cwa10.bioReportingObligations2016) &&
        Objects.equals(this.bioReportingObligations2017, cwa10.bioReportingObligations2017) &&
        Objects.equals(this.bioSurfaceDispSum, cwa10.bioSurfaceDispSum) &&
        Objects.equals(this.bioSurfaceDispSum2016, cwa10.bioSurfaceDispSum2016) &&
        Objects.equals(this.bioSurfaceDispSum2017, cwa10.bioSurfaceDispSum2017) &&
        Objects.equals(this.bioTotalVolumeAmt, cwa10.bioTotalVolumeAmt) &&
        Objects.equals(this.bioTotalVolumeAmt2016, cwa10.bioTotalVolumeAmt2016) &&
        Objects.equals(this.bioTotalVolumeAmt2017, cwa10.bioTotalVolumeAmt2017) &&
        Objects.equals(this.bioTrmntPrcssCmntTxts2016, cwa10.bioTrmntPrcssCmntTxts2016) &&
        Objects.equals(this.bioTrmntPrcssCmntTxts2017, cwa10.bioTrmntPrcssCmntTxts2017) &&
        Objects.equals(this.bioTrtmntPrcssCmmntTxts, cwa10.bioTrtmntPrcssCmmntTxts) &&
        Objects.equals(this.bioTrtmntProcesses, cwa10.bioTrtmntProcesses) &&
        Objects.equals(this.bioTrtmntProcesses2016, cwa10.bioTrtmntProcesses2016) &&
        Objects.equals(this.bioTrtmntProcesses2017, cwa10.bioTrtmntProcesses2017) &&
        Objects.equals(this.bioVioLastYear, cwa10.bioVioLastYear) &&
        Objects.equals(this.bioVioLastYearFlag, cwa10.bioVioLastYearFlag) &&
        Objects.equals(this.bioVioStatus, cwa10.bioVioStatus) &&
        Objects.equals(this.bioViolFlag, cwa10.bioViolFlag) &&
        Objects.equals(this.biosolidsFlag, cwa10.biosolidsFlag) &&
        Objects.equals(this.cwP13qtrsComplHistory, cwa10.cwP13qtrsComplHistory) &&
        Objects.equals(this.cwPActualAverageFlowNmbr, cwa10.cwPActualAverageFlowNmbr) &&
        Objects.equals(this.cwPBioFeaCount, cwa10.cwPBioFeaCount) &&
        Objects.equals(this.cwPBioIeaCount, cwa10.cwPBioIeaCount) &&
        Objects.equals(this.cwPBioInspCount, cwa10.cwPBioInspCount) &&
        Objects.equals(this.cwPBioPenalties, cwa10.cwPBioPenalties) &&
        Objects.equals(this.cwPCaseIDs, cwa10.cwPCaseIDs) &&
        Objects.equals(this.cwPCity, cwa10.cwPCity) &&
        Objects.equals(this.cwPComplianceTracking, cwa10.cwPComplianceTracking) &&
        Objects.equals(this.cwPCounty, cwa10.cwPCounty) &&
        Objects.equals(this.cwPCsoFlag, cwa10.cwPCsoFlag) &&
        Objects.equals(this.cwPCsoOutfalls, cwa10.cwPCsoOutfalls) &&
        Objects.equals(this.cwPDateLastBioFea, cwa10.cwPDateLastBioFea) &&
        Objects.equals(this.cwPDateLastBioFeaEPA, cwa10.cwPDateLastBioFeaEPA) &&
        Objects.equals(this.cwPDateLastBioFeaSt, cwa10.cwPDateLastBioFeaSt) &&
        Objects.equals(this.cwPDateLastBioIea, cwa10.cwPDateLastBioIea) &&
        Objects.equals(this.cwPDateLastBioIeaEPA, cwa10.cwPDateLastBioIeaEPA) &&
        Objects.equals(this.cwPDateLastBioIeaSt, cwa10.cwPDateLastBioIeaSt) &&
        Objects.equals(this.cwPDateLastBioInsp, cwa10.cwPDateLastBioInsp) &&
        Objects.equals(this.cwPDateLastBioInspEPA, cwa10.cwPDateLastBioInspEPA) &&
        Objects.equals(this.cwPDateLastBioInspSt, cwa10.cwPDateLastBioInspSt) &&
        Objects.equals(this.cwPDateLastBioPenalty, cwa10.cwPDateLastBioPenalty) &&
        Objects.equals(this.cwPDateLastFea, cwa10.cwPDateLastFea) &&
        Objects.equals(this.cwPDateLastFeaEPA, cwa10.cwPDateLastFeaEPA) &&
        Objects.equals(this.cwPDateLastFeaSt, cwa10.cwPDateLastFeaSt) &&
        Objects.equals(this.cwPDateLastIeaEPA, cwa10.cwPDateLastIeaEPA) &&
        Objects.equals(this.cwPDateLastIeaSt, cwa10.cwPDateLastIeaSt) &&
        Objects.equals(this.cwPDateLastInformalEa, cwa10.cwPDateLastInformalEa) &&
        Objects.equals(this.cwPDateLastInspEPA, cwa10.cwPDateLastInspEPA) &&
        Objects.equals(this.cwPDateLastInspSt, cwa10.cwPDateLastInspSt) &&
        Objects.equals(this.cwPDateLastInspection, cwa10.cwPDateLastInspection) &&
        Objects.equals(this.cwPDateLastPenalty, cwa10.cwPDateLastPenalty) &&
        Objects.equals(this.cwPDaysLastBioInsp, cwa10.cwPDaysLastBioInsp) &&
        Objects.equals(this.cwPDaysLastInspection, cwa10.cwPDaysLastInspection) &&
        Objects.equals(this.cwPE90Cnt, cwa10.cwPE90Cnt) &&
        Objects.equals(this.cwPEPARegion, cwa10.cwPEPARegion) &&
        Objects.equals(this.cwPEffectiveDate, cwa10.cwPEffectiveDate) &&
        Objects.equals(this.cwPExpirationDate, cwa10.cwPExpirationDate) &&
        Objects.equals(this.cwPFIPSCode, cwa10.cwPFIPSCode) &&
        Objects.equals(this.cwPFacilityTypeCode, cwa10.cwPFacilityTypeCode) &&
        Objects.equals(this.cwPFacilityTypeIndicator, cwa10.cwPFacilityTypeIndicator) &&
        Objects.equals(this.cwPFormalEaCnt, cwa10.cwPFormalEaCnt) &&
        Objects.equals(this.cwPImpWaterFlg, cwa10.cwPImpWaterFlg) &&
        Objects.equals(this.cwPIndianCntryFlg, cwa10.cwPIndianCntryFlg) &&
        Objects.equals(this.cwPInformalEnfActCount, cwa10.cwPInformalEnfActCount) &&
        Objects.equals(this.cwPInspectionCount, cwa10.cwPInspectionCount) &&
        Objects.equals(this.cwPIssueDate, cwa10.cwPIssueDate) &&
        Objects.equals(this.cwPMajorMinorStatusFlag, cwa10.cwPMajorMinorStatusFlag) &&
        Objects.equals(this.cwPNAICSCodes, cwa10.cwPNAICSCodes) &&
        Objects.equals(this.cwPName, cwa10.cwPName) &&
        Objects.equals(this.cwPPermitStatusCode, cwa10.cwPPermitStatusCode) &&
        Objects.equals(this.cwPPermitStatusDesc, cwa10.cwPPermitStatusDesc) &&
        Objects.equals(this.cwPPermitTypeCode, cwa10.cwPPermitTypeCode) &&
        Objects.equals(this.cwPPermitTypeDesc, cwa10.cwPPermitTypeDesc) &&
        Objects.equals(this.cwPQtrsWithNC, cwa10.cwPQtrsWithNC) &&
        Objects.equals(this.cwPQtrsWithSNC, cwa10.cwPQtrsWithSNC) &&
        Objects.equals(this.cwPSICCodes, cwa10.cwPSICCodes) &&
        Objects.equals(this.cwPSNCEventDesc, cwa10.cwPSNCEventDesc) &&
        Objects.equals(this.cwPSNCStatus, cwa10.cwPSNCStatus) &&
        Objects.equals(this.cwPSNCStatusDate, cwa10.cwPSNCStatusDate) &&
        Objects.equals(this.cwPState, cwa10.cwPState) &&
        Objects.equals(this.cwPStateDistrict, cwa10.cwPStateDistrict) &&
        Objects.equals(this.cwPStateWaterBodyCode, cwa10.cwPStateWaterBodyCode) &&
        Objects.equals(this.cwPStateWaterBodyName, cwa10.cwPStateWaterBodyName) &&
        Objects.equals(this.cwPStatus, cwa10.cwPStatus) &&
        Objects.equals(this.cwPStreet, cwa10.cwPStreet) &&
        Objects.equals(this.cwPTRIbalLandCode, cwa10.cwPTRIbalLandCode) &&
        Objects.equals(this.cwPTerminationDate, cwa10.cwPTerminationDate) &&
        Objects.equals(this.cwPTotalDesignFlowNmbr, cwa10.cwPTotalDesignFlowNmbr) &&
        Objects.equals(this.cwPTotalPenalties, cwa10.cwPTotalPenalties) &&
        Objects.equals(this.cwPVersionNmbr, cwa10.cwPVersionNmbr) &&
        Objects.equals(this.cwPVioStatus, cwa10.cwPVioStatus) &&
        Objects.equals(this.cwPViolStatus, cwa10.cwPViolStatus) &&
        Objects.equals(this.cwPZip, cwa10.cwPZip) &&
        Objects.equals(this.calculatedAccuracyMeters, cwa10.calculatedAccuracyMeters) &&
        Objects.equals(this.censusBlockGroup, cwa10.censusBlockGroup) &&
        Objects.equals(this.certifiedDate, cwa10.certifiedDate) &&
        Objects.equals(this.chesapeakeBayFlag, cwa10.chesapeakeBayFlag) &&
        Objects.equals(this.collectionMethod, cwa10.collectionMethod) &&
        Objects.equals(this.controlMeasure, cwa10.controlMeasure) &&
        Objects.equals(this.controlMeasureSchedule, cwa10.controlMeasureSchedule) &&
        Objects.equals(this.currSvFlag, cwa10.currSvFlag) &&
        Objects.equals(this.currVioFlag, cwa10.currVioFlag) &&
        Objects.equals(this.dmRImpairedPoll, cwa10.dmRImpairedPoll) &&
        Objects.equals(this.dmRPounds, cwa10.dmRPounds) &&
        Objects.equals(this.dmRTwpe, cwa10.dmRTwpe) &&
        Objects.equals(this.dschToMs4, cwa10.dschToMs4) &&
        Objects.equals(this.e90Exceeds1yr, cwa10.e90Exceeds1yr) &&
        Objects.equals(this.e90Exceeds2yr, cwa10.e90Exceeds2yr) &&
        Objects.equals(this.e90Exceeds3yr, cwa10.e90Exceeds3yr) &&
        Objects.equals(this.e90Exceeds4yr, cwa10.e90Exceeds4yr) &&
        Objects.equals(this.e90Exceeds5yr, cwa10.e90Exceeds5yr) &&
        Objects.equals(this.e90Pollutants1yr, cwa10.e90Pollutants1yr) &&
        Objects.equals(this.e90Pollutants2yr, cwa10.e90Pollutants2yr) &&
        Objects.equals(this.e90Pollutants3yr, cwa10.e90Pollutants3yr) &&
        Objects.equals(this.e90Pollutants4yr, cwa10.e90Pollutants4yr) &&
        Objects.equals(this.e90Pollutants5yr, cwa10.e90Pollutants5yr) &&
        Objects.equals(this.epASystem, cwa10.epASystem) &&
        Objects.equals(this.ea5yrFlag, cwa10.ea5yrFlag) &&
        Objects.equals(this.effChartsFlag, cwa10.effChartsFlag) &&
        Objects.equals(this.effExceeds, cwa10.effExceeds) &&
        Objects.equals(this.ejscreenFlag, cwa10.ejscreenFlag) &&
        Objects.equals(this.ejscreenFlagUs, cwa10.ejscreenFlagUs) &&
        Objects.equals(this.electrRptWaiverEffDate, cwa10.electrRptWaiverEffDate) &&
        Objects.equals(this.electrRptWaiverExpDate, cwa10.electrRptWaiverExpDate) &&
        Objects.equals(this.electrRptWaiverTypeCode, cwa10.electrRptWaiverTypeCode) &&
        Objects.equals(this.electrRptWaiverTypeDesc, cwa10.electrRptWaiverTypeDesc) &&
        Objects.equals(this.electrSubmissionTypeCode, cwa10.electrSubmissionTypeCode) &&
        Objects.equals(this.electrSubmissionTypeDesc, cwa10.electrSubmissionTypeDesc) &&
        Objects.equals(this.exposedActivity, cwa10.exposedActivity) &&
        Objects.equals(this.facCountyName, cwa10.facCountyName) &&
        Objects.equals(this.facDerivedHuc, cwa10.facDerivedHuc) &&
        Objects.equals(this.facDerivedTRIbes, cwa10.facDerivedTRIbes) &&
        Objects.equals(this.facDerivedWBD, cwa10.facDerivedWBD) &&
        Objects.equals(this.facDerivedWBDHu8, cwa10.facDerivedWBDHu8) &&
        Objects.equals(this.facDerivedWBDHu8Name, cwa10.facDerivedWBDHu8Name) &&
        Objects.equals(this.facDerivedWBDName, cwa10.facDerivedWBDName) &&
        Objects.equals(this.facFIPSCode, cwa10.facFIPSCode) &&
        Objects.equals(this.facFederalAgencyCode, cwa10.facFederalAgencyCode) &&
        Objects.equals(this.facFederalAgencyName, cwa10.facFederalAgencyName) &&
        Objects.equals(this.facIndianCntryFlg, cwa10.facIndianCntryFlg) &&
        Objects.equals(this.facIndianSpatialFlg, cwa10.facIndianSpatialFlg) &&
        Objects.equals(this.facMapFlg, cwa10.facMapFlg) &&
        Objects.equals(this.facMapIcon, cwa10.facMapIcon) &&
        Objects.equals(this.facPercentMinority, cwa10.facPercentMinority) &&
        Objects.equals(this.facPopDen, cwa10.facPopDen) &&
        Objects.equals(this.facStdCountyName, cwa10.facStdCountyName) &&
        Objects.equals(this.facTRIPotwTrans, cwa10.facTRIPotwTrans) &&
        Objects.equals(this.facTRIReporter, cwa10.facTRIReporter) &&
        Objects.equals(this.facTRISwRel, cwa10.facTRISwRel) &&
        Objects.equals(this.facUsMexBorderFlg, cwa10.facUsMexBorderFlg) &&
        Objects.equals(this.historicCriterionCode, cwa10.historicCriterionCode) &&
        Objects.equals(this.indswFlag, cwa10.indswFlag) &&
        Objects.equals(this.infea5yrFlag, cwa10.infea5yrFlag) &&
        Objects.equals(this.insp5yrFlag, cwa10.insp5yrFlag) &&
        Objects.equals(this.inspDef5yrCnt, cwa10.inspDef5yrCnt) &&
        Objects.equals(this.issuingAgency, cwa10.issuingAgency) &&
        Objects.equals(this.lastDMRValueRcvdDate, cwa10.lastDMRValueRcvdDate) &&
        Objects.equals(this.limPollutant, cwa10.limPollutant) &&
        Objects.equals(this.lower48, cwa10.lower48) &&
        Objects.equals(this.map, cwa10.map) &&
        Objects.equals(this.masterExternalPermitNmbr, cwa10.masterExternalPermitNmbr) &&
        Objects.equals(this.maxPctileUs, cwa10.maxPctileUs) &&
        Objects.equals(this.maxScore, cwa10.maxScore) &&
        Objects.equals(this.missDMRQtrs, cwa10.missDMRQtrs) &&
        Objects.equals(this.msgpCorrectiveActionSmmry, cwa10.msgpCorrectiveActionSmmry) &&
        Objects.equals(this.msgpFacilityInspctnSmmry, cwa10.msgpFacilityInspctnSmmry) &&
        Objects.equals(this.msgpLastReportYear, cwa10.msgpLastReportYear) &&
        Objects.equals(this.msgpNoFurtherRdctnRtnle, cwa10.msgpNoFurtherRdctnRtnle) &&
        Objects.equals(this.msgpPermitType, cwa10.msgpPermitType) &&
        Objects.equals(this.msgpVisualAssessmentSmmry, cwa10.msgpVisualAssessmentSmmry) &&
        Objects.equals(this.npDESDataGroups, cwa10.npDESDataGroups) &&
        Objects.equals(this.npDESDataGroupsDescs, cwa10.npDESDataGroupsDescs) &&
        Objects.equals(this.npDESIDs, cwa10.npDESIDs) &&
        Objects.equals(this.otherPermitIDs, cwa10.otherPermitIDs) &&
        Objects.equals(this.over80CountUs, cwa10.over80CountUs) &&
        Objects.equals(this.pastCalYrAverageFlow, cwa10.pastCalYrAverageFlow) &&
        Objects.equals(this.pastCalYrConvPolOvrLmt, cwa10.pastCalYrConvPolOvrLmt) &&
        Objects.equals(this.pastCalYrConvPollutants, cwa10.pastCalYrConvPollutants) &&
        Objects.equals(this.pastCalYrToxicPolOvrLmt, cwa10.pastCalYrToxicPolOvrLmt) &&
        Objects.equals(this.pastCalYrToxicPollutants, cwa10.pastCalYrToxicPollutants) &&
        Objects.equals(this.pctileCancerUs, cwa10.pctileCancerUs) &&
        Objects.equals(this.pctileDpmUs, cwa10.pctileDpmUs) &&
        Objects.equals(this.pctileO3Us, cwa10.pctileO3Us) &&
        Objects.equals(this.pctilePctpre1960Us, cwa10.pctilePctpre1960Us) &&
        Objects.equals(this.pctilePmUs, cwa10.pctilePmUs) &&
        Objects.equals(this.pctileProximityNPDESUs, cwa10.pctileProximityNPDESUs) &&
        Objects.equals(this.pctileProximityNplUs, cwa10.pctileProximityNplUs) &&
        Objects.equals(this.pctileProximityRmpUs, cwa10.pctileProximityRmpUs) &&
        Objects.equals(this.pctileProximityTsdfUs, cwa10.pctileProximityTsdfUs) &&
        Objects.equals(this.pctileRespUs, cwa10.pctileRespUs) &&
        Objects.equals(this.pctileTrafficScoreUs, cwa10.pctileTrafficScoreUs) &&
        Objects.equals(this.permitComponents, cwa10.permitComponents) &&
        Objects.equals(this.permitName, cwa10.permitName) &&
        Objects.equals(this.permittingAgency, cwa10.permittingAgency) &&
        Objects.equals(this.pollWithViolation, cwa10.pollWithViolation) &&
        Objects.equals(this.rcRAIDs, cwa10.rcRAIDs) &&
        Objects.equals(this.radGnisName, cwa10.radGnisName) &&
        Objects.equals(this.radHu12Name, cwa10.radHu12Name) &&
        Objects.equals(this.radReachcode, cwa10.radReachcode) &&
        Objects.equals(this.radWBDHu8, cwa10.radWBDHu8) &&
        Objects.equals(this.radWBDHu8Name, cwa10.radWBDHu8Name) &&
        Objects.equals(this.radWBDHuc12, cwa10.radWBDHuc12) &&
        Objects.equals(this.receivingMs4Name, cwa10.receivingMs4Name) &&
        Objects.equals(this.referencePoint, cwa10.referencePoint) &&
        Objects.equals(this.registryID, cwa10.registryID) &&
        Objects.equals(this.rmpIDs, cwa10.rmpIDs) &&
        Objects.equals(this.sdWAIDs, cwa10.sdWAIDs) &&
        Objects.equals(this.score, cwa10.score) &&
        Objects.equals(this.sector, cwa10.sector) &&
        Objects.equals(this.sourceID, cwa10.sourceID) &&
        Objects.equals(this.speciesCriticalHabitalFlag, cwa10.speciesCriticalHabitalFlag) &&
        Objects.equals(this.stateAuthBiosolids, cwa10.stateAuthBiosolids) &&
        Objects.equals(this.stateAuthFedfac, cwa10.stateAuthFedfac) &&
        Objects.equals(this.stateAuthGen, cwa10.stateAuthGen) &&
        Objects.equals(this.stateAuthNPDES, cwa10.stateAuthNPDES) &&
        Objects.equals(this.stateAuthPretreat, cwa10.stateAuthPretreat) &&
        Objects.equals(this.statute, cwa10.statute) &&
        Objects.equals(this.stormWaterArea, cwa10.stormWaterArea) &&
        Objects.equals(this.submittedDate, cwa10.submittedDate) &&
        Objects.equals(this.subsector, cwa10.subsector) &&
        Objects.equals(this.swpppUrl, cwa10.swpppUrl) &&
        Objects.equals(this.trIIDs, cwa10.trIIDs) &&
        Objects.equals(this.trIbalFlag, cwa10.trIbalFlag) &&
        Objects.equals(this.typeOfMonitoring, cwa10.typeOfMonitoring) &&
        Objects.equals(this.typeOfWater, cwa10.typeOfWater) &&
        Objects.equals(this.vioLastYear, cwa10.vioLastYear) &&
        Objects.equals(this.violFlag, cwa10.violFlag) &&
        Objects.equals(this.webDocs, cwa10.webDocs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiRIDs, activeLower48, alrExceedences, associatedPollutant, attainsAquaticLifeUseFlg, attainsAuCategory, attainsCauseGroups, attainsCycleYear, attainsExceptnlUseFlg, attainsImpWaterFlg, attainsPossibleNPDESParams, attainsRecreationUseFlg, attainsShellfishUseFlg, attainsSource, attainsStateCauses, beachCloseLast2yrsFlg, beachCloseLastYearFlg, bioAnalyMethodCatgrys, bioAnalyMethodCatgrys2016, bioAnalyMethodCatgrys2017, bioAnalyMethods, bioAnalyMethods2016, bioAnalyMethods2017, bioCommentText, bioCommentText2016, bioCommentText2017, bioIncinerationSum, bioIncinerationSum2016, bioIncinerationSum2017, bioLandApplicationSum, bioLandApplicationSum2016, bioLandApplicationSum2017, bioMgmtContainers, bioMgmtContainers2016, bioMgmtContainers2017, bioMgmtDefCategories, bioMgmtDefCategories2016, bioMgmtDefCategories2017, bioMgmtDefCurrentCnt, bioMgmtDefCurrentCnt2016, bioMgmtDefCurrentCnt2017, bioMgmtDeficiencies, bioMgmtDeficiencies2016, bioMgmtDeficiencies2017, bioMgmtHandlers, bioMgmtHandlers2016, bioMgmtHandlers2017, bioMgmtPathogens, bioMgmtPathogens2016, bioMgmtPathogens2017, bioMgmtPathreds, bioMgmtPathreds2016, bioMgmtPathreds2017, bioMgmtPrctceStypes, bioMgmtPrctceStypes2016, bioMgmtPrctceStypes2017, bioMgmtPrctceTypes, bioMgmtPrctceTypes2016, bioMgmtPrctceTypes2017, bioMgmtVectors, bioMgmtVectors2016, bioMgmtVectors2017, bioOtherManagementSum, bioOtherManagementSum2016, bioOtherManagementSum2017, bioOtherMgmtPrctcTxts, bioOtherMgmtPrctcTxts2016, bioOtherMgmtPrctcTxts2017, bioQtrsWithVio, bioReportDate, bioReportDate2016, bioReportDate2017, bioReportYear, bioReportYears, bioReportingObligations, bioReportingObligations2016, bioReportingObligations2017, bioSurfaceDispSum, bioSurfaceDispSum2016, bioSurfaceDispSum2017, bioTotalVolumeAmt, bioTotalVolumeAmt2016, bioTotalVolumeAmt2017, bioTrmntPrcssCmntTxts2016, bioTrmntPrcssCmntTxts2017, bioTrtmntPrcssCmmntTxts, bioTrtmntProcesses, bioTrtmntProcesses2016, bioTrtmntProcesses2017, bioVioLastYear, bioVioLastYearFlag, bioVioStatus, bioViolFlag, biosolidsFlag, cwP13qtrsComplHistory, cwPActualAverageFlowNmbr, cwPBioFeaCount, cwPBioIeaCount, cwPBioInspCount, cwPBioPenalties, cwPCaseIDs, cwPCity, cwPComplianceTracking, cwPCounty, cwPCsoFlag, cwPCsoOutfalls, cwPDateLastBioFea, cwPDateLastBioFeaEPA, cwPDateLastBioFeaSt, cwPDateLastBioIea, cwPDateLastBioIeaEPA, cwPDateLastBioIeaSt, cwPDateLastBioInsp, cwPDateLastBioInspEPA, cwPDateLastBioInspSt, cwPDateLastBioPenalty, cwPDateLastFea, cwPDateLastFeaEPA, cwPDateLastFeaSt, cwPDateLastIeaEPA, cwPDateLastIeaSt, cwPDateLastInformalEa, cwPDateLastInspEPA, cwPDateLastInspSt, cwPDateLastInspection, cwPDateLastPenalty, cwPDaysLastBioInsp, cwPDaysLastInspection, cwPE90Cnt, cwPEPARegion, cwPEffectiveDate, cwPExpirationDate, cwPFIPSCode, cwPFacilityTypeCode, cwPFacilityTypeIndicator, cwPFormalEaCnt, cwPImpWaterFlg, cwPIndianCntryFlg, cwPInformalEnfActCount, cwPInspectionCount, cwPIssueDate, cwPMajorMinorStatusFlag, cwPNAICSCodes, cwPName, cwPPermitStatusCode, cwPPermitStatusDesc, cwPPermitTypeCode, cwPPermitTypeDesc, cwPQtrsWithNC, cwPQtrsWithSNC, cwPSICCodes, cwPSNCEventDesc, cwPSNCStatus, cwPSNCStatusDate, cwPState, cwPStateDistrict, cwPStateWaterBodyCode, cwPStateWaterBodyName, cwPStatus, cwPStreet, cwPTRIbalLandCode, cwPTerminationDate, cwPTotalDesignFlowNmbr, cwPTotalPenalties, cwPVersionNmbr, cwPVioStatus, cwPViolStatus, cwPZip, calculatedAccuracyMeters, censusBlockGroup, certifiedDate, chesapeakeBayFlag, collectionMethod, controlMeasure, controlMeasureSchedule, currSvFlag, currVioFlag, dmRImpairedPoll, dmRPounds, dmRTwpe, dschToMs4, e90Exceeds1yr, e90Exceeds2yr, e90Exceeds3yr, e90Exceeds4yr, e90Exceeds5yr, e90Pollutants1yr, e90Pollutants2yr, e90Pollutants3yr, e90Pollutants4yr, e90Pollutants5yr, epASystem, ea5yrFlag, effChartsFlag, effExceeds, ejscreenFlag, ejscreenFlagUs, electrRptWaiverEffDate, electrRptWaiverExpDate, electrRptWaiverTypeCode, electrRptWaiverTypeDesc, electrSubmissionTypeCode, electrSubmissionTypeDesc, exposedActivity, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDHu8, facDerivedWBDHu8Name, facDerivedWBDName, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facIndianCntryFlg, facIndianSpatialFlg, facMapFlg, facMapIcon, facPercentMinority, facPopDen, facStdCountyName, facTRIPotwTrans, facTRIReporter, facTRISwRel, facUsMexBorderFlg, historicCriterionCode, indswFlag, infea5yrFlag, insp5yrFlag, inspDef5yrCnt, issuingAgency, lastDMRValueRcvdDate, limPollutant, lower48, map, masterExternalPermitNmbr, maxPctileUs, maxScore, missDMRQtrs, msgpCorrectiveActionSmmry, msgpFacilityInspctnSmmry, msgpLastReportYear, msgpNoFurtherRdctnRtnle, msgpPermitType, msgpVisualAssessmentSmmry, npDESDataGroups, npDESDataGroupsDescs, npDESIDs, otherPermitIDs, over80CountUs, pastCalYrAverageFlow, pastCalYrConvPolOvrLmt, pastCalYrConvPollutants, pastCalYrToxicPolOvrLmt, pastCalYrToxicPollutants, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, permitComponents, permitName, permittingAgency, pollWithViolation, rcRAIDs, radGnisName, radHu12Name, radReachcode, radWBDHu8, radWBDHu8Name, radWBDHuc12, receivingMs4Name, referencePoint, registryID, rmpIDs, sdWAIDs, score, sector, sourceID, speciesCriticalHabitalFlag, stateAuthBiosolids, stateAuthFedfac, stateAuthGen, stateAuthNPDES, stateAuthPretreat, statute, stormWaterArea, submittedDate, subsector, swpppUrl, trIIDs, trIbalFlag, typeOfMonitoring, typeOfWater, vioLastYear, violFlag, webDocs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cwa10 {\n");
    sb.append("    aiRIDs: ").append(toIndentedString(aiRIDs)).append("\n");
    sb.append("    activeLower48: ").append(toIndentedString(activeLower48)).append("\n");
    sb.append("    alrExceedences: ").append(toIndentedString(alrExceedences)).append("\n");
    sb.append("    associatedPollutant: ").append(toIndentedString(associatedPollutant)).append("\n");
    sb.append("    attainsAquaticLifeUseFlg: ").append(toIndentedString(attainsAquaticLifeUseFlg)).append("\n");
    sb.append("    attainsAuCategory: ").append(toIndentedString(attainsAuCategory)).append("\n");
    sb.append("    attainsCauseGroups: ").append(toIndentedString(attainsCauseGroups)).append("\n");
    sb.append("    attainsCycleYear: ").append(toIndentedString(attainsCycleYear)).append("\n");
    sb.append("    attainsExceptnlUseFlg: ").append(toIndentedString(attainsExceptnlUseFlg)).append("\n");
    sb.append("    attainsImpWaterFlg: ").append(toIndentedString(attainsImpWaterFlg)).append("\n");
    sb.append("    attainsPossibleNPDESParams: ").append(toIndentedString(attainsPossibleNPDESParams)).append("\n");
    sb.append("    attainsRecreationUseFlg: ").append(toIndentedString(attainsRecreationUseFlg)).append("\n");
    sb.append("    attainsShellfishUseFlg: ").append(toIndentedString(attainsShellfishUseFlg)).append("\n");
    sb.append("    attainsSource: ").append(toIndentedString(attainsSource)).append("\n");
    sb.append("    attainsStateCauses: ").append(toIndentedString(attainsStateCauses)).append("\n");
    sb.append("    beachCloseLast2yrsFlg: ").append(toIndentedString(beachCloseLast2yrsFlg)).append("\n");
    sb.append("    beachCloseLastYearFlg: ").append(toIndentedString(beachCloseLastYearFlg)).append("\n");
    sb.append("    bioAnalyMethodCatgrys: ").append(toIndentedString(bioAnalyMethodCatgrys)).append("\n");
    sb.append("    bioAnalyMethodCatgrys2016: ").append(toIndentedString(bioAnalyMethodCatgrys2016)).append("\n");
    sb.append("    bioAnalyMethodCatgrys2017: ").append(toIndentedString(bioAnalyMethodCatgrys2017)).append("\n");
    sb.append("    bioAnalyMethods: ").append(toIndentedString(bioAnalyMethods)).append("\n");
    sb.append("    bioAnalyMethods2016: ").append(toIndentedString(bioAnalyMethods2016)).append("\n");
    sb.append("    bioAnalyMethods2017: ").append(toIndentedString(bioAnalyMethods2017)).append("\n");
    sb.append("    bioCommentText: ").append(toIndentedString(bioCommentText)).append("\n");
    sb.append("    bioCommentText2016: ").append(toIndentedString(bioCommentText2016)).append("\n");
    sb.append("    bioCommentText2017: ").append(toIndentedString(bioCommentText2017)).append("\n");
    sb.append("    bioIncinerationSum: ").append(toIndentedString(bioIncinerationSum)).append("\n");
    sb.append("    bioIncinerationSum2016: ").append(toIndentedString(bioIncinerationSum2016)).append("\n");
    sb.append("    bioIncinerationSum2017: ").append(toIndentedString(bioIncinerationSum2017)).append("\n");
    sb.append("    bioLandApplicationSum: ").append(toIndentedString(bioLandApplicationSum)).append("\n");
    sb.append("    bioLandApplicationSum2016: ").append(toIndentedString(bioLandApplicationSum2016)).append("\n");
    sb.append("    bioLandApplicationSum2017: ").append(toIndentedString(bioLandApplicationSum2017)).append("\n");
    sb.append("    bioMgmtContainers: ").append(toIndentedString(bioMgmtContainers)).append("\n");
    sb.append("    bioMgmtContainers2016: ").append(toIndentedString(bioMgmtContainers2016)).append("\n");
    sb.append("    bioMgmtContainers2017: ").append(toIndentedString(bioMgmtContainers2017)).append("\n");
    sb.append("    bioMgmtDefCategories: ").append(toIndentedString(bioMgmtDefCategories)).append("\n");
    sb.append("    bioMgmtDefCategories2016: ").append(toIndentedString(bioMgmtDefCategories2016)).append("\n");
    sb.append("    bioMgmtDefCategories2017: ").append(toIndentedString(bioMgmtDefCategories2017)).append("\n");
    sb.append("    bioMgmtDefCurrentCnt: ").append(toIndentedString(bioMgmtDefCurrentCnt)).append("\n");
    sb.append("    bioMgmtDefCurrentCnt2016: ").append(toIndentedString(bioMgmtDefCurrentCnt2016)).append("\n");
    sb.append("    bioMgmtDefCurrentCnt2017: ").append(toIndentedString(bioMgmtDefCurrentCnt2017)).append("\n");
    sb.append("    bioMgmtDeficiencies: ").append(toIndentedString(bioMgmtDeficiencies)).append("\n");
    sb.append("    bioMgmtDeficiencies2016: ").append(toIndentedString(bioMgmtDeficiencies2016)).append("\n");
    sb.append("    bioMgmtDeficiencies2017: ").append(toIndentedString(bioMgmtDeficiencies2017)).append("\n");
    sb.append("    bioMgmtHandlers: ").append(toIndentedString(bioMgmtHandlers)).append("\n");
    sb.append("    bioMgmtHandlers2016: ").append(toIndentedString(bioMgmtHandlers2016)).append("\n");
    sb.append("    bioMgmtHandlers2017: ").append(toIndentedString(bioMgmtHandlers2017)).append("\n");
    sb.append("    bioMgmtPathogens: ").append(toIndentedString(bioMgmtPathogens)).append("\n");
    sb.append("    bioMgmtPathogens2016: ").append(toIndentedString(bioMgmtPathogens2016)).append("\n");
    sb.append("    bioMgmtPathogens2017: ").append(toIndentedString(bioMgmtPathogens2017)).append("\n");
    sb.append("    bioMgmtPathreds: ").append(toIndentedString(bioMgmtPathreds)).append("\n");
    sb.append("    bioMgmtPathreds2016: ").append(toIndentedString(bioMgmtPathreds2016)).append("\n");
    sb.append("    bioMgmtPathreds2017: ").append(toIndentedString(bioMgmtPathreds2017)).append("\n");
    sb.append("    bioMgmtPrctceStypes: ").append(toIndentedString(bioMgmtPrctceStypes)).append("\n");
    sb.append("    bioMgmtPrctceStypes2016: ").append(toIndentedString(bioMgmtPrctceStypes2016)).append("\n");
    sb.append("    bioMgmtPrctceStypes2017: ").append(toIndentedString(bioMgmtPrctceStypes2017)).append("\n");
    sb.append("    bioMgmtPrctceTypes: ").append(toIndentedString(bioMgmtPrctceTypes)).append("\n");
    sb.append("    bioMgmtPrctceTypes2016: ").append(toIndentedString(bioMgmtPrctceTypes2016)).append("\n");
    sb.append("    bioMgmtPrctceTypes2017: ").append(toIndentedString(bioMgmtPrctceTypes2017)).append("\n");
    sb.append("    bioMgmtVectors: ").append(toIndentedString(bioMgmtVectors)).append("\n");
    sb.append("    bioMgmtVectors2016: ").append(toIndentedString(bioMgmtVectors2016)).append("\n");
    sb.append("    bioMgmtVectors2017: ").append(toIndentedString(bioMgmtVectors2017)).append("\n");
    sb.append("    bioOtherManagementSum: ").append(toIndentedString(bioOtherManagementSum)).append("\n");
    sb.append("    bioOtherManagementSum2016: ").append(toIndentedString(bioOtherManagementSum2016)).append("\n");
    sb.append("    bioOtherManagementSum2017: ").append(toIndentedString(bioOtherManagementSum2017)).append("\n");
    sb.append("    bioOtherMgmtPrctcTxts: ").append(toIndentedString(bioOtherMgmtPrctcTxts)).append("\n");
    sb.append("    bioOtherMgmtPrctcTxts2016: ").append(toIndentedString(bioOtherMgmtPrctcTxts2016)).append("\n");
    sb.append("    bioOtherMgmtPrctcTxts2017: ").append(toIndentedString(bioOtherMgmtPrctcTxts2017)).append("\n");
    sb.append("    bioQtrsWithVio: ").append(toIndentedString(bioQtrsWithVio)).append("\n");
    sb.append("    bioReportDate: ").append(toIndentedString(bioReportDate)).append("\n");
    sb.append("    bioReportDate2016: ").append(toIndentedString(bioReportDate2016)).append("\n");
    sb.append("    bioReportDate2017: ").append(toIndentedString(bioReportDate2017)).append("\n");
    sb.append("    bioReportYear: ").append(toIndentedString(bioReportYear)).append("\n");
    sb.append("    bioReportYears: ").append(toIndentedString(bioReportYears)).append("\n");
    sb.append("    bioReportingObligations: ").append(toIndentedString(bioReportingObligations)).append("\n");
    sb.append("    bioReportingObligations2016: ").append(toIndentedString(bioReportingObligations2016)).append("\n");
    sb.append("    bioReportingObligations2017: ").append(toIndentedString(bioReportingObligations2017)).append("\n");
    sb.append("    bioSurfaceDispSum: ").append(toIndentedString(bioSurfaceDispSum)).append("\n");
    sb.append("    bioSurfaceDispSum2016: ").append(toIndentedString(bioSurfaceDispSum2016)).append("\n");
    sb.append("    bioSurfaceDispSum2017: ").append(toIndentedString(bioSurfaceDispSum2017)).append("\n");
    sb.append("    bioTotalVolumeAmt: ").append(toIndentedString(bioTotalVolumeAmt)).append("\n");
    sb.append("    bioTotalVolumeAmt2016: ").append(toIndentedString(bioTotalVolumeAmt2016)).append("\n");
    sb.append("    bioTotalVolumeAmt2017: ").append(toIndentedString(bioTotalVolumeAmt2017)).append("\n");
    sb.append("    bioTrmntPrcssCmntTxts2016: ").append(toIndentedString(bioTrmntPrcssCmntTxts2016)).append("\n");
    sb.append("    bioTrmntPrcssCmntTxts2017: ").append(toIndentedString(bioTrmntPrcssCmntTxts2017)).append("\n");
    sb.append("    bioTrtmntPrcssCmmntTxts: ").append(toIndentedString(bioTrtmntPrcssCmmntTxts)).append("\n");
    sb.append("    bioTrtmntProcesses: ").append(toIndentedString(bioTrtmntProcesses)).append("\n");
    sb.append("    bioTrtmntProcesses2016: ").append(toIndentedString(bioTrtmntProcesses2016)).append("\n");
    sb.append("    bioTrtmntProcesses2017: ").append(toIndentedString(bioTrtmntProcesses2017)).append("\n");
    sb.append("    bioVioLastYear: ").append(toIndentedString(bioVioLastYear)).append("\n");
    sb.append("    bioVioLastYearFlag: ").append(toIndentedString(bioVioLastYearFlag)).append("\n");
    sb.append("    bioVioStatus: ").append(toIndentedString(bioVioStatus)).append("\n");
    sb.append("    bioViolFlag: ").append(toIndentedString(bioViolFlag)).append("\n");
    sb.append("    biosolidsFlag: ").append(toIndentedString(biosolidsFlag)).append("\n");
    sb.append("    cwP13qtrsComplHistory: ").append(toIndentedString(cwP13qtrsComplHistory)).append("\n");
    sb.append("    cwPActualAverageFlowNmbr: ").append(toIndentedString(cwPActualAverageFlowNmbr)).append("\n");
    sb.append("    cwPBioFeaCount: ").append(toIndentedString(cwPBioFeaCount)).append("\n");
    sb.append("    cwPBioIeaCount: ").append(toIndentedString(cwPBioIeaCount)).append("\n");
    sb.append("    cwPBioInspCount: ").append(toIndentedString(cwPBioInspCount)).append("\n");
    sb.append("    cwPBioPenalties: ").append(toIndentedString(cwPBioPenalties)).append("\n");
    sb.append("    cwPCaseIDs: ").append(toIndentedString(cwPCaseIDs)).append("\n");
    sb.append("    cwPCity: ").append(toIndentedString(cwPCity)).append("\n");
    sb.append("    cwPComplianceTracking: ").append(toIndentedString(cwPComplianceTracking)).append("\n");
    sb.append("    cwPCounty: ").append(toIndentedString(cwPCounty)).append("\n");
    sb.append("    cwPCsoFlag: ").append(toIndentedString(cwPCsoFlag)).append("\n");
    sb.append("    cwPCsoOutfalls: ").append(toIndentedString(cwPCsoOutfalls)).append("\n");
    sb.append("    cwPDateLastBioFea: ").append(toIndentedString(cwPDateLastBioFea)).append("\n");
    sb.append("    cwPDateLastBioFeaEPA: ").append(toIndentedString(cwPDateLastBioFeaEPA)).append("\n");
    sb.append("    cwPDateLastBioFeaSt: ").append(toIndentedString(cwPDateLastBioFeaSt)).append("\n");
    sb.append("    cwPDateLastBioIea: ").append(toIndentedString(cwPDateLastBioIea)).append("\n");
    sb.append("    cwPDateLastBioIeaEPA: ").append(toIndentedString(cwPDateLastBioIeaEPA)).append("\n");
    sb.append("    cwPDateLastBioIeaSt: ").append(toIndentedString(cwPDateLastBioIeaSt)).append("\n");
    sb.append("    cwPDateLastBioInsp: ").append(toIndentedString(cwPDateLastBioInsp)).append("\n");
    sb.append("    cwPDateLastBioInspEPA: ").append(toIndentedString(cwPDateLastBioInspEPA)).append("\n");
    sb.append("    cwPDateLastBioInspSt: ").append(toIndentedString(cwPDateLastBioInspSt)).append("\n");
    sb.append("    cwPDateLastBioPenalty: ").append(toIndentedString(cwPDateLastBioPenalty)).append("\n");
    sb.append("    cwPDateLastFea: ").append(toIndentedString(cwPDateLastFea)).append("\n");
    sb.append("    cwPDateLastFeaEPA: ").append(toIndentedString(cwPDateLastFeaEPA)).append("\n");
    sb.append("    cwPDateLastFeaSt: ").append(toIndentedString(cwPDateLastFeaSt)).append("\n");
    sb.append("    cwPDateLastIeaEPA: ").append(toIndentedString(cwPDateLastIeaEPA)).append("\n");
    sb.append("    cwPDateLastIeaSt: ").append(toIndentedString(cwPDateLastIeaSt)).append("\n");
    sb.append("    cwPDateLastInformalEa: ").append(toIndentedString(cwPDateLastInformalEa)).append("\n");
    sb.append("    cwPDateLastInspEPA: ").append(toIndentedString(cwPDateLastInspEPA)).append("\n");
    sb.append("    cwPDateLastInspSt: ").append(toIndentedString(cwPDateLastInspSt)).append("\n");
    sb.append("    cwPDateLastInspection: ").append(toIndentedString(cwPDateLastInspection)).append("\n");
    sb.append("    cwPDateLastPenalty: ").append(toIndentedString(cwPDateLastPenalty)).append("\n");
    sb.append("    cwPDaysLastBioInsp: ").append(toIndentedString(cwPDaysLastBioInsp)).append("\n");
    sb.append("    cwPDaysLastInspection: ").append(toIndentedString(cwPDaysLastInspection)).append("\n");
    sb.append("    cwPE90Cnt: ").append(toIndentedString(cwPE90Cnt)).append("\n");
    sb.append("    cwPEPARegion: ").append(toIndentedString(cwPEPARegion)).append("\n");
    sb.append("    cwPEffectiveDate: ").append(toIndentedString(cwPEffectiveDate)).append("\n");
    sb.append("    cwPExpirationDate: ").append(toIndentedString(cwPExpirationDate)).append("\n");
    sb.append("    cwPFIPSCode: ").append(toIndentedString(cwPFIPSCode)).append("\n");
    sb.append("    cwPFacilityTypeCode: ").append(toIndentedString(cwPFacilityTypeCode)).append("\n");
    sb.append("    cwPFacilityTypeIndicator: ").append(toIndentedString(cwPFacilityTypeIndicator)).append("\n");
    sb.append("    cwPFormalEaCnt: ").append(toIndentedString(cwPFormalEaCnt)).append("\n");
    sb.append("    cwPImpWaterFlg: ").append(toIndentedString(cwPImpWaterFlg)).append("\n");
    sb.append("    cwPIndianCntryFlg: ").append(toIndentedString(cwPIndianCntryFlg)).append("\n");
    sb.append("    cwPInformalEnfActCount: ").append(toIndentedString(cwPInformalEnfActCount)).append("\n");
    sb.append("    cwPInspectionCount: ").append(toIndentedString(cwPInspectionCount)).append("\n");
    sb.append("    cwPIssueDate: ").append(toIndentedString(cwPIssueDate)).append("\n");
    sb.append("    cwPMajorMinorStatusFlag: ").append(toIndentedString(cwPMajorMinorStatusFlag)).append("\n");
    sb.append("    cwPNAICSCodes: ").append(toIndentedString(cwPNAICSCodes)).append("\n");
    sb.append("    cwPName: ").append(toIndentedString(cwPName)).append("\n");
    sb.append("    cwPPermitStatusCode: ").append(toIndentedString(cwPPermitStatusCode)).append("\n");
    sb.append("    cwPPermitStatusDesc: ").append(toIndentedString(cwPPermitStatusDesc)).append("\n");
    sb.append("    cwPPermitTypeCode: ").append(toIndentedString(cwPPermitTypeCode)).append("\n");
    sb.append("    cwPPermitTypeDesc: ").append(toIndentedString(cwPPermitTypeDesc)).append("\n");
    sb.append("    cwPQtrsWithNC: ").append(toIndentedString(cwPQtrsWithNC)).append("\n");
    sb.append("    cwPQtrsWithSNC: ").append(toIndentedString(cwPQtrsWithSNC)).append("\n");
    sb.append("    cwPSICCodes: ").append(toIndentedString(cwPSICCodes)).append("\n");
    sb.append("    cwPSNCEventDesc: ").append(toIndentedString(cwPSNCEventDesc)).append("\n");
    sb.append("    cwPSNCStatus: ").append(toIndentedString(cwPSNCStatus)).append("\n");
    sb.append("    cwPSNCStatusDate: ").append(toIndentedString(cwPSNCStatusDate)).append("\n");
    sb.append("    cwPState: ").append(toIndentedString(cwPState)).append("\n");
    sb.append("    cwPStateDistrict: ").append(toIndentedString(cwPStateDistrict)).append("\n");
    sb.append("    cwPStateWaterBodyCode: ").append(toIndentedString(cwPStateWaterBodyCode)).append("\n");
    sb.append("    cwPStateWaterBodyName: ").append(toIndentedString(cwPStateWaterBodyName)).append("\n");
    sb.append("    cwPStatus: ").append(toIndentedString(cwPStatus)).append("\n");
    sb.append("    cwPStreet: ").append(toIndentedString(cwPStreet)).append("\n");
    sb.append("    cwPTRIbalLandCode: ").append(toIndentedString(cwPTRIbalLandCode)).append("\n");
    sb.append("    cwPTerminationDate: ").append(toIndentedString(cwPTerminationDate)).append("\n");
    sb.append("    cwPTotalDesignFlowNmbr: ").append(toIndentedString(cwPTotalDesignFlowNmbr)).append("\n");
    sb.append("    cwPTotalPenalties: ").append(toIndentedString(cwPTotalPenalties)).append("\n");
    sb.append("    cwPVersionNmbr: ").append(toIndentedString(cwPVersionNmbr)).append("\n");
    sb.append("    cwPVioStatus: ").append(toIndentedString(cwPVioStatus)).append("\n");
    sb.append("    cwPViolStatus: ").append(toIndentedString(cwPViolStatus)).append("\n");
    sb.append("    cwPZip: ").append(toIndentedString(cwPZip)).append("\n");
    sb.append("    calculatedAccuracyMeters: ").append(toIndentedString(calculatedAccuracyMeters)).append("\n");
    sb.append("    censusBlockGroup: ").append(toIndentedString(censusBlockGroup)).append("\n");
    sb.append("    certifiedDate: ").append(toIndentedString(certifiedDate)).append("\n");
    sb.append("    chesapeakeBayFlag: ").append(toIndentedString(chesapeakeBayFlag)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    controlMeasure: ").append(toIndentedString(controlMeasure)).append("\n");
    sb.append("    controlMeasureSchedule: ").append(toIndentedString(controlMeasureSchedule)).append("\n");
    sb.append("    currSvFlag: ").append(toIndentedString(currSvFlag)).append("\n");
    sb.append("    currVioFlag: ").append(toIndentedString(currVioFlag)).append("\n");
    sb.append("    dmRImpairedPoll: ").append(toIndentedString(dmRImpairedPoll)).append("\n");
    sb.append("    dmRPounds: ").append(toIndentedString(dmRPounds)).append("\n");
    sb.append("    dmRTwpe: ").append(toIndentedString(dmRTwpe)).append("\n");
    sb.append("    dschToMs4: ").append(toIndentedString(dschToMs4)).append("\n");
    sb.append("    e90Exceeds1yr: ").append(toIndentedString(e90Exceeds1yr)).append("\n");
    sb.append("    e90Exceeds2yr: ").append(toIndentedString(e90Exceeds2yr)).append("\n");
    sb.append("    e90Exceeds3yr: ").append(toIndentedString(e90Exceeds3yr)).append("\n");
    sb.append("    e90Exceeds4yr: ").append(toIndentedString(e90Exceeds4yr)).append("\n");
    sb.append("    e90Exceeds5yr: ").append(toIndentedString(e90Exceeds5yr)).append("\n");
    sb.append("    e90Pollutants1yr: ").append(toIndentedString(e90Pollutants1yr)).append("\n");
    sb.append("    e90Pollutants2yr: ").append(toIndentedString(e90Pollutants2yr)).append("\n");
    sb.append("    e90Pollutants3yr: ").append(toIndentedString(e90Pollutants3yr)).append("\n");
    sb.append("    e90Pollutants4yr: ").append(toIndentedString(e90Pollutants4yr)).append("\n");
    sb.append("    e90Pollutants5yr: ").append(toIndentedString(e90Pollutants5yr)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    ea5yrFlag: ").append(toIndentedString(ea5yrFlag)).append("\n");
    sb.append("    effChartsFlag: ").append(toIndentedString(effChartsFlag)).append("\n");
    sb.append("    effExceeds: ").append(toIndentedString(effExceeds)).append("\n");
    sb.append("    ejscreenFlag: ").append(toIndentedString(ejscreenFlag)).append("\n");
    sb.append("    ejscreenFlagUs: ").append(toIndentedString(ejscreenFlagUs)).append("\n");
    sb.append("    electrRptWaiverEffDate: ").append(toIndentedString(electrRptWaiverEffDate)).append("\n");
    sb.append("    electrRptWaiverExpDate: ").append(toIndentedString(electrRptWaiverExpDate)).append("\n");
    sb.append("    electrRptWaiverTypeCode: ").append(toIndentedString(electrRptWaiverTypeCode)).append("\n");
    sb.append("    electrRptWaiverTypeDesc: ").append(toIndentedString(electrRptWaiverTypeDesc)).append("\n");
    sb.append("    electrSubmissionTypeCode: ").append(toIndentedString(electrSubmissionTypeCode)).append("\n");
    sb.append("    electrSubmissionTypeDesc: ").append(toIndentedString(electrSubmissionTypeDesc)).append("\n");
    sb.append("    exposedActivity: ").append(toIndentedString(exposedActivity)).append("\n");
    sb.append("    facCountyName: ").append(toIndentedString(facCountyName)).append("\n");
    sb.append("    facDerivedHuc: ").append(toIndentedString(facDerivedHuc)).append("\n");
    sb.append("    facDerivedTRIbes: ").append(toIndentedString(facDerivedTRIbes)).append("\n");
    sb.append("    facDerivedWBD: ").append(toIndentedString(facDerivedWBD)).append("\n");
    sb.append("    facDerivedWBDHu8: ").append(toIndentedString(facDerivedWBDHu8)).append("\n");
    sb.append("    facDerivedWBDHu8Name: ").append(toIndentedString(facDerivedWBDHu8Name)).append("\n");
    sb.append("    facDerivedWBDName: ").append(toIndentedString(facDerivedWBDName)).append("\n");
    sb.append("    facFIPSCode: ").append(toIndentedString(facFIPSCode)).append("\n");
    sb.append("    facFederalAgencyCode: ").append(toIndentedString(facFederalAgencyCode)).append("\n");
    sb.append("    facFederalAgencyName: ").append(toIndentedString(facFederalAgencyName)).append("\n");
    sb.append("    facIndianCntryFlg: ").append(toIndentedString(facIndianCntryFlg)).append("\n");
    sb.append("    facIndianSpatialFlg: ").append(toIndentedString(facIndianSpatialFlg)).append("\n");
    sb.append("    facMapFlg: ").append(toIndentedString(facMapFlg)).append("\n");
    sb.append("    facMapIcon: ").append(toIndentedString(facMapIcon)).append("\n");
    sb.append("    facPercentMinority: ").append(toIndentedString(facPercentMinority)).append("\n");
    sb.append("    facPopDen: ").append(toIndentedString(facPopDen)).append("\n");
    sb.append("    facStdCountyName: ").append(toIndentedString(facStdCountyName)).append("\n");
    sb.append("    facTRIPotwTrans: ").append(toIndentedString(facTRIPotwTrans)).append("\n");
    sb.append("    facTRIReporter: ").append(toIndentedString(facTRIReporter)).append("\n");
    sb.append("    facTRISwRel: ").append(toIndentedString(facTRISwRel)).append("\n");
    sb.append("    facUsMexBorderFlg: ").append(toIndentedString(facUsMexBorderFlg)).append("\n");
    sb.append("    historicCriterionCode: ").append(toIndentedString(historicCriterionCode)).append("\n");
    sb.append("    indswFlag: ").append(toIndentedString(indswFlag)).append("\n");
    sb.append("    infea5yrFlag: ").append(toIndentedString(infea5yrFlag)).append("\n");
    sb.append("    insp5yrFlag: ").append(toIndentedString(insp5yrFlag)).append("\n");
    sb.append("    inspDef5yrCnt: ").append(toIndentedString(inspDef5yrCnt)).append("\n");
    sb.append("    issuingAgency: ").append(toIndentedString(issuingAgency)).append("\n");
    sb.append("    lastDMRValueRcvdDate: ").append(toIndentedString(lastDMRValueRcvdDate)).append("\n");
    sb.append("    limPollutant: ").append(toIndentedString(limPollutant)).append("\n");
    sb.append("    lower48: ").append(toIndentedString(lower48)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    masterExternalPermitNmbr: ").append(toIndentedString(masterExternalPermitNmbr)).append("\n");
    sb.append("    maxPctileUs: ").append(toIndentedString(maxPctileUs)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    missDMRQtrs: ").append(toIndentedString(missDMRQtrs)).append("\n");
    sb.append("    msgpCorrectiveActionSmmry: ").append(toIndentedString(msgpCorrectiveActionSmmry)).append("\n");
    sb.append("    msgpFacilityInspctnSmmry: ").append(toIndentedString(msgpFacilityInspctnSmmry)).append("\n");
    sb.append("    msgpLastReportYear: ").append(toIndentedString(msgpLastReportYear)).append("\n");
    sb.append("    msgpNoFurtherRdctnRtnle: ").append(toIndentedString(msgpNoFurtherRdctnRtnle)).append("\n");
    sb.append("    msgpPermitType: ").append(toIndentedString(msgpPermitType)).append("\n");
    sb.append("    msgpVisualAssessmentSmmry: ").append(toIndentedString(msgpVisualAssessmentSmmry)).append("\n");
    sb.append("    npDESDataGroups: ").append(toIndentedString(npDESDataGroups)).append("\n");
    sb.append("    npDESDataGroupsDescs: ").append(toIndentedString(npDESDataGroupsDescs)).append("\n");
    sb.append("    npDESIDs: ").append(toIndentedString(npDESIDs)).append("\n");
    sb.append("    otherPermitIDs: ").append(toIndentedString(otherPermitIDs)).append("\n");
    sb.append("    over80CountUs: ").append(toIndentedString(over80CountUs)).append("\n");
    sb.append("    pastCalYrAverageFlow: ").append(toIndentedString(pastCalYrAverageFlow)).append("\n");
    sb.append("    pastCalYrConvPolOvrLmt: ").append(toIndentedString(pastCalYrConvPolOvrLmt)).append("\n");
    sb.append("    pastCalYrConvPollutants: ").append(toIndentedString(pastCalYrConvPollutants)).append("\n");
    sb.append("    pastCalYrToxicPolOvrLmt: ").append(toIndentedString(pastCalYrToxicPolOvrLmt)).append("\n");
    sb.append("    pastCalYrToxicPollutants: ").append(toIndentedString(pastCalYrToxicPollutants)).append("\n");
    sb.append("    pctileCancerUs: ").append(toIndentedString(pctileCancerUs)).append("\n");
    sb.append("    pctileDpmUs: ").append(toIndentedString(pctileDpmUs)).append("\n");
    sb.append("    pctileO3Us: ").append(toIndentedString(pctileO3Us)).append("\n");
    sb.append("    pctilePctpre1960Us: ").append(toIndentedString(pctilePctpre1960Us)).append("\n");
    sb.append("    pctilePmUs: ").append(toIndentedString(pctilePmUs)).append("\n");
    sb.append("    pctileProximityNPDESUs: ").append(toIndentedString(pctileProximityNPDESUs)).append("\n");
    sb.append("    pctileProximityNplUs: ").append(toIndentedString(pctileProximityNplUs)).append("\n");
    sb.append("    pctileProximityRmpUs: ").append(toIndentedString(pctileProximityRmpUs)).append("\n");
    sb.append("    pctileProximityTsdfUs: ").append(toIndentedString(pctileProximityTsdfUs)).append("\n");
    sb.append("    pctileRespUs: ").append(toIndentedString(pctileRespUs)).append("\n");
    sb.append("    pctileTrafficScoreUs: ").append(toIndentedString(pctileTrafficScoreUs)).append("\n");
    sb.append("    permitComponents: ").append(toIndentedString(permitComponents)).append("\n");
    sb.append("    permitName: ").append(toIndentedString(permitName)).append("\n");
    sb.append("    permittingAgency: ").append(toIndentedString(permittingAgency)).append("\n");
    sb.append("    pollWithViolation: ").append(toIndentedString(pollWithViolation)).append("\n");
    sb.append("    rcRAIDs: ").append(toIndentedString(rcRAIDs)).append("\n");
    sb.append("    radGnisName: ").append(toIndentedString(radGnisName)).append("\n");
    sb.append("    radHu12Name: ").append(toIndentedString(radHu12Name)).append("\n");
    sb.append("    radReachcode: ").append(toIndentedString(radReachcode)).append("\n");
    sb.append("    radWBDHu8: ").append(toIndentedString(radWBDHu8)).append("\n");
    sb.append("    radWBDHu8Name: ").append(toIndentedString(radWBDHu8Name)).append("\n");
    sb.append("    radWBDHuc12: ").append(toIndentedString(radWBDHuc12)).append("\n");
    sb.append("    receivingMs4Name: ").append(toIndentedString(receivingMs4Name)).append("\n");
    sb.append("    referencePoint: ").append(toIndentedString(referencePoint)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    rmpIDs: ").append(toIndentedString(rmpIDs)).append("\n");
    sb.append("    sdWAIDs: ").append(toIndentedString(sdWAIDs)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    speciesCriticalHabitalFlag: ").append(toIndentedString(speciesCriticalHabitalFlag)).append("\n");
    sb.append("    stateAuthBiosolids: ").append(toIndentedString(stateAuthBiosolids)).append("\n");
    sb.append("    stateAuthFedfac: ").append(toIndentedString(stateAuthFedfac)).append("\n");
    sb.append("    stateAuthGen: ").append(toIndentedString(stateAuthGen)).append("\n");
    sb.append("    stateAuthNPDES: ").append(toIndentedString(stateAuthNPDES)).append("\n");
    sb.append("    stateAuthPretreat: ").append(toIndentedString(stateAuthPretreat)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("    stormWaterArea: ").append(toIndentedString(stormWaterArea)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    subsector: ").append(toIndentedString(subsector)).append("\n");
    sb.append("    swpppUrl: ").append(toIndentedString(swpppUrl)).append("\n");
    sb.append("    trIIDs: ").append(toIndentedString(trIIDs)).append("\n");
    sb.append("    trIbalFlag: ").append(toIndentedString(trIbalFlag)).append("\n");
    sb.append("    typeOfMonitoring: ").append(toIndentedString(typeOfMonitoring)).append("\n");
    sb.append("    typeOfWater: ").append(toIndentedString(typeOfWater)).append("\n");
    sb.append("    vioLastYear: ").append(toIndentedString(vioLastYear)).append("\n");
    sb.append("    violFlag: ").append(toIndentedString(violFlag)).append("\n");
    sb.append("    webDocs: ").append(toIndentedString(webDocs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AIRIDs");
    openapiFields.add("ActiveLower48");
    openapiFields.add("AlrExceedences");
    openapiFields.add("AssociatedPollutant");
    openapiFields.add("AttainsAquaticLifeUseFlg");
    openapiFields.add("AttainsAuCategory");
    openapiFields.add("AttainsCauseGroups");
    openapiFields.add("AttainsCycleYear");
    openapiFields.add("AttainsExceptnlUseFlg");
    openapiFields.add("AttainsImpWaterFlg");
    openapiFields.add("AttainsPossibleNPDESParams");
    openapiFields.add("AttainsRecreationUseFlg");
    openapiFields.add("AttainsShellfishUseFlg");
    openapiFields.add("AttainsSource");
    openapiFields.add("AttainsStateCauses");
    openapiFields.add("BeachCloseLast2yrsFlg");
    openapiFields.add("BeachCloseLastYearFlg");
    openapiFields.add("BioAnalyMethodCatgrys");
    openapiFields.add("BioAnalyMethodCatgrys2016");
    openapiFields.add("BioAnalyMethodCatgrys2017");
    openapiFields.add("BioAnalyMethods");
    openapiFields.add("BioAnalyMethods2016");
    openapiFields.add("BioAnalyMethods2017");
    openapiFields.add("BioCommentText");
    openapiFields.add("BioCommentText2016");
    openapiFields.add("BioCommentText2017");
    openapiFields.add("BioIncinerationSum");
    openapiFields.add("BioIncinerationSum2016");
    openapiFields.add("BioIncinerationSum2017");
    openapiFields.add("BioLandApplicationSum");
    openapiFields.add("BioLandApplicationSum2016");
    openapiFields.add("BioLandApplicationSum2017");
    openapiFields.add("BioMgmtContainers");
    openapiFields.add("BioMgmtContainers2016");
    openapiFields.add("BioMgmtContainers2017");
    openapiFields.add("BioMgmtDefCategories");
    openapiFields.add("BioMgmtDefCategories2016");
    openapiFields.add("BioMgmtDefCategories2017");
    openapiFields.add("BioMgmtDefCurrentCnt");
    openapiFields.add("BioMgmtDefCurrentCnt2016");
    openapiFields.add("BioMgmtDefCurrentCnt2017");
    openapiFields.add("BioMgmtDeficiencies");
    openapiFields.add("BioMgmtDeficiencies2016");
    openapiFields.add("BioMgmtDeficiencies2017");
    openapiFields.add("BioMgmtHandlers");
    openapiFields.add("BioMgmtHandlers2016");
    openapiFields.add("BioMgmtHandlers2017");
    openapiFields.add("BioMgmtPathogens");
    openapiFields.add("BioMgmtPathogens2016");
    openapiFields.add("BioMgmtPathogens2017");
    openapiFields.add("BioMgmtPathreds");
    openapiFields.add("BioMgmtPathreds2016");
    openapiFields.add("BioMgmtPathreds2017");
    openapiFields.add("BioMgmtPrctceStypes");
    openapiFields.add("BioMgmtPrctceStypes2016");
    openapiFields.add("BioMgmtPrctceStypes2017");
    openapiFields.add("BioMgmtPrctceTypes");
    openapiFields.add("BioMgmtPrctceTypes2016");
    openapiFields.add("BioMgmtPrctceTypes2017");
    openapiFields.add("BioMgmtVectors");
    openapiFields.add("BioMgmtVectors2016");
    openapiFields.add("BioMgmtVectors2017");
    openapiFields.add("BioOtherManagementSum");
    openapiFields.add("BioOtherManagementSum2016");
    openapiFields.add("BioOtherManagementSum2017");
    openapiFields.add("BioOtherMgmtPrctcTxts");
    openapiFields.add("BioOtherMgmtPrctcTxts2016");
    openapiFields.add("BioOtherMgmtPrctcTxts2017");
    openapiFields.add("BioQtrsWithVio");
    openapiFields.add("BioReportDate");
    openapiFields.add("BioReportDate2016");
    openapiFields.add("BioReportDate2017");
    openapiFields.add("BioReportYear");
    openapiFields.add("BioReportYears");
    openapiFields.add("BioReportingObligations");
    openapiFields.add("BioReportingObligations2016");
    openapiFields.add("BioReportingObligations2017");
    openapiFields.add("BioSurfaceDispSum");
    openapiFields.add("BioSurfaceDispSum2016");
    openapiFields.add("BioSurfaceDispSum2017");
    openapiFields.add("BioTotalVolumeAmt");
    openapiFields.add("BioTotalVolumeAmt2016");
    openapiFields.add("BioTotalVolumeAmt2017");
    openapiFields.add("BioTrmntPrcssCmntTxts2016");
    openapiFields.add("BioTrmntPrcssCmntTxts2017");
    openapiFields.add("BioTrtmntPrcssCmmntTxts");
    openapiFields.add("BioTrtmntProcesses");
    openapiFields.add("BioTrtmntProcesses2016");
    openapiFields.add("BioTrtmntProcesses2017");
    openapiFields.add("BioVioLastYear");
    openapiFields.add("BioVioLastYearFlag");
    openapiFields.add("BioVioStatus");
    openapiFields.add("BioViolFlag");
    openapiFields.add("BiosolidsFlag");
    openapiFields.add("CWP13qtrsComplHistory");
    openapiFields.add("CWPActualAverageFlowNmbr");
    openapiFields.add("CWPBioFeaCount");
    openapiFields.add("CWPBioIeaCount");
    openapiFields.add("CWPBioInspCount");
    openapiFields.add("CWPBioPenalties");
    openapiFields.add("CWPCaseIDs");
    openapiFields.add("CWPCity");
    openapiFields.add("CWPComplianceTracking");
    openapiFields.add("CWPCounty");
    openapiFields.add("CWPCsoFlag");
    openapiFields.add("CWPCsoOutfalls");
    openapiFields.add("CWPDateLastBioFea");
    openapiFields.add("CWPDateLastBioFeaEPA");
    openapiFields.add("CWPDateLastBioFeaSt");
    openapiFields.add("CWPDateLastBioIea");
    openapiFields.add("CWPDateLastBioIeaEPA");
    openapiFields.add("CWPDateLastBioIeaSt");
    openapiFields.add("CWPDateLastBioInsp");
    openapiFields.add("CWPDateLastBioInspEPA");
    openapiFields.add("CWPDateLastBioInspSt");
    openapiFields.add("CWPDateLastBioPenalty");
    openapiFields.add("CWPDateLastFea");
    openapiFields.add("CWPDateLastFeaEPA");
    openapiFields.add("CWPDateLastFeaSt");
    openapiFields.add("CWPDateLastIeaEPA");
    openapiFields.add("CWPDateLastIeaSt");
    openapiFields.add("CWPDateLastInformalEa");
    openapiFields.add("CWPDateLastInspEPA");
    openapiFields.add("CWPDateLastInspSt");
    openapiFields.add("CWPDateLastInspection");
    openapiFields.add("CWPDateLastPenalty");
    openapiFields.add("CWPDaysLastBioInsp");
    openapiFields.add("CWPDaysLastInspection");
    openapiFields.add("CWPE90Cnt");
    openapiFields.add("CWPEPARegion");
    openapiFields.add("CWPEffectiveDate");
    openapiFields.add("CWPExpirationDate");
    openapiFields.add("CWPFIPSCode");
    openapiFields.add("CWPFacilityTypeCode");
    openapiFields.add("CWPFacilityTypeIndicator");
    openapiFields.add("CWPFormalEaCnt");
    openapiFields.add("CWPImpWaterFlg");
    openapiFields.add("CWPIndianCntryFlg");
    openapiFields.add("CWPInformalEnfActCount");
    openapiFields.add("CWPInspectionCount");
    openapiFields.add("CWPIssueDate");
    openapiFields.add("CWPMajorMinorStatusFlag");
    openapiFields.add("CWPNAICSCodes");
    openapiFields.add("CWPName");
    openapiFields.add("CWPPermitStatusCode");
    openapiFields.add("CWPPermitStatusDesc");
    openapiFields.add("CWPPermitTypeCode");
    openapiFields.add("CWPPermitTypeDesc");
    openapiFields.add("CWPQtrsWithNC");
    openapiFields.add("CWPQtrsWithSNC");
    openapiFields.add("CWPSICCodes");
    openapiFields.add("CWPSNCEventDesc");
    openapiFields.add("CWPSNCStatus");
    openapiFields.add("CWPSNCStatusDate");
    openapiFields.add("CWPState");
    openapiFields.add("CWPStateDistrict");
    openapiFields.add("CWPStateWaterBodyCode");
    openapiFields.add("CWPStateWaterBodyName");
    openapiFields.add("CWPStatus");
    openapiFields.add("CWPStreet");
    openapiFields.add("CWPTRIbalLandCode");
    openapiFields.add("CWPTerminationDate");
    openapiFields.add("CWPTotalDesignFlowNmbr");
    openapiFields.add("CWPTotalPenalties");
    openapiFields.add("CWPVersionNmbr");
    openapiFields.add("CWPVioStatus");
    openapiFields.add("CWPViolStatus");
    openapiFields.add("CWPZip");
    openapiFields.add("CalculatedAccuracyMeters");
    openapiFields.add("CensusBlockGroup");
    openapiFields.add("CertifiedDate");
    openapiFields.add("ChesapeakeBayFlag");
    openapiFields.add("CollectionMethod");
    openapiFields.add("ControlMeasure");
    openapiFields.add("ControlMeasureSchedule");
    openapiFields.add("CurrSvFlag");
    openapiFields.add("CurrVioFlag");
    openapiFields.add("DMRImpairedPoll");
    openapiFields.add("DMRPounds");
    openapiFields.add("DMRTwpe");
    openapiFields.add("DschToMs4");
    openapiFields.add("E90Exceeds1yr");
    openapiFields.add("E90Exceeds2yr");
    openapiFields.add("E90Exceeds3yr");
    openapiFields.add("E90Exceeds4yr");
    openapiFields.add("E90Exceeds5yr");
    openapiFields.add("E90Pollutants1yr");
    openapiFields.add("E90Pollutants2yr");
    openapiFields.add("E90Pollutants3yr");
    openapiFields.add("E90Pollutants4yr");
    openapiFields.add("E90Pollutants5yr");
    openapiFields.add("EPASystem");
    openapiFields.add("Ea5yrFlag");
    openapiFields.add("EffChartsFlag");
    openapiFields.add("EffExceeds");
    openapiFields.add("EjscreenFlag");
    openapiFields.add("EjscreenFlagUs");
    openapiFields.add("ElectrRptWaiverEffDate");
    openapiFields.add("ElectrRptWaiverExpDate");
    openapiFields.add("ElectrRptWaiverTypeCode");
    openapiFields.add("ElectrRptWaiverTypeDesc");
    openapiFields.add("ElectrSubmissionTypeCode");
    openapiFields.add("ElectrSubmissionTypeDesc");
    openapiFields.add("ExposedActivity");
    openapiFields.add("FacCountyName");
    openapiFields.add("FacDerivedHuc");
    openapiFields.add("FacDerivedTRIbes");
    openapiFields.add("FacDerivedWBD");
    openapiFields.add("FacDerivedWBDHu8");
    openapiFields.add("FacDerivedWBDHu8Name");
    openapiFields.add("FacDerivedWBDName");
    openapiFields.add("FacFIPSCode");
    openapiFields.add("FacFederalAgencyCode");
    openapiFields.add("FacFederalAgencyName");
    openapiFields.add("FacIndianCntryFlg");
    openapiFields.add("FacIndianSpatialFlg");
    openapiFields.add("FacMapFlg");
    openapiFields.add("FacMapIcon");
    openapiFields.add("FacPercentMinority");
    openapiFields.add("FacPopDen");
    openapiFields.add("FacStdCountyName");
    openapiFields.add("FacTRIPotwTrans");
    openapiFields.add("FacTRIReporter");
    openapiFields.add("FacTRISwRel");
    openapiFields.add("FacUsMexBorderFlg");
    openapiFields.add("HistoricCriterionCode");
    openapiFields.add("IndswFlag");
    openapiFields.add("Infea5yrFlag");
    openapiFields.add("Insp5yrFlag");
    openapiFields.add("InspDef5yrCnt");
    openapiFields.add("IssuingAgency");
    openapiFields.add("LastDMRValueRcvdDate");
    openapiFields.add("LimPollutant");
    openapiFields.add("Lower48");
    openapiFields.add("Map");
    openapiFields.add("MasterExternalPermitNmbr");
    openapiFields.add("MaxPctileUs");
    openapiFields.add("MaxScore");
    openapiFields.add("MissDMRQtrs");
    openapiFields.add("MsgpCorrectiveActionSmmry");
    openapiFields.add("MsgpFacilityInspctnSmmry");
    openapiFields.add("MsgpLastReportYear");
    openapiFields.add("MsgpNoFurtherRdctnRtnle");
    openapiFields.add("MsgpPermitType");
    openapiFields.add("MsgpVisualAssessmentSmmry");
    openapiFields.add("NPDESDataGroups");
    openapiFields.add("NPDESDataGroupsDescs");
    openapiFields.add("NPDESIDs");
    openapiFields.add("OtherPermitIDs");
    openapiFields.add("Over80CountUs");
    openapiFields.add("PastCalYrAverageFlow");
    openapiFields.add("PastCalYrConvPolOvrLmt");
    openapiFields.add("PastCalYrConvPollutants");
    openapiFields.add("PastCalYrToxicPolOvrLmt");
    openapiFields.add("PastCalYrToxicPollutants");
    openapiFields.add("PctileCancerUs");
    openapiFields.add("PctileDpmUs");
    openapiFields.add("PctileO3Us");
    openapiFields.add("PctilePctpre1960Us");
    openapiFields.add("PctilePmUs");
    openapiFields.add("PctileProximityNPDESUs");
    openapiFields.add("PctileProximityNplUs");
    openapiFields.add("PctileProximityRmpUs");
    openapiFields.add("PctileProximityTsdfUs");
    openapiFields.add("PctileRespUs");
    openapiFields.add("PctileTrafficScoreUs");
    openapiFields.add("PermitComponents");
    openapiFields.add("PermitName");
    openapiFields.add("PermittingAgency");
    openapiFields.add("PollWithViolation");
    openapiFields.add("RCRAIDs");
    openapiFields.add("RadGnisName");
    openapiFields.add("RadHu12Name");
    openapiFields.add("RadReachcode");
    openapiFields.add("RadWBDHu8");
    openapiFields.add("RadWBDHu8Name");
    openapiFields.add("RadWBDHuc12");
    openapiFields.add("ReceivingMs4Name");
    openapiFields.add("ReferencePoint");
    openapiFields.add("RegistryID");
    openapiFields.add("RmpIDs");
    openapiFields.add("SDWAIDs");
    openapiFields.add("Score");
    openapiFields.add("Sector");
    openapiFields.add("SourceID");
    openapiFields.add("SpeciesCriticalHabitalFlag");
    openapiFields.add("StateAuthBiosolids");
    openapiFields.add("StateAuthFedfac");
    openapiFields.add("StateAuthGen");
    openapiFields.add("StateAuthNPDES");
    openapiFields.add("StateAuthPretreat");
    openapiFields.add("Statute");
    openapiFields.add("StormWaterArea");
    openapiFields.add("SubmittedDate");
    openapiFields.add("Subsector");
    openapiFields.add("SwpppUrl");
    openapiFields.add("TRIIDs");
    openapiFields.add("TRIbalFlag");
    openapiFields.add("TypeOfMonitoring");
    openapiFields.add("TypeOfWater");
    openapiFields.add("VioLastYear");
    openapiFields.add("ViolFlag");
    openapiFields.add("WebDocs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AIRIDs");
    openapiRequiredFields.add("ActiveLower48");
    openapiRequiredFields.add("AlrExceedences");
    openapiRequiredFields.add("AssociatedPollutant");
    openapiRequiredFields.add("AttainsAquaticLifeUseFlg");
    openapiRequiredFields.add("AttainsAuCategory");
    openapiRequiredFields.add("AttainsCauseGroups");
    openapiRequiredFields.add("AttainsCycleYear");
    openapiRequiredFields.add("AttainsExceptnlUseFlg");
    openapiRequiredFields.add("AttainsImpWaterFlg");
    openapiRequiredFields.add("AttainsPossibleNPDESParams");
    openapiRequiredFields.add("AttainsRecreationUseFlg");
    openapiRequiredFields.add("AttainsShellfishUseFlg");
    openapiRequiredFields.add("AttainsSource");
    openapiRequiredFields.add("AttainsStateCauses");
    openapiRequiredFields.add("BeachCloseLast2yrsFlg");
    openapiRequiredFields.add("BeachCloseLastYearFlg");
    openapiRequiredFields.add("BioAnalyMethodCatgrys");
    openapiRequiredFields.add("BioAnalyMethodCatgrys2016");
    openapiRequiredFields.add("BioAnalyMethodCatgrys2017");
    openapiRequiredFields.add("BioAnalyMethods");
    openapiRequiredFields.add("BioAnalyMethods2016");
    openapiRequiredFields.add("BioAnalyMethods2017");
    openapiRequiredFields.add("BioCommentText");
    openapiRequiredFields.add("BioCommentText2016");
    openapiRequiredFields.add("BioCommentText2017");
    openapiRequiredFields.add("BioIncinerationSum");
    openapiRequiredFields.add("BioIncinerationSum2016");
    openapiRequiredFields.add("BioIncinerationSum2017");
    openapiRequiredFields.add("BioLandApplicationSum");
    openapiRequiredFields.add("BioLandApplicationSum2016");
    openapiRequiredFields.add("BioLandApplicationSum2017");
    openapiRequiredFields.add("BioMgmtContainers");
    openapiRequiredFields.add("BioMgmtContainers2016");
    openapiRequiredFields.add("BioMgmtContainers2017");
    openapiRequiredFields.add("BioMgmtDefCategories");
    openapiRequiredFields.add("BioMgmtDefCategories2016");
    openapiRequiredFields.add("BioMgmtDefCategories2017");
    openapiRequiredFields.add("BioMgmtDefCurrentCnt");
    openapiRequiredFields.add("BioMgmtDefCurrentCnt2016");
    openapiRequiredFields.add("BioMgmtDefCurrentCnt2017");
    openapiRequiredFields.add("BioMgmtDeficiencies");
    openapiRequiredFields.add("BioMgmtDeficiencies2016");
    openapiRequiredFields.add("BioMgmtDeficiencies2017");
    openapiRequiredFields.add("BioMgmtHandlers");
    openapiRequiredFields.add("BioMgmtHandlers2016");
    openapiRequiredFields.add("BioMgmtHandlers2017");
    openapiRequiredFields.add("BioMgmtPathogens");
    openapiRequiredFields.add("BioMgmtPathogens2016");
    openapiRequiredFields.add("BioMgmtPathogens2017");
    openapiRequiredFields.add("BioMgmtPathreds");
    openapiRequiredFields.add("BioMgmtPathreds2016");
    openapiRequiredFields.add("BioMgmtPathreds2017");
    openapiRequiredFields.add("BioMgmtPrctceStypes");
    openapiRequiredFields.add("BioMgmtPrctceStypes2016");
    openapiRequiredFields.add("BioMgmtPrctceStypes2017");
    openapiRequiredFields.add("BioMgmtPrctceTypes");
    openapiRequiredFields.add("BioMgmtPrctceTypes2016");
    openapiRequiredFields.add("BioMgmtPrctceTypes2017");
    openapiRequiredFields.add("BioMgmtVectors");
    openapiRequiredFields.add("BioMgmtVectors2016");
    openapiRequiredFields.add("BioMgmtVectors2017");
    openapiRequiredFields.add("BioOtherManagementSum");
    openapiRequiredFields.add("BioOtherManagementSum2016");
    openapiRequiredFields.add("BioOtherManagementSum2017");
    openapiRequiredFields.add("BioOtherMgmtPrctcTxts");
    openapiRequiredFields.add("BioOtherMgmtPrctcTxts2016");
    openapiRequiredFields.add("BioOtherMgmtPrctcTxts2017");
    openapiRequiredFields.add("BioQtrsWithVio");
    openapiRequiredFields.add("BioReportDate");
    openapiRequiredFields.add("BioReportDate2016");
    openapiRequiredFields.add("BioReportDate2017");
    openapiRequiredFields.add("BioReportYear");
    openapiRequiredFields.add("BioReportYears");
    openapiRequiredFields.add("BioReportingObligations");
    openapiRequiredFields.add("BioReportingObligations2016");
    openapiRequiredFields.add("BioReportingObligations2017");
    openapiRequiredFields.add("BioSurfaceDispSum");
    openapiRequiredFields.add("BioSurfaceDispSum2016");
    openapiRequiredFields.add("BioSurfaceDispSum2017");
    openapiRequiredFields.add("BioTotalVolumeAmt");
    openapiRequiredFields.add("BioTotalVolumeAmt2016");
    openapiRequiredFields.add("BioTotalVolumeAmt2017");
    openapiRequiredFields.add("BioTrmntPrcssCmntTxts2016");
    openapiRequiredFields.add("BioTrmntPrcssCmntTxts2017");
    openapiRequiredFields.add("BioTrtmntPrcssCmmntTxts");
    openapiRequiredFields.add("BioTrtmntProcesses");
    openapiRequiredFields.add("BioTrtmntProcesses2016");
    openapiRequiredFields.add("BioTrtmntProcesses2017");
    openapiRequiredFields.add("BioVioLastYear");
    openapiRequiredFields.add("BioVioLastYearFlag");
    openapiRequiredFields.add("BioVioStatus");
    openapiRequiredFields.add("BioViolFlag");
    openapiRequiredFields.add("BiosolidsFlag");
    openapiRequiredFields.add("CWP13qtrsComplHistory");
    openapiRequiredFields.add("CWPActualAverageFlowNmbr");
    openapiRequiredFields.add("CWPBioFeaCount");
    openapiRequiredFields.add("CWPBioIeaCount");
    openapiRequiredFields.add("CWPBioInspCount");
    openapiRequiredFields.add("CWPBioPenalties");
    openapiRequiredFields.add("CWPCaseIDs");
    openapiRequiredFields.add("CWPCity");
    openapiRequiredFields.add("CWPComplianceTracking");
    openapiRequiredFields.add("CWPCounty");
    openapiRequiredFields.add("CWPCsoFlag");
    openapiRequiredFields.add("CWPCsoOutfalls");
    openapiRequiredFields.add("CWPDateLastBioFea");
    openapiRequiredFields.add("CWPDateLastBioFeaEPA");
    openapiRequiredFields.add("CWPDateLastBioFeaSt");
    openapiRequiredFields.add("CWPDateLastBioIea");
    openapiRequiredFields.add("CWPDateLastBioIeaEPA");
    openapiRequiredFields.add("CWPDateLastBioIeaSt");
    openapiRequiredFields.add("CWPDateLastBioInsp");
    openapiRequiredFields.add("CWPDateLastBioInspEPA");
    openapiRequiredFields.add("CWPDateLastBioInspSt");
    openapiRequiredFields.add("CWPDateLastBioPenalty");
    openapiRequiredFields.add("CWPDateLastFea");
    openapiRequiredFields.add("CWPDateLastFeaEPA");
    openapiRequiredFields.add("CWPDateLastFeaSt");
    openapiRequiredFields.add("CWPDateLastIeaEPA");
    openapiRequiredFields.add("CWPDateLastIeaSt");
    openapiRequiredFields.add("CWPDateLastInformalEa");
    openapiRequiredFields.add("CWPDateLastInspEPA");
    openapiRequiredFields.add("CWPDateLastInspSt");
    openapiRequiredFields.add("CWPDateLastInspection");
    openapiRequiredFields.add("CWPDateLastPenalty");
    openapiRequiredFields.add("CWPDaysLastBioInsp");
    openapiRequiredFields.add("CWPDaysLastInspection");
    openapiRequiredFields.add("CWPE90Cnt");
    openapiRequiredFields.add("CWPEPARegion");
    openapiRequiredFields.add("CWPEffectiveDate");
    openapiRequiredFields.add("CWPExpirationDate");
    openapiRequiredFields.add("CWPFIPSCode");
    openapiRequiredFields.add("CWPFacilityTypeCode");
    openapiRequiredFields.add("CWPFacilityTypeIndicator");
    openapiRequiredFields.add("CWPFormalEaCnt");
    openapiRequiredFields.add("CWPImpWaterFlg");
    openapiRequiredFields.add("CWPIndianCntryFlg");
    openapiRequiredFields.add("CWPInformalEnfActCount");
    openapiRequiredFields.add("CWPInspectionCount");
    openapiRequiredFields.add("CWPIssueDate");
    openapiRequiredFields.add("CWPMajorMinorStatusFlag");
    openapiRequiredFields.add("CWPNAICSCodes");
    openapiRequiredFields.add("CWPName");
    openapiRequiredFields.add("CWPPermitStatusCode");
    openapiRequiredFields.add("CWPPermitStatusDesc");
    openapiRequiredFields.add("CWPPermitTypeCode");
    openapiRequiredFields.add("CWPPermitTypeDesc");
    openapiRequiredFields.add("CWPQtrsWithNC");
    openapiRequiredFields.add("CWPQtrsWithSNC");
    openapiRequiredFields.add("CWPSICCodes");
    openapiRequiredFields.add("CWPSNCEventDesc");
    openapiRequiredFields.add("CWPSNCStatus");
    openapiRequiredFields.add("CWPSNCStatusDate");
    openapiRequiredFields.add("CWPState");
    openapiRequiredFields.add("CWPStateDistrict");
    openapiRequiredFields.add("CWPStateWaterBodyCode");
    openapiRequiredFields.add("CWPStateWaterBodyName");
    openapiRequiredFields.add("CWPStatus");
    openapiRequiredFields.add("CWPStreet");
    openapiRequiredFields.add("CWPTRIbalLandCode");
    openapiRequiredFields.add("CWPTerminationDate");
    openapiRequiredFields.add("CWPTotalDesignFlowNmbr");
    openapiRequiredFields.add("CWPTotalPenalties");
    openapiRequiredFields.add("CWPVersionNmbr");
    openapiRequiredFields.add("CWPVioStatus");
    openapiRequiredFields.add("CWPViolStatus");
    openapiRequiredFields.add("CWPZip");
    openapiRequiredFields.add("CalculatedAccuracyMeters");
    openapiRequiredFields.add("CensusBlockGroup");
    openapiRequiredFields.add("CertifiedDate");
    openapiRequiredFields.add("ChesapeakeBayFlag");
    openapiRequiredFields.add("CollectionMethod");
    openapiRequiredFields.add("ControlMeasure");
    openapiRequiredFields.add("ControlMeasureSchedule");
    openapiRequiredFields.add("CurrSvFlag");
    openapiRequiredFields.add("CurrVioFlag");
    openapiRequiredFields.add("DMRImpairedPoll");
    openapiRequiredFields.add("DMRPounds");
    openapiRequiredFields.add("DMRTwpe");
    openapiRequiredFields.add("DschToMs4");
    openapiRequiredFields.add("E90Exceeds1yr");
    openapiRequiredFields.add("E90Exceeds2yr");
    openapiRequiredFields.add("E90Exceeds3yr");
    openapiRequiredFields.add("E90Exceeds4yr");
    openapiRequiredFields.add("E90Exceeds5yr");
    openapiRequiredFields.add("E90Pollutants1yr");
    openapiRequiredFields.add("E90Pollutants2yr");
    openapiRequiredFields.add("E90Pollutants3yr");
    openapiRequiredFields.add("E90Pollutants4yr");
    openapiRequiredFields.add("E90Pollutants5yr");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("Ea5yrFlag");
    openapiRequiredFields.add("EffChartsFlag");
    openapiRequiredFields.add("EffExceeds");
    openapiRequiredFields.add("EjscreenFlag");
    openapiRequiredFields.add("EjscreenFlagUs");
    openapiRequiredFields.add("ElectrRptWaiverEffDate");
    openapiRequiredFields.add("ElectrRptWaiverExpDate");
    openapiRequiredFields.add("ElectrRptWaiverTypeCode");
    openapiRequiredFields.add("ElectrRptWaiverTypeDesc");
    openapiRequiredFields.add("ElectrSubmissionTypeCode");
    openapiRequiredFields.add("ElectrSubmissionTypeDesc");
    openapiRequiredFields.add("ExposedActivity");
    openapiRequiredFields.add("FacCountyName");
    openapiRequiredFields.add("FacDerivedHuc");
    openapiRequiredFields.add("FacDerivedTRIbes");
    openapiRequiredFields.add("FacDerivedWBD");
    openapiRequiredFields.add("FacDerivedWBDHu8");
    openapiRequiredFields.add("FacDerivedWBDHu8Name");
    openapiRequiredFields.add("FacDerivedWBDName");
    openapiRequiredFields.add("FacFIPSCode");
    openapiRequiredFields.add("FacFederalAgencyCode");
    openapiRequiredFields.add("FacFederalAgencyName");
    openapiRequiredFields.add("FacIndianCntryFlg");
    openapiRequiredFields.add("FacIndianSpatialFlg");
    openapiRequiredFields.add("FacMapFlg");
    openapiRequiredFields.add("FacMapIcon");
    openapiRequiredFields.add("FacPercentMinority");
    openapiRequiredFields.add("FacPopDen");
    openapiRequiredFields.add("FacStdCountyName");
    openapiRequiredFields.add("FacTRIPotwTrans");
    openapiRequiredFields.add("FacTRIReporter");
    openapiRequiredFields.add("FacTRISwRel");
    openapiRequiredFields.add("FacUsMexBorderFlg");
    openapiRequiredFields.add("HistoricCriterionCode");
    openapiRequiredFields.add("IndswFlag");
    openapiRequiredFields.add("Infea5yrFlag");
    openapiRequiredFields.add("Insp5yrFlag");
    openapiRequiredFields.add("InspDef5yrCnt");
    openapiRequiredFields.add("IssuingAgency");
    openapiRequiredFields.add("LastDMRValueRcvdDate");
    openapiRequiredFields.add("LimPollutant");
    openapiRequiredFields.add("Lower48");
    openapiRequiredFields.add("Map");
    openapiRequiredFields.add("MasterExternalPermitNmbr");
    openapiRequiredFields.add("MaxPctileUs");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("MissDMRQtrs");
    openapiRequiredFields.add("MsgpCorrectiveActionSmmry");
    openapiRequiredFields.add("MsgpFacilityInspctnSmmry");
    openapiRequiredFields.add("MsgpLastReportYear");
    openapiRequiredFields.add("MsgpNoFurtherRdctnRtnle");
    openapiRequiredFields.add("MsgpPermitType");
    openapiRequiredFields.add("MsgpVisualAssessmentSmmry");
    openapiRequiredFields.add("NPDESDataGroups");
    openapiRequiredFields.add("NPDESDataGroupsDescs");
    openapiRequiredFields.add("NPDESIDs");
    openapiRequiredFields.add("OtherPermitIDs");
    openapiRequiredFields.add("Over80CountUs");
    openapiRequiredFields.add("PastCalYrAverageFlow");
    openapiRequiredFields.add("PastCalYrConvPolOvrLmt");
    openapiRequiredFields.add("PastCalYrConvPollutants");
    openapiRequiredFields.add("PastCalYrToxicPolOvrLmt");
    openapiRequiredFields.add("PastCalYrToxicPollutants");
    openapiRequiredFields.add("PctileCancerUs");
    openapiRequiredFields.add("PctileDpmUs");
    openapiRequiredFields.add("PctileO3Us");
    openapiRequiredFields.add("PctilePctpre1960Us");
    openapiRequiredFields.add("PctilePmUs");
    openapiRequiredFields.add("PctileProximityNPDESUs");
    openapiRequiredFields.add("PctileProximityNplUs");
    openapiRequiredFields.add("PctileProximityRmpUs");
    openapiRequiredFields.add("PctileProximityTsdfUs");
    openapiRequiredFields.add("PctileRespUs");
    openapiRequiredFields.add("PctileTrafficScoreUs");
    openapiRequiredFields.add("PermitComponents");
    openapiRequiredFields.add("PermitName");
    openapiRequiredFields.add("PermittingAgency");
    openapiRequiredFields.add("PollWithViolation");
    openapiRequiredFields.add("RCRAIDs");
    openapiRequiredFields.add("RadGnisName");
    openapiRequiredFields.add("RadHu12Name");
    openapiRequiredFields.add("RadReachcode");
    openapiRequiredFields.add("RadWBDHu8");
    openapiRequiredFields.add("RadWBDHu8Name");
    openapiRequiredFields.add("RadWBDHuc12");
    openapiRequiredFields.add("ReceivingMs4Name");
    openapiRequiredFields.add("ReferencePoint");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("RmpIDs");
    openapiRequiredFields.add("SDWAIDs");
    openapiRequiredFields.add("Score");
    openapiRequiredFields.add("Sector");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("SpeciesCriticalHabitalFlag");
    openapiRequiredFields.add("StateAuthBiosolids");
    openapiRequiredFields.add("StateAuthFedfac");
    openapiRequiredFields.add("StateAuthGen");
    openapiRequiredFields.add("StateAuthNPDES");
    openapiRequiredFields.add("StateAuthPretreat");
    openapiRequiredFields.add("Statute");
    openapiRequiredFields.add("StormWaterArea");
    openapiRequiredFields.add("SubmittedDate");
    openapiRequiredFields.add("Subsector");
    openapiRequiredFields.add("SwpppUrl");
    openapiRequiredFields.add("TRIIDs");
    openapiRequiredFields.add("TRIbalFlag");
    openapiRequiredFields.add("TypeOfMonitoring");
    openapiRequiredFields.add("TypeOfWater");
    openapiRequiredFields.add("VioLastYear");
    openapiRequiredFields.add("ViolFlag");
    openapiRequiredFields.add("WebDocs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cwa10
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cwa10.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cwa10 is not found in the empty JSON string", Cwa10.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cwa10.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cwa10` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Cwa10.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AIRIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIDs").toString()));
      }
      if (!jsonObj.get("ActiveLower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActiveLower48").toString()));
      }
      if (!jsonObj.get("AlrExceedences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlrExceedences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlrExceedences").toString()));
      }
      if (!jsonObj.get("AssociatedPollutant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociatedPollutant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociatedPollutant").toString()));
      }
      if (!jsonObj.get("AttainsAquaticLifeUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsAquaticLifeUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsAquaticLifeUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsAuCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsAuCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsAuCategory").toString()));
      }
      if (!jsonObj.get("AttainsCauseGroups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsCauseGroups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsCauseGroups").toString()));
      }
      if (!jsonObj.get("AttainsCycleYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsCycleYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsCycleYear").toString()));
      }
      if (!jsonObj.get("AttainsExceptnlUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsExceptnlUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsExceptnlUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsImpWaterFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsImpWaterFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsImpWaterFlg").toString()));
      }
      if (!jsonObj.get("AttainsPossibleNPDESParams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsPossibleNPDESParams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsPossibleNPDESParams").toString()));
      }
      if (!jsonObj.get("AttainsRecreationUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsRecreationUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsRecreationUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsShellfishUseFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsShellfishUseFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsShellfishUseFlg").toString()));
      }
      if (!jsonObj.get("AttainsSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsSource").toString()));
      }
      if (!jsonObj.get("AttainsStateCauses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttainsStateCauses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttainsStateCauses").toString()));
      }
      if (!jsonObj.get("BeachCloseLast2yrsFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BeachCloseLast2yrsFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BeachCloseLast2yrsFlg").toString()));
      }
      if (!jsonObj.get("BeachCloseLastYearFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BeachCloseLastYearFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BeachCloseLastYearFlg").toString()));
      }
      if (!jsonObj.get("BioAnalyMethodCatgrys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethodCatgrys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethodCatgrys").toString()));
      }
      if (!jsonObj.get("BioAnalyMethodCatgrys2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethodCatgrys2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethodCatgrys2016").toString()));
      }
      if (!jsonObj.get("BioAnalyMethodCatgrys2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethodCatgrys2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethodCatgrys2017").toString()));
      }
      if (!jsonObj.get("BioAnalyMethods").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethods` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethods").toString()));
      }
      if (!jsonObj.get("BioAnalyMethods2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethods2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethods2016").toString()));
      }
      if (!jsonObj.get("BioAnalyMethods2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioAnalyMethods2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioAnalyMethods2017").toString()));
      }
      if (!jsonObj.get("BioCommentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioCommentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioCommentText").toString()));
      }
      if (!jsonObj.get("BioCommentText2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioCommentText2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioCommentText2016").toString()));
      }
      if (!jsonObj.get("BioCommentText2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioCommentText2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioCommentText2017").toString()));
      }
      if (!jsonObj.get("BioMgmtContainers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtContainers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtContainers").toString()));
      }
      if (!jsonObj.get("BioMgmtContainers2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtContainers2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtContainers2016").toString()));
      }
      if (!jsonObj.get("BioMgmtContainers2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtContainers2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtContainers2017").toString()));
      }
      if (!jsonObj.get("BioMgmtDefCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDefCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDefCategories").toString()));
      }
      if (!jsonObj.get("BioMgmtDefCategories2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDefCategories2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDefCategories2016").toString()));
      }
      if (!jsonObj.get("BioMgmtDefCategories2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDefCategories2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDefCategories2017").toString()));
      }
      if (!jsonObj.get("BioMgmtDeficiencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDeficiencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDeficiencies").toString()));
      }
      if (!jsonObj.get("BioMgmtDeficiencies2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDeficiencies2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDeficiencies2016").toString()));
      }
      if (!jsonObj.get("BioMgmtDeficiencies2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtDeficiencies2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtDeficiencies2017").toString()));
      }
      if (!jsonObj.get("BioMgmtHandlers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtHandlers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtHandlers").toString()));
      }
      if (!jsonObj.get("BioMgmtHandlers2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtHandlers2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtHandlers2016").toString()));
      }
      if (!jsonObj.get("BioMgmtHandlers2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtHandlers2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtHandlers2017").toString()));
      }
      if (!jsonObj.get("BioMgmtPathogens").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathogens` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathogens").toString()));
      }
      if (!jsonObj.get("BioMgmtPathogens2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathogens2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathogens2016").toString()));
      }
      if (!jsonObj.get("BioMgmtPathogens2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathogens2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathogens2017").toString()));
      }
      if (!jsonObj.get("BioMgmtPathreds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathreds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathreds").toString()));
      }
      if (!jsonObj.get("BioMgmtPathreds2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathreds2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathreds2016").toString()));
      }
      if (!jsonObj.get("BioMgmtPathreds2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPathreds2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPathreds2017").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceStypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceStypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceStypes").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceStypes2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceStypes2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceStypes2016").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceStypes2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceStypes2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceStypes2017").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceTypes").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceTypes2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceTypes2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceTypes2016").toString()));
      }
      if (!jsonObj.get("BioMgmtPrctceTypes2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtPrctceTypes2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtPrctceTypes2017").toString()));
      }
      if (!jsonObj.get("BioMgmtVectors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtVectors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtVectors").toString()));
      }
      if (!jsonObj.get("BioMgmtVectors2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtVectors2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtVectors2016").toString()));
      }
      if (!jsonObj.get("BioMgmtVectors2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioMgmtVectors2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioMgmtVectors2017").toString()));
      }
      if (!jsonObj.get("BioOtherMgmtPrctcTxts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioOtherMgmtPrctcTxts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioOtherMgmtPrctcTxts").toString()));
      }
      if (!jsonObj.get("BioOtherMgmtPrctcTxts2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioOtherMgmtPrctcTxts2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioOtherMgmtPrctcTxts2016").toString()));
      }
      if (!jsonObj.get("BioOtherMgmtPrctcTxts2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioOtherMgmtPrctcTxts2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioOtherMgmtPrctcTxts2017").toString()));
      }
      if (!jsonObj.get("BioReportDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportDate").toString()));
      }
      if (!jsonObj.get("BioReportDate2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportDate2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportDate2016").toString()));
      }
      if (!jsonObj.get("BioReportDate2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportDate2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportDate2017").toString()));
      }
      if (!jsonObj.get("BioReportYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportYear").toString()));
      }
      if (!jsonObj.get("BioReportYears").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportYears` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportYears").toString()));
      }
      if (!jsonObj.get("BioReportingObligations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportingObligations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportingObligations").toString()));
      }
      if (!jsonObj.get("BioReportingObligations2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportingObligations2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportingObligations2016").toString()));
      }
      if (!jsonObj.get("BioReportingObligations2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioReportingObligations2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioReportingObligations2017").toString()));
      }
      if (!jsonObj.get("BioTrmntPrcssCmntTxts2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrmntPrcssCmntTxts2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrmntPrcssCmntTxts2016").toString()));
      }
      if (!jsonObj.get("BioTrmntPrcssCmntTxts2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrmntPrcssCmntTxts2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrmntPrcssCmntTxts2017").toString()));
      }
      if (!jsonObj.get("BioTrtmntPrcssCmmntTxts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrtmntPrcssCmmntTxts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrtmntPrcssCmmntTxts").toString()));
      }
      if (!jsonObj.get("BioTrtmntProcesses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrtmntProcesses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrtmntProcesses").toString()));
      }
      if (!jsonObj.get("BioTrtmntProcesses2016").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrtmntProcesses2016` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrtmntProcesses2016").toString()));
      }
      if (!jsonObj.get("BioTrtmntProcesses2017").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioTrtmntProcesses2017` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioTrtmntProcesses2017").toString()));
      }
      if (!jsonObj.get("BioVioLastYearFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BioVioLastYearFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BioVioLastYearFlag").toString()));
      }
      if (!jsonObj.get("BiosolidsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BiosolidsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BiosolidsFlag").toString()));
      }
      if (!jsonObj.get("CWP13qtrsComplHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWP13qtrsComplHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWP13qtrsComplHistory").toString()));
      }
      if (!jsonObj.get("CWPCaseIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCaseIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCaseIDs").toString()));
      }
      if (!jsonObj.get("CWPCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCity").toString()));
      }
      if (!jsonObj.get("CWPComplianceTracking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPComplianceTracking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPComplianceTracking").toString()));
      }
      if (!jsonObj.get("CWPCounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCounty").toString()));
      }
      if (!jsonObj.get("CWPCsoFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCsoFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCsoFlag").toString()));
      }
      if (!jsonObj.get("CWPCsoOutfalls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPCsoOutfalls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPCsoOutfalls").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioFea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioFea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioFea").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioFeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioFeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioFeaEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioFeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioFeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioFeaSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioIea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioIea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioIea").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioIeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioIeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioIeaEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioIeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioIeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioIeaSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioInsp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioInsp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioInsp").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioInspEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioInspEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioInspEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioInspSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioInspSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioInspSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastBioPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastBioPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastBioPenalty").toString()));
      }
      if (!jsonObj.get("CWPDateLastFea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastFea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastFea").toString()));
      }
      if (!jsonObj.get("CWPDateLastFeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastFeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastFeaEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastFeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastFeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastFeaSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastIeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastIeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastIeaEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastIeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastIeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastIeaSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastInformalEa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastInformalEa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastInformalEa").toString()));
      }
      if (!jsonObj.get("CWPDateLastInspEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastInspEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastInspEPA").toString()));
      }
      if (!jsonObj.get("CWPDateLastInspSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastInspSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastInspSt").toString()));
      }
      if (!jsonObj.get("CWPDateLastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastInspection").toString()));
      }
      if (!jsonObj.get("CWPDateLastPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDateLastPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDateLastPenalty").toString()));
      }
      if (!jsonObj.get("CWPDaysLastBioInsp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPDaysLastBioInsp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPDaysLastBioInsp").toString()));
      }
      if (!jsonObj.get("CWPEPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPEPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPEPARegion").toString()));
      }
      if (!jsonObj.get("CWPEffectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPEffectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPEffectiveDate").toString()));
      }
      if (!jsonObj.get("CWPExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPExpirationDate").toString()));
      }
      if (!jsonObj.get("CWPFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPFIPSCode").toString()));
      }
      if (!jsonObj.get("CWPFacilityTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPFacilityTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPFacilityTypeCode").toString()));
      }
      if (!jsonObj.get("CWPFacilityTypeIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPFacilityTypeIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPFacilityTypeIndicator").toString()));
      }
      if (!jsonObj.get("CWPFormalEaCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPFormalEaCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPFormalEaCnt").toString()));
      }
      if (!jsonObj.get("CWPImpWaterFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPImpWaterFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPImpWaterFlg").toString()));
      }
      if (!jsonObj.get("CWPIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("CWPIssueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPIssueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPIssueDate").toString()));
      }
      if (!jsonObj.get("CWPMajorMinorStatusFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPMajorMinorStatusFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPMajorMinorStatusFlag").toString()));
      }
      if (!jsonObj.get("CWPNAICSCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPNAICSCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPNAICSCodes").toString()));
      }
      if (!jsonObj.get("CWPName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPName").toString()));
      }
      if (!jsonObj.get("CWPPermitStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitStatusCode").toString()));
      }
      if (!jsonObj.get("CWPPermitStatusDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitStatusDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitStatusDesc").toString()));
      }
      if (!jsonObj.get("CWPPermitTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitTypeCode").toString()));
      }
      if (!jsonObj.get("CWPPermitTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPPermitTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPPermitTypeDesc").toString()));
      }
      if (!jsonObj.get("CWPSICCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPSICCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPSICCodes").toString()));
      }
      if (!jsonObj.get("CWPSNCEventDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPSNCEventDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPSNCEventDesc").toString()));
      }
      if (!jsonObj.get("CWPSNCStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPSNCStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPSNCStatus").toString()));
      }
      if (!jsonObj.get("CWPSNCStatusDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPSNCStatusDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPSNCStatusDate").toString()));
      }
      if (!jsonObj.get("CWPState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPState").toString()));
      }
      if (!jsonObj.get("CWPStateDistrict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStateDistrict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStateDistrict").toString()));
      }
      if (!jsonObj.get("CWPStateWaterBodyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStateWaterBodyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStateWaterBodyCode").toString()));
      }
      if (!jsonObj.get("CWPStateWaterBodyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStateWaterBodyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStateWaterBodyName").toString()));
      }
      if (!jsonObj.get("CWPStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStatus").toString()));
      }
      if (!jsonObj.get("CWPStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPStreet").toString()));
      }
      if (!jsonObj.get("CWPTRIbalLandCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPTRIbalLandCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPTRIbalLandCode").toString()));
      }
      if (!jsonObj.get("CWPTerminationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPTerminationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPTerminationDate").toString()));
      }
      if (!jsonObj.get("CWPTotalPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPTotalPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPTotalPenalties").toString()));
      }
      if (!jsonObj.get("CWPVioStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPVioStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPVioStatus").toString()));
      }
      if (!jsonObj.get("CWPViolStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPViolStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPViolStatus").toString()));
      }
      if (!jsonObj.get("CWPZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWPZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWPZip").toString()));
      }
      if (!jsonObj.get("CensusBlockGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CensusBlockGroup").toString()));
      }
      if (!jsonObj.get("CertifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertifiedDate").toString()));
      }
      if (!jsonObj.get("ChesapeakeBayFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChesapeakeBayFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChesapeakeBayFlag").toString()));
      }
      if (!jsonObj.get("CollectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectionMethod").toString()));
      }
      if (!jsonObj.get("ControlMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ControlMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ControlMeasure").toString()));
      }
      if (!jsonObj.get("ControlMeasureSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ControlMeasureSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ControlMeasureSchedule").toString()));
      }
      if (!jsonObj.get("DMRImpairedPoll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DMRImpairedPoll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DMRImpairedPoll").toString()));
      }
      if (!jsonObj.get("DschToMs4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DschToMs4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DschToMs4").toString()));
      }
      if (!jsonObj.get("E90Exceeds1yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Exceeds1yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Exceeds1yr").toString()));
      }
      if (!jsonObj.get("E90Exceeds2yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Exceeds2yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Exceeds2yr").toString()));
      }
      if (!jsonObj.get("E90Exceeds3yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Exceeds3yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Exceeds3yr").toString()));
      }
      if (!jsonObj.get("E90Exceeds4yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Exceeds4yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Exceeds4yr").toString()));
      }
      if (!jsonObj.get("E90Exceeds5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Exceeds5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Exceeds5yr").toString()));
      }
      if (!jsonObj.get("E90Pollutants1yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Pollutants1yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Pollutants1yr").toString()));
      }
      if (!jsonObj.get("E90Pollutants2yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Pollutants2yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Pollutants2yr").toString()));
      }
      if (!jsonObj.get("E90Pollutants3yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Pollutants3yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Pollutants3yr").toString()));
      }
      if (!jsonObj.get("E90Pollutants4yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Pollutants4yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Pollutants4yr").toString()));
      }
      if (!jsonObj.get("E90Pollutants5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `E90Pollutants5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("E90Pollutants5yr").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("EffChartsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EffChartsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EffChartsFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlagUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlagUs").toString()));
      }
      if (!jsonObj.get("ElectrRptWaiverEffDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrRptWaiverEffDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrRptWaiverEffDate").toString()));
      }
      if (!jsonObj.get("ElectrRptWaiverExpDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrRptWaiverExpDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrRptWaiverExpDate").toString()));
      }
      if (!jsonObj.get("ElectrRptWaiverTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrRptWaiverTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrRptWaiverTypeCode").toString()));
      }
      if (!jsonObj.get("ElectrRptWaiverTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrRptWaiverTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrRptWaiverTypeDesc").toString()));
      }
      if (!jsonObj.get("ElectrSubmissionTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrSubmissionTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrSubmissionTypeCode").toString()));
      }
      if (!jsonObj.get("ElectrSubmissionTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectrSubmissionTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectrSubmissionTypeDesc").toString()));
      }
      if (!jsonObj.get("ExposedActivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExposedActivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExposedActivity").toString()));
      }
      if (!jsonObj.get("FacCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCountyName").toString()));
      }
      if (!jsonObj.get("FacDerivedHuc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedHuc").toString()));
      }
      if (!jsonObj.get("FacDerivedTRIbes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedTRIbes").toString()));
      }
      if (!jsonObj.get("FacDerivedWBD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBD").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDHu8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDHu8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDHu8").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDHu8Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDHu8Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDHu8Name").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDName").toString()));
      }
      if (!jsonObj.get("FacFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFIPSCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyName").toString()));
      }
      if (!jsonObj.get("FacIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("FacIndianSpatialFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianSpatialFlg").toString()));
      }
      if (!jsonObj.get("FacMapFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapFlg").toString()));
      }
      if (!jsonObj.get("FacMapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapIcon").toString()));
      }
      if (!jsonObj.get("FacStdCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacStdCountyName").toString()));
      }
      if (!jsonObj.get("FacTRIPotwTrans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIPotwTrans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIPotwTrans").toString()));
      }
      if (!jsonObj.get("FacTRIReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIReporter").toString()));
      }
      if (!jsonObj.get("FacTRISwRel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRISwRel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRISwRel").toString()));
      }
      if (!jsonObj.get("FacUsMexBorderFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacUsMexBorderFlg").toString()));
      }
      if (!jsonObj.get("HistoricCriterionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HistoricCriterionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HistoricCriterionCode").toString()));
      }
      if (!jsonObj.get("IndswFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndswFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndswFlag").toString()));
      }
      if (!jsonObj.get("IssuingAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssuingAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssuingAgency").toString()));
      }
      if (!jsonObj.get("LastDMRValueRcvdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastDMRValueRcvdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastDMRValueRcvdDate").toString()));
      }
      if (!jsonObj.get("LimPollutant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimPollutant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimPollutant").toString()));
      }
      if (!jsonObj.get("Lower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lower48").toString()));
      }
      if (!jsonObj.get("Map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Map").toString()));
      }
      if (!jsonObj.get("MasterExternalPermitNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MasterExternalPermitNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MasterExternalPermitNmbr").toString()));
      }
      if (!jsonObj.get("MsgpCorrectiveActionSmmry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpCorrectiveActionSmmry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpCorrectiveActionSmmry").toString()));
      }
      if (!jsonObj.get("MsgpFacilityInspctnSmmry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpFacilityInspctnSmmry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpFacilityInspctnSmmry").toString()));
      }
      if (!jsonObj.get("MsgpLastReportYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpLastReportYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpLastReportYear").toString()));
      }
      if (!jsonObj.get("MsgpNoFurtherRdctnRtnle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpNoFurtherRdctnRtnle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpNoFurtherRdctnRtnle").toString()));
      }
      if (!jsonObj.get("MsgpPermitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpPermitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpPermitType").toString()));
      }
      if (!jsonObj.get("MsgpVisualAssessmentSmmry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MsgpVisualAssessmentSmmry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MsgpVisualAssessmentSmmry").toString()));
      }
      if (!jsonObj.get("NPDESDataGroups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESDataGroups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESDataGroups").toString()));
      }
      if (!jsonObj.get("NPDESDataGroupsDescs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESDataGroupsDescs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESDataGroupsDescs").toString()));
      }
      if (!jsonObj.get("NPDESIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NPDESIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NPDESIDs").toString()));
      }
      if (!jsonObj.get("OtherPermitIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherPermitIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OtherPermitIDs").toString()));
      }
      if (!jsonObj.get("PastCalYrAverageFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PastCalYrAverageFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PastCalYrAverageFlow").toString()));
      }
      if (!jsonObj.get("PastCalYrConvPollutants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PastCalYrConvPollutants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PastCalYrConvPollutants").toString()));
      }
      if (!jsonObj.get("PastCalYrToxicPollutants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PastCalYrToxicPollutants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PastCalYrToxicPollutants").toString()));
      }
      if (!jsonObj.get("PermitComponents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermitComponents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermitComponents").toString()));
      }
      if (!jsonObj.get("PermitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermitName").toString()));
      }
      if (!jsonObj.get("PermittingAgency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermittingAgency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermittingAgency").toString()));
      }
      if (!jsonObj.get("PollWithViolation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PollWithViolation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PollWithViolation").toString()));
      }
      if (!jsonObj.get("RCRAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIDs").toString()));
      }
      if (!jsonObj.get("RadGnisName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadGnisName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadGnisName").toString()));
      }
      if (!jsonObj.get("RadHu12Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadHu12Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadHu12Name").toString()));
      }
      if (!jsonObj.get("RadReachcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadReachcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadReachcode").toString()));
      }
      if (!jsonObj.get("RadWBDHu8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadWBDHu8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadWBDHu8").toString()));
      }
      if (!jsonObj.get("RadWBDHu8Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadWBDHu8Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadWBDHu8Name").toString()));
      }
      if (!jsonObj.get("RadWBDHuc12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RadWBDHuc12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RadWBDHuc12").toString()));
      }
      if (!jsonObj.get("ReceivingMs4Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceivingMs4Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceivingMs4Name").toString()));
      }
      if (!jsonObj.get("ReferencePoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencePoint").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("RmpIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RmpIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RmpIDs").toString()));
      }
      if (!jsonObj.get("SDWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAIDs").toString()));
      }
      if (!jsonObj.get("Sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sector").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("SpeciesCriticalHabitalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpeciesCriticalHabitalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpeciesCriticalHabitalFlag").toString()));
      }
      if (!jsonObj.get("StateAuthBiosolids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAuthBiosolids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAuthBiosolids").toString()));
      }
      if (!jsonObj.get("StateAuthFedfac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAuthFedfac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAuthFedfac").toString()));
      }
      if (!jsonObj.get("StateAuthGen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAuthGen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAuthGen").toString()));
      }
      if (!jsonObj.get("StateAuthNPDES").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAuthNPDES` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAuthNPDES").toString()));
      }
      if (!jsonObj.get("StateAuthPretreat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAuthPretreat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAuthPretreat").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
      if (!jsonObj.get("StormWaterArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StormWaterArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StormWaterArea").toString()));
      }
      if (!jsonObj.get("SubmittedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubmittedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubmittedDate").toString()));
      }
      if (!jsonObj.get("Subsector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subsector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subsector").toString()));
      }
      if (!jsonObj.get("SwpppUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SwpppUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SwpppUrl").toString()));
      }
      if (!jsonObj.get("TRIIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIIDs").toString()));
      }
      if (!jsonObj.get("TypeOfMonitoring").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeOfMonitoring` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeOfMonitoring").toString()));
      }
      if (!jsonObj.get("TypeOfWater").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeOfWater` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeOfWater").toString()));
      }
      if (!jsonObj.get("WebDocs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebDocs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebDocs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cwa10.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cwa10' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cwa10> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cwa10.class));

       return (TypeAdapter<T>) new TypeAdapter<Cwa10>() {
           @Override
           public void write(JsonWriter out, Cwa10 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cwa10 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cwa10 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cwa10
   * @throws IOException if the JSON string is invalid with respect to Cwa10
   */
  public static Cwa10 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cwa10.class);
  }

  /**
   * Convert an instance of Cwa10 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

