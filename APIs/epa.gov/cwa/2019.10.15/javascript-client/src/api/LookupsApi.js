/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestLookupsBpTribesGet200Response from '../model/RestLookupsBpTribesGet200Response';
import RestLookupsCwaParametersGet200Response from '../model/RestLookupsCwaParametersGet200Response';
import RestLookupsCwaPollutantsGet200Response from '../model/RestLookupsCwaPollutantsGet200Response';
import RestLookupsFederalAgenciesGet200Response from '../model/RestLookupsFederalAgenciesGet200Response';
import RestLookupsIcisInspectionTypesGet200Response from '../model/RestLookupsIcisInspectionTypesGet200Response';
import RestLookupsIcisLawSectionsGet200Response from '../model/RestLookupsIcisLawSectionsGet200Response';
import RestLookupsNaicsCodesGet200Response from '../model/RestLookupsNaicsCodesGet200Response';
import RestLookupsNpdesParametersGet200Response from '../model/RestLookupsNpdesParametersGet200Response';
import RestLookupsWbdCodeLuGet200Response from '../model/RestLookupsWbdCodeLuGet200Response';
import RestLookupsWbdNameLuGet200Response from '../model/RestLookupsWbdNameLuGet200Response';

/**
* Lookups service.
* @module api/LookupsApi
* @version 2019.10.15
*/
export default class LookupsApi {

    /**
    * Constructs a new LookupsApi. 
    * @alias module:api/LookupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restLookupsBpTribesGet operation.
     * @callback module:api/LookupsApi~restLookupsBpTribesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsBpTribesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO BP Tribes Lookup Service
     * Returns the EPA Standard Indian Tribes and Native Alaskan Villages tribal_id and tribe_name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsBpTribesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsBpTribesGet200Response}
     */
    restLookupsBpTribesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsBpTribesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.bp_tribes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsBpTribesPost operation.
     * @callback module:api/LookupsApi~restLookupsBpTribesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsBpTribesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO BP Tribes Lookup Service
     * Returns the EPA Standard Indian Tribes and Native Alaskan Villages tribal_id and tribe_name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsBpTribesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsBpTribesGet200Response}
     */
    restLookupsBpTribesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsBpTribesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.bp_tribes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsCwaParametersGet operation.
     * @callback module:api/LookupsApi~restLookupsCwaParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsCwaParametersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO CWA Parameter Lookup Service
     * Look up Clean Water Act parameter codes and descriptions in the Integrated Compliance Information System - National Pollutant Discharge Elimination System (ICIS-NPDES) by code or term.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsCwaParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsCwaParametersGet200Response}
     */
    restLookupsCwaParametersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsCwaParametersGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.cwa_parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsCwaParametersPost operation.
     * @callback module:api/LookupsApi~restLookupsCwaParametersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsCwaParametersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO CWA Parameter Lookup Service
     * Look up Clean Water Act parameter codes and descriptions in the Integrated Compliance Information System - National Pollutant Discharge Elimination System (ICIS-NPDES) by code or term.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsCwaParametersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsCwaParametersGet200Response}
     */
    restLookupsCwaParametersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsCwaParametersGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.cwa_parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsCwaPollutantsGet operation.
     * @callback module:api/LookupsApi~restLookupsCwaPollutantsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsCwaPollutantsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO CWA Pollutants Lookup Service
     * Look up Clean Water Act pollutants by name
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsCwaPollutantsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsCwaPollutantsGet200Response}
     */
    restLookupsCwaPollutantsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsCwaPollutantsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.cwa_pollutants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsCwaPollutantsPost operation.
     * @callback module:api/LookupsApi~restLookupsCwaPollutantsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsCwaPollutantsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO CWA Pollutants Lookup Service
     * Look up Clean Water Act pollutants by name
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsCwaPollutantsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsCwaPollutantsGet200Response}
     */
    restLookupsCwaPollutantsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsCwaPollutantsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.cwa_pollutants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsFederalAgenciesGet operation.
     * @callback module:api/LookupsApi~restLookupsFederalAgenciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsFederalAgenciesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO Federal Agency Lookup Service
     * Look up Federal Agency Code
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsFederalAgenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsFederalAgenciesGet200Response}
     */
    restLookupsFederalAgenciesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsFederalAgenciesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.federal_agencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsFederalAgenciesPost operation.
     * @callback module:api/LookupsApi~restLookupsFederalAgenciesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsFederalAgenciesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO Federal Agency Lookup Service
     * Look up Federal Agency Code
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsFederalAgenciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsFederalAgenciesGet200Response}
     */
    restLookupsFederalAgenciesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsFederalAgenciesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.federal_agencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsIcisInspectionTypesGet operation.
     * @callback module:api/LookupsApi~restLookupsIcisInspectionTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisInspectionTypesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS NPDES Inspection Types Lookup Service
     * Returns the ICIS NPDES Compliance Monitoring Type Code and Description.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsIcisInspectionTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisInspectionTypesGet200Response}
     */
    restLookupsIcisInspectionTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisInspectionTypesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_inspection_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsIcisInspectionTypesPost operation.
     * @callback module:api/LookupsApi~restLookupsIcisInspectionTypesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisInspectionTypesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS NPDES Inspection Types Lookup Service
     * Returns the ICIS NPDES Compliance Monitoring Type Code and Description.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsIcisInspectionTypesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisInspectionTypesGet200Response}
     */
    restLookupsIcisInspectionTypesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisInspectionTypesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_inspection_types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsIcisLawSectionsGet operation.
     * @callback module:api/LookupsApi~restLookupsIcisLawSectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisLawSectionsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS NPDES Law Sections Lookup Service
     * Returns the ICIS NPDES Law Section Descriptions.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [statuteCode] 
     * @param {String} [statusFlag] 
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {Number} [sortOrder] 
     * @param {module:api/LookupsApi~restLookupsIcisLawSectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisLawSectionsGet200Response}
     */
    restLookupsIcisLawSectionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'statute_code': opts['statuteCode'],
        'status_flag': opts['statusFlag'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisLawSectionsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_law_sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsIcisLawSectionsPost operation.
     * @callback module:api/LookupsApi~restLookupsIcisLawSectionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisLawSectionsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS NPDES Law Sections Lookup Service
     * Returns the ICIS NPDES Law Section Descriptions.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [statuteCode] 
     * @param {String} [statusFlag] 
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {Number} [sortOrder] 
     * @param {module:api/LookupsApi~restLookupsIcisLawSectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisLawSectionsGet200Response}
     */
    restLookupsIcisLawSectionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'statute_code': opts['statuteCode'],
        'status_flag': opts['statusFlag'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode'],
        'sort_order': opts['sortOrder']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisLawSectionsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_law_sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsNaicsCodesGet operation.
     * @callback module:api/LookupsApi~restLookupsNaicsCodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsNaicsCodesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO NAICS Codes Lookup Service
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsNaicsCodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsNaicsCodesGet200Response}
     */
    restLookupsNaicsCodesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsNaicsCodesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.naics_codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsNaicsCodesPost operation.
     * @callback module:api/LookupsApi~restLookupsNaicsCodesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsNaicsCodesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO NAICS Codes Lookup Service
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {module:api/LookupsApi~restLookupsNaicsCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsNaicsCodesGet200Response}
     */
    restLookupsNaicsCodesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsNaicsCodesGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.naics_codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsNpdesParametersGet operation.
     * @callback module:api/LookupsApi~restLookupsNpdesParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsNpdesParametersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO NPDES Parameters Lookup Service
     * ICIS Limit Parameter Code and Name lookup based on the supply of a partial parameter name. (NPDES = National Pollutant Discharge Elimination System)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {module:api/LookupsApi~restLookupsNpdesParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsNpdesParametersGet200Response}
     */
    restLookupsNpdesParametersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsNpdesParametersGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.npdes_parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsNpdesParametersPost operation.
     * @callback module:api/LookupsApi~restLookupsNpdesParametersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsNpdesParametersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO NPDES Parameters Lookup Service
     * ICIS Limit Parameter Code and Name lookup based on the supply of a partial parameter name. (NPDES = National Pollutant Discharge Elimination System)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {module:api/LookupsApi~restLookupsNpdesParametersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsNpdesParametersGet200Response}
     */
    restLookupsNpdesParametersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'search_term': opts['searchTerm']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsNpdesParametersGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.npdes_parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsWbdCodeLuGet operation.
     * @callback module:api/LookupsApi~restLookupsWbdCodeLuGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsWbdCodeLuGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO WBD Code Lookup Service
     * USGS Watershed Boundary Dataset (WBD) Name lookup based on a supplied WBD Code and Watershed Level
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [wbdCode] Two-digit watershed code [Hydrologic Unit Code (HUC)].
     * @param {String} [wbdLevel] The number of digits of the watershed code [Hydrologic Unit Code (HUC)] returned in the ValueCode. Must be an even number between 4 and 12.
     * @param {module:api/LookupsApi~restLookupsWbdCodeLuGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsWbdCodeLuGet200Response}
     */
    restLookupsWbdCodeLuGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'wbd_code': opts['wbdCode'],
        'wbd_level': opts['wbdLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsWbdCodeLuGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.wbd_code_lu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsWbdCodeLuPost operation.
     * @callback module:api/LookupsApi~restLookupsWbdCodeLuPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsWbdCodeLuGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO WBD Code Lookup Service
     * USGS Watershed Boundary Dataset (WBD) Name lookup based on a supplied WBD Code and Watershed Level
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [wbdCode] Two-digit watershed code [Hydrologic Unit Code (HUC)].
     * @param {String} [wbdLevel] The number of digits of the watershed code [Hydrologic Unit Code (HUC)] returned in the ValueCode. Must be an even number between 4 and 12.
     * @param {module:api/LookupsApi~restLookupsWbdCodeLuPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsWbdCodeLuGet200Response}
     */
    restLookupsWbdCodeLuPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'wbd_code': opts['wbdCode'],
        'wbd_level': opts['wbdLevel']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsWbdCodeLuGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.wbd_code_lu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsWbdNameLuGet operation.
     * @callback module:api/LookupsApi~restLookupsWbdNameLuGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsWbdNameLuGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO WBD Name Lookup Service
     * USGS Watershed Boundary Dataset (WBD) Code lookup based on a supplied WBD Name and Watershed Level
     * @param {String} wbdName Watershed Name Filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [wbdLevel] The number of digits of the watershed code [Hydrologic Unit Code (HUC)] returned in the ValueCode. Must be an even number between 4 and 12.
     * @param {module:api/LookupsApi~restLookupsWbdNameLuGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsWbdNameLuGet200Response}
     */
    restLookupsWbdNameLuGet(wbdName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wbdName' is set
      if (wbdName === undefined || wbdName === null) {
        throw new Error("Missing the required parameter 'wbdName' when calling restLookupsWbdNameLuGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'wbd_name': wbdName,
        'wbd_level': opts['wbdLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsWbdNameLuGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.wbd_name_lu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsWbdNameLuPost operation.
     * @callback module:api/LookupsApi~restLookupsWbdNameLuPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsWbdNameLuGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO WBD Name Lookup Service
     * USGS Watershed Boundary Dataset (WBD) Code lookup based on a supplied WBD Name and Watershed Level
     * @param {String} wbdName Watershed Name Filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [wbdLevel] The number of digits of the watershed code [Hydrologic Unit Code (HUC)] returned in the ValueCode. Must be an even number between 4 and 12.
     * @param {module:api/LookupsApi~restLookupsWbdNameLuPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsWbdNameLuGet200Response}
     */
    restLookupsWbdNameLuPost(wbdName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wbdName' is set
      if (wbdName === undefined || wbdName === null) {
        throw new Error("Missing the required parameter 'wbdName' when calling restLookupsWbdNameLuPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'wbd_name': wbdName,
        'wbd_level': opts['wbdLevel']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsWbdNameLuGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.wbd_name_lu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
