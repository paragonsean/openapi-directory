/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Rlup01 from './Rlup01';

/**
 * The Rlup24 model module.
 * @module model/Rlup24
 * @version 2019.10.15
 */
class Rlup24 {
    /**
     * Constructs a new <code>Rlup24</code>.
     * Results Object
     * @alias module:model/Rlup24
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     */
    constructor(message) { 
        
        Rlup24.initialize(this, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message) { 
        obj['Message'] = message;
    }

    /**
     * Constructs a <code>Rlup24</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rlup24} obj Optional instance to populate.
     * @return {module:model/Rlup24} The populated <code>Rlup24</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rlup24();

            if (data.hasOwnProperty('LuValues')) {
                obj['LuValues'] = ApiClient.convertToType(data['LuValues'], [Rlup01]);
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rlup24</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rlup24</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rlup24.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['LuValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LuValues'])) {
                throw new Error("Expected the field `LuValues` to be an array in the JSON data but got " + data['LuValues']);
            }
            // validate the optional field `LuValues` (array)
            for (const item of data['LuValues']) {
                Rlup01.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }

        return true;
    }


}

Rlup24.RequiredProperties = ["Message"];

/**
 * @member {Array.<module:model/Rlup01>} LuValues
 */
Rlup24.prototype['LuValues'] = undefined;

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Rlup24.prototype['Message'] = undefined;






export default Rlup24;

