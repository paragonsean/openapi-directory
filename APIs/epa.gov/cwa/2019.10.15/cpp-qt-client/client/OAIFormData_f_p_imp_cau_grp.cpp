/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormData_f_p_imp_cau_grp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormData_f_p_imp_cau_grp::OAIFormData_f_p_imp_cau_grp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormData_f_p_imp_cau_grp::OAIFormData_f_p_imp_cau_grp() {
    this->initializeModel();
}

OAIFormData_f_p_imp_cau_grp::~OAIFormData_f_p_imp_cau_grp() {}

void OAIFormData_f_p_imp_cau_grp::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFormData_f_p_imp_cau_grp::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFormData_f_p_imp_cau_grp::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALGAL GROWTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::ALGAL_GROWTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMMONIA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::AMMONIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIOTOXINS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::BIOTOXINS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAUSE UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAUSE UNKNOWN - FISH KILLS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN_FISH_KILLS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAUSE UNKNOWN - IMPAIRED BIOTA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN_IMPAIRED_BIOTA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHLORINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::CHLORINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIOXINS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::DIOXINS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FISH CONSUMPTION ADVISORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::FISH_CONSUMPTION_ADVISORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLOW ALTERATION(S)", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::FLOW_ALTERATION_S_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HABITAT ALTERATIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::HABITAT_ALTERATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MERCURY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::MERCURY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METALS (OTHER THAN MERCURY)", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::METALS_OTHER_THAN_MERCURY_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOXIOUS AQUATIC PLANTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::NOXIOUS_AQUATIC_PLANTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUISANCE EXOTIC SPECIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::NUISANCE_EXOTIC_SPECIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUISANCE NATIVE SPECIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::NUISANCE_NATIVE_SPECIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUTRIENTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::NUTRIENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OIL AND GREASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::OIL_AND_GREASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORGANIC ENRICHMENT/OXYGEN DEPLETION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::ORGANIC_ENRICHMENT_OXYGEN_DEPLETION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER CAUSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::OTHER_CAUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PATHOGENS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::PATHOGENS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PESTICIDES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::PESTICIDES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PH/ACIDITY/CAUSTIC CONDITIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::PH_ACIDITY_CAUSTIC_CONDITIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POLYCHLORINATED BIPHENYLS (PCBS)", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::POLYCHLORINATED_BIPHENYLS_PCBS_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RADIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::RADIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SALINITY/TOTAL DISSOLVED SOLIDS/CHLORIDES/SULFATES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::SALINITY_TOTAL_DISSOLVED_SOLIDS_CHLORIDES_SULFATES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEDIMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::SEDIMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TASTE, COLOR AND ODOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TASTE_COLOR_AND_ODOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPERATURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TEMPERATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOTAL TOXICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TOTAL_TOXICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOXIC INORGANICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TOXIC_INORGANICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOXIC ORGANICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TOXIC_ORGANICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRASH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TRASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TURBIDITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormData_f_p_imp_cau_grp::TURBIDITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFormData_f_p_imp_cau_grp::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFormData_f_p_imp_cau_grp::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFormData_f_p_imp_cau_grp::ALGAL_GROWTH:
            val = "ALGAL GROWTH";
            break;
        case eOAIFormData_f_p_imp_cau_grp::AMMONIA:
            val = "AMMONIA";
            break;
        case eOAIFormData_f_p_imp_cau_grp::BIOTOXINS:
            val = "BIOTOXINS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN:
            val = "CAUSE UNKNOWN";
            break;
        case eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN_FISH_KILLS:
            val = "CAUSE UNKNOWN - FISH KILLS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::CAUSE_UNKNOWN_IMPAIRED_BIOTA:
            val = "CAUSE UNKNOWN - IMPAIRED BIOTA";
            break;
        case eOAIFormData_f_p_imp_cau_grp::CHLORINE:
            val = "CHLORINE";
            break;
        case eOAIFormData_f_p_imp_cau_grp::DIOXINS:
            val = "DIOXINS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::FISH_CONSUMPTION_ADVISORY:
            val = "FISH CONSUMPTION ADVISORY";
            break;
        case eOAIFormData_f_p_imp_cau_grp::FLOW_ALTERATION_S_:
            val = "FLOW ALTERATION(S)";
            break;
        case eOAIFormData_f_p_imp_cau_grp::HABITAT_ALTERATIONS:
            val = "HABITAT ALTERATIONS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::MERCURY:
            val = "MERCURY";
            break;
        case eOAIFormData_f_p_imp_cau_grp::METALS_OTHER_THAN_MERCURY_:
            val = "METALS (OTHER THAN MERCURY)";
            break;
        case eOAIFormData_f_p_imp_cau_grp::NOXIOUS_AQUATIC_PLANTS:
            val = "NOXIOUS AQUATIC PLANTS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::NUISANCE_EXOTIC_SPECIES:
            val = "NUISANCE EXOTIC SPECIES";
            break;
        case eOAIFormData_f_p_imp_cau_grp::NUISANCE_NATIVE_SPECIES:
            val = "NUISANCE NATIVE SPECIES";
            break;
        case eOAIFormData_f_p_imp_cau_grp::NUTRIENTS:
            val = "NUTRIENTS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::OIL_AND_GREASE:
            val = "OIL AND GREASE";
            break;
        case eOAIFormData_f_p_imp_cau_grp::ORGANIC_ENRICHMENT_OXYGEN_DEPLETION:
            val = "ORGANIC ENRICHMENT/OXYGEN DEPLETION";
            break;
        case eOAIFormData_f_p_imp_cau_grp::OTHER_CAUSE:
            val = "OTHER CAUSE";
            break;
        case eOAIFormData_f_p_imp_cau_grp::PATHOGENS:
            val = "PATHOGENS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::PESTICIDES:
            val = "PESTICIDES";
            break;
        case eOAIFormData_f_p_imp_cau_grp::PH_ACIDITY_CAUSTIC_CONDITIONS:
            val = "PH/ACIDITY/CAUSTIC CONDITIONS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::POLYCHLORINATED_BIPHENYLS_PCBS_:
            val = "POLYCHLORINATED BIPHENYLS (PCBS)";
            break;
        case eOAIFormData_f_p_imp_cau_grp::RADIATION:
            val = "RADIATION";
            break;
        case eOAIFormData_f_p_imp_cau_grp::SALINITY_TOTAL_DISSOLVED_SOLIDS_CHLORIDES_SULFATES:
            val = "SALINITY/TOTAL DISSOLVED SOLIDS/CHLORIDES/SULFATES";
            break;
        case eOAIFormData_f_p_imp_cau_grp::SEDIMENT:
            val = "SEDIMENT";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TASTE_COLOR_AND_ODOR:
            val = "TASTE, COLOR AND ODOR";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TEMPERATURE:
            val = "TEMPERATURE";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TOTAL_TOXICS:
            val = "TOTAL TOXICS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TOXIC_INORGANICS:
            val = "TOXIC INORGANICS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TOXIC_ORGANICS:
            val = "TOXIC ORGANICS";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TRASH:
            val = "TRASH";
            break;
        case eOAIFormData_f_p_imp_cau_grp::TURBIDITY:
            val = "TURBIDITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFormData_f_p_imp_cau_grp::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFormData_f_p_imp_cau_grp::eOAIFormData_f_p_imp_cau_grp OAIFormData_f_p_imp_cau_grp::getValue() const {
    return m_value;
}

void OAIFormData_f_p_imp_cau_grp::setValue(const OAIFormData_f_p_imp_cau_grp::eOAIFormData_f_p_imp_cau_grp& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFormData_f_p_imp_cau_grp::isSet() const {
    
    return m_value_isSet;
}

bool OAIFormData_f_p_imp_cau_grp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
