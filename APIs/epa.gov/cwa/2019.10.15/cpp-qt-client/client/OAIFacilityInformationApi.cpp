/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacilityInformationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFacilityInformationApi::OAIFacilityInformationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFacilityInformationApi::~OAIFacilityInformationApi() {
}

void OAIFacilityInformationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://echodata.epa.gov/echo"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("cwaRestServicesGetDownloadGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetDownloadGet", 0);
    _serverConfigs.insert("cwaRestServicesGetDownloadPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetDownloadPost", 0);
    _serverConfigs.insert("cwaRestServicesGetFacilitiesGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetFacilitiesGet", 0);
    _serverConfigs.insert("cwaRestServicesGetFacilitiesPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetFacilitiesPost", 0);
    _serverConfigs.insert("cwaRestServicesGetFacilityInfoGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetFacilityInfoGet", 0);
    _serverConfigs.insert("cwaRestServicesGetFacilityInfoPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetFacilityInfoPost", 0);
    _serverConfigs.insert("cwaRestServicesGetGeojsonGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetGeojsonGet", 0);
    _serverConfigs.insert("cwaRestServicesGetGeojsonPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetGeojsonPost", 0);
    _serverConfigs.insert("cwaRestServicesGetInfoClustersGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetInfoClustersGet", 0);
    _serverConfigs.insert("cwaRestServicesGetInfoClustersPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetInfoClustersPost", 0);
    _serverConfigs.insert("cwaRestServicesGetMapGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetMapGet", 0);
    _serverConfigs.insert("cwaRestServicesGetMapPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetMapPost", 0);
    _serverConfigs.insert("cwaRestServicesGetQidGet", defaultConf);
    _serverIndices.insert("cwaRestServicesGetQidGet", 0);
    _serverConfigs.insert("cwaRestServicesGetQidPost", defaultConf);
    _serverIndices.insert("cwaRestServicesGetQidPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFacilityInformationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFacilityInformationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFacilityInformationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFacilityInformationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFacilityInformationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFacilityInformationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFacilityInformationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFacilityInformationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFacilityInformationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFacilityInformationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFacilityInformationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFacilityInformationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFacilityInformationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFacilityInformationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFacilityInformationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFacilityInformationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFacilityInformationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFacilityInformationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFacilityInformationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetDownloadGet"][_serverIndices.value("cwaRestServicesGetDownloadGet")].URL()+"/cwa_rest_services.get_download");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetDownloadGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetDownloadGetSignal(output);
        Q_EMIT cwaRestServicesGetDownloadGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetDownloadGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetDownloadGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetDownloadGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetDownloadGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetDownloadPost"][_serverIndices.value("cwaRestServicesGetDownloadPost")].URL()+"/cwa_rest_services.get_download");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetDownloadPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetDownloadPostSignal(output);
        Q_EMIT cwaRestServicesGetDownloadPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetDownloadPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetDownloadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetDownloadPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetDownloadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_ff, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_iv, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp, const ::OpenAPI::OptionalParam<QString> &p_imp_pol, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_pstat, const ::OpenAPI::OptionalParam<QString> &p_ptype, const ::OpenAPI::OptionalParam<QString> &p_pcomp, const ::OpenAPI::OptionalParam<QString> &p_plimits, const ::OpenAPI::OptionalParam<QString> &p_pcss, const ::OpenAPI::OptionalParam<QString> &p_pexp, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_ipfti, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_pccs, const ::OpenAPI::OptionalParam<QString> &p_pexcd, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_dwd, const ::OpenAPI::OptionalParam<QString> &p_pt, const ::OpenAPI::OptionalParam<QString> &p_pdwdist, const ::OpenAPI::OptionalParam<QString> &p_pswdpc, const ::OpenAPI::OptionalParam<QString> &p_pswdmp, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswcas, const ::OpenAPI::OptionalParam<QString> &p_pswparam, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_radwbd, const ::OpenAPI::OptionalParam<QString> &p_frswbd, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<double> &p_months_last_dmr, const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within, const ::OpenAPI::OptionalParam<QString> &p_indsw, const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype, const ::OpenAPI::OptionalParam<QString> &p_mon_type, const ::OpenAPI::OptionalParam<QString> &p_iagency, const ::OpenAPI::OptionalParam<QString> &p_permitting_agency, const ::OpenAPI::OptionalParam<QString> &p_isws, const ::OpenAPI::OptionalParam<QString> &p_iswss, const ::OpenAPI::OptionalParam<QString> &p_iswss_id, const ::OpenAPI::OptionalParam<QString> &p_ds1, const ::OpenAPI::OptionalParam<QString> &p_ds2, const ::OpenAPI::OptionalParam<QString> &p_da1, const ::OpenAPI::OptionalParam<QString> &p_da2, const ::OpenAPI::OptionalParam<QString> &p_ms4, const ::OpenAPI::OptionalParam<QString> &p_oo_fn, const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype, const ::OpenAPI::OptionalParam<QString> &p_oo_sa, const ::OpenAPI::OptionalParam<QString> &p_oo_sa1, const ::OpenAPI::OptionalParam<QString> &p_oo_ct, const ::OpenAPI::OptionalParam<QString> &p_oo_st, const ::OpenAPI::OptionalParam<QString> &p_oo_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<double> &p_alrexceed, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<QString> &p_bio_flag, const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type, const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs, const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry, const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category, const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code, const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio, const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio, const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year, const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_vio_last_year, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_e90_count, const ::OpenAPI::OptionalParam<double> &p_e90_years, const ::OpenAPI::OptionalParam<QString> &p_psc) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetFacilitiesGet"][_serverIndices.value("cwaRestServicesGetFacilitiesGet")].URL()+"/cwa_rest_services.get_facilities");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fn")).append(querySuffix).append(QUrl::toPercentEncoding(p_fn.stringValue()));
    }
    if (p_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa.stringValue()));
    }
    if (p_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa1")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa1.stringValue()));
    }
    if (p_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ct", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ct")).append(querySuffix).append(QUrl::toPercentEncoding(p_ct.stringValue()));
    }
    if (p_co.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_co", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_co")).append(querySuffix).append(QUrl::toPercentEncoding(p_co.stringValue()));
    }
    if (p_fips.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fips", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fips")).append(querySuffix).append(QUrl::toPercentEncoding(p_fips.stringValue()));
    }
    if (p_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_st", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_st")).append(querySuffix).append(QUrl::toPercentEncoding(p_st.stringValue()));
    }
    if (p_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_zip.stringValue()));
    }
    if (p_frs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frs")).append(querySuffix).append(QUrl::toPercentEncoding(p_frs.stringValue()));
    }
    if (p_reg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_reg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_reg")).append(querySuffix).append(QUrl::toPercentEncoding(p_reg.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_ncs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ncs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ncs")).append(querySuffix).append(QUrl::toPercentEncoding(p_ncs.stringValue()));
    }
    if (p_pen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pen")).append(querySuffix).append(QUrl::toPercentEncoding(p_pen.stringValue()));
    }
    if (p_c1lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lat.stringValue()));
    }
    if (p_c1lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lon.stringValue()));
    }
    if (p_c2lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lat.stringValue()));
    }
    if (p_c2lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lon.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_sic2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic2")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic2.stringValue()));
    }
    if (p_sic4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic4")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic4.stringValue()));
    }
    if (p_fa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fa")).append(querySuffix).append(QUrl::toPercentEncoding(p_fa.stringValue()));
    }
    if (p_ff.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ff", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ff")).append(querySuffix).append(QUrl::toPercentEncoding(p_ff.stringValue()));
    }
    if (p_act.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_act", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_act")).append(querySuffix).append(QUrl::toPercentEncoding(p_act.stringValue()));
    }
    if (p_maj.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_maj", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_maj")).append(querySuffix).append(QUrl::toPercentEncoding(p_maj.stringValue()));
    }
    if (p_mact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mact")).append(querySuffix).append(QUrl::toPercentEncoding(p_mact.stringValue()));
    }
    if (p_fea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fea")).append(querySuffix).append(QUrl::toPercentEncoding(p_fea.stringValue()));
    }
    if (p_feay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feay")).append(querySuffix).append(QUrl::toPercentEncoding(p_feay.stringValue()));
    }
    if (p_feaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_feaa.stringValue()));
    }
    if (p_iea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iea")).append(querySuffix).append(QUrl::toPercentEncoding(p_iea.stringValue()));
    }
    if (p_ieay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieay")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieay.stringValue()));
    }
    if (p_ieaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieaa.stringValue()));
    }
    if (p_qiv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qiv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qiv")).append(querySuffix).append(QUrl::toPercentEncoding(p_qiv.stringValue()));
    }
    if (p_iv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iv")).append(querySuffix).append(QUrl::toPercentEncoding(p_iv.stringValue()));
    }
    if (p_impw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_impw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_impw")).append(querySuffix).append(QUrl::toPercentEncoding(p_impw.stringValue()));
    }
    if (p_imp_cau_grp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_imp_cau_grp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_imp_cau_grp")).append(querySuffix).append(QUrl::toPercentEncoding(p_imp_cau_grp.stringValue()));
    }
    if (p_imp_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_imp_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_imp_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_imp_pol.stringValue()));
    }
    if (p_trep.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_trep", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_trep")).append(querySuffix).append(QUrl::toPercentEncoding(p_trep.stringValue()));
    }
    if (p_pm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pm")).append(querySuffix).append(QUrl::toPercentEncoding(p_pm.stringValue()));
    }
    if (p_pd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pd.stringValue()));
    }
    if (p_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_ico.stringValue()));
    }
    if (p_huc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_huc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_huc")).append(querySuffix).append(QUrl::toPercentEncoding(p_huc.stringValue()));
    }
    if (p_pid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pid")).append(querySuffix).append(QUrl::toPercentEncoding(p_pid.stringValue()));
    }
    if (p_med.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_med", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_med")).append(querySuffix).append(QUrl::toPercentEncoding(p_med.stringValue()));
    }
    if (p_ysl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysl")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysl.stringValue()));
    }
    if (p_ysly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysly")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysly.stringValue()));
    }
    if (p_ysla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysla")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysla.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_sfs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sfs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sfs")).append(querySuffix).append(QUrl::toPercentEncoding(p_sfs.stringValue()));
    }
    if (p_tribeid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribeid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribeid")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribeid.stringValue()));
    }
    if (p_tribename.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribename", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribename")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribename.stringValue()));
    }
    if (p_tribedist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribedist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribedist")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribedist.stringValue()));
    }
    if (p_pstat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pstat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pstat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pstat.stringValue()));
    }
    if (p_ptype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ptype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ptype")).append(querySuffix).append(QUrl::toPercentEncoding(p_ptype.stringValue()));
    }
    if (p_pcomp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pcomp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pcomp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pcomp.stringValue()));
    }
    if (p_plimits.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_plimits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_plimits")).append(querySuffix).append(QUrl::toPercentEncoding(p_plimits.stringValue()));
    }
    if (p_pcss.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pcss", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pcss")).append(querySuffix).append(QUrl::toPercentEncoding(p_pcss.stringValue()));
    }
    if (p_pexp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pexp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pexp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pexp.stringValue()));
    }
    if (p_owop.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_owop", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_owop")).append(querySuffix).append(QUrl::toPercentEncoding(p_owop.stringValue()));
    }
    if (p_ipfti.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ipfti", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ipfti")).append(querySuffix).append(QUrl::toPercentEncoding(p_ipfti.stringValue()));
    }
    if (p_agoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_agoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_agoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_agoo.stringValue()));
    }
    if (p_idt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt1.stringValue()));
    }
    if (p_idt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt2.stringValue()));
    }
    if (p_pityp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pityp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pityp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pityp.stringValue()));
    }
    if (p_pfead1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead1")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead1.stringValue()));
    }
    if (p_pfead2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead2")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead2.stringValue()));
    }
    if (p_pfeat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfeat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfeat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfeat.stringValue()));
    }
    if (p_pccs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pccs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pccs")).append(querySuffix).append(QUrl::toPercentEncoding(p_pccs.stringValue()));
    }
    if (p_pexcd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pexcd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pexcd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pexcd.stringValue()));
    }
    if (p_psncq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psncq", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psncq")).append(querySuffix).append(QUrl::toPercentEncoding(p_psncq.stringValue()));
    }
    if (p_pctrack.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pctrack", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pctrack")).append(querySuffix).append(QUrl::toPercentEncoding(p_pctrack.stringValue()));
    }
    if (p_dwd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_dwd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_dwd")).append(querySuffix).append(QUrl::toPercentEncoding(p_dwd.stringValue()));
    }
    if (p_pt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pt")).append(querySuffix).append(QUrl::toPercentEncoding(p_pt.stringValue()));
    }
    if (p_pdwdist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pdwdist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pdwdist")).append(querySuffix).append(QUrl::toPercentEncoding(p_pdwdist.stringValue()));
    }
    if (p_pswdpc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswdpc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswdpc")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswdpc.stringValue()));
    }
    if (p_pswdmp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswdmp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswdmp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswdmp.stringValue()));
    }
    if (p_pswpol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswpol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswpol")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswpol.stringValue()));
    }
    if (p_pswcas.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswcas", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswcas")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswcas.stringValue()));
    }
    if (p_pswparam.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswparam", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswparam")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswparam.stringValue()));
    }
    if (p_pswvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswvio.stringValue()));
    }
    if (p_wbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_wbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_wbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_wbd.stringValue()));
    }
    if (p_radwbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radwbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radwbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_radwbd.stringValue()));
    }
    if (p_frswbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frswbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frswbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_frswbd.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_pidall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pidall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pidall")).append(querySuffix).append(QUrl::toPercentEncoding(p_pidall.stringValue()));
    }
    if (p_months_last_dmr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_months_last_dmr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_months_last_dmr")).append(querySuffix).append(QUrl::toPercentEncoding(p_months_last_dmr.stringValue()));
    }
    if (p_last_dmr_within.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_last_dmr_within", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_last_dmr_within")).append(querySuffix).append(QUrl::toPercentEncoding(p_last_dmr_within.stringValue()));
    }
    if (p_indsw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_indsw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_indsw")).append(querySuffix).append(QUrl::toPercentEncoding(p_indsw.stringValue()));
    }
    if (p_msgp_ptype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_msgp_ptype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_msgp_ptype")).append(querySuffix).append(QUrl::toPercentEncoding(p_msgp_ptype.stringValue()));
    }
    if (p_mon_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mon_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mon_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_mon_type.stringValue()));
    }
    if (p_iagency.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iagency", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iagency")).append(querySuffix).append(QUrl::toPercentEncoding(p_iagency.stringValue()));
    }
    if (p_permitting_agency.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_permitting_agency", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_permitting_agency")).append(querySuffix).append(QUrl::toPercentEncoding(p_permitting_agency.stringValue()));
    }
    if (p_isws.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_isws", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_isws")).append(querySuffix).append(QUrl::toPercentEncoding(p_isws.stringValue()));
    }
    if (p_iswss.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iswss", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iswss")).append(querySuffix).append(QUrl::toPercentEncoding(p_iswss.stringValue()));
    }
    if (p_iswss_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iswssID", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iswssID")).append(querySuffix).append(QUrl::toPercentEncoding(p_iswss_id.stringValue()));
    }
    if (p_ds1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ds1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ds1")).append(querySuffix).append(QUrl::toPercentEncoding(p_ds1.stringValue()));
    }
    if (p_ds2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ds2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ds2")).append(querySuffix).append(QUrl::toPercentEncoding(p_ds2.stringValue()));
    }
    if (p_da1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_da1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_da1")).append(querySuffix).append(QUrl::toPercentEncoding(p_da1.stringValue()));
    }
    if (p_da2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_da2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_da2")).append(querySuffix).append(QUrl::toPercentEncoding(p_da2.stringValue()));
    }
    if (p_ms4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_MS4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_MS4")).append(querySuffix).append(QUrl::toPercentEncoding(p_ms4.stringValue()));
    }
    if (p_oo_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooFN", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooFN")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_fn.stringValue()));
    }
    if (p_oo_f_ntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooFNtype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooFNtype")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_f_ntype.stringValue()));
    }
    if (p_oo_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSA", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSA")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_sa.stringValue()));
    }
    if (p_oo_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSA1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSA1")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_sa1.stringValue()));
    }
    if (p_oo_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooCt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooCt")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_ct.stringValue()));
    }
    if (p_oo_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSt")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_st.stringValue()));
    }
    if (p_oo_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooZip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooZip")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_zip.stringValue()));
    }
    if (p_fac_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_ico.stringValue()));
    }
    if (p_icoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_icoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_icoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_icoo.stringValue()));
    }
    if (p_fac_icos.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_icos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_icos")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_icos.stringValue()));
    }
    if (p_ejscreen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen.stringValue()));
    }
    if (p_alrexceed.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_alrexceed", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_alrexceed")).append(querySuffix).append(QUrl::toPercentEncoding(p_alrexceed.stringValue()));
    }
    if (p_limit_addr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_limit_addr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_limit_addr")).append(querySuffix).append(QUrl::toPercentEncoding(p_limit_addr.stringValue()));
    }
    if (p_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_lat.stringValue()));
    }
    if (p_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_long")).append(querySuffix).append(QUrl::toPercentEncoding(p_long.stringValue()));
    }
    if (p_radius.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radius", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radius")).append(querySuffix).append(QUrl::toPercentEncoding(p_radius.stringValue()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen_over80cnt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen_over80cnt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen_over80cnt.stringValue()));
    }
    if (p_bio_flag.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_flag", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_flag")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_flag.stringValue()));
    }
    if (p_bio_fac_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_fac_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_fac_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_fac_type.stringValue()));
    }
    if (p_bio_trtmnt_procs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_trtmnt_procs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_trtmnt_procs")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_trtmnt_procs.stringValue()));
    }
    if (p_bio_analy_method_catgry.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_analy_method_catgry", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_analy_method_catgry")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_analy_method_catgry.stringValue()));
    }
    if (p_bio_total_volume_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_total_volume_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_total_volume_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_total_volume_amt.stringValue()));
    }
    if (p_bio_mgmt_prctce_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_type.stringValue()));
    }
    if (p_bio_mgmt_prctce_stype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_stype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_stype")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_stype.stringValue()));
    }
    if (p_bio_mgmt_prctce_handler.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_handler", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_handler")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_handler.stringValue()));
    }
    if (p_bio_mgmt_container.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_container", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_container")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_container.stringValue()));
    }
    if (p_bio_mgmt_pathogen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_pathogen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_pathogen")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_pathogen.stringValue()));
    }
    if (p_bio_mgmt_pathred.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_pathred", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_pathred")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_pathred.stringValue()));
    }
    if (p_bio_mgmt_vector.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_vector", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_vector")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_vector.stringValue()));
    }
    if (p_bio_mgmt_def_category.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_def_category", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_def_category")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_def_category.stringValue()));
    }
    if (p_bio_mgmt_deficiencies.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_deficiencies", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_deficiencies")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_deficiencies.stringValue()));
    }
    if (p_bio_vio_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_vio_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_vio_code")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_vio_code.stringValue()));
    }
    if (p_bio_current_vio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_current_vio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_current_vio")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_current_vio.stringValue()));
    }
    if (p_bio_qtrs_in_vio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_qtrs_in_vio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_qtrs_in_vio")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_qtrs_in_vio.stringValue()));
    }
    if (p_bio_rpt_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_rpt_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_rpt_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_rpt_year.stringValue()));
    }
    if (p_bio_vio_last_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_vio_last_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_vio_last_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_vio_last_year.stringValue()));
    }
    if (p_msgp_rpt_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_msgp_rpt_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_msgp_rpt_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_msgp_rpt_year.stringValue()));
    }
    if (p_vio_last_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_vio_last_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_vio_last_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_vio_last_year.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (maplist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maplist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maplist")).append(querySuffix).append(QUrl::toPercentEncoding(maplist.stringValue()));
    }
    if (summarylist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "summarylist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("summarylist")).append(querySuffix).append(QUrl::toPercentEncoding(summarylist.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_e90_count.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_e90_count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_e90_count")).append(querySuffix).append(QUrl::toPercentEncoding(p_e90_count.stringValue()));
    }
    if (p_e90_years.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_e90_years", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_e90_years")).append(querySuffix).append(QUrl::toPercentEncoding(p_e90_years.stringValue()));
    }
    if (p_psc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psc")).append(querySuffix).append(QUrl::toPercentEncoding(p_psc.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetFacilitiesGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_facilities_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetFacilitiesGetSignal(output);
        Q_EMIT cwaRestServicesGetFacilitiesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetFacilitiesGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilitiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetFacilitiesGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilitiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_ff, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_iv, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp, const ::OpenAPI::OptionalParam<QString> &p_imp_pol, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_pstat, const ::OpenAPI::OptionalParam<QString> &p_ptype, const ::OpenAPI::OptionalParam<QString> &p_pcomp, const ::OpenAPI::OptionalParam<QString> &p_plimits, const ::OpenAPI::OptionalParam<QString> &p_pcss, const ::OpenAPI::OptionalParam<QString> &p_pexp, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_ipfti, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_pccs, const ::OpenAPI::OptionalParam<QString> &p_pexcd, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_dwd, const ::OpenAPI::OptionalParam<QString> &p_pt, const ::OpenAPI::OptionalParam<QString> &p_pdwdist, const ::OpenAPI::OptionalParam<QString> &p_pswdpc, const ::OpenAPI::OptionalParam<QString> &p_pswdmp, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswcas, const ::OpenAPI::OptionalParam<QString> &p_pswparam, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_radwbd, const ::OpenAPI::OptionalParam<QString> &p_frswbd, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<double> &p_months_last_dmr, const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within, const ::OpenAPI::OptionalParam<QString> &p_indsw, const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype, const ::OpenAPI::OptionalParam<QString> &p_mon_type, const ::OpenAPI::OptionalParam<QString> &p_iagency, const ::OpenAPI::OptionalParam<QString> &p_permitting_agency, const ::OpenAPI::OptionalParam<QString> &p_isws, const ::OpenAPI::OptionalParam<QString> &p_iswss, const ::OpenAPI::OptionalParam<QString> &p_iswss_id, const ::OpenAPI::OptionalParam<QString> &p_ds1, const ::OpenAPI::OptionalParam<QString> &p_ds2, const ::OpenAPI::OptionalParam<QString> &p_da1, const ::OpenAPI::OptionalParam<QString> &p_da2, const ::OpenAPI::OptionalParam<QString> &p_ms4, const ::OpenAPI::OptionalParam<QString> &p_oo_fn, const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype, const ::OpenAPI::OptionalParam<QString> &p_oo_sa, const ::OpenAPI::OptionalParam<QString> &p_oo_sa1, const ::OpenAPI::OptionalParam<QString> &p_oo_ct, const ::OpenAPI::OptionalParam<QString> &p_oo_st, const ::OpenAPI::OptionalParam<QString> &p_oo_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<double> &p_alrexceed, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<QString> &p_bio_flag, const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type, const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs, const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry, const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category, const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code, const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio, const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio, const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year, const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_vio_last_year, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &summarylist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_e90_count, const ::OpenAPI::OptionalParam<double> &p_e90_years, const ::OpenAPI::OptionalParam<QString> &p_psc) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetFacilitiesPost"][_serverIndices.value("cwaRestServicesGetFacilitiesPost")].URL()+"/cwa_rest_services.get_facilities");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_fn.hasValue())
    {
        input.add_var("p_fn", ::OpenAPI::toStringValue(p_fn.value()));
    }
    if (p_sa.hasValue())
    {
        input.add_var("p_sa", ::OpenAPI::toStringValue(p_sa.value()));
    }
    if (p_sa1.hasValue())
    {
        input.add_var("p_sa1", ::OpenAPI::toStringValue(p_sa1.value()));
    }
    if (p_ct.hasValue())
    {
        input.add_var("p_ct", ::OpenAPI::toStringValue(p_ct.value()));
    }
    if (p_co.hasValue())
    {
        input.add_var("p_co", ::OpenAPI::toStringValue(p_co.value()));
    }
    if (p_fips.hasValue())
    {
        input.add_var("p_fips", ::OpenAPI::toStringValue(p_fips.value()));
    }
    if (p_st.hasValue())
    {
        input.add_var("p_st", ::OpenAPI::toStringValue(p_st.value()));
    }
    if (p_zip.hasValue())
    {
        input.add_var("p_zip", ::OpenAPI::toStringValue(p_zip.value()));
    }
    if (p_frs.hasValue())
    {
        input.add_var("p_frs", ::OpenAPI::toStringValue(p_frs.value()));
    }
    if (p_reg.hasValue())
    {
        input.add_var("p_reg", ::OpenAPI::toStringValue(p_reg.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_ncs.hasValue())
    {
        input.add_var("p_ncs", ::OpenAPI::toStringValue(p_ncs.value()));
    }
    if (p_pen.hasValue())
    {
        input.add_var("p_pen", ::OpenAPI::toStringValue(p_pen.value()));
    }
    if (p_c1lat.hasValue())
    {
        input.add_var("p_c1lat", ::OpenAPI::toStringValue(p_c1lat.value()));
    }
    if (p_c1lon.hasValue())
    {
        input.add_var("p_c1lon", ::OpenAPI::toStringValue(p_c1lon.value()));
    }
    if (p_c2lat.hasValue())
    {
        input.add_var("p_c2lat", ::OpenAPI::toStringValue(p_c2lat.value()));
    }
    if (p_c2lon.hasValue())
    {
        input.add_var("p_c2lon", ::OpenAPI::toStringValue(p_c2lon.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_sic2.hasValue())
    {
        input.add_var("p_sic2", ::OpenAPI::toStringValue(p_sic2.value()));
    }
    if (p_sic4.hasValue())
    {
        input.add_var("p_sic4", ::OpenAPI::toStringValue(p_sic4.value()));
    }
    if (p_fa.hasValue())
    {
        input.add_var("p_fa", ::OpenAPI::toStringValue(p_fa.value()));
    }
    if (p_ff.hasValue())
    {
        input.add_var("p_ff", ::OpenAPI::toStringValue(p_ff.value()));
    }
    if (p_act.hasValue())
    {
        input.add_var("p_act", ::OpenAPI::toStringValue(p_act.value()));
    }
    if (p_maj.hasValue())
    {
        input.add_var("p_maj", ::OpenAPI::toStringValue(p_maj.value()));
    }
    if (p_mact.hasValue())
    {
        input.add_var("p_mact", ::OpenAPI::toStringValue(p_mact.value()));
    }
    if (p_fea.hasValue())
    {
        input.add_var("p_fea", ::OpenAPI::toStringValue(p_fea.value()));
    }
    if (p_feay.hasValue())
    {
        input.add_var("p_feay", ::OpenAPI::toStringValue(p_feay.value()));
    }
    if (p_feaa.hasValue())
    {
        input.add_var("p_feaa", ::OpenAPI::toStringValue(p_feaa.value()));
    }
    if (p_iea.hasValue())
    {
        input.add_var("p_iea", ::OpenAPI::toStringValue(p_iea.value()));
    }
    if (p_ieay.hasValue())
    {
        input.add_var("p_ieay", ::OpenAPI::toStringValue(p_ieay.value()));
    }
    if (p_ieaa.hasValue())
    {
        input.add_var("p_ieaa", ::OpenAPI::toStringValue(p_ieaa.value()));
    }
    if (p_qiv.hasValue())
    {
        input.add_var("p_qiv", ::OpenAPI::toStringValue(p_qiv.value()));
    }
    if (p_iv.hasValue())
    {
        input.add_var("p_iv", ::OpenAPI::toStringValue(p_iv.value()));
    }
    if (p_impw.hasValue())
    {
        input.add_var("p_impw", ::OpenAPI::toStringValue(p_impw.value()));
    }
    if (p_imp_cau_grp.hasValue())
    {
        input.add_var("p_imp_cau_grp", ::OpenAPI::toStringValue(p_imp_cau_grp.value()));
    }
    if (p_imp_pol.hasValue())
    {
        input.add_var("p_imp_pol", ::OpenAPI::toStringValue(p_imp_pol.value()));
    }
    if (p_trep.hasValue())
    {
        input.add_var("p_trep", ::OpenAPI::toStringValue(p_trep.value()));
    }
    if (p_pm.hasValue())
    {
        input.add_var("p_pm", ::OpenAPI::toStringValue(p_pm.value()));
    }
    if (p_pd.hasValue())
    {
        input.add_var("p_pd", ::OpenAPI::toStringValue(p_pd.value()));
    }
    if (p_ico.hasValue())
    {
        input.add_var("p_ico", ::OpenAPI::toStringValue(p_ico.value()));
    }
    if (p_huc.hasValue())
    {
        input.add_var("p_huc", ::OpenAPI::toStringValue(p_huc.value()));
    }
    if (p_pid.hasValue())
    {
        input.add_var("p_pid", ::OpenAPI::toStringValue(p_pid.value()));
    }
    if (p_med.hasValue())
    {
        input.add_var("p_med", ::OpenAPI::toStringValue(p_med.value()));
    }
    if (p_ysl.hasValue())
    {
        input.add_var("p_ysl", ::OpenAPI::toStringValue(p_ysl.value()));
    }
    if (p_ysly.hasValue())
    {
        input.add_var("p_ysly", ::OpenAPI::toStringValue(p_ysly.value()));
    }
    if (p_ysla.hasValue())
    {
        input.add_var("p_ysla", ::OpenAPI::toStringValue(p_ysla.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_sfs.hasValue())
    {
        input.add_var("p_sfs", ::OpenAPI::toStringValue(p_sfs.value()));
    }
    if (p_tribeid.hasValue())
    {
        input.add_var("p_tribeid", ::OpenAPI::toStringValue(p_tribeid.value()));
    }
    if (p_tribename.hasValue())
    {
        input.add_var("p_tribename", ::OpenAPI::toStringValue(p_tribename.value()));
    }
    if (p_tribedist.hasValue())
    {
        input.add_var("p_tribedist", ::OpenAPI::toStringValue(p_tribedist.value()));
    }
    if (p_pstat.hasValue())
    {
        input.add_var("p_pstat", ::OpenAPI::toStringValue(p_pstat.value()));
    }
    if (p_ptype.hasValue())
    {
        input.add_var("p_ptype", ::OpenAPI::toStringValue(p_ptype.value()));
    }
    if (p_pcomp.hasValue())
    {
        input.add_var("p_pcomp", ::OpenAPI::toStringValue(p_pcomp.value()));
    }
    if (p_plimits.hasValue())
    {
        input.add_var("p_plimits", ::OpenAPI::toStringValue(p_plimits.value()));
    }
    if (p_pcss.hasValue())
    {
        input.add_var("p_pcss", ::OpenAPI::toStringValue(p_pcss.value()));
    }
    if (p_pexp.hasValue())
    {
        input.add_var("p_pexp", ::OpenAPI::toStringValue(p_pexp.value()));
    }
    if (p_owop.hasValue())
    {
        input.add_var("p_owop", ::OpenAPI::toStringValue(p_owop.value()));
    }
    if (p_ipfti.hasValue())
    {
        input.add_var("p_ipfti", ::OpenAPI::toStringValue(p_ipfti.value()));
    }
    if (p_agoo.hasValue())
    {
        input.add_var("p_agoo", ::OpenAPI::toStringValue(p_agoo.value()));
    }
    if (p_idt1.hasValue())
    {
        input.add_var("p_idt1", ::OpenAPI::toStringValue(p_idt1.value()));
    }
    if (p_idt2.hasValue())
    {
        input.add_var("p_idt2", ::OpenAPI::toStringValue(p_idt2.value()));
    }
    if (p_pityp.hasValue())
    {
        input.add_var("p_pityp", ::OpenAPI::toStringValue(p_pityp.value()));
    }
    if (p_pfead1.hasValue())
    {
        input.add_var("p_pfead1", ::OpenAPI::toStringValue(p_pfead1.value()));
    }
    if (p_pfead2.hasValue())
    {
        input.add_var("p_pfead2", ::OpenAPI::toStringValue(p_pfead2.value()));
    }
    if (p_pfeat.hasValue())
    {
        input.add_var("p_pfeat", ::OpenAPI::toStringValue(p_pfeat.value()));
    }
    if (p_pccs.hasValue())
    {
        input.add_var("p_pccs", ::OpenAPI::toStringValue(p_pccs.value()));
    }
    if (p_pexcd.hasValue())
    {
        input.add_var("p_pexcd", ::OpenAPI::toStringValue(p_pexcd.value()));
    }
    if (p_psncq.hasValue())
    {
        input.add_var("p_psncq", ::OpenAPI::toStringValue(p_psncq.value()));
    }
    if (p_pctrack.hasValue())
    {
        input.add_var("p_pctrack", ::OpenAPI::toStringValue(p_pctrack.value()));
    }
    if (p_dwd.hasValue())
    {
        input.add_var("p_dwd", ::OpenAPI::toStringValue(p_dwd.value()));
    }
    if (p_pt.hasValue())
    {
        input.add_var("p_pt", ::OpenAPI::toStringValue(p_pt.value()));
    }
    if (p_pdwdist.hasValue())
    {
        input.add_var("p_pdwdist", ::OpenAPI::toStringValue(p_pdwdist.value()));
    }
    if (p_pswdpc.hasValue())
    {
        input.add_var("p_pswdpc", ::OpenAPI::toStringValue(p_pswdpc.value()));
    }
    if (p_pswdmp.hasValue())
    {
        input.add_var("p_pswdmp", ::OpenAPI::toStringValue(p_pswdmp.value()));
    }
    if (p_pswpol.hasValue())
    {
        input.add_var("p_pswpol", ::OpenAPI::toStringValue(p_pswpol.value()));
    }
    if (p_pswcas.hasValue())
    {
        input.add_var("p_pswcas", ::OpenAPI::toStringValue(p_pswcas.value()));
    }
    if (p_pswparam.hasValue())
    {
        input.add_var("p_pswparam", ::OpenAPI::toStringValue(p_pswparam.value()));
    }
    if (p_pswvio.hasValue())
    {
        input.add_var("p_pswvio", ::OpenAPI::toStringValue(p_pswvio.value()));
    }
    if (p_wbd.hasValue())
    {
        input.add_var("p_wbd", ::OpenAPI::toStringValue(p_wbd.value()));
    }
    if (p_radwbd.hasValue())
    {
        input.add_var("p_radwbd", ::OpenAPI::toStringValue(p_radwbd.value()));
    }
    if (p_frswbd.hasValue())
    {
        input.add_var("p_frswbd", ::OpenAPI::toStringValue(p_frswbd.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_pidall.hasValue())
    {
        input.add_var("p_pidall", ::OpenAPI::toStringValue(p_pidall.value()));
    }
    if (p_months_last_dmr.hasValue())
    {
        input.add_var("p_months_last_dmr", ::OpenAPI::toStringValue(p_months_last_dmr.value()));
    }
    if (p_last_dmr_within.hasValue())
    {
        input.add_var("p_last_dmr_within", ::OpenAPI::toStringValue(p_last_dmr_within.value()));
    }
    if (p_indsw.hasValue())
    {
        input.add_var("p_indsw", ::OpenAPI::toStringValue(p_indsw.value()));
    }
    if (p_msgp_ptype.hasValue())
    {
        input.add_var("p_msgp_ptype", ::OpenAPI::toStringValue(p_msgp_ptype.value()));
    }
    if (p_mon_type.hasValue())
    {
        input.add_var("p_mon_type", ::OpenAPI::toStringValue(p_mon_type.value()));
    }
    if (p_iagency.hasValue())
    {
        input.add_var("p_iagency", ::OpenAPI::toStringValue(p_iagency.value()));
    }
    if (p_permitting_agency.hasValue())
    {
        input.add_var("p_permitting_agency", ::OpenAPI::toStringValue(p_permitting_agency.value()));
    }
    if (p_isws.hasValue())
    {
        input.add_var("p_isws", ::OpenAPI::toStringValue(p_isws.value()));
    }
    if (p_iswss.hasValue())
    {
        input.add_var("p_iswss", ::OpenAPI::toStringValue(p_iswss.value()));
    }
    if (p_iswss_id.hasValue())
    {
        input.add_var("p_iswssID", ::OpenAPI::toStringValue(p_iswss_id.value()));
    }
    if (p_ds1.hasValue())
    {
        input.add_var("p_ds1", ::OpenAPI::toStringValue(p_ds1.value()));
    }
    if (p_ds2.hasValue())
    {
        input.add_var("p_ds2", ::OpenAPI::toStringValue(p_ds2.value()));
    }
    if (p_da1.hasValue())
    {
        input.add_var("p_da1", ::OpenAPI::toStringValue(p_da1.value()));
    }
    if (p_da2.hasValue())
    {
        input.add_var("p_da2", ::OpenAPI::toStringValue(p_da2.value()));
    }
    if (p_ms4.hasValue())
    {
        input.add_var("p_MS4", ::OpenAPI::toStringValue(p_ms4.value()));
    }
    if (p_oo_fn.hasValue())
    {
        input.add_var("p_ooFN", ::OpenAPI::toStringValue(p_oo_fn.value()));
    }
    if (p_oo_f_ntype.hasValue())
    {
        input.add_var("p_ooFNtype", ::OpenAPI::toStringValue(p_oo_f_ntype.value()));
    }
    if (p_oo_sa.hasValue())
    {
        input.add_var("p_ooSA", ::OpenAPI::toStringValue(p_oo_sa.value()));
    }
    if (p_oo_sa1.hasValue())
    {
        input.add_var("p_ooSA1", ::OpenAPI::toStringValue(p_oo_sa1.value()));
    }
    if (p_oo_ct.hasValue())
    {
        input.add_var("p_ooCt", ::OpenAPI::toStringValue(p_oo_ct.value()));
    }
    if (p_oo_st.hasValue())
    {
        input.add_var("p_ooSt", ::OpenAPI::toStringValue(p_oo_st.value()));
    }
    if (p_oo_zip.hasValue())
    {
        input.add_var("p_ooZip", ::OpenAPI::toStringValue(p_oo_zip.value()));
    }
    if (p_fac_ico.hasValue())
    {
        input.add_var("p_fac_ico", ::OpenAPI::toStringValue(p_fac_ico.value()));
    }
    if (p_icoo.hasValue())
    {
        input.add_var("p_icoo", ::OpenAPI::toStringValue(p_icoo.value()));
    }
    if (p_fac_icos.hasValue())
    {
        input.add_var("p_fac_icos", ::OpenAPI::toStringValue(p_fac_icos.value()));
    }
    if (p_ejscreen.hasValue())
    {
        input.add_var("p_ejscreen", ::OpenAPI::toStringValue(p_ejscreen.value()));
    }
    if (p_alrexceed.hasValue())
    {
        input.add_var("p_alrexceed", ::OpenAPI::toStringValue(p_alrexceed.value()));
    }
    if (p_limit_addr.hasValue())
    {
        input.add_var("p_limit_addr", ::OpenAPI::toStringValue(p_limit_addr.value()));
    }
    if (p_lat.hasValue())
    {
        input.add_var("p_lat", ::OpenAPI::toStringValue(p_lat.value()));
    }
    if (p_long.hasValue())
    {
        input.add_var("p_long", ::OpenAPI::toStringValue(p_long.value()));
    }
    if (p_radius.hasValue())
    {
        input.add_var("p_radius", ::OpenAPI::toStringValue(p_radius.value()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        input.add_var("p_ejscreen_over80cnt", ::OpenAPI::toStringValue(p_ejscreen_over80cnt.value()));
    }
    if (p_bio_flag.hasValue())
    {
        input.add_var("p_bio_flag", ::OpenAPI::toStringValue(p_bio_flag.value()));
    }
    if (p_bio_fac_type.hasValue())
    {
        input.add_var("p_bio_fac_type", ::OpenAPI::toStringValue(p_bio_fac_type.value()));
    }
    if (p_bio_trtmnt_procs.hasValue())
    {
        input.add_var("p_bio_trtmnt_procs", ::OpenAPI::toStringValue(p_bio_trtmnt_procs.value()));
    }
    if (p_bio_analy_method_catgry.hasValue())
    {
        input.add_var("p_bio_analy_method_catgry", ::OpenAPI::toStringValue(p_bio_analy_method_catgry.value()));
    }
    if (p_bio_total_volume_amt.hasValue())
    {
        input.add_var("p_bio_total_volume_amt", ::OpenAPI::toStringValue(p_bio_total_volume_amt.value()));
    }
    if (p_bio_mgmt_prctce_type.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_type", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_type.value()));
    }
    if (p_bio_mgmt_prctce_stype.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_stype", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_stype.value()));
    }
    if (p_bio_mgmt_prctce_handler.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_handler", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_handler.value()));
    }
    if (p_bio_mgmt_container.hasValue())
    {
        input.add_var("p_bio_mgmt_container", ::OpenAPI::toStringValue(p_bio_mgmt_container.value()));
    }
    if (p_bio_mgmt_pathogen.hasValue())
    {
        input.add_var("p_bio_mgmt_pathogen", ::OpenAPI::toStringValue(p_bio_mgmt_pathogen.value()));
    }
    if (p_bio_mgmt_pathred.hasValue())
    {
        input.add_var("p_bio_mgmt_pathred", ::OpenAPI::toStringValue(p_bio_mgmt_pathred.value()));
    }
    if (p_bio_mgmt_vector.hasValue())
    {
        input.add_var("p_bio_mgmt_vector", ::OpenAPI::toStringValue(p_bio_mgmt_vector.value()));
    }
    if (p_bio_mgmt_def_category.hasValue())
    {
        input.add_var("p_bio_mgmt_def_category", ::OpenAPI::toStringValue(p_bio_mgmt_def_category.value()));
    }
    if (p_bio_mgmt_deficiencies.hasValue())
    {
        input.add_var("p_bio_mgmt_deficiencies", ::OpenAPI::toStringValue(p_bio_mgmt_deficiencies.value()));
    }
    if (p_bio_vio_code.hasValue())
    {
        input.add_var("p_bio_vio_code", ::OpenAPI::toStringValue(p_bio_vio_code.value()));
    }
    if (p_bio_current_vio.hasValue())
    {
        input.add_var("p_bio_current_vio", ::OpenAPI::toStringValue(p_bio_current_vio.value()));
    }
    if (p_bio_qtrs_in_vio.hasValue())
    {
        input.add_var("p_bio_qtrs_in_vio", ::OpenAPI::toStringValue(p_bio_qtrs_in_vio.value()));
    }
    if (p_bio_rpt_year.hasValue())
    {
        input.add_var("p_bio_rpt_year", ::OpenAPI::toStringValue(p_bio_rpt_year.value()));
    }
    if (p_bio_vio_last_year.hasValue())
    {
        input.add_var("p_bio_vio_last_year", ::OpenAPI::toStringValue(p_bio_vio_last_year.value()));
    }
    if (p_msgp_rpt_year.hasValue())
    {
        input.add_var("p_msgp_rpt_year", ::OpenAPI::toStringValue(p_msgp_rpt_year.value()));
    }
    if (p_vio_last_year.hasValue())
    {
        input.add_var("p_vio_last_year", ::OpenAPI::toStringValue(p_vio_last_year.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (maplist.hasValue())
    {
        input.add_var("maplist", ::OpenAPI::toStringValue(maplist.value()));
    }
    if (summarylist.hasValue())
    {
        input.add_var("summarylist", ::OpenAPI::toStringValue(summarylist.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_e90_count.hasValue())
    {
        input.add_var("p_e90_count", ::OpenAPI::toStringValue(p_e90_count.value()));
    }
    if (p_e90_years.hasValue())
    {
        input.add_var("p_e90_years", ::OpenAPI::toStringValue(p_e90_years.value()));
    }
    if (p_psc.hasValue())
    {
        input.add_var("p_psc", ::OpenAPI::toStringValue(p_psc.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetFacilitiesPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_facilities_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetFacilitiesPostSignal(output);
        Q_EMIT cwaRestServicesGetFacilitiesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetFacilitiesPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilitiesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetFacilitiesPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilitiesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<double> &xmin, const ::OpenAPI::OptionalParam<double> &ymin, const ::OpenAPI::OptionalParam<double> &xmax, const ::OpenAPI::OptionalParam<double> &ymax, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_ff, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_iv, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_imp_pol, const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_pstat, const ::OpenAPI::OptionalParam<QString> &p_ptype, const ::OpenAPI::OptionalParam<QString> &p_pcomp, const ::OpenAPI::OptionalParam<QString> &p_plimits, const ::OpenAPI::OptionalParam<QString> &p_pcss, const ::OpenAPI::OptionalParam<QString> &p_pexp, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_ipfti, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_pccs, const ::OpenAPI::OptionalParam<QString> &p_pexcd, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_dwd, const ::OpenAPI::OptionalParam<QString> &p_pt, const ::OpenAPI::OptionalParam<QString> &p_pdwdist, const ::OpenAPI::OptionalParam<QString> &p_pswdpc, const ::OpenAPI::OptionalParam<QString> &p_pswdmp, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswcas, const ::OpenAPI::OptionalParam<QString> &p_pswparam, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_radwbd, const ::OpenAPI::OptionalParam<QString> &p_frswbd, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<double> &p_months_last_dmr, const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within, const ::OpenAPI::OptionalParam<QString> &p_indsw, const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype, const ::OpenAPI::OptionalParam<QString> &p_mon_type, const ::OpenAPI::OptionalParam<QString> &p_iagency, const ::OpenAPI::OptionalParam<QString> &p_permitting_agency, const ::OpenAPI::OptionalParam<QString> &p_isws, const ::OpenAPI::OptionalParam<QString> &p_iswss, const ::OpenAPI::OptionalParam<QString> &p_iswss_id, const ::OpenAPI::OptionalParam<QString> &p_ds1, const ::OpenAPI::OptionalParam<QString> &p_ds2, const ::OpenAPI::OptionalParam<QString> &p_da1, const ::OpenAPI::OptionalParam<QString> &p_da2, const ::OpenAPI::OptionalParam<QString> &p_ms4, const ::OpenAPI::OptionalParam<QString> &p_oo_fn, const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype, const ::OpenAPI::OptionalParam<QString> &p_oo_sa, const ::OpenAPI::OptionalParam<QString> &p_oo_sa1, const ::OpenAPI::OptionalParam<QString> &p_oo_ct, const ::OpenAPI::OptionalParam<QString> &p_oo_st, const ::OpenAPI::OptionalParam<QString> &p_oo_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<double> &p_alrexceed, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<QString> &p_bio_flag, const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type, const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs, const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry, const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category, const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code, const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio, const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio, const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year, const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_vio_last_year, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print, const ::OpenAPI::OptionalParam<double> &p_e90_count, const ::OpenAPI::OptionalParam<double> &p_e90_years, const ::OpenAPI::OptionalParam<QString> &p_psc) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetFacilityInfoGet"][_serverIndices.value("cwaRestServicesGetFacilityInfoGet")].URL()+"/cwa_rest_services.get_facility_info");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fn")).append(querySuffix).append(QUrl::toPercentEncoding(p_fn.stringValue()));
    }
    if (p_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa.stringValue()));
    }
    if (p_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sa1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sa1")).append(querySuffix).append(QUrl::toPercentEncoding(p_sa1.stringValue()));
    }
    if (p_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ct", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ct")).append(querySuffix).append(QUrl::toPercentEncoding(p_ct.stringValue()));
    }
    if (p_co.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_co", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_co")).append(querySuffix).append(QUrl::toPercentEncoding(p_co.stringValue()));
    }
    if (p_fips.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fips", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fips")).append(querySuffix).append(QUrl::toPercentEncoding(p_fips.stringValue()));
    }
    if (p_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_st", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_st")).append(querySuffix).append(QUrl::toPercentEncoding(p_st.stringValue()));
    }
    if (p_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_zip.stringValue()));
    }
    if (p_frs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frs")).append(querySuffix).append(QUrl::toPercentEncoding(p_frs.stringValue()));
    }
    if (p_reg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_reg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_reg")).append(querySuffix).append(QUrl::toPercentEncoding(p_reg.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_ncs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ncs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ncs")).append(querySuffix).append(QUrl::toPercentEncoding(p_ncs.stringValue()));
    }
    if (p_pen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pen")).append(querySuffix).append(QUrl::toPercentEncoding(p_pen.stringValue()));
    }
    if (xmin.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "xmin", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("xmin")).append(querySuffix).append(QUrl::toPercentEncoding(xmin.stringValue()));
    }
    if (ymin.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ymin", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ymin")).append(querySuffix).append(QUrl::toPercentEncoding(ymin.stringValue()));
    }
    if (xmax.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "xmax", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("xmax")).append(querySuffix).append(QUrl::toPercentEncoding(xmax.stringValue()));
    }
    if (ymax.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ymax", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ymax")).append(querySuffix).append(QUrl::toPercentEncoding(ymax.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_sic2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic2")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic2.stringValue()));
    }
    if (p_sic4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic4")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic4.stringValue()));
    }
    if (p_fa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fa")).append(querySuffix).append(QUrl::toPercentEncoding(p_fa.stringValue()));
    }
    if (p_ff.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ff", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ff")).append(querySuffix).append(QUrl::toPercentEncoding(p_ff.stringValue()));
    }
    if (p_act.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_act", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_act")).append(querySuffix).append(QUrl::toPercentEncoding(p_act.stringValue()));
    }
    if (p_maj.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_maj", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_maj")).append(querySuffix).append(QUrl::toPercentEncoding(p_maj.stringValue()));
    }
    if (p_mact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mact")).append(querySuffix).append(QUrl::toPercentEncoding(p_mact.stringValue()));
    }
    if (p_fea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fea")).append(querySuffix).append(QUrl::toPercentEncoding(p_fea.stringValue()));
    }
    if (p_feay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feay")).append(querySuffix).append(QUrl::toPercentEncoding(p_feay.stringValue()));
    }
    if (p_feaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_feaa.stringValue()));
    }
    if (p_iea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iea")).append(querySuffix).append(QUrl::toPercentEncoding(p_iea.stringValue()));
    }
    if (p_ieay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieay")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieay.stringValue()));
    }
    if (p_ieaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieaa.stringValue()));
    }
    if (p_qiv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qiv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qiv")).append(querySuffix).append(QUrl::toPercentEncoding(p_qiv.stringValue()));
    }
    if (p_iv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iv")).append(querySuffix).append(QUrl::toPercentEncoding(p_iv.stringValue()));
    }
    if (p_impw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_impw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_impw")).append(querySuffix).append(QUrl::toPercentEncoding(p_impw.stringValue()));
    }
    if (p_imp_pol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_imp_pol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_imp_pol")).append(querySuffix).append(QUrl::toPercentEncoding(p_imp_pol.stringValue()));
    }
    if (p_imp_cau_grp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_imp_cau_grp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_imp_cau_grp")).append(querySuffix).append(QUrl::toPercentEncoding(p_imp_cau_grp.stringValue()));
    }
    if (p_trep.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_trep", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_trep")).append(querySuffix).append(QUrl::toPercentEncoding(p_trep.stringValue()));
    }
    if (p_pm.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pm", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pm")).append(querySuffix).append(QUrl::toPercentEncoding(p_pm.stringValue()));
    }
    if (p_pd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pd.stringValue()));
    }
    if (p_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_ico.stringValue()));
    }
    if (p_huc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_huc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_huc")).append(querySuffix).append(QUrl::toPercentEncoding(p_huc.stringValue()));
    }
    if (p_pid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pid")).append(querySuffix).append(QUrl::toPercentEncoding(p_pid.stringValue()));
    }
    if (p_med.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_med", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_med")).append(querySuffix).append(QUrl::toPercentEncoding(p_med.stringValue()));
    }
    if (p_ysl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysl")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysl.stringValue()));
    }
    if (p_ysly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysly")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysly.stringValue()));
    }
    if (p_ysla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysla")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysla.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_sfs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sfs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sfs")).append(querySuffix).append(QUrl::toPercentEncoding(p_sfs.stringValue()));
    }
    if (p_tribeid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribeid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribeid")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribeid.stringValue()));
    }
    if (p_tribename.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribename", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribename")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribename.stringValue()));
    }
    if (p_tribedist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribedist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribedist")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribedist.stringValue()));
    }
    if (p_pstat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pstat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pstat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pstat.stringValue()));
    }
    if (p_ptype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ptype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ptype")).append(querySuffix).append(QUrl::toPercentEncoding(p_ptype.stringValue()));
    }
    if (p_pcomp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pcomp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pcomp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pcomp.stringValue()));
    }
    if (p_plimits.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_plimits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_plimits")).append(querySuffix).append(QUrl::toPercentEncoding(p_plimits.stringValue()));
    }
    if (p_pcss.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pcss", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pcss")).append(querySuffix).append(QUrl::toPercentEncoding(p_pcss.stringValue()));
    }
    if (p_pexp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pexp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pexp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pexp.stringValue()));
    }
    if (p_owop.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_owop", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_owop")).append(querySuffix).append(QUrl::toPercentEncoding(p_owop.stringValue()));
    }
    if (p_ipfti.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ipfti", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ipfti")).append(querySuffix).append(QUrl::toPercentEncoding(p_ipfti.stringValue()));
    }
    if (p_agoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_agoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_agoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_agoo.stringValue()));
    }
    if (p_idt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt1.stringValue()));
    }
    if (p_idt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt2.stringValue()));
    }
    if (p_pityp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pityp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pityp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pityp.stringValue()));
    }
    if (p_pfead1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead1")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead1.stringValue()));
    }
    if (p_pfead2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead2")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead2.stringValue()));
    }
    if (p_pfeat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfeat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfeat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfeat.stringValue()));
    }
    if (p_pccs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pccs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pccs")).append(querySuffix).append(QUrl::toPercentEncoding(p_pccs.stringValue()));
    }
    if (p_pexcd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pexcd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pexcd")).append(querySuffix).append(QUrl::toPercentEncoding(p_pexcd.stringValue()));
    }
    if (p_psncq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psncq", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psncq")).append(querySuffix).append(QUrl::toPercentEncoding(p_psncq.stringValue()));
    }
    if (p_pctrack.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pctrack", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pctrack")).append(querySuffix).append(QUrl::toPercentEncoding(p_pctrack.stringValue()));
    }
    if (p_dwd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_dwd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_dwd")).append(querySuffix).append(QUrl::toPercentEncoding(p_dwd.stringValue()));
    }
    if (p_pt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pt")).append(querySuffix).append(QUrl::toPercentEncoding(p_pt.stringValue()));
    }
    if (p_pdwdist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pdwdist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pdwdist")).append(querySuffix).append(QUrl::toPercentEncoding(p_pdwdist.stringValue()));
    }
    if (p_pswdpc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswdpc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswdpc")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswdpc.stringValue()));
    }
    if (p_pswdmp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswdmp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswdmp")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswdmp.stringValue()));
    }
    if (p_pswpol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswpol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswpol")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswpol.stringValue()));
    }
    if (p_pswcas.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswcas", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswcas")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswcas.stringValue()));
    }
    if (p_pswparam.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswparam", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswparam")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswparam.stringValue()));
    }
    if (p_pswvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswvio.stringValue()));
    }
    if (p_wbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_wbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_wbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_wbd.stringValue()));
    }
    if (p_radwbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radwbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radwbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_radwbd.stringValue()));
    }
    if (p_frswbd.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_frswbd", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_frswbd")).append(querySuffix).append(QUrl::toPercentEncoding(p_frswbd.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_pidall.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pidall", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pidall")).append(querySuffix).append(QUrl::toPercentEncoding(p_pidall.stringValue()));
    }
    if (p_months_last_dmr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_months_last_dmr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_months_last_dmr")).append(querySuffix).append(QUrl::toPercentEncoding(p_months_last_dmr.stringValue()));
    }
    if (p_last_dmr_within.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_last_dmr_within", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_last_dmr_within")).append(querySuffix).append(QUrl::toPercentEncoding(p_last_dmr_within.stringValue()));
    }
    if (p_indsw.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_indsw", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_indsw")).append(querySuffix).append(QUrl::toPercentEncoding(p_indsw.stringValue()));
    }
    if (p_msgp_ptype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_msgp_ptype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_msgp_ptype")).append(querySuffix).append(QUrl::toPercentEncoding(p_msgp_ptype.stringValue()));
    }
    if (p_mon_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mon_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mon_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_mon_type.stringValue()));
    }
    if (p_iagency.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iagency", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iagency")).append(querySuffix).append(QUrl::toPercentEncoding(p_iagency.stringValue()));
    }
    if (p_permitting_agency.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_permitting_agency", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_permitting_agency")).append(querySuffix).append(QUrl::toPercentEncoding(p_permitting_agency.stringValue()));
    }
    if (p_isws.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_isws", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_isws")).append(querySuffix).append(QUrl::toPercentEncoding(p_isws.stringValue()));
    }
    if (p_iswss.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iswss", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iswss")).append(querySuffix).append(QUrl::toPercentEncoding(p_iswss.stringValue()));
    }
    if (p_iswss_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iswssID", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iswssID")).append(querySuffix).append(QUrl::toPercentEncoding(p_iswss_id.stringValue()));
    }
    if (p_ds1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ds1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ds1")).append(querySuffix).append(QUrl::toPercentEncoding(p_ds1.stringValue()));
    }
    if (p_ds2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ds2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ds2")).append(querySuffix).append(QUrl::toPercentEncoding(p_ds2.stringValue()));
    }
    if (p_da1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_da1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_da1")).append(querySuffix).append(QUrl::toPercentEncoding(p_da1.stringValue()));
    }
    if (p_da2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_da2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_da2")).append(querySuffix).append(QUrl::toPercentEncoding(p_da2.stringValue()));
    }
    if (p_ms4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_MS4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_MS4")).append(querySuffix).append(QUrl::toPercentEncoding(p_ms4.stringValue()));
    }
    if (p_oo_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooFN", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooFN")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_fn.stringValue()));
    }
    if (p_oo_f_ntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooFNtype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooFNtype")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_f_ntype.stringValue()));
    }
    if (p_oo_sa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSA", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSA")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_sa.stringValue()));
    }
    if (p_oo_sa1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSA1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSA1")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_sa1.stringValue()));
    }
    if (p_oo_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooCt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooCt")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_ct.stringValue()));
    }
    if (p_oo_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooSt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooSt")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_st.stringValue()));
    }
    if (p_oo_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ooZip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ooZip")).append(querySuffix).append(QUrl::toPercentEncoding(p_oo_zip.stringValue()));
    }
    if (p_fac_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_ico.stringValue()));
    }
    if (p_icoo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_icoo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_icoo")).append(querySuffix).append(QUrl::toPercentEncoding(p_icoo.stringValue()));
    }
    if (p_fac_icos.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_icos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_icos")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_icos.stringValue()));
    }
    if (p_ejscreen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen.stringValue()));
    }
    if (p_alrexceed.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_alrexceed", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_alrexceed")).append(querySuffix).append(QUrl::toPercentEncoding(p_alrexceed.stringValue()));
    }
    if (p_limit_addr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_limit_addr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_limit_addr")).append(querySuffix).append(QUrl::toPercentEncoding(p_limit_addr.stringValue()));
    }
    if (p_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_lat.stringValue()));
    }
    if (p_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_long")).append(querySuffix).append(QUrl::toPercentEncoding(p_long.stringValue()));
    }
    if (p_radius.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_radius", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_radius")).append(querySuffix).append(QUrl::toPercentEncoding(p_radius.stringValue()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ejscreen_over80cnt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ejscreen_over80cnt")).append(querySuffix).append(QUrl::toPercentEncoding(p_ejscreen_over80cnt.stringValue()));
    }
    if (p_bio_flag.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_flag", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_flag")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_flag.stringValue()));
    }
    if (p_bio_fac_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_fac_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_fac_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_fac_type.stringValue()));
    }
    if (p_bio_trtmnt_procs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_trtmnt_procs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_trtmnt_procs")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_trtmnt_procs.stringValue()));
    }
    if (p_bio_analy_method_catgry.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_analy_method_catgry", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_analy_method_catgry")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_analy_method_catgry.stringValue()));
    }
    if (p_bio_total_volume_amt.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_total_volume_amt", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_total_volume_amt")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_total_volume_amt.stringValue()));
    }
    if (p_bio_mgmt_prctce_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_type.stringValue()));
    }
    if (p_bio_mgmt_prctce_stype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_stype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_stype")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_stype.stringValue()));
    }
    if (p_bio_mgmt_prctce_handler.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_prctce_handler", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_prctce_handler")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_prctce_handler.stringValue()));
    }
    if (p_bio_mgmt_container.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_container", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_container")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_container.stringValue()));
    }
    if (p_bio_mgmt_pathogen.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_pathogen", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_pathogen")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_pathogen.stringValue()));
    }
    if (p_bio_mgmt_pathred.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_pathred", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_pathred")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_pathred.stringValue()));
    }
    if (p_bio_mgmt_vector.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_vector", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_vector")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_vector.stringValue()));
    }
    if (p_bio_mgmt_def_category.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_def_category", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_def_category")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_def_category.stringValue()));
    }
    if (p_bio_mgmt_deficiencies.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_mgmt_deficiencies", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_mgmt_deficiencies")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_mgmt_deficiencies.stringValue()));
    }
    if (p_bio_vio_code.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_vio_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_vio_code")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_vio_code.stringValue()));
    }
    if (p_bio_current_vio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_current_vio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_current_vio")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_current_vio.stringValue()));
    }
    if (p_bio_qtrs_in_vio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_qtrs_in_vio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_qtrs_in_vio")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_qtrs_in_vio.stringValue()));
    }
    if (p_bio_rpt_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_rpt_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_rpt_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_rpt_year.stringValue()));
    }
    if (p_bio_vio_last_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_bio_vio_last_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_bio_vio_last_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_bio_vio_last_year.stringValue()));
    }
    if (p_msgp_rpt_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_msgp_rpt_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_msgp_rpt_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_msgp_rpt_year.stringValue()));
    }
    if (p_vio_last_year.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_vio_last_year", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_vio_last_year")).append(querySuffix).append(QUrl::toPercentEncoding(p_vio_last_year.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    if (p_e90_count.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_e90_count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_e90_count")).append(querySuffix).append(QUrl::toPercentEncoding(p_e90_count.stringValue()));
    }
    if (p_e90_years.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_e90_years", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_e90_years")).append(querySuffix).append(QUrl::toPercentEncoding(p_e90_years.stringValue()));
    }
    if (p_psc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_psc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_psc")).append(querySuffix).append(QUrl::toPercentEncoding(p_psc.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_facility_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetFacilityInfoGetSignal(output);
        Q_EMIT cwaRestServicesGetFacilityInfoGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetFacilityInfoGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilityInfoGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetFacilityInfoGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilityInfoGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_sa, const ::OpenAPI::OptionalParam<QString> &p_sa1, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_frs, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_ncs, const ::OpenAPI::OptionalParam<QString> &p_pen, const ::OpenAPI::OptionalParam<double> &xmin, const ::OpenAPI::OptionalParam<double> &ymin, const ::OpenAPI::OptionalParam<double> &xmax, const ::OpenAPI::OptionalParam<double> &ymax, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<QString> &p_sic2, const ::OpenAPI::OptionalParam<QString> &p_sic4, const ::OpenAPI::OptionalParam<QString> &p_fa, const ::OpenAPI::OptionalParam<QString> &p_ff, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_maj, const ::OpenAPI::OptionalParam<QString> &p_mact, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_iv, const ::OpenAPI::OptionalParam<QString> &p_impw, const ::OpenAPI::OptionalParam<QString> &p_imp_pol, const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp, const ::OpenAPI::OptionalParam<QString> &p_trep, const ::OpenAPI::OptionalParam<QString> &p_pm, const ::OpenAPI::OptionalParam<QString> &p_pd, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_huc, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_med, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<double> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<double> &p_tribeid, const ::OpenAPI::OptionalParam<QString> &p_tribename, const ::OpenAPI::OptionalParam<double> &p_tribedist, const ::OpenAPI::OptionalParam<QString> &p_pstat, const ::OpenAPI::OptionalParam<QString> &p_ptype, const ::OpenAPI::OptionalParam<QString> &p_pcomp, const ::OpenAPI::OptionalParam<QString> &p_plimits, const ::OpenAPI::OptionalParam<QString> &p_pcss, const ::OpenAPI::OptionalParam<QString> &p_pexp, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_ipfti, const ::OpenAPI::OptionalParam<QString> &p_agoo, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_pityp, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_pccs, const ::OpenAPI::OptionalParam<QString> &p_pexcd, const ::OpenAPI::OptionalParam<QString> &p_psncq, const ::OpenAPI::OptionalParam<QString> &p_pctrack, const ::OpenAPI::OptionalParam<QString> &p_dwd, const ::OpenAPI::OptionalParam<QString> &p_pt, const ::OpenAPI::OptionalParam<QString> &p_pdwdist, const ::OpenAPI::OptionalParam<QString> &p_pswdpc, const ::OpenAPI::OptionalParam<QString> &p_pswdmp, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswcas, const ::OpenAPI::OptionalParam<QString> &p_pswparam, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_wbd, const ::OpenAPI::OptionalParam<QString> &p_radwbd, const ::OpenAPI::OptionalParam<QString> &p_frswbd, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_pidall, const ::OpenAPI::OptionalParam<double> &p_months_last_dmr, const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within, const ::OpenAPI::OptionalParam<QString> &p_indsw, const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype, const ::OpenAPI::OptionalParam<QString> &p_mon_type, const ::OpenAPI::OptionalParam<QString> &p_iagency, const ::OpenAPI::OptionalParam<QString> &p_permitting_agency, const ::OpenAPI::OptionalParam<QString> &p_isws, const ::OpenAPI::OptionalParam<QString> &p_iswss, const ::OpenAPI::OptionalParam<QString> &p_iswss_id, const ::OpenAPI::OptionalParam<QString> &p_ds1, const ::OpenAPI::OptionalParam<QString> &p_ds2, const ::OpenAPI::OptionalParam<QString> &p_da1, const ::OpenAPI::OptionalParam<QString> &p_da2, const ::OpenAPI::OptionalParam<QString> &p_ms4, const ::OpenAPI::OptionalParam<QString> &p_oo_fn, const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype, const ::OpenAPI::OptionalParam<QString> &p_oo_sa, const ::OpenAPI::OptionalParam<QString> &p_oo_sa1, const ::OpenAPI::OptionalParam<QString> &p_oo_ct, const ::OpenAPI::OptionalParam<QString> &p_oo_st, const ::OpenAPI::OptionalParam<QString> &p_oo_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_ico, const ::OpenAPI::OptionalParam<QString> &p_icoo, const ::OpenAPI::OptionalParam<QString> &p_fac_icos, const ::OpenAPI::OptionalParam<QString> &p_ejscreen, const ::OpenAPI::OptionalParam<double> &p_alrexceed, const ::OpenAPI::OptionalParam<QString> &p_limit_addr, const ::OpenAPI::OptionalParam<double> &p_lat, const ::OpenAPI::OptionalParam<double> &p_long, const ::OpenAPI::OptionalParam<double> &p_radius, const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt, const ::OpenAPI::OptionalParam<QString> &p_bio_flag, const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type, const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs, const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry, const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector, const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category, const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code, const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio, const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio, const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year, const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year, const ::OpenAPI::OptionalParam<QString> &p_vio_last_year, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print, const ::OpenAPI::OptionalParam<double> &p_e90_count, const ::OpenAPI::OptionalParam<double> &p_e90_years, const ::OpenAPI::OptionalParam<QString> &p_psc) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetFacilityInfoPost"][_serverIndices.value("cwaRestServicesGetFacilityInfoPost")].URL()+"/cwa_rest_services.get_facility_info");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_fn.hasValue())
    {
        input.add_var("p_fn", ::OpenAPI::toStringValue(p_fn.value()));
    }
    if (p_sa.hasValue())
    {
        input.add_var("p_sa", ::OpenAPI::toStringValue(p_sa.value()));
    }
    if (p_sa1.hasValue())
    {
        input.add_var("p_sa1", ::OpenAPI::toStringValue(p_sa1.value()));
    }
    if (p_ct.hasValue())
    {
        input.add_var("p_ct", ::OpenAPI::toStringValue(p_ct.value()));
    }
    if (p_co.hasValue())
    {
        input.add_var("p_co", ::OpenAPI::toStringValue(p_co.value()));
    }
    if (p_fips.hasValue())
    {
        input.add_var("p_fips", ::OpenAPI::toStringValue(p_fips.value()));
    }
    if (p_st.hasValue())
    {
        input.add_var("p_st", ::OpenAPI::toStringValue(p_st.value()));
    }
    if (p_zip.hasValue())
    {
        input.add_var("p_zip", ::OpenAPI::toStringValue(p_zip.value()));
    }
    if (p_frs.hasValue())
    {
        input.add_var("p_frs", ::OpenAPI::toStringValue(p_frs.value()));
    }
    if (p_reg.hasValue())
    {
        input.add_var("p_reg", ::OpenAPI::toStringValue(p_reg.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_ncs.hasValue())
    {
        input.add_var("p_ncs", ::OpenAPI::toStringValue(p_ncs.value()));
    }
    if (p_pen.hasValue())
    {
        input.add_var("p_pen", ::OpenAPI::toStringValue(p_pen.value()));
    }
    if (xmin.hasValue())
    {
        input.add_var("xmin", ::OpenAPI::toStringValue(xmin.value()));
    }
    if (ymin.hasValue())
    {
        input.add_var("ymin", ::OpenAPI::toStringValue(ymin.value()));
    }
    if (xmax.hasValue())
    {
        input.add_var("xmax", ::OpenAPI::toStringValue(xmax.value()));
    }
    if (ymax.hasValue())
    {
        input.add_var("ymax", ::OpenAPI::toStringValue(ymax.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_sic2.hasValue())
    {
        input.add_var("p_sic2", ::OpenAPI::toStringValue(p_sic2.value()));
    }
    if (p_sic4.hasValue())
    {
        input.add_var("p_sic4", ::OpenAPI::toStringValue(p_sic4.value()));
    }
    if (p_fa.hasValue())
    {
        input.add_var("p_fa", ::OpenAPI::toStringValue(p_fa.value()));
    }
    if (p_ff.hasValue())
    {
        input.add_var("p_ff", ::OpenAPI::toStringValue(p_ff.value()));
    }
    if (p_act.hasValue())
    {
        input.add_var("p_act", ::OpenAPI::toStringValue(p_act.value()));
    }
    if (p_maj.hasValue())
    {
        input.add_var("p_maj", ::OpenAPI::toStringValue(p_maj.value()));
    }
    if (p_mact.hasValue())
    {
        input.add_var("p_mact", ::OpenAPI::toStringValue(p_mact.value()));
    }
    if (p_fea.hasValue())
    {
        input.add_var("p_fea", ::OpenAPI::toStringValue(p_fea.value()));
    }
    if (p_feay.hasValue())
    {
        input.add_var("p_feay", ::OpenAPI::toStringValue(p_feay.value()));
    }
    if (p_feaa.hasValue())
    {
        input.add_var("p_feaa", ::OpenAPI::toStringValue(p_feaa.value()));
    }
    if (p_iea.hasValue())
    {
        input.add_var("p_iea", ::OpenAPI::toStringValue(p_iea.value()));
    }
    if (p_ieay.hasValue())
    {
        input.add_var("p_ieay", ::OpenAPI::toStringValue(p_ieay.value()));
    }
    if (p_ieaa.hasValue())
    {
        input.add_var("p_ieaa", ::OpenAPI::toStringValue(p_ieaa.value()));
    }
    if (p_qiv.hasValue())
    {
        input.add_var("p_qiv", ::OpenAPI::toStringValue(p_qiv.value()));
    }
    if (p_iv.hasValue())
    {
        input.add_var("p_iv", ::OpenAPI::toStringValue(p_iv.value()));
    }
    if (p_impw.hasValue())
    {
        input.add_var("p_impw", ::OpenAPI::toStringValue(p_impw.value()));
    }
    if (p_imp_pol.hasValue())
    {
        input.add_var("p_imp_pol", ::OpenAPI::toStringValue(p_imp_pol.value()));
    }
    if (p_imp_cau_grp.hasValue())
    {
        input.add_var("p_imp_cau_grp", ::OpenAPI::toStringValue(p_imp_cau_grp.value()));
    }
    if (p_trep.hasValue())
    {
        input.add_var("p_trep", ::OpenAPI::toStringValue(p_trep.value()));
    }
    if (p_pm.hasValue())
    {
        input.add_var("p_pm", ::OpenAPI::toStringValue(p_pm.value()));
    }
    if (p_pd.hasValue())
    {
        input.add_var("p_pd", ::OpenAPI::toStringValue(p_pd.value()));
    }
    if (p_ico.hasValue())
    {
        input.add_var("p_ico", ::OpenAPI::toStringValue(p_ico.value()));
    }
    if (p_huc.hasValue())
    {
        input.add_var("p_huc", ::OpenAPI::toStringValue(p_huc.value()));
    }
    if (p_pid.hasValue())
    {
        input.add_var("p_pid", ::OpenAPI::toStringValue(p_pid.value()));
    }
    if (p_med.hasValue())
    {
        input.add_var("p_med", ::OpenAPI::toStringValue(p_med.value()));
    }
    if (p_ysl.hasValue())
    {
        input.add_var("p_ysl", ::OpenAPI::toStringValue(p_ysl.value()));
    }
    if (p_ysly.hasValue())
    {
        input.add_var("p_ysly", ::OpenAPI::toStringValue(p_ysly.value()));
    }
    if (p_ysla.hasValue())
    {
        input.add_var("p_ysla", ::OpenAPI::toStringValue(p_ysla.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_sfs.hasValue())
    {
        input.add_var("p_sfs", ::OpenAPI::toStringValue(p_sfs.value()));
    }
    if (p_tribeid.hasValue())
    {
        input.add_var("p_tribeid", ::OpenAPI::toStringValue(p_tribeid.value()));
    }
    if (p_tribename.hasValue())
    {
        input.add_var("p_tribename", ::OpenAPI::toStringValue(p_tribename.value()));
    }
    if (p_tribedist.hasValue())
    {
        input.add_var("p_tribedist", ::OpenAPI::toStringValue(p_tribedist.value()));
    }
    if (p_pstat.hasValue())
    {
        input.add_var("p_pstat", ::OpenAPI::toStringValue(p_pstat.value()));
    }
    if (p_ptype.hasValue())
    {
        input.add_var("p_ptype", ::OpenAPI::toStringValue(p_ptype.value()));
    }
    if (p_pcomp.hasValue())
    {
        input.add_var("p_pcomp", ::OpenAPI::toStringValue(p_pcomp.value()));
    }
    if (p_plimits.hasValue())
    {
        input.add_var("p_plimits", ::OpenAPI::toStringValue(p_plimits.value()));
    }
    if (p_pcss.hasValue())
    {
        input.add_var("p_pcss", ::OpenAPI::toStringValue(p_pcss.value()));
    }
    if (p_pexp.hasValue())
    {
        input.add_var("p_pexp", ::OpenAPI::toStringValue(p_pexp.value()));
    }
    if (p_owop.hasValue())
    {
        input.add_var("p_owop", ::OpenAPI::toStringValue(p_owop.value()));
    }
    if (p_ipfti.hasValue())
    {
        input.add_var("p_ipfti", ::OpenAPI::toStringValue(p_ipfti.value()));
    }
    if (p_agoo.hasValue())
    {
        input.add_var("p_agoo", ::OpenAPI::toStringValue(p_agoo.value()));
    }
    if (p_idt1.hasValue())
    {
        input.add_var("p_idt1", ::OpenAPI::toStringValue(p_idt1.value()));
    }
    if (p_idt2.hasValue())
    {
        input.add_var("p_idt2", ::OpenAPI::toStringValue(p_idt2.value()));
    }
    if (p_pityp.hasValue())
    {
        input.add_var("p_pityp", ::OpenAPI::toStringValue(p_pityp.value()));
    }
    if (p_pfead1.hasValue())
    {
        input.add_var("p_pfead1", ::OpenAPI::toStringValue(p_pfead1.value()));
    }
    if (p_pfead2.hasValue())
    {
        input.add_var("p_pfead2", ::OpenAPI::toStringValue(p_pfead2.value()));
    }
    if (p_pfeat.hasValue())
    {
        input.add_var("p_pfeat", ::OpenAPI::toStringValue(p_pfeat.value()));
    }
    if (p_pccs.hasValue())
    {
        input.add_var("p_pccs", ::OpenAPI::toStringValue(p_pccs.value()));
    }
    if (p_pexcd.hasValue())
    {
        input.add_var("p_pexcd", ::OpenAPI::toStringValue(p_pexcd.value()));
    }
    if (p_psncq.hasValue())
    {
        input.add_var("p_psncq", ::OpenAPI::toStringValue(p_psncq.value()));
    }
    if (p_pctrack.hasValue())
    {
        input.add_var("p_pctrack", ::OpenAPI::toStringValue(p_pctrack.value()));
    }
    if (p_dwd.hasValue())
    {
        input.add_var("p_dwd", ::OpenAPI::toStringValue(p_dwd.value()));
    }
    if (p_pt.hasValue())
    {
        input.add_var("p_pt", ::OpenAPI::toStringValue(p_pt.value()));
    }
    if (p_pdwdist.hasValue())
    {
        input.add_var("p_pdwdist", ::OpenAPI::toStringValue(p_pdwdist.value()));
    }
    if (p_pswdpc.hasValue())
    {
        input.add_var("p_pswdpc", ::OpenAPI::toStringValue(p_pswdpc.value()));
    }
    if (p_pswdmp.hasValue())
    {
        input.add_var("p_pswdmp", ::OpenAPI::toStringValue(p_pswdmp.value()));
    }
    if (p_pswpol.hasValue())
    {
        input.add_var("p_pswpol", ::OpenAPI::toStringValue(p_pswpol.value()));
    }
    if (p_pswcas.hasValue())
    {
        input.add_var("p_pswcas", ::OpenAPI::toStringValue(p_pswcas.value()));
    }
    if (p_pswparam.hasValue())
    {
        input.add_var("p_pswparam", ::OpenAPI::toStringValue(p_pswparam.value()));
    }
    if (p_pswvio.hasValue())
    {
        input.add_var("p_pswvio", ::OpenAPI::toStringValue(p_pswvio.value()));
    }
    if (p_wbd.hasValue())
    {
        input.add_var("p_wbd", ::OpenAPI::toStringValue(p_wbd.value()));
    }
    if (p_radwbd.hasValue())
    {
        input.add_var("p_radwbd", ::OpenAPI::toStringValue(p_radwbd.value()));
    }
    if (p_frswbd.hasValue())
    {
        input.add_var("p_frswbd", ::OpenAPI::toStringValue(p_frswbd.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_pidall.hasValue())
    {
        input.add_var("p_pidall", ::OpenAPI::toStringValue(p_pidall.value()));
    }
    if (p_months_last_dmr.hasValue())
    {
        input.add_var("p_months_last_dmr", ::OpenAPI::toStringValue(p_months_last_dmr.value()));
    }
    if (p_last_dmr_within.hasValue())
    {
        input.add_var("p_last_dmr_within", ::OpenAPI::toStringValue(p_last_dmr_within.value()));
    }
    if (p_indsw.hasValue())
    {
        input.add_var("p_indsw", ::OpenAPI::toStringValue(p_indsw.value()));
    }
    if (p_msgp_ptype.hasValue())
    {
        input.add_var("p_msgp_ptype", ::OpenAPI::toStringValue(p_msgp_ptype.value()));
    }
    if (p_mon_type.hasValue())
    {
        input.add_var("p_mon_type", ::OpenAPI::toStringValue(p_mon_type.value()));
    }
    if (p_iagency.hasValue())
    {
        input.add_var("p_iagency", ::OpenAPI::toStringValue(p_iagency.value()));
    }
    if (p_permitting_agency.hasValue())
    {
        input.add_var("p_permitting_agency", ::OpenAPI::toStringValue(p_permitting_agency.value()));
    }
    if (p_isws.hasValue())
    {
        input.add_var("p_isws", ::OpenAPI::toStringValue(p_isws.value()));
    }
    if (p_iswss.hasValue())
    {
        input.add_var("p_iswss", ::OpenAPI::toStringValue(p_iswss.value()));
    }
    if (p_iswss_id.hasValue())
    {
        input.add_var("p_iswssID", ::OpenAPI::toStringValue(p_iswss_id.value()));
    }
    if (p_ds1.hasValue())
    {
        input.add_var("p_ds1", ::OpenAPI::toStringValue(p_ds1.value()));
    }
    if (p_ds2.hasValue())
    {
        input.add_var("p_ds2", ::OpenAPI::toStringValue(p_ds2.value()));
    }
    if (p_da1.hasValue())
    {
        input.add_var("p_da1", ::OpenAPI::toStringValue(p_da1.value()));
    }
    if (p_da2.hasValue())
    {
        input.add_var("p_da2", ::OpenAPI::toStringValue(p_da2.value()));
    }
    if (p_ms4.hasValue())
    {
        input.add_var("p_MS4", ::OpenAPI::toStringValue(p_ms4.value()));
    }
    if (p_oo_fn.hasValue())
    {
        input.add_var("p_ooFN", ::OpenAPI::toStringValue(p_oo_fn.value()));
    }
    if (p_oo_f_ntype.hasValue())
    {
        input.add_var("p_ooFNtype", ::OpenAPI::toStringValue(p_oo_f_ntype.value()));
    }
    if (p_oo_sa.hasValue())
    {
        input.add_var("p_ooSA", ::OpenAPI::toStringValue(p_oo_sa.value()));
    }
    if (p_oo_sa1.hasValue())
    {
        input.add_var("p_ooSA1", ::OpenAPI::toStringValue(p_oo_sa1.value()));
    }
    if (p_oo_ct.hasValue())
    {
        input.add_var("p_ooCt", ::OpenAPI::toStringValue(p_oo_ct.value()));
    }
    if (p_oo_st.hasValue())
    {
        input.add_var("p_ooSt", ::OpenAPI::toStringValue(p_oo_st.value()));
    }
    if (p_oo_zip.hasValue())
    {
        input.add_var("p_ooZip", ::OpenAPI::toStringValue(p_oo_zip.value()));
    }
    if (p_fac_ico.hasValue())
    {
        input.add_var("p_fac_ico", ::OpenAPI::toStringValue(p_fac_ico.value()));
    }
    if (p_icoo.hasValue())
    {
        input.add_var("p_icoo", ::OpenAPI::toStringValue(p_icoo.value()));
    }
    if (p_fac_icos.hasValue())
    {
        input.add_var("p_fac_icos", ::OpenAPI::toStringValue(p_fac_icos.value()));
    }
    if (p_ejscreen.hasValue())
    {
        input.add_var("p_ejscreen", ::OpenAPI::toStringValue(p_ejscreen.value()));
    }
    if (p_alrexceed.hasValue())
    {
        input.add_var("p_alrexceed", ::OpenAPI::toStringValue(p_alrexceed.value()));
    }
    if (p_limit_addr.hasValue())
    {
        input.add_var("p_limit_addr", ::OpenAPI::toStringValue(p_limit_addr.value()));
    }
    if (p_lat.hasValue())
    {
        input.add_var("p_lat", ::OpenAPI::toStringValue(p_lat.value()));
    }
    if (p_long.hasValue())
    {
        input.add_var("p_long", ::OpenAPI::toStringValue(p_long.value()));
    }
    if (p_radius.hasValue())
    {
        input.add_var("p_radius", ::OpenAPI::toStringValue(p_radius.value()));
    }
    if (p_ejscreen_over80cnt.hasValue())
    {
        input.add_var("p_ejscreen_over80cnt", ::OpenAPI::toStringValue(p_ejscreen_over80cnt.value()));
    }
    if (p_bio_flag.hasValue())
    {
        input.add_var("p_bio_flag", ::OpenAPI::toStringValue(p_bio_flag.value()));
    }
    if (p_bio_fac_type.hasValue())
    {
        input.add_var("p_bio_fac_type", ::OpenAPI::toStringValue(p_bio_fac_type.value()));
    }
    if (p_bio_trtmnt_procs.hasValue())
    {
        input.add_var("p_bio_trtmnt_procs", ::OpenAPI::toStringValue(p_bio_trtmnt_procs.value()));
    }
    if (p_bio_analy_method_catgry.hasValue())
    {
        input.add_var("p_bio_analy_method_catgry", ::OpenAPI::toStringValue(p_bio_analy_method_catgry.value()));
    }
    if (p_bio_total_volume_amt.hasValue())
    {
        input.add_var("p_bio_total_volume_amt", ::OpenAPI::toStringValue(p_bio_total_volume_amt.value()));
    }
    if (p_bio_mgmt_prctce_type.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_type", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_type.value()));
    }
    if (p_bio_mgmt_prctce_stype.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_stype", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_stype.value()));
    }
    if (p_bio_mgmt_prctce_handler.hasValue())
    {
        input.add_var("p_bio_mgmt_prctce_handler", ::OpenAPI::toStringValue(p_bio_mgmt_prctce_handler.value()));
    }
    if (p_bio_mgmt_container.hasValue())
    {
        input.add_var("p_bio_mgmt_container", ::OpenAPI::toStringValue(p_bio_mgmt_container.value()));
    }
    if (p_bio_mgmt_pathogen.hasValue())
    {
        input.add_var("p_bio_mgmt_pathogen", ::OpenAPI::toStringValue(p_bio_mgmt_pathogen.value()));
    }
    if (p_bio_mgmt_pathred.hasValue())
    {
        input.add_var("p_bio_mgmt_pathred", ::OpenAPI::toStringValue(p_bio_mgmt_pathred.value()));
    }
    if (p_bio_mgmt_vector.hasValue())
    {
        input.add_var("p_bio_mgmt_vector", ::OpenAPI::toStringValue(p_bio_mgmt_vector.value()));
    }
    if (p_bio_mgmt_def_category.hasValue())
    {
        input.add_var("p_bio_mgmt_def_category", ::OpenAPI::toStringValue(p_bio_mgmt_def_category.value()));
    }
    if (p_bio_mgmt_deficiencies.hasValue())
    {
        input.add_var("p_bio_mgmt_deficiencies", ::OpenAPI::toStringValue(p_bio_mgmt_deficiencies.value()));
    }
    if (p_bio_vio_code.hasValue())
    {
        input.add_var("p_bio_vio_code", ::OpenAPI::toStringValue(p_bio_vio_code.value()));
    }
    if (p_bio_current_vio.hasValue())
    {
        input.add_var("p_bio_current_vio", ::OpenAPI::toStringValue(p_bio_current_vio.value()));
    }
    if (p_bio_qtrs_in_vio.hasValue())
    {
        input.add_var("p_bio_qtrs_in_vio", ::OpenAPI::toStringValue(p_bio_qtrs_in_vio.value()));
    }
    if (p_bio_rpt_year.hasValue())
    {
        input.add_var("p_bio_rpt_year", ::OpenAPI::toStringValue(p_bio_rpt_year.value()));
    }
    if (p_bio_vio_last_year.hasValue())
    {
        input.add_var("p_bio_vio_last_year", ::OpenAPI::toStringValue(p_bio_vio_last_year.value()));
    }
    if (p_msgp_rpt_year.hasValue())
    {
        input.add_var("p_msgp_rpt_year", ::OpenAPI::toStringValue(p_msgp_rpt_year.value()));
    }
    if (p_vio_last_year.hasValue())
    {
        input.add_var("p_vio_last_year", ::OpenAPI::toStringValue(p_vio_last_year.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }
    if (p_e90_count.hasValue())
    {
        input.add_var("p_e90_count", ::OpenAPI::toStringValue(p_e90_count.value()));
    }
    if (p_e90_years.hasValue())
    {
        input.add_var("p_e90_years", ::OpenAPI::toStringValue(p_e90_years.value()));
    }
    if (p_psc.hasValue())
    {
        input.add_var("p_psc", ::OpenAPI::toStringValue(p_psc.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_facility_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetFacilityInfoPostSignal(output);
        Q_EMIT cwaRestServicesGetFacilityInfoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetFacilityInfoPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilityInfoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetFacilityInfoPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetFacilityInfoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetGeojsonGet"][_serverIndices.value("cwaRestServicesGetGeojsonGet")].URL()+"/cwa_rest_services.get_geojson");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetGeojsonGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_geojson_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetGeojsonGetSignal(output);
        Q_EMIT cwaRestServicesGetGeojsonGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetGeojsonGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetGeojsonGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetGeojsonGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetGeojsonGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetGeojsonPost"][_serverIndices.value("cwaRestServicesGetGeojsonPost")].URL()+"/cwa_rest_services.get_geojson");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetGeojsonPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_geojson_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetGeojsonPostSignal(output);
        Q_EMIT cwaRestServicesGetGeojsonPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetGeojsonPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetGeojsonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetGeojsonPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetGeojsonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetInfoClustersGet"][_serverIndices.value("cwaRestServicesGetInfoClustersGet")].URL()+"/cwa_rest_services.get_info_clusters");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qid")).append(querySuffix).append(QUrl::toPercentEncoding(p_qid));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetInfoClustersGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetInfoClustersGetSignal(output);
        Q_EMIT cwaRestServicesGetInfoClustersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetInfoClustersGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetInfoClustersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetInfoClustersGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetInfoClustersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &p_pretty_print) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetInfoClustersPost"][_serverIndices.value("cwaRestServicesGetInfoClustersPost")].URL()+"/cwa_rest_services.get_info_clusters");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("p_qid", ::OpenAPI::toStringValue(p_qid));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetInfoClustersPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetInfoClustersPostSignal(output);
        Q_EMIT cwaRestServicesGetInfoClustersPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetInfoClustersPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetInfoClustersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetInfoClustersPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetInfoClustersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetMapGet"][_serverIndices.value("cwaRestServicesGetMapGet")].URL()+"/cwa_rest_services.get_map");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (c1_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c1_lat.stringValue()));
    }
    if (c1_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_long")).append(querySuffix).append(QUrl::toPercentEncoding(c1_long.stringValue()));
    }
    if (c2_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c2_lat.stringValue()));
    }
    if (c2_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_long")).append(querySuffix).append(QUrl::toPercentEncoding(c2_long.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetMapGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetMapGetSignal(output);
        Q_EMIT cwaRestServicesGetMapGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetMapGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetMapGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetMapGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetMapGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetMapPost"][_serverIndices.value("cwaRestServicesGetMapPost")].URL()+"/cwa_rest_services.get_map");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (c1_lat.hasValue())
    {
        input.add_var("c1_lat", ::OpenAPI::toStringValue(c1_lat.value()));
    }
    if (c1_long.hasValue())
    {
        input.add_var("c1_long", ::OpenAPI::toStringValue(c1_long.value()));
    }
    if (c2_lat.hasValue())
    {
        input.add_var("c2_lat", ::OpenAPI::toStringValue(c2_lat.value()));
    }
    if (c2_long.hasValue())
    {
        input.add_var("c2_long", ::OpenAPI::toStringValue(c2_long.value()));
    }
    
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetMapPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetMapPostSignal(output);
        Q_EMIT cwaRestServicesGetMapPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetMapPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetMapPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetMapPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetMapPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetQidGet"][_serverIndices.value("cwaRestServicesGetQidGet")].URL()+"/cwa_rest_services.get_qid");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (pageno.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageno", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageno")).append(querySuffix).append(QUrl::toPercentEncoding(pageno.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetQidGetCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetQidGetSignal(output);
        Q_EMIT cwaRestServicesGetQidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetQidGetSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetQidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetQidGetSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetQidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::cwaRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["cwaRestServicesGetQidPost"][_serverIndices.value("cwaRestServicesGetQidPost")].URL()+"/cwa_rest_services.get_qid");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (pageno.hasValue())
    {
        input.add_var("pageno", ::OpenAPI::toStringValue(pageno.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFacilityInformationApi::cwaRestServicesGetQidPostCallback);
    connect(this, &OAIFacilityInformationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFacilityInformationApi::cwaRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cwa_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cwaRestServicesGetQidPostSignal(output);
        Q_EMIT cwaRestServicesGetQidPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cwaRestServicesGetQidPostSignalE(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetQidPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cwaRestServicesGetQidPostSignalError(output, error_type, error_str);
        Q_EMIT cwaRestServicesGetQidPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFacilityInformationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
