/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILookupsApi_H
#define OAI_OAILookupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_rest_lookups_bp_tribes_get_200_response.h"
#include "OAI_rest_lookups_cwa_parameters_get_200_response.h"
#include "OAI_rest_lookups_cwa_pollutants_get_200_response.h"
#include "OAI_rest_lookups_federal_agencies_get_200_response.h"
#include "OAI_rest_lookups_icis_inspection_types_get_200_response.h"
#include "OAI_rest_lookups_icis_law_sections_get_200_response.h"
#include "OAI_rest_lookups_naics_codes_get_200_response.h"
#include "OAI_rest_lookups_npdes_parameters_get_200_response.h"
#include "OAI_rest_lookups_wbd_code_lu_get_200_response.h"
#include "OAI_rest_lookups_wbd_name_lu_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILookupsApi : public QObject {
    Q_OBJECT

public:
    OAILookupsApi(const int timeOut = 0);
    ~OAILookupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsBpTribesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsBpTribesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsCwaParametersGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsCwaParametersPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsCwaPollutantsGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsCwaPollutantsPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsFederalAgenciesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsFederalAgenciesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsIcisInspectionTypesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsIcisInspectionTypesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  statute_code QString [optional]
    * @param[in]  status_flag QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    * @param[in]  sort_order double [optional]
    */
    virtual void restLookupsIcisLawSectionsGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statute_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &sort_order = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  statute_code QString [optional]
    * @param[in]  status_flag QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    * @param[in]  sort_order double [optional]
    */
    virtual void restLookupsIcisLawSectionsPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statute_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &sort_order = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsNaicsCodesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  search_code QString [optional]
    */
    virtual void restLookupsNaicsCodesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    */
    virtual void restLookupsNpdesParametersGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  search_term QString [optional]
    */
    virtual void restLookupsNpdesParametersPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  wbd_code QString [optional]
    * @param[in]  wbd_level QString [optional]
    */
    virtual void restLookupsWbdCodeLuGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_level = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  wbd_code QString [optional]
    * @param[in]  wbd_level QString [optional]
    */
    virtual void restLookupsWbdCodeLuPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_level = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wbd_name QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  wbd_level QString [optional]
    */
    virtual void restLookupsWbdNameLuGet(const QString &wbd_name, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_level = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wbd_name QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  wbd_level QString [optional]
    */
    virtual void restLookupsWbdNameLuPost(const QString &wbd_name, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wbd_level = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void restLookupsBpTribesGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsBpTribesPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsCwaParametersGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsCwaParametersPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsCwaPollutantsGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsCwaPollutantsPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsFederalAgenciesGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsFederalAgenciesPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsIcisInspectionTypesGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsIcisInspectionTypesPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsIcisLawSectionsGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsIcisLawSectionsPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsNaicsCodesGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsNaicsCodesPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsNpdesParametersGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsNpdesParametersPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsWbdCodeLuGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsWbdCodeLuPostCallback(OAIHttpRequestWorker *worker);
    void restLookupsWbdNameLuGetCallback(OAIHttpRequestWorker *worker);
    void restLookupsWbdNameLuPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void restLookupsBpTribesGetSignal(OAI_rest_lookups_bp_tribes_get_200_response summary);
    void restLookupsBpTribesPostSignal(OAI_rest_lookups_bp_tribes_get_200_response summary);
    void restLookupsCwaParametersGetSignal(OAI_rest_lookups_cwa_parameters_get_200_response summary);
    void restLookupsCwaParametersPostSignal(OAI_rest_lookups_cwa_parameters_get_200_response summary);
    void restLookupsCwaPollutantsGetSignal(OAI_rest_lookups_cwa_pollutants_get_200_response summary);
    void restLookupsCwaPollutantsPostSignal(OAI_rest_lookups_cwa_pollutants_get_200_response summary);
    void restLookupsFederalAgenciesGetSignal(OAI_rest_lookups_federal_agencies_get_200_response summary);
    void restLookupsFederalAgenciesPostSignal(OAI_rest_lookups_federal_agencies_get_200_response summary);
    void restLookupsIcisInspectionTypesGetSignal(OAI_rest_lookups_icis_inspection_types_get_200_response summary);
    void restLookupsIcisInspectionTypesPostSignal(OAI_rest_lookups_icis_inspection_types_get_200_response summary);
    void restLookupsIcisLawSectionsGetSignal(OAI_rest_lookups_icis_law_sections_get_200_response summary);
    void restLookupsIcisLawSectionsPostSignal(OAI_rest_lookups_icis_law_sections_get_200_response summary);
    void restLookupsNaicsCodesGetSignal(OAI_rest_lookups_naics_codes_get_200_response summary);
    void restLookupsNaicsCodesPostSignal(OAI_rest_lookups_naics_codes_get_200_response summary);
    void restLookupsNpdesParametersGetSignal(OAI_rest_lookups_npdes_parameters_get_200_response summary);
    void restLookupsNpdesParametersPostSignal(OAI_rest_lookups_npdes_parameters_get_200_response summary);
    void restLookupsWbdCodeLuGetSignal(OAI_rest_lookups_wbd_code_lu_get_200_response summary);
    void restLookupsWbdCodeLuPostSignal(OAI_rest_lookups_wbd_code_lu_get_200_response summary);
    void restLookupsWbdNameLuGetSignal(OAI_rest_lookups_wbd_name_lu_get_200_response summary);
    void restLookupsWbdNameLuPostSignal(OAI_rest_lookups_wbd_name_lu_get_200_response summary);


    void restLookupsBpTribesGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_bp_tribes_get_200_response summary);
    void restLookupsBpTribesPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_bp_tribes_get_200_response summary);
    void restLookupsCwaParametersGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_cwa_parameters_get_200_response summary);
    void restLookupsCwaParametersPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_cwa_parameters_get_200_response summary);
    void restLookupsCwaPollutantsGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_cwa_pollutants_get_200_response summary);
    void restLookupsCwaPollutantsPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_cwa_pollutants_get_200_response summary);
    void restLookupsFederalAgenciesGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_federal_agencies_get_200_response summary);
    void restLookupsFederalAgenciesPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_federal_agencies_get_200_response summary);
    void restLookupsIcisInspectionTypesGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_icis_inspection_types_get_200_response summary);
    void restLookupsIcisInspectionTypesPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_icis_inspection_types_get_200_response summary);
    void restLookupsIcisLawSectionsGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_icis_law_sections_get_200_response summary);
    void restLookupsIcisLawSectionsPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_icis_law_sections_get_200_response summary);
    void restLookupsNaicsCodesGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_naics_codes_get_200_response summary);
    void restLookupsNaicsCodesPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_naics_codes_get_200_response summary);
    void restLookupsNpdesParametersGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_npdes_parameters_get_200_response summary);
    void restLookupsNpdesParametersPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_npdes_parameters_get_200_response summary);
    void restLookupsWbdCodeLuGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_wbd_code_lu_get_200_response summary);
    void restLookupsWbdCodeLuPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_wbd_code_lu_get_200_response summary);
    void restLookupsWbdNameLuGetSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_wbd_name_lu_get_200_response summary);
    void restLookupsWbdNameLuPostSignalFull(OAIHttpRequestWorker *worker, OAI_rest_lookups_wbd_name_lu_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use restLookupsBpTribesGetSignalError() instead")
    void restLookupsBpTribesGetSignalE(OAI_rest_lookups_bp_tribes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsBpTribesGetSignalError(OAI_rest_lookups_bp_tribes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsBpTribesPostSignalError() instead")
    void restLookupsBpTribesPostSignalE(OAI_rest_lookups_bp_tribes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsBpTribesPostSignalError(OAI_rest_lookups_bp_tribes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaParametersGetSignalError() instead")
    void restLookupsCwaParametersGetSignalE(OAI_rest_lookups_cwa_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaParametersGetSignalError(OAI_rest_lookups_cwa_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaParametersPostSignalError() instead")
    void restLookupsCwaParametersPostSignalE(OAI_rest_lookups_cwa_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaParametersPostSignalError(OAI_rest_lookups_cwa_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaPollutantsGetSignalError() instead")
    void restLookupsCwaPollutantsGetSignalE(OAI_rest_lookups_cwa_pollutants_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaPollutantsGetSignalError(OAI_rest_lookups_cwa_pollutants_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaPollutantsPostSignalError() instead")
    void restLookupsCwaPollutantsPostSignalE(OAI_rest_lookups_cwa_pollutants_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaPollutantsPostSignalError(OAI_rest_lookups_cwa_pollutants_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsFederalAgenciesGetSignalError() instead")
    void restLookupsFederalAgenciesGetSignalE(OAI_rest_lookups_federal_agencies_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsFederalAgenciesGetSignalError(OAI_rest_lookups_federal_agencies_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsFederalAgenciesPostSignalError() instead")
    void restLookupsFederalAgenciesPostSignalE(OAI_rest_lookups_federal_agencies_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsFederalAgenciesPostSignalError(OAI_rest_lookups_federal_agencies_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisInspectionTypesGetSignalError() instead")
    void restLookupsIcisInspectionTypesGetSignalE(OAI_rest_lookups_icis_inspection_types_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisInspectionTypesGetSignalError(OAI_rest_lookups_icis_inspection_types_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisInspectionTypesPostSignalError() instead")
    void restLookupsIcisInspectionTypesPostSignalE(OAI_rest_lookups_icis_inspection_types_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisInspectionTypesPostSignalError(OAI_rest_lookups_icis_inspection_types_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisLawSectionsGetSignalError() instead")
    void restLookupsIcisLawSectionsGetSignalE(OAI_rest_lookups_icis_law_sections_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisLawSectionsGetSignalError(OAI_rest_lookups_icis_law_sections_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisLawSectionsPostSignalError() instead")
    void restLookupsIcisLawSectionsPostSignalE(OAI_rest_lookups_icis_law_sections_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisLawSectionsPostSignalError(OAI_rest_lookups_icis_law_sections_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNaicsCodesGetSignalError() instead")
    void restLookupsNaicsCodesGetSignalE(OAI_rest_lookups_naics_codes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNaicsCodesGetSignalError(OAI_rest_lookups_naics_codes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNaicsCodesPostSignalError() instead")
    void restLookupsNaicsCodesPostSignalE(OAI_rest_lookups_naics_codes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNaicsCodesPostSignalError(OAI_rest_lookups_naics_codes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNpdesParametersGetSignalError() instead")
    void restLookupsNpdesParametersGetSignalE(OAI_rest_lookups_npdes_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNpdesParametersGetSignalError(OAI_rest_lookups_npdes_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNpdesParametersPostSignalError() instead")
    void restLookupsNpdesParametersPostSignalE(OAI_rest_lookups_npdes_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNpdesParametersPostSignalError(OAI_rest_lookups_npdes_parameters_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdCodeLuGetSignalError() instead")
    void restLookupsWbdCodeLuGetSignalE(OAI_rest_lookups_wbd_code_lu_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdCodeLuGetSignalError(OAI_rest_lookups_wbd_code_lu_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdCodeLuPostSignalError() instead")
    void restLookupsWbdCodeLuPostSignalE(OAI_rest_lookups_wbd_code_lu_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdCodeLuPostSignalError(OAI_rest_lookups_wbd_code_lu_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdNameLuGetSignalError() instead")
    void restLookupsWbdNameLuGetSignalE(OAI_rest_lookups_wbd_name_lu_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdNameLuGetSignalError(OAI_rest_lookups_wbd_name_lu_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdNameLuPostSignalError() instead")
    void restLookupsWbdNameLuPostSignalE(OAI_rest_lookups_wbd_name_lu_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdNameLuPostSignalError(OAI_rest_lookups_wbd_name_lu_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use restLookupsBpTribesGetSignalErrorFull() instead")
    void restLookupsBpTribesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsBpTribesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsBpTribesPostSignalErrorFull() instead")
    void restLookupsBpTribesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsBpTribesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaParametersGetSignalErrorFull() instead")
    void restLookupsCwaParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaParametersPostSignalErrorFull() instead")
    void restLookupsCwaParametersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaParametersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaPollutantsGetSignalErrorFull() instead")
    void restLookupsCwaPollutantsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaPollutantsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsCwaPollutantsPostSignalErrorFull() instead")
    void restLookupsCwaPollutantsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsCwaPollutantsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsFederalAgenciesGetSignalErrorFull() instead")
    void restLookupsFederalAgenciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsFederalAgenciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsFederalAgenciesPostSignalErrorFull() instead")
    void restLookupsFederalAgenciesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsFederalAgenciesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisInspectionTypesGetSignalErrorFull() instead")
    void restLookupsIcisInspectionTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisInspectionTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisInspectionTypesPostSignalErrorFull() instead")
    void restLookupsIcisInspectionTypesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisInspectionTypesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisLawSectionsGetSignalErrorFull() instead")
    void restLookupsIcisLawSectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisLawSectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsIcisLawSectionsPostSignalErrorFull() instead")
    void restLookupsIcisLawSectionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsIcisLawSectionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNaicsCodesGetSignalErrorFull() instead")
    void restLookupsNaicsCodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNaicsCodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNaicsCodesPostSignalErrorFull() instead")
    void restLookupsNaicsCodesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNaicsCodesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNpdesParametersGetSignalErrorFull() instead")
    void restLookupsNpdesParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNpdesParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsNpdesParametersPostSignalErrorFull() instead")
    void restLookupsNpdesParametersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsNpdesParametersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdCodeLuGetSignalErrorFull() instead")
    void restLookupsWbdCodeLuGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdCodeLuGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdCodeLuPostSignalErrorFull() instead")
    void restLookupsWbdCodeLuPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdCodeLuPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdNameLuGetSignalErrorFull() instead")
    void restLookupsWbdNameLuGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdNameLuGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restLookupsWbdNameLuPostSignalErrorFull() instead")
    void restLookupsWbdNameLuPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restLookupsWbdNameLuPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
