/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICwa07.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICwa07::OAICwa07(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICwa07::OAICwa07() {
    this->initializeModel();
}

OAICwa07::~OAICwa07() {}

void OAICwa07::initializeModel() {

    m_airids_isSet = false;
    m_airids_isValid = false;

    m_active_lower48_isSet = false;
    m_active_lower48_isValid = false;

    m_alr_exceedences_isSet = false;
    m_alr_exceedences_isValid = false;

    m_associated_pollutant_isSet = false;
    m_associated_pollutant_isValid = false;

    m_attains_aquatic_life_use_flg_isSet = false;
    m_attains_aquatic_life_use_flg_isValid = false;

    m_attains_au_category_isSet = false;
    m_attains_au_category_isValid = false;

    m_attains_cause_groups_isSet = false;
    m_attains_cause_groups_isValid = false;

    m_attains_cycle_year_isSet = false;
    m_attains_cycle_year_isValid = false;

    m_attains_exceptnl_use_flg_isSet = false;
    m_attains_exceptnl_use_flg_isValid = false;

    m_attains_imp_water_flg_isSet = false;
    m_attains_imp_water_flg_isValid = false;

    m_attains_possible_npdes_params_isSet = false;
    m_attains_possible_npdes_params_isValid = false;

    m_attains_recreation_use_flg_isSet = false;
    m_attains_recreation_use_flg_isValid = false;

    m_attains_shellfish_use_flg_isSet = false;
    m_attains_shellfish_use_flg_isValid = false;

    m_attains_source_isSet = false;
    m_attains_source_isValid = false;

    m_attains_state_causes_isSet = false;
    m_attains_state_causes_isValid = false;

    m_beach_close_last2yrs_flg_isSet = false;
    m_beach_close_last2yrs_flg_isValid = false;

    m_beach_close_last_year_flg_isSet = false;
    m_beach_close_last_year_flg_isValid = false;

    m_bio_analy_method_catgrys_isSet = false;
    m_bio_analy_method_catgrys_isValid = false;

    m_bio_analy_method_catgrys2016_isSet = false;
    m_bio_analy_method_catgrys2016_isValid = false;

    m_bio_analy_method_catgrys2017_isSet = false;
    m_bio_analy_method_catgrys2017_isValid = false;

    m_bio_analy_methods_isSet = false;
    m_bio_analy_methods_isValid = false;

    m_bio_analy_methods2016_isSet = false;
    m_bio_analy_methods2016_isValid = false;

    m_bio_analy_methods2017_isSet = false;
    m_bio_analy_methods2017_isValid = false;

    m_bio_comment_text_isSet = false;
    m_bio_comment_text_isValid = false;

    m_bio_comment_text2016_isSet = false;
    m_bio_comment_text2016_isValid = false;

    m_bio_comment_text2017_isSet = false;
    m_bio_comment_text2017_isValid = false;

    m_bio_incineration_sum_isSet = false;
    m_bio_incineration_sum_isValid = false;

    m_bio_incineration_sum2016_isSet = false;
    m_bio_incineration_sum2016_isValid = false;

    m_bio_incineration_sum2017_isSet = false;
    m_bio_incineration_sum2017_isValid = false;

    m_bio_land_application_sum_isSet = false;
    m_bio_land_application_sum_isValid = false;

    m_bio_land_application_sum2016_isSet = false;
    m_bio_land_application_sum2016_isValid = false;

    m_bio_land_application_sum2017_isSet = false;
    m_bio_land_application_sum2017_isValid = false;

    m_bio_mgmt_containers_isSet = false;
    m_bio_mgmt_containers_isValid = false;

    m_bio_mgmt_containers2016_isSet = false;
    m_bio_mgmt_containers2016_isValid = false;

    m_bio_mgmt_containers2017_isSet = false;
    m_bio_mgmt_containers2017_isValid = false;

    m_bio_mgmt_def_categories_isSet = false;
    m_bio_mgmt_def_categories_isValid = false;

    m_bio_mgmt_def_categories2016_isSet = false;
    m_bio_mgmt_def_categories2016_isValid = false;

    m_bio_mgmt_def_categories2017_isSet = false;
    m_bio_mgmt_def_categories2017_isValid = false;

    m_bio_mgmt_def_current_cnt_isSet = false;
    m_bio_mgmt_def_current_cnt_isValid = false;

    m_bio_mgmt_def_current_cnt2016_isSet = false;
    m_bio_mgmt_def_current_cnt2016_isValid = false;

    m_bio_mgmt_def_current_cnt2017_isSet = false;
    m_bio_mgmt_def_current_cnt2017_isValid = false;

    m_bio_mgmt_deficiencies_isSet = false;
    m_bio_mgmt_deficiencies_isValid = false;

    m_bio_mgmt_deficiencies2016_isSet = false;
    m_bio_mgmt_deficiencies2016_isValid = false;

    m_bio_mgmt_deficiencies2017_isSet = false;
    m_bio_mgmt_deficiencies2017_isValid = false;

    m_bio_mgmt_handlers_isSet = false;
    m_bio_mgmt_handlers_isValid = false;

    m_bio_mgmt_handlers2016_isSet = false;
    m_bio_mgmt_handlers2016_isValid = false;

    m_bio_mgmt_handlers2017_isSet = false;
    m_bio_mgmt_handlers2017_isValid = false;

    m_bio_mgmt_pathogens_isSet = false;
    m_bio_mgmt_pathogens_isValid = false;

    m_bio_mgmt_pathogens2016_isSet = false;
    m_bio_mgmt_pathogens2016_isValid = false;

    m_bio_mgmt_pathogens2017_isSet = false;
    m_bio_mgmt_pathogens2017_isValid = false;

    m_bio_mgmt_pathreds_isSet = false;
    m_bio_mgmt_pathreds_isValid = false;

    m_bio_mgmt_pathreds2016_isSet = false;
    m_bio_mgmt_pathreds2016_isValid = false;

    m_bio_mgmt_pathreds2017_isSet = false;
    m_bio_mgmt_pathreds2017_isValid = false;

    m_bio_mgmt_prctce_stypes_isSet = false;
    m_bio_mgmt_prctce_stypes_isValid = false;

    m_bio_mgmt_prctce_stypes2016_isSet = false;
    m_bio_mgmt_prctce_stypes2016_isValid = false;

    m_bio_mgmt_prctce_stypes2017_isSet = false;
    m_bio_mgmt_prctce_stypes2017_isValid = false;

    m_bio_mgmt_prctce_types_isSet = false;
    m_bio_mgmt_prctce_types_isValid = false;

    m_bio_mgmt_prctce_types2016_isSet = false;
    m_bio_mgmt_prctce_types2016_isValid = false;

    m_bio_mgmt_prctce_types2017_isSet = false;
    m_bio_mgmt_prctce_types2017_isValid = false;

    m_bio_mgmt_vectors_isSet = false;
    m_bio_mgmt_vectors_isValid = false;

    m_bio_mgmt_vectors2016_isSet = false;
    m_bio_mgmt_vectors2016_isValid = false;

    m_bio_mgmt_vectors2017_isSet = false;
    m_bio_mgmt_vectors2017_isValid = false;

    m_bio_other_management_sum_isSet = false;
    m_bio_other_management_sum_isValid = false;

    m_bio_other_management_sum2016_isSet = false;
    m_bio_other_management_sum2016_isValid = false;

    m_bio_other_management_sum2017_isSet = false;
    m_bio_other_management_sum2017_isValid = false;

    m_bio_other_mgmt_prctc_txts_isSet = false;
    m_bio_other_mgmt_prctc_txts_isValid = false;

    m_bio_other_mgmt_prctc_txts2016_isSet = false;
    m_bio_other_mgmt_prctc_txts2016_isValid = false;

    m_bio_other_mgmt_prctc_txts2017_isSet = false;
    m_bio_other_mgmt_prctc_txts2017_isValid = false;

    m_bio_qtrs_with_vio_isSet = false;
    m_bio_qtrs_with_vio_isValid = false;

    m_bio_report_date_isSet = false;
    m_bio_report_date_isValid = false;

    m_bio_report_date2016_isSet = false;
    m_bio_report_date2016_isValid = false;

    m_bio_report_date2017_isSet = false;
    m_bio_report_date2017_isValid = false;

    m_bio_report_year_isSet = false;
    m_bio_report_year_isValid = false;

    m_bio_report_years_isSet = false;
    m_bio_report_years_isValid = false;

    m_bio_reporting_obligations_isSet = false;
    m_bio_reporting_obligations_isValid = false;

    m_bio_reporting_obligations2016_isSet = false;
    m_bio_reporting_obligations2016_isValid = false;

    m_bio_reporting_obligations2017_isSet = false;
    m_bio_reporting_obligations2017_isValid = false;

    m_bio_surface_disp_sum_isSet = false;
    m_bio_surface_disp_sum_isValid = false;

    m_bio_surface_disp_sum2016_isSet = false;
    m_bio_surface_disp_sum2016_isValid = false;

    m_bio_surface_disp_sum2017_isSet = false;
    m_bio_surface_disp_sum2017_isValid = false;

    m_bio_total_volume_amt_isSet = false;
    m_bio_total_volume_amt_isValid = false;

    m_bio_total_volume_amt2016_isSet = false;
    m_bio_total_volume_amt2016_isValid = false;

    m_bio_total_volume_amt2017_isSet = false;
    m_bio_total_volume_amt2017_isValid = false;

    m_bio_trmnt_prcss_cmnt_txts2016_isSet = false;
    m_bio_trmnt_prcss_cmnt_txts2016_isValid = false;

    m_bio_trmnt_prcss_cmnt_txts2017_isSet = false;
    m_bio_trmnt_prcss_cmnt_txts2017_isValid = false;

    m_bio_trtmnt_prcss_cmmnt_txts_isSet = false;
    m_bio_trtmnt_prcss_cmmnt_txts_isValid = false;

    m_bio_trtmnt_processes_isSet = false;
    m_bio_trtmnt_processes_isValid = false;

    m_bio_trtmnt_processes2016_isSet = false;
    m_bio_trtmnt_processes2016_isValid = false;

    m_bio_trtmnt_processes2017_isSet = false;
    m_bio_trtmnt_processes2017_isValid = false;

    m_bio_vio_last_year_isSet = false;
    m_bio_vio_last_year_isValid = false;

    m_bio_vio_last_year_flag_isSet = false;
    m_bio_vio_last_year_flag_isValid = false;

    m_bio_vio_status_isSet = false;
    m_bio_vio_status_isValid = false;

    m_bio_viol_flag_isSet = false;
    m_bio_viol_flag_isValid = false;

    m_biosolids_flag_isSet = false;
    m_biosolids_flag_isValid = false;

    m_cwp13qtrs_compl_history_isSet = false;
    m_cwp13qtrs_compl_history_isValid = false;

    m_cwp_actual_average_flow_nmbr_isSet = false;
    m_cwp_actual_average_flow_nmbr_isValid = false;

    m_cwp_bio_fea_count_isSet = false;
    m_cwp_bio_fea_count_isValid = false;

    m_cwp_bio_iea_count_isSet = false;
    m_cwp_bio_iea_count_isValid = false;

    m_cwp_bio_insp_count_isSet = false;
    m_cwp_bio_insp_count_isValid = false;

    m_cwp_bio_penalties_isSet = false;
    m_cwp_bio_penalties_isValid = false;

    m_cwp_case_ids_isSet = false;
    m_cwp_case_ids_isValid = false;

    m_cwp_city_isSet = false;
    m_cwp_city_isValid = false;

    m_cwp_compliance_tracking_isSet = false;
    m_cwp_compliance_tracking_isValid = false;

    m_cwp_county_isSet = false;
    m_cwp_county_isValid = false;

    m_cwp_cso_flag_isSet = false;
    m_cwp_cso_flag_isValid = false;

    m_cwp_cso_outfalls_isSet = false;
    m_cwp_cso_outfalls_isValid = false;

    m_cwp_date_last_bio_fea_isSet = false;
    m_cwp_date_last_bio_fea_isValid = false;

    m_cwp_date_last_bio_fea_epa_isSet = false;
    m_cwp_date_last_bio_fea_epa_isValid = false;

    m_cwp_date_last_bio_fea_st_isSet = false;
    m_cwp_date_last_bio_fea_st_isValid = false;

    m_cwp_date_last_bio_iea_isSet = false;
    m_cwp_date_last_bio_iea_isValid = false;

    m_cwp_date_last_bio_iea_epa_isSet = false;
    m_cwp_date_last_bio_iea_epa_isValid = false;

    m_cwp_date_last_bio_iea_st_isSet = false;
    m_cwp_date_last_bio_iea_st_isValid = false;

    m_cwp_date_last_bio_insp_isSet = false;
    m_cwp_date_last_bio_insp_isValid = false;

    m_cwp_date_last_bio_insp_epa_isSet = false;
    m_cwp_date_last_bio_insp_epa_isValid = false;

    m_cwp_date_last_bio_insp_st_isSet = false;
    m_cwp_date_last_bio_insp_st_isValid = false;

    m_cwp_date_last_bio_penalty_isSet = false;
    m_cwp_date_last_bio_penalty_isValid = false;

    m_cwp_date_last_fea_isSet = false;
    m_cwp_date_last_fea_isValid = false;

    m_cwp_date_last_fea_epa_isSet = false;
    m_cwp_date_last_fea_epa_isValid = false;

    m_cwp_date_last_fea_st_isSet = false;
    m_cwp_date_last_fea_st_isValid = false;

    m_cwp_date_last_iea_epa_isSet = false;
    m_cwp_date_last_iea_epa_isValid = false;

    m_cwp_date_last_iea_st_isSet = false;
    m_cwp_date_last_iea_st_isValid = false;

    m_cwp_date_last_informal_ea_isSet = false;
    m_cwp_date_last_informal_ea_isValid = false;

    m_cwp_date_last_insp_epa_isSet = false;
    m_cwp_date_last_insp_epa_isValid = false;

    m_cwp_date_last_insp_st_isSet = false;
    m_cwp_date_last_insp_st_isValid = false;

    m_cwp_date_last_inspection_isSet = false;
    m_cwp_date_last_inspection_isValid = false;

    m_cwp_date_last_penalty_isSet = false;
    m_cwp_date_last_penalty_isValid = false;

    m_cwp_days_last_bio_insp_isSet = false;
    m_cwp_days_last_bio_insp_isValid = false;

    m_cwp_days_last_inspection_isSet = false;
    m_cwp_days_last_inspection_isValid = false;

    m_cwpe90_cnt_isSet = false;
    m_cwpe90_cnt_isValid = false;

    m_cwpepa_region_isSet = false;
    m_cwpepa_region_isValid = false;

    m_cwp_effective_date_isSet = false;
    m_cwp_effective_date_isValid = false;

    m_cwp_expiration_date_isSet = false;
    m_cwp_expiration_date_isValid = false;

    m_cwpfips_code_isSet = false;
    m_cwpfips_code_isValid = false;

    m_cwp_facility_type_code_isSet = false;
    m_cwp_facility_type_code_isValid = false;

    m_cwp_facility_type_indicator_isSet = false;
    m_cwp_facility_type_indicator_isValid = false;

    m_cwp_formal_ea_cnt_isSet = false;
    m_cwp_formal_ea_cnt_isValid = false;

    m_cwp_imp_water_flg_isSet = false;
    m_cwp_imp_water_flg_isValid = false;

    m_cwp_indian_cntry_flg_isSet = false;
    m_cwp_indian_cntry_flg_isValid = false;

    m_cwp_informal_enf_act_count_isSet = false;
    m_cwp_informal_enf_act_count_isValid = false;

    m_cwp_inspection_count_isSet = false;
    m_cwp_inspection_count_isValid = false;

    m_cwp_issue_date_isSet = false;
    m_cwp_issue_date_isValid = false;

    m_cwp_major_minor_status_flag_isSet = false;
    m_cwp_major_minor_status_flag_isValid = false;

    m_cwpnaics_codes_isSet = false;
    m_cwpnaics_codes_isValid = false;

    m_cwp_name_isSet = false;
    m_cwp_name_isValid = false;

    m_cwp_permit_status_code_isSet = false;
    m_cwp_permit_status_code_isValid = false;

    m_cwp_permit_status_desc_isSet = false;
    m_cwp_permit_status_desc_isValid = false;

    m_cwp_permit_type_code_isSet = false;
    m_cwp_permit_type_code_isValid = false;

    m_cwp_permit_type_desc_isSet = false;
    m_cwp_permit_type_desc_isValid = false;

    m_cwp_qtrs_with_nc_isSet = false;
    m_cwp_qtrs_with_nc_isValid = false;

    m_cwp_qtrs_with_snc_isSet = false;
    m_cwp_qtrs_with_snc_isValid = false;

    m_cwpsic_codes_isSet = false;
    m_cwpsic_codes_isValid = false;

    m_cwpsnc_event_desc_isSet = false;
    m_cwpsnc_event_desc_isValid = false;

    m_cwpsnc_status_isSet = false;
    m_cwpsnc_status_isValid = false;

    m_cwpsnc_status_date_isSet = false;
    m_cwpsnc_status_date_isValid = false;

    m_cwp_state_isSet = false;
    m_cwp_state_isValid = false;

    m_cwp_state_district_isSet = false;
    m_cwp_state_district_isValid = false;

    m_cwp_state_water_body_code_isSet = false;
    m_cwp_state_water_body_code_isValid = false;

    m_cwp_state_water_body_name_isSet = false;
    m_cwp_state_water_body_name_isValid = false;

    m_cwp_status_isSet = false;
    m_cwp_status_isValid = false;

    m_cwp_street_isSet = false;
    m_cwp_street_isValid = false;

    m_cwptr_ibal_land_code_isSet = false;
    m_cwptr_ibal_land_code_isValid = false;

    m_cwp_termination_date_isSet = false;
    m_cwp_termination_date_isValid = false;

    m_cwp_total_design_flow_nmbr_isSet = false;
    m_cwp_total_design_flow_nmbr_isValid = false;

    m_cwp_total_penalties_isSet = false;
    m_cwp_total_penalties_isValid = false;

    m_cwp_version_nmbr_isSet = false;
    m_cwp_version_nmbr_isValid = false;

    m_cwp_vio_status_isSet = false;
    m_cwp_vio_status_isValid = false;

    m_cwp_viol_status_isSet = false;
    m_cwp_viol_status_isValid = false;

    m_cwp_zip_isSet = false;
    m_cwp_zip_isValid = false;

    m_calculated_accuracy_meters_isSet = false;
    m_calculated_accuracy_meters_isValid = false;

    m_census_block_group_isSet = false;
    m_census_block_group_isValid = false;

    m_certified_date_isSet = false;
    m_certified_date_isValid = false;

    m_chesapeake_bay_flag_isSet = false;
    m_chesapeake_bay_flag_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_control_measure_isSet = false;
    m_control_measure_isValid = false;

    m_control_measure_schedule_isSet = false;
    m_control_measure_schedule_isValid = false;

    m_curr_sv_flag_isSet = false;
    m_curr_sv_flag_isValid = false;

    m_curr_vio_flag_isSet = false;
    m_curr_vio_flag_isValid = false;

    m_dmr_impaired_poll_isSet = false;
    m_dmr_impaired_poll_isValid = false;

    m_dmr_pounds_isSet = false;
    m_dmr_pounds_isValid = false;

    m_dmr_twpe_isSet = false;
    m_dmr_twpe_isValid = false;

    m_dsch_to_ms4_isSet = false;
    m_dsch_to_ms4_isValid = false;

    m_e90_exceeds1yr_isSet = false;
    m_e90_exceeds1yr_isValid = false;

    m_e90_exceeds2yr_isSet = false;
    m_e90_exceeds2yr_isValid = false;

    m_e90_exceeds3yr_isSet = false;
    m_e90_exceeds3yr_isValid = false;

    m_e90_exceeds4yr_isSet = false;
    m_e90_exceeds4yr_isValid = false;

    m_e90_exceeds5yr_isSet = false;
    m_e90_exceeds5yr_isValid = false;

    m_e90_pollutants1yr_isSet = false;
    m_e90_pollutants1yr_isValid = false;

    m_e90_pollutants2yr_isSet = false;
    m_e90_pollutants2yr_isValid = false;

    m_e90_pollutants3yr_isSet = false;
    m_e90_pollutants3yr_isValid = false;

    m_e90_pollutants4yr_isSet = false;
    m_e90_pollutants4yr_isValid = false;

    m_e90_pollutants5yr_isSet = false;
    m_e90_pollutants5yr_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_ea5yr_flag_isSet = false;
    m_ea5yr_flag_isValid = false;

    m_eff_charts_flag_isSet = false;
    m_eff_charts_flag_isValid = false;

    m_eff_exceeds_isSet = false;
    m_eff_exceeds_isValid = false;

    m_ejscreen_flag_isSet = false;
    m_ejscreen_flag_isValid = false;

    m_ejscreen_flag_us_isSet = false;
    m_ejscreen_flag_us_isValid = false;

    m_electr_rpt_waiver_eff_date_isSet = false;
    m_electr_rpt_waiver_eff_date_isValid = false;

    m_electr_rpt_waiver_exp_date_isSet = false;
    m_electr_rpt_waiver_exp_date_isValid = false;

    m_electr_rpt_waiver_type_code_isSet = false;
    m_electr_rpt_waiver_type_code_isValid = false;

    m_electr_rpt_waiver_type_desc_isSet = false;
    m_electr_rpt_waiver_type_desc_isValid = false;

    m_electr_submission_type_code_isSet = false;
    m_electr_submission_type_code_isValid = false;

    m_electr_submission_type_desc_isSet = false;
    m_electr_submission_type_desc_isValid = false;

    m_exposed_activity_isSet = false;
    m_exposed_activity_isValid = false;

    m_fac_county_name_isSet = false;
    m_fac_county_name_isValid = false;

    m_fac_derived_huc_isSet = false;
    m_fac_derived_huc_isValid = false;

    m_fac_derived_tr_ibes_isSet = false;
    m_fac_derived_tr_ibes_isValid = false;

    m_fac_derived_wbd_isSet = false;
    m_fac_derived_wbd_isValid = false;

    m_fac_derived_wbdhu8_isSet = false;
    m_fac_derived_wbdhu8_isValid = false;

    m_fac_derived_wbdhu8_name_isSet = false;
    m_fac_derived_wbdhu8_name_isValid = false;

    m_fac_derived_wbd_name_isSet = false;
    m_fac_derived_wbd_name_isValid = false;

    m_fac_fips_code_isSet = false;
    m_fac_fips_code_isValid = false;

    m_fac_federal_agency_code_isSet = false;
    m_fac_federal_agency_code_isValid = false;

    m_fac_federal_agency_name_isSet = false;
    m_fac_federal_agency_name_isValid = false;

    m_fac_indian_cntry_flg_isSet = false;
    m_fac_indian_cntry_flg_isValid = false;

    m_fac_indian_spatial_flg_isSet = false;
    m_fac_indian_spatial_flg_isValid = false;

    m_fac_lat_isSet = false;
    m_fac_lat_isValid = false;

    m_fac_long_isSet = false;
    m_fac_long_isValid = false;

    m_fac_map_flg_isSet = false;
    m_fac_map_flg_isValid = false;

    m_fac_map_icon_isSet = false;
    m_fac_map_icon_isValid = false;

    m_fac_percent_minority_isSet = false;
    m_fac_percent_minority_isValid = false;

    m_fac_pop_den_isSet = false;
    m_fac_pop_den_isValid = false;

    m_fac_std_county_name_isSet = false;
    m_fac_std_county_name_isValid = false;

    m_fac_tri_potw_trans_isSet = false;
    m_fac_tri_potw_trans_isValid = false;

    m_fac_tri_reporter_isSet = false;
    m_fac_tri_reporter_isValid = false;

    m_fac_trisw_rel_isSet = false;
    m_fac_trisw_rel_isValid = false;

    m_fac_us_mex_border_flg_isSet = false;
    m_fac_us_mex_border_flg_isValid = false;

    m_historic_criterion_code_isSet = false;
    m_historic_criterion_code_isValid = false;

    m_indsw_flag_isSet = false;
    m_indsw_flag_isValid = false;

    m_infea5yr_flag_isSet = false;
    m_infea5yr_flag_isValid = false;

    m_insp5yr_flag_isSet = false;
    m_insp5yr_flag_isValid = false;

    m_insp_def5yr_cnt_isSet = false;
    m_insp_def5yr_cnt_isValid = false;

    m_issuing_agency_isSet = false;
    m_issuing_agency_isValid = false;

    m_last_dmr_value_rcvd_date_isSet = false;
    m_last_dmr_value_rcvd_date_isValid = false;

    m_lim_pollutant_isSet = false;
    m_lim_pollutant_isValid = false;

    m_lower48_isSet = false;
    m_lower48_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_master_external_permit_nmbr_isSet = false;
    m_master_external_permit_nmbr_isValid = false;

    m_max_pctile_us_isSet = false;
    m_max_pctile_us_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_miss_dmr_qtrs_isSet = false;
    m_miss_dmr_qtrs_isValid = false;

    m_msgp_corrective_action_smmry_isSet = false;
    m_msgp_corrective_action_smmry_isValid = false;

    m_msgp_facility_inspctn_smmry_isSet = false;
    m_msgp_facility_inspctn_smmry_isValid = false;

    m_msgp_last_report_year_isSet = false;
    m_msgp_last_report_year_isValid = false;

    m_msgp_no_further_rdctn_rtnle_isSet = false;
    m_msgp_no_further_rdctn_rtnle_isValid = false;

    m_msgp_permit_type_isSet = false;
    m_msgp_permit_type_isValid = false;

    m_msgp_visual_assessment_smmry_isSet = false;
    m_msgp_visual_assessment_smmry_isValid = false;

    m_npdes_data_groups_isSet = false;
    m_npdes_data_groups_isValid = false;

    m_npdes_data_groups_descs_isSet = false;
    m_npdes_data_groups_descs_isValid = false;

    m_npdesids_isSet = false;
    m_npdesids_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_other_permit_ids_isSet = false;
    m_other_permit_ids_isValid = false;

    m_over80_count_us_isSet = false;
    m_over80_count_us_isValid = false;

    m_past_cal_yr_average_flow_isSet = false;
    m_past_cal_yr_average_flow_isValid = false;

    m_past_cal_yr_conv_pol_ovr_lmt_isSet = false;
    m_past_cal_yr_conv_pol_ovr_lmt_isValid = false;

    m_past_cal_yr_conv_pollutants_isSet = false;
    m_past_cal_yr_conv_pollutants_isValid = false;

    m_past_cal_yr_toxic_pol_ovr_lmt_isSet = false;
    m_past_cal_yr_toxic_pol_ovr_lmt_isValid = false;

    m_past_cal_yr_toxic_pollutants_isSet = false;
    m_past_cal_yr_toxic_pollutants_isValid = false;

    m_pctile_cancer_us_isSet = false;
    m_pctile_cancer_us_isValid = false;

    m_pctile_dpm_us_isSet = false;
    m_pctile_dpm_us_isValid = false;

    m_pctile_o3_us_isSet = false;
    m_pctile_o3_us_isValid = false;

    m_pctile_pctpre1960_us_isSet = false;
    m_pctile_pctpre1960_us_isValid = false;

    m_pctile_pm_us_isSet = false;
    m_pctile_pm_us_isValid = false;

    m_pctile_proximity_npdesus_isSet = false;
    m_pctile_proximity_npdesus_isValid = false;

    m_pctile_proximity_npl_us_isSet = false;
    m_pctile_proximity_npl_us_isValid = false;

    m_pctile_proximity_rmp_us_isSet = false;
    m_pctile_proximity_rmp_us_isValid = false;

    m_pctile_proximity_tsdf_us_isSet = false;
    m_pctile_proximity_tsdf_us_isValid = false;

    m_pctile_resp_us_isSet = false;
    m_pctile_resp_us_isValid = false;

    m_pctile_traffic_score_us_isSet = false;
    m_pctile_traffic_score_us_isValid = false;

    m_permit_components_isSet = false;
    m_permit_components_isValid = false;

    m_permit_name_isSet = false;
    m_permit_name_isValid = false;

    m_permitting_agency_isSet = false;
    m_permitting_agency_isValid = false;

    m_poll_with_violation_isSet = false;
    m_poll_with_violation_isValid = false;

    m_rcraids_isSet = false;
    m_rcraids_isValid = false;

    m_rad_gnis_name_isSet = false;
    m_rad_gnis_name_isValid = false;

    m_rad_hu12_name_isSet = false;
    m_rad_hu12_name_isValid = false;

    m_rad_reachcode_isSet = false;
    m_rad_reachcode_isValid = false;

    m_rad_wbdhu8_isSet = false;
    m_rad_wbdhu8_isValid = false;

    m_rad_wbdhu8_name_isSet = false;
    m_rad_wbdhu8_name_isValid = false;

    m_rad_wbd_huc12_isSet = false;
    m_rad_wbd_huc12_isValid = false;

    m_receiving_ms4_name_isSet = false;
    m_receiving_ms4_name_isValid = false;

    m_reference_point_isSet = false;
    m_reference_point_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_rmp_ids_isSet = false;
    m_rmp_ids_isValid = false;

    m_sdwaids_isSet = false;
    m_sdwaids_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_species_critical_habital_flag_isSet = false;
    m_species_critical_habital_flag_isValid = false;

    m_state_auth_biosolids_isSet = false;
    m_state_auth_biosolids_isValid = false;

    m_state_auth_fedfac_isSet = false;
    m_state_auth_fedfac_isValid = false;

    m_state_auth_gen_isSet = false;
    m_state_auth_gen_isValid = false;

    m_state_auth_npdes_isSet = false;
    m_state_auth_npdes_isValid = false;

    m_state_auth_pretreat_isSet = false;
    m_state_auth_pretreat_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_storm_water_area_isSet = false;
    m_storm_water_area_isValid = false;

    m_submitted_date_isSet = false;
    m_submitted_date_isValid = false;

    m_subsector_isSet = false;
    m_subsector_isValid = false;

    m_swppp_url_isSet = false;
    m_swppp_url_isValid = false;

    m_triids_isSet = false;
    m_triids_isValid = false;

    m_tr_ibal_flag_isSet = false;
    m_tr_ibal_flag_isValid = false;

    m_type_of_monitoring_isSet = false;
    m_type_of_monitoring_isValid = false;

    m_type_of_water_isSet = false;
    m_type_of_water_isValid = false;

    m_vio_last_year_isSet = false;
    m_vio_last_year_isValid = false;

    m_viol_flag_isSet = false;
    m_viol_flag_isValid = false;

    m_web_docs_isSet = false;
    m_web_docs_isValid = false;
}

void OAICwa07::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICwa07::fromJsonObject(QJsonObject json) {

    m_airids_isValid = ::OpenAPI::fromJsonValue(m_airids, json[QString("AIRIDs")]);
    m_airids_isSet = !json[QString("AIRIDs")].isNull() && m_airids_isValid;

    m_active_lower48_isValid = ::OpenAPI::fromJsonValue(m_active_lower48, json[QString("ActiveLower48")]);
    m_active_lower48_isSet = !json[QString("ActiveLower48")].isNull() && m_active_lower48_isValid;

    m_alr_exceedences_isValid = ::OpenAPI::fromJsonValue(m_alr_exceedences, json[QString("AlrExceedences")]);
    m_alr_exceedences_isSet = !json[QString("AlrExceedences")].isNull() && m_alr_exceedences_isValid;

    m_associated_pollutant_isValid = ::OpenAPI::fromJsonValue(m_associated_pollutant, json[QString("AssociatedPollutant")]);
    m_associated_pollutant_isSet = !json[QString("AssociatedPollutant")].isNull() && m_associated_pollutant_isValid;

    m_attains_aquatic_life_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_aquatic_life_use_flg, json[QString("AttainsAquaticLifeUseFlg")]);
    m_attains_aquatic_life_use_flg_isSet = !json[QString("AttainsAquaticLifeUseFlg")].isNull() && m_attains_aquatic_life_use_flg_isValid;

    m_attains_au_category_isValid = ::OpenAPI::fromJsonValue(m_attains_au_category, json[QString("AttainsAuCategory")]);
    m_attains_au_category_isSet = !json[QString("AttainsAuCategory")].isNull() && m_attains_au_category_isValid;

    m_attains_cause_groups_isValid = ::OpenAPI::fromJsonValue(m_attains_cause_groups, json[QString("AttainsCauseGroups")]);
    m_attains_cause_groups_isSet = !json[QString("AttainsCauseGroups")].isNull() && m_attains_cause_groups_isValid;

    m_attains_cycle_year_isValid = ::OpenAPI::fromJsonValue(m_attains_cycle_year, json[QString("AttainsCycleYear")]);
    m_attains_cycle_year_isSet = !json[QString("AttainsCycleYear")].isNull() && m_attains_cycle_year_isValid;

    m_attains_exceptnl_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_exceptnl_use_flg, json[QString("AttainsExceptnlUseFlg")]);
    m_attains_exceptnl_use_flg_isSet = !json[QString("AttainsExceptnlUseFlg")].isNull() && m_attains_exceptnl_use_flg_isValid;

    m_attains_imp_water_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_imp_water_flg, json[QString("AttainsImpWaterFlg")]);
    m_attains_imp_water_flg_isSet = !json[QString("AttainsImpWaterFlg")].isNull() && m_attains_imp_water_flg_isValid;

    m_attains_possible_npdes_params_isValid = ::OpenAPI::fromJsonValue(m_attains_possible_npdes_params, json[QString("AttainsPossibleNPDESParams")]);
    m_attains_possible_npdes_params_isSet = !json[QString("AttainsPossibleNPDESParams")].isNull() && m_attains_possible_npdes_params_isValid;

    m_attains_recreation_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_recreation_use_flg, json[QString("AttainsRecreationUseFlg")]);
    m_attains_recreation_use_flg_isSet = !json[QString("AttainsRecreationUseFlg")].isNull() && m_attains_recreation_use_flg_isValid;

    m_attains_shellfish_use_flg_isValid = ::OpenAPI::fromJsonValue(m_attains_shellfish_use_flg, json[QString("AttainsShellfishUseFlg")]);
    m_attains_shellfish_use_flg_isSet = !json[QString("AttainsShellfishUseFlg")].isNull() && m_attains_shellfish_use_flg_isValid;

    m_attains_source_isValid = ::OpenAPI::fromJsonValue(m_attains_source, json[QString("AttainsSource")]);
    m_attains_source_isSet = !json[QString("AttainsSource")].isNull() && m_attains_source_isValid;

    m_attains_state_causes_isValid = ::OpenAPI::fromJsonValue(m_attains_state_causes, json[QString("AttainsStateCauses")]);
    m_attains_state_causes_isSet = !json[QString("AttainsStateCauses")].isNull() && m_attains_state_causes_isValid;

    m_beach_close_last2yrs_flg_isValid = ::OpenAPI::fromJsonValue(m_beach_close_last2yrs_flg, json[QString("BeachCloseLast2yrsFlg")]);
    m_beach_close_last2yrs_flg_isSet = !json[QString("BeachCloseLast2yrsFlg")].isNull() && m_beach_close_last2yrs_flg_isValid;

    m_beach_close_last_year_flg_isValid = ::OpenAPI::fromJsonValue(m_beach_close_last_year_flg, json[QString("BeachCloseLastYearFlg")]);
    m_beach_close_last_year_flg_isSet = !json[QString("BeachCloseLastYearFlg")].isNull() && m_beach_close_last_year_flg_isValid;

    m_bio_analy_method_catgrys_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_method_catgrys, json[QString("BioAnalyMethodCatgrys")]);
    m_bio_analy_method_catgrys_isSet = !json[QString("BioAnalyMethodCatgrys")].isNull() && m_bio_analy_method_catgrys_isValid;

    m_bio_analy_method_catgrys2016_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_method_catgrys2016, json[QString("BioAnalyMethodCatgrys2016")]);
    m_bio_analy_method_catgrys2016_isSet = !json[QString("BioAnalyMethodCatgrys2016")].isNull() && m_bio_analy_method_catgrys2016_isValid;

    m_bio_analy_method_catgrys2017_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_method_catgrys2017, json[QString("BioAnalyMethodCatgrys2017")]);
    m_bio_analy_method_catgrys2017_isSet = !json[QString("BioAnalyMethodCatgrys2017")].isNull() && m_bio_analy_method_catgrys2017_isValid;

    m_bio_analy_methods_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_methods, json[QString("BioAnalyMethods")]);
    m_bio_analy_methods_isSet = !json[QString("BioAnalyMethods")].isNull() && m_bio_analy_methods_isValid;

    m_bio_analy_methods2016_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_methods2016, json[QString("BioAnalyMethods2016")]);
    m_bio_analy_methods2016_isSet = !json[QString("BioAnalyMethods2016")].isNull() && m_bio_analy_methods2016_isValid;

    m_bio_analy_methods2017_isValid = ::OpenAPI::fromJsonValue(m_bio_analy_methods2017, json[QString("BioAnalyMethods2017")]);
    m_bio_analy_methods2017_isSet = !json[QString("BioAnalyMethods2017")].isNull() && m_bio_analy_methods2017_isValid;

    m_bio_comment_text_isValid = ::OpenAPI::fromJsonValue(m_bio_comment_text, json[QString("BioCommentText")]);
    m_bio_comment_text_isSet = !json[QString("BioCommentText")].isNull() && m_bio_comment_text_isValid;

    m_bio_comment_text2016_isValid = ::OpenAPI::fromJsonValue(m_bio_comment_text2016, json[QString("BioCommentText2016")]);
    m_bio_comment_text2016_isSet = !json[QString("BioCommentText2016")].isNull() && m_bio_comment_text2016_isValid;

    m_bio_comment_text2017_isValid = ::OpenAPI::fromJsonValue(m_bio_comment_text2017, json[QString("BioCommentText2017")]);
    m_bio_comment_text2017_isSet = !json[QString("BioCommentText2017")].isNull() && m_bio_comment_text2017_isValid;

    m_bio_incineration_sum_isValid = ::OpenAPI::fromJsonValue(m_bio_incineration_sum, json[QString("BioIncinerationSum")]);
    m_bio_incineration_sum_isSet = !json[QString("BioIncinerationSum")].isNull() && m_bio_incineration_sum_isValid;

    m_bio_incineration_sum2016_isValid = ::OpenAPI::fromJsonValue(m_bio_incineration_sum2016, json[QString("BioIncinerationSum2016")]);
    m_bio_incineration_sum2016_isSet = !json[QString("BioIncinerationSum2016")].isNull() && m_bio_incineration_sum2016_isValid;

    m_bio_incineration_sum2017_isValid = ::OpenAPI::fromJsonValue(m_bio_incineration_sum2017, json[QString("BioIncinerationSum2017")]);
    m_bio_incineration_sum2017_isSet = !json[QString("BioIncinerationSum2017")].isNull() && m_bio_incineration_sum2017_isValid;

    m_bio_land_application_sum_isValid = ::OpenAPI::fromJsonValue(m_bio_land_application_sum, json[QString("BioLandApplicationSum")]);
    m_bio_land_application_sum_isSet = !json[QString("BioLandApplicationSum")].isNull() && m_bio_land_application_sum_isValid;

    m_bio_land_application_sum2016_isValid = ::OpenAPI::fromJsonValue(m_bio_land_application_sum2016, json[QString("BioLandApplicationSum2016")]);
    m_bio_land_application_sum2016_isSet = !json[QString("BioLandApplicationSum2016")].isNull() && m_bio_land_application_sum2016_isValid;

    m_bio_land_application_sum2017_isValid = ::OpenAPI::fromJsonValue(m_bio_land_application_sum2017, json[QString("BioLandApplicationSum2017")]);
    m_bio_land_application_sum2017_isSet = !json[QString("BioLandApplicationSum2017")].isNull() && m_bio_land_application_sum2017_isValid;

    m_bio_mgmt_containers_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_containers, json[QString("BioMgmtContainers")]);
    m_bio_mgmt_containers_isSet = !json[QString("BioMgmtContainers")].isNull() && m_bio_mgmt_containers_isValid;

    m_bio_mgmt_containers2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_containers2016, json[QString("BioMgmtContainers2016")]);
    m_bio_mgmt_containers2016_isSet = !json[QString("BioMgmtContainers2016")].isNull() && m_bio_mgmt_containers2016_isValid;

    m_bio_mgmt_containers2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_containers2017, json[QString("BioMgmtContainers2017")]);
    m_bio_mgmt_containers2017_isSet = !json[QString("BioMgmtContainers2017")].isNull() && m_bio_mgmt_containers2017_isValid;

    m_bio_mgmt_def_categories_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_categories, json[QString("BioMgmtDefCategories")]);
    m_bio_mgmt_def_categories_isSet = !json[QString("BioMgmtDefCategories")].isNull() && m_bio_mgmt_def_categories_isValid;

    m_bio_mgmt_def_categories2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_categories2016, json[QString("BioMgmtDefCategories2016")]);
    m_bio_mgmt_def_categories2016_isSet = !json[QString("BioMgmtDefCategories2016")].isNull() && m_bio_mgmt_def_categories2016_isValid;

    m_bio_mgmt_def_categories2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_categories2017, json[QString("BioMgmtDefCategories2017")]);
    m_bio_mgmt_def_categories2017_isSet = !json[QString("BioMgmtDefCategories2017")].isNull() && m_bio_mgmt_def_categories2017_isValid;

    m_bio_mgmt_def_current_cnt_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_current_cnt, json[QString("BioMgmtDefCurrentCnt")]);
    m_bio_mgmt_def_current_cnt_isSet = !json[QString("BioMgmtDefCurrentCnt")].isNull() && m_bio_mgmt_def_current_cnt_isValid;

    m_bio_mgmt_def_current_cnt2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_current_cnt2016, json[QString("BioMgmtDefCurrentCnt2016")]);
    m_bio_mgmt_def_current_cnt2016_isSet = !json[QString("BioMgmtDefCurrentCnt2016")].isNull() && m_bio_mgmt_def_current_cnt2016_isValid;

    m_bio_mgmt_def_current_cnt2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_def_current_cnt2017, json[QString("BioMgmtDefCurrentCnt2017")]);
    m_bio_mgmt_def_current_cnt2017_isSet = !json[QString("BioMgmtDefCurrentCnt2017")].isNull() && m_bio_mgmt_def_current_cnt2017_isValid;

    m_bio_mgmt_deficiencies_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_deficiencies, json[QString("BioMgmtDeficiencies")]);
    m_bio_mgmt_deficiencies_isSet = !json[QString("BioMgmtDeficiencies")].isNull() && m_bio_mgmt_deficiencies_isValid;

    m_bio_mgmt_deficiencies2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_deficiencies2016, json[QString("BioMgmtDeficiencies2016")]);
    m_bio_mgmt_deficiencies2016_isSet = !json[QString("BioMgmtDeficiencies2016")].isNull() && m_bio_mgmt_deficiencies2016_isValid;

    m_bio_mgmt_deficiencies2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_deficiencies2017, json[QString("BioMgmtDeficiencies2017")]);
    m_bio_mgmt_deficiencies2017_isSet = !json[QString("BioMgmtDeficiencies2017")].isNull() && m_bio_mgmt_deficiencies2017_isValid;

    m_bio_mgmt_handlers_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_handlers, json[QString("BioMgmtHandlers")]);
    m_bio_mgmt_handlers_isSet = !json[QString("BioMgmtHandlers")].isNull() && m_bio_mgmt_handlers_isValid;

    m_bio_mgmt_handlers2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_handlers2016, json[QString("BioMgmtHandlers2016")]);
    m_bio_mgmt_handlers2016_isSet = !json[QString("BioMgmtHandlers2016")].isNull() && m_bio_mgmt_handlers2016_isValid;

    m_bio_mgmt_handlers2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_handlers2017, json[QString("BioMgmtHandlers2017")]);
    m_bio_mgmt_handlers2017_isSet = !json[QString("BioMgmtHandlers2017")].isNull() && m_bio_mgmt_handlers2017_isValid;

    m_bio_mgmt_pathogens_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathogens, json[QString("BioMgmtPathogens")]);
    m_bio_mgmt_pathogens_isSet = !json[QString("BioMgmtPathogens")].isNull() && m_bio_mgmt_pathogens_isValid;

    m_bio_mgmt_pathogens2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathogens2016, json[QString("BioMgmtPathogens2016")]);
    m_bio_mgmt_pathogens2016_isSet = !json[QString("BioMgmtPathogens2016")].isNull() && m_bio_mgmt_pathogens2016_isValid;

    m_bio_mgmt_pathogens2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathogens2017, json[QString("BioMgmtPathogens2017")]);
    m_bio_mgmt_pathogens2017_isSet = !json[QString("BioMgmtPathogens2017")].isNull() && m_bio_mgmt_pathogens2017_isValid;

    m_bio_mgmt_pathreds_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathreds, json[QString("BioMgmtPathreds")]);
    m_bio_mgmt_pathreds_isSet = !json[QString("BioMgmtPathreds")].isNull() && m_bio_mgmt_pathreds_isValid;

    m_bio_mgmt_pathreds2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathreds2016, json[QString("BioMgmtPathreds2016")]);
    m_bio_mgmt_pathreds2016_isSet = !json[QString("BioMgmtPathreds2016")].isNull() && m_bio_mgmt_pathreds2016_isValid;

    m_bio_mgmt_pathreds2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_pathreds2017, json[QString("BioMgmtPathreds2017")]);
    m_bio_mgmt_pathreds2017_isSet = !json[QString("BioMgmtPathreds2017")].isNull() && m_bio_mgmt_pathreds2017_isValid;

    m_bio_mgmt_prctce_stypes_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_stypes, json[QString("BioMgmtPrctceStypes")]);
    m_bio_mgmt_prctce_stypes_isSet = !json[QString("BioMgmtPrctceStypes")].isNull() && m_bio_mgmt_prctce_stypes_isValid;

    m_bio_mgmt_prctce_stypes2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_stypes2016, json[QString("BioMgmtPrctceStypes2016")]);
    m_bio_mgmt_prctce_stypes2016_isSet = !json[QString("BioMgmtPrctceStypes2016")].isNull() && m_bio_mgmt_prctce_stypes2016_isValid;

    m_bio_mgmt_prctce_stypes2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_stypes2017, json[QString("BioMgmtPrctceStypes2017")]);
    m_bio_mgmt_prctce_stypes2017_isSet = !json[QString("BioMgmtPrctceStypes2017")].isNull() && m_bio_mgmt_prctce_stypes2017_isValid;

    m_bio_mgmt_prctce_types_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_types, json[QString("BioMgmtPrctceTypes")]);
    m_bio_mgmt_prctce_types_isSet = !json[QString("BioMgmtPrctceTypes")].isNull() && m_bio_mgmt_prctce_types_isValid;

    m_bio_mgmt_prctce_types2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_types2016, json[QString("BioMgmtPrctceTypes2016")]);
    m_bio_mgmt_prctce_types2016_isSet = !json[QString("BioMgmtPrctceTypes2016")].isNull() && m_bio_mgmt_prctce_types2016_isValid;

    m_bio_mgmt_prctce_types2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_prctce_types2017, json[QString("BioMgmtPrctceTypes2017")]);
    m_bio_mgmt_prctce_types2017_isSet = !json[QString("BioMgmtPrctceTypes2017")].isNull() && m_bio_mgmt_prctce_types2017_isValid;

    m_bio_mgmt_vectors_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_vectors, json[QString("BioMgmtVectors")]);
    m_bio_mgmt_vectors_isSet = !json[QString("BioMgmtVectors")].isNull() && m_bio_mgmt_vectors_isValid;

    m_bio_mgmt_vectors2016_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_vectors2016, json[QString("BioMgmtVectors2016")]);
    m_bio_mgmt_vectors2016_isSet = !json[QString("BioMgmtVectors2016")].isNull() && m_bio_mgmt_vectors2016_isValid;

    m_bio_mgmt_vectors2017_isValid = ::OpenAPI::fromJsonValue(m_bio_mgmt_vectors2017, json[QString("BioMgmtVectors2017")]);
    m_bio_mgmt_vectors2017_isSet = !json[QString("BioMgmtVectors2017")].isNull() && m_bio_mgmt_vectors2017_isValid;

    m_bio_other_management_sum_isValid = ::OpenAPI::fromJsonValue(m_bio_other_management_sum, json[QString("BioOtherManagementSum")]);
    m_bio_other_management_sum_isSet = !json[QString("BioOtherManagementSum")].isNull() && m_bio_other_management_sum_isValid;

    m_bio_other_management_sum2016_isValid = ::OpenAPI::fromJsonValue(m_bio_other_management_sum2016, json[QString("BioOtherManagementSum2016")]);
    m_bio_other_management_sum2016_isSet = !json[QString("BioOtherManagementSum2016")].isNull() && m_bio_other_management_sum2016_isValid;

    m_bio_other_management_sum2017_isValid = ::OpenAPI::fromJsonValue(m_bio_other_management_sum2017, json[QString("BioOtherManagementSum2017")]);
    m_bio_other_management_sum2017_isSet = !json[QString("BioOtherManagementSum2017")].isNull() && m_bio_other_management_sum2017_isValid;

    m_bio_other_mgmt_prctc_txts_isValid = ::OpenAPI::fromJsonValue(m_bio_other_mgmt_prctc_txts, json[QString("BioOtherMgmtPrctcTxts")]);
    m_bio_other_mgmt_prctc_txts_isSet = !json[QString("BioOtherMgmtPrctcTxts")].isNull() && m_bio_other_mgmt_prctc_txts_isValid;

    m_bio_other_mgmt_prctc_txts2016_isValid = ::OpenAPI::fromJsonValue(m_bio_other_mgmt_prctc_txts2016, json[QString("BioOtherMgmtPrctcTxts2016")]);
    m_bio_other_mgmt_prctc_txts2016_isSet = !json[QString("BioOtherMgmtPrctcTxts2016")].isNull() && m_bio_other_mgmt_prctc_txts2016_isValid;

    m_bio_other_mgmt_prctc_txts2017_isValid = ::OpenAPI::fromJsonValue(m_bio_other_mgmt_prctc_txts2017, json[QString("BioOtherMgmtPrctcTxts2017")]);
    m_bio_other_mgmt_prctc_txts2017_isSet = !json[QString("BioOtherMgmtPrctcTxts2017")].isNull() && m_bio_other_mgmt_prctc_txts2017_isValid;

    m_bio_qtrs_with_vio_isValid = ::OpenAPI::fromJsonValue(m_bio_qtrs_with_vio, json[QString("BioQtrsWithVio")]);
    m_bio_qtrs_with_vio_isSet = !json[QString("BioQtrsWithVio")].isNull() && m_bio_qtrs_with_vio_isValid;

    m_bio_report_date_isValid = ::OpenAPI::fromJsonValue(m_bio_report_date, json[QString("BioReportDate")]);
    m_bio_report_date_isSet = !json[QString("BioReportDate")].isNull() && m_bio_report_date_isValid;

    m_bio_report_date2016_isValid = ::OpenAPI::fromJsonValue(m_bio_report_date2016, json[QString("BioReportDate2016")]);
    m_bio_report_date2016_isSet = !json[QString("BioReportDate2016")].isNull() && m_bio_report_date2016_isValid;

    m_bio_report_date2017_isValid = ::OpenAPI::fromJsonValue(m_bio_report_date2017, json[QString("BioReportDate2017")]);
    m_bio_report_date2017_isSet = !json[QString("BioReportDate2017")].isNull() && m_bio_report_date2017_isValid;

    m_bio_report_year_isValid = ::OpenAPI::fromJsonValue(m_bio_report_year, json[QString("BioReportYear")]);
    m_bio_report_year_isSet = !json[QString("BioReportYear")].isNull() && m_bio_report_year_isValid;

    m_bio_report_years_isValid = ::OpenAPI::fromJsonValue(m_bio_report_years, json[QString("BioReportYears")]);
    m_bio_report_years_isSet = !json[QString("BioReportYears")].isNull() && m_bio_report_years_isValid;

    m_bio_reporting_obligations_isValid = ::OpenAPI::fromJsonValue(m_bio_reporting_obligations, json[QString("BioReportingObligations")]);
    m_bio_reporting_obligations_isSet = !json[QString("BioReportingObligations")].isNull() && m_bio_reporting_obligations_isValid;

    m_bio_reporting_obligations2016_isValid = ::OpenAPI::fromJsonValue(m_bio_reporting_obligations2016, json[QString("BioReportingObligations2016")]);
    m_bio_reporting_obligations2016_isSet = !json[QString("BioReportingObligations2016")].isNull() && m_bio_reporting_obligations2016_isValid;

    m_bio_reporting_obligations2017_isValid = ::OpenAPI::fromJsonValue(m_bio_reporting_obligations2017, json[QString("BioReportingObligations2017")]);
    m_bio_reporting_obligations2017_isSet = !json[QString("BioReportingObligations2017")].isNull() && m_bio_reporting_obligations2017_isValid;

    m_bio_surface_disp_sum_isValid = ::OpenAPI::fromJsonValue(m_bio_surface_disp_sum, json[QString("BioSurfaceDispSum")]);
    m_bio_surface_disp_sum_isSet = !json[QString("BioSurfaceDispSum")].isNull() && m_bio_surface_disp_sum_isValid;

    m_bio_surface_disp_sum2016_isValid = ::OpenAPI::fromJsonValue(m_bio_surface_disp_sum2016, json[QString("BioSurfaceDispSum2016")]);
    m_bio_surface_disp_sum2016_isSet = !json[QString("BioSurfaceDispSum2016")].isNull() && m_bio_surface_disp_sum2016_isValid;

    m_bio_surface_disp_sum2017_isValid = ::OpenAPI::fromJsonValue(m_bio_surface_disp_sum2017, json[QString("BioSurfaceDispSum2017")]);
    m_bio_surface_disp_sum2017_isSet = !json[QString("BioSurfaceDispSum2017")].isNull() && m_bio_surface_disp_sum2017_isValid;

    m_bio_total_volume_amt_isValid = ::OpenAPI::fromJsonValue(m_bio_total_volume_amt, json[QString("BioTotalVolumeAmt")]);
    m_bio_total_volume_amt_isSet = !json[QString("BioTotalVolumeAmt")].isNull() && m_bio_total_volume_amt_isValid;

    m_bio_total_volume_amt2016_isValid = ::OpenAPI::fromJsonValue(m_bio_total_volume_amt2016, json[QString("BioTotalVolumeAmt2016")]);
    m_bio_total_volume_amt2016_isSet = !json[QString("BioTotalVolumeAmt2016")].isNull() && m_bio_total_volume_amt2016_isValid;

    m_bio_total_volume_amt2017_isValid = ::OpenAPI::fromJsonValue(m_bio_total_volume_amt2017, json[QString("BioTotalVolumeAmt2017")]);
    m_bio_total_volume_amt2017_isSet = !json[QString("BioTotalVolumeAmt2017")].isNull() && m_bio_total_volume_amt2017_isValid;

    m_bio_trmnt_prcss_cmnt_txts2016_isValid = ::OpenAPI::fromJsonValue(m_bio_trmnt_prcss_cmnt_txts2016, json[QString("BioTrmntPrcssCmntTxts2016")]);
    m_bio_trmnt_prcss_cmnt_txts2016_isSet = !json[QString("BioTrmntPrcssCmntTxts2016")].isNull() && m_bio_trmnt_prcss_cmnt_txts2016_isValid;

    m_bio_trmnt_prcss_cmnt_txts2017_isValid = ::OpenAPI::fromJsonValue(m_bio_trmnt_prcss_cmnt_txts2017, json[QString("BioTrmntPrcssCmntTxts2017")]);
    m_bio_trmnt_prcss_cmnt_txts2017_isSet = !json[QString("BioTrmntPrcssCmntTxts2017")].isNull() && m_bio_trmnt_prcss_cmnt_txts2017_isValid;

    m_bio_trtmnt_prcss_cmmnt_txts_isValid = ::OpenAPI::fromJsonValue(m_bio_trtmnt_prcss_cmmnt_txts, json[QString("BioTrtmntPrcssCmmntTxts")]);
    m_bio_trtmnt_prcss_cmmnt_txts_isSet = !json[QString("BioTrtmntPrcssCmmntTxts")].isNull() && m_bio_trtmnt_prcss_cmmnt_txts_isValid;

    m_bio_trtmnt_processes_isValid = ::OpenAPI::fromJsonValue(m_bio_trtmnt_processes, json[QString("BioTrtmntProcesses")]);
    m_bio_trtmnt_processes_isSet = !json[QString("BioTrtmntProcesses")].isNull() && m_bio_trtmnt_processes_isValid;

    m_bio_trtmnt_processes2016_isValid = ::OpenAPI::fromJsonValue(m_bio_trtmnt_processes2016, json[QString("BioTrtmntProcesses2016")]);
    m_bio_trtmnt_processes2016_isSet = !json[QString("BioTrtmntProcesses2016")].isNull() && m_bio_trtmnt_processes2016_isValid;

    m_bio_trtmnt_processes2017_isValid = ::OpenAPI::fromJsonValue(m_bio_trtmnt_processes2017, json[QString("BioTrtmntProcesses2017")]);
    m_bio_trtmnt_processes2017_isSet = !json[QString("BioTrtmntProcesses2017")].isNull() && m_bio_trtmnt_processes2017_isValid;

    m_bio_vio_last_year_isValid = ::OpenAPI::fromJsonValue(m_bio_vio_last_year, json[QString("BioVioLastYear")]);
    m_bio_vio_last_year_isSet = !json[QString("BioVioLastYear")].isNull() && m_bio_vio_last_year_isValid;

    m_bio_vio_last_year_flag_isValid = ::OpenAPI::fromJsonValue(m_bio_vio_last_year_flag, json[QString("BioVioLastYearFlag")]);
    m_bio_vio_last_year_flag_isSet = !json[QString("BioVioLastYearFlag")].isNull() && m_bio_vio_last_year_flag_isValid;

    m_bio_vio_status_isValid = ::OpenAPI::fromJsonValue(m_bio_vio_status, json[QString("BioVioStatus")]);
    m_bio_vio_status_isSet = !json[QString("BioVioStatus")].isNull() && m_bio_vio_status_isValid;

    m_bio_viol_flag_isValid = ::OpenAPI::fromJsonValue(m_bio_viol_flag, json[QString("BioViolFlag")]);
    m_bio_viol_flag_isSet = !json[QString("BioViolFlag")].isNull() && m_bio_viol_flag_isValid;

    m_biosolids_flag_isValid = ::OpenAPI::fromJsonValue(m_biosolids_flag, json[QString("BiosolidsFlag")]);
    m_biosolids_flag_isSet = !json[QString("BiosolidsFlag")].isNull() && m_biosolids_flag_isValid;

    m_cwp13qtrs_compl_history_isValid = ::OpenAPI::fromJsonValue(m_cwp13qtrs_compl_history, json[QString("CWP13qtrsComplHistory")]);
    m_cwp13qtrs_compl_history_isSet = !json[QString("CWP13qtrsComplHistory")].isNull() && m_cwp13qtrs_compl_history_isValid;

    m_cwp_actual_average_flow_nmbr_isValid = ::OpenAPI::fromJsonValue(m_cwp_actual_average_flow_nmbr, json[QString("CWPActualAverageFlowNmbr")]);
    m_cwp_actual_average_flow_nmbr_isSet = !json[QString("CWPActualAverageFlowNmbr")].isNull() && m_cwp_actual_average_flow_nmbr_isValid;

    m_cwp_bio_fea_count_isValid = ::OpenAPI::fromJsonValue(m_cwp_bio_fea_count, json[QString("CWPBioFeaCount")]);
    m_cwp_bio_fea_count_isSet = !json[QString("CWPBioFeaCount")].isNull() && m_cwp_bio_fea_count_isValid;

    m_cwp_bio_iea_count_isValid = ::OpenAPI::fromJsonValue(m_cwp_bio_iea_count, json[QString("CWPBioIeaCount")]);
    m_cwp_bio_iea_count_isSet = !json[QString("CWPBioIeaCount")].isNull() && m_cwp_bio_iea_count_isValid;

    m_cwp_bio_insp_count_isValid = ::OpenAPI::fromJsonValue(m_cwp_bio_insp_count, json[QString("CWPBioInspCount")]);
    m_cwp_bio_insp_count_isSet = !json[QString("CWPBioInspCount")].isNull() && m_cwp_bio_insp_count_isValid;

    m_cwp_bio_penalties_isValid = ::OpenAPI::fromJsonValue(m_cwp_bio_penalties, json[QString("CWPBioPenalties")]);
    m_cwp_bio_penalties_isSet = !json[QString("CWPBioPenalties")].isNull() && m_cwp_bio_penalties_isValid;

    m_cwp_case_ids_isValid = ::OpenAPI::fromJsonValue(m_cwp_case_ids, json[QString("CWPCaseIDs")]);
    m_cwp_case_ids_isSet = !json[QString("CWPCaseIDs")].isNull() && m_cwp_case_ids_isValid;

    m_cwp_city_isValid = ::OpenAPI::fromJsonValue(m_cwp_city, json[QString("CWPCity")]);
    m_cwp_city_isSet = !json[QString("CWPCity")].isNull() && m_cwp_city_isValid;

    m_cwp_compliance_tracking_isValid = ::OpenAPI::fromJsonValue(m_cwp_compliance_tracking, json[QString("CWPComplianceTracking")]);
    m_cwp_compliance_tracking_isSet = !json[QString("CWPComplianceTracking")].isNull() && m_cwp_compliance_tracking_isValid;

    m_cwp_county_isValid = ::OpenAPI::fromJsonValue(m_cwp_county, json[QString("CWPCounty")]);
    m_cwp_county_isSet = !json[QString("CWPCounty")].isNull() && m_cwp_county_isValid;

    m_cwp_cso_flag_isValid = ::OpenAPI::fromJsonValue(m_cwp_cso_flag, json[QString("CWPCsoFlag")]);
    m_cwp_cso_flag_isSet = !json[QString("CWPCsoFlag")].isNull() && m_cwp_cso_flag_isValid;

    m_cwp_cso_outfalls_isValid = ::OpenAPI::fromJsonValue(m_cwp_cso_outfalls, json[QString("CWPCsoOutfalls")]);
    m_cwp_cso_outfalls_isSet = !json[QString("CWPCsoOutfalls")].isNull() && m_cwp_cso_outfalls_isValid;

    m_cwp_date_last_bio_fea_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_fea, json[QString("CWPDateLastBioFea")]);
    m_cwp_date_last_bio_fea_isSet = !json[QString("CWPDateLastBioFea")].isNull() && m_cwp_date_last_bio_fea_isValid;

    m_cwp_date_last_bio_fea_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_fea_epa, json[QString("CWPDateLastBioFeaEPA")]);
    m_cwp_date_last_bio_fea_epa_isSet = !json[QString("CWPDateLastBioFeaEPA")].isNull() && m_cwp_date_last_bio_fea_epa_isValid;

    m_cwp_date_last_bio_fea_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_fea_st, json[QString("CWPDateLastBioFeaSt")]);
    m_cwp_date_last_bio_fea_st_isSet = !json[QString("CWPDateLastBioFeaSt")].isNull() && m_cwp_date_last_bio_fea_st_isValid;

    m_cwp_date_last_bio_iea_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_iea, json[QString("CWPDateLastBioIea")]);
    m_cwp_date_last_bio_iea_isSet = !json[QString("CWPDateLastBioIea")].isNull() && m_cwp_date_last_bio_iea_isValid;

    m_cwp_date_last_bio_iea_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_iea_epa, json[QString("CWPDateLastBioIeaEPA")]);
    m_cwp_date_last_bio_iea_epa_isSet = !json[QString("CWPDateLastBioIeaEPA")].isNull() && m_cwp_date_last_bio_iea_epa_isValid;

    m_cwp_date_last_bio_iea_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_iea_st, json[QString("CWPDateLastBioIeaSt")]);
    m_cwp_date_last_bio_iea_st_isSet = !json[QString("CWPDateLastBioIeaSt")].isNull() && m_cwp_date_last_bio_iea_st_isValid;

    m_cwp_date_last_bio_insp_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_insp, json[QString("CWPDateLastBioInsp")]);
    m_cwp_date_last_bio_insp_isSet = !json[QString("CWPDateLastBioInsp")].isNull() && m_cwp_date_last_bio_insp_isValid;

    m_cwp_date_last_bio_insp_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_insp_epa, json[QString("CWPDateLastBioInspEPA")]);
    m_cwp_date_last_bio_insp_epa_isSet = !json[QString("CWPDateLastBioInspEPA")].isNull() && m_cwp_date_last_bio_insp_epa_isValid;

    m_cwp_date_last_bio_insp_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_insp_st, json[QString("CWPDateLastBioInspSt")]);
    m_cwp_date_last_bio_insp_st_isSet = !json[QString("CWPDateLastBioInspSt")].isNull() && m_cwp_date_last_bio_insp_st_isValid;

    m_cwp_date_last_bio_penalty_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_bio_penalty, json[QString("CWPDateLastBioPenalty")]);
    m_cwp_date_last_bio_penalty_isSet = !json[QString("CWPDateLastBioPenalty")].isNull() && m_cwp_date_last_bio_penalty_isValid;

    m_cwp_date_last_fea_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_fea, json[QString("CWPDateLastFea")]);
    m_cwp_date_last_fea_isSet = !json[QString("CWPDateLastFea")].isNull() && m_cwp_date_last_fea_isValid;

    m_cwp_date_last_fea_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_fea_epa, json[QString("CWPDateLastFeaEPA")]);
    m_cwp_date_last_fea_epa_isSet = !json[QString("CWPDateLastFeaEPA")].isNull() && m_cwp_date_last_fea_epa_isValid;

    m_cwp_date_last_fea_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_fea_st, json[QString("CWPDateLastFeaSt")]);
    m_cwp_date_last_fea_st_isSet = !json[QString("CWPDateLastFeaSt")].isNull() && m_cwp_date_last_fea_st_isValid;

    m_cwp_date_last_iea_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_iea_epa, json[QString("CWPDateLastIeaEPA")]);
    m_cwp_date_last_iea_epa_isSet = !json[QString("CWPDateLastIeaEPA")].isNull() && m_cwp_date_last_iea_epa_isValid;

    m_cwp_date_last_iea_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_iea_st, json[QString("CWPDateLastIeaSt")]);
    m_cwp_date_last_iea_st_isSet = !json[QString("CWPDateLastIeaSt")].isNull() && m_cwp_date_last_iea_st_isValid;

    m_cwp_date_last_informal_ea_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_informal_ea, json[QString("CWPDateLastInformalEa")]);
    m_cwp_date_last_informal_ea_isSet = !json[QString("CWPDateLastInformalEa")].isNull() && m_cwp_date_last_informal_ea_isValid;

    m_cwp_date_last_insp_epa_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_insp_epa, json[QString("CWPDateLastInspEPA")]);
    m_cwp_date_last_insp_epa_isSet = !json[QString("CWPDateLastInspEPA")].isNull() && m_cwp_date_last_insp_epa_isValid;

    m_cwp_date_last_insp_st_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_insp_st, json[QString("CWPDateLastInspSt")]);
    m_cwp_date_last_insp_st_isSet = !json[QString("CWPDateLastInspSt")].isNull() && m_cwp_date_last_insp_st_isValid;

    m_cwp_date_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_inspection, json[QString("CWPDateLastInspection")]);
    m_cwp_date_last_inspection_isSet = !json[QString("CWPDateLastInspection")].isNull() && m_cwp_date_last_inspection_isValid;

    m_cwp_date_last_penalty_isValid = ::OpenAPI::fromJsonValue(m_cwp_date_last_penalty, json[QString("CWPDateLastPenalty")]);
    m_cwp_date_last_penalty_isSet = !json[QString("CWPDateLastPenalty")].isNull() && m_cwp_date_last_penalty_isValid;

    m_cwp_days_last_bio_insp_isValid = ::OpenAPI::fromJsonValue(m_cwp_days_last_bio_insp, json[QString("CWPDaysLastBioInsp")]);
    m_cwp_days_last_bio_insp_isSet = !json[QString("CWPDaysLastBioInsp")].isNull() && m_cwp_days_last_bio_insp_isValid;

    m_cwp_days_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_cwp_days_last_inspection, json[QString("CWPDaysLastInspection")]);
    m_cwp_days_last_inspection_isSet = !json[QString("CWPDaysLastInspection")].isNull() && m_cwp_days_last_inspection_isValid;

    m_cwpe90_cnt_isValid = ::OpenAPI::fromJsonValue(m_cwpe90_cnt, json[QString("CWPE90Cnt")]);
    m_cwpe90_cnt_isSet = !json[QString("CWPE90Cnt")].isNull() && m_cwpe90_cnt_isValid;

    m_cwpepa_region_isValid = ::OpenAPI::fromJsonValue(m_cwpepa_region, json[QString("CWPEPARegion")]);
    m_cwpepa_region_isSet = !json[QString("CWPEPARegion")].isNull() && m_cwpepa_region_isValid;

    m_cwp_effective_date_isValid = ::OpenAPI::fromJsonValue(m_cwp_effective_date, json[QString("CWPEffectiveDate")]);
    m_cwp_effective_date_isSet = !json[QString("CWPEffectiveDate")].isNull() && m_cwp_effective_date_isValid;

    m_cwp_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_cwp_expiration_date, json[QString("CWPExpirationDate")]);
    m_cwp_expiration_date_isSet = !json[QString("CWPExpirationDate")].isNull() && m_cwp_expiration_date_isValid;

    m_cwpfips_code_isValid = ::OpenAPI::fromJsonValue(m_cwpfips_code, json[QString("CWPFIPSCode")]);
    m_cwpfips_code_isSet = !json[QString("CWPFIPSCode")].isNull() && m_cwpfips_code_isValid;

    m_cwp_facility_type_code_isValid = ::OpenAPI::fromJsonValue(m_cwp_facility_type_code, json[QString("CWPFacilityTypeCode")]);
    m_cwp_facility_type_code_isSet = !json[QString("CWPFacilityTypeCode")].isNull() && m_cwp_facility_type_code_isValid;

    m_cwp_facility_type_indicator_isValid = ::OpenAPI::fromJsonValue(m_cwp_facility_type_indicator, json[QString("CWPFacilityTypeIndicator")]);
    m_cwp_facility_type_indicator_isSet = !json[QString("CWPFacilityTypeIndicator")].isNull() && m_cwp_facility_type_indicator_isValid;

    m_cwp_formal_ea_cnt_isValid = ::OpenAPI::fromJsonValue(m_cwp_formal_ea_cnt, json[QString("CWPFormalEaCnt")]);
    m_cwp_formal_ea_cnt_isSet = !json[QString("CWPFormalEaCnt")].isNull() && m_cwp_formal_ea_cnt_isValid;

    m_cwp_imp_water_flg_isValid = ::OpenAPI::fromJsonValue(m_cwp_imp_water_flg, json[QString("CWPImpWaterFlg")]);
    m_cwp_imp_water_flg_isSet = !json[QString("CWPImpWaterFlg")].isNull() && m_cwp_imp_water_flg_isValid;

    m_cwp_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_cwp_indian_cntry_flg, json[QString("CWPIndianCntryFlg")]);
    m_cwp_indian_cntry_flg_isSet = !json[QString("CWPIndianCntryFlg")].isNull() && m_cwp_indian_cntry_flg_isValid;

    m_cwp_informal_enf_act_count_isValid = ::OpenAPI::fromJsonValue(m_cwp_informal_enf_act_count, json[QString("CWPInformalEnfActCount")]);
    m_cwp_informal_enf_act_count_isSet = !json[QString("CWPInformalEnfActCount")].isNull() && m_cwp_informal_enf_act_count_isValid;

    m_cwp_inspection_count_isValid = ::OpenAPI::fromJsonValue(m_cwp_inspection_count, json[QString("CWPInspectionCount")]);
    m_cwp_inspection_count_isSet = !json[QString("CWPInspectionCount")].isNull() && m_cwp_inspection_count_isValid;

    m_cwp_issue_date_isValid = ::OpenAPI::fromJsonValue(m_cwp_issue_date, json[QString("CWPIssueDate")]);
    m_cwp_issue_date_isSet = !json[QString("CWPIssueDate")].isNull() && m_cwp_issue_date_isValid;

    m_cwp_major_minor_status_flag_isValid = ::OpenAPI::fromJsonValue(m_cwp_major_minor_status_flag, json[QString("CWPMajorMinorStatusFlag")]);
    m_cwp_major_minor_status_flag_isSet = !json[QString("CWPMajorMinorStatusFlag")].isNull() && m_cwp_major_minor_status_flag_isValid;

    m_cwpnaics_codes_isValid = ::OpenAPI::fromJsonValue(m_cwpnaics_codes, json[QString("CWPNAICSCodes")]);
    m_cwpnaics_codes_isSet = !json[QString("CWPNAICSCodes")].isNull() && m_cwpnaics_codes_isValid;

    m_cwp_name_isValid = ::OpenAPI::fromJsonValue(m_cwp_name, json[QString("CWPName")]);
    m_cwp_name_isSet = !json[QString("CWPName")].isNull() && m_cwp_name_isValid;

    m_cwp_permit_status_code_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_status_code, json[QString("CWPPermitStatusCode")]);
    m_cwp_permit_status_code_isSet = !json[QString("CWPPermitStatusCode")].isNull() && m_cwp_permit_status_code_isValid;

    m_cwp_permit_status_desc_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_status_desc, json[QString("CWPPermitStatusDesc")]);
    m_cwp_permit_status_desc_isSet = !json[QString("CWPPermitStatusDesc")].isNull() && m_cwp_permit_status_desc_isValid;

    m_cwp_permit_type_code_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_type_code, json[QString("CWPPermitTypeCode")]);
    m_cwp_permit_type_code_isSet = !json[QString("CWPPermitTypeCode")].isNull() && m_cwp_permit_type_code_isValid;

    m_cwp_permit_type_desc_isValid = ::OpenAPI::fromJsonValue(m_cwp_permit_type_desc, json[QString("CWPPermitTypeDesc")]);
    m_cwp_permit_type_desc_isSet = !json[QString("CWPPermitTypeDesc")].isNull() && m_cwp_permit_type_desc_isValid;

    m_cwp_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_cwp_qtrs_with_nc, json[QString("CWPQtrsWithNC")]);
    m_cwp_qtrs_with_nc_isSet = !json[QString("CWPQtrsWithNC")].isNull() && m_cwp_qtrs_with_nc_isValid;

    m_cwp_qtrs_with_snc_isValid = ::OpenAPI::fromJsonValue(m_cwp_qtrs_with_snc, json[QString("CWPQtrsWithSNC")]);
    m_cwp_qtrs_with_snc_isSet = !json[QString("CWPQtrsWithSNC")].isNull() && m_cwp_qtrs_with_snc_isValid;

    m_cwpsic_codes_isValid = ::OpenAPI::fromJsonValue(m_cwpsic_codes, json[QString("CWPSICCodes")]);
    m_cwpsic_codes_isSet = !json[QString("CWPSICCodes")].isNull() && m_cwpsic_codes_isValid;

    m_cwpsnc_event_desc_isValid = ::OpenAPI::fromJsonValue(m_cwpsnc_event_desc, json[QString("CWPSNCEventDesc")]);
    m_cwpsnc_event_desc_isSet = !json[QString("CWPSNCEventDesc")].isNull() && m_cwpsnc_event_desc_isValid;

    m_cwpsnc_status_isValid = ::OpenAPI::fromJsonValue(m_cwpsnc_status, json[QString("CWPSNCStatus")]);
    m_cwpsnc_status_isSet = !json[QString("CWPSNCStatus")].isNull() && m_cwpsnc_status_isValid;

    m_cwpsnc_status_date_isValid = ::OpenAPI::fromJsonValue(m_cwpsnc_status_date, json[QString("CWPSNCStatusDate")]);
    m_cwpsnc_status_date_isSet = !json[QString("CWPSNCStatusDate")].isNull() && m_cwpsnc_status_date_isValid;

    m_cwp_state_isValid = ::OpenAPI::fromJsonValue(m_cwp_state, json[QString("CWPState")]);
    m_cwp_state_isSet = !json[QString("CWPState")].isNull() && m_cwp_state_isValid;

    m_cwp_state_district_isValid = ::OpenAPI::fromJsonValue(m_cwp_state_district, json[QString("CWPStateDistrict")]);
    m_cwp_state_district_isSet = !json[QString("CWPStateDistrict")].isNull() && m_cwp_state_district_isValid;

    m_cwp_state_water_body_code_isValid = ::OpenAPI::fromJsonValue(m_cwp_state_water_body_code, json[QString("CWPStateWaterBodyCode")]);
    m_cwp_state_water_body_code_isSet = !json[QString("CWPStateWaterBodyCode")].isNull() && m_cwp_state_water_body_code_isValid;

    m_cwp_state_water_body_name_isValid = ::OpenAPI::fromJsonValue(m_cwp_state_water_body_name, json[QString("CWPStateWaterBodyName")]);
    m_cwp_state_water_body_name_isSet = !json[QString("CWPStateWaterBodyName")].isNull() && m_cwp_state_water_body_name_isValid;

    m_cwp_status_isValid = ::OpenAPI::fromJsonValue(m_cwp_status, json[QString("CWPStatus")]);
    m_cwp_status_isSet = !json[QString("CWPStatus")].isNull() && m_cwp_status_isValid;

    m_cwp_street_isValid = ::OpenAPI::fromJsonValue(m_cwp_street, json[QString("CWPStreet")]);
    m_cwp_street_isSet = !json[QString("CWPStreet")].isNull() && m_cwp_street_isValid;

    m_cwptr_ibal_land_code_isValid = ::OpenAPI::fromJsonValue(m_cwptr_ibal_land_code, json[QString("CWPTRIbalLandCode")]);
    m_cwptr_ibal_land_code_isSet = !json[QString("CWPTRIbalLandCode")].isNull() && m_cwptr_ibal_land_code_isValid;

    m_cwp_termination_date_isValid = ::OpenAPI::fromJsonValue(m_cwp_termination_date, json[QString("CWPTerminationDate")]);
    m_cwp_termination_date_isSet = !json[QString("CWPTerminationDate")].isNull() && m_cwp_termination_date_isValid;

    m_cwp_total_design_flow_nmbr_isValid = ::OpenAPI::fromJsonValue(m_cwp_total_design_flow_nmbr, json[QString("CWPTotalDesignFlowNmbr")]);
    m_cwp_total_design_flow_nmbr_isSet = !json[QString("CWPTotalDesignFlowNmbr")].isNull() && m_cwp_total_design_flow_nmbr_isValid;

    m_cwp_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_cwp_total_penalties, json[QString("CWPTotalPenalties")]);
    m_cwp_total_penalties_isSet = !json[QString("CWPTotalPenalties")].isNull() && m_cwp_total_penalties_isValid;

    m_cwp_version_nmbr_isValid = ::OpenAPI::fromJsonValue(m_cwp_version_nmbr, json[QString("CWPVersionNmbr")]);
    m_cwp_version_nmbr_isSet = !json[QString("CWPVersionNmbr")].isNull() && m_cwp_version_nmbr_isValid;

    m_cwp_vio_status_isValid = ::OpenAPI::fromJsonValue(m_cwp_vio_status, json[QString("CWPVioStatus")]);
    m_cwp_vio_status_isSet = !json[QString("CWPVioStatus")].isNull() && m_cwp_vio_status_isValid;

    m_cwp_viol_status_isValid = ::OpenAPI::fromJsonValue(m_cwp_viol_status, json[QString("CWPViolStatus")]);
    m_cwp_viol_status_isSet = !json[QString("CWPViolStatus")].isNull() && m_cwp_viol_status_isValid;

    m_cwp_zip_isValid = ::OpenAPI::fromJsonValue(m_cwp_zip, json[QString("CWPZip")]);
    m_cwp_zip_isSet = !json[QString("CWPZip")].isNull() && m_cwp_zip_isValid;

    m_calculated_accuracy_meters_isValid = ::OpenAPI::fromJsonValue(m_calculated_accuracy_meters, json[QString("CalculatedAccuracyMeters")]);
    m_calculated_accuracy_meters_isSet = !json[QString("CalculatedAccuracyMeters")].isNull() && m_calculated_accuracy_meters_isValid;

    m_census_block_group_isValid = ::OpenAPI::fromJsonValue(m_census_block_group, json[QString("CensusBlockGroup")]);
    m_census_block_group_isSet = !json[QString("CensusBlockGroup")].isNull() && m_census_block_group_isValid;

    m_certified_date_isValid = ::OpenAPI::fromJsonValue(m_certified_date, json[QString("CertifiedDate")]);
    m_certified_date_isSet = !json[QString("CertifiedDate")].isNull() && m_certified_date_isValid;

    m_chesapeake_bay_flag_isValid = ::OpenAPI::fromJsonValue(m_chesapeake_bay_flag, json[QString("ChesapeakeBayFlag")]);
    m_chesapeake_bay_flag_isSet = !json[QString("ChesapeakeBayFlag")].isNull() && m_chesapeake_bay_flag_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("CollectionMethod")]);
    m_collection_method_isSet = !json[QString("CollectionMethod")].isNull() && m_collection_method_isValid;

    m_control_measure_isValid = ::OpenAPI::fromJsonValue(m_control_measure, json[QString("ControlMeasure")]);
    m_control_measure_isSet = !json[QString("ControlMeasure")].isNull() && m_control_measure_isValid;

    m_control_measure_schedule_isValid = ::OpenAPI::fromJsonValue(m_control_measure_schedule, json[QString("ControlMeasureSchedule")]);
    m_control_measure_schedule_isSet = !json[QString("ControlMeasureSchedule")].isNull() && m_control_measure_schedule_isValid;

    m_curr_sv_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_sv_flag, json[QString("CurrSvFlag")]);
    m_curr_sv_flag_isSet = !json[QString("CurrSvFlag")].isNull() && m_curr_sv_flag_isValid;

    m_curr_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_vio_flag, json[QString("CurrVioFlag")]);
    m_curr_vio_flag_isSet = !json[QString("CurrVioFlag")].isNull() && m_curr_vio_flag_isValid;

    m_dmr_impaired_poll_isValid = ::OpenAPI::fromJsonValue(m_dmr_impaired_poll, json[QString("DMRImpairedPoll")]);
    m_dmr_impaired_poll_isSet = !json[QString("DMRImpairedPoll")].isNull() && m_dmr_impaired_poll_isValid;

    m_dmr_pounds_isValid = ::OpenAPI::fromJsonValue(m_dmr_pounds, json[QString("DMRPounds")]);
    m_dmr_pounds_isSet = !json[QString("DMRPounds")].isNull() && m_dmr_pounds_isValid;

    m_dmr_twpe_isValid = ::OpenAPI::fromJsonValue(m_dmr_twpe, json[QString("DMRTwpe")]);
    m_dmr_twpe_isSet = !json[QString("DMRTwpe")].isNull() && m_dmr_twpe_isValid;

    m_dsch_to_ms4_isValid = ::OpenAPI::fromJsonValue(m_dsch_to_ms4, json[QString("DschToMs4")]);
    m_dsch_to_ms4_isSet = !json[QString("DschToMs4")].isNull() && m_dsch_to_ms4_isValid;

    m_e90_exceeds1yr_isValid = ::OpenAPI::fromJsonValue(m_e90_exceeds1yr, json[QString("E90Exceeds1yr")]);
    m_e90_exceeds1yr_isSet = !json[QString("E90Exceeds1yr")].isNull() && m_e90_exceeds1yr_isValid;

    m_e90_exceeds2yr_isValid = ::OpenAPI::fromJsonValue(m_e90_exceeds2yr, json[QString("E90Exceeds2yr")]);
    m_e90_exceeds2yr_isSet = !json[QString("E90Exceeds2yr")].isNull() && m_e90_exceeds2yr_isValid;

    m_e90_exceeds3yr_isValid = ::OpenAPI::fromJsonValue(m_e90_exceeds3yr, json[QString("E90Exceeds3yr")]);
    m_e90_exceeds3yr_isSet = !json[QString("E90Exceeds3yr")].isNull() && m_e90_exceeds3yr_isValid;

    m_e90_exceeds4yr_isValid = ::OpenAPI::fromJsonValue(m_e90_exceeds4yr, json[QString("E90Exceeds4yr")]);
    m_e90_exceeds4yr_isSet = !json[QString("E90Exceeds4yr")].isNull() && m_e90_exceeds4yr_isValid;

    m_e90_exceeds5yr_isValid = ::OpenAPI::fromJsonValue(m_e90_exceeds5yr, json[QString("E90Exceeds5yr")]);
    m_e90_exceeds5yr_isSet = !json[QString("E90Exceeds5yr")].isNull() && m_e90_exceeds5yr_isValid;

    m_e90_pollutants1yr_isValid = ::OpenAPI::fromJsonValue(m_e90_pollutants1yr, json[QString("E90Pollutants1yr")]);
    m_e90_pollutants1yr_isSet = !json[QString("E90Pollutants1yr")].isNull() && m_e90_pollutants1yr_isValid;

    m_e90_pollutants2yr_isValid = ::OpenAPI::fromJsonValue(m_e90_pollutants2yr, json[QString("E90Pollutants2yr")]);
    m_e90_pollutants2yr_isSet = !json[QString("E90Pollutants2yr")].isNull() && m_e90_pollutants2yr_isValid;

    m_e90_pollutants3yr_isValid = ::OpenAPI::fromJsonValue(m_e90_pollutants3yr, json[QString("E90Pollutants3yr")]);
    m_e90_pollutants3yr_isSet = !json[QString("E90Pollutants3yr")].isNull() && m_e90_pollutants3yr_isValid;

    m_e90_pollutants4yr_isValid = ::OpenAPI::fromJsonValue(m_e90_pollutants4yr, json[QString("E90Pollutants4yr")]);
    m_e90_pollutants4yr_isSet = !json[QString("E90Pollutants4yr")].isNull() && m_e90_pollutants4yr_isValid;

    m_e90_pollutants5yr_isValid = ::OpenAPI::fromJsonValue(m_e90_pollutants5yr, json[QString("E90Pollutants5yr")]);
    m_e90_pollutants5yr_isSet = !json[QString("E90Pollutants5yr")].isNull() && m_e90_pollutants5yr_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_ea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_ea5yr_flag, json[QString("Ea5yrFlag")]);
    m_ea5yr_flag_isSet = !json[QString("Ea5yrFlag")].isNull() && m_ea5yr_flag_isValid;

    m_eff_charts_flag_isValid = ::OpenAPI::fromJsonValue(m_eff_charts_flag, json[QString("EffChartsFlag")]);
    m_eff_charts_flag_isSet = !json[QString("EffChartsFlag")].isNull() && m_eff_charts_flag_isValid;

    m_eff_exceeds_isValid = ::OpenAPI::fromJsonValue(m_eff_exceeds, json[QString("EffExceeds")]);
    m_eff_exceeds_isSet = !json[QString("EffExceeds")].isNull() && m_eff_exceeds_isValid;

    m_ejscreen_flag_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag, json[QString("EjscreenFlag")]);
    m_ejscreen_flag_isSet = !json[QString("EjscreenFlag")].isNull() && m_ejscreen_flag_isValid;

    m_ejscreen_flag_us_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag_us, json[QString("EjscreenFlagUs")]);
    m_ejscreen_flag_us_isSet = !json[QString("EjscreenFlagUs")].isNull() && m_ejscreen_flag_us_isValid;

    m_electr_rpt_waiver_eff_date_isValid = ::OpenAPI::fromJsonValue(m_electr_rpt_waiver_eff_date, json[QString("ElectrRptWaiverEffDate")]);
    m_electr_rpt_waiver_eff_date_isSet = !json[QString("ElectrRptWaiverEffDate")].isNull() && m_electr_rpt_waiver_eff_date_isValid;

    m_electr_rpt_waiver_exp_date_isValid = ::OpenAPI::fromJsonValue(m_electr_rpt_waiver_exp_date, json[QString("ElectrRptWaiverExpDate")]);
    m_electr_rpt_waiver_exp_date_isSet = !json[QString("ElectrRptWaiverExpDate")].isNull() && m_electr_rpt_waiver_exp_date_isValid;

    m_electr_rpt_waiver_type_code_isValid = ::OpenAPI::fromJsonValue(m_electr_rpt_waiver_type_code, json[QString("ElectrRptWaiverTypeCode")]);
    m_electr_rpt_waiver_type_code_isSet = !json[QString("ElectrRptWaiverTypeCode")].isNull() && m_electr_rpt_waiver_type_code_isValid;

    m_electr_rpt_waiver_type_desc_isValid = ::OpenAPI::fromJsonValue(m_electr_rpt_waiver_type_desc, json[QString("ElectrRptWaiverTypeDesc")]);
    m_electr_rpt_waiver_type_desc_isSet = !json[QString("ElectrRptWaiverTypeDesc")].isNull() && m_electr_rpt_waiver_type_desc_isValid;

    m_electr_submission_type_code_isValid = ::OpenAPI::fromJsonValue(m_electr_submission_type_code, json[QString("ElectrSubmissionTypeCode")]);
    m_electr_submission_type_code_isSet = !json[QString("ElectrSubmissionTypeCode")].isNull() && m_electr_submission_type_code_isValid;

    m_electr_submission_type_desc_isValid = ::OpenAPI::fromJsonValue(m_electr_submission_type_desc, json[QString("ElectrSubmissionTypeDesc")]);
    m_electr_submission_type_desc_isSet = !json[QString("ElectrSubmissionTypeDesc")].isNull() && m_electr_submission_type_desc_isValid;

    m_exposed_activity_isValid = ::OpenAPI::fromJsonValue(m_exposed_activity, json[QString("ExposedActivity")]);
    m_exposed_activity_isSet = !json[QString("ExposedActivity")].isNull() && m_exposed_activity_isValid;

    m_fac_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_county_name, json[QString("FacCountyName")]);
    m_fac_county_name_isSet = !json[QString("FacCountyName")].isNull() && m_fac_county_name_isValid;

    m_fac_derived_huc_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_huc, json[QString("FacDerivedHuc")]);
    m_fac_derived_huc_isSet = !json[QString("FacDerivedHuc")].isNull() && m_fac_derived_huc_isValid;

    m_fac_derived_tr_ibes_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_tr_ibes, json[QString("FacDerivedTRIbes")]);
    m_fac_derived_tr_ibes_isSet = !json[QString("FacDerivedTRIbes")].isNull() && m_fac_derived_tr_ibes_isValid;

    m_fac_derived_wbd_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd, json[QString("FacDerivedWBD")]);
    m_fac_derived_wbd_isSet = !json[QString("FacDerivedWBD")].isNull() && m_fac_derived_wbd_isValid;

    m_fac_derived_wbdhu8_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbdhu8, json[QString("FacDerivedWBDHu8")]);
    m_fac_derived_wbdhu8_isSet = !json[QString("FacDerivedWBDHu8")].isNull() && m_fac_derived_wbdhu8_isValid;

    m_fac_derived_wbdhu8_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbdhu8_name, json[QString("FacDerivedWBDHu8Name")]);
    m_fac_derived_wbdhu8_name_isSet = !json[QString("FacDerivedWBDHu8Name")].isNull() && m_fac_derived_wbdhu8_name_isValid;

    m_fac_derived_wbd_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd_name, json[QString("FacDerivedWBDName")]);
    m_fac_derived_wbd_name_isSet = !json[QString("FacDerivedWBDName")].isNull() && m_fac_derived_wbd_name_isValid;

    m_fac_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fac_fips_code, json[QString("FacFIPSCode")]);
    m_fac_fips_code_isSet = !json[QString("FacFIPSCode")].isNull() && m_fac_fips_code_isValid;

    m_fac_federal_agency_code_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_code, json[QString("FacFederalAgencyCode")]);
    m_fac_federal_agency_code_isSet = !json[QString("FacFederalAgencyCode")].isNull() && m_fac_federal_agency_code_isValid;

    m_fac_federal_agency_name_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_name, json[QString("FacFederalAgencyName")]);
    m_fac_federal_agency_name_isSet = !json[QString("FacFederalAgencyName")].isNull() && m_fac_federal_agency_name_isValid;

    m_fac_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_cntry_flg, json[QString("FacIndianCntryFlg")]);
    m_fac_indian_cntry_flg_isSet = !json[QString("FacIndianCntryFlg")].isNull() && m_fac_indian_cntry_flg_isValid;

    m_fac_indian_spatial_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_spatial_flg, json[QString("FacIndianSpatialFlg")]);
    m_fac_indian_spatial_flg_isSet = !json[QString("FacIndianSpatialFlg")].isNull() && m_fac_indian_spatial_flg_isValid;

    m_fac_lat_isValid = ::OpenAPI::fromJsonValue(m_fac_lat, json[QString("FacLat")]);
    m_fac_lat_isSet = !json[QString("FacLat")].isNull() && m_fac_lat_isValid;

    m_fac_long_isValid = ::OpenAPI::fromJsonValue(m_fac_long, json[QString("FacLong")]);
    m_fac_long_isSet = !json[QString("FacLong")].isNull() && m_fac_long_isValid;

    m_fac_map_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_map_flg, json[QString("FacMapFlg")]);
    m_fac_map_flg_isSet = !json[QString("FacMapFlg")].isNull() && m_fac_map_flg_isValid;

    m_fac_map_icon_isValid = ::OpenAPI::fromJsonValue(m_fac_map_icon, json[QString("FacMapIcon")]);
    m_fac_map_icon_isSet = !json[QString("FacMapIcon")].isNull() && m_fac_map_icon_isValid;

    m_fac_percent_minority_isValid = ::OpenAPI::fromJsonValue(m_fac_percent_minority, json[QString("FacPercentMinority")]);
    m_fac_percent_minority_isSet = !json[QString("FacPercentMinority")].isNull() && m_fac_percent_minority_isValid;

    m_fac_pop_den_isValid = ::OpenAPI::fromJsonValue(m_fac_pop_den, json[QString("FacPopDen")]);
    m_fac_pop_den_isSet = !json[QString("FacPopDen")].isNull() && m_fac_pop_den_isValid;

    m_fac_std_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_std_county_name, json[QString("FacStdCountyName")]);
    m_fac_std_county_name_isSet = !json[QString("FacStdCountyName")].isNull() && m_fac_std_county_name_isValid;

    m_fac_tri_potw_trans_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_potw_trans, json[QString("FacTRIPotwTrans")]);
    m_fac_tri_potw_trans_isSet = !json[QString("FacTRIPotwTrans")].isNull() && m_fac_tri_potw_trans_isValid;

    m_fac_tri_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_reporter, json[QString("FacTRIReporter")]);
    m_fac_tri_reporter_isSet = !json[QString("FacTRIReporter")].isNull() && m_fac_tri_reporter_isValid;

    m_fac_trisw_rel_isValid = ::OpenAPI::fromJsonValue(m_fac_trisw_rel, json[QString("FacTRISwRel")]);
    m_fac_trisw_rel_isSet = !json[QString("FacTRISwRel")].isNull() && m_fac_trisw_rel_isValid;

    m_fac_us_mex_border_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_us_mex_border_flg, json[QString("FacUsMexBorderFlg")]);
    m_fac_us_mex_border_flg_isSet = !json[QString("FacUsMexBorderFlg")].isNull() && m_fac_us_mex_border_flg_isValid;

    m_historic_criterion_code_isValid = ::OpenAPI::fromJsonValue(m_historic_criterion_code, json[QString("HistoricCriterionCode")]);
    m_historic_criterion_code_isSet = !json[QString("HistoricCriterionCode")].isNull() && m_historic_criterion_code_isValid;

    m_indsw_flag_isValid = ::OpenAPI::fromJsonValue(m_indsw_flag, json[QString("IndswFlag")]);
    m_indsw_flag_isSet = !json[QString("IndswFlag")].isNull() && m_indsw_flag_isValid;

    m_infea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_infea5yr_flag, json[QString("Infea5yrFlag")]);
    m_infea5yr_flag_isSet = !json[QString("Infea5yrFlag")].isNull() && m_infea5yr_flag_isValid;

    m_insp5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_insp5yr_flag, json[QString("Insp5yrFlag")]);
    m_insp5yr_flag_isSet = !json[QString("Insp5yrFlag")].isNull() && m_insp5yr_flag_isValid;

    m_insp_def5yr_cnt_isValid = ::OpenAPI::fromJsonValue(m_insp_def5yr_cnt, json[QString("InspDef5yrCnt")]);
    m_insp_def5yr_cnt_isSet = !json[QString("InspDef5yrCnt")].isNull() && m_insp_def5yr_cnt_isValid;

    m_issuing_agency_isValid = ::OpenAPI::fromJsonValue(m_issuing_agency, json[QString("IssuingAgency")]);
    m_issuing_agency_isSet = !json[QString("IssuingAgency")].isNull() && m_issuing_agency_isValid;

    m_last_dmr_value_rcvd_date_isValid = ::OpenAPI::fromJsonValue(m_last_dmr_value_rcvd_date, json[QString("LastDMRValueRcvdDate")]);
    m_last_dmr_value_rcvd_date_isSet = !json[QString("LastDMRValueRcvdDate")].isNull() && m_last_dmr_value_rcvd_date_isValid;

    m_lim_pollutant_isValid = ::OpenAPI::fromJsonValue(m_lim_pollutant, json[QString("LimPollutant")]);
    m_lim_pollutant_isSet = !json[QString("LimPollutant")].isNull() && m_lim_pollutant_isValid;

    m_lower48_isValid = ::OpenAPI::fromJsonValue(m_lower48, json[QString("Lower48")]);
    m_lower48_isSet = !json[QString("Lower48")].isNull() && m_lower48_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("Map")]);
    m_map_isSet = !json[QString("Map")].isNull() && m_map_isValid;

    m_master_external_permit_nmbr_isValid = ::OpenAPI::fromJsonValue(m_master_external_permit_nmbr, json[QString("MasterExternalPermitNmbr")]);
    m_master_external_permit_nmbr_isSet = !json[QString("MasterExternalPermitNmbr")].isNull() && m_master_external_permit_nmbr_isValid;

    m_max_pctile_us_isValid = ::OpenAPI::fromJsonValue(m_max_pctile_us, json[QString("MaxPctileUs")]);
    m_max_pctile_us_isSet = !json[QString("MaxPctileUs")].isNull() && m_max_pctile_us_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_miss_dmr_qtrs_isValid = ::OpenAPI::fromJsonValue(m_miss_dmr_qtrs, json[QString("MissDMRQtrs")]);
    m_miss_dmr_qtrs_isSet = !json[QString("MissDMRQtrs")].isNull() && m_miss_dmr_qtrs_isValid;

    m_msgp_corrective_action_smmry_isValid = ::OpenAPI::fromJsonValue(m_msgp_corrective_action_smmry, json[QString("MsgpCorrectiveActionSmmry")]);
    m_msgp_corrective_action_smmry_isSet = !json[QString("MsgpCorrectiveActionSmmry")].isNull() && m_msgp_corrective_action_smmry_isValid;

    m_msgp_facility_inspctn_smmry_isValid = ::OpenAPI::fromJsonValue(m_msgp_facility_inspctn_smmry, json[QString("MsgpFacilityInspctnSmmry")]);
    m_msgp_facility_inspctn_smmry_isSet = !json[QString("MsgpFacilityInspctnSmmry")].isNull() && m_msgp_facility_inspctn_smmry_isValid;

    m_msgp_last_report_year_isValid = ::OpenAPI::fromJsonValue(m_msgp_last_report_year, json[QString("MsgpLastReportYear")]);
    m_msgp_last_report_year_isSet = !json[QString("MsgpLastReportYear")].isNull() && m_msgp_last_report_year_isValid;

    m_msgp_no_further_rdctn_rtnle_isValid = ::OpenAPI::fromJsonValue(m_msgp_no_further_rdctn_rtnle, json[QString("MsgpNoFurtherRdctnRtnle")]);
    m_msgp_no_further_rdctn_rtnle_isSet = !json[QString("MsgpNoFurtherRdctnRtnle")].isNull() && m_msgp_no_further_rdctn_rtnle_isValid;

    m_msgp_permit_type_isValid = ::OpenAPI::fromJsonValue(m_msgp_permit_type, json[QString("MsgpPermitType")]);
    m_msgp_permit_type_isSet = !json[QString("MsgpPermitType")].isNull() && m_msgp_permit_type_isValid;

    m_msgp_visual_assessment_smmry_isValid = ::OpenAPI::fromJsonValue(m_msgp_visual_assessment_smmry, json[QString("MsgpVisualAssessmentSmmry")]);
    m_msgp_visual_assessment_smmry_isSet = !json[QString("MsgpVisualAssessmentSmmry")].isNull() && m_msgp_visual_assessment_smmry_isValid;

    m_npdes_data_groups_isValid = ::OpenAPI::fromJsonValue(m_npdes_data_groups, json[QString("NPDESDataGroups")]);
    m_npdes_data_groups_isSet = !json[QString("NPDESDataGroups")].isNull() && m_npdes_data_groups_isValid;

    m_npdes_data_groups_descs_isValid = ::OpenAPI::fromJsonValue(m_npdes_data_groups_descs, json[QString("NPDESDataGroupsDescs")]);
    m_npdes_data_groups_descs_isSet = !json[QString("NPDESDataGroupsDescs")].isNull() && m_npdes_data_groups_descs_isValid;

    m_npdesids_isValid = ::OpenAPI::fromJsonValue(m_npdesids, json[QString("NPDESIDs")]);
    m_npdesids_isSet = !json[QString("NPDESIDs")].isNull() && m_npdesids_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("ObjectId")]);
    m_object_id_isSet = !json[QString("ObjectId")].isNull() && m_object_id_isValid;

    m_other_permit_ids_isValid = ::OpenAPI::fromJsonValue(m_other_permit_ids, json[QString("OtherPermitIDs")]);
    m_other_permit_ids_isSet = !json[QString("OtherPermitIDs")].isNull() && m_other_permit_ids_isValid;

    m_over80_count_us_isValid = ::OpenAPI::fromJsonValue(m_over80_count_us, json[QString("Over80CountUs")]);
    m_over80_count_us_isSet = !json[QString("Over80CountUs")].isNull() && m_over80_count_us_isValid;

    m_past_cal_yr_average_flow_isValid = ::OpenAPI::fromJsonValue(m_past_cal_yr_average_flow, json[QString("PastCalYrAverageFlow")]);
    m_past_cal_yr_average_flow_isSet = !json[QString("PastCalYrAverageFlow")].isNull() && m_past_cal_yr_average_flow_isValid;

    m_past_cal_yr_conv_pol_ovr_lmt_isValid = ::OpenAPI::fromJsonValue(m_past_cal_yr_conv_pol_ovr_lmt, json[QString("PastCalYrConvPolOvrLmt")]);
    m_past_cal_yr_conv_pol_ovr_lmt_isSet = !json[QString("PastCalYrConvPolOvrLmt")].isNull() && m_past_cal_yr_conv_pol_ovr_lmt_isValid;

    m_past_cal_yr_conv_pollutants_isValid = ::OpenAPI::fromJsonValue(m_past_cal_yr_conv_pollutants, json[QString("PastCalYrConvPollutants")]);
    m_past_cal_yr_conv_pollutants_isSet = !json[QString("PastCalYrConvPollutants")].isNull() && m_past_cal_yr_conv_pollutants_isValid;

    m_past_cal_yr_toxic_pol_ovr_lmt_isValid = ::OpenAPI::fromJsonValue(m_past_cal_yr_toxic_pol_ovr_lmt, json[QString("PastCalYrToxicPolOvrLmt")]);
    m_past_cal_yr_toxic_pol_ovr_lmt_isSet = !json[QString("PastCalYrToxicPolOvrLmt")].isNull() && m_past_cal_yr_toxic_pol_ovr_lmt_isValid;

    m_past_cal_yr_toxic_pollutants_isValid = ::OpenAPI::fromJsonValue(m_past_cal_yr_toxic_pollutants, json[QString("PastCalYrToxicPollutants")]);
    m_past_cal_yr_toxic_pollutants_isSet = !json[QString("PastCalYrToxicPollutants")].isNull() && m_past_cal_yr_toxic_pollutants_isValid;

    m_pctile_cancer_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_cancer_us, json[QString("PctileCancerUs")]);
    m_pctile_cancer_us_isSet = !json[QString("PctileCancerUs")].isNull() && m_pctile_cancer_us_isValid;

    m_pctile_dpm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_dpm_us, json[QString("PctileDpmUs")]);
    m_pctile_dpm_us_isSet = !json[QString("PctileDpmUs")].isNull() && m_pctile_dpm_us_isValid;

    m_pctile_o3_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_o3_us, json[QString("PctileO3Us")]);
    m_pctile_o3_us_isSet = !json[QString("PctileO3Us")].isNull() && m_pctile_o3_us_isValid;

    m_pctile_pctpre1960_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pctpre1960_us, json[QString("PctilePctpre1960Us")]);
    m_pctile_pctpre1960_us_isSet = !json[QString("PctilePctpre1960Us")].isNull() && m_pctile_pctpre1960_us_isValid;

    m_pctile_pm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pm_us, json[QString("PctilePmUs")]);
    m_pctile_pm_us_isSet = !json[QString("PctilePmUs")].isNull() && m_pctile_pm_us_isValid;

    m_pctile_proximity_npdesus_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npdesus, json[QString("PctileProximityNPDESUs")]);
    m_pctile_proximity_npdesus_isSet = !json[QString("PctileProximityNPDESUs")].isNull() && m_pctile_proximity_npdesus_isValid;

    m_pctile_proximity_npl_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npl_us, json[QString("PctileProximityNplUs")]);
    m_pctile_proximity_npl_us_isSet = !json[QString("PctileProximityNplUs")].isNull() && m_pctile_proximity_npl_us_isValid;

    m_pctile_proximity_rmp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_rmp_us, json[QString("PctileProximityRmpUs")]);
    m_pctile_proximity_rmp_us_isSet = !json[QString("PctileProximityRmpUs")].isNull() && m_pctile_proximity_rmp_us_isValid;

    m_pctile_proximity_tsdf_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_tsdf_us, json[QString("PctileProximityTsdfUs")]);
    m_pctile_proximity_tsdf_us_isSet = !json[QString("PctileProximityTsdfUs")].isNull() && m_pctile_proximity_tsdf_us_isValid;

    m_pctile_resp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_resp_us, json[QString("PctileRespUs")]);
    m_pctile_resp_us_isSet = !json[QString("PctileRespUs")].isNull() && m_pctile_resp_us_isValid;

    m_pctile_traffic_score_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_traffic_score_us, json[QString("PctileTrafficScoreUs")]);
    m_pctile_traffic_score_us_isSet = !json[QString("PctileTrafficScoreUs")].isNull() && m_pctile_traffic_score_us_isValid;

    m_permit_components_isValid = ::OpenAPI::fromJsonValue(m_permit_components, json[QString("PermitComponents")]);
    m_permit_components_isSet = !json[QString("PermitComponents")].isNull() && m_permit_components_isValid;

    m_permit_name_isValid = ::OpenAPI::fromJsonValue(m_permit_name, json[QString("PermitName")]);
    m_permit_name_isSet = !json[QString("PermitName")].isNull() && m_permit_name_isValid;

    m_permitting_agency_isValid = ::OpenAPI::fromJsonValue(m_permitting_agency, json[QString("PermittingAgency")]);
    m_permitting_agency_isSet = !json[QString("PermittingAgency")].isNull() && m_permitting_agency_isValid;

    m_poll_with_violation_isValid = ::OpenAPI::fromJsonValue(m_poll_with_violation, json[QString("PollWithViolation")]);
    m_poll_with_violation_isSet = !json[QString("PollWithViolation")].isNull() && m_poll_with_violation_isValid;

    m_rcraids_isValid = ::OpenAPI::fromJsonValue(m_rcraids, json[QString("RCRAIDs")]);
    m_rcraids_isSet = !json[QString("RCRAIDs")].isNull() && m_rcraids_isValid;

    m_rad_gnis_name_isValid = ::OpenAPI::fromJsonValue(m_rad_gnis_name, json[QString("RadGnisName")]);
    m_rad_gnis_name_isSet = !json[QString("RadGnisName")].isNull() && m_rad_gnis_name_isValid;

    m_rad_hu12_name_isValid = ::OpenAPI::fromJsonValue(m_rad_hu12_name, json[QString("RadHu12Name")]);
    m_rad_hu12_name_isSet = !json[QString("RadHu12Name")].isNull() && m_rad_hu12_name_isValid;

    m_rad_reachcode_isValid = ::OpenAPI::fromJsonValue(m_rad_reachcode, json[QString("RadReachcode")]);
    m_rad_reachcode_isSet = !json[QString("RadReachcode")].isNull() && m_rad_reachcode_isValid;

    m_rad_wbdhu8_isValid = ::OpenAPI::fromJsonValue(m_rad_wbdhu8, json[QString("RadWBDHu8")]);
    m_rad_wbdhu8_isSet = !json[QString("RadWBDHu8")].isNull() && m_rad_wbdhu8_isValid;

    m_rad_wbdhu8_name_isValid = ::OpenAPI::fromJsonValue(m_rad_wbdhu8_name, json[QString("RadWBDHu8Name")]);
    m_rad_wbdhu8_name_isSet = !json[QString("RadWBDHu8Name")].isNull() && m_rad_wbdhu8_name_isValid;

    m_rad_wbd_huc12_isValid = ::OpenAPI::fromJsonValue(m_rad_wbd_huc12, json[QString("RadWBDHuc12")]);
    m_rad_wbd_huc12_isSet = !json[QString("RadWBDHuc12")].isNull() && m_rad_wbd_huc12_isValid;

    m_receiving_ms4_name_isValid = ::OpenAPI::fromJsonValue(m_receiving_ms4_name, json[QString("ReceivingMs4Name")]);
    m_receiving_ms4_name_isSet = !json[QString("ReceivingMs4Name")].isNull() && m_receiving_ms4_name_isValid;

    m_reference_point_isValid = ::OpenAPI::fromJsonValue(m_reference_point, json[QString("ReferencePoint")]);
    m_reference_point_isSet = !json[QString("ReferencePoint")].isNull() && m_reference_point_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_rmp_ids_isValid = ::OpenAPI::fromJsonValue(m_rmp_ids, json[QString("RmpIDs")]);
    m_rmp_ids_isSet = !json[QString("RmpIDs")].isNull() && m_rmp_ids_isValid;

    m_sdwaids_isValid = ::OpenAPI::fromJsonValue(m_sdwaids, json[QString("SDWAIDs")]);
    m_sdwaids_isSet = !json[QString("SDWAIDs")].isNull() && m_sdwaids_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("Sector")]);
    m_sector_isSet = !json[QString("Sector")].isNull() && m_sector_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_species_critical_habital_flag_isValid = ::OpenAPI::fromJsonValue(m_species_critical_habital_flag, json[QString("SpeciesCriticalHabitalFlag")]);
    m_species_critical_habital_flag_isSet = !json[QString("SpeciesCriticalHabitalFlag")].isNull() && m_species_critical_habital_flag_isValid;

    m_state_auth_biosolids_isValid = ::OpenAPI::fromJsonValue(m_state_auth_biosolids, json[QString("StateAuthBiosolids")]);
    m_state_auth_biosolids_isSet = !json[QString("StateAuthBiosolids")].isNull() && m_state_auth_biosolids_isValid;

    m_state_auth_fedfac_isValid = ::OpenAPI::fromJsonValue(m_state_auth_fedfac, json[QString("StateAuthFedfac")]);
    m_state_auth_fedfac_isSet = !json[QString("StateAuthFedfac")].isNull() && m_state_auth_fedfac_isValid;

    m_state_auth_gen_isValid = ::OpenAPI::fromJsonValue(m_state_auth_gen, json[QString("StateAuthGen")]);
    m_state_auth_gen_isSet = !json[QString("StateAuthGen")].isNull() && m_state_auth_gen_isValid;

    m_state_auth_npdes_isValid = ::OpenAPI::fromJsonValue(m_state_auth_npdes, json[QString("StateAuthNPDES")]);
    m_state_auth_npdes_isSet = !json[QString("StateAuthNPDES")].isNull() && m_state_auth_npdes_isValid;

    m_state_auth_pretreat_isValid = ::OpenAPI::fromJsonValue(m_state_auth_pretreat, json[QString("StateAuthPretreat")]);
    m_state_auth_pretreat_isSet = !json[QString("StateAuthPretreat")].isNull() && m_state_auth_pretreat_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_storm_water_area_isValid = ::OpenAPI::fromJsonValue(m_storm_water_area, json[QString("StormWaterArea")]);
    m_storm_water_area_isSet = !json[QString("StormWaterArea")].isNull() && m_storm_water_area_isValid;

    m_submitted_date_isValid = ::OpenAPI::fromJsonValue(m_submitted_date, json[QString("SubmittedDate")]);
    m_submitted_date_isSet = !json[QString("SubmittedDate")].isNull() && m_submitted_date_isValid;

    m_subsector_isValid = ::OpenAPI::fromJsonValue(m_subsector, json[QString("Subsector")]);
    m_subsector_isSet = !json[QString("Subsector")].isNull() && m_subsector_isValid;

    m_swppp_url_isValid = ::OpenAPI::fromJsonValue(m_swppp_url, json[QString("SwpppUrl")]);
    m_swppp_url_isSet = !json[QString("SwpppUrl")].isNull() && m_swppp_url_isValid;

    m_triids_isValid = ::OpenAPI::fromJsonValue(m_triids, json[QString("TRIIDs")]);
    m_triids_isSet = !json[QString("TRIIDs")].isNull() && m_triids_isValid;

    m_tr_ibal_flag_isValid = ::OpenAPI::fromJsonValue(m_tr_ibal_flag, json[QString("TRIbalFlag")]);
    m_tr_ibal_flag_isSet = !json[QString("TRIbalFlag")].isNull() && m_tr_ibal_flag_isValid;

    m_type_of_monitoring_isValid = ::OpenAPI::fromJsonValue(m_type_of_monitoring, json[QString("TypeOfMonitoring")]);
    m_type_of_monitoring_isSet = !json[QString("TypeOfMonitoring")].isNull() && m_type_of_monitoring_isValid;

    m_type_of_water_isValid = ::OpenAPI::fromJsonValue(m_type_of_water, json[QString("TypeOfWater")]);
    m_type_of_water_isSet = !json[QString("TypeOfWater")].isNull() && m_type_of_water_isValid;

    m_vio_last_year_isValid = ::OpenAPI::fromJsonValue(m_vio_last_year, json[QString("VioLastYear")]);
    m_vio_last_year_isSet = !json[QString("VioLastYear")].isNull() && m_vio_last_year_isValid;

    m_viol_flag_isValid = ::OpenAPI::fromJsonValue(m_viol_flag, json[QString("ViolFlag")]);
    m_viol_flag_isSet = !json[QString("ViolFlag")].isNull() && m_viol_flag_isValid;

    m_web_docs_isValid = ::OpenAPI::fromJsonValue(m_web_docs, json[QString("WebDocs")]);
    m_web_docs_isSet = !json[QString("WebDocs")].isNull() && m_web_docs_isValid;
}

QString OAICwa07::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICwa07::asJsonObject() const {
    QJsonObject obj;
    if (m_airids_isSet) {
        obj.insert(QString("AIRIDs"), ::OpenAPI::toJsonValue(m_airids));
    }
    if (m_active_lower48_isSet) {
        obj.insert(QString("ActiveLower48"), ::OpenAPI::toJsonValue(m_active_lower48));
    }
    if (m_alr_exceedences_isSet) {
        obj.insert(QString("AlrExceedences"), ::OpenAPI::toJsonValue(m_alr_exceedences));
    }
    if (m_associated_pollutant_isSet) {
        obj.insert(QString("AssociatedPollutant"), ::OpenAPI::toJsonValue(m_associated_pollutant));
    }
    if (m_attains_aquatic_life_use_flg_isSet) {
        obj.insert(QString("AttainsAquaticLifeUseFlg"), ::OpenAPI::toJsonValue(m_attains_aquatic_life_use_flg));
    }
    if (m_attains_au_category_isSet) {
        obj.insert(QString("AttainsAuCategory"), ::OpenAPI::toJsonValue(m_attains_au_category));
    }
    if (m_attains_cause_groups_isSet) {
        obj.insert(QString("AttainsCauseGroups"), ::OpenAPI::toJsonValue(m_attains_cause_groups));
    }
    if (m_attains_cycle_year_isSet) {
        obj.insert(QString("AttainsCycleYear"), ::OpenAPI::toJsonValue(m_attains_cycle_year));
    }
    if (m_attains_exceptnl_use_flg_isSet) {
        obj.insert(QString("AttainsExceptnlUseFlg"), ::OpenAPI::toJsonValue(m_attains_exceptnl_use_flg));
    }
    if (m_attains_imp_water_flg_isSet) {
        obj.insert(QString("AttainsImpWaterFlg"), ::OpenAPI::toJsonValue(m_attains_imp_water_flg));
    }
    if (m_attains_possible_npdes_params_isSet) {
        obj.insert(QString("AttainsPossibleNPDESParams"), ::OpenAPI::toJsonValue(m_attains_possible_npdes_params));
    }
    if (m_attains_recreation_use_flg_isSet) {
        obj.insert(QString("AttainsRecreationUseFlg"), ::OpenAPI::toJsonValue(m_attains_recreation_use_flg));
    }
    if (m_attains_shellfish_use_flg_isSet) {
        obj.insert(QString("AttainsShellfishUseFlg"), ::OpenAPI::toJsonValue(m_attains_shellfish_use_flg));
    }
    if (m_attains_source_isSet) {
        obj.insert(QString("AttainsSource"), ::OpenAPI::toJsonValue(m_attains_source));
    }
    if (m_attains_state_causes_isSet) {
        obj.insert(QString("AttainsStateCauses"), ::OpenAPI::toJsonValue(m_attains_state_causes));
    }
    if (m_beach_close_last2yrs_flg_isSet) {
        obj.insert(QString("BeachCloseLast2yrsFlg"), ::OpenAPI::toJsonValue(m_beach_close_last2yrs_flg));
    }
    if (m_beach_close_last_year_flg_isSet) {
        obj.insert(QString("BeachCloseLastYearFlg"), ::OpenAPI::toJsonValue(m_beach_close_last_year_flg));
    }
    if (m_bio_analy_method_catgrys_isSet) {
        obj.insert(QString("BioAnalyMethodCatgrys"), ::OpenAPI::toJsonValue(m_bio_analy_method_catgrys));
    }
    if (m_bio_analy_method_catgrys2016_isSet) {
        obj.insert(QString("BioAnalyMethodCatgrys2016"), ::OpenAPI::toJsonValue(m_bio_analy_method_catgrys2016));
    }
    if (m_bio_analy_method_catgrys2017_isSet) {
        obj.insert(QString("BioAnalyMethodCatgrys2017"), ::OpenAPI::toJsonValue(m_bio_analy_method_catgrys2017));
    }
    if (m_bio_analy_methods_isSet) {
        obj.insert(QString("BioAnalyMethods"), ::OpenAPI::toJsonValue(m_bio_analy_methods));
    }
    if (m_bio_analy_methods2016_isSet) {
        obj.insert(QString("BioAnalyMethods2016"), ::OpenAPI::toJsonValue(m_bio_analy_methods2016));
    }
    if (m_bio_analy_methods2017_isSet) {
        obj.insert(QString("BioAnalyMethods2017"), ::OpenAPI::toJsonValue(m_bio_analy_methods2017));
    }
    if (m_bio_comment_text_isSet) {
        obj.insert(QString("BioCommentText"), ::OpenAPI::toJsonValue(m_bio_comment_text));
    }
    if (m_bio_comment_text2016_isSet) {
        obj.insert(QString("BioCommentText2016"), ::OpenAPI::toJsonValue(m_bio_comment_text2016));
    }
    if (m_bio_comment_text2017_isSet) {
        obj.insert(QString("BioCommentText2017"), ::OpenAPI::toJsonValue(m_bio_comment_text2017));
    }
    if (m_bio_incineration_sum_isSet) {
        obj.insert(QString("BioIncinerationSum"), ::OpenAPI::toJsonValue(m_bio_incineration_sum));
    }
    if (m_bio_incineration_sum2016_isSet) {
        obj.insert(QString("BioIncinerationSum2016"), ::OpenAPI::toJsonValue(m_bio_incineration_sum2016));
    }
    if (m_bio_incineration_sum2017_isSet) {
        obj.insert(QString("BioIncinerationSum2017"), ::OpenAPI::toJsonValue(m_bio_incineration_sum2017));
    }
    if (m_bio_land_application_sum_isSet) {
        obj.insert(QString("BioLandApplicationSum"), ::OpenAPI::toJsonValue(m_bio_land_application_sum));
    }
    if (m_bio_land_application_sum2016_isSet) {
        obj.insert(QString("BioLandApplicationSum2016"), ::OpenAPI::toJsonValue(m_bio_land_application_sum2016));
    }
    if (m_bio_land_application_sum2017_isSet) {
        obj.insert(QString("BioLandApplicationSum2017"), ::OpenAPI::toJsonValue(m_bio_land_application_sum2017));
    }
    if (m_bio_mgmt_containers_isSet) {
        obj.insert(QString("BioMgmtContainers"), ::OpenAPI::toJsonValue(m_bio_mgmt_containers));
    }
    if (m_bio_mgmt_containers2016_isSet) {
        obj.insert(QString("BioMgmtContainers2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_containers2016));
    }
    if (m_bio_mgmt_containers2017_isSet) {
        obj.insert(QString("BioMgmtContainers2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_containers2017));
    }
    if (m_bio_mgmt_def_categories_isSet) {
        obj.insert(QString("BioMgmtDefCategories"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_categories));
    }
    if (m_bio_mgmt_def_categories2016_isSet) {
        obj.insert(QString("BioMgmtDefCategories2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_categories2016));
    }
    if (m_bio_mgmt_def_categories2017_isSet) {
        obj.insert(QString("BioMgmtDefCategories2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_categories2017));
    }
    if (m_bio_mgmt_def_current_cnt_isSet) {
        obj.insert(QString("BioMgmtDefCurrentCnt"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_current_cnt));
    }
    if (m_bio_mgmt_def_current_cnt2016_isSet) {
        obj.insert(QString("BioMgmtDefCurrentCnt2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_current_cnt2016));
    }
    if (m_bio_mgmt_def_current_cnt2017_isSet) {
        obj.insert(QString("BioMgmtDefCurrentCnt2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_def_current_cnt2017));
    }
    if (m_bio_mgmt_deficiencies_isSet) {
        obj.insert(QString("BioMgmtDeficiencies"), ::OpenAPI::toJsonValue(m_bio_mgmt_deficiencies));
    }
    if (m_bio_mgmt_deficiencies2016_isSet) {
        obj.insert(QString("BioMgmtDeficiencies2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_deficiencies2016));
    }
    if (m_bio_mgmt_deficiencies2017_isSet) {
        obj.insert(QString("BioMgmtDeficiencies2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_deficiencies2017));
    }
    if (m_bio_mgmt_handlers_isSet) {
        obj.insert(QString("BioMgmtHandlers"), ::OpenAPI::toJsonValue(m_bio_mgmt_handlers));
    }
    if (m_bio_mgmt_handlers2016_isSet) {
        obj.insert(QString("BioMgmtHandlers2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_handlers2016));
    }
    if (m_bio_mgmt_handlers2017_isSet) {
        obj.insert(QString("BioMgmtHandlers2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_handlers2017));
    }
    if (m_bio_mgmt_pathogens_isSet) {
        obj.insert(QString("BioMgmtPathogens"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathogens));
    }
    if (m_bio_mgmt_pathogens2016_isSet) {
        obj.insert(QString("BioMgmtPathogens2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathogens2016));
    }
    if (m_bio_mgmt_pathogens2017_isSet) {
        obj.insert(QString("BioMgmtPathogens2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathogens2017));
    }
    if (m_bio_mgmt_pathreds_isSet) {
        obj.insert(QString("BioMgmtPathreds"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathreds));
    }
    if (m_bio_mgmt_pathreds2016_isSet) {
        obj.insert(QString("BioMgmtPathreds2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathreds2016));
    }
    if (m_bio_mgmt_pathreds2017_isSet) {
        obj.insert(QString("BioMgmtPathreds2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_pathreds2017));
    }
    if (m_bio_mgmt_prctce_stypes_isSet) {
        obj.insert(QString("BioMgmtPrctceStypes"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_stypes));
    }
    if (m_bio_mgmt_prctce_stypes2016_isSet) {
        obj.insert(QString("BioMgmtPrctceStypes2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_stypes2016));
    }
    if (m_bio_mgmt_prctce_stypes2017_isSet) {
        obj.insert(QString("BioMgmtPrctceStypes2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_stypes2017));
    }
    if (m_bio_mgmt_prctce_types_isSet) {
        obj.insert(QString("BioMgmtPrctceTypes"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_types));
    }
    if (m_bio_mgmt_prctce_types2016_isSet) {
        obj.insert(QString("BioMgmtPrctceTypes2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_types2016));
    }
    if (m_bio_mgmt_prctce_types2017_isSet) {
        obj.insert(QString("BioMgmtPrctceTypes2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_prctce_types2017));
    }
    if (m_bio_mgmt_vectors_isSet) {
        obj.insert(QString("BioMgmtVectors"), ::OpenAPI::toJsonValue(m_bio_mgmt_vectors));
    }
    if (m_bio_mgmt_vectors2016_isSet) {
        obj.insert(QString("BioMgmtVectors2016"), ::OpenAPI::toJsonValue(m_bio_mgmt_vectors2016));
    }
    if (m_bio_mgmt_vectors2017_isSet) {
        obj.insert(QString("BioMgmtVectors2017"), ::OpenAPI::toJsonValue(m_bio_mgmt_vectors2017));
    }
    if (m_bio_other_management_sum_isSet) {
        obj.insert(QString("BioOtherManagementSum"), ::OpenAPI::toJsonValue(m_bio_other_management_sum));
    }
    if (m_bio_other_management_sum2016_isSet) {
        obj.insert(QString("BioOtherManagementSum2016"), ::OpenAPI::toJsonValue(m_bio_other_management_sum2016));
    }
    if (m_bio_other_management_sum2017_isSet) {
        obj.insert(QString("BioOtherManagementSum2017"), ::OpenAPI::toJsonValue(m_bio_other_management_sum2017));
    }
    if (m_bio_other_mgmt_prctc_txts_isSet) {
        obj.insert(QString("BioOtherMgmtPrctcTxts"), ::OpenAPI::toJsonValue(m_bio_other_mgmt_prctc_txts));
    }
    if (m_bio_other_mgmt_prctc_txts2016_isSet) {
        obj.insert(QString("BioOtherMgmtPrctcTxts2016"), ::OpenAPI::toJsonValue(m_bio_other_mgmt_prctc_txts2016));
    }
    if (m_bio_other_mgmt_prctc_txts2017_isSet) {
        obj.insert(QString("BioOtherMgmtPrctcTxts2017"), ::OpenAPI::toJsonValue(m_bio_other_mgmt_prctc_txts2017));
    }
    if (m_bio_qtrs_with_vio_isSet) {
        obj.insert(QString("BioQtrsWithVio"), ::OpenAPI::toJsonValue(m_bio_qtrs_with_vio));
    }
    if (m_bio_report_date_isSet) {
        obj.insert(QString("BioReportDate"), ::OpenAPI::toJsonValue(m_bio_report_date));
    }
    if (m_bio_report_date2016_isSet) {
        obj.insert(QString("BioReportDate2016"), ::OpenAPI::toJsonValue(m_bio_report_date2016));
    }
    if (m_bio_report_date2017_isSet) {
        obj.insert(QString("BioReportDate2017"), ::OpenAPI::toJsonValue(m_bio_report_date2017));
    }
    if (m_bio_report_year_isSet) {
        obj.insert(QString("BioReportYear"), ::OpenAPI::toJsonValue(m_bio_report_year));
    }
    if (m_bio_report_years_isSet) {
        obj.insert(QString("BioReportYears"), ::OpenAPI::toJsonValue(m_bio_report_years));
    }
    if (m_bio_reporting_obligations_isSet) {
        obj.insert(QString("BioReportingObligations"), ::OpenAPI::toJsonValue(m_bio_reporting_obligations));
    }
    if (m_bio_reporting_obligations2016_isSet) {
        obj.insert(QString("BioReportingObligations2016"), ::OpenAPI::toJsonValue(m_bio_reporting_obligations2016));
    }
    if (m_bio_reporting_obligations2017_isSet) {
        obj.insert(QString("BioReportingObligations2017"), ::OpenAPI::toJsonValue(m_bio_reporting_obligations2017));
    }
    if (m_bio_surface_disp_sum_isSet) {
        obj.insert(QString("BioSurfaceDispSum"), ::OpenAPI::toJsonValue(m_bio_surface_disp_sum));
    }
    if (m_bio_surface_disp_sum2016_isSet) {
        obj.insert(QString("BioSurfaceDispSum2016"), ::OpenAPI::toJsonValue(m_bio_surface_disp_sum2016));
    }
    if (m_bio_surface_disp_sum2017_isSet) {
        obj.insert(QString("BioSurfaceDispSum2017"), ::OpenAPI::toJsonValue(m_bio_surface_disp_sum2017));
    }
    if (m_bio_total_volume_amt_isSet) {
        obj.insert(QString("BioTotalVolumeAmt"), ::OpenAPI::toJsonValue(m_bio_total_volume_amt));
    }
    if (m_bio_total_volume_amt2016_isSet) {
        obj.insert(QString("BioTotalVolumeAmt2016"), ::OpenAPI::toJsonValue(m_bio_total_volume_amt2016));
    }
    if (m_bio_total_volume_amt2017_isSet) {
        obj.insert(QString("BioTotalVolumeAmt2017"), ::OpenAPI::toJsonValue(m_bio_total_volume_amt2017));
    }
    if (m_bio_trmnt_prcss_cmnt_txts2016_isSet) {
        obj.insert(QString("BioTrmntPrcssCmntTxts2016"), ::OpenAPI::toJsonValue(m_bio_trmnt_prcss_cmnt_txts2016));
    }
    if (m_bio_trmnt_prcss_cmnt_txts2017_isSet) {
        obj.insert(QString("BioTrmntPrcssCmntTxts2017"), ::OpenAPI::toJsonValue(m_bio_trmnt_prcss_cmnt_txts2017));
    }
    if (m_bio_trtmnt_prcss_cmmnt_txts_isSet) {
        obj.insert(QString("BioTrtmntPrcssCmmntTxts"), ::OpenAPI::toJsonValue(m_bio_trtmnt_prcss_cmmnt_txts));
    }
    if (m_bio_trtmnt_processes_isSet) {
        obj.insert(QString("BioTrtmntProcesses"), ::OpenAPI::toJsonValue(m_bio_trtmnt_processes));
    }
    if (m_bio_trtmnt_processes2016_isSet) {
        obj.insert(QString("BioTrtmntProcesses2016"), ::OpenAPI::toJsonValue(m_bio_trtmnt_processes2016));
    }
    if (m_bio_trtmnt_processes2017_isSet) {
        obj.insert(QString("BioTrtmntProcesses2017"), ::OpenAPI::toJsonValue(m_bio_trtmnt_processes2017));
    }
    if (m_bio_vio_last_year_isSet) {
        obj.insert(QString("BioVioLastYear"), ::OpenAPI::toJsonValue(m_bio_vio_last_year));
    }
    if (m_bio_vio_last_year_flag_isSet) {
        obj.insert(QString("BioVioLastYearFlag"), ::OpenAPI::toJsonValue(m_bio_vio_last_year_flag));
    }
    if (m_bio_vio_status_isSet) {
        obj.insert(QString("BioVioStatus"), ::OpenAPI::toJsonValue(m_bio_vio_status));
    }
    if (m_bio_viol_flag_isSet) {
        obj.insert(QString("BioViolFlag"), ::OpenAPI::toJsonValue(m_bio_viol_flag));
    }
    if (m_biosolids_flag_isSet) {
        obj.insert(QString("BiosolidsFlag"), ::OpenAPI::toJsonValue(m_biosolids_flag));
    }
    if (m_cwp13qtrs_compl_history_isSet) {
        obj.insert(QString("CWP13qtrsComplHistory"), ::OpenAPI::toJsonValue(m_cwp13qtrs_compl_history));
    }
    if (m_cwp_actual_average_flow_nmbr_isSet) {
        obj.insert(QString("CWPActualAverageFlowNmbr"), ::OpenAPI::toJsonValue(m_cwp_actual_average_flow_nmbr));
    }
    if (m_cwp_bio_fea_count_isSet) {
        obj.insert(QString("CWPBioFeaCount"), ::OpenAPI::toJsonValue(m_cwp_bio_fea_count));
    }
    if (m_cwp_bio_iea_count_isSet) {
        obj.insert(QString("CWPBioIeaCount"), ::OpenAPI::toJsonValue(m_cwp_bio_iea_count));
    }
    if (m_cwp_bio_insp_count_isSet) {
        obj.insert(QString("CWPBioInspCount"), ::OpenAPI::toJsonValue(m_cwp_bio_insp_count));
    }
    if (m_cwp_bio_penalties_isSet) {
        obj.insert(QString("CWPBioPenalties"), ::OpenAPI::toJsonValue(m_cwp_bio_penalties));
    }
    if (m_cwp_case_ids_isSet) {
        obj.insert(QString("CWPCaseIDs"), ::OpenAPI::toJsonValue(m_cwp_case_ids));
    }
    if (m_cwp_city_isSet) {
        obj.insert(QString("CWPCity"), ::OpenAPI::toJsonValue(m_cwp_city));
    }
    if (m_cwp_compliance_tracking_isSet) {
        obj.insert(QString("CWPComplianceTracking"), ::OpenAPI::toJsonValue(m_cwp_compliance_tracking));
    }
    if (m_cwp_county_isSet) {
        obj.insert(QString("CWPCounty"), ::OpenAPI::toJsonValue(m_cwp_county));
    }
    if (m_cwp_cso_flag_isSet) {
        obj.insert(QString("CWPCsoFlag"), ::OpenAPI::toJsonValue(m_cwp_cso_flag));
    }
    if (m_cwp_cso_outfalls_isSet) {
        obj.insert(QString("CWPCsoOutfalls"), ::OpenAPI::toJsonValue(m_cwp_cso_outfalls));
    }
    if (m_cwp_date_last_bio_fea_isSet) {
        obj.insert(QString("CWPDateLastBioFea"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_fea));
    }
    if (m_cwp_date_last_bio_fea_epa_isSet) {
        obj.insert(QString("CWPDateLastBioFeaEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_fea_epa));
    }
    if (m_cwp_date_last_bio_fea_st_isSet) {
        obj.insert(QString("CWPDateLastBioFeaSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_fea_st));
    }
    if (m_cwp_date_last_bio_iea_isSet) {
        obj.insert(QString("CWPDateLastBioIea"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_iea));
    }
    if (m_cwp_date_last_bio_iea_epa_isSet) {
        obj.insert(QString("CWPDateLastBioIeaEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_iea_epa));
    }
    if (m_cwp_date_last_bio_iea_st_isSet) {
        obj.insert(QString("CWPDateLastBioIeaSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_iea_st));
    }
    if (m_cwp_date_last_bio_insp_isSet) {
        obj.insert(QString("CWPDateLastBioInsp"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_insp));
    }
    if (m_cwp_date_last_bio_insp_epa_isSet) {
        obj.insert(QString("CWPDateLastBioInspEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_insp_epa));
    }
    if (m_cwp_date_last_bio_insp_st_isSet) {
        obj.insert(QString("CWPDateLastBioInspSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_insp_st));
    }
    if (m_cwp_date_last_bio_penalty_isSet) {
        obj.insert(QString("CWPDateLastBioPenalty"), ::OpenAPI::toJsonValue(m_cwp_date_last_bio_penalty));
    }
    if (m_cwp_date_last_fea_isSet) {
        obj.insert(QString("CWPDateLastFea"), ::OpenAPI::toJsonValue(m_cwp_date_last_fea));
    }
    if (m_cwp_date_last_fea_epa_isSet) {
        obj.insert(QString("CWPDateLastFeaEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_fea_epa));
    }
    if (m_cwp_date_last_fea_st_isSet) {
        obj.insert(QString("CWPDateLastFeaSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_fea_st));
    }
    if (m_cwp_date_last_iea_epa_isSet) {
        obj.insert(QString("CWPDateLastIeaEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_iea_epa));
    }
    if (m_cwp_date_last_iea_st_isSet) {
        obj.insert(QString("CWPDateLastIeaSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_iea_st));
    }
    if (m_cwp_date_last_informal_ea_isSet) {
        obj.insert(QString("CWPDateLastInformalEa"), ::OpenAPI::toJsonValue(m_cwp_date_last_informal_ea));
    }
    if (m_cwp_date_last_insp_epa_isSet) {
        obj.insert(QString("CWPDateLastInspEPA"), ::OpenAPI::toJsonValue(m_cwp_date_last_insp_epa));
    }
    if (m_cwp_date_last_insp_st_isSet) {
        obj.insert(QString("CWPDateLastInspSt"), ::OpenAPI::toJsonValue(m_cwp_date_last_insp_st));
    }
    if (m_cwp_date_last_inspection_isSet) {
        obj.insert(QString("CWPDateLastInspection"), ::OpenAPI::toJsonValue(m_cwp_date_last_inspection));
    }
    if (m_cwp_date_last_penalty_isSet) {
        obj.insert(QString("CWPDateLastPenalty"), ::OpenAPI::toJsonValue(m_cwp_date_last_penalty));
    }
    if (m_cwp_days_last_bio_insp_isSet) {
        obj.insert(QString("CWPDaysLastBioInsp"), ::OpenAPI::toJsonValue(m_cwp_days_last_bio_insp));
    }
    if (m_cwp_days_last_inspection_isSet) {
        obj.insert(QString("CWPDaysLastInspection"), ::OpenAPI::toJsonValue(m_cwp_days_last_inspection));
    }
    if (m_cwpe90_cnt_isSet) {
        obj.insert(QString("CWPE90Cnt"), ::OpenAPI::toJsonValue(m_cwpe90_cnt));
    }
    if (m_cwpepa_region_isSet) {
        obj.insert(QString("CWPEPARegion"), ::OpenAPI::toJsonValue(m_cwpepa_region));
    }
    if (m_cwp_effective_date_isSet) {
        obj.insert(QString("CWPEffectiveDate"), ::OpenAPI::toJsonValue(m_cwp_effective_date));
    }
    if (m_cwp_expiration_date_isSet) {
        obj.insert(QString("CWPExpirationDate"), ::OpenAPI::toJsonValue(m_cwp_expiration_date));
    }
    if (m_cwpfips_code_isSet) {
        obj.insert(QString("CWPFIPSCode"), ::OpenAPI::toJsonValue(m_cwpfips_code));
    }
    if (m_cwp_facility_type_code_isSet) {
        obj.insert(QString("CWPFacilityTypeCode"), ::OpenAPI::toJsonValue(m_cwp_facility_type_code));
    }
    if (m_cwp_facility_type_indicator_isSet) {
        obj.insert(QString("CWPFacilityTypeIndicator"), ::OpenAPI::toJsonValue(m_cwp_facility_type_indicator));
    }
    if (m_cwp_formal_ea_cnt_isSet) {
        obj.insert(QString("CWPFormalEaCnt"), ::OpenAPI::toJsonValue(m_cwp_formal_ea_cnt));
    }
    if (m_cwp_imp_water_flg_isSet) {
        obj.insert(QString("CWPImpWaterFlg"), ::OpenAPI::toJsonValue(m_cwp_imp_water_flg));
    }
    if (m_cwp_indian_cntry_flg_isSet) {
        obj.insert(QString("CWPIndianCntryFlg"), ::OpenAPI::toJsonValue(m_cwp_indian_cntry_flg));
    }
    if (m_cwp_informal_enf_act_count_isSet) {
        obj.insert(QString("CWPInformalEnfActCount"), ::OpenAPI::toJsonValue(m_cwp_informal_enf_act_count));
    }
    if (m_cwp_inspection_count_isSet) {
        obj.insert(QString("CWPInspectionCount"), ::OpenAPI::toJsonValue(m_cwp_inspection_count));
    }
    if (m_cwp_issue_date_isSet) {
        obj.insert(QString("CWPIssueDate"), ::OpenAPI::toJsonValue(m_cwp_issue_date));
    }
    if (m_cwp_major_minor_status_flag_isSet) {
        obj.insert(QString("CWPMajorMinorStatusFlag"), ::OpenAPI::toJsonValue(m_cwp_major_minor_status_flag));
    }
    if (m_cwpnaics_codes_isSet) {
        obj.insert(QString("CWPNAICSCodes"), ::OpenAPI::toJsonValue(m_cwpnaics_codes));
    }
    if (m_cwp_name_isSet) {
        obj.insert(QString("CWPName"), ::OpenAPI::toJsonValue(m_cwp_name));
    }
    if (m_cwp_permit_status_code_isSet) {
        obj.insert(QString("CWPPermitStatusCode"), ::OpenAPI::toJsonValue(m_cwp_permit_status_code));
    }
    if (m_cwp_permit_status_desc_isSet) {
        obj.insert(QString("CWPPermitStatusDesc"), ::OpenAPI::toJsonValue(m_cwp_permit_status_desc));
    }
    if (m_cwp_permit_type_code_isSet) {
        obj.insert(QString("CWPPermitTypeCode"), ::OpenAPI::toJsonValue(m_cwp_permit_type_code));
    }
    if (m_cwp_permit_type_desc_isSet) {
        obj.insert(QString("CWPPermitTypeDesc"), ::OpenAPI::toJsonValue(m_cwp_permit_type_desc));
    }
    if (m_cwp_qtrs_with_nc_isSet) {
        obj.insert(QString("CWPQtrsWithNC"), ::OpenAPI::toJsonValue(m_cwp_qtrs_with_nc));
    }
    if (m_cwp_qtrs_with_snc_isSet) {
        obj.insert(QString("CWPQtrsWithSNC"), ::OpenAPI::toJsonValue(m_cwp_qtrs_with_snc));
    }
    if (m_cwpsic_codes_isSet) {
        obj.insert(QString("CWPSICCodes"), ::OpenAPI::toJsonValue(m_cwpsic_codes));
    }
    if (m_cwpsnc_event_desc_isSet) {
        obj.insert(QString("CWPSNCEventDesc"), ::OpenAPI::toJsonValue(m_cwpsnc_event_desc));
    }
    if (m_cwpsnc_status_isSet) {
        obj.insert(QString("CWPSNCStatus"), ::OpenAPI::toJsonValue(m_cwpsnc_status));
    }
    if (m_cwpsnc_status_date_isSet) {
        obj.insert(QString("CWPSNCStatusDate"), ::OpenAPI::toJsonValue(m_cwpsnc_status_date));
    }
    if (m_cwp_state_isSet) {
        obj.insert(QString("CWPState"), ::OpenAPI::toJsonValue(m_cwp_state));
    }
    if (m_cwp_state_district_isSet) {
        obj.insert(QString("CWPStateDistrict"), ::OpenAPI::toJsonValue(m_cwp_state_district));
    }
    if (m_cwp_state_water_body_code_isSet) {
        obj.insert(QString("CWPStateWaterBodyCode"), ::OpenAPI::toJsonValue(m_cwp_state_water_body_code));
    }
    if (m_cwp_state_water_body_name_isSet) {
        obj.insert(QString("CWPStateWaterBodyName"), ::OpenAPI::toJsonValue(m_cwp_state_water_body_name));
    }
    if (m_cwp_status_isSet) {
        obj.insert(QString("CWPStatus"), ::OpenAPI::toJsonValue(m_cwp_status));
    }
    if (m_cwp_street_isSet) {
        obj.insert(QString("CWPStreet"), ::OpenAPI::toJsonValue(m_cwp_street));
    }
    if (m_cwptr_ibal_land_code_isSet) {
        obj.insert(QString("CWPTRIbalLandCode"), ::OpenAPI::toJsonValue(m_cwptr_ibal_land_code));
    }
    if (m_cwp_termination_date_isSet) {
        obj.insert(QString("CWPTerminationDate"), ::OpenAPI::toJsonValue(m_cwp_termination_date));
    }
    if (m_cwp_total_design_flow_nmbr_isSet) {
        obj.insert(QString("CWPTotalDesignFlowNmbr"), ::OpenAPI::toJsonValue(m_cwp_total_design_flow_nmbr));
    }
    if (m_cwp_total_penalties_isSet) {
        obj.insert(QString("CWPTotalPenalties"), ::OpenAPI::toJsonValue(m_cwp_total_penalties));
    }
    if (m_cwp_version_nmbr_isSet) {
        obj.insert(QString("CWPVersionNmbr"), ::OpenAPI::toJsonValue(m_cwp_version_nmbr));
    }
    if (m_cwp_vio_status_isSet) {
        obj.insert(QString("CWPVioStatus"), ::OpenAPI::toJsonValue(m_cwp_vio_status));
    }
    if (m_cwp_viol_status_isSet) {
        obj.insert(QString("CWPViolStatus"), ::OpenAPI::toJsonValue(m_cwp_viol_status));
    }
    if (m_cwp_zip_isSet) {
        obj.insert(QString("CWPZip"), ::OpenAPI::toJsonValue(m_cwp_zip));
    }
    if (m_calculated_accuracy_meters_isSet) {
        obj.insert(QString("CalculatedAccuracyMeters"), ::OpenAPI::toJsonValue(m_calculated_accuracy_meters));
    }
    if (m_census_block_group_isSet) {
        obj.insert(QString("CensusBlockGroup"), ::OpenAPI::toJsonValue(m_census_block_group));
    }
    if (m_certified_date_isSet) {
        obj.insert(QString("CertifiedDate"), ::OpenAPI::toJsonValue(m_certified_date));
    }
    if (m_chesapeake_bay_flag_isSet) {
        obj.insert(QString("ChesapeakeBayFlag"), ::OpenAPI::toJsonValue(m_chesapeake_bay_flag));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("CollectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_control_measure_isSet) {
        obj.insert(QString("ControlMeasure"), ::OpenAPI::toJsonValue(m_control_measure));
    }
    if (m_control_measure_schedule_isSet) {
        obj.insert(QString("ControlMeasureSchedule"), ::OpenAPI::toJsonValue(m_control_measure_schedule));
    }
    if (m_curr_sv_flag_isSet) {
        obj.insert(QString("CurrSvFlag"), ::OpenAPI::toJsonValue(m_curr_sv_flag));
    }
    if (m_curr_vio_flag_isSet) {
        obj.insert(QString("CurrVioFlag"), ::OpenAPI::toJsonValue(m_curr_vio_flag));
    }
    if (m_dmr_impaired_poll_isSet) {
        obj.insert(QString("DMRImpairedPoll"), ::OpenAPI::toJsonValue(m_dmr_impaired_poll));
    }
    if (m_dmr_pounds_isSet) {
        obj.insert(QString("DMRPounds"), ::OpenAPI::toJsonValue(m_dmr_pounds));
    }
    if (m_dmr_twpe_isSet) {
        obj.insert(QString("DMRTwpe"), ::OpenAPI::toJsonValue(m_dmr_twpe));
    }
    if (m_dsch_to_ms4_isSet) {
        obj.insert(QString("DschToMs4"), ::OpenAPI::toJsonValue(m_dsch_to_ms4));
    }
    if (m_e90_exceeds1yr_isSet) {
        obj.insert(QString("E90Exceeds1yr"), ::OpenAPI::toJsonValue(m_e90_exceeds1yr));
    }
    if (m_e90_exceeds2yr_isSet) {
        obj.insert(QString("E90Exceeds2yr"), ::OpenAPI::toJsonValue(m_e90_exceeds2yr));
    }
    if (m_e90_exceeds3yr_isSet) {
        obj.insert(QString("E90Exceeds3yr"), ::OpenAPI::toJsonValue(m_e90_exceeds3yr));
    }
    if (m_e90_exceeds4yr_isSet) {
        obj.insert(QString("E90Exceeds4yr"), ::OpenAPI::toJsonValue(m_e90_exceeds4yr));
    }
    if (m_e90_exceeds5yr_isSet) {
        obj.insert(QString("E90Exceeds5yr"), ::OpenAPI::toJsonValue(m_e90_exceeds5yr));
    }
    if (m_e90_pollutants1yr_isSet) {
        obj.insert(QString("E90Pollutants1yr"), ::OpenAPI::toJsonValue(m_e90_pollutants1yr));
    }
    if (m_e90_pollutants2yr_isSet) {
        obj.insert(QString("E90Pollutants2yr"), ::OpenAPI::toJsonValue(m_e90_pollutants2yr));
    }
    if (m_e90_pollutants3yr_isSet) {
        obj.insert(QString("E90Pollutants3yr"), ::OpenAPI::toJsonValue(m_e90_pollutants3yr));
    }
    if (m_e90_pollutants4yr_isSet) {
        obj.insert(QString("E90Pollutants4yr"), ::OpenAPI::toJsonValue(m_e90_pollutants4yr));
    }
    if (m_e90_pollutants5yr_isSet) {
        obj.insert(QString("E90Pollutants5yr"), ::OpenAPI::toJsonValue(m_e90_pollutants5yr));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_ea5yr_flag_isSet) {
        obj.insert(QString("Ea5yrFlag"), ::OpenAPI::toJsonValue(m_ea5yr_flag));
    }
    if (m_eff_charts_flag_isSet) {
        obj.insert(QString("EffChartsFlag"), ::OpenAPI::toJsonValue(m_eff_charts_flag));
    }
    if (m_eff_exceeds_isSet) {
        obj.insert(QString("EffExceeds"), ::OpenAPI::toJsonValue(m_eff_exceeds));
    }
    if (m_ejscreen_flag_isSet) {
        obj.insert(QString("EjscreenFlag"), ::OpenAPI::toJsonValue(m_ejscreen_flag));
    }
    if (m_ejscreen_flag_us_isSet) {
        obj.insert(QString("EjscreenFlagUs"), ::OpenAPI::toJsonValue(m_ejscreen_flag_us));
    }
    if (m_electr_rpt_waiver_eff_date_isSet) {
        obj.insert(QString("ElectrRptWaiverEffDate"), ::OpenAPI::toJsonValue(m_electr_rpt_waiver_eff_date));
    }
    if (m_electr_rpt_waiver_exp_date_isSet) {
        obj.insert(QString("ElectrRptWaiverExpDate"), ::OpenAPI::toJsonValue(m_electr_rpt_waiver_exp_date));
    }
    if (m_electr_rpt_waiver_type_code_isSet) {
        obj.insert(QString("ElectrRptWaiverTypeCode"), ::OpenAPI::toJsonValue(m_electr_rpt_waiver_type_code));
    }
    if (m_electr_rpt_waiver_type_desc_isSet) {
        obj.insert(QString("ElectrRptWaiverTypeDesc"), ::OpenAPI::toJsonValue(m_electr_rpt_waiver_type_desc));
    }
    if (m_electr_submission_type_code_isSet) {
        obj.insert(QString("ElectrSubmissionTypeCode"), ::OpenAPI::toJsonValue(m_electr_submission_type_code));
    }
    if (m_electr_submission_type_desc_isSet) {
        obj.insert(QString("ElectrSubmissionTypeDesc"), ::OpenAPI::toJsonValue(m_electr_submission_type_desc));
    }
    if (m_exposed_activity_isSet) {
        obj.insert(QString("ExposedActivity"), ::OpenAPI::toJsonValue(m_exposed_activity));
    }
    if (m_fac_county_name_isSet) {
        obj.insert(QString("FacCountyName"), ::OpenAPI::toJsonValue(m_fac_county_name));
    }
    if (m_fac_derived_huc_isSet) {
        obj.insert(QString("FacDerivedHuc"), ::OpenAPI::toJsonValue(m_fac_derived_huc));
    }
    if (m_fac_derived_tr_ibes_isSet) {
        obj.insert(QString("FacDerivedTRIbes"), ::OpenAPI::toJsonValue(m_fac_derived_tr_ibes));
    }
    if (m_fac_derived_wbd_isSet) {
        obj.insert(QString("FacDerivedWBD"), ::OpenAPI::toJsonValue(m_fac_derived_wbd));
    }
    if (m_fac_derived_wbdhu8_isSet) {
        obj.insert(QString("FacDerivedWBDHu8"), ::OpenAPI::toJsonValue(m_fac_derived_wbdhu8));
    }
    if (m_fac_derived_wbdhu8_name_isSet) {
        obj.insert(QString("FacDerivedWBDHu8Name"), ::OpenAPI::toJsonValue(m_fac_derived_wbdhu8_name));
    }
    if (m_fac_derived_wbd_name_isSet) {
        obj.insert(QString("FacDerivedWBDName"), ::OpenAPI::toJsonValue(m_fac_derived_wbd_name));
    }
    if (m_fac_fips_code_isSet) {
        obj.insert(QString("FacFIPSCode"), ::OpenAPI::toJsonValue(m_fac_fips_code));
    }
    if (m_fac_federal_agency_code_isSet) {
        obj.insert(QString("FacFederalAgencyCode"), ::OpenAPI::toJsonValue(m_fac_federal_agency_code));
    }
    if (m_fac_federal_agency_name_isSet) {
        obj.insert(QString("FacFederalAgencyName"), ::OpenAPI::toJsonValue(m_fac_federal_agency_name));
    }
    if (m_fac_indian_cntry_flg_isSet) {
        obj.insert(QString("FacIndianCntryFlg"), ::OpenAPI::toJsonValue(m_fac_indian_cntry_flg));
    }
    if (m_fac_indian_spatial_flg_isSet) {
        obj.insert(QString("FacIndianSpatialFlg"), ::OpenAPI::toJsonValue(m_fac_indian_spatial_flg));
    }
    if (m_fac_lat_isSet) {
        obj.insert(QString("FacLat"), ::OpenAPI::toJsonValue(m_fac_lat));
    }
    if (m_fac_long_isSet) {
        obj.insert(QString("FacLong"), ::OpenAPI::toJsonValue(m_fac_long));
    }
    if (m_fac_map_flg_isSet) {
        obj.insert(QString("FacMapFlg"), ::OpenAPI::toJsonValue(m_fac_map_flg));
    }
    if (m_fac_map_icon_isSet) {
        obj.insert(QString("FacMapIcon"), ::OpenAPI::toJsonValue(m_fac_map_icon));
    }
    if (m_fac_percent_minority_isSet) {
        obj.insert(QString("FacPercentMinority"), ::OpenAPI::toJsonValue(m_fac_percent_minority));
    }
    if (m_fac_pop_den_isSet) {
        obj.insert(QString("FacPopDen"), ::OpenAPI::toJsonValue(m_fac_pop_den));
    }
    if (m_fac_std_county_name_isSet) {
        obj.insert(QString("FacStdCountyName"), ::OpenAPI::toJsonValue(m_fac_std_county_name));
    }
    if (m_fac_tri_potw_trans_isSet) {
        obj.insert(QString("FacTRIPotwTrans"), ::OpenAPI::toJsonValue(m_fac_tri_potw_trans));
    }
    if (m_fac_tri_reporter_isSet) {
        obj.insert(QString("FacTRIReporter"), ::OpenAPI::toJsonValue(m_fac_tri_reporter));
    }
    if (m_fac_trisw_rel_isSet) {
        obj.insert(QString("FacTRISwRel"), ::OpenAPI::toJsonValue(m_fac_trisw_rel));
    }
    if (m_fac_us_mex_border_flg_isSet) {
        obj.insert(QString("FacUsMexBorderFlg"), ::OpenAPI::toJsonValue(m_fac_us_mex_border_flg));
    }
    if (m_historic_criterion_code_isSet) {
        obj.insert(QString("HistoricCriterionCode"), ::OpenAPI::toJsonValue(m_historic_criterion_code));
    }
    if (m_indsw_flag_isSet) {
        obj.insert(QString("IndswFlag"), ::OpenAPI::toJsonValue(m_indsw_flag));
    }
    if (m_infea5yr_flag_isSet) {
        obj.insert(QString("Infea5yrFlag"), ::OpenAPI::toJsonValue(m_infea5yr_flag));
    }
    if (m_insp5yr_flag_isSet) {
        obj.insert(QString("Insp5yrFlag"), ::OpenAPI::toJsonValue(m_insp5yr_flag));
    }
    if (m_insp_def5yr_cnt_isSet) {
        obj.insert(QString("InspDef5yrCnt"), ::OpenAPI::toJsonValue(m_insp_def5yr_cnt));
    }
    if (m_issuing_agency_isSet) {
        obj.insert(QString("IssuingAgency"), ::OpenAPI::toJsonValue(m_issuing_agency));
    }
    if (m_last_dmr_value_rcvd_date_isSet) {
        obj.insert(QString("LastDMRValueRcvdDate"), ::OpenAPI::toJsonValue(m_last_dmr_value_rcvd_date));
    }
    if (m_lim_pollutant_isSet) {
        obj.insert(QString("LimPollutant"), ::OpenAPI::toJsonValue(m_lim_pollutant));
    }
    if (m_lower48_isSet) {
        obj.insert(QString("Lower48"), ::OpenAPI::toJsonValue(m_lower48));
    }
    if (m_map_isSet) {
        obj.insert(QString("Map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_master_external_permit_nmbr_isSet) {
        obj.insert(QString("MasterExternalPermitNmbr"), ::OpenAPI::toJsonValue(m_master_external_permit_nmbr));
    }
    if (m_max_pctile_us_isSet) {
        obj.insert(QString("MaxPctileUs"), ::OpenAPI::toJsonValue(m_max_pctile_us));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_miss_dmr_qtrs_isSet) {
        obj.insert(QString("MissDMRQtrs"), ::OpenAPI::toJsonValue(m_miss_dmr_qtrs));
    }
    if (m_msgp_corrective_action_smmry_isSet) {
        obj.insert(QString("MsgpCorrectiveActionSmmry"), ::OpenAPI::toJsonValue(m_msgp_corrective_action_smmry));
    }
    if (m_msgp_facility_inspctn_smmry_isSet) {
        obj.insert(QString("MsgpFacilityInspctnSmmry"), ::OpenAPI::toJsonValue(m_msgp_facility_inspctn_smmry));
    }
    if (m_msgp_last_report_year_isSet) {
        obj.insert(QString("MsgpLastReportYear"), ::OpenAPI::toJsonValue(m_msgp_last_report_year));
    }
    if (m_msgp_no_further_rdctn_rtnle_isSet) {
        obj.insert(QString("MsgpNoFurtherRdctnRtnle"), ::OpenAPI::toJsonValue(m_msgp_no_further_rdctn_rtnle));
    }
    if (m_msgp_permit_type_isSet) {
        obj.insert(QString("MsgpPermitType"), ::OpenAPI::toJsonValue(m_msgp_permit_type));
    }
    if (m_msgp_visual_assessment_smmry_isSet) {
        obj.insert(QString("MsgpVisualAssessmentSmmry"), ::OpenAPI::toJsonValue(m_msgp_visual_assessment_smmry));
    }
    if (m_npdes_data_groups_isSet) {
        obj.insert(QString("NPDESDataGroups"), ::OpenAPI::toJsonValue(m_npdes_data_groups));
    }
    if (m_npdes_data_groups_descs_isSet) {
        obj.insert(QString("NPDESDataGroupsDescs"), ::OpenAPI::toJsonValue(m_npdes_data_groups_descs));
    }
    if (m_npdesids_isSet) {
        obj.insert(QString("NPDESIDs"), ::OpenAPI::toJsonValue(m_npdesids));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("ObjectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_other_permit_ids_isSet) {
        obj.insert(QString("OtherPermitIDs"), ::OpenAPI::toJsonValue(m_other_permit_ids));
    }
    if (m_over80_count_us_isSet) {
        obj.insert(QString("Over80CountUs"), ::OpenAPI::toJsonValue(m_over80_count_us));
    }
    if (m_past_cal_yr_average_flow_isSet) {
        obj.insert(QString("PastCalYrAverageFlow"), ::OpenAPI::toJsonValue(m_past_cal_yr_average_flow));
    }
    if (m_past_cal_yr_conv_pol_ovr_lmt_isSet) {
        obj.insert(QString("PastCalYrConvPolOvrLmt"), ::OpenAPI::toJsonValue(m_past_cal_yr_conv_pol_ovr_lmt));
    }
    if (m_past_cal_yr_conv_pollutants_isSet) {
        obj.insert(QString("PastCalYrConvPollutants"), ::OpenAPI::toJsonValue(m_past_cal_yr_conv_pollutants));
    }
    if (m_past_cal_yr_toxic_pol_ovr_lmt_isSet) {
        obj.insert(QString("PastCalYrToxicPolOvrLmt"), ::OpenAPI::toJsonValue(m_past_cal_yr_toxic_pol_ovr_lmt));
    }
    if (m_past_cal_yr_toxic_pollutants_isSet) {
        obj.insert(QString("PastCalYrToxicPollutants"), ::OpenAPI::toJsonValue(m_past_cal_yr_toxic_pollutants));
    }
    if (m_pctile_cancer_us_isSet) {
        obj.insert(QString("PctileCancerUs"), ::OpenAPI::toJsonValue(m_pctile_cancer_us));
    }
    if (m_pctile_dpm_us_isSet) {
        obj.insert(QString("PctileDpmUs"), ::OpenAPI::toJsonValue(m_pctile_dpm_us));
    }
    if (m_pctile_o3_us_isSet) {
        obj.insert(QString("PctileO3Us"), ::OpenAPI::toJsonValue(m_pctile_o3_us));
    }
    if (m_pctile_pctpre1960_us_isSet) {
        obj.insert(QString("PctilePctpre1960Us"), ::OpenAPI::toJsonValue(m_pctile_pctpre1960_us));
    }
    if (m_pctile_pm_us_isSet) {
        obj.insert(QString("PctilePmUs"), ::OpenAPI::toJsonValue(m_pctile_pm_us));
    }
    if (m_pctile_proximity_npdesus_isSet) {
        obj.insert(QString("PctileProximityNPDESUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npdesus));
    }
    if (m_pctile_proximity_npl_us_isSet) {
        obj.insert(QString("PctileProximityNplUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npl_us));
    }
    if (m_pctile_proximity_rmp_us_isSet) {
        obj.insert(QString("PctileProximityRmpUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_rmp_us));
    }
    if (m_pctile_proximity_tsdf_us_isSet) {
        obj.insert(QString("PctileProximityTsdfUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_tsdf_us));
    }
    if (m_pctile_resp_us_isSet) {
        obj.insert(QString("PctileRespUs"), ::OpenAPI::toJsonValue(m_pctile_resp_us));
    }
    if (m_pctile_traffic_score_us_isSet) {
        obj.insert(QString("PctileTrafficScoreUs"), ::OpenAPI::toJsonValue(m_pctile_traffic_score_us));
    }
    if (m_permit_components_isSet) {
        obj.insert(QString("PermitComponents"), ::OpenAPI::toJsonValue(m_permit_components));
    }
    if (m_permit_name_isSet) {
        obj.insert(QString("PermitName"), ::OpenAPI::toJsonValue(m_permit_name));
    }
    if (m_permitting_agency_isSet) {
        obj.insert(QString("PermittingAgency"), ::OpenAPI::toJsonValue(m_permitting_agency));
    }
    if (m_poll_with_violation_isSet) {
        obj.insert(QString("PollWithViolation"), ::OpenAPI::toJsonValue(m_poll_with_violation));
    }
    if (m_rcraids_isSet) {
        obj.insert(QString("RCRAIDs"), ::OpenAPI::toJsonValue(m_rcraids));
    }
    if (m_rad_gnis_name_isSet) {
        obj.insert(QString("RadGnisName"), ::OpenAPI::toJsonValue(m_rad_gnis_name));
    }
    if (m_rad_hu12_name_isSet) {
        obj.insert(QString("RadHu12Name"), ::OpenAPI::toJsonValue(m_rad_hu12_name));
    }
    if (m_rad_reachcode_isSet) {
        obj.insert(QString("RadReachcode"), ::OpenAPI::toJsonValue(m_rad_reachcode));
    }
    if (m_rad_wbdhu8_isSet) {
        obj.insert(QString("RadWBDHu8"), ::OpenAPI::toJsonValue(m_rad_wbdhu8));
    }
    if (m_rad_wbdhu8_name_isSet) {
        obj.insert(QString("RadWBDHu8Name"), ::OpenAPI::toJsonValue(m_rad_wbdhu8_name));
    }
    if (m_rad_wbd_huc12_isSet) {
        obj.insert(QString("RadWBDHuc12"), ::OpenAPI::toJsonValue(m_rad_wbd_huc12));
    }
    if (m_receiving_ms4_name_isSet) {
        obj.insert(QString("ReceivingMs4Name"), ::OpenAPI::toJsonValue(m_receiving_ms4_name));
    }
    if (m_reference_point_isSet) {
        obj.insert(QString("ReferencePoint"), ::OpenAPI::toJsonValue(m_reference_point));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_rmp_ids_isSet) {
        obj.insert(QString("RmpIDs"), ::OpenAPI::toJsonValue(m_rmp_ids));
    }
    if (m_sdwaids_isSet) {
        obj.insert(QString("SDWAIDs"), ::OpenAPI::toJsonValue(m_sdwaids));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sector_isSet) {
        obj.insert(QString("Sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_species_critical_habital_flag_isSet) {
        obj.insert(QString("SpeciesCriticalHabitalFlag"), ::OpenAPI::toJsonValue(m_species_critical_habital_flag));
    }
    if (m_state_auth_biosolids_isSet) {
        obj.insert(QString("StateAuthBiosolids"), ::OpenAPI::toJsonValue(m_state_auth_biosolids));
    }
    if (m_state_auth_fedfac_isSet) {
        obj.insert(QString("StateAuthFedfac"), ::OpenAPI::toJsonValue(m_state_auth_fedfac));
    }
    if (m_state_auth_gen_isSet) {
        obj.insert(QString("StateAuthGen"), ::OpenAPI::toJsonValue(m_state_auth_gen));
    }
    if (m_state_auth_npdes_isSet) {
        obj.insert(QString("StateAuthNPDES"), ::OpenAPI::toJsonValue(m_state_auth_npdes));
    }
    if (m_state_auth_pretreat_isSet) {
        obj.insert(QString("StateAuthPretreat"), ::OpenAPI::toJsonValue(m_state_auth_pretreat));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_storm_water_area_isSet) {
        obj.insert(QString("StormWaterArea"), ::OpenAPI::toJsonValue(m_storm_water_area));
    }
    if (m_submitted_date_isSet) {
        obj.insert(QString("SubmittedDate"), ::OpenAPI::toJsonValue(m_submitted_date));
    }
    if (m_subsector_isSet) {
        obj.insert(QString("Subsector"), ::OpenAPI::toJsonValue(m_subsector));
    }
    if (m_swppp_url_isSet) {
        obj.insert(QString("SwpppUrl"), ::OpenAPI::toJsonValue(m_swppp_url));
    }
    if (m_triids_isSet) {
        obj.insert(QString("TRIIDs"), ::OpenAPI::toJsonValue(m_triids));
    }
    if (m_tr_ibal_flag_isSet) {
        obj.insert(QString("TRIbalFlag"), ::OpenAPI::toJsonValue(m_tr_ibal_flag));
    }
    if (m_type_of_monitoring_isSet) {
        obj.insert(QString("TypeOfMonitoring"), ::OpenAPI::toJsonValue(m_type_of_monitoring));
    }
    if (m_type_of_water_isSet) {
        obj.insert(QString("TypeOfWater"), ::OpenAPI::toJsonValue(m_type_of_water));
    }
    if (m_vio_last_year_isSet) {
        obj.insert(QString("VioLastYear"), ::OpenAPI::toJsonValue(m_vio_last_year));
    }
    if (m_viol_flag_isSet) {
        obj.insert(QString("ViolFlag"), ::OpenAPI::toJsonValue(m_viol_flag));
    }
    if (m_web_docs_isSet) {
        obj.insert(QString("WebDocs"), ::OpenAPI::toJsonValue(m_web_docs));
    }
    return obj;
}

QString OAICwa07::getAirids() const {
    return m_airids;
}
void OAICwa07::setAirids(const QString &airids) {
    m_airids = airids;
    m_airids_isSet = true;
}

bool OAICwa07::is_airids_Set() const{
    return m_airids_isSet;
}

bool OAICwa07::is_airids_Valid() const{
    return m_airids_isValid;
}

QString OAICwa07::getActiveLower48() const {
    return m_active_lower48;
}
void OAICwa07::setActiveLower48(const QString &active_lower48) {
    m_active_lower48 = active_lower48;
    m_active_lower48_isSet = true;
}

bool OAICwa07::is_active_lower48_Set() const{
    return m_active_lower48_isSet;
}

bool OAICwa07::is_active_lower48_Valid() const{
    return m_active_lower48_isValid;
}

QString OAICwa07::getAlrExceedences() const {
    return m_alr_exceedences;
}
void OAICwa07::setAlrExceedences(const QString &alr_exceedences) {
    m_alr_exceedences = alr_exceedences;
    m_alr_exceedences_isSet = true;
}

bool OAICwa07::is_alr_exceedences_Set() const{
    return m_alr_exceedences_isSet;
}

bool OAICwa07::is_alr_exceedences_Valid() const{
    return m_alr_exceedences_isValid;
}

QString OAICwa07::getAssociatedPollutant() const {
    return m_associated_pollutant;
}
void OAICwa07::setAssociatedPollutant(const QString &associated_pollutant) {
    m_associated_pollutant = associated_pollutant;
    m_associated_pollutant_isSet = true;
}

bool OAICwa07::is_associated_pollutant_Set() const{
    return m_associated_pollutant_isSet;
}

bool OAICwa07::is_associated_pollutant_Valid() const{
    return m_associated_pollutant_isValid;
}

QString OAICwa07::getAttainsAquaticLifeUseFlg() const {
    return m_attains_aquatic_life_use_flg;
}
void OAICwa07::setAttainsAquaticLifeUseFlg(const QString &attains_aquatic_life_use_flg) {
    m_attains_aquatic_life_use_flg = attains_aquatic_life_use_flg;
    m_attains_aquatic_life_use_flg_isSet = true;
}

bool OAICwa07::is_attains_aquatic_life_use_flg_Set() const{
    return m_attains_aquatic_life_use_flg_isSet;
}

bool OAICwa07::is_attains_aquatic_life_use_flg_Valid() const{
    return m_attains_aquatic_life_use_flg_isValid;
}

QString OAICwa07::getAttainsAuCategory() const {
    return m_attains_au_category;
}
void OAICwa07::setAttainsAuCategory(const QString &attains_au_category) {
    m_attains_au_category = attains_au_category;
    m_attains_au_category_isSet = true;
}

bool OAICwa07::is_attains_au_category_Set() const{
    return m_attains_au_category_isSet;
}

bool OAICwa07::is_attains_au_category_Valid() const{
    return m_attains_au_category_isValid;
}

QString OAICwa07::getAttainsCauseGroups() const {
    return m_attains_cause_groups;
}
void OAICwa07::setAttainsCauseGroups(const QString &attains_cause_groups) {
    m_attains_cause_groups = attains_cause_groups;
    m_attains_cause_groups_isSet = true;
}

bool OAICwa07::is_attains_cause_groups_Set() const{
    return m_attains_cause_groups_isSet;
}

bool OAICwa07::is_attains_cause_groups_Valid() const{
    return m_attains_cause_groups_isValid;
}

QString OAICwa07::getAttainsCycleYear() const {
    return m_attains_cycle_year;
}
void OAICwa07::setAttainsCycleYear(const QString &attains_cycle_year) {
    m_attains_cycle_year = attains_cycle_year;
    m_attains_cycle_year_isSet = true;
}

bool OAICwa07::is_attains_cycle_year_Set() const{
    return m_attains_cycle_year_isSet;
}

bool OAICwa07::is_attains_cycle_year_Valid() const{
    return m_attains_cycle_year_isValid;
}

QString OAICwa07::getAttainsExceptnlUseFlg() const {
    return m_attains_exceptnl_use_flg;
}
void OAICwa07::setAttainsExceptnlUseFlg(const QString &attains_exceptnl_use_flg) {
    m_attains_exceptnl_use_flg = attains_exceptnl_use_flg;
    m_attains_exceptnl_use_flg_isSet = true;
}

bool OAICwa07::is_attains_exceptnl_use_flg_Set() const{
    return m_attains_exceptnl_use_flg_isSet;
}

bool OAICwa07::is_attains_exceptnl_use_flg_Valid() const{
    return m_attains_exceptnl_use_flg_isValid;
}

QString OAICwa07::getAttainsImpWaterFlg() const {
    return m_attains_imp_water_flg;
}
void OAICwa07::setAttainsImpWaterFlg(const QString &attains_imp_water_flg) {
    m_attains_imp_water_flg = attains_imp_water_flg;
    m_attains_imp_water_flg_isSet = true;
}

bool OAICwa07::is_attains_imp_water_flg_Set() const{
    return m_attains_imp_water_flg_isSet;
}

bool OAICwa07::is_attains_imp_water_flg_Valid() const{
    return m_attains_imp_water_flg_isValid;
}

QString OAICwa07::getAttainsPossibleNpdesParams() const {
    return m_attains_possible_npdes_params;
}
void OAICwa07::setAttainsPossibleNpdesParams(const QString &attains_possible_npdes_params) {
    m_attains_possible_npdes_params = attains_possible_npdes_params;
    m_attains_possible_npdes_params_isSet = true;
}

bool OAICwa07::is_attains_possible_npdes_params_Set() const{
    return m_attains_possible_npdes_params_isSet;
}

bool OAICwa07::is_attains_possible_npdes_params_Valid() const{
    return m_attains_possible_npdes_params_isValid;
}

QString OAICwa07::getAttainsRecreationUseFlg() const {
    return m_attains_recreation_use_flg;
}
void OAICwa07::setAttainsRecreationUseFlg(const QString &attains_recreation_use_flg) {
    m_attains_recreation_use_flg = attains_recreation_use_flg;
    m_attains_recreation_use_flg_isSet = true;
}

bool OAICwa07::is_attains_recreation_use_flg_Set() const{
    return m_attains_recreation_use_flg_isSet;
}

bool OAICwa07::is_attains_recreation_use_flg_Valid() const{
    return m_attains_recreation_use_flg_isValid;
}

QString OAICwa07::getAttainsShellfishUseFlg() const {
    return m_attains_shellfish_use_flg;
}
void OAICwa07::setAttainsShellfishUseFlg(const QString &attains_shellfish_use_flg) {
    m_attains_shellfish_use_flg = attains_shellfish_use_flg;
    m_attains_shellfish_use_flg_isSet = true;
}

bool OAICwa07::is_attains_shellfish_use_flg_Set() const{
    return m_attains_shellfish_use_flg_isSet;
}

bool OAICwa07::is_attains_shellfish_use_flg_Valid() const{
    return m_attains_shellfish_use_flg_isValid;
}

QString OAICwa07::getAttainsSource() const {
    return m_attains_source;
}
void OAICwa07::setAttainsSource(const QString &attains_source) {
    m_attains_source = attains_source;
    m_attains_source_isSet = true;
}

bool OAICwa07::is_attains_source_Set() const{
    return m_attains_source_isSet;
}

bool OAICwa07::is_attains_source_Valid() const{
    return m_attains_source_isValid;
}

QString OAICwa07::getAttainsStateCauses() const {
    return m_attains_state_causes;
}
void OAICwa07::setAttainsStateCauses(const QString &attains_state_causes) {
    m_attains_state_causes = attains_state_causes;
    m_attains_state_causes_isSet = true;
}

bool OAICwa07::is_attains_state_causes_Set() const{
    return m_attains_state_causes_isSet;
}

bool OAICwa07::is_attains_state_causes_Valid() const{
    return m_attains_state_causes_isValid;
}

QString OAICwa07::getBeachCloseLast2yrsFlg() const {
    return m_beach_close_last2yrs_flg;
}
void OAICwa07::setBeachCloseLast2yrsFlg(const QString &beach_close_last2yrs_flg) {
    m_beach_close_last2yrs_flg = beach_close_last2yrs_flg;
    m_beach_close_last2yrs_flg_isSet = true;
}

bool OAICwa07::is_beach_close_last2yrs_flg_Set() const{
    return m_beach_close_last2yrs_flg_isSet;
}

bool OAICwa07::is_beach_close_last2yrs_flg_Valid() const{
    return m_beach_close_last2yrs_flg_isValid;
}

QString OAICwa07::getBeachCloseLastYearFlg() const {
    return m_beach_close_last_year_flg;
}
void OAICwa07::setBeachCloseLastYearFlg(const QString &beach_close_last_year_flg) {
    m_beach_close_last_year_flg = beach_close_last_year_flg;
    m_beach_close_last_year_flg_isSet = true;
}

bool OAICwa07::is_beach_close_last_year_flg_Set() const{
    return m_beach_close_last_year_flg_isSet;
}

bool OAICwa07::is_beach_close_last_year_flg_Valid() const{
    return m_beach_close_last_year_flg_isValid;
}

QString OAICwa07::getBioAnalyMethodCatgrys() const {
    return m_bio_analy_method_catgrys;
}
void OAICwa07::setBioAnalyMethodCatgrys(const QString &bio_analy_method_catgrys) {
    m_bio_analy_method_catgrys = bio_analy_method_catgrys;
    m_bio_analy_method_catgrys_isSet = true;
}

bool OAICwa07::is_bio_analy_method_catgrys_Set() const{
    return m_bio_analy_method_catgrys_isSet;
}

bool OAICwa07::is_bio_analy_method_catgrys_Valid() const{
    return m_bio_analy_method_catgrys_isValid;
}

QString OAICwa07::getBioAnalyMethodCatgrys2016() const {
    return m_bio_analy_method_catgrys2016;
}
void OAICwa07::setBioAnalyMethodCatgrys2016(const QString &bio_analy_method_catgrys2016) {
    m_bio_analy_method_catgrys2016 = bio_analy_method_catgrys2016;
    m_bio_analy_method_catgrys2016_isSet = true;
}

bool OAICwa07::is_bio_analy_method_catgrys2016_Set() const{
    return m_bio_analy_method_catgrys2016_isSet;
}

bool OAICwa07::is_bio_analy_method_catgrys2016_Valid() const{
    return m_bio_analy_method_catgrys2016_isValid;
}

QString OAICwa07::getBioAnalyMethodCatgrys2017() const {
    return m_bio_analy_method_catgrys2017;
}
void OAICwa07::setBioAnalyMethodCatgrys2017(const QString &bio_analy_method_catgrys2017) {
    m_bio_analy_method_catgrys2017 = bio_analy_method_catgrys2017;
    m_bio_analy_method_catgrys2017_isSet = true;
}

bool OAICwa07::is_bio_analy_method_catgrys2017_Set() const{
    return m_bio_analy_method_catgrys2017_isSet;
}

bool OAICwa07::is_bio_analy_method_catgrys2017_Valid() const{
    return m_bio_analy_method_catgrys2017_isValid;
}

QString OAICwa07::getBioAnalyMethods() const {
    return m_bio_analy_methods;
}
void OAICwa07::setBioAnalyMethods(const QString &bio_analy_methods) {
    m_bio_analy_methods = bio_analy_methods;
    m_bio_analy_methods_isSet = true;
}

bool OAICwa07::is_bio_analy_methods_Set() const{
    return m_bio_analy_methods_isSet;
}

bool OAICwa07::is_bio_analy_methods_Valid() const{
    return m_bio_analy_methods_isValid;
}

QString OAICwa07::getBioAnalyMethods2016() const {
    return m_bio_analy_methods2016;
}
void OAICwa07::setBioAnalyMethods2016(const QString &bio_analy_methods2016) {
    m_bio_analy_methods2016 = bio_analy_methods2016;
    m_bio_analy_methods2016_isSet = true;
}

bool OAICwa07::is_bio_analy_methods2016_Set() const{
    return m_bio_analy_methods2016_isSet;
}

bool OAICwa07::is_bio_analy_methods2016_Valid() const{
    return m_bio_analy_methods2016_isValid;
}

QString OAICwa07::getBioAnalyMethods2017() const {
    return m_bio_analy_methods2017;
}
void OAICwa07::setBioAnalyMethods2017(const QString &bio_analy_methods2017) {
    m_bio_analy_methods2017 = bio_analy_methods2017;
    m_bio_analy_methods2017_isSet = true;
}

bool OAICwa07::is_bio_analy_methods2017_Set() const{
    return m_bio_analy_methods2017_isSet;
}

bool OAICwa07::is_bio_analy_methods2017_Valid() const{
    return m_bio_analy_methods2017_isValid;
}

QString OAICwa07::getBioCommentText() const {
    return m_bio_comment_text;
}
void OAICwa07::setBioCommentText(const QString &bio_comment_text) {
    m_bio_comment_text = bio_comment_text;
    m_bio_comment_text_isSet = true;
}

bool OAICwa07::is_bio_comment_text_Set() const{
    return m_bio_comment_text_isSet;
}

bool OAICwa07::is_bio_comment_text_Valid() const{
    return m_bio_comment_text_isValid;
}

QString OAICwa07::getBioCommentText2016() const {
    return m_bio_comment_text2016;
}
void OAICwa07::setBioCommentText2016(const QString &bio_comment_text2016) {
    m_bio_comment_text2016 = bio_comment_text2016;
    m_bio_comment_text2016_isSet = true;
}

bool OAICwa07::is_bio_comment_text2016_Set() const{
    return m_bio_comment_text2016_isSet;
}

bool OAICwa07::is_bio_comment_text2016_Valid() const{
    return m_bio_comment_text2016_isValid;
}

QString OAICwa07::getBioCommentText2017() const {
    return m_bio_comment_text2017;
}
void OAICwa07::setBioCommentText2017(const QString &bio_comment_text2017) {
    m_bio_comment_text2017 = bio_comment_text2017;
    m_bio_comment_text2017_isSet = true;
}

bool OAICwa07::is_bio_comment_text2017_Set() const{
    return m_bio_comment_text2017_isSet;
}

bool OAICwa07::is_bio_comment_text2017_Valid() const{
    return m_bio_comment_text2017_isValid;
}

QString OAICwa07::getBioIncinerationSum() const {
    return m_bio_incineration_sum;
}
void OAICwa07::setBioIncinerationSum(const QString &bio_incineration_sum) {
    m_bio_incineration_sum = bio_incineration_sum;
    m_bio_incineration_sum_isSet = true;
}

bool OAICwa07::is_bio_incineration_sum_Set() const{
    return m_bio_incineration_sum_isSet;
}

bool OAICwa07::is_bio_incineration_sum_Valid() const{
    return m_bio_incineration_sum_isValid;
}

QString OAICwa07::getBioIncinerationSum2016() const {
    return m_bio_incineration_sum2016;
}
void OAICwa07::setBioIncinerationSum2016(const QString &bio_incineration_sum2016) {
    m_bio_incineration_sum2016 = bio_incineration_sum2016;
    m_bio_incineration_sum2016_isSet = true;
}

bool OAICwa07::is_bio_incineration_sum2016_Set() const{
    return m_bio_incineration_sum2016_isSet;
}

bool OAICwa07::is_bio_incineration_sum2016_Valid() const{
    return m_bio_incineration_sum2016_isValid;
}

QString OAICwa07::getBioIncinerationSum2017() const {
    return m_bio_incineration_sum2017;
}
void OAICwa07::setBioIncinerationSum2017(const QString &bio_incineration_sum2017) {
    m_bio_incineration_sum2017 = bio_incineration_sum2017;
    m_bio_incineration_sum2017_isSet = true;
}

bool OAICwa07::is_bio_incineration_sum2017_Set() const{
    return m_bio_incineration_sum2017_isSet;
}

bool OAICwa07::is_bio_incineration_sum2017_Valid() const{
    return m_bio_incineration_sum2017_isValid;
}

QString OAICwa07::getBioLandApplicationSum() const {
    return m_bio_land_application_sum;
}
void OAICwa07::setBioLandApplicationSum(const QString &bio_land_application_sum) {
    m_bio_land_application_sum = bio_land_application_sum;
    m_bio_land_application_sum_isSet = true;
}

bool OAICwa07::is_bio_land_application_sum_Set() const{
    return m_bio_land_application_sum_isSet;
}

bool OAICwa07::is_bio_land_application_sum_Valid() const{
    return m_bio_land_application_sum_isValid;
}

QString OAICwa07::getBioLandApplicationSum2016() const {
    return m_bio_land_application_sum2016;
}
void OAICwa07::setBioLandApplicationSum2016(const QString &bio_land_application_sum2016) {
    m_bio_land_application_sum2016 = bio_land_application_sum2016;
    m_bio_land_application_sum2016_isSet = true;
}

bool OAICwa07::is_bio_land_application_sum2016_Set() const{
    return m_bio_land_application_sum2016_isSet;
}

bool OAICwa07::is_bio_land_application_sum2016_Valid() const{
    return m_bio_land_application_sum2016_isValid;
}

QString OAICwa07::getBioLandApplicationSum2017() const {
    return m_bio_land_application_sum2017;
}
void OAICwa07::setBioLandApplicationSum2017(const QString &bio_land_application_sum2017) {
    m_bio_land_application_sum2017 = bio_land_application_sum2017;
    m_bio_land_application_sum2017_isSet = true;
}

bool OAICwa07::is_bio_land_application_sum2017_Set() const{
    return m_bio_land_application_sum2017_isSet;
}

bool OAICwa07::is_bio_land_application_sum2017_Valid() const{
    return m_bio_land_application_sum2017_isValid;
}

QString OAICwa07::getBioMgmtContainers() const {
    return m_bio_mgmt_containers;
}
void OAICwa07::setBioMgmtContainers(const QString &bio_mgmt_containers) {
    m_bio_mgmt_containers = bio_mgmt_containers;
    m_bio_mgmt_containers_isSet = true;
}

bool OAICwa07::is_bio_mgmt_containers_Set() const{
    return m_bio_mgmt_containers_isSet;
}

bool OAICwa07::is_bio_mgmt_containers_Valid() const{
    return m_bio_mgmt_containers_isValid;
}

QString OAICwa07::getBioMgmtContainers2016() const {
    return m_bio_mgmt_containers2016;
}
void OAICwa07::setBioMgmtContainers2016(const QString &bio_mgmt_containers2016) {
    m_bio_mgmt_containers2016 = bio_mgmt_containers2016;
    m_bio_mgmt_containers2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_containers2016_Set() const{
    return m_bio_mgmt_containers2016_isSet;
}

bool OAICwa07::is_bio_mgmt_containers2016_Valid() const{
    return m_bio_mgmt_containers2016_isValid;
}

QString OAICwa07::getBioMgmtContainers2017() const {
    return m_bio_mgmt_containers2017;
}
void OAICwa07::setBioMgmtContainers2017(const QString &bio_mgmt_containers2017) {
    m_bio_mgmt_containers2017 = bio_mgmt_containers2017;
    m_bio_mgmt_containers2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_containers2017_Set() const{
    return m_bio_mgmt_containers2017_isSet;
}

bool OAICwa07::is_bio_mgmt_containers2017_Valid() const{
    return m_bio_mgmt_containers2017_isValid;
}

QString OAICwa07::getBioMgmtDefCategories() const {
    return m_bio_mgmt_def_categories;
}
void OAICwa07::setBioMgmtDefCategories(const QString &bio_mgmt_def_categories) {
    m_bio_mgmt_def_categories = bio_mgmt_def_categories;
    m_bio_mgmt_def_categories_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_categories_Set() const{
    return m_bio_mgmt_def_categories_isSet;
}

bool OAICwa07::is_bio_mgmt_def_categories_Valid() const{
    return m_bio_mgmt_def_categories_isValid;
}

QString OAICwa07::getBioMgmtDefCategories2016() const {
    return m_bio_mgmt_def_categories2016;
}
void OAICwa07::setBioMgmtDefCategories2016(const QString &bio_mgmt_def_categories2016) {
    m_bio_mgmt_def_categories2016 = bio_mgmt_def_categories2016;
    m_bio_mgmt_def_categories2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_categories2016_Set() const{
    return m_bio_mgmt_def_categories2016_isSet;
}

bool OAICwa07::is_bio_mgmt_def_categories2016_Valid() const{
    return m_bio_mgmt_def_categories2016_isValid;
}

QString OAICwa07::getBioMgmtDefCategories2017() const {
    return m_bio_mgmt_def_categories2017;
}
void OAICwa07::setBioMgmtDefCategories2017(const QString &bio_mgmt_def_categories2017) {
    m_bio_mgmt_def_categories2017 = bio_mgmt_def_categories2017;
    m_bio_mgmt_def_categories2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_categories2017_Set() const{
    return m_bio_mgmt_def_categories2017_isSet;
}

bool OAICwa07::is_bio_mgmt_def_categories2017_Valid() const{
    return m_bio_mgmt_def_categories2017_isValid;
}

QString OAICwa07::getBioMgmtDefCurrentCnt() const {
    return m_bio_mgmt_def_current_cnt;
}
void OAICwa07::setBioMgmtDefCurrentCnt(const QString &bio_mgmt_def_current_cnt) {
    m_bio_mgmt_def_current_cnt = bio_mgmt_def_current_cnt;
    m_bio_mgmt_def_current_cnt_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt_Set() const{
    return m_bio_mgmt_def_current_cnt_isSet;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt_Valid() const{
    return m_bio_mgmt_def_current_cnt_isValid;
}

QString OAICwa07::getBioMgmtDefCurrentCnt2016() const {
    return m_bio_mgmt_def_current_cnt2016;
}
void OAICwa07::setBioMgmtDefCurrentCnt2016(const QString &bio_mgmt_def_current_cnt2016) {
    m_bio_mgmt_def_current_cnt2016 = bio_mgmt_def_current_cnt2016;
    m_bio_mgmt_def_current_cnt2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt2016_Set() const{
    return m_bio_mgmt_def_current_cnt2016_isSet;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt2016_Valid() const{
    return m_bio_mgmt_def_current_cnt2016_isValid;
}

QString OAICwa07::getBioMgmtDefCurrentCnt2017() const {
    return m_bio_mgmt_def_current_cnt2017;
}
void OAICwa07::setBioMgmtDefCurrentCnt2017(const QString &bio_mgmt_def_current_cnt2017) {
    m_bio_mgmt_def_current_cnt2017 = bio_mgmt_def_current_cnt2017;
    m_bio_mgmt_def_current_cnt2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt2017_Set() const{
    return m_bio_mgmt_def_current_cnt2017_isSet;
}

bool OAICwa07::is_bio_mgmt_def_current_cnt2017_Valid() const{
    return m_bio_mgmt_def_current_cnt2017_isValid;
}

QString OAICwa07::getBioMgmtDeficiencies() const {
    return m_bio_mgmt_deficiencies;
}
void OAICwa07::setBioMgmtDeficiencies(const QString &bio_mgmt_deficiencies) {
    m_bio_mgmt_deficiencies = bio_mgmt_deficiencies;
    m_bio_mgmt_deficiencies_isSet = true;
}

bool OAICwa07::is_bio_mgmt_deficiencies_Set() const{
    return m_bio_mgmt_deficiencies_isSet;
}

bool OAICwa07::is_bio_mgmt_deficiencies_Valid() const{
    return m_bio_mgmt_deficiencies_isValid;
}

QString OAICwa07::getBioMgmtDeficiencies2016() const {
    return m_bio_mgmt_deficiencies2016;
}
void OAICwa07::setBioMgmtDeficiencies2016(const QString &bio_mgmt_deficiencies2016) {
    m_bio_mgmt_deficiencies2016 = bio_mgmt_deficiencies2016;
    m_bio_mgmt_deficiencies2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_deficiencies2016_Set() const{
    return m_bio_mgmt_deficiencies2016_isSet;
}

bool OAICwa07::is_bio_mgmt_deficiencies2016_Valid() const{
    return m_bio_mgmt_deficiencies2016_isValid;
}

QString OAICwa07::getBioMgmtDeficiencies2017() const {
    return m_bio_mgmt_deficiencies2017;
}
void OAICwa07::setBioMgmtDeficiencies2017(const QString &bio_mgmt_deficiencies2017) {
    m_bio_mgmt_deficiencies2017 = bio_mgmt_deficiencies2017;
    m_bio_mgmt_deficiencies2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_deficiencies2017_Set() const{
    return m_bio_mgmt_deficiencies2017_isSet;
}

bool OAICwa07::is_bio_mgmt_deficiencies2017_Valid() const{
    return m_bio_mgmt_deficiencies2017_isValid;
}

QString OAICwa07::getBioMgmtHandlers() const {
    return m_bio_mgmt_handlers;
}
void OAICwa07::setBioMgmtHandlers(const QString &bio_mgmt_handlers) {
    m_bio_mgmt_handlers = bio_mgmt_handlers;
    m_bio_mgmt_handlers_isSet = true;
}

bool OAICwa07::is_bio_mgmt_handlers_Set() const{
    return m_bio_mgmt_handlers_isSet;
}

bool OAICwa07::is_bio_mgmt_handlers_Valid() const{
    return m_bio_mgmt_handlers_isValid;
}

QString OAICwa07::getBioMgmtHandlers2016() const {
    return m_bio_mgmt_handlers2016;
}
void OAICwa07::setBioMgmtHandlers2016(const QString &bio_mgmt_handlers2016) {
    m_bio_mgmt_handlers2016 = bio_mgmt_handlers2016;
    m_bio_mgmt_handlers2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_handlers2016_Set() const{
    return m_bio_mgmt_handlers2016_isSet;
}

bool OAICwa07::is_bio_mgmt_handlers2016_Valid() const{
    return m_bio_mgmt_handlers2016_isValid;
}

QString OAICwa07::getBioMgmtHandlers2017() const {
    return m_bio_mgmt_handlers2017;
}
void OAICwa07::setBioMgmtHandlers2017(const QString &bio_mgmt_handlers2017) {
    m_bio_mgmt_handlers2017 = bio_mgmt_handlers2017;
    m_bio_mgmt_handlers2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_handlers2017_Set() const{
    return m_bio_mgmt_handlers2017_isSet;
}

bool OAICwa07::is_bio_mgmt_handlers2017_Valid() const{
    return m_bio_mgmt_handlers2017_isValid;
}

QString OAICwa07::getBioMgmtPathogens() const {
    return m_bio_mgmt_pathogens;
}
void OAICwa07::setBioMgmtPathogens(const QString &bio_mgmt_pathogens) {
    m_bio_mgmt_pathogens = bio_mgmt_pathogens;
    m_bio_mgmt_pathogens_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathogens_Set() const{
    return m_bio_mgmt_pathogens_isSet;
}

bool OAICwa07::is_bio_mgmt_pathogens_Valid() const{
    return m_bio_mgmt_pathogens_isValid;
}

QString OAICwa07::getBioMgmtPathogens2016() const {
    return m_bio_mgmt_pathogens2016;
}
void OAICwa07::setBioMgmtPathogens2016(const QString &bio_mgmt_pathogens2016) {
    m_bio_mgmt_pathogens2016 = bio_mgmt_pathogens2016;
    m_bio_mgmt_pathogens2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathogens2016_Set() const{
    return m_bio_mgmt_pathogens2016_isSet;
}

bool OAICwa07::is_bio_mgmt_pathogens2016_Valid() const{
    return m_bio_mgmt_pathogens2016_isValid;
}

QString OAICwa07::getBioMgmtPathogens2017() const {
    return m_bio_mgmt_pathogens2017;
}
void OAICwa07::setBioMgmtPathogens2017(const QString &bio_mgmt_pathogens2017) {
    m_bio_mgmt_pathogens2017 = bio_mgmt_pathogens2017;
    m_bio_mgmt_pathogens2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathogens2017_Set() const{
    return m_bio_mgmt_pathogens2017_isSet;
}

bool OAICwa07::is_bio_mgmt_pathogens2017_Valid() const{
    return m_bio_mgmt_pathogens2017_isValid;
}

QString OAICwa07::getBioMgmtPathreds() const {
    return m_bio_mgmt_pathreds;
}
void OAICwa07::setBioMgmtPathreds(const QString &bio_mgmt_pathreds) {
    m_bio_mgmt_pathreds = bio_mgmt_pathreds;
    m_bio_mgmt_pathreds_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathreds_Set() const{
    return m_bio_mgmt_pathreds_isSet;
}

bool OAICwa07::is_bio_mgmt_pathreds_Valid() const{
    return m_bio_mgmt_pathreds_isValid;
}

QString OAICwa07::getBioMgmtPathreds2016() const {
    return m_bio_mgmt_pathreds2016;
}
void OAICwa07::setBioMgmtPathreds2016(const QString &bio_mgmt_pathreds2016) {
    m_bio_mgmt_pathreds2016 = bio_mgmt_pathreds2016;
    m_bio_mgmt_pathreds2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathreds2016_Set() const{
    return m_bio_mgmt_pathreds2016_isSet;
}

bool OAICwa07::is_bio_mgmt_pathreds2016_Valid() const{
    return m_bio_mgmt_pathreds2016_isValid;
}

QString OAICwa07::getBioMgmtPathreds2017() const {
    return m_bio_mgmt_pathreds2017;
}
void OAICwa07::setBioMgmtPathreds2017(const QString &bio_mgmt_pathreds2017) {
    m_bio_mgmt_pathreds2017 = bio_mgmt_pathreds2017;
    m_bio_mgmt_pathreds2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_pathreds2017_Set() const{
    return m_bio_mgmt_pathreds2017_isSet;
}

bool OAICwa07::is_bio_mgmt_pathreds2017_Valid() const{
    return m_bio_mgmt_pathreds2017_isValid;
}

QString OAICwa07::getBioMgmtPrctceStypes() const {
    return m_bio_mgmt_prctce_stypes;
}
void OAICwa07::setBioMgmtPrctceStypes(const QString &bio_mgmt_prctce_stypes) {
    m_bio_mgmt_prctce_stypes = bio_mgmt_prctce_stypes;
    m_bio_mgmt_prctce_stypes_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes_Set() const{
    return m_bio_mgmt_prctce_stypes_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes_Valid() const{
    return m_bio_mgmt_prctce_stypes_isValid;
}

QString OAICwa07::getBioMgmtPrctceStypes2016() const {
    return m_bio_mgmt_prctce_stypes2016;
}
void OAICwa07::setBioMgmtPrctceStypes2016(const QString &bio_mgmt_prctce_stypes2016) {
    m_bio_mgmt_prctce_stypes2016 = bio_mgmt_prctce_stypes2016;
    m_bio_mgmt_prctce_stypes2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes2016_Set() const{
    return m_bio_mgmt_prctce_stypes2016_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes2016_Valid() const{
    return m_bio_mgmt_prctce_stypes2016_isValid;
}

QString OAICwa07::getBioMgmtPrctceStypes2017() const {
    return m_bio_mgmt_prctce_stypes2017;
}
void OAICwa07::setBioMgmtPrctceStypes2017(const QString &bio_mgmt_prctce_stypes2017) {
    m_bio_mgmt_prctce_stypes2017 = bio_mgmt_prctce_stypes2017;
    m_bio_mgmt_prctce_stypes2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes2017_Set() const{
    return m_bio_mgmt_prctce_stypes2017_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_stypes2017_Valid() const{
    return m_bio_mgmt_prctce_stypes2017_isValid;
}

QString OAICwa07::getBioMgmtPrctceTypes() const {
    return m_bio_mgmt_prctce_types;
}
void OAICwa07::setBioMgmtPrctceTypes(const QString &bio_mgmt_prctce_types) {
    m_bio_mgmt_prctce_types = bio_mgmt_prctce_types;
    m_bio_mgmt_prctce_types_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_types_Set() const{
    return m_bio_mgmt_prctce_types_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_types_Valid() const{
    return m_bio_mgmt_prctce_types_isValid;
}

QString OAICwa07::getBioMgmtPrctceTypes2016() const {
    return m_bio_mgmt_prctce_types2016;
}
void OAICwa07::setBioMgmtPrctceTypes2016(const QString &bio_mgmt_prctce_types2016) {
    m_bio_mgmt_prctce_types2016 = bio_mgmt_prctce_types2016;
    m_bio_mgmt_prctce_types2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_types2016_Set() const{
    return m_bio_mgmt_prctce_types2016_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_types2016_Valid() const{
    return m_bio_mgmt_prctce_types2016_isValid;
}

QString OAICwa07::getBioMgmtPrctceTypes2017() const {
    return m_bio_mgmt_prctce_types2017;
}
void OAICwa07::setBioMgmtPrctceTypes2017(const QString &bio_mgmt_prctce_types2017) {
    m_bio_mgmt_prctce_types2017 = bio_mgmt_prctce_types2017;
    m_bio_mgmt_prctce_types2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_prctce_types2017_Set() const{
    return m_bio_mgmt_prctce_types2017_isSet;
}

bool OAICwa07::is_bio_mgmt_prctce_types2017_Valid() const{
    return m_bio_mgmt_prctce_types2017_isValid;
}

QString OAICwa07::getBioMgmtVectors() const {
    return m_bio_mgmt_vectors;
}
void OAICwa07::setBioMgmtVectors(const QString &bio_mgmt_vectors) {
    m_bio_mgmt_vectors = bio_mgmt_vectors;
    m_bio_mgmt_vectors_isSet = true;
}

bool OAICwa07::is_bio_mgmt_vectors_Set() const{
    return m_bio_mgmt_vectors_isSet;
}

bool OAICwa07::is_bio_mgmt_vectors_Valid() const{
    return m_bio_mgmt_vectors_isValid;
}

QString OAICwa07::getBioMgmtVectors2016() const {
    return m_bio_mgmt_vectors2016;
}
void OAICwa07::setBioMgmtVectors2016(const QString &bio_mgmt_vectors2016) {
    m_bio_mgmt_vectors2016 = bio_mgmt_vectors2016;
    m_bio_mgmt_vectors2016_isSet = true;
}

bool OAICwa07::is_bio_mgmt_vectors2016_Set() const{
    return m_bio_mgmt_vectors2016_isSet;
}

bool OAICwa07::is_bio_mgmt_vectors2016_Valid() const{
    return m_bio_mgmt_vectors2016_isValid;
}

QString OAICwa07::getBioMgmtVectors2017() const {
    return m_bio_mgmt_vectors2017;
}
void OAICwa07::setBioMgmtVectors2017(const QString &bio_mgmt_vectors2017) {
    m_bio_mgmt_vectors2017 = bio_mgmt_vectors2017;
    m_bio_mgmt_vectors2017_isSet = true;
}

bool OAICwa07::is_bio_mgmt_vectors2017_Set() const{
    return m_bio_mgmt_vectors2017_isSet;
}

bool OAICwa07::is_bio_mgmt_vectors2017_Valid() const{
    return m_bio_mgmt_vectors2017_isValid;
}

QString OAICwa07::getBioOtherManagementSum() const {
    return m_bio_other_management_sum;
}
void OAICwa07::setBioOtherManagementSum(const QString &bio_other_management_sum) {
    m_bio_other_management_sum = bio_other_management_sum;
    m_bio_other_management_sum_isSet = true;
}

bool OAICwa07::is_bio_other_management_sum_Set() const{
    return m_bio_other_management_sum_isSet;
}

bool OAICwa07::is_bio_other_management_sum_Valid() const{
    return m_bio_other_management_sum_isValid;
}

QString OAICwa07::getBioOtherManagementSum2016() const {
    return m_bio_other_management_sum2016;
}
void OAICwa07::setBioOtherManagementSum2016(const QString &bio_other_management_sum2016) {
    m_bio_other_management_sum2016 = bio_other_management_sum2016;
    m_bio_other_management_sum2016_isSet = true;
}

bool OAICwa07::is_bio_other_management_sum2016_Set() const{
    return m_bio_other_management_sum2016_isSet;
}

bool OAICwa07::is_bio_other_management_sum2016_Valid() const{
    return m_bio_other_management_sum2016_isValid;
}

QString OAICwa07::getBioOtherManagementSum2017() const {
    return m_bio_other_management_sum2017;
}
void OAICwa07::setBioOtherManagementSum2017(const QString &bio_other_management_sum2017) {
    m_bio_other_management_sum2017 = bio_other_management_sum2017;
    m_bio_other_management_sum2017_isSet = true;
}

bool OAICwa07::is_bio_other_management_sum2017_Set() const{
    return m_bio_other_management_sum2017_isSet;
}

bool OAICwa07::is_bio_other_management_sum2017_Valid() const{
    return m_bio_other_management_sum2017_isValid;
}

QString OAICwa07::getBioOtherMgmtPrctcTxts() const {
    return m_bio_other_mgmt_prctc_txts;
}
void OAICwa07::setBioOtherMgmtPrctcTxts(const QString &bio_other_mgmt_prctc_txts) {
    m_bio_other_mgmt_prctc_txts = bio_other_mgmt_prctc_txts;
    m_bio_other_mgmt_prctc_txts_isSet = true;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts_Set() const{
    return m_bio_other_mgmt_prctc_txts_isSet;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts_Valid() const{
    return m_bio_other_mgmt_prctc_txts_isValid;
}

QString OAICwa07::getBioOtherMgmtPrctcTxts2016() const {
    return m_bio_other_mgmt_prctc_txts2016;
}
void OAICwa07::setBioOtherMgmtPrctcTxts2016(const QString &bio_other_mgmt_prctc_txts2016) {
    m_bio_other_mgmt_prctc_txts2016 = bio_other_mgmt_prctc_txts2016;
    m_bio_other_mgmt_prctc_txts2016_isSet = true;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts2016_Set() const{
    return m_bio_other_mgmt_prctc_txts2016_isSet;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts2016_Valid() const{
    return m_bio_other_mgmt_prctc_txts2016_isValid;
}

QString OAICwa07::getBioOtherMgmtPrctcTxts2017() const {
    return m_bio_other_mgmt_prctc_txts2017;
}
void OAICwa07::setBioOtherMgmtPrctcTxts2017(const QString &bio_other_mgmt_prctc_txts2017) {
    m_bio_other_mgmt_prctc_txts2017 = bio_other_mgmt_prctc_txts2017;
    m_bio_other_mgmt_prctc_txts2017_isSet = true;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts2017_Set() const{
    return m_bio_other_mgmt_prctc_txts2017_isSet;
}

bool OAICwa07::is_bio_other_mgmt_prctc_txts2017_Valid() const{
    return m_bio_other_mgmt_prctc_txts2017_isValid;
}

QString OAICwa07::getBioQtrsWithVio() const {
    return m_bio_qtrs_with_vio;
}
void OAICwa07::setBioQtrsWithVio(const QString &bio_qtrs_with_vio) {
    m_bio_qtrs_with_vio = bio_qtrs_with_vio;
    m_bio_qtrs_with_vio_isSet = true;
}

bool OAICwa07::is_bio_qtrs_with_vio_Set() const{
    return m_bio_qtrs_with_vio_isSet;
}

bool OAICwa07::is_bio_qtrs_with_vio_Valid() const{
    return m_bio_qtrs_with_vio_isValid;
}

QString OAICwa07::getBioReportDate() const {
    return m_bio_report_date;
}
void OAICwa07::setBioReportDate(const QString &bio_report_date) {
    m_bio_report_date = bio_report_date;
    m_bio_report_date_isSet = true;
}

bool OAICwa07::is_bio_report_date_Set() const{
    return m_bio_report_date_isSet;
}

bool OAICwa07::is_bio_report_date_Valid() const{
    return m_bio_report_date_isValid;
}

QString OAICwa07::getBioReportDate2016() const {
    return m_bio_report_date2016;
}
void OAICwa07::setBioReportDate2016(const QString &bio_report_date2016) {
    m_bio_report_date2016 = bio_report_date2016;
    m_bio_report_date2016_isSet = true;
}

bool OAICwa07::is_bio_report_date2016_Set() const{
    return m_bio_report_date2016_isSet;
}

bool OAICwa07::is_bio_report_date2016_Valid() const{
    return m_bio_report_date2016_isValid;
}

QString OAICwa07::getBioReportDate2017() const {
    return m_bio_report_date2017;
}
void OAICwa07::setBioReportDate2017(const QString &bio_report_date2017) {
    m_bio_report_date2017 = bio_report_date2017;
    m_bio_report_date2017_isSet = true;
}

bool OAICwa07::is_bio_report_date2017_Set() const{
    return m_bio_report_date2017_isSet;
}

bool OAICwa07::is_bio_report_date2017_Valid() const{
    return m_bio_report_date2017_isValid;
}

QString OAICwa07::getBioReportYear() const {
    return m_bio_report_year;
}
void OAICwa07::setBioReportYear(const QString &bio_report_year) {
    m_bio_report_year = bio_report_year;
    m_bio_report_year_isSet = true;
}

bool OAICwa07::is_bio_report_year_Set() const{
    return m_bio_report_year_isSet;
}

bool OAICwa07::is_bio_report_year_Valid() const{
    return m_bio_report_year_isValid;
}

QString OAICwa07::getBioReportYears() const {
    return m_bio_report_years;
}
void OAICwa07::setBioReportYears(const QString &bio_report_years) {
    m_bio_report_years = bio_report_years;
    m_bio_report_years_isSet = true;
}

bool OAICwa07::is_bio_report_years_Set() const{
    return m_bio_report_years_isSet;
}

bool OAICwa07::is_bio_report_years_Valid() const{
    return m_bio_report_years_isValid;
}

QString OAICwa07::getBioReportingObligations() const {
    return m_bio_reporting_obligations;
}
void OAICwa07::setBioReportingObligations(const QString &bio_reporting_obligations) {
    m_bio_reporting_obligations = bio_reporting_obligations;
    m_bio_reporting_obligations_isSet = true;
}

bool OAICwa07::is_bio_reporting_obligations_Set() const{
    return m_bio_reporting_obligations_isSet;
}

bool OAICwa07::is_bio_reporting_obligations_Valid() const{
    return m_bio_reporting_obligations_isValid;
}

QString OAICwa07::getBioReportingObligations2016() const {
    return m_bio_reporting_obligations2016;
}
void OAICwa07::setBioReportingObligations2016(const QString &bio_reporting_obligations2016) {
    m_bio_reporting_obligations2016 = bio_reporting_obligations2016;
    m_bio_reporting_obligations2016_isSet = true;
}

bool OAICwa07::is_bio_reporting_obligations2016_Set() const{
    return m_bio_reporting_obligations2016_isSet;
}

bool OAICwa07::is_bio_reporting_obligations2016_Valid() const{
    return m_bio_reporting_obligations2016_isValid;
}

QString OAICwa07::getBioReportingObligations2017() const {
    return m_bio_reporting_obligations2017;
}
void OAICwa07::setBioReportingObligations2017(const QString &bio_reporting_obligations2017) {
    m_bio_reporting_obligations2017 = bio_reporting_obligations2017;
    m_bio_reporting_obligations2017_isSet = true;
}

bool OAICwa07::is_bio_reporting_obligations2017_Set() const{
    return m_bio_reporting_obligations2017_isSet;
}

bool OAICwa07::is_bio_reporting_obligations2017_Valid() const{
    return m_bio_reporting_obligations2017_isValid;
}

QString OAICwa07::getBioSurfaceDispSum() const {
    return m_bio_surface_disp_sum;
}
void OAICwa07::setBioSurfaceDispSum(const QString &bio_surface_disp_sum) {
    m_bio_surface_disp_sum = bio_surface_disp_sum;
    m_bio_surface_disp_sum_isSet = true;
}

bool OAICwa07::is_bio_surface_disp_sum_Set() const{
    return m_bio_surface_disp_sum_isSet;
}

bool OAICwa07::is_bio_surface_disp_sum_Valid() const{
    return m_bio_surface_disp_sum_isValid;
}

QString OAICwa07::getBioSurfaceDispSum2016() const {
    return m_bio_surface_disp_sum2016;
}
void OAICwa07::setBioSurfaceDispSum2016(const QString &bio_surface_disp_sum2016) {
    m_bio_surface_disp_sum2016 = bio_surface_disp_sum2016;
    m_bio_surface_disp_sum2016_isSet = true;
}

bool OAICwa07::is_bio_surface_disp_sum2016_Set() const{
    return m_bio_surface_disp_sum2016_isSet;
}

bool OAICwa07::is_bio_surface_disp_sum2016_Valid() const{
    return m_bio_surface_disp_sum2016_isValid;
}

QString OAICwa07::getBioSurfaceDispSum2017() const {
    return m_bio_surface_disp_sum2017;
}
void OAICwa07::setBioSurfaceDispSum2017(const QString &bio_surface_disp_sum2017) {
    m_bio_surface_disp_sum2017 = bio_surface_disp_sum2017;
    m_bio_surface_disp_sum2017_isSet = true;
}

bool OAICwa07::is_bio_surface_disp_sum2017_Set() const{
    return m_bio_surface_disp_sum2017_isSet;
}

bool OAICwa07::is_bio_surface_disp_sum2017_Valid() const{
    return m_bio_surface_disp_sum2017_isValid;
}

QString OAICwa07::getBioTotalVolumeAmt() const {
    return m_bio_total_volume_amt;
}
void OAICwa07::setBioTotalVolumeAmt(const QString &bio_total_volume_amt) {
    m_bio_total_volume_amt = bio_total_volume_amt;
    m_bio_total_volume_amt_isSet = true;
}

bool OAICwa07::is_bio_total_volume_amt_Set() const{
    return m_bio_total_volume_amt_isSet;
}

bool OAICwa07::is_bio_total_volume_amt_Valid() const{
    return m_bio_total_volume_amt_isValid;
}

QString OAICwa07::getBioTotalVolumeAmt2016() const {
    return m_bio_total_volume_amt2016;
}
void OAICwa07::setBioTotalVolumeAmt2016(const QString &bio_total_volume_amt2016) {
    m_bio_total_volume_amt2016 = bio_total_volume_amt2016;
    m_bio_total_volume_amt2016_isSet = true;
}

bool OAICwa07::is_bio_total_volume_amt2016_Set() const{
    return m_bio_total_volume_amt2016_isSet;
}

bool OAICwa07::is_bio_total_volume_amt2016_Valid() const{
    return m_bio_total_volume_amt2016_isValid;
}

QString OAICwa07::getBioTotalVolumeAmt2017() const {
    return m_bio_total_volume_amt2017;
}
void OAICwa07::setBioTotalVolumeAmt2017(const QString &bio_total_volume_amt2017) {
    m_bio_total_volume_amt2017 = bio_total_volume_amt2017;
    m_bio_total_volume_amt2017_isSet = true;
}

bool OAICwa07::is_bio_total_volume_amt2017_Set() const{
    return m_bio_total_volume_amt2017_isSet;
}

bool OAICwa07::is_bio_total_volume_amt2017_Valid() const{
    return m_bio_total_volume_amt2017_isValid;
}

QString OAICwa07::getBioTrmntPrcssCmntTxts2016() const {
    return m_bio_trmnt_prcss_cmnt_txts2016;
}
void OAICwa07::setBioTrmntPrcssCmntTxts2016(const QString &bio_trmnt_prcss_cmnt_txts2016) {
    m_bio_trmnt_prcss_cmnt_txts2016 = bio_trmnt_prcss_cmnt_txts2016;
    m_bio_trmnt_prcss_cmnt_txts2016_isSet = true;
}

bool OAICwa07::is_bio_trmnt_prcss_cmnt_txts2016_Set() const{
    return m_bio_trmnt_prcss_cmnt_txts2016_isSet;
}

bool OAICwa07::is_bio_trmnt_prcss_cmnt_txts2016_Valid() const{
    return m_bio_trmnt_prcss_cmnt_txts2016_isValid;
}

QString OAICwa07::getBioTrmntPrcssCmntTxts2017() const {
    return m_bio_trmnt_prcss_cmnt_txts2017;
}
void OAICwa07::setBioTrmntPrcssCmntTxts2017(const QString &bio_trmnt_prcss_cmnt_txts2017) {
    m_bio_trmnt_prcss_cmnt_txts2017 = bio_trmnt_prcss_cmnt_txts2017;
    m_bio_trmnt_prcss_cmnt_txts2017_isSet = true;
}

bool OAICwa07::is_bio_trmnt_prcss_cmnt_txts2017_Set() const{
    return m_bio_trmnt_prcss_cmnt_txts2017_isSet;
}

bool OAICwa07::is_bio_trmnt_prcss_cmnt_txts2017_Valid() const{
    return m_bio_trmnt_prcss_cmnt_txts2017_isValid;
}

QString OAICwa07::getBioTrtmntPrcssCmmntTxts() const {
    return m_bio_trtmnt_prcss_cmmnt_txts;
}
void OAICwa07::setBioTrtmntPrcssCmmntTxts(const QString &bio_trtmnt_prcss_cmmnt_txts) {
    m_bio_trtmnt_prcss_cmmnt_txts = bio_trtmnt_prcss_cmmnt_txts;
    m_bio_trtmnt_prcss_cmmnt_txts_isSet = true;
}

bool OAICwa07::is_bio_trtmnt_prcss_cmmnt_txts_Set() const{
    return m_bio_trtmnt_prcss_cmmnt_txts_isSet;
}

bool OAICwa07::is_bio_trtmnt_prcss_cmmnt_txts_Valid() const{
    return m_bio_trtmnt_prcss_cmmnt_txts_isValid;
}

QString OAICwa07::getBioTrtmntProcesses() const {
    return m_bio_trtmnt_processes;
}
void OAICwa07::setBioTrtmntProcesses(const QString &bio_trtmnt_processes) {
    m_bio_trtmnt_processes = bio_trtmnt_processes;
    m_bio_trtmnt_processes_isSet = true;
}

bool OAICwa07::is_bio_trtmnt_processes_Set() const{
    return m_bio_trtmnt_processes_isSet;
}

bool OAICwa07::is_bio_trtmnt_processes_Valid() const{
    return m_bio_trtmnt_processes_isValid;
}

QString OAICwa07::getBioTrtmntProcesses2016() const {
    return m_bio_trtmnt_processes2016;
}
void OAICwa07::setBioTrtmntProcesses2016(const QString &bio_trtmnt_processes2016) {
    m_bio_trtmnt_processes2016 = bio_trtmnt_processes2016;
    m_bio_trtmnt_processes2016_isSet = true;
}

bool OAICwa07::is_bio_trtmnt_processes2016_Set() const{
    return m_bio_trtmnt_processes2016_isSet;
}

bool OAICwa07::is_bio_trtmnt_processes2016_Valid() const{
    return m_bio_trtmnt_processes2016_isValid;
}

QString OAICwa07::getBioTrtmntProcesses2017() const {
    return m_bio_trtmnt_processes2017;
}
void OAICwa07::setBioTrtmntProcesses2017(const QString &bio_trtmnt_processes2017) {
    m_bio_trtmnt_processes2017 = bio_trtmnt_processes2017;
    m_bio_trtmnt_processes2017_isSet = true;
}

bool OAICwa07::is_bio_trtmnt_processes2017_Set() const{
    return m_bio_trtmnt_processes2017_isSet;
}

bool OAICwa07::is_bio_trtmnt_processes2017_Valid() const{
    return m_bio_trtmnt_processes2017_isValid;
}

QString OAICwa07::getBioVioLastYear() const {
    return m_bio_vio_last_year;
}
void OAICwa07::setBioVioLastYear(const QString &bio_vio_last_year) {
    m_bio_vio_last_year = bio_vio_last_year;
    m_bio_vio_last_year_isSet = true;
}

bool OAICwa07::is_bio_vio_last_year_Set() const{
    return m_bio_vio_last_year_isSet;
}

bool OAICwa07::is_bio_vio_last_year_Valid() const{
    return m_bio_vio_last_year_isValid;
}

QString OAICwa07::getBioVioLastYearFlag() const {
    return m_bio_vio_last_year_flag;
}
void OAICwa07::setBioVioLastYearFlag(const QString &bio_vio_last_year_flag) {
    m_bio_vio_last_year_flag = bio_vio_last_year_flag;
    m_bio_vio_last_year_flag_isSet = true;
}

bool OAICwa07::is_bio_vio_last_year_flag_Set() const{
    return m_bio_vio_last_year_flag_isSet;
}

bool OAICwa07::is_bio_vio_last_year_flag_Valid() const{
    return m_bio_vio_last_year_flag_isValid;
}

QString OAICwa07::getBioVioStatus() const {
    return m_bio_vio_status;
}
void OAICwa07::setBioVioStatus(const QString &bio_vio_status) {
    m_bio_vio_status = bio_vio_status;
    m_bio_vio_status_isSet = true;
}

bool OAICwa07::is_bio_vio_status_Set() const{
    return m_bio_vio_status_isSet;
}

bool OAICwa07::is_bio_vio_status_Valid() const{
    return m_bio_vio_status_isValid;
}

QString OAICwa07::getBioViolFlag() const {
    return m_bio_viol_flag;
}
void OAICwa07::setBioViolFlag(const QString &bio_viol_flag) {
    m_bio_viol_flag = bio_viol_flag;
    m_bio_viol_flag_isSet = true;
}

bool OAICwa07::is_bio_viol_flag_Set() const{
    return m_bio_viol_flag_isSet;
}

bool OAICwa07::is_bio_viol_flag_Valid() const{
    return m_bio_viol_flag_isValid;
}

QString OAICwa07::getBiosolidsFlag() const {
    return m_biosolids_flag;
}
void OAICwa07::setBiosolidsFlag(const QString &biosolids_flag) {
    m_biosolids_flag = biosolids_flag;
    m_biosolids_flag_isSet = true;
}

bool OAICwa07::is_biosolids_flag_Set() const{
    return m_biosolids_flag_isSet;
}

bool OAICwa07::is_biosolids_flag_Valid() const{
    return m_biosolids_flag_isValid;
}

QString OAICwa07::getCwp13qtrsComplHistory() const {
    return m_cwp13qtrs_compl_history;
}
void OAICwa07::setCwp13qtrsComplHistory(const QString &cwp13qtrs_compl_history) {
    m_cwp13qtrs_compl_history = cwp13qtrs_compl_history;
    m_cwp13qtrs_compl_history_isSet = true;
}

bool OAICwa07::is_cwp13qtrs_compl_history_Set() const{
    return m_cwp13qtrs_compl_history_isSet;
}

bool OAICwa07::is_cwp13qtrs_compl_history_Valid() const{
    return m_cwp13qtrs_compl_history_isValid;
}

QString OAICwa07::getCwpActualAverageFlowNmbr() const {
    return m_cwp_actual_average_flow_nmbr;
}
void OAICwa07::setCwpActualAverageFlowNmbr(const QString &cwp_actual_average_flow_nmbr) {
    m_cwp_actual_average_flow_nmbr = cwp_actual_average_flow_nmbr;
    m_cwp_actual_average_flow_nmbr_isSet = true;
}

bool OAICwa07::is_cwp_actual_average_flow_nmbr_Set() const{
    return m_cwp_actual_average_flow_nmbr_isSet;
}

bool OAICwa07::is_cwp_actual_average_flow_nmbr_Valid() const{
    return m_cwp_actual_average_flow_nmbr_isValid;
}

QString OAICwa07::getCwpBioFeaCount() const {
    return m_cwp_bio_fea_count;
}
void OAICwa07::setCwpBioFeaCount(const QString &cwp_bio_fea_count) {
    m_cwp_bio_fea_count = cwp_bio_fea_count;
    m_cwp_bio_fea_count_isSet = true;
}

bool OAICwa07::is_cwp_bio_fea_count_Set() const{
    return m_cwp_bio_fea_count_isSet;
}

bool OAICwa07::is_cwp_bio_fea_count_Valid() const{
    return m_cwp_bio_fea_count_isValid;
}

QString OAICwa07::getCwpBioIeaCount() const {
    return m_cwp_bio_iea_count;
}
void OAICwa07::setCwpBioIeaCount(const QString &cwp_bio_iea_count) {
    m_cwp_bio_iea_count = cwp_bio_iea_count;
    m_cwp_bio_iea_count_isSet = true;
}

bool OAICwa07::is_cwp_bio_iea_count_Set() const{
    return m_cwp_bio_iea_count_isSet;
}

bool OAICwa07::is_cwp_bio_iea_count_Valid() const{
    return m_cwp_bio_iea_count_isValid;
}

QString OAICwa07::getCwpBioInspCount() const {
    return m_cwp_bio_insp_count;
}
void OAICwa07::setCwpBioInspCount(const QString &cwp_bio_insp_count) {
    m_cwp_bio_insp_count = cwp_bio_insp_count;
    m_cwp_bio_insp_count_isSet = true;
}

bool OAICwa07::is_cwp_bio_insp_count_Set() const{
    return m_cwp_bio_insp_count_isSet;
}

bool OAICwa07::is_cwp_bio_insp_count_Valid() const{
    return m_cwp_bio_insp_count_isValid;
}

QString OAICwa07::getCwpBioPenalties() const {
    return m_cwp_bio_penalties;
}
void OAICwa07::setCwpBioPenalties(const QString &cwp_bio_penalties) {
    m_cwp_bio_penalties = cwp_bio_penalties;
    m_cwp_bio_penalties_isSet = true;
}

bool OAICwa07::is_cwp_bio_penalties_Set() const{
    return m_cwp_bio_penalties_isSet;
}

bool OAICwa07::is_cwp_bio_penalties_Valid() const{
    return m_cwp_bio_penalties_isValid;
}

QString OAICwa07::getCwpCaseIds() const {
    return m_cwp_case_ids;
}
void OAICwa07::setCwpCaseIds(const QString &cwp_case_ids) {
    m_cwp_case_ids = cwp_case_ids;
    m_cwp_case_ids_isSet = true;
}

bool OAICwa07::is_cwp_case_ids_Set() const{
    return m_cwp_case_ids_isSet;
}

bool OAICwa07::is_cwp_case_ids_Valid() const{
    return m_cwp_case_ids_isValid;
}

QString OAICwa07::getCwpCity() const {
    return m_cwp_city;
}
void OAICwa07::setCwpCity(const QString &cwp_city) {
    m_cwp_city = cwp_city;
    m_cwp_city_isSet = true;
}

bool OAICwa07::is_cwp_city_Set() const{
    return m_cwp_city_isSet;
}

bool OAICwa07::is_cwp_city_Valid() const{
    return m_cwp_city_isValid;
}

QString OAICwa07::getCwpComplianceTracking() const {
    return m_cwp_compliance_tracking;
}
void OAICwa07::setCwpComplianceTracking(const QString &cwp_compliance_tracking) {
    m_cwp_compliance_tracking = cwp_compliance_tracking;
    m_cwp_compliance_tracking_isSet = true;
}

bool OAICwa07::is_cwp_compliance_tracking_Set() const{
    return m_cwp_compliance_tracking_isSet;
}

bool OAICwa07::is_cwp_compliance_tracking_Valid() const{
    return m_cwp_compliance_tracking_isValid;
}

QString OAICwa07::getCwpCounty() const {
    return m_cwp_county;
}
void OAICwa07::setCwpCounty(const QString &cwp_county) {
    m_cwp_county = cwp_county;
    m_cwp_county_isSet = true;
}

bool OAICwa07::is_cwp_county_Set() const{
    return m_cwp_county_isSet;
}

bool OAICwa07::is_cwp_county_Valid() const{
    return m_cwp_county_isValid;
}

QString OAICwa07::getCwpCsoFlag() const {
    return m_cwp_cso_flag;
}
void OAICwa07::setCwpCsoFlag(const QString &cwp_cso_flag) {
    m_cwp_cso_flag = cwp_cso_flag;
    m_cwp_cso_flag_isSet = true;
}

bool OAICwa07::is_cwp_cso_flag_Set() const{
    return m_cwp_cso_flag_isSet;
}

bool OAICwa07::is_cwp_cso_flag_Valid() const{
    return m_cwp_cso_flag_isValid;
}

QString OAICwa07::getCwpCsoOutfalls() const {
    return m_cwp_cso_outfalls;
}
void OAICwa07::setCwpCsoOutfalls(const QString &cwp_cso_outfalls) {
    m_cwp_cso_outfalls = cwp_cso_outfalls;
    m_cwp_cso_outfalls_isSet = true;
}

bool OAICwa07::is_cwp_cso_outfalls_Set() const{
    return m_cwp_cso_outfalls_isSet;
}

bool OAICwa07::is_cwp_cso_outfalls_Valid() const{
    return m_cwp_cso_outfalls_isValid;
}

QString OAICwa07::getCwpDateLastBioFea() const {
    return m_cwp_date_last_bio_fea;
}
void OAICwa07::setCwpDateLastBioFea(const QString &cwp_date_last_bio_fea) {
    m_cwp_date_last_bio_fea = cwp_date_last_bio_fea;
    m_cwp_date_last_bio_fea_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_fea_Set() const{
    return m_cwp_date_last_bio_fea_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_fea_Valid() const{
    return m_cwp_date_last_bio_fea_isValid;
}

QString OAICwa07::getCwpDateLastBioFeaEpa() const {
    return m_cwp_date_last_bio_fea_epa;
}
void OAICwa07::setCwpDateLastBioFeaEpa(const QString &cwp_date_last_bio_fea_epa) {
    m_cwp_date_last_bio_fea_epa = cwp_date_last_bio_fea_epa;
    m_cwp_date_last_bio_fea_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_fea_epa_Set() const{
    return m_cwp_date_last_bio_fea_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_fea_epa_Valid() const{
    return m_cwp_date_last_bio_fea_epa_isValid;
}

QString OAICwa07::getCwpDateLastBioFeaSt() const {
    return m_cwp_date_last_bio_fea_st;
}
void OAICwa07::setCwpDateLastBioFeaSt(const QString &cwp_date_last_bio_fea_st) {
    m_cwp_date_last_bio_fea_st = cwp_date_last_bio_fea_st;
    m_cwp_date_last_bio_fea_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_fea_st_Set() const{
    return m_cwp_date_last_bio_fea_st_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_fea_st_Valid() const{
    return m_cwp_date_last_bio_fea_st_isValid;
}

QString OAICwa07::getCwpDateLastBioIea() const {
    return m_cwp_date_last_bio_iea;
}
void OAICwa07::setCwpDateLastBioIea(const QString &cwp_date_last_bio_iea) {
    m_cwp_date_last_bio_iea = cwp_date_last_bio_iea;
    m_cwp_date_last_bio_iea_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_iea_Set() const{
    return m_cwp_date_last_bio_iea_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_iea_Valid() const{
    return m_cwp_date_last_bio_iea_isValid;
}

QString OAICwa07::getCwpDateLastBioIeaEpa() const {
    return m_cwp_date_last_bio_iea_epa;
}
void OAICwa07::setCwpDateLastBioIeaEpa(const QString &cwp_date_last_bio_iea_epa) {
    m_cwp_date_last_bio_iea_epa = cwp_date_last_bio_iea_epa;
    m_cwp_date_last_bio_iea_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_iea_epa_Set() const{
    return m_cwp_date_last_bio_iea_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_iea_epa_Valid() const{
    return m_cwp_date_last_bio_iea_epa_isValid;
}

QString OAICwa07::getCwpDateLastBioIeaSt() const {
    return m_cwp_date_last_bio_iea_st;
}
void OAICwa07::setCwpDateLastBioIeaSt(const QString &cwp_date_last_bio_iea_st) {
    m_cwp_date_last_bio_iea_st = cwp_date_last_bio_iea_st;
    m_cwp_date_last_bio_iea_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_iea_st_Set() const{
    return m_cwp_date_last_bio_iea_st_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_iea_st_Valid() const{
    return m_cwp_date_last_bio_iea_st_isValid;
}

QString OAICwa07::getCwpDateLastBioInsp() const {
    return m_cwp_date_last_bio_insp;
}
void OAICwa07::setCwpDateLastBioInsp(const QString &cwp_date_last_bio_insp) {
    m_cwp_date_last_bio_insp = cwp_date_last_bio_insp;
    m_cwp_date_last_bio_insp_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_insp_Set() const{
    return m_cwp_date_last_bio_insp_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_insp_Valid() const{
    return m_cwp_date_last_bio_insp_isValid;
}

QString OAICwa07::getCwpDateLastBioInspEpa() const {
    return m_cwp_date_last_bio_insp_epa;
}
void OAICwa07::setCwpDateLastBioInspEpa(const QString &cwp_date_last_bio_insp_epa) {
    m_cwp_date_last_bio_insp_epa = cwp_date_last_bio_insp_epa;
    m_cwp_date_last_bio_insp_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_insp_epa_Set() const{
    return m_cwp_date_last_bio_insp_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_insp_epa_Valid() const{
    return m_cwp_date_last_bio_insp_epa_isValid;
}

QString OAICwa07::getCwpDateLastBioInspSt() const {
    return m_cwp_date_last_bio_insp_st;
}
void OAICwa07::setCwpDateLastBioInspSt(const QString &cwp_date_last_bio_insp_st) {
    m_cwp_date_last_bio_insp_st = cwp_date_last_bio_insp_st;
    m_cwp_date_last_bio_insp_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_insp_st_Set() const{
    return m_cwp_date_last_bio_insp_st_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_insp_st_Valid() const{
    return m_cwp_date_last_bio_insp_st_isValid;
}

QString OAICwa07::getCwpDateLastBioPenalty() const {
    return m_cwp_date_last_bio_penalty;
}
void OAICwa07::setCwpDateLastBioPenalty(const QString &cwp_date_last_bio_penalty) {
    m_cwp_date_last_bio_penalty = cwp_date_last_bio_penalty;
    m_cwp_date_last_bio_penalty_isSet = true;
}

bool OAICwa07::is_cwp_date_last_bio_penalty_Set() const{
    return m_cwp_date_last_bio_penalty_isSet;
}

bool OAICwa07::is_cwp_date_last_bio_penalty_Valid() const{
    return m_cwp_date_last_bio_penalty_isValid;
}

QString OAICwa07::getCwpDateLastFea() const {
    return m_cwp_date_last_fea;
}
void OAICwa07::setCwpDateLastFea(const QString &cwp_date_last_fea) {
    m_cwp_date_last_fea = cwp_date_last_fea;
    m_cwp_date_last_fea_isSet = true;
}

bool OAICwa07::is_cwp_date_last_fea_Set() const{
    return m_cwp_date_last_fea_isSet;
}

bool OAICwa07::is_cwp_date_last_fea_Valid() const{
    return m_cwp_date_last_fea_isValid;
}

QString OAICwa07::getCwpDateLastFeaEpa() const {
    return m_cwp_date_last_fea_epa;
}
void OAICwa07::setCwpDateLastFeaEpa(const QString &cwp_date_last_fea_epa) {
    m_cwp_date_last_fea_epa = cwp_date_last_fea_epa;
    m_cwp_date_last_fea_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_fea_epa_Set() const{
    return m_cwp_date_last_fea_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_fea_epa_Valid() const{
    return m_cwp_date_last_fea_epa_isValid;
}

QString OAICwa07::getCwpDateLastFeaSt() const {
    return m_cwp_date_last_fea_st;
}
void OAICwa07::setCwpDateLastFeaSt(const QString &cwp_date_last_fea_st) {
    m_cwp_date_last_fea_st = cwp_date_last_fea_st;
    m_cwp_date_last_fea_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_fea_st_Set() const{
    return m_cwp_date_last_fea_st_isSet;
}

bool OAICwa07::is_cwp_date_last_fea_st_Valid() const{
    return m_cwp_date_last_fea_st_isValid;
}

QString OAICwa07::getCwpDateLastIeaEpa() const {
    return m_cwp_date_last_iea_epa;
}
void OAICwa07::setCwpDateLastIeaEpa(const QString &cwp_date_last_iea_epa) {
    m_cwp_date_last_iea_epa = cwp_date_last_iea_epa;
    m_cwp_date_last_iea_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_iea_epa_Set() const{
    return m_cwp_date_last_iea_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_iea_epa_Valid() const{
    return m_cwp_date_last_iea_epa_isValid;
}

QString OAICwa07::getCwpDateLastIeaSt() const {
    return m_cwp_date_last_iea_st;
}
void OAICwa07::setCwpDateLastIeaSt(const QString &cwp_date_last_iea_st) {
    m_cwp_date_last_iea_st = cwp_date_last_iea_st;
    m_cwp_date_last_iea_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_iea_st_Set() const{
    return m_cwp_date_last_iea_st_isSet;
}

bool OAICwa07::is_cwp_date_last_iea_st_Valid() const{
    return m_cwp_date_last_iea_st_isValid;
}

QString OAICwa07::getCwpDateLastInformalEa() const {
    return m_cwp_date_last_informal_ea;
}
void OAICwa07::setCwpDateLastInformalEa(const QString &cwp_date_last_informal_ea) {
    m_cwp_date_last_informal_ea = cwp_date_last_informal_ea;
    m_cwp_date_last_informal_ea_isSet = true;
}

bool OAICwa07::is_cwp_date_last_informal_ea_Set() const{
    return m_cwp_date_last_informal_ea_isSet;
}

bool OAICwa07::is_cwp_date_last_informal_ea_Valid() const{
    return m_cwp_date_last_informal_ea_isValid;
}

QString OAICwa07::getCwpDateLastInspEpa() const {
    return m_cwp_date_last_insp_epa;
}
void OAICwa07::setCwpDateLastInspEpa(const QString &cwp_date_last_insp_epa) {
    m_cwp_date_last_insp_epa = cwp_date_last_insp_epa;
    m_cwp_date_last_insp_epa_isSet = true;
}

bool OAICwa07::is_cwp_date_last_insp_epa_Set() const{
    return m_cwp_date_last_insp_epa_isSet;
}

bool OAICwa07::is_cwp_date_last_insp_epa_Valid() const{
    return m_cwp_date_last_insp_epa_isValid;
}

QString OAICwa07::getCwpDateLastInspSt() const {
    return m_cwp_date_last_insp_st;
}
void OAICwa07::setCwpDateLastInspSt(const QString &cwp_date_last_insp_st) {
    m_cwp_date_last_insp_st = cwp_date_last_insp_st;
    m_cwp_date_last_insp_st_isSet = true;
}

bool OAICwa07::is_cwp_date_last_insp_st_Set() const{
    return m_cwp_date_last_insp_st_isSet;
}

bool OAICwa07::is_cwp_date_last_insp_st_Valid() const{
    return m_cwp_date_last_insp_st_isValid;
}

QString OAICwa07::getCwpDateLastInspection() const {
    return m_cwp_date_last_inspection;
}
void OAICwa07::setCwpDateLastInspection(const QString &cwp_date_last_inspection) {
    m_cwp_date_last_inspection = cwp_date_last_inspection;
    m_cwp_date_last_inspection_isSet = true;
}

bool OAICwa07::is_cwp_date_last_inspection_Set() const{
    return m_cwp_date_last_inspection_isSet;
}

bool OAICwa07::is_cwp_date_last_inspection_Valid() const{
    return m_cwp_date_last_inspection_isValid;
}

QString OAICwa07::getCwpDateLastPenalty() const {
    return m_cwp_date_last_penalty;
}
void OAICwa07::setCwpDateLastPenalty(const QString &cwp_date_last_penalty) {
    m_cwp_date_last_penalty = cwp_date_last_penalty;
    m_cwp_date_last_penalty_isSet = true;
}

bool OAICwa07::is_cwp_date_last_penalty_Set() const{
    return m_cwp_date_last_penalty_isSet;
}

bool OAICwa07::is_cwp_date_last_penalty_Valid() const{
    return m_cwp_date_last_penalty_isValid;
}

QString OAICwa07::getCwpDaysLastBioInsp() const {
    return m_cwp_days_last_bio_insp;
}
void OAICwa07::setCwpDaysLastBioInsp(const QString &cwp_days_last_bio_insp) {
    m_cwp_days_last_bio_insp = cwp_days_last_bio_insp;
    m_cwp_days_last_bio_insp_isSet = true;
}

bool OAICwa07::is_cwp_days_last_bio_insp_Set() const{
    return m_cwp_days_last_bio_insp_isSet;
}

bool OAICwa07::is_cwp_days_last_bio_insp_Valid() const{
    return m_cwp_days_last_bio_insp_isValid;
}

QString OAICwa07::getCwpDaysLastInspection() const {
    return m_cwp_days_last_inspection;
}
void OAICwa07::setCwpDaysLastInspection(const QString &cwp_days_last_inspection) {
    m_cwp_days_last_inspection = cwp_days_last_inspection;
    m_cwp_days_last_inspection_isSet = true;
}

bool OAICwa07::is_cwp_days_last_inspection_Set() const{
    return m_cwp_days_last_inspection_isSet;
}

bool OAICwa07::is_cwp_days_last_inspection_Valid() const{
    return m_cwp_days_last_inspection_isValid;
}

QString OAICwa07::getCwpe90Cnt() const {
    return m_cwpe90_cnt;
}
void OAICwa07::setCwpe90Cnt(const QString &cwpe90_cnt) {
    m_cwpe90_cnt = cwpe90_cnt;
    m_cwpe90_cnt_isSet = true;
}

bool OAICwa07::is_cwpe90_cnt_Set() const{
    return m_cwpe90_cnt_isSet;
}

bool OAICwa07::is_cwpe90_cnt_Valid() const{
    return m_cwpe90_cnt_isValid;
}

QString OAICwa07::getCwpepaRegion() const {
    return m_cwpepa_region;
}
void OAICwa07::setCwpepaRegion(const QString &cwpepa_region) {
    m_cwpepa_region = cwpepa_region;
    m_cwpepa_region_isSet = true;
}

bool OAICwa07::is_cwpepa_region_Set() const{
    return m_cwpepa_region_isSet;
}

bool OAICwa07::is_cwpepa_region_Valid() const{
    return m_cwpepa_region_isValid;
}

QString OAICwa07::getCwpEffectiveDate() const {
    return m_cwp_effective_date;
}
void OAICwa07::setCwpEffectiveDate(const QString &cwp_effective_date) {
    m_cwp_effective_date = cwp_effective_date;
    m_cwp_effective_date_isSet = true;
}

bool OAICwa07::is_cwp_effective_date_Set() const{
    return m_cwp_effective_date_isSet;
}

bool OAICwa07::is_cwp_effective_date_Valid() const{
    return m_cwp_effective_date_isValid;
}

QString OAICwa07::getCwpExpirationDate() const {
    return m_cwp_expiration_date;
}
void OAICwa07::setCwpExpirationDate(const QString &cwp_expiration_date) {
    m_cwp_expiration_date = cwp_expiration_date;
    m_cwp_expiration_date_isSet = true;
}

bool OAICwa07::is_cwp_expiration_date_Set() const{
    return m_cwp_expiration_date_isSet;
}

bool OAICwa07::is_cwp_expiration_date_Valid() const{
    return m_cwp_expiration_date_isValid;
}

QString OAICwa07::getCwpfipsCode() const {
    return m_cwpfips_code;
}
void OAICwa07::setCwpfipsCode(const QString &cwpfips_code) {
    m_cwpfips_code = cwpfips_code;
    m_cwpfips_code_isSet = true;
}

bool OAICwa07::is_cwpfips_code_Set() const{
    return m_cwpfips_code_isSet;
}

bool OAICwa07::is_cwpfips_code_Valid() const{
    return m_cwpfips_code_isValid;
}

QString OAICwa07::getCwpFacilityTypeCode() const {
    return m_cwp_facility_type_code;
}
void OAICwa07::setCwpFacilityTypeCode(const QString &cwp_facility_type_code) {
    m_cwp_facility_type_code = cwp_facility_type_code;
    m_cwp_facility_type_code_isSet = true;
}

bool OAICwa07::is_cwp_facility_type_code_Set() const{
    return m_cwp_facility_type_code_isSet;
}

bool OAICwa07::is_cwp_facility_type_code_Valid() const{
    return m_cwp_facility_type_code_isValid;
}

QString OAICwa07::getCwpFacilityTypeIndicator() const {
    return m_cwp_facility_type_indicator;
}
void OAICwa07::setCwpFacilityTypeIndicator(const QString &cwp_facility_type_indicator) {
    m_cwp_facility_type_indicator = cwp_facility_type_indicator;
    m_cwp_facility_type_indicator_isSet = true;
}

bool OAICwa07::is_cwp_facility_type_indicator_Set() const{
    return m_cwp_facility_type_indicator_isSet;
}

bool OAICwa07::is_cwp_facility_type_indicator_Valid() const{
    return m_cwp_facility_type_indicator_isValid;
}

QString OAICwa07::getCwpFormalEaCnt() const {
    return m_cwp_formal_ea_cnt;
}
void OAICwa07::setCwpFormalEaCnt(const QString &cwp_formal_ea_cnt) {
    m_cwp_formal_ea_cnt = cwp_formal_ea_cnt;
    m_cwp_formal_ea_cnt_isSet = true;
}

bool OAICwa07::is_cwp_formal_ea_cnt_Set() const{
    return m_cwp_formal_ea_cnt_isSet;
}

bool OAICwa07::is_cwp_formal_ea_cnt_Valid() const{
    return m_cwp_formal_ea_cnt_isValid;
}

QString OAICwa07::getCwpImpWaterFlg() const {
    return m_cwp_imp_water_flg;
}
void OAICwa07::setCwpImpWaterFlg(const QString &cwp_imp_water_flg) {
    m_cwp_imp_water_flg = cwp_imp_water_flg;
    m_cwp_imp_water_flg_isSet = true;
}

bool OAICwa07::is_cwp_imp_water_flg_Set() const{
    return m_cwp_imp_water_flg_isSet;
}

bool OAICwa07::is_cwp_imp_water_flg_Valid() const{
    return m_cwp_imp_water_flg_isValid;
}

QString OAICwa07::getCwpIndianCntryFlg() const {
    return m_cwp_indian_cntry_flg;
}
void OAICwa07::setCwpIndianCntryFlg(const QString &cwp_indian_cntry_flg) {
    m_cwp_indian_cntry_flg = cwp_indian_cntry_flg;
    m_cwp_indian_cntry_flg_isSet = true;
}

bool OAICwa07::is_cwp_indian_cntry_flg_Set() const{
    return m_cwp_indian_cntry_flg_isSet;
}

bool OAICwa07::is_cwp_indian_cntry_flg_Valid() const{
    return m_cwp_indian_cntry_flg_isValid;
}

QString OAICwa07::getCwpInformalEnfActCount() const {
    return m_cwp_informal_enf_act_count;
}
void OAICwa07::setCwpInformalEnfActCount(const QString &cwp_informal_enf_act_count) {
    m_cwp_informal_enf_act_count = cwp_informal_enf_act_count;
    m_cwp_informal_enf_act_count_isSet = true;
}

bool OAICwa07::is_cwp_informal_enf_act_count_Set() const{
    return m_cwp_informal_enf_act_count_isSet;
}

bool OAICwa07::is_cwp_informal_enf_act_count_Valid() const{
    return m_cwp_informal_enf_act_count_isValid;
}

QString OAICwa07::getCwpInspectionCount() const {
    return m_cwp_inspection_count;
}
void OAICwa07::setCwpInspectionCount(const QString &cwp_inspection_count) {
    m_cwp_inspection_count = cwp_inspection_count;
    m_cwp_inspection_count_isSet = true;
}

bool OAICwa07::is_cwp_inspection_count_Set() const{
    return m_cwp_inspection_count_isSet;
}

bool OAICwa07::is_cwp_inspection_count_Valid() const{
    return m_cwp_inspection_count_isValid;
}

QString OAICwa07::getCwpIssueDate() const {
    return m_cwp_issue_date;
}
void OAICwa07::setCwpIssueDate(const QString &cwp_issue_date) {
    m_cwp_issue_date = cwp_issue_date;
    m_cwp_issue_date_isSet = true;
}

bool OAICwa07::is_cwp_issue_date_Set() const{
    return m_cwp_issue_date_isSet;
}

bool OAICwa07::is_cwp_issue_date_Valid() const{
    return m_cwp_issue_date_isValid;
}

QString OAICwa07::getCwpMajorMinorStatusFlag() const {
    return m_cwp_major_minor_status_flag;
}
void OAICwa07::setCwpMajorMinorStatusFlag(const QString &cwp_major_minor_status_flag) {
    m_cwp_major_minor_status_flag = cwp_major_minor_status_flag;
    m_cwp_major_minor_status_flag_isSet = true;
}

bool OAICwa07::is_cwp_major_minor_status_flag_Set() const{
    return m_cwp_major_minor_status_flag_isSet;
}

bool OAICwa07::is_cwp_major_minor_status_flag_Valid() const{
    return m_cwp_major_minor_status_flag_isValid;
}

QString OAICwa07::getCwpnaicsCodes() const {
    return m_cwpnaics_codes;
}
void OAICwa07::setCwpnaicsCodes(const QString &cwpnaics_codes) {
    m_cwpnaics_codes = cwpnaics_codes;
    m_cwpnaics_codes_isSet = true;
}

bool OAICwa07::is_cwpnaics_codes_Set() const{
    return m_cwpnaics_codes_isSet;
}

bool OAICwa07::is_cwpnaics_codes_Valid() const{
    return m_cwpnaics_codes_isValid;
}

QString OAICwa07::getCwpName() const {
    return m_cwp_name;
}
void OAICwa07::setCwpName(const QString &cwp_name) {
    m_cwp_name = cwp_name;
    m_cwp_name_isSet = true;
}

bool OAICwa07::is_cwp_name_Set() const{
    return m_cwp_name_isSet;
}

bool OAICwa07::is_cwp_name_Valid() const{
    return m_cwp_name_isValid;
}

QString OAICwa07::getCwpPermitStatusCode() const {
    return m_cwp_permit_status_code;
}
void OAICwa07::setCwpPermitStatusCode(const QString &cwp_permit_status_code) {
    m_cwp_permit_status_code = cwp_permit_status_code;
    m_cwp_permit_status_code_isSet = true;
}

bool OAICwa07::is_cwp_permit_status_code_Set() const{
    return m_cwp_permit_status_code_isSet;
}

bool OAICwa07::is_cwp_permit_status_code_Valid() const{
    return m_cwp_permit_status_code_isValid;
}

QString OAICwa07::getCwpPermitStatusDesc() const {
    return m_cwp_permit_status_desc;
}
void OAICwa07::setCwpPermitStatusDesc(const QString &cwp_permit_status_desc) {
    m_cwp_permit_status_desc = cwp_permit_status_desc;
    m_cwp_permit_status_desc_isSet = true;
}

bool OAICwa07::is_cwp_permit_status_desc_Set() const{
    return m_cwp_permit_status_desc_isSet;
}

bool OAICwa07::is_cwp_permit_status_desc_Valid() const{
    return m_cwp_permit_status_desc_isValid;
}

QString OAICwa07::getCwpPermitTypeCode() const {
    return m_cwp_permit_type_code;
}
void OAICwa07::setCwpPermitTypeCode(const QString &cwp_permit_type_code) {
    m_cwp_permit_type_code = cwp_permit_type_code;
    m_cwp_permit_type_code_isSet = true;
}

bool OAICwa07::is_cwp_permit_type_code_Set() const{
    return m_cwp_permit_type_code_isSet;
}

bool OAICwa07::is_cwp_permit_type_code_Valid() const{
    return m_cwp_permit_type_code_isValid;
}

QString OAICwa07::getCwpPermitTypeDesc() const {
    return m_cwp_permit_type_desc;
}
void OAICwa07::setCwpPermitTypeDesc(const QString &cwp_permit_type_desc) {
    m_cwp_permit_type_desc = cwp_permit_type_desc;
    m_cwp_permit_type_desc_isSet = true;
}

bool OAICwa07::is_cwp_permit_type_desc_Set() const{
    return m_cwp_permit_type_desc_isSet;
}

bool OAICwa07::is_cwp_permit_type_desc_Valid() const{
    return m_cwp_permit_type_desc_isValid;
}

QString OAICwa07::getCwpQtrsWithNc() const {
    return m_cwp_qtrs_with_nc;
}
void OAICwa07::setCwpQtrsWithNc(const QString &cwp_qtrs_with_nc) {
    m_cwp_qtrs_with_nc = cwp_qtrs_with_nc;
    m_cwp_qtrs_with_nc_isSet = true;
}

bool OAICwa07::is_cwp_qtrs_with_nc_Set() const{
    return m_cwp_qtrs_with_nc_isSet;
}

bool OAICwa07::is_cwp_qtrs_with_nc_Valid() const{
    return m_cwp_qtrs_with_nc_isValid;
}

QString OAICwa07::getCwpQtrsWithSnc() const {
    return m_cwp_qtrs_with_snc;
}
void OAICwa07::setCwpQtrsWithSnc(const QString &cwp_qtrs_with_snc) {
    m_cwp_qtrs_with_snc = cwp_qtrs_with_snc;
    m_cwp_qtrs_with_snc_isSet = true;
}

bool OAICwa07::is_cwp_qtrs_with_snc_Set() const{
    return m_cwp_qtrs_with_snc_isSet;
}

bool OAICwa07::is_cwp_qtrs_with_snc_Valid() const{
    return m_cwp_qtrs_with_snc_isValid;
}

QString OAICwa07::getCwpsicCodes() const {
    return m_cwpsic_codes;
}
void OAICwa07::setCwpsicCodes(const QString &cwpsic_codes) {
    m_cwpsic_codes = cwpsic_codes;
    m_cwpsic_codes_isSet = true;
}

bool OAICwa07::is_cwpsic_codes_Set() const{
    return m_cwpsic_codes_isSet;
}

bool OAICwa07::is_cwpsic_codes_Valid() const{
    return m_cwpsic_codes_isValid;
}

QString OAICwa07::getCwpsncEventDesc() const {
    return m_cwpsnc_event_desc;
}
void OAICwa07::setCwpsncEventDesc(const QString &cwpsnc_event_desc) {
    m_cwpsnc_event_desc = cwpsnc_event_desc;
    m_cwpsnc_event_desc_isSet = true;
}

bool OAICwa07::is_cwpsnc_event_desc_Set() const{
    return m_cwpsnc_event_desc_isSet;
}

bool OAICwa07::is_cwpsnc_event_desc_Valid() const{
    return m_cwpsnc_event_desc_isValid;
}

QString OAICwa07::getCwpsncStatus() const {
    return m_cwpsnc_status;
}
void OAICwa07::setCwpsncStatus(const QString &cwpsnc_status) {
    m_cwpsnc_status = cwpsnc_status;
    m_cwpsnc_status_isSet = true;
}

bool OAICwa07::is_cwpsnc_status_Set() const{
    return m_cwpsnc_status_isSet;
}

bool OAICwa07::is_cwpsnc_status_Valid() const{
    return m_cwpsnc_status_isValid;
}

QString OAICwa07::getCwpsncStatusDate() const {
    return m_cwpsnc_status_date;
}
void OAICwa07::setCwpsncStatusDate(const QString &cwpsnc_status_date) {
    m_cwpsnc_status_date = cwpsnc_status_date;
    m_cwpsnc_status_date_isSet = true;
}

bool OAICwa07::is_cwpsnc_status_date_Set() const{
    return m_cwpsnc_status_date_isSet;
}

bool OAICwa07::is_cwpsnc_status_date_Valid() const{
    return m_cwpsnc_status_date_isValid;
}

QString OAICwa07::getCwpState() const {
    return m_cwp_state;
}
void OAICwa07::setCwpState(const QString &cwp_state) {
    m_cwp_state = cwp_state;
    m_cwp_state_isSet = true;
}

bool OAICwa07::is_cwp_state_Set() const{
    return m_cwp_state_isSet;
}

bool OAICwa07::is_cwp_state_Valid() const{
    return m_cwp_state_isValid;
}

QString OAICwa07::getCwpStateDistrict() const {
    return m_cwp_state_district;
}
void OAICwa07::setCwpStateDistrict(const QString &cwp_state_district) {
    m_cwp_state_district = cwp_state_district;
    m_cwp_state_district_isSet = true;
}

bool OAICwa07::is_cwp_state_district_Set() const{
    return m_cwp_state_district_isSet;
}

bool OAICwa07::is_cwp_state_district_Valid() const{
    return m_cwp_state_district_isValid;
}

QString OAICwa07::getCwpStateWaterBodyCode() const {
    return m_cwp_state_water_body_code;
}
void OAICwa07::setCwpStateWaterBodyCode(const QString &cwp_state_water_body_code) {
    m_cwp_state_water_body_code = cwp_state_water_body_code;
    m_cwp_state_water_body_code_isSet = true;
}

bool OAICwa07::is_cwp_state_water_body_code_Set() const{
    return m_cwp_state_water_body_code_isSet;
}

bool OAICwa07::is_cwp_state_water_body_code_Valid() const{
    return m_cwp_state_water_body_code_isValid;
}

QString OAICwa07::getCwpStateWaterBodyName() const {
    return m_cwp_state_water_body_name;
}
void OAICwa07::setCwpStateWaterBodyName(const QString &cwp_state_water_body_name) {
    m_cwp_state_water_body_name = cwp_state_water_body_name;
    m_cwp_state_water_body_name_isSet = true;
}

bool OAICwa07::is_cwp_state_water_body_name_Set() const{
    return m_cwp_state_water_body_name_isSet;
}

bool OAICwa07::is_cwp_state_water_body_name_Valid() const{
    return m_cwp_state_water_body_name_isValid;
}

QString OAICwa07::getCwpStatus() const {
    return m_cwp_status;
}
void OAICwa07::setCwpStatus(const QString &cwp_status) {
    m_cwp_status = cwp_status;
    m_cwp_status_isSet = true;
}

bool OAICwa07::is_cwp_status_Set() const{
    return m_cwp_status_isSet;
}

bool OAICwa07::is_cwp_status_Valid() const{
    return m_cwp_status_isValid;
}

QString OAICwa07::getCwpStreet() const {
    return m_cwp_street;
}
void OAICwa07::setCwpStreet(const QString &cwp_street) {
    m_cwp_street = cwp_street;
    m_cwp_street_isSet = true;
}

bool OAICwa07::is_cwp_street_Set() const{
    return m_cwp_street_isSet;
}

bool OAICwa07::is_cwp_street_Valid() const{
    return m_cwp_street_isValid;
}

QString OAICwa07::getCwptrIbalLandCode() const {
    return m_cwptr_ibal_land_code;
}
void OAICwa07::setCwptrIbalLandCode(const QString &cwptr_ibal_land_code) {
    m_cwptr_ibal_land_code = cwptr_ibal_land_code;
    m_cwptr_ibal_land_code_isSet = true;
}

bool OAICwa07::is_cwptr_ibal_land_code_Set() const{
    return m_cwptr_ibal_land_code_isSet;
}

bool OAICwa07::is_cwptr_ibal_land_code_Valid() const{
    return m_cwptr_ibal_land_code_isValid;
}

QString OAICwa07::getCwpTerminationDate() const {
    return m_cwp_termination_date;
}
void OAICwa07::setCwpTerminationDate(const QString &cwp_termination_date) {
    m_cwp_termination_date = cwp_termination_date;
    m_cwp_termination_date_isSet = true;
}

bool OAICwa07::is_cwp_termination_date_Set() const{
    return m_cwp_termination_date_isSet;
}

bool OAICwa07::is_cwp_termination_date_Valid() const{
    return m_cwp_termination_date_isValid;
}

QString OAICwa07::getCwpTotalDesignFlowNmbr() const {
    return m_cwp_total_design_flow_nmbr;
}
void OAICwa07::setCwpTotalDesignFlowNmbr(const QString &cwp_total_design_flow_nmbr) {
    m_cwp_total_design_flow_nmbr = cwp_total_design_flow_nmbr;
    m_cwp_total_design_flow_nmbr_isSet = true;
}

bool OAICwa07::is_cwp_total_design_flow_nmbr_Set() const{
    return m_cwp_total_design_flow_nmbr_isSet;
}

bool OAICwa07::is_cwp_total_design_flow_nmbr_Valid() const{
    return m_cwp_total_design_flow_nmbr_isValid;
}

QString OAICwa07::getCwpTotalPenalties() const {
    return m_cwp_total_penalties;
}
void OAICwa07::setCwpTotalPenalties(const QString &cwp_total_penalties) {
    m_cwp_total_penalties = cwp_total_penalties;
    m_cwp_total_penalties_isSet = true;
}

bool OAICwa07::is_cwp_total_penalties_Set() const{
    return m_cwp_total_penalties_isSet;
}

bool OAICwa07::is_cwp_total_penalties_Valid() const{
    return m_cwp_total_penalties_isValid;
}

QString OAICwa07::getCwpVersionNmbr() const {
    return m_cwp_version_nmbr;
}
void OAICwa07::setCwpVersionNmbr(const QString &cwp_version_nmbr) {
    m_cwp_version_nmbr = cwp_version_nmbr;
    m_cwp_version_nmbr_isSet = true;
}

bool OAICwa07::is_cwp_version_nmbr_Set() const{
    return m_cwp_version_nmbr_isSet;
}

bool OAICwa07::is_cwp_version_nmbr_Valid() const{
    return m_cwp_version_nmbr_isValid;
}

QString OAICwa07::getCwpVioStatus() const {
    return m_cwp_vio_status;
}
void OAICwa07::setCwpVioStatus(const QString &cwp_vio_status) {
    m_cwp_vio_status = cwp_vio_status;
    m_cwp_vio_status_isSet = true;
}

bool OAICwa07::is_cwp_vio_status_Set() const{
    return m_cwp_vio_status_isSet;
}

bool OAICwa07::is_cwp_vio_status_Valid() const{
    return m_cwp_vio_status_isValid;
}

QString OAICwa07::getCwpViolStatus() const {
    return m_cwp_viol_status;
}
void OAICwa07::setCwpViolStatus(const QString &cwp_viol_status) {
    m_cwp_viol_status = cwp_viol_status;
    m_cwp_viol_status_isSet = true;
}

bool OAICwa07::is_cwp_viol_status_Set() const{
    return m_cwp_viol_status_isSet;
}

bool OAICwa07::is_cwp_viol_status_Valid() const{
    return m_cwp_viol_status_isValid;
}

QString OAICwa07::getCwpZip() const {
    return m_cwp_zip;
}
void OAICwa07::setCwpZip(const QString &cwp_zip) {
    m_cwp_zip = cwp_zip;
    m_cwp_zip_isSet = true;
}

bool OAICwa07::is_cwp_zip_Set() const{
    return m_cwp_zip_isSet;
}

bool OAICwa07::is_cwp_zip_Valid() const{
    return m_cwp_zip_isValid;
}

QString OAICwa07::getCalculatedAccuracyMeters() const {
    return m_calculated_accuracy_meters;
}
void OAICwa07::setCalculatedAccuracyMeters(const QString &calculated_accuracy_meters) {
    m_calculated_accuracy_meters = calculated_accuracy_meters;
    m_calculated_accuracy_meters_isSet = true;
}

bool OAICwa07::is_calculated_accuracy_meters_Set() const{
    return m_calculated_accuracy_meters_isSet;
}

bool OAICwa07::is_calculated_accuracy_meters_Valid() const{
    return m_calculated_accuracy_meters_isValid;
}

QString OAICwa07::getCensusBlockGroup() const {
    return m_census_block_group;
}
void OAICwa07::setCensusBlockGroup(const QString &census_block_group) {
    m_census_block_group = census_block_group;
    m_census_block_group_isSet = true;
}

bool OAICwa07::is_census_block_group_Set() const{
    return m_census_block_group_isSet;
}

bool OAICwa07::is_census_block_group_Valid() const{
    return m_census_block_group_isValid;
}

QString OAICwa07::getCertifiedDate() const {
    return m_certified_date;
}
void OAICwa07::setCertifiedDate(const QString &certified_date) {
    m_certified_date = certified_date;
    m_certified_date_isSet = true;
}

bool OAICwa07::is_certified_date_Set() const{
    return m_certified_date_isSet;
}

bool OAICwa07::is_certified_date_Valid() const{
    return m_certified_date_isValid;
}

QString OAICwa07::getChesapeakeBayFlag() const {
    return m_chesapeake_bay_flag;
}
void OAICwa07::setChesapeakeBayFlag(const QString &chesapeake_bay_flag) {
    m_chesapeake_bay_flag = chesapeake_bay_flag;
    m_chesapeake_bay_flag_isSet = true;
}

bool OAICwa07::is_chesapeake_bay_flag_Set() const{
    return m_chesapeake_bay_flag_isSet;
}

bool OAICwa07::is_chesapeake_bay_flag_Valid() const{
    return m_chesapeake_bay_flag_isValid;
}

QString OAICwa07::getCollectionMethod() const {
    return m_collection_method;
}
void OAICwa07::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAICwa07::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAICwa07::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

QString OAICwa07::getControlMeasure() const {
    return m_control_measure;
}
void OAICwa07::setControlMeasure(const QString &control_measure) {
    m_control_measure = control_measure;
    m_control_measure_isSet = true;
}

bool OAICwa07::is_control_measure_Set() const{
    return m_control_measure_isSet;
}

bool OAICwa07::is_control_measure_Valid() const{
    return m_control_measure_isValid;
}

QString OAICwa07::getControlMeasureSchedule() const {
    return m_control_measure_schedule;
}
void OAICwa07::setControlMeasureSchedule(const QString &control_measure_schedule) {
    m_control_measure_schedule = control_measure_schedule;
    m_control_measure_schedule_isSet = true;
}

bool OAICwa07::is_control_measure_schedule_Set() const{
    return m_control_measure_schedule_isSet;
}

bool OAICwa07::is_control_measure_schedule_Valid() const{
    return m_control_measure_schedule_isValid;
}

QString OAICwa07::getCurrSvFlag() const {
    return m_curr_sv_flag;
}
void OAICwa07::setCurrSvFlag(const QString &curr_sv_flag) {
    m_curr_sv_flag = curr_sv_flag;
    m_curr_sv_flag_isSet = true;
}

bool OAICwa07::is_curr_sv_flag_Set() const{
    return m_curr_sv_flag_isSet;
}

bool OAICwa07::is_curr_sv_flag_Valid() const{
    return m_curr_sv_flag_isValid;
}

QString OAICwa07::getCurrVioFlag() const {
    return m_curr_vio_flag;
}
void OAICwa07::setCurrVioFlag(const QString &curr_vio_flag) {
    m_curr_vio_flag = curr_vio_flag;
    m_curr_vio_flag_isSet = true;
}

bool OAICwa07::is_curr_vio_flag_Set() const{
    return m_curr_vio_flag_isSet;
}

bool OAICwa07::is_curr_vio_flag_Valid() const{
    return m_curr_vio_flag_isValid;
}

QString OAICwa07::getDmrImpairedPoll() const {
    return m_dmr_impaired_poll;
}
void OAICwa07::setDmrImpairedPoll(const QString &dmr_impaired_poll) {
    m_dmr_impaired_poll = dmr_impaired_poll;
    m_dmr_impaired_poll_isSet = true;
}

bool OAICwa07::is_dmr_impaired_poll_Set() const{
    return m_dmr_impaired_poll_isSet;
}

bool OAICwa07::is_dmr_impaired_poll_Valid() const{
    return m_dmr_impaired_poll_isValid;
}

QString OAICwa07::getDmrPounds() const {
    return m_dmr_pounds;
}
void OAICwa07::setDmrPounds(const QString &dmr_pounds) {
    m_dmr_pounds = dmr_pounds;
    m_dmr_pounds_isSet = true;
}

bool OAICwa07::is_dmr_pounds_Set() const{
    return m_dmr_pounds_isSet;
}

bool OAICwa07::is_dmr_pounds_Valid() const{
    return m_dmr_pounds_isValid;
}

QString OAICwa07::getDmrTwpe() const {
    return m_dmr_twpe;
}
void OAICwa07::setDmrTwpe(const QString &dmr_twpe) {
    m_dmr_twpe = dmr_twpe;
    m_dmr_twpe_isSet = true;
}

bool OAICwa07::is_dmr_twpe_Set() const{
    return m_dmr_twpe_isSet;
}

bool OAICwa07::is_dmr_twpe_Valid() const{
    return m_dmr_twpe_isValid;
}

QString OAICwa07::getDschToMs4() const {
    return m_dsch_to_ms4;
}
void OAICwa07::setDschToMs4(const QString &dsch_to_ms4) {
    m_dsch_to_ms4 = dsch_to_ms4;
    m_dsch_to_ms4_isSet = true;
}

bool OAICwa07::is_dsch_to_ms4_Set() const{
    return m_dsch_to_ms4_isSet;
}

bool OAICwa07::is_dsch_to_ms4_Valid() const{
    return m_dsch_to_ms4_isValid;
}

QString OAICwa07::getE90Exceeds1yr() const {
    return m_e90_exceeds1yr;
}
void OAICwa07::setE90Exceeds1yr(const QString &e90_exceeds1yr) {
    m_e90_exceeds1yr = e90_exceeds1yr;
    m_e90_exceeds1yr_isSet = true;
}

bool OAICwa07::is_e90_exceeds1yr_Set() const{
    return m_e90_exceeds1yr_isSet;
}

bool OAICwa07::is_e90_exceeds1yr_Valid() const{
    return m_e90_exceeds1yr_isValid;
}

QString OAICwa07::getE90Exceeds2yr() const {
    return m_e90_exceeds2yr;
}
void OAICwa07::setE90Exceeds2yr(const QString &e90_exceeds2yr) {
    m_e90_exceeds2yr = e90_exceeds2yr;
    m_e90_exceeds2yr_isSet = true;
}

bool OAICwa07::is_e90_exceeds2yr_Set() const{
    return m_e90_exceeds2yr_isSet;
}

bool OAICwa07::is_e90_exceeds2yr_Valid() const{
    return m_e90_exceeds2yr_isValid;
}

QString OAICwa07::getE90Exceeds3yr() const {
    return m_e90_exceeds3yr;
}
void OAICwa07::setE90Exceeds3yr(const QString &e90_exceeds3yr) {
    m_e90_exceeds3yr = e90_exceeds3yr;
    m_e90_exceeds3yr_isSet = true;
}

bool OAICwa07::is_e90_exceeds3yr_Set() const{
    return m_e90_exceeds3yr_isSet;
}

bool OAICwa07::is_e90_exceeds3yr_Valid() const{
    return m_e90_exceeds3yr_isValid;
}

QString OAICwa07::getE90Exceeds4yr() const {
    return m_e90_exceeds4yr;
}
void OAICwa07::setE90Exceeds4yr(const QString &e90_exceeds4yr) {
    m_e90_exceeds4yr = e90_exceeds4yr;
    m_e90_exceeds4yr_isSet = true;
}

bool OAICwa07::is_e90_exceeds4yr_Set() const{
    return m_e90_exceeds4yr_isSet;
}

bool OAICwa07::is_e90_exceeds4yr_Valid() const{
    return m_e90_exceeds4yr_isValid;
}

QString OAICwa07::getE90Exceeds5yr() const {
    return m_e90_exceeds5yr;
}
void OAICwa07::setE90Exceeds5yr(const QString &e90_exceeds5yr) {
    m_e90_exceeds5yr = e90_exceeds5yr;
    m_e90_exceeds5yr_isSet = true;
}

bool OAICwa07::is_e90_exceeds5yr_Set() const{
    return m_e90_exceeds5yr_isSet;
}

bool OAICwa07::is_e90_exceeds5yr_Valid() const{
    return m_e90_exceeds5yr_isValid;
}

QString OAICwa07::getE90Pollutants1yr() const {
    return m_e90_pollutants1yr;
}
void OAICwa07::setE90Pollutants1yr(const QString &e90_pollutants1yr) {
    m_e90_pollutants1yr = e90_pollutants1yr;
    m_e90_pollutants1yr_isSet = true;
}

bool OAICwa07::is_e90_pollutants1yr_Set() const{
    return m_e90_pollutants1yr_isSet;
}

bool OAICwa07::is_e90_pollutants1yr_Valid() const{
    return m_e90_pollutants1yr_isValid;
}

QString OAICwa07::getE90Pollutants2yr() const {
    return m_e90_pollutants2yr;
}
void OAICwa07::setE90Pollutants2yr(const QString &e90_pollutants2yr) {
    m_e90_pollutants2yr = e90_pollutants2yr;
    m_e90_pollutants2yr_isSet = true;
}

bool OAICwa07::is_e90_pollutants2yr_Set() const{
    return m_e90_pollutants2yr_isSet;
}

bool OAICwa07::is_e90_pollutants2yr_Valid() const{
    return m_e90_pollutants2yr_isValid;
}

QString OAICwa07::getE90Pollutants3yr() const {
    return m_e90_pollutants3yr;
}
void OAICwa07::setE90Pollutants3yr(const QString &e90_pollutants3yr) {
    m_e90_pollutants3yr = e90_pollutants3yr;
    m_e90_pollutants3yr_isSet = true;
}

bool OAICwa07::is_e90_pollutants3yr_Set() const{
    return m_e90_pollutants3yr_isSet;
}

bool OAICwa07::is_e90_pollutants3yr_Valid() const{
    return m_e90_pollutants3yr_isValid;
}

QString OAICwa07::getE90Pollutants4yr() const {
    return m_e90_pollutants4yr;
}
void OAICwa07::setE90Pollutants4yr(const QString &e90_pollutants4yr) {
    m_e90_pollutants4yr = e90_pollutants4yr;
    m_e90_pollutants4yr_isSet = true;
}

bool OAICwa07::is_e90_pollutants4yr_Set() const{
    return m_e90_pollutants4yr_isSet;
}

bool OAICwa07::is_e90_pollutants4yr_Valid() const{
    return m_e90_pollutants4yr_isValid;
}

QString OAICwa07::getE90Pollutants5yr() const {
    return m_e90_pollutants5yr;
}
void OAICwa07::setE90Pollutants5yr(const QString &e90_pollutants5yr) {
    m_e90_pollutants5yr = e90_pollutants5yr;
    m_e90_pollutants5yr_isSet = true;
}

bool OAICwa07::is_e90_pollutants5yr_Set() const{
    return m_e90_pollutants5yr_isSet;
}

bool OAICwa07::is_e90_pollutants5yr_Valid() const{
    return m_e90_pollutants5yr_isValid;
}

QString OAICwa07::getEpaSystem() const {
    return m_epa_system;
}
void OAICwa07::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAICwa07::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAICwa07::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAICwa07::getEa5yrFlag() const {
    return m_ea5yr_flag;
}
void OAICwa07::setEa5yrFlag(const QString &ea5yr_flag) {
    m_ea5yr_flag = ea5yr_flag;
    m_ea5yr_flag_isSet = true;
}

bool OAICwa07::is_ea5yr_flag_Set() const{
    return m_ea5yr_flag_isSet;
}

bool OAICwa07::is_ea5yr_flag_Valid() const{
    return m_ea5yr_flag_isValid;
}

QString OAICwa07::getEffChartsFlag() const {
    return m_eff_charts_flag;
}
void OAICwa07::setEffChartsFlag(const QString &eff_charts_flag) {
    m_eff_charts_flag = eff_charts_flag;
    m_eff_charts_flag_isSet = true;
}

bool OAICwa07::is_eff_charts_flag_Set() const{
    return m_eff_charts_flag_isSet;
}

bool OAICwa07::is_eff_charts_flag_Valid() const{
    return m_eff_charts_flag_isValid;
}

QString OAICwa07::getEffExceeds() const {
    return m_eff_exceeds;
}
void OAICwa07::setEffExceeds(const QString &eff_exceeds) {
    m_eff_exceeds = eff_exceeds;
    m_eff_exceeds_isSet = true;
}

bool OAICwa07::is_eff_exceeds_Set() const{
    return m_eff_exceeds_isSet;
}

bool OAICwa07::is_eff_exceeds_Valid() const{
    return m_eff_exceeds_isValid;
}

QString OAICwa07::getEjscreenFlag() const {
    return m_ejscreen_flag;
}
void OAICwa07::setEjscreenFlag(const QString &ejscreen_flag) {
    m_ejscreen_flag = ejscreen_flag;
    m_ejscreen_flag_isSet = true;
}

bool OAICwa07::is_ejscreen_flag_Set() const{
    return m_ejscreen_flag_isSet;
}

bool OAICwa07::is_ejscreen_flag_Valid() const{
    return m_ejscreen_flag_isValid;
}

QString OAICwa07::getEjscreenFlagUs() const {
    return m_ejscreen_flag_us;
}
void OAICwa07::setEjscreenFlagUs(const QString &ejscreen_flag_us) {
    m_ejscreen_flag_us = ejscreen_flag_us;
    m_ejscreen_flag_us_isSet = true;
}

bool OAICwa07::is_ejscreen_flag_us_Set() const{
    return m_ejscreen_flag_us_isSet;
}

bool OAICwa07::is_ejscreen_flag_us_Valid() const{
    return m_ejscreen_flag_us_isValid;
}

QString OAICwa07::getElectrRptWaiverEffDate() const {
    return m_electr_rpt_waiver_eff_date;
}
void OAICwa07::setElectrRptWaiverEffDate(const QString &electr_rpt_waiver_eff_date) {
    m_electr_rpt_waiver_eff_date = electr_rpt_waiver_eff_date;
    m_electr_rpt_waiver_eff_date_isSet = true;
}

bool OAICwa07::is_electr_rpt_waiver_eff_date_Set() const{
    return m_electr_rpt_waiver_eff_date_isSet;
}

bool OAICwa07::is_electr_rpt_waiver_eff_date_Valid() const{
    return m_electr_rpt_waiver_eff_date_isValid;
}

QString OAICwa07::getElectrRptWaiverExpDate() const {
    return m_electr_rpt_waiver_exp_date;
}
void OAICwa07::setElectrRptWaiverExpDate(const QString &electr_rpt_waiver_exp_date) {
    m_electr_rpt_waiver_exp_date = electr_rpt_waiver_exp_date;
    m_electr_rpt_waiver_exp_date_isSet = true;
}

bool OAICwa07::is_electr_rpt_waiver_exp_date_Set() const{
    return m_electr_rpt_waiver_exp_date_isSet;
}

bool OAICwa07::is_electr_rpt_waiver_exp_date_Valid() const{
    return m_electr_rpt_waiver_exp_date_isValid;
}

QString OAICwa07::getElectrRptWaiverTypeCode() const {
    return m_electr_rpt_waiver_type_code;
}
void OAICwa07::setElectrRptWaiverTypeCode(const QString &electr_rpt_waiver_type_code) {
    m_electr_rpt_waiver_type_code = electr_rpt_waiver_type_code;
    m_electr_rpt_waiver_type_code_isSet = true;
}

bool OAICwa07::is_electr_rpt_waiver_type_code_Set() const{
    return m_electr_rpt_waiver_type_code_isSet;
}

bool OAICwa07::is_electr_rpt_waiver_type_code_Valid() const{
    return m_electr_rpt_waiver_type_code_isValid;
}

QString OAICwa07::getElectrRptWaiverTypeDesc() const {
    return m_electr_rpt_waiver_type_desc;
}
void OAICwa07::setElectrRptWaiverTypeDesc(const QString &electr_rpt_waiver_type_desc) {
    m_electr_rpt_waiver_type_desc = electr_rpt_waiver_type_desc;
    m_electr_rpt_waiver_type_desc_isSet = true;
}

bool OAICwa07::is_electr_rpt_waiver_type_desc_Set() const{
    return m_electr_rpt_waiver_type_desc_isSet;
}

bool OAICwa07::is_electr_rpt_waiver_type_desc_Valid() const{
    return m_electr_rpt_waiver_type_desc_isValid;
}

QString OAICwa07::getElectrSubmissionTypeCode() const {
    return m_electr_submission_type_code;
}
void OAICwa07::setElectrSubmissionTypeCode(const QString &electr_submission_type_code) {
    m_electr_submission_type_code = electr_submission_type_code;
    m_electr_submission_type_code_isSet = true;
}

bool OAICwa07::is_electr_submission_type_code_Set() const{
    return m_electr_submission_type_code_isSet;
}

bool OAICwa07::is_electr_submission_type_code_Valid() const{
    return m_electr_submission_type_code_isValid;
}

QString OAICwa07::getElectrSubmissionTypeDesc() const {
    return m_electr_submission_type_desc;
}
void OAICwa07::setElectrSubmissionTypeDesc(const QString &electr_submission_type_desc) {
    m_electr_submission_type_desc = electr_submission_type_desc;
    m_electr_submission_type_desc_isSet = true;
}

bool OAICwa07::is_electr_submission_type_desc_Set() const{
    return m_electr_submission_type_desc_isSet;
}

bool OAICwa07::is_electr_submission_type_desc_Valid() const{
    return m_electr_submission_type_desc_isValid;
}

QString OAICwa07::getExposedActivity() const {
    return m_exposed_activity;
}
void OAICwa07::setExposedActivity(const QString &exposed_activity) {
    m_exposed_activity = exposed_activity;
    m_exposed_activity_isSet = true;
}

bool OAICwa07::is_exposed_activity_Set() const{
    return m_exposed_activity_isSet;
}

bool OAICwa07::is_exposed_activity_Valid() const{
    return m_exposed_activity_isValid;
}

QString OAICwa07::getFacCountyName() const {
    return m_fac_county_name;
}
void OAICwa07::setFacCountyName(const QString &fac_county_name) {
    m_fac_county_name = fac_county_name;
    m_fac_county_name_isSet = true;
}

bool OAICwa07::is_fac_county_name_Set() const{
    return m_fac_county_name_isSet;
}

bool OAICwa07::is_fac_county_name_Valid() const{
    return m_fac_county_name_isValid;
}

QString OAICwa07::getFacDerivedHuc() const {
    return m_fac_derived_huc;
}
void OAICwa07::setFacDerivedHuc(const QString &fac_derived_huc) {
    m_fac_derived_huc = fac_derived_huc;
    m_fac_derived_huc_isSet = true;
}

bool OAICwa07::is_fac_derived_huc_Set() const{
    return m_fac_derived_huc_isSet;
}

bool OAICwa07::is_fac_derived_huc_Valid() const{
    return m_fac_derived_huc_isValid;
}

QString OAICwa07::getFacDerivedTrIbes() const {
    return m_fac_derived_tr_ibes;
}
void OAICwa07::setFacDerivedTrIbes(const QString &fac_derived_tr_ibes) {
    m_fac_derived_tr_ibes = fac_derived_tr_ibes;
    m_fac_derived_tr_ibes_isSet = true;
}

bool OAICwa07::is_fac_derived_tr_ibes_Set() const{
    return m_fac_derived_tr_ibes_isSet;
}

bool OAICwa07::is_fac_derived_tr_ibes_Valid() const{
    return m_fac_derived_tr_ibes_isValid;
}

QString OAICwa07::getFacDerivedWbd() const {
    return m_fac_derived_wbd;
}
void OAICwa07::setFacDerivedWbd(const QString &fac_derived_wbd) {
    m_fac_derived_wbd = fac_derived_wbd;
    m_fac_derived_wbd_isSet = true;
}

bool OAICwa07::is_fac_derived_wbd_Set() const{
    return m_fac_derived_wbd_isSet;
}

bool OAICwa07::is_fac_derived_wbd_Valid() const{
    return m_fac_derived_wbd_isValid;
}

QString OAICwa07::getFacDerivedWbdhu8() const {
    return m_fac_derived_wbdhu8;
}
void OAICwa07::setFacDerivedWbdhu8(const QString &fac_derived_wbdhu8) {
    m_fac_derived_wbdhu8 = fac_derived_wbdhu8;
    m_fac_derived_wbdhu8_isSet = true;
}

bool OAICwa07::is_fac_derived_wbdhu8_Set() const{
    return m_fac_derived_wbdhu8_isSet;
}

bool OAICwa07::is_fac_derived_wbdhu8_Valid() const{
    return m_fac_derived_wbdhu8_isValid;
}

QString OAICwa07::getFacDerivedWbdhu8Name() const {
    return m_fac_derived_wbdhu8_name;
}
void OAICwa07::setFacDerivedWbdhu8Name(const QString &fac_derived_wbdhu8_name) {
    m_fac_derived_wbdhu8_name = fac_derived_wbdhu8_name;
    m_fac_derived_wbdhu8_name_isSet = true;
}

bool OAICwa07::is_fac_derived_wbdhu8_name_Set() const{
    return m_fac_derived_wbdhu8_name_isSet;
}

bool OAICwa07::is_fac_derived_wbdhu8_name_Valid() const{
    return m_fac_derived_wbdhu8_name_isValid;
}

QString OAICwa07::getFacDerivedWbdName() const {
    return m_fac_derived_wbd_name;
}
void OAICwa07::setFacDerivedWbdName(const QString &fac_derived_wbd_name) {
    m_fac_derived_wbd_name = fac_derived_wbd_name;
    m_fac_derived_wbd_name_isSet = true;
}

bool OAICwa07::is_fac_derived_wbd_name_Set() const{
    return m_fac_derived_wbd_name_isSet;
}

bool OAICwa07::is_fac_derived_wbd_name_Valid() const{
    return m_fac_derived_wbd_name_isValid;
}

QString OAICwa07::getFacFipsCode() const {
    return m_fac_fips_code;
}
void OAICwa07::setFacFipsCode(const QString &fac_fips_code) {
    m_fac_fips_code = fac_fips_code;
    m_fac_fips_code_isSet = true;
}

bool OAICwa07::is_fac_fips_code_Set() const{
    return m_fac_fips_code_isSet;
}

bool OAICwa07::is_fac_fips_code_Valid() const{
    return m_fac_fips_code_isValid;
}

QString OAICwa07::getFacFederalAgencyCode() const {
    return m_fac_federal_agency_code;
}
void OAICwa07::setFacFederalAgencyCode(const QString &fac_federal_agency_code) {
    m_fac_federal_agency_code = fac_federal_agency_code;
    m_fac_federal_agency_code_isSet = true;
}

bool OAICwa07::is_fac_federal_agency_code_Set() const{
    return m_fac_federal_agency_code_isSet;
}

bool OAICwa07::is_fac_federal_agency_code_Valid() const{
    return m_fac_federal_agency_code_isValid;
}

QString OAICwa07::getFacFederalAgencyName() const {
    return m_fac_federal_agency_name;
}
void OAICwa07::setFacFederalAgencyName(const QString &fac_federal_agency_name) {
    m_fac_federal_agency_name = fac_federal_agency_name;
    m_fac_federal_agency_name_isSet = true;
}

bool OAICwa07::is_fac_federal_agency_name_Set() const{
    return m_fac_federal_agency_name_isSet;
}

bool OAICwa07::is_fac_federal_agency_name_Valid() const{
    return m_fac_federal_agency_name_isValid;
}

QString OAICwa07::getFacIndianCntryFlg() const {
    return m_fac_indian_cntry_flg;
}
void OAICwa07::setFacIndianCntryFlg(const QString &fac_indian_cntry_flg) {
    m_fac_indian_cntry_flg = fac_indian_cntry_flg;
    m_fac_indian_cntry_flg_isSet = true;
}

bool OAICwa07::is_fac_indian_cntry_flg_Set() const{
    return m_fac_indian_cntry_flg_isSet;
}

bool OAICwa07::is_fac_indian_cntry_flg_Valid() const{
    return m_fac_indian_cntry_flg_isValid;
}

QString OAICwa07::getFacIndianSpatialFlg() const {
    return m_fac_indian_spatial_flg;
}
void OAICwa07::setFacIndianSpatialFlg(const QString &fac_indian_spatial_flg) {
    m_fac_indian_spatial_flg = fac_indian_spatial_flg;
    m_fac_indian_spatial_flg_isSet = true;
}

bool OAICwa07::is_fac_indian_spatial_flg_Set() const{
    return m_fac_indian_spatial_flg_isSet;
}

bool OAICwa07::is_fac_indian_spatial_flg_Valid() const{
    return m_fac_indian_spatial_flg_isValid;
}

QString OAICwa07::getFacLat() const {
    return m_fac_lat;
}
void OAICwa07::setFacLat(const QString &fac_lat) {
    m_fac_lat = fac_lat;
    m_fac_lat_isSet = true;
}

bool OAICwa07::is_fac_lat_Set() const{
    return m_fac_lat_isSet;
}

bool OAICwa07::is_fac_lat_Valid() const{
    return m_fac_lat_isValid;
}

QString OAICwa07::getFacLong() const {
    return m_fac_long;
}
void OAICwa07::setFacLong(const QString &fac_long) {
    m_fac_long = fac_long;
    m_fac_long_isSet = true;
}

bool OAICwa07::is_fac_long_Set() const{
    return m_fac_long_isSet;
}

bool OAICwa07::is_fac_long_Valid() const{
    return m_fac_long_isValid;
}

QString OAICwa07::getFacMapFlg() const {
    return m_fac_map_flg;
}
void OAICwa07::setFacMapFlg(const QString &fac_map_flg) {
    m_fac_map_flg = fac_map_flg;
    m_fac_map_flg_isSet = true;
}

bool OAICwa07::is_fac_map_flg_Set() const{
    return m_fac_map_flg_isSet;
}

bool OAICwa07::is_fac_map_flg_Valid() const{
    return m_fac_map_flg_isValid;
}

QString OAICwa07::getFacMapIcon() const {
    return m_fac_map_icon;
}
void OAICwa07::setFacMapIcon(const QString &fac_map_icon) {
    m_fac_map_icon = fac_map_icon;
    m_fac_map_icon_isSet = true;
}

bool OAICwa07::is_fac_map_icon_Set() const{
    return m_fac_map_icon_isSet;
}

bool OAICwa07::is_fac_map_icon_Valid() const{
    return m_fac_map_icon_isValid;
}

QString OAICwa07::getFacPercentMinority() const {
    return m_fac_percent_minority;
}
void OAICwa07::setFacPercentMinority(const QString &fac_percent_minority) {
    m_fac_percent_minority = fac_percent_minority;
    m_fac_percent_minority_isSet = true;
}

bool OAICwa07::is_fac_percent_minority_Set() const{
    return m_fac_percent_minority_isSet;
}

bool OAICwa07::is_fac_percent_minority_Valid() const{
    return m_fac_percent_minority_isValid;
}

QString OAICwa07::getFacPopDen() const {
    return m_fac_pop_den;
}
void OAICwa07::setFacPopDen(const QString &fac_pop_den) {
    m_fac_pop_den = fac_pop_den;
    m_fac_pop_den_isSet = true;
}

bool OAICwa07::is_fac_pop_den_Set() const{
    return m_fac_pop_den_isSet;
}

bool OAICwa07::is_fac_pop_den_Valid() const{
    return m_fac_pop_den_isValid;
}

QString OAICwa07::getFacStdCountyName() const {
    return m_fac_std_county_name;
}
void OAICwa07::setFacStdCountyName(const QString &fac_std_county_name) {
    m_fac_std_county_name = fac_std_county_name;
    m_fac_std_county_name_isSet = true;
}

bool OAICwa07::is_fac_std_county_name_Set() const{
    return m_fac_std_county_name_isSet;
}

bool OAICwa07::is_fac_std_county_name_Valid() const{
    return m_fac_std_county_name_isValid;
}

QString OAICwa07::getFacTriPotwTrans() const {
    return m_fac_tri_potw_trans;
}
void OAICwa07::setFacTriPotwTrans(const QString &fac_tri_potw_trans) {
    m_fac_tri_potw_trans = fac_tri_potw_trans;
    m_fac_tri_potw_trans_isSet = true;
}

bool OAICwa07::is_fac_tri_potw_trans_Set() const{
    return m_fac_tri_potw_trans_isSet;
}

bool OAICwa07::is_fac_tri_potw_trans_Valid() const{
    return m_fac_tri_potw_trans_isValid;
}

QString OAICwa07::getFacTriReporter() const {
    return m_fac_tri_reporter;
}
void OAICwa07::setFacTriReporter(const QString &fac_tri_reporter) {
    m_fac_tri_reporter = fac_tri_reporter;
    m_fac_tri_reporter_isSet = true;
}

bool OAICwa07::is_fac_tri_reporter_Set() const{
    return m_fac_tri_reporter_isSet;
}

bool OAICwa07::is_fac_tri_reporter_Valid() const{
    return m_fac_tri_reporter_isValid;
}

QString OAICwa07::getFacTriswRel() const {
    return m_fac_trisw_rel;
}
void OAICwa07::setFacTriswRel(const QString &fac_trisw_rel) {
    m_fac_trisw_rel = fac_trisw_rel;
    m_fac_trisw_rel_isSet = true;
}

bool OAICwa07::is_fac_trisw_rel_Set() const{
    return m_fac_trisw_rel_isSet;
}

bool OAICwa07::is_fac_trisw_rel_Valid() const{
    return m_fac_trisw_rel_isValid;
}

QString OAICwa07::getFacUsMexBorderFlg() const {
    return m_fac_us_mex_border_flg;
}
void OAICwa07::setFacUsMexBorderFlg(const QString &fac_us_mex_border_flg) {
    m_fac_us_mex_border_flg = fac_us_mex_border_flg;
    m_fac_us_mex_border_flg_isSet = true;
}

bool OAICwa07::is_fac_us_mex_border_flg_Set() const{
    return m_fac_us_mex_border_flg_isSet;
}

bool OAICwa07::is_fac_us_mex_border_flg_Valid() const{
    return m_fac_us_mex_border_flg_isValid;
}

QString OAICwa07::getHistoricCriterionCode() const {
    return m_historic_criterion_code;
}
void OAICwa07::setHistoricCriterionCode(const QString &historic_criterion_code) {
    m_historic_criterion_code = historic_criterion_code;
    m_historic_criterion_code_isSet = true;
}

bool OAICwa07::is_historic_criterion_code_Set() const{
    return m_historic_criterion_code_isSet;
}

bool OAICwa07::is_historic_criterion_code_Valid() const{
    return m_historic_criterion_code_isValid;
}

QString OAICwa07::getIndswFlag() const {
    return m_indsw_flag;
}
void OAICwa07::setIndswFlag(const QString &indsw_flag) {
    m_indsw_flag = indsw_flag;
    m_indsw_flag_isSet = true;
}

bool OAICwa07::is_indsw_flag_Set() const{
    return m_indsw_flag_isSet;
}

bool OAICwa07::is_indsw_flag_Valid() const{
    return m_indsw_flag_isValid;
}

QString OAICwa07::getInfea5yrFlag() const {
    return m_infea5yr_flag;
}
void OAICwa07::setInfea5yrFlag(const QString &infea5yr_flag) {
    m_infea5yr_flag = infea5yr_flag;
    m_infea5yr_flag_isSet = true;
}

bool OAICwa07::is_infea5yr_flag_Set() const{
    return m_infea5yr_flag_isSet;
}

bool OAICwa07::is_infea5yr_flag_Valid() const{
    return m_infea5yr_flag_isValid;
}

QString OAICwa07::getInsp5yrFlag() const {
    return m_insp5yr_flag;
}
void OAICwa07::setInsp5yrFlag(const QString &insp5yr_flag) {
    m_insp5yr_flag = insp5yr_flag;
    m_insp5yr_flag_isSet = true;
}

bool OAICwa07::is_insp5yr_flag_Set() const{
    return m_insp5yr_flag_isSet;
}

bool OAICwa07::is_insp5yr_flag_Valid() const{
    return m_insp5yr_flag_isValid;
}

QString OAICwa07::getInspDef5yrCnt() const {
    return m_insp_def5yr_cnt;
}
void OAICwa07::setInspDef5yrCnt(const QString &insp_def5yr_cnt) {
    m_insp_def5yr_cnt = insp_def5yr_cnt;
    m_insp_def5yr_cnt_isSet = true;
}

bool OAICwa07::is_insp_def5yr_cnt_Set() const{
    return m_insp_def5yr_cnt_isSet;
}

bool OAICwa07::is_insp_def5yr_cnt_Valid() const{
    return m_insp_def5yr_cnt_isValid;
}

QString OAICwa07::getIssuingAgency() const {
    return m_issuing_agency;
}
void OAICwa07::setIssuingAgency(const QString &issuing_agency) {
    m_issuing_agency = issuing_agency;
    m_issuing_agency_isSet = true;
}

bool OAICwa07::is_issuing_agency_Set() const{
    return m_issuing_agency_isSet;
}

bool OAICwa07::is_issuing_agency_Valid() const{
    return m_issuing_agency_isValid;
}

QString OAICwa07::getLastDmrValueRcvdDate() const {
    return m_last_dmr_value_rcvd_date;
}
void OAICwa07::setLastDmrValueRcvdDate(const QString &last_dmr_value_rcvd_date) {
    m_last_dmr_value_rcvd_date = last_dmr_value_rcvd_date;
    m_last_dmr_value_rcvd_date_isSet = true;
}

bool OAICwa07::is_last_dmr_value_rcvd_date_Set() const{
    return m_last_dmr_value_rcvd_date_isSet;
}

bool OAICwa07::is_last_dmr_value_rcvd_date_Valid() const{
    return m_last_dmr_value_rcvd_date_isValid;
}

QString OAICwa07::getLimPollutant() const {
    return m_lim_pollutant;
}
void OAICwa07::setLimPollutant(const QString &lim_pollutant) {
    m_lim_pollutant = lim_pollutant;
    m_lim_pollutant_isSet = true;
}

bool OAICwa07::is_lim_pollutant_Set() const{
    return m_lim_pollutant_isSet;
}

bool OAICwa07::is_lim_pollutant_Valid() const{
    return m_lim_pollutant_isValid;
}

QString OAICwa07::getLower48() const {
    return m_lower48;
}
void OAICwa07::setLower48(const QString &lower48) {
    m_lower48 = lower48;
    m_lower48_isSet = true;
}

bool OAICwa07::is_lower48_Set() const{
    return m_lower48_isSet;
}

bool OAICwa07::is_lower48_Valid() const{
    return m_lower48_isValid;
}

QString OAICwa07::getMap() const {
    return m_map;
}
void OAICwa07::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAICwa07::is_map_Set() const{
    return m_map_isSet;
}

bool OAICwa07::is_map_Valid() const{
    return m_map_isValid;
}

QString OAICwa07::getMasterExternalPermitNmbr() const {
    return m_master_external_permit_nmbr;
}
void OAICwa07::setMasterExternalPermitNmbr(const QString &master_external_permit_nmbr) {
    m_master_external_permit_nmbr = master_external_permit_nmbr;
    m_master_external_permit_nmbr_isSet = true;
}

bool OAICwa07::is_master_external_permit_nmbr_Set() const{
    return m_master_external_permit_nmbr_isSet;
}

bool OAICwa07::is_master_external_permit_nmbr_Valid() const{
    return m_master_external_permit_nmbr_isValid;
}

QString OAICwa07::getMaxPctileUs() const {
    return m_max_pctile_us;
}
void OAICwa07::setMaxPctileUs(const QString &max_pctile_us) {
    m_max_pctile_us = max_pctile_us;
    m_max_pctile_us_isSet = true;
}

bool OAICwa07::is_max_pctile_us_Set() const{
    return m_max_pctile_us_isSet;
}

bool OAICwa07::is_max_pctile_us_Valid() const{
    return m_max_pctile_us_isValid;
}

QString OAICwa07::getMaxScore() const {
    return m_max_score;
}
void OAICwa07::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAICwa07::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAICwa07::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAICwa07::getMissDmrQtrs() const {
    return m_miss_dmr_qtrs;
}
void OAICwa07::setMissDmrQtrs(const QString &miss_dmr_qtrs) {
    m_miss_dmr_qtrs = miss_dmr_qtrs;
    m_miss_dmr_qtrs_isSet = true;
}

bool OAICwa07::is_miss_dmr_qtrs_Set() const{
    return m_miss_dmr_qtrs_isSet;
}

bool OAICwa07::is_miss_dmr_qtrs_Valid() const{
    return m_miss_dmr_qtrs_isValid;
}

QString OAICwa07::getMsgpCorrectiveActionSmmry() const {
    return m_msgp_corrective_action_smmry;
}
void OAICwa07::setMsgpCorrectiveActionSmmry(const QString &msgp_corrective_action_smmry) {
    m_msgp_corrective_action_smmry = msgp_corrective_action_smmry;
    m_msgp_corrective_action_smmry_isSet = true;
}

bool OAICwa07::is_msgp_corrective_action_smmry_Set() const{
    return m_msgp_corrective_action_smmry_isSet;
}

bool OAICwa07::is_msgp_corrective_action_smmry_Valid() const{
    return m_msgp_corrective_action_smmry_isValid;
}

QString OAICwa07::getMsgpFacilityInspctnSmmry() const {
    return m_msgp_facility_inspctn_smmry;
}
void OAICwa07::setMsgpFacilityInspctnSmmry(const QString &msgp_facility_inspctn_smmry) {
    m_msgp_facility_inspctn_smmry = msgp_facility_inspctn_smmry;
    m_msgp_facility_inspctn_smmry_isSet = true;
}

bool OAICwa07::is_msgp_facility_inspctn_smmry_Set() const{
    return m_msgp_facility_inspctn_smmry_isSet;
}

bool OAICwa07::is_msgp_facility_inspctn_smmry_Valid() const{
    return m_msgp_facility_inspctn_smmry_isValid;
}

QString OAICwa07::getMsgpLastReportYear() const {
    return m_msgp_last_report_year;
}
void OAICwa07::setMsgpLastReportYear(const QString &msgp_last_report_year) {
    m_msgp_last_report_year = msgp_last_report_year;
    m_msgp_last_report_year_isSet = true;
}

bool OAICwa07::is_msgp_last_report_year_Set() const{
    return m_msgp_last_report_year_isSet;
}

bool OAICwa07::is_msgp_last_report_year_Valid() const{
    return m_msgp_last_report_year_isValid;
}

QString OAICwa07::getMsgpNoFurtherRdctnRtnle() const {
    return m_msgp_no_further_rdctn_rtnle;
}
void OAICwa07::setMsgpNoFurtherRdctnRtnle(const QString &msgp_no_further_rdctn_rtnle) {
    m_msgp_no_further_rdctn_rtnle = msgp_no_further_rdctn_rtnle;
    m_msgp_no_further_rdctn_rtnle_isSet = true;
}

bool OAICwa07::is_msgp_no_further_rdctn_rtnle_Set() const{
    return m_msgp_no_further_rdctn_rtnle_isSet;
}

bool OAICwa07::is_msgp_no_further_rdctn_rtnle_Valid() const{
    return m_msgp_no_further_rdctn_rtnle_isValid;
}

QString OAICwa07::getMsgpPermitType() const {
    return m_msgp_permit_type;
}
void OAICwa07::setMsgpPermitType(const QString &msgp_permit_type) {
    m_msgp_permit_type = msgp_permit_type;
    m_msgp_permit_type_isSet = true;
}

bool OAICwa07::is_msgp_permit_type_Set() const{
    return m_msgp_permit_type_isSet;
}

bool OAICwa07::is_msgp_permit_type_Valid() const{
    return m_msgp_permit_type_isValid;
}

QString OAICwa07::getMsgpVisualAssessmentSmmry() const {
    return m_msgp_visual_assessment_smmry;
}
void OAICwa07::setMsgpVisualAssessmentSmmry(const QString &msgp_visual_assessment_smmry) {
    m_msgp_visual_assessment_smmry = msgp_visual_assessment_smmry;
    m_msgp_visual_assessment_smmry_isSet = true;
}

bool OAICwa07::is_msgp_visual_assessment_smmry_Set() const{
    return m_msgp_visual_assessment_smmry_isSet;
}

bool OAICwa07::is_msgp_visual_assessment_smmry_Valid() const{
    return m_msgp_visual_assessment_smmry_isValid;
}

QString OAICwa07::getNpdesDataGroups() const {
    return m_npdes_data_groups;
}
void OAICwa07::setNpdesDataGroups(const QString &npdes_data_groups) {
    m_npdes_data_groups = npdes_data_groups;
    m_npdes_data_groups_isSet = true;
}

bool OAICwa07::is_npdes_data_groups_Set() const{
    return m_npdes_data_groups_isSet;
}

bool OAICwa07::is_npdes_data_groups_Valid() const{
    return m_npdes_data_groups_isValid;
}

QString OAICwa07::getNpdesDataGroupsDescs() const {
    return m_npdes_data_groups_descs;
}
void OAICwa07::setNpdesDataGroupsDescs(const QString &npdes_data_groups_descs) {
    m_npdes_data_groups_descs = npdes_data_groups_descs;
    m_npdes_data_groups_descs_isSet = true;
}

bool OAICwa07::is_npdes_data_groups_descs_Set() const{
    return m_npdes_data_groups_descs_isSet;
}

bool OAICwa07::is_npdes_data_groups_descs_Valid() const{
    return m_npdes_data_groups_descs_isValid;
}

QString OAICwa07::getNpdesids() const {
    return m_npdesids;
}
void OAICwa07::setNpdesids(const QString &npdesids) {
    m_npdesids = npdesids;
    m_npdesids_isSet = true;
}

bool OAICwa07::is_npdesids_Set() const{
    return m_npdesids_isSet;
}

bool OAICwa07::is_npdesids_Valid() const{
    return m_npdesids_isValid;
}

QString OAICwa07::getObjectId() const {
    return m_object_id;
}
void OAICwa07::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICwa07::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICwa07::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAICwa07::getOtherPermitIds() const {
    return m_other_permit_ids;
}
void OAICwa07::setOtherPermitIds(const QString &other_permit_ids) {
    m_other_permit_ids = other_permit_ids;
    m_other_permit_ids_isSet = true;
}

bool OAICwa07::is_other_permit_ids_Set() const{
    return m_other_permit_ids_isSet;
}

bool OAICwa07::is_other_permit_ids_Valid() const{
    return m_other_permit_ids_isValid;
}

QString OAICwa07::getOver80CountUs() const {
    return m_over80_count_us;
}
void OAICwa07::setOver80CountUs(const QString &over80_count_us) {
    m_over80_count_us = over80_count_us;
    m_over80_count_us_isSet = true;
}

bool OAICwa07::is_over80_count_us_Set() const{
    return m_over80_count_us_isSet;
}

bool OAICwa07::is_over80_count_us_Valid() const{
    return m_over80_count_us_isValid;
}

QString OAICwa07::getPastCalYrAverageFlow() const {
    return m_past_cal_yr_average_flow;
}
void OAICwa07::setPastCalYrAverageFlow(const QString &past_cal_yr_average_flow) {
    m_past_cal_yr_average_flow = past_cal_yr_average_flow;
    m_past_cal_yr_average_flow_isSet = true;
}

bool OAICwa07::is_past_cal_yr_average_flow_Set() const{
    return m_past_cal_yr_average_flow_isSet;
}

bool OAICwa07::is_past_cal_yr_average_flow_Valid() const{
    return m_past_cal_yr_average_flow_isValid;
}

QString OAICwa07::getPastCalYrConvPolOvrLmt() const {
    return m_past_cal_yr_conv_pol_ovr_lmt;
}
void OAICwa07::setPastCalYrConvPolOvrLmt(const QString &past_cal_yr_conv_pol_ovr_lmt) {
    m_past_cal_yr_conv_pol_ovr_lmt = past_cal_yr_conv_pol_ovr_lmt;
    m_past_cal_yr_conv_pol_ovr_lmt_isSet = true;
}

bool OAICwa07::is_past_cal_yr_conv_pol_ovr_lmt_Set() const{
    return m_past_cal_yr_conv_pol_ovr_lmt_isSet;
}

bool OAICwa07::is_past_cal_yr_conv_pol_ovr_lmt_Valid() const{
    return m_past_cal_yr_conv_pol_ovr_lmt_isValid;
}

QString OAICwa07::getPastCalYrConvPollutants() const {
    return m_past_cal_yr_conv_pollutants;
}
void OAICwa07::setPastCalYrConvPollutants(const QString &past_cal_yr_conv_pollutants) {
    m_past_cal_yr_conv_pollutants = past_cal_yr_conv_pollutants;
    m_past_cal_yr_conv_pollutants_isSet = true;
}

bool OAICwa07::is_past_cal_yr_conv_pollutants_Set() const{
    return m_past_cal_yr_conv_pollutants_isSet;
}

bool OAICwa07::is_past_cal_yr_conv_pollutants_Valid() const{
    return m_past_cal_yr_conv_pollutants_isValid;
}

QString OAICwa07::getPastCalYrToxicPolOvrLmt() const {
    return m_past_cal_yr_toxic_pol_ovr_lmt;
}
void OAICwa07::setPastCalYrToxicPolOvrLmt(const QString &past_cal_yr_toxic_pol_ovr_lmt) {
    m_past_cal_yr_toxic_pol_ovr_lmt = past_cal_yr_toxic_pol_ovr_lmt;
    m_past_cal_yr_toxic_pol_ovr_lmt_isSet = true;
}

bool OAICwa07::is_past_cal_yr_toxic_pol_ovr_lmt_Set() const{
    return m_past_cal_yr_toxic_pol_ovr_lmt_isSet;
}

bool OAICwa07::is_past_cal_yr_toxic_pol_ovr_lmt_Valid() const{
    return m_past_cal_yr_toxic_pol_ovr_lmt_isValid;
}

QString OAICwa07::getPastCalYrToxicPollutants() const {
    return m_past_cal_yr_toxic_pollutants;
}
void OAICwa07::setPastCalYrToxicPollutants(const QString &past_cal_yr_toxic_pollutants) {
    m_past_cal_yr_toxic_pollutants = past_cal_yr_toxic_pollutants;
    m_past_cal_yr_toxic_pollutants_isSet = true;
}

bool OAICwa07::is_past_cal_yr_toxic_pollutants_Set() const{
    return m_past_cal_yr_toxic_pollutants_isSet;
}

bool OAICwa07::is_past_cal_yr_toxic_pollutants_Valid() const{
    return m_past_cal_yr_toxic_pollutants_isValid;
}

QString OAICwa07::getPctileCancerUs() const {
    return m_pctile_cancer_us;
}
void OAICwa07::setPctileCancerUs(const QString &pctile_cancer_us) {
    m_pctile_cancer_us = pctile_cancer_us;
    m_pctile_cancer_us_isSet = true;
}

bool OAICwa07::is_pctile_cancer_us_Set() const{
    return m_pctile_cancer_us_isSet;
}

bool OAICwa07::is_pctile_cancer_us_Valid() const{
    return m_pctile_cancer_us_isValid;
}

QString OAICwa07::getPctileDpmUs() const {
    return m_pctile_dpm_us;
}
void OAICwa07::setPctileDpmUs(const QString &pctile_dpm_us) {
    m_pctile_dpm_us = pctile_dpm_us;
    m_pctile_dpm_us_isSet = true;
}

bool OAICwa07::is_pctile_dpm_us_Set() const{
    return m_pctile_dpm_us_isSet;
}

bool OAICwa07::is_pctile_dpm_us_Valid() const{
    return m_pctile_dpm_us_isValid;
}

QString OAICwa07::getPctileO3Us() const {
    return m_pctile_o3_us;
}
void OAICwa07::setPctileO3Us(const QString &pctile_o3_us) {
    m_pctile_o3_us = pctile_o3_us;
    m_pctile_o3_us_isSet = true;
}

bool OAICwa07::is_pctile_o3_us_Set() const{
    return m_pctile_o3_us_isSet;
}

bool OAICwa07::is_pctile_o3_us_Valid() const{
    return m_pctile_o3_us_isValid;
}

QString OAICwa07::getPctilePctpre1960Us() const {
    return m_pctile_pctpre1960_us;
}
void OAICwa07::setPctilePctpre1960Us(const QString &pctile_pctpre1960_us) {
    m_pctile_pctpre1960_us = pctile_pctpre1960_us;
    m_pctile_pctpre1960_us_isSet = true;
}

bool OAICwa07::is_pctile_pctpre1960_us_Set() const{
    return m_pctile_pctpre1960_us_isSet;
}

bool OAICwa07::is_pctile_pctpre1960_us_Valid() const{
    return m_pctile_pctpre1960_us_isValid;
}

QString OAICwa07::getPctilePmUs() const {
    return m_pctile_pm_us;
}
void OAICwa07::setPctilePmUs(const QString &pctile_pm_us) {
    m_pctile_pm_us = pctile_pm_us;
    m_pctile_pm_us_isSet = true;
}

bool OAICwa07::is_pctile_pm_us_Set() const{
    return m_pctile_pm_us_isSet;
}

bool OAICwa07::is_pctile_pm_us_Valid() const{
    return m_pctile_pm_us_isValid;
}

QString OAICwa07::getPctileProximityNpdesus() const {
    return m_pctile_proximity_npdesus;
}
void OAICwa07::setPctileProximityNpdesus(const QString &pctile_proximity_npdesus) {
    m_pctile_proximity_npdesus = pctile_proximity_npdesus;
    m_pctile_proximity_npdesus_isSet = true;
}

bool OAICwa07::is_pctile_proximity_npdesus_Set() const{
    return m_pctile_proximity_npdesus_isSet;
}

bool OAICwa07::is_pctile_proximity_npdesus_Valid() const{
    return m_pctile_proximity_npdesus_isValid;
}

QString OAICwa07::getPctileProximityNplUs() const {
    return m_pctile_proximity_npl_us;
}
void OAICwa07::setPctileProximityNplUs(const QString &pctile_proximity_npl_us) {
    m_pctile_proximity_npl_us = pctile_proximity_npl_us;
    m_pctile_proximity_npl_us_isSet = true;
}

bool OAICwa07::is_pctile_proximity_npl_us_Set() const{
    return m_pctile_proximity_npl_us_isSet;
}

bool OAICwa07::is_pctile_proximity_npl_us_Valid() const{
    return m_pctile_proximity_npl_us_isValid;
}

QString OAICwa07::getPctileProximityRmpUs() const {
    return m_pctile_proximity_rmp_us;
}
void OAICwa07::setPctileProximityRmpUs(const QString &pctile_proximity_rmp_us) {
    m_pctile_proximity_rmp_us = pctile_proximity_rmp_us;
    m_pctile_proximity_rmp_us_isSet = true;
}

bool OAICwa07::is_pctile_proximity_rmp_us_Set() const{
    return m_pctile_proximity_rmp_us_isSet;
}

bool OAICwa07::is_pctile_proximity_rmp_us_Valid() const{
    return m_pctile_proximity_rmp_us_isValid;
}

QString OAICwa07::getPctileProximityTsdfUs() const {
    return m_pctile_proximity_tsdf_us;
}
void OAICwa07::setPctileProximityTsdfUs(const QString &pctile_proximity_tsdf_us) {
    m_pctile_proximity_tsdf_us = pctile_proximity_tsdf_us;
    m_pctile_proximity_tsdf_us_isSet = true;
}

bool OAICwa07::is_pctile_proximity_tsdf_us_Set() const{
    return m_pctile_proximity_tsdf_us_isSet;
}

bool OAICwa07::is_pctile_proximity_tsdf_us_Valid() const{
    return m_pctile_proximity_tsdf_us_isValid;
}

QString OAICwa07::getPctileRespUs() const {
    return m_pctile_resp_us;
}
void OAICwa07::setPctileRespUs(const QString &pctile_resp_us) {
    m_pctile_resp_us = pctile_resp_us;
    m_pctile_resp_us_isSet = true;
}

bool OAICwa07::is_pctile_resp_us_Set() const{
    return m_pctile_resp_us_isSet;
}

bool OAICwa07::is_pctile_resp_us_Valid() const{
    return m_pctile_resp_us_isValid;
}

QString OAICwa07::getPctileTrafficScoreUs() const {
    return m_pctile_traffic_score_us;
}
void OAICwa07::setPctileTrafficScoreUs(const QString &pctile_traffic_score_us) {
    m_pctile_traffic_score_us = pctile_traffic_score_us;
    m_pctile_traffic_score_us_isSet = true;
}

bool OAICwa07::is_pctile_traffic_score_us_Set() const{
    return m_pctile_traffic_score_us_isSet;
}

bool OAICwa07::is_pctile_traffic_score_us_Valid() const{
    return m_pctile_traffic_score_us_isValid;
}

QString OAICwa07::getPermitComponents() const {
    return m_permit_components;
}
void OAICwa07::setPermitComponents(const QString &permit_components) {
    m_permit_components = permit_components;
    m_permit_components_isSet = true;
}

bool OAICwa07::is_permit_components_Set() const{
    return m_permit_components_isSet;
}

bool OAICwa07::is_permit_components_Valid() const{
    return m_permit_components_isValid;
}

QString OAICwa07::getPermitName() const {
    return m_permit_name;
}
void OAICwa07::setPermitName(const QString &permit_name) {
    m_permit_name = permit_name;
    m_permit_name_isSet = true;
}

bool OAICwa07::is_permit_name_Set() const{
    return m_permit_name_isSet;
}

bool OAICwa07::is_permit_name_Valid() const{
    return m_permit_name_isValid;
}

QString OAICwa07::getPermittingAgency() const {
    return m_permitting_agency;
}
void OAICwa07::setPermittingAgency(const QString &permitting_agency) {
    m_permitting_agency = permitting_agency;
    m_permitting_agency_isSet = true;
}

bool OAICwa07::is_permitting_agency_Set() const{
    return m_permitting_agency_isSet;
}

bool OAICwa07::is_permitting_agency_Valid() const{
    return m_permitting_agency_isValid;
}

QString OAICwa07::getPollWithViolation() const {
    return m_poll_with_violation;
}
void OAICwa07::setPollWithViolation(const QString &poll_with_violation) {
    m_poll_with_violation = poll_with_violation;
    m_poll_with_violation_isSet = true;
}

bool OAICwa07::is_poll_with_violation_Set() const{
    return m_poll_with_violation_isSet;
}

bool OAICwa07::is_poll_with_violation_Valid() const{
    return m_poll_with_violation_isValid;
}

QString OAICwa07::getRcraids() const {
    return m_rcraids;
}
void OAICwa07::setRcraids(const QString &rcraids) {
    m_rcraids = rcraids;
    m_rcraids_isSet = true;
}

bool OAICwa07::is_rcraids_Set() const{
    return m_rcraids_isSet;
}

bool OAICwa07::is_rcraids_Valid() const{
    return m_rcraids_isValid;
}

QString OAICwa07::getRadGnisName() const {
    return m_rad_gnis_name;
}
void OAICwa07::setRadGnisName(const QString &rad_gnis_name) {
    m_rad_gnis_name = rad_gnis_name;
    m_rad_gnis_name_isSet = true;
}

bool OAICwa07::is_rad_gnis_name_Set() const{
    return m_rad_gnis_name_isSet;
}

bool OAICwa07::is_rad_gnis_name_Valid() const{
    return m_rad_gnis_name_isValid;
}

QString OAICwa07::getRadHu12Name() const {
    return m_rad_hu12_name;
}
void OAICwa07::setRadHu12Name(const QString &rad_hu12_name) {
    m_rad_hu12_name = rad_hu12_name;
    m_rad_hu12_name_isSet = true;
}

bool OAICwa07::is_rad_hu12_name_Set() const{
    return m_rad_hu12_name_isSet;
}

bool OAICwa07::is_rad_hu12_name_Valid() const{
    return m_rad_hu12_name_isValid;
}

QString OAICwa07::getRadReachcode() const {
    return m_rad_reachcode;
}
void OAICwa07::setRadReachcode(const QString &rad_reachcode) {
    m_rad_reachcode = rad_reachcode;
    m_rad_reachcode_isSet = true;
}

bool OAICwa07::is_rad_reachcode_Set() const{
    return m_rad_reachcode_isSet;
}

bool OAICwa07::is_rad_reachcode_Valid() const{
    return m_rad_reachcode_isValid;
}

QString OAICwa07::getRadWbdhu8() const {
    return m_rad_wbdhu8;
}
void OAICwa07::setRadWbdhu8(const QString &rad_wbdhu8) {
    m_rad_wbdhu8 = rad_wbdhu8;
    m_rad_wbdhu8_isSet = true;
}

bool OAICwa07::is_rad_wbdhu8_Set() const{
    return m_rad_wbdhu8_isSet;
}

bool OAICwa07::is_rad_wbdhu8_Valid() const{
    return m_rad_wbdhu8_isValid;
}

QString OAICwa07::getRadWbdhu8Name() const {
    return m_rad_wbdhu8_name;
}
void OAICwa07::setRadWbdhu8Name(const QString &rad_wbdhu8_name) {
    m_rad_wbdhu8_name = rad_wbdhu8_name;
    m_rad_wbdhu8_name_isSet = true;
}

bool OAICwa07::is_rad_wbdhu8_name_Set() const{
    return m_rad_wbdhu8_name_isSet;
}

bool OAICwa07::is_rad_wbdhu8_name_Valid() const{
    return m_rad_wbdhu8_name_isValid;
}

QString OAICwa07::getRadWbdHuc12() const {
    return m_rad_wbd_huc12;
}
void OAICwa07::setRadWbdHuc12(const QString &rad_wbd_huc12) {
    m_rad_wbd_huc12 = rad_wbd_huc12;
    m_rad_wbd_huc12_isSet = true;
}

bool OAICwa07::is_rad_wbd_huc12_Set() const{
    return m_rad_wbd_huc12_isSet;
}

bool OAICwa07::is_rad_wbd_huc12_Valid() const{
    return m_rad_wbd_huc12_isValid;
}

QString OAICwa07::getReceivingMs4Name() const {
    return m_receiving_ms4_name;
}
void OAICwa07::setReceivingMs4Name(const QString &receiving_ms4_name) {
    m_receiving_ms4_name = receiving_ms4_name;
    m_receiving_ms4_name_isSet = true;
}

bool OAICwa07::is_receiving_ms4_name_Set() const{
    return m_receiving_ms4_name_isSet;
}

bool OAICwa07::is_receiving_ms4_name_Valid() const{
    return m_receiving_ms4_name_isValid;
}

QString OAICwa07::getReferencePoint() const {
    return m_reference_point;
}
void OAICwa07::setReferencePoint(const QString &reference_point) {
    m_reference_point = reference_point;
    m_reference_point_isSet = true;
}

bool OAICwa07::is_reference_point_Set() const{
    return m_reference_point_isSet;
}

bool OAICwa07::is_reference_point_Valid() const{
    return m_reference_point_isValid;
}

QString OAICwa07::getRegistryId() const {
    return m_registry_id;
}
void OAICwa07::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAICwa07::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAICwa07::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAICwa07::getRmpIds() const {
    return m_rmp_ids;
}
void OAICwa07::setRmpIds(const QString &rmp_ids) {
    m_rmp_ids = rmp_ids;
    m_rmp_ids_isSet = true;
}

bool OAICwa07::is_rmp_ids_Set() const{
    return m_rmp_ids_isSet;
}

bool OAICwa07::is_rmp_ids_Valid() const{
    return m_rmp_ids_isValid;
}

QString OAICwa07::getSdwaids() const {
    return m_sdwaids;
}
void OAICwa07::setSdwaids(const QString &sdwaids) {
    m_sdwaids = sdwaids;
    m_sdwaids_isSet = true;
}

bool OAICwa07::is_sdwaids_Set() const{
    return m_sdwaids_isSet;
}

bool OAICwa07::is_sdwaids_Valid() const{
    return m_sdwaids_isValid;
}

QString OAICwa07::getScore() const {
    return m_score;
}
void OAICwa07::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICwa07::is_score_Set() const{
    return m_score_isSet;
}

bool OAICwa07::is_score_Valid() const{
    return m_score_isValid;
}

QString OAICwa07::getSector() const {
    return m_sector;
}
void OAICwa07::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAICwa07::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAICwa07::is_sector_Valid() const{
    return m_sector_isValid;
}

QString OAICwa07::getSourceId() const {
    return m_source_id;
}
void OAICwa07::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICwa07::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICwa07::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAICwa07::getSpeciesCriticalHabitalFlag() const {
    return m_species_critical_habital_flag;
}
void OAICwa07::setSpeciesCriticalHabitalFlag(const QString &species_critical_habital_flag) {
    m_species_critical_habital_flag = species_critical_habital_flag;
    m_species_critical_habital_flag_isSet = true;
}

bool OAICwa07::is_species_critical_habital_flag_Set() const{
    return m_species_critical_habital_flag_isSet;
}

bool OAICwa07::is_species_critical_habital_flag_Valid() const{
    return m_species_critical_habital_flag_isValid;
}

QString OAICwa07::getStateAuthBiosolids() const {
    return m_state_auth_biosolids;
}
void OAICwa07::setStateAuthBiosolids(const QString &state_auth_biosolids) {
    m_state_auth_biosolids = state_auth_biosolids;
    m_state_auth_biosolids_isSet = true;
}

bool OAICwa07::is_state_auth_biosolids_Set() const{
    return m_state_auth_biosolids_isSet;
}

bool OAICwa07::is_state_auth_biosolids_Valid() const{
    return m_state_auth_biosolids_isValid;
}

QString OAICwa07::getStateAuthFedfac() const {
    return m_state_auth_fedfac;
}
void OAICwa07::setStateAuthFedfac(const QString &state_auth_fedfac) {
    m_state_auth_fedfac = state_auth_fedfac;
    m_state_auth_fedfac_isSet = true;
}

bool OAICwa07::is_state_auth_fedfac_Set() const{
    return m_state_auth_fedfac_isSet;
}

bool OAICwa07::is_state_auth_fedfac_Valid() const{
    return m_state_auth_fedfac_isValid;
}

QString OAICwa07::getStateAuthGen() const {
    return m_state_auth_gen;
}
void OAICwa07::setStateAuthGen(const QString &state_auth_gen) {
    m_state_auth_gen = state_auth_gen;
    m_state_auth_gen_isSet = true;
}

bool OAICwa07::is_state_auth_gen_Set() const{
    return m_state_auth_gen_isSet;
}

bool OAICwa07::is_state_auth_gen_Valid() const{
    return m_state_auth_gen_isValid;
}

QString OAICwa07::getStateAuthNpdes() const {
    return m_state_auth_npdes;
}
void OAICwa07::setStateAuthNpdes(const QString &state_auth_npdes) {
    m_state_auth_npdes = state_auth_npdes;
    m_state_auth_npdes_isSet = true;
}

bool OAICwa07::is_state_auth_npdes_Set() const{
    return m_state_auth_npdes_isSet;
}

bool OAICwa07::is_state_auth_npdes_Valid() const{
    return m_state_auth_npdes_isValid;
}

QString OAICwa07::getStateAuthPretreat() const {
    return m_state_auth_pretreat;
}
void OAICwa07::setStateAuthPretreat(const QString &state_auth_pretreat) {
    m_state_auth_pretreat = state_auth_pretreat;
    m_state_auth_pretreat_isSet = true;
}

bool OAICwa07::is_state_auth_pretreat_Set() const{
    return m_state_auth_pretreat_isSet;
}

bool OAICwa07::is_state_auth_pretreat_Valid() const{
    return m_state_auth_pretreat_isValid;
}

QString OAICwa07::getStatute() const {
    return m_statute;
}
void OAICwa07::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAICwa07::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAICwa07::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAICwa07::getStormWaterArea() const {
    return m_storm_water_area;
}
void OAICwa07::setStormWaterArea(const QString &storm_water_area) {
    m_storm_water_area = storm_water_area;
    m_storm_water_area_isSet = true;
}

bool OAICwa07::is_storm_water_area_Set() const{
    return m_storm_water_area_isSet;
}

bool OAICwa07::is_storm_water_area_Valid() const{
    return m_storm_water_area_isValid;
}

QString OAICwa07::getSubmittedDate() const {
    return m_submitted_date;
}
void OAICwa07::setSubmittedDate(const QString &submitted_date) {
    m_submitted_date = submitted_date;
    m_submitted_date_isSet = true;
}

bool OAICwa07::is_submitted_date_Set() const{
    return m_submitted_date_isSet;
}

bool OAICwa07::is_submitted_date_Valid() const{
    return m_submitted_date_isValid;
}

QString OAICwa07::getSubsector() const {
    return m_subsector;
}
void OAICwa07::setSubsector(const QString &subsector) {
    m_subsector = subsector;
    m_subsector_isSet = true;
}

bool OAICwa07::is_subsector_Set() const{
    return m_subsector_isSet;
}

bool OAICwa07::is_subsector_Valid() const{
    return m_subsector_isValid;
}

QString OAICwa07::getSwpppUrl() const {
    return m_swppp_url;
}
void OAICwa07::setSwpppUrl(const QString &swppp_url) {
    m_swppp_url = swppp_url;
    m_swppp_url_isSet = true;
}

bool OAICwa07::is_swppp_url_Set() const{
    return m_swppp_url_isSet;
}

bool OAICwa07::is_swppp_url_Valid() const{
    return m_swppp_url_isValid;
}

QString OAICwa07::getTriids() const {
    return m_triids;
}
void OAICwa07::setTriids(const QString &triids) {
    m_triids = triids;
    m_triids_isSet = true;
}

bool OAICwa07::is_triids_Set() const{
    return m_triids_isSet;
}

bool OAICwa07::is_triids_Valid() const{
    return m_triids_isValid;
}

QString OAICwa07::getTrIbalFlag() const {
    return m_tr_ibal_flag;
}
void OAICwa07::setTrIbalFlag(const QString &tr_ibal_flag) {
    m_tr_ibal_flag = tr_ibal_flag;
    m_tr_ibal_flag_isSet = true;
}

bool OAICwa07::is_tr_ibal_flag_Set() const{
    return m_tr_ibal_flag_isSet;
}

bool OAICwa07::is_tr_ibal_flag_Valid() const{
    return m_tr_ibal_flag_isValid;
}

QString OAICwa07::getTypeOfMonitoring() const {
    return m_type_of_monitoring;
}
void OAICwa07::setTypeOfMonitoring(const QString &type_of_monitoring) {
    m_type_of_monitoring = type_of_monitoring;
    m_type_of_monitoring_isSet = true;
}

bool OAICwa07::is_type_of_monitoring_Set() const{
    return m_type_of_monitoring_isSet;
}

bool OAICwa07::is_type_of_monitoring_Valid() const{
    return m_type_of_monitoring_isValid;
}

QString OAICwa07::getTypeOfWater() const {
    return m_type_of_water;
}
void OAICwa07::setTypeOfWater(const QString &type_of_water) {
    m_type_of_water = type_of_water;
    m_type_of_water_isSet = true;
}

bool OAICwa07::is_type_of_water_Set() const{
    return m_type_of_water_isSet;
}

bool OAICwa07::is_type_of_water_Valid() const{
    return m_type_of_water_isValid;
}

QString OAICwa07::getVioLastYear() const {
    return m_vio_last_year;
}
void OAICwa07::setVioLastYear(const QString &vio_last_year) {
    m_vio_last_year = vio_last_year;
    m_vio_last_year_isSet = true;
}

bool OAICwa07::is_vio_last_year_Set() const{
    return m_vio_last_year_isSet;
}

bool OAICwa07::is_vio_last_year_Valid() const{
    return m_vio_last_year_isValid;
}

QString OAICwa07::getViolFlag() const {
    return m_viol_flag;
}
void OAICwa07::setViolFlag(const QString &viol_flag) {
    m_viol_flag = viol_flag;
    m_viol_flag_isSet = true;
}

bool OAICwa07::is_viol_flag_Set() const{
    return m_viol_flag_isSet;
}

bool OAICwa07::is_viol_flag_Valid() const{
    return m_viol_flag_isValid;
}

QString OAICwa07::getWebDocs() const {
    return m_web_docs;
}
void OAICwa07::setWebDocs(const QString &web_docs) {
    m_web_docs = web_docs;
    m_web_docs_isSet = true;
}

bool OAICwa07::is_web_docs_Set() const{
    return m_web_docs_isSet;
}

bool OAICwa07::is_web_docs_Valid() const{
    return m_web_docs_isValid;
}

bool OAICwa07::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alr_exceedences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_pollutant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_aquatic_life_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_au_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_cause_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_cycle_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_exceptnl_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_imp_water_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_possible_npdes_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_recreation_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_shellfish_use_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attains_state_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_close_last2yrs_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_close_last_year_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_method_catgrys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_method_catgrys2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_method_catgrys2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_methods2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_analy_methods2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_comment_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_comment_text2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_comment_text2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_incineration_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_incineration_sum2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_incineration_sum2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_land_application_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_land_application_sum2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_land_application_sum2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_containers2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_containers2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_categories2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_categories2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_current_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_current_cnt2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_def_current_cnt2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_deficiencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_deficiencies2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_deficiencies2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_handlers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_handlers2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_handlers2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathogens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathogens2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathogens2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathreds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathreds2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_pathreds2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_stypes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_stypes2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_stypes2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_types2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_prctce_types2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_vectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_vectors2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_mgmt_vectors2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_management_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_management_sum2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_management_sum2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_mgmt_prctc_txts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_mgmt_prctc_txts2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_other_mgmt_prctc_txts2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_qtrs_with_vio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_report_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_report_date2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_report_date2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_report_years_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_reporting_obligations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_reporting_obligations2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_reporting_obligations2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_surface_disp_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_surface_disp_sum2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_surface_disp_sum2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_total_volume_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_total_volume_amt2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_total_volume_amt2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trmnt_prcss_cmnt_txts2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trmnt_prcss_cmnt_txts2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trtmnt_prcss_cmmnt_txts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trtmnt_processes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trtmnt_processes2016_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_trtmnt_processes2017_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_vio_last_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_vio_last_year_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_vio_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_viol_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_biosolids_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp13qtrs_compl_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_actual_average_flow_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_bio_fea_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_bio_iea_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_bio_insp_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_bio_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_case_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_compliance_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_cso_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_cso_outfalls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_fea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_fea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_fea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_iea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_iea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_iea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_insp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_insp_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_insp_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_bio_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_fea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_fea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_fea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_iea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_iea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_informal_ea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_insp_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_insp_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_date_last_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_days_last_bio_insp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_days_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpe90_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpepa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpfips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_facility_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_facility_type_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_formal_ea_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_imp_water_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_informal_enf_act_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_inspection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_major_minor_status_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpnaics_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_status_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_permit_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_qtrs_with_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpsic_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpsnc_event_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpsnc_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwpsnc_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_state_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_state_water_body_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_state_water_body_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwptr_ibal_land_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_total_design_flow_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_version_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_vio_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_viol_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwp_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_accuracy_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_census_block_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chesapeake_bay_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_measure_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_sv_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_impaired_poll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmr_twpe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsch_to_ms4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_exceeds1yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_exceeds2yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_exceeds3yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_exceeds4yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_exceeds5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_pollutants1yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_pollutants2yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_pollutants3yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_pollutants4yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e90_pollutants5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eff_charts_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eff_exceeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_rpt_waiver_eff_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_rpt_waiver_exp_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_rpt_waiver_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_rpt_waiver_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_submission_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electr_submission_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposed_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_huc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_tr_ibes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbdhu8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbdhu8_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_spatial_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_percent_minority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_pop_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_std_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_potw_trans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_trisw_rel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_us_mex_border_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_historic_criterion_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indsw_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp_def5yr_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_dmr_value_rcvd_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lim_pollutant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_external_permit_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pctile_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miss_dmr_qtrs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_corrective_action_smmry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_facility_inspctn_smmry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_last_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_no_further_rdctn_rtnle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_permit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msgp_visual_assessment_smmry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdes_data_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdes_data_groups_descs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npdesids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_permit_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over80_count_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_cal_yr_average_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_cal_yr_conv_pol_ovr_lmt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_cal_yr_conv_pollutants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_cal_yr_toxic_pol_ovr_lmt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_cal_yr_toxic_pollutants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_cancer_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_dpm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_o3_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pctpre1960_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npdesus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npl_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_rmp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_tsdf_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_resp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_traffic_score_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permit_components_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitting_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_with_violation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcraids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_gnis_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_hu12_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_reachcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_wbdhu8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_wbdhu8_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rad_wbd_huc12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_ms4_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmp_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_critical_habital_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_auth_biosolids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_auth_fedfac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_auth_gen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_auth_npdes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_auth_pretreat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storm_water_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swppp_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_ibal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_water_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vio_last_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viol_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_docs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICwa07::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_airids_isValid && m_active_lower48_isValid && m_alr_exceedences_isValid && m_associated_pollutant_isValid && m_attains_aquatic_life_use_flg_isValid && m_attains_au_category_isValid && m_attains_cause_groups_isValid && m_attains_cycle_year_isValid && m_attains_exceptnl_use_flg_isValid && m_attains_imp_water_flg_isValid && m_attains_possible_npdes_params_isValid && m_attains_recreation_use_flg_isValid && m_attains_shellfish_use_flg_isValid && m_attains_source_isValid && m_attains_state_causes_isValid && m_beach_close_last2yrs_flg_isValid && m_beach_close_last_year_flg_isValid && m_bio_analy_method_catgrys_isValid && m_bio_analy_method_catgrys2016_isValid && m_bio_analy_method_catgrys2017_isValid && m_bio_analy_methods_isValid && m_bio_analy_methods2016_isValid && m_bio_analy_methods2017_isValid && m_bio_comment_text_isValid && m_bio_comment_text2016_isValid && m_bio_comment_text2017_isValid && m_bio_incineration_sum_isValid && m_bio_incineration_sum2016_isValid && m_bio_incineration_sum2017_isValid && m_bio_land_application_sum_isValid && m_bio_land_application_sum2016_isValid && m_bio_land_application_sum2017_isValid && m_bio_mgmt_containers_isValid && m_bio_mgmt_containers2016_isValid && m_bio_mgmt_containers2017_isValid && m_bio_mgmt_def_categories_isValid && m_bio_mgmt_def_categories2016_isValid && m_bio_mgmt_def_categories2017_isValid && m_bio_mgmt_def_current_cnt_isValid && m_bio_mgmt_def_current_cnt2016_isValid && m_bio_mgmt_def_current_cnt2017_isValid && m_bio_mgmt_deficiencies_isValid && m_bio_mgmt_deficiencies2016_isValid && m_bio_mgmt_deficiencies2017_isValid && m_bio_mgmt_handlers_isValid && m_bio_mgmt_handlers2016_isValid && m_bio_mgmt_handlers2017_isValid && m_bio_mgmt_pathogens_isValid && m_bio_mgmt_pathogens2016_isValid && m_bio_mgmt_pathogens2017_isValid && m_bio_mgmt_pathreds_isValid && m_bio_mgmt_pathreds2016_isValid && m_bio_mgmt_pathreds2017_isValid && m_bio_mgmt_prctce_stypes_isValid && m_bio_mgmt_prctce_stypes2016_isValid && m_bio_mgmt_prctce_stypes2017_isValid && m_bio_mgmt_prctce_types_isValid && m_bio_mgmt_prctce_types2016_isValid && m_bio_mgmt_prctce_types2017_isValid && m_bio_mgmt_vectors_isValid && m_bio_mgmt_vectors2016_isValid && m_bio_mgmt_vectors2017_isValid && m_bio_other_management_sum_isValid && m_bio_other_management_sum2016_isValid && m_bio_other_management_sum2017_isValid && m_bio_other_mgmt_prctc_txts_isValid && m_bio_other_mgmt_prctc_txts2016_isValid && m_bio_other_mgmt_prctc_txts2017_isValid && m_bio_qtrs_with_vio_isValid && m_bio_report_date_isValid && m_bio_report_date2016_isValid && m_bio_report_date2017_isValid && m_bio_report_year_isValid && m_bio_report_years_isValid && m_bio_reporting_obligations_isValid && m_bio_reporting_obligations2016_isValid && m_bio_reporting_obligations2017_isValid && m_bio_surface_disp_sum_isValid && m_bio_surface_disp_sum2016_isValid && m_bio_surface_disp_sum2017_isValid && m_bio_total_volume_amt_isValid && m_bio_total_volume_amt2016_isValid && m_bio_total_volume_amt2017_isValid && m_bio_trmnt_prcss_cmnt_txts2016_isValid && m_bio_trmnt_prcss_cmnt_txts2017_isValid && m_bio_trtmnt_prcss_cmmnt_txts_isValid && m_bio_trtmnt_processes_isValid && m_bio_trtmnt_processes2016_isValid && m_bio_trtmnt_processes2017_isValid && m_bio_vio_last_year_isValid && m_bio_vio_last_year_flag_isValid && m_bio_vio_status_isValid && m_bio_viol_flag_isValid && m_biosolids_flag_isValid && m_cwp13qtrs_compl_history_isValid && m_cwp_actual_average_flow_nmbr_isValid && m_cwp_bio_fea_count_isValid && m_cwp_bio_iea_count_isValid && m_cwp_bio_insp_count_isValid && m_cwp_bio_penalties_isValid && m_cwp_case_ids_isValid && m_cwp_city_isValid && m_cwp_compliance_tracking_isValid && m_cwp_county_isValid && m_cwp_cso_flag_isValid && m_cwp_cso_outfalls_isValid && m_cwp_date_last_bio_fea_isValid && m_cwp_date_last_bio_fea_epa_isValid && m_cwp_date_last_bio_fea_st_isValid && m_cwp_date_last_bio_iea_isValid && m_cwp_date_last_bio_iea_epa_isValid && m_cwp_date_last_bio_iea_st_isValid && m_cwp_date_last_bio_insp_isValid && m_cwp_date_last_bio_insp_epa_isValid && m_cwp_date_last_bio_insp_st_isValid && m_cwp_date_last_bio_penalty_isValid && m_cwp_date_last_fea_isValid && m_cwp_date_last_fea_epa_isValid && m_cwp_date_last_fea_st_isValid && m_cwp_date_last_iea_epa_isValid && m_cwp_date_last_iea_st_isValid && m_cwp_date_last_informal_ea_isValid && m_cwp_date_last_insp_epa_isValid && m_cwp_date_last_insp_st_isValid && m_cwp_date_last_inspection_isValid && m_cwp_date_last_penalty_isValid && m_cwp_days_last_bio_insp_isValid && m_cwp_days_last_inspection_isValid && m_cwpe90_cnt_isValid && m_cwpepa_region_isValid && m_cwp_effective_date_isValid && m_cwp_expiration_date_isValid && m_cwpfips_code_isValid && m_cwp_facility_type_code_isValid && m_cwp_facility_type_indicator_isValid && m_cwp_formal_ea_cnt_isValid && m_cwp_imp_water_flg_isValid && m_cwp_indian_cntry_flg_isValid && m_cwp_informal_enf_act_count_isValid && m_cwp_inspection_count_isValid && m_cwp_issue_date_isValid && m_cwp_major_minor_status_flag_isValid && m_cwpnaics_codes_isValid && m_cwp_name_isValid && m_cwp_permit_status_code_isValid && m_cwp_permit_status_desc_isValid && m_cwp_permit_type_code_isValid && m_cwp_permit_type_desc_isValid && m_cwp_qtrs_with_nc_isValid && m_cwp_qtrs_with_snc_isValid && m_cwpsic_codes_isValid && m_cwpsnc_event_desc_isValid && m_cwpsnc_status_isValid && m_cwpsnc_status_date_isValid && m_cwp_state_isValid && m_cwp_state_district_isValid && m_cwp_state_water_body_code_isValid && m_cwp_state_water_body_name_isValid && m_cwp_status_isValid && m_cwp_street_isValid && m_cwptr_ibal_land_code_isValid && m_cwp_termination_date_isValid && m_cwp_total_design_flow_nmbr_isValid && m_cwp_total_penalties_isValid && m_cwp_version_nmbr_isValid && m_cwp_vio_status_isValid && m_cwp_viol_status_isValid && m_cwp_zip_isValid && m_calculated_accuracy_meters_isValid && m_census_block_group_isValid && m_certified_date_isValid && m_chesapeake_bay_flag_isValid && m_collection_method_isValid && m_control_measure_isValid && m_control_measure_schedule_isValid && m_curr_sv_flag_isValid && m_curr_vio_flag_isValid && m_dmr_impaired_poll_isValid && m_dmr_pounds_isValid && m_dmr_twpe_isValid && m_dsch_to_ms4_isValid && m_e90_exceeds1yr_isValid && m_e90_exceeds2yr_isValid && m_e90_exceeds3yr_isValid && m_e90_exceeds4yr_isValid && m_e90_exceeds5yr_isValid && m_e90_pollutants1yr_isValid && m_e90_pollutants2yr_isValid && m_e90_pollutants3yr_isValid && m_e90_pollutants4yr_isValid && m_e90_pollutants5yr_isValid && m_epa_system_isValid && m_ea5yr_flag_isValid && m_eff_charts_flag_isValid && m_eff_exceeds_isValid && m_ejscreen_flag_isValid && m_ejscreen_flag_us_isValid && m_electr_rpt_waiver_eff_date_isValid && m_electr_rpt_waiver_exp_date_isValid && m_electr_rpt_waiver_type_code_isValid && m_electr_rpt_waiver_type_desc_isValid && m_electr_submission_type_code_isValid && m_electr_submission_type_desc_isValid && m_exposed_activity_isValid && m_fac_county_name_isValid && m_fac_derived_huc_isValid && m_fac_derived_tr_ibes_isValid && m_fac_derived_wbd_isValid && m_fac_derived_wbdhu8_isValid && m_fac_derived_wbdhu8_name_isValid && m_fac_derived_wbd_name_isValid && m_fac_fips_code_isValid && m_fac_federal_agency_code_isValid && m_fac_federal_agency_name_isValid && m_fac_indian_cntry_flg_isValid && m_fac_indian_spatial_flg_isValid && m_fac_lat_isValid && m_fac_long_isValid && m_fac_map_flg_isValid && m_fac_map_icon_isValid && m_fac_percent_minority_isValid && m_fac_pop_den_isValid && m_fac_std_county_name_isValid && m_fac_tri_potw_trans_isValid && m_fac_tri_reporter_isValid && m_fac_trisw_rel_isValid && m_fac_us_mex_border_flg_isValid && m_historic_criterion_code_isValid && m_indsw_flag_isValid && m_infea5yr_flag_isValid && m_insp5yr_flag_isValid && m_insp_def5yr_cnt_isValid && m_issuing_agency_isValid && m_last_dmr_value_rcvd_date_isValid && m_lim_pollutant_isValid && m_lower48_isValid && m_map_isValid && m_master_external_permit_nmbr_isValid && m_max_pctile_us_isValid && m_max_score_isValid && m_miss_dmr_qtrs_isValid && m_msgp_corrective_action_smmry_isValid && m_msgp_facility_inspctn_smmry_isValid && m_msgp_last_report_year_isValid && m_msgp_no_further_rdctn_rtnle_isValid && m_msgp_permit_type_isValid && m_msgp_visual_assessment_smmry_isValid && m_npdes_data_groups_isValid && m_npdes_data_groups_descs_isValid && m_npdesids_isValid && m_object_id_isValid && m_other_permit_ids_isValid && m_over80_count_us_isValid && m_past_cal_yr_average_flow_isValid && m_past_cal_yr_conv_pol_ovr_lmt_isValid && m_past_cal_yr_conv_pollutants_isValid && m_past_cal_yr_toxic_pol_ovr_lmt_isValid && m_past_cal_yr_toxic_pollutants_isValid && m_pctile_cancer_us_isValid && m_pctile_dpm_us_isValid && m_pctile_o3_us_isValid && m_pctile_pctpre1960_us_isValid && m_pctile_pm_us_isValid && m_pctile_proximity_npdesus_isValid && m_pctile_proximity_npl_us_isValid && m_pctile_proximity_rmp_us_isValid && m_pctile_proximity_tsdf_us_isValid && m_pctile_resp_us_isValid && m_pctile_traffic_score_us_isValid && m_permit_components_isValid && m_permit_name_isValid && m_permitting_agency_isValid && m_poll_with_violation_isValid && m_rcraids_isValid && m_rad_gnis_name_isValid && m_rad_hu12_name_isValid && m_rad_reachcode_isValid && m_rad_wbdhu8_isValid && m_rad_wbdhu8_name_isValid && m_rad_wbd_huc12_isValid && m_receiving_ms4_name_isValid && m_reference_point_isValid && m_registry_id_isValid && m_rmp_ids_isValid && m_sdwaids_isValid && m_score_isValid && m_sector_isValid && m_source_id_isValid && m_species_critical_habital_flag_isValid && m_state_auth_biosolids_isValid && m_state_auth_fedfac_isValid && m_state_auth_gen_isValid && m_state_auth_npdes_isValid && m_state_auth_pretreat_isValid && m_statute_isValid && m_storm_water_area_isValid && m_submitted_date_isValid && m_subsector_isValid && m_swppp_url_isValid && m_triids_isValid && m_tr_ibal_flag_isValid && m_type_of_monitoring_isValid && m_type_of_water_isValid && m_vio_last_year_isValid && m_viol_flag_isValid && m_web_docs_isValid && true;
}

} // namespace OpenAPI
