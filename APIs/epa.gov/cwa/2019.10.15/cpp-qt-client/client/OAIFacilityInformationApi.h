/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Water Act (CWA) Rest Services
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CWA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Water Act (CWA) and managed under the National Pollutant Discharge Elimination System (NPDES) program. The returned results reflect data drawn from EPA's ICIS-NPDES database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFacilityInformationApi_H
#define OAI_OAIFacilityInformationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_cwa_rest_services_get_facilities_get_200_response.h"
#include "OAI_cwa_rest_services_get_facility_info_get_200_response.h"
#include "OAI_cwa_rest_services_get_geojson_get_200_response.h"
#include "OAI_cwa_rest_services_get_map_get_200_response.h"
#include "OAI_cwa_rest_services_get_qid_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFacilityInformationApi : public QObject {
    Q_OBJECT

public:
    OAIFacilityInformationApi(const int timeOut = 0);
    ~OAIFacilityInformationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_iv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_imp_cau_grp QString [optional]
    * @param[in]  p_imp_pol QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_pstat QString [optional]
    * @param[in]  p_ptype QString [optional]
    * @param[in]  p_pcomp QString [optional]
    * @param[in]  p_plimits QString [optional]
    * @param[in]  p_pcss QString [optional]
    * @param[in]  p_pexp QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_ipfti QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_pccs QString [optional]
    * @param[in]  p_pexcd QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_pt QString [optional]
    * @param[in]  p_pdwdist QString [optional]
    * @param[in]  p_pswdpc QString [optional]
    * @param[in]  p_pswdmp QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswcas QString [optional]
    * @param[in]  p_pswparam QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_radwbd QString [optional]
    * @param[in]  p_frswbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_months_last_dmr double [optional]
    * @param[in]  p_last_dmr_within QString [optional]
    * @param[in]  p_indsw QString [optional]
    * @param[in]  p_msgp_ptype QString [optional]
    * @param[in]  p_mon_type QString [optional]
    * @param[in]  p_iagency QString [optional]
    * @param[in]  p_permitting_agency QString [optional]
    * @param[in]  p_isws QString [optional]
    * @param[in]  p_iswss QString [optional]
    * @param[in]  p_iswss_id QString [optional]
    * @param[in]  p_ds1 QString [optional]
    * @param[in]  p_ds2 QString [optional]
    * @param[in]  p_da1 QString [optional]
    * @param[in]  p_da2 QString [optional]
    * @param[in]  p_ms4 QString [optional]
    * @param[in]  p_oo_fn QString [optional]
    * @param[in]  p_oo_f_ntype QString [optional]
    * @param[in]  p_oo_sa QString [optional]
    * @param[in]  p_oo_sa1 QString [optional]
    * @param[in]  p_oo_ct QString [optional]
    * @param[in]  p_oo_st QString [optional]
    * @param[in]  p_oo_zip QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_alrexceed double [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_bio_flag QString [optional]
    * @param[in]  p_bio_fac_type QString [optional]
    * @param[in]  p_bio_trtmnt_procs QString [optional]
    * @param[in]  p_bio_analy_method_catgry QString [optional]
    * @param[in]  p_bio_total_volume_amt QString [optional]
    * @param[in]  p_bio_mgmt_prctce_type QString [optional]
    * @param[in]  p_bio_mgmt_prctce_stype QString [optional]
    * @param[in]  p_bio_mgmt_prctce_handler QString [optional]
    * @param[in]  p_bio_mgmt_container QString [optional]
    * @param[in]  p_bio_mgmt_pathogen QString [optional]
    * @param[in]  p_bio_mgmt_pathred QString [optional]
    * @param[in]  p_bio_mgmt_vector QString [optional]
    * @param[in]  p_bio_mgmt_def_category QString [optional]
    * @param[in]  p_bio_mgmt_deficiencies double [optional]
    * @param[in]  p_bio_vio_code QString [optional]
    * @param[in]  p_bio_current_vio QString [optional]
    * @param[in]  p_bio_qtrs_in_vio double [optional]
    * @param[in]  p_bio_rpt_year QString [optional]
    * @param[in]  p_bio_vio_last_year QString [optional]
    * @param[in]  p_msgp_rpt_year QString [optional]
    * @param[in]  p_vio_last_year QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_e90_count double [optional]
    * @param[in]  p_e90_years double [optional]
    * @param[in]  p_psc QString [optional]
    */
    virtual void cwaRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pstat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcomp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_plimits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ipfti = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pccs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexcd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pdwdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdpc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdmp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswcas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswparam = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_radwbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frswbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_months_last_dmr = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_indsw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mon_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iagency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_permitting_agency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_isws = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ms4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_alrexceed = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_e90_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_years = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_psc = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_iv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_imp_cau_grp QString [optional]
    * @param[in]  p_imp_pol QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_pstat QString [optional]
    * @param[in]  p_ptype QString [optional]
    * @param[in]  p_pcomp QString [optional]
    * @param[in]  p_plimits QString [optional]
    * @param[in]  p_pcss QString [optional]
    * @param[in]  p_pexp QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_ipfti QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_pccs QString [optional]
    * @param[in]  p_pexcd QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_pt QString [optional]
    * @param[in]  p_pdwdist QString [optional]
    * @param[in]  p_pswdpc QString [optional]
    * @param[in]  p_pswdmp QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswcas QString [optional]
    * @param[in]  p_pswparam QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_radwbd QString [optional]
    * @param[in]  p_frswbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_months_last_dmr double [optional]
    * @param[in]  p_last_dmr_within QString [optional]
    * @param[in]  p_indsw QString [optional]
    * @param[in]  p_msgp_ptype QString [optional]
    * @param[in]  p_mon_type QString [optional]
    * @param[in]  p_iagency QString [optional]
    * @param[in]  p_permitting_agency QString [optional]
    * @param[in]  p_isws QString [optional]
    * @param[in]  p_iswss QString [optional]
    * @param[in]  p_iswss_id QString [optional]
    * @param[in]  p_ds1 QString [optional]
    * @param[in]  p_ds2 QString [optional]
    * @param[in]  p_da1 QString [optional]
    * @param[in]  p_da2 QString [optional]
    * @param[in]  p_ms4 QString [optional]
    * @param[in]  p_oo_fn QString [optional]
    * @param[in]  p_oo_f_ntype QString [optional]
    * @param[in]  p_oo_sa QString [optional]
    * @param[in]  p_oo_sa1 QString [optional]
    * @param[in]  p_oo_ct QString [optional]
    * @param[in]  p_oo_st QString [optional]
    * @param[in]  p_oo_zip QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_alrexceed double [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_bio_flag QString [optional]
    * @param[in]  p_bio_fac_type QString [optional]
    * @param[in]  p_bio_trtmnt_procs QString [optional]
    * @param[in]  p_bio_analy_method_catgry QString [optional]
    * @param[in]  p_bio_total_volume_amt QString [optional]
    * @param[in]  p_bio_mgmt_prctce_type QString [optional]
    * @param[in]  p_bio_mgmt_prctce_stype QString [optional]
    * @param[in]  p_bio_mgmt_prctce_handler QString [optional]
    * @param[in]  p_bio_mgmt_container QString [optional]
    * @param[in]  p_bio_mgmt_pathogen QString [optional]
    * @param[in]  p_bio_mgmt_pathred QString [optional]
    * @param[in]  p_bio_mgmt_vector QString [optional]
    * @param[in]  p_bio_mgmt_def_category QString [optional]
    * @param[in]  p_bio_mgmt_deficiencies double [optional]
    * @param[in]  p_bio_vio_code QString [optional]
    * @param[in]  p_bio_current_vio QString [optional]
    * @param[in]  p_bio_qtrs_in_vio double [optional]
    * @param[in]  p_bio_rpt_year QString [optional]
    * @param[in]  p_bio_vio_last_year QString [optional]
    * @param[in]  p_msgp_rpt_year QString [optional]
    * @param[in]  p_vio_last_year QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_e90_count double [optional]
    * @param[in]  p_e90_years double [optional]
    * @param[in]  p_psc QString [optional]
    */
    virtual void cwaRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pstat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcomp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_plimits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ipfti = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pccs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexcd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pdwdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdpc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdmp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswcas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswparam = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_radwbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frswbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_months_last_dmr = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_indsw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mon_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iagency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_permitting_agency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_isws = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ms4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_alrexceed = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_e90_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_years = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_psc = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_iv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_imp_pol QString [optional]
    * @param[in]  p_imp_cau_grp QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_pstat QString [optional]
    * @param[in]  p_ptype QString [optional]
    * @param[in]  p_pcomp QString [optional]
    * @param[in]  p_plimits QString [optional]
    * @param[in]  p_pcss QString [optional]
    * @param[in]  p_pexp QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_ipfti QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_pccs QString [optional]
    * @param[in]  p_pexcd QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_pt QString [optional]
    * @param[in]  p_pdwdist QString [optional]
    * @param[in]  p_pswdpc QString [optional]
    * @param[in]  p_pswdmp QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswcas QString [optional]
    * @param[in]  p_pswparam QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_radwbd QString [optional]
    * @param[in]  p_frswbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_months_last_dmr double [optional]
    * @param[in]  p_last_dmr_within QString [optional]
    * @param[in]  p_indsw QString [optional]
    * @param[in]  p_msgp_ptype QString [optional]
    * @param[in]  p_mon_type QString [optional]
    * @param[in]  p_iagency QString [optional]
    * @param[in]  p_permitting_agency QString [optional]
    * @param[in]  p_isws QString [optional]
    * @param[in]  p_iswss QString [optional]
    * @param[in]  p_iswss_id QString [optional]
    * @param[in]  p_ds1 QString [optional]
    * @param[in]  p_ds2 QString [optional]
    * @param[in]  p_da1 QString [optional]
    * @param[in]  p_da2 QString [optional]
    * @param[in]  p_ms4 QString [optional]
    * @param[in]  p_oo_fn QString [optional]
    * @param[in]  p_oo_f_ntype QString [optional]
    * @param[in]  p_oo_sa QString [optional]
    * @param[in]  p_oo_sa1 QString [optional]
    * @param[in]  p_oo_ct QString [optional]
    * @param[in]  p_oo_st QString [optional]
    * @param[in]  p_oo_zip QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_alrexceed double [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_bio_flag QString [optional]
    * @param[in]  p_bio_fac_type QString [optional]
    * @param[in]  p_bio_trtmnt_procs QString [optional]
    * @param[in]  p_bio_analy_method_catgry QString [optional]
    * @param[in]  p_bio_total_volume_amt QString [optional]
    * @param[in]  p_bio_mgmt_prctce_type QString [optional]
    * @param[in]  p_bio_mgmt_prctce_stype QString [optional]
    * @param[in]  p_bio_mgmt_prctce_handler QString [optional]
    * @param[in]  p_bio_mgmt_container QString [optional]
    * @param[in]  p_bio_mgmt_pathogen QString [optional]
    * @param[in]  p_bio_mgmt_pathred QString [optional]
    * @param[in]  p_bio_mgmt_vector QString [optional]
    * @param[in]  p_bio_mgmt_def_category QString [optional]
    * @param[in]  p_bio_mgmt_deficiencies double [optional]
    * @param[in]  p_bio_vio_code QString [optional]
    * @param[in]  p_bio_current_vio QString [optional]
    * @param[in]  p_bio_qtrs_in_vio double [optional]
    * @param[in]  p_bio_rpt_year QString [optional]
    * @param[in]  p_bio_vio_last_year QString [optional]
    * @param[in]  p_msgp_rpt_year QString [optional]
    * @param[in]  p_vio_last_year QString [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    * @param[in]  p_e90_count double [optional]
    * @param[in]  p_e90_years double [optional]
    * @param[in]  p_psc QString [optional]
    */
    virtual void cwaRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pstat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcomp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_plimits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ipfti = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pccs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexcd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pdwdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdpc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdmp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswcas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswparam = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_radwbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frswbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_months_last_dmr = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_indsw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mon_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iagency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_permitting_agency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_isws = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ms4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_alrexceed = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_years = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_psc = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_ff QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_maj QString [optional]
    * @param[in]  p_mact QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_iv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_imp_pol QString [optional]
    * @param[in]  p_imp_cau_grp QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_pstat QString [optional]
    * @param[in]  p_ptype QString [optional]
    * @param[in]  p_pcomp QString [optional]
    * @param[in]  p_plimits QString [optional]
    * @param[in]  p_pcss QString [optional]
    * @param[in]  p_pexp QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_ipfti QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_pccs QString [optional]
    * @param[in]  p_pexcd QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_pctrack QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_pt QString [optional]
    * @param[in]  p_pdwdist QString [optional]
    * @param[in]  p_pswdpc QString [optional]
    * @param[in]  p_pswdmp QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswcas QString [optional]
    * @param[in]  p_pswparam QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_radwbd QString [optional]
    * @param[in]  p_frswbd QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_months_last_dmr double [optional]
    * @param[in]  p_last_dmr_within QString [optional]
    * @param[in]  p_indsw QString [optional]
    * @param[in]  p_msgp_ptype QString [optional]
    * @param[in]  p_mon_type QString [optional]
    * @param[in]  p_iagency QString [optional]
    * @param[in]  p_permitting_agency QString [optional]
    * @param[in]  p_isws QString [optional]
    * @param[in]  p_iswss QString [optional]
    * @param[in]  p_iswss_id QString [optional]
    * @param[in]  p_ds1 QString [optional]
    * @param[in]  p_ds2 QString [optional]
    * @param[in]  p_da1 QString [optional]
    * @param[in]  p_da2 QString [optional]
    * @param[in]  p_ms4 QString [optional]
    * @param[in]  p_oo_fn QString [optional]
    * @param[in]  p_oo_f_ntype QString [optional]
    * @param[in]  p_oo_sa QString [optional]
    * @param[in]  p_oo_sa1 QString [optional]
    * @param[in]  p_oo_ct QString [optional]
    * @param[in]  p_oo_st QString [optional]
    * @param[in]  p_oo_zip QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_alrexceed double [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  p_bio_flag QString [optional]
    * @param[in]  p_bio_fac_type QString [optional]
    * @param[in]  p_bio_trtmnt_procs QString [optional]
    * @param[in]  p_bio_analy_method_catgry QString [optional]
    * @param[in]  p_bio_total_volume_amt QString [optional]
    * @param[in]  p_bio_mgmt_prctce_type QString [optional]
    * @param[in]  p_bio_mgmt_prctce_stype QString [optional]
    * @param[in]  p_bio_mgmt_prctce_handler QString [optional]
    * @param[in]  p_bio_mgmt_container QString [optional]
    * @param[in]  p_bio_mgmt_pathogen QString [optional]
    * @param[in]  p_bio_mgmt_pathred QString [optional]
    * @param[in]  p_bio_mgmt_vector QString [optional]
    * @param[in]  p_bio_mgmt_def_category QString [optional]
    * @param[in]  p_bio_mgmt_deficiencies double [optional]
    * @param[in]  p_bio_vio_code QString [optional]
    * @param[in]  p_bio_current_vio QString [optional]
    * @param[in]  p_bio_qtrs_in_vio double [optional]
    * @param[in]  p_bio_rpt_year QString [optional]
    * @param[in]  p_bio_vio_last_year QString [optional]
    * @param[in]  p_msgp_rpt_year QString [optional]
    * @param[in]  p_vio_last_year QString [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    * @param[in]  p_e90_count double [optional]
    * @param[in]  p_e90_years double [optional]
    * @param[in]  p_psc QString [optional]
    */
    virtual void cwaRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_maj = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_imp_cau_grp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_pstat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcomp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_plimits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pcss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ipfti = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pccs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pexcd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pctrack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pdwdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdpc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswdmp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswcas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswparam = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_radwbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frswbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_months_last_dmr = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_last_dmr_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_indsw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_ptype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mon_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iagency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_permitting_agency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_isws = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iswss_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ds2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_da2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ms4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_f_ntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oo_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_alrexceed = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_fac_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_trtmnt_procs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_analy_method_catgry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_total_volume_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_stype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_prctce_handler = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathogen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_pathred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_vector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_mgmt_def_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_mgmt_deficiencies = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_current_vio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_bio_qtrs_in_vio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_bio_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_bio_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_msgp_rpt_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_vio_last_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_e90_years = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_psc = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void cwaRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void cwaRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void cwaRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void cwaRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void cwaRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cwaRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void cwaRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cwaRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void cwaRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void cwaRestServicesGetFacilitiesGetSignal(OAI_cwa_rest_services_get_facilities_get_200_response summary);
    void cwaRestServicesGetFacilitiesPostSignal(OAI_cwa_rest_services_get_facilities_get_200_response summary);
    void cwaRestServicesGetFacilityInfoGetSignal(OAI_cwa_rest_services_get_facility_info_get_200_response summary);
    void cwaRestServicesGetFacilityInfoPostSignal(OAI_cwa_rest_services_get_facility_info_get_200_response summary);
    void cwaRestServicesGetGeojsonGetSignal(OAI_cwa_rest_services_get_geojson_get_200_response summary);
    void cwaRestServicesGetGeojsonPostSignal(OAI_cwa_rest_services_get_geojson_get_200_response summary);
    void cwaRestServicesGetInfoClustersGetSignal(OAIHttpFileElement summary);
    void cwaRestServicesGetInfoClustersPostSignal(OAIHttpFileElement summary);
    void cwaRestServicesGetMapGetSignal(OAI_cwa_rest_services_get_map_get_200_response summary);
    void cwaRestServicesGetMapPostSignal(OAI_cwa_rest_services_get_map_get_200_response summary);
    void cwaRestServicesGetQidGetSignal(OAI_cwa_rest_services_get_qid_get_200_response summary);
    void cwaRestServicesGetQidPostSignal(OAI_cwa_rest_services_get_qid_get_200_response summary);


    void cwaRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cwaRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cwaRestServicesGetFacilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_facilities_get_200_response summary);
    void cwaRestServicesGetFacilitiesPostSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_facilities_get_200_response summary);
    void cwaRestServicesGetFacilityInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_facility_info_get_200_response summary);
    void cwaRestServicesGetFacilityInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_facility_info_get_200_response summary);
    void cwaRestServicesGetGeojsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_geojson_get_200_response summary);
    void cwaRestServicesGetGeojsonPostSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_geojson_get_200_response summary);
    void cwaRestServicesGetInfoClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cwaRestServicesGetInfoClustersPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cwaRestServicesGetMapGetSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_map_get_200_response summary);
    void cwaRestServicesGetMapPostSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_map_get_200_response summary);
    void cwaRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_qid_get_200_response summary);
    void cwaRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_cwa_rest_services_get_qid_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetDownloadGetSignalError() instead")
    void cwaRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetDownloadPostSignalError() instead")
    void cwaRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilitiesGetSignalError() instead")
    void cwaRestServicesGetFacilitiesGetSignalE(OAI_cwa_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilitiesGetSignalError(OAI_cwa_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilitiesPostSignalError() instead")
    void cwaRestServicesGetFacilitiesPostSignalE(OAI_cwa_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilitiesPostSignalError(OAI_cwa_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilityInfoGetSignalError() instead")
    void cwaRestServicesGetFacilityInfoGetSignalE(OAI_cwa_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilityInfoGetSignalError(OAI_cwa_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilityInfoPostSignalError() instead")
    void cwaRestServicesGetFacilityInfoPostSignalE(OAI_cwa_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilityInfoPostSignalError(OAI_cwa_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetGeojsonGetSignalError() instead")
    void cwaRestServicesGetGeojsonGetSignalE(OAI_cwa_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetGeojsonGetSignalError(OAI_cwa_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetGeojsonPostSignalError() instead")
    void cwaRestServicesGetGeojsonPostSignalE(OAI_cwa_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetGeojsonPostSignalError(OAI_cwa_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetInfoClustersGetSignalError() instead")
    void cwaRestServicesGetInfoClustersGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetInfoClustersGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetInfoClustersPostSignalError() instead")
    void cwaRestServicesGetInfoClustersPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetInfoClustersPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetMapGetSignalError() instead")
    void cwaRestServicesGetMapGetSignalE(OAI_cwa_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetMapGetSignalError(OAI_cwa_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetMapPostSignalError() instead")
    void cwaRestServicesGetMapPostSignalE(OAI_cwa_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetMapPostSignalError(OAI_cwa_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetQidGetSignalError() instead")
    void cwaRestServicesGetQidGetSignalE(OAI_cwa_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetQidGetSignalError(OAI_cwa_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetQidPostSignalError() instead")
    void cwaRestServicesGetQidPostSignalE(OAI_cwa_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetQidPostSignalError(OAI_cwa_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetDownloadGetSignalErrorFull() instead")
    void cwaRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetDownloadPostSignalErrorFull() instead")
    void cwaRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilitiesGetSignalErrorFull() instead")
    void cwaRestServicesGetFacilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilitiesPostSignalErrorFull() instead")
    void cwaRestServicesGetFacilitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilityInfoGetSignalErrorFull() instead")
    void cwaRestServicesGetFacilityInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilityInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetFacilityInfoPostSignalErrorFull() instead")
    void cwaRestServicesGetFacilityInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetFacilityInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetGeojsonGetSignalErrorFull() instead")
    void cwaRestServicesGetGeojsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetGeojsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetGeojsonPostSignalErrorFull() instead")
    void cwaRestServicesGetGeojsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetGeojsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetInfoClustersGetSignalErrorFull() instead")
    void cwaRestServicesGetInfoClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetInfoClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetInfoClustersPostSignalErrorFull() instead")
    void cwaRestServicesGetInfoClustersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetInfoClustersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetMapGetSignalErrorFull() instead")
    void cwaRestServicesGetMapGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetMapGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetMapPostSignalErrorFull() instead")
    void cwaRestServicesGetMapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetMapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetQidGetSignalErrorFull() instead")
    void cwaRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cwaRestServicesGetQidPostSignalErrorFull() instead")
    void cwaRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cwaRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
