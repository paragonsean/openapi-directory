# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cwa02(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cw_astatus: str=None, formal_count: str=None, icon: str=None, informal_count: str=None, lat: str=None, lon: str=None, last_insp: str=None, name: str=None, puv: str=None, type: str=None):
        """Cwa02 - a model defined in OpenAPI

        :param cw_astatus: The cw_astatus of this Cwa02.
        :param formal_count: The formal_count of this Cwa02.
        :param icon: The icon of this Cwa02.
        :param informal_count: The informal_count of this Cwa02.
        :param lat: The lat of this Cwa02.
        :param lon: The lon of this Cwa02.
        :param last_insp: The last_insp of this Cwa02.
        :param name: The name of this Cwa02.
        :param puv: The puv of this Cwa02.
        :param type: The type of this Cwa02.
        """
        self.openapi_types = {
            'cw_astatus': str,
            'formal_count': str,
            'icon': str,
            'informal_count': str,
            'lat': str,
            'lon': str,
            'last_insp': str,
            'name': str,
            'puv': str,
            'type': str
        }

        self.attribute_map = {
            'cw_astatus': 'CWAstatus',
            'formal_count': 'FormalCount',
            'icon': 'ICON',
            'informal_count': 'InformalCount',
            'lat': 'LAT',
            'lon': 'LON',
            'last_insp': 'LastInsp',
            'name': 'NAME',
            'puv': 'PUV',
            'type': 'TYPE'
        }

        self._cw_astatus = cw_astatus
        self._formal_count = formal_count
        self._icon = icon
        self._informal_count = informal_count
        self._lat = lat
        self._lon = lon
        self._last_insp = last_insp
        self._name = name
        self._puv = puv
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cwa02':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cwa02 of this Cwa02.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cw_astatus(self):
        """Gets the cw_astatus of this Cwa02.

        Quarterly compliance status for the most recent 13 quarters. Each letter indicates the compliance status for the corresponding quarter.

        :return: The cw_astatus of this Cwa02.
        :rtype: str
        """
        return self._cw_astatus

    @cw_astatus.setter
    def cw_astatus(self, cw_astatus):
        """Sets the cw_astatus of this Cwa02.

        Quarterly compliance status for the most recent 13 quarters. Each letter indicates the compliance status for the corresponding quarter.

        :param cw_astatus: The cw_astatus of this Cwa02.
        :type cw_astatus: str
        """
        if cw_astatus is None:
            raise ValueError("Invalid value for `cw_astatus`, must not be `None`")

        self._cw_astatus = cw_astatus

    @property
    def formal_count(self):
        """Gets the formal_count of this Cwa02.

        The number of formal enforcement actions that have been taken against the facility

        :return: The formal_count of this Cwa02.
        :rtype: str
        """
        return self._formal_count

    @formal_count.setter
    def formal_count(self, formal_count):
        """Sets the formal_count of this Cwa02.

        The number of formal enforcement actions that have been taken against the facility

        :param formal_count: The formal_count of this Cwa02.
        :type formal_count: str
        """
        if formal_count is None:
            raise ValueError("Invalid value for `formal_count`, must not be `None`")

        self._formal_count = formal_count

    @property
    def icon(self):
        """Gets the icon of this Cwa02.

        Name of each individual icon file within the URL base

        :return: The icon of this Cwa02.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Cwa02.

        Name of each individual icon file within the URL base

        :param icon: The icon of this Cwa02.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def informal_count(self):
        """Gets the informal_count of this Cwa02.

        The number of informal enforcement actions that have been taken against the facility

        :return: The informal_count of this Cwa02.
        :rtype: str
        """
        return self._informal_count

    @informal_count.setter
    def informal_count(self, informal_count):
        """Sets the informal_count of this Cwa02.

        The number of informal enforcement actions that have been taken against the facility

        :param informal_count: The informal_count of this Cwa02.
        :type informal_count: str
        """
        if informal_count is None:
            raise ValueError("Invalid value for `informal_count`, must not be `None`")

        self._informal_count = informal_count

    @property
    def lat(self):
        """Gets the lat of this Cwa02.

        The latitude of the facility in degrees, to four decimal places

        :return: The lat of this Cwa02.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Cwa02.

        The latitude of the facility in degrees, to four decimal places

        :param lat: The lat of this Cwa02.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Cwa02.

        The longitude of the facility in degrees, to four decimal places

        :return: The lon of this Cwa02.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Cwa02.

        The longitude of the facility in degrees, to four decimal places

        :param lon: The lon of this Cwa02.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def last_insp(self):
        """Gets the last_insp of this Cwa02.

        The unique identifier for the last inspection

        :return: The last_insp of this Cwa02.
        :rtype: str
        """
        return self._last_insp

    @last_insp.setter
    def last_insp(self, last_insp):
        """Sets the last_insp of this Cwa02.

        The unique identifier for the last inspection

        :param last_insp: The last_insp of this Cwa02.
        :type last_insp: str
        """
        if last_insp is None:
            raise ValueError("Invalid value for `last_insp`, must not be `None`")

        self._last_insp = last_insp

    @property
    def name(self):
        """Gets the name of this Cwa02.

        For DFR, this is the Facility name. The name corresponds to the TYPE value

        :return: The name of this Cwa02.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cwa02.

        For DFR, this is the Facility name. The name corresponds to the TYPE value

        :param name: The name of this Cwa02.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def puv(self):
        """Gets the puv of this Cwa02.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility

        :return: The puv of this Cwa02.
        :rtype: str
        """
        return self._puv

    @puv.setter
    def puv(self, puv):
        """Sets the puv of this Cwa02.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility

        :param puv: The puv of this Cwa02.
        :type puv: str
        """
        if puv is None:
            raise ValueError("Invalid value for `puv`, must not be `None`")

        self._puv = puv

    @property
    def type(self):
        """Gets the type of this Cwa02.

        For DFR, this is always facility

        :return: The type of this Cwa02.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cwa02.

        For DFR, this is always facility

        :param type: The type of this Cwa02.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
