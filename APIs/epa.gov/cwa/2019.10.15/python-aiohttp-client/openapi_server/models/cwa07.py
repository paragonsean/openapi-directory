# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cwa07(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airids: str=None, active_lower48: str=None, alr_exceedences: str=None, associated_pollutant: str=None, attains_aquatic_life_use_flg: str=None, attains_au_category: str=None, attains_cause_groups: str=None, attains_cycle_year: str=None, attains_exceptnl_use_flg: str=None, attains_imp_water_flg: str=None, attains_possible_npdes_params: str=None, attains_recreation_use_flg: str=None, attains_shellfish_use_flg: str=None, attains_source: str=None, attains_state_causes: str=None, beach_close_last2yrs_flg: str=None, beach_close_last_year_flg: str=None, bio_analy_method_catgrys: str=None, bio_analy_method_catgrys2016: str=None, bio_analy_method_catgrys2017: str=None, bio_analy_methods: str=None, bio_analy_methods2016: str=None, bio_analy_methods2017: str=None, bio_comment_text: str=None, bio_comment_text2016: str=None, bio_comment_text2017: str=None, bio_incineration_sum: str=None, bio_incineration_sum2016: str=None, bio_incineration_sum2017: str=None, bio_land_application_sum: str=None, bio_land_application_sum2016: str=None, bio_land_application_sum2017: str=None, bio_mgmt_containers: str=None, bio_mgmt_containers2016: str=None, bio_mgmt_containers2017: str=None, bio_mgmt_def_categories: str=None, bio_mgmt_def_categories2016: str=None, bio_mgmt_def_categories2017: str=None, bio_mgmt_def_current_cnt: str=None, bio_mgmt_def_current_cnt2016: str=None, bio_mgmt_def_current_cnt2017: str=None, bio_mgmt_deficiencies: str=None, bio_mgmt_deficiencies2016: str=None, bio_mgmt_deficiencies2017: str=None, bio_mgmt_handlers: str=None, bio_mgmt_handlers2016: str=None, bio_mgmt_handlers2017: str=None, bio_mgmt_pathogens: str=None, bio_mgmt_pathogens2016: str=None, bio_mgmt_pathogens2017: str=None, bio_mgmt_pathreds: str=None, bio_mgmt_pathreds2016: str=None, bio_mgmt_pathreds2017: str=None, bio_mgmt_prctce_stypes: str=None, bio_mgmt_prctce_stypes2016: str=None, bio_mgmt_prctce_stypes2017: str=None, bio_mgmt_prctce_types: str=None, bio_mgmt_prctce_types2016: str=None, bio_mgmt_prctce_types2017: str=None, bio_mgmt_vectors: str=None, bio_mgmt_vectors2016: str=None, bio_mgmt_vectors2017: str=None, bio_other_management_sum: str=None, bio_other_management_sum2016: str=None, bio_other_management_sum2017: str=None, bio_other_mgmt_prctc_txts: str=None, bio_other_mgmt_prctc_txts2016: str=None, bio_other_mgmt_prctc_txts2017: str=None, bio_qtrs_with_vio: str=None, bio_report_date: str=None, bio_report_date2016: str=None, bio_report_date2017: str=None, bio_report_year: str=None, bio_report_years: str=None, bio_reporting_obligations: str=None, bio_reporting_obligations2016: str=None, bio_reporting_obligations2017: str=None, bio_surface_disp_sum: str=None, bio_surface_disp_sum2016: str=None, bio_surface_disp_sum2017: str=None, bio_total_volume_amt: str=None, bio_total_volume_amt2016: str=None, bio_total_volume_amt2017: str=None, bio_trmnt_prcss_cmnt_txts2016: str=None, bio_trmnt_prcss_cmnt_txts2017: str=None, bio_trtmnt_prcss_cmmnt_txts: str=None, bio_trtmnt_processes: str=None, bio_trtmnt_processes2016: str=None, bio_trtmnt_processes2017: str=None, bio_vio_last_year: str=None, bio_vio_last_year_flag: str=None, bio_vio_status: str=None, bio_viol_flag: str=None, biosolids_flag: str=None, cwp13qtrs_compl_history: str=None, cwp_actual_average_flow_nmbr: str=None, cwp_bio_fea_count: str=None, cwp_bio_iea_count: str=None, cwp_bio_insp_count: str=None, cwp_bio_penalties: str=None, cwp_case_ids: str=None, cwp_city: str=None, cwp_compliance_tracking: str=None, cwp_county: str=None, cwp_cso_flag: str=None, cwp_cso_outfalls: str=None, cwp_date_last_bio_fea: str=None, cwp_date_last_bio_fea_epa: str=None, cwp_date_last_bio_fea_st: str=None, cwp_date_last_bio_iea: str=None, cwp_date_last_bio_iea_epa: str=None, cwp_date_last_bio_iea_st: str=None, cwp_date_last_bio_insp: str=None, cwp_date_last_bio_insp_epa: str=None, cwp_date_last_bio_insp_st: str=None, cwp_date_last_bio_penalty: str=None, cwp_date_last_fea: str=None, cwp_date_last_fea_epa: str=None, cwp_date_last_fea_st: str=None, cwp_date_last_iea_epa: str=None, cwp_date_last_iea_st: str=None, cwp_date_last_informal_ea: str=None, cwp_date_last_insp_epa: str=None, cwp_date_last_insp_st: str=None, cwp_date_last_inspection: str=None, cwp_date_last_penalty: str=None, cwp_days_last_bio_insp: str=None, cwp_days_last_inspection: str=None, cwpe90_cnt: str=None, cwpepa_region: str=None, cwp_effective_date: str=None, cwp_expiration_date: str=None, cwpfips_code: str=None, cwp_facility_type_code: str=None, cwp_facility_type_indicator: str=None, cwp_formal_ea_cnt: str=None, cwp_imp_water_flg: str=None, cwp_indian_cntry_flg: str=None, cwp_informal_enf_act_count: str=None, cwp_inspection_count: str=None, cwp_issue_date: str=None, cwp_major_minor_status_flag: str=None, cwpnaics_codes: str=None, cwp_name: str=None, cwp_permit_status_code: str=None, cwp_permit_status_desc: str=None, cwp_permit_type_code: str=None, cwp_permit_type_desc: str=None, cwp_qtrs_with_nc: str=None, cwp_qtrs_with_snc: str=None, cwpsic_codes: str=None, cwpsnc_event_desc: str=None, cwpsnc_status: str=None, cwpsnc_status_date: str=None, cwp_state: str=None, cwp_state_district: str=None, cwp_state_water_body_code: str=None, cwp_state_water_body_name: str=None, cwp_status: str=None, cwp_street: str=None, cwptr_ibal_land_code: str=None, cwp_termination_date: str=None, cwp_total_design_flow_nmbr: str=None, cwp_total_penalties: str=None, cwp_version_nmbr: str=None, cwp_vio_status: str=None, cwp_viol_status: str=None, cwp_zip: str=None, calculated_accuracy_meters: str=None, census_block_group: str=None, certified_date: str=None, chesapeake_bay_flag: str=None, collection_method: str=None, control_measure: str=None, control_measure_schedule: str=None, curr_sv_flag: str=None, curr_vio_flag: str=None, dmr_impaired_poll: str=None, dmr_pounds: str=None, dmr_twpe: str=None, dsch_to_ms4: str=None, e90_exceeds1yr: str=None, e90_exceeds2yr: str=None, e90_exceeds3yr: str=None, e90_exceeds4yr: str=None, e90_exceeds5yr: str=None, e90_pollutants1yr: str=None, e90_pollutants2yr: str=None, e90_pollutants3yr: str=None, e90_pollutants4yr: str=None, e90_pollutants5yr: str=None, epa_system: str=None, ea5yr_flag: str=None, eff_charts_flag: str=None, eff_exceeds: str=None, ejscreen_flag: str=None, ejscreen_flag_us: str=None, electr_rpt_waiver_eff_date: str=None, electr_rpt_waiver_exp_date: str=None, electr_rpt_waiver_type_code: str=None, electr_rpt_waiver_type_desc: str=None, electr_submission_type_code: str=None, electr_submission_type_desc: str=None, exposed_activity: str=None, fac_county_name: str=None, fac_derived_huc: str=None, fac_derived_tr_ibes: str=None, fac_derived_wbd: str=None, fac_derived_wbdhu8: str=None, fac_derived_wbdhu8_name: str=None, fac_derived_wbd_name: str=None, fac_fips_code: str=None, fac_federal_agency_code: str=None, fac_federal_agency_name: str=None, fac_indian_cntry_flg: str=None, fac_indian_spatial_flg: str=None, fac_lat: str=None, fac_long: str=None, fac_map_flg: str=None, fac_map_icon: str=None, fac_percent_minority: str=None, fac_pop_den: str=None, fac_std_county_name: str=None, fac_tri_potw_trans: str=None, fac_tri_reporter: str=None, fac_trisw_rel: str=None, fac_us_mex_border_flg: str=None, historic_criterion_code: str=None, indsw_flag: str=None, infea5yr_flag: str=None, insp5yr_flag: str=None, insp_def5yr_cnt: str=None, issuing_agency: str=None, last_dmr_value_rcvd_date: str=None, lim_pollutant: str=None, lower48: str=None, map: str=None, master_external_permit_nmbr: str=None, max_pctile_us: str=None, max_score: str=None, miss_dmr_qtrs: str=None, msgp_corrective_action_smmry: str=None, msgp_facility_inspctn_smmry: str=None, msgp_last_report_year: str=None, msgp_no_further_rdctn_rtnle: str=None, msgp_permit_type: str=None, msgp_visual_assessment_smmry: str=None, npdes_data_groups: str=None, npdes_data_groups_descs: str=None, npdesids: str=None, object_id: str=None, other_permit_ids: str=None, over80_count_us: str=None, past_cal_yr_average_flow: str=None, past_cal_yr_conv_pol_ovr_lmt: str=None, past_cal_yr_conv_pollutants: str=None, past_cal_yr_toxic_pol_ovr_lmt: str=None, past_cal_yr_toxic_pollutants: str=None, pctile_cancer_us: str=None, pctile_dpm_us: str=None, pctile_o3_us: str=None, pctile_pctpre1960_us: str=None, pctile_pm_us: str=None, pctile_proximity_npdesus: str=None, pctile_proximity_npl_us: str=None, pctile_proximity_rmp_us: str=None, pctile_proximity_tsdf_us: str=None, pctile_resp_us: str=None, pctile_traffic_score_us: str=None, permit_components: str=None, permit_name: str=None, permitting_agency: str=None, poll_with_violation: str=None, rcraids: str=None, rad_gnis_name: str=None, rad_hu12_name: str=None, rad_reachcode: str=None, rad_wbdhu8: str=None, rad_wbdhu8_name: str=None, rad_wbd_huc12: str=None, receiving_ms4_name: str=None, reference_point: str=None, registry_id: str=None, rmp_ids: str=None, sdwaids: str=None, score: str=None, sector: str=None, source_id: str=None, species_critical_habital_flag: str=None, state_auth_biosolids: str=None, state_auth_fedfac: str=None, state_auth_gen: str=None, state_auth_npdes: str=None, state_auth_pretreat: str=None, statute: str=None, storm_water_area: str=None, submitted_date: str=None, subsector: str=None, swppp_url: str=None, triids: str=None, tr_ibal_flag: str=None, type_of_monitoring: str=None, type_of_water: str=None, vio_last_year: str=None, viol_flag: str=None, web_docs: str=None):
        """Cwa07 - a model defined in OpenAPI

        :param airids: The airids of this Cwa07.
        :param active_lower48: The active_lower48 of this Cwa07.
        :param alr_exceedences: The alr_exceedences of this Cwa07.
        :param associated_pollutant: The associated_pollutant of this Cwa07.
        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Cwa07.
        :param attains_au_category: The attains_au_category of this Cwa07.
        :param attains_cause_groups: The attains_cause_groups of this Cwa07.
        :param attains_cycle_year: The attains_cycle_year of this Cwa07.
        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Cwa07.
        :param attains_imp_water_flg: The attains_imp_water_flg of this Cwa07.
        :param attains_possible_npdes_params: The attains_possible_npdes_params of this Cwa07.
        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Cwa07.
        :param attains_shellfish_use_flg: The attains_shellfish_use_flg of this Cwa07.
        :param attains_source: The attains_source of this Cwa07.
        :param attains_state_causes: The attains_state_causes of this Cwa07.
        :param beach_close_last2yrs_flg: The beach_close_last2yrs_flg of this Cwa07.
        :param beach_close_last_year_flg: The beach_close_last_year_flg of this Cwa07.
        :param bio_analy_method_catgrys: The bio_analy_method_catgrys of this Cwa07.
        :param bio_analy_method_catgrys2016: The bio_analy_method_catgrys2016 of this Cwa07.
        :param bio_analy_method_catgrys2017: The bio_analy_method_catgrys2017 of this Cwa07.
        :param bio_analy_methods: The bio_analy_methods of this Cwa07.
        :param bio_analy_methods2016: The bio_analy_methods2016 of this Cwa07.
        :param bio_analy_methods2017: The bio_analy_methods2017 of this Cwa07.
        :param bio_comment_text: The bio_comment_text of this Cwa07.
        :param bio_comment_text2016: The bio_comment_text2016 of this Cwa07.
        :param bio_comment_text2017: The bio_comment_text2017 of this Cwa07.
        :param bio_incineration_sum: The bio_incineration_sum of this Cwa07.
        :param bio_incineration_sum2016: The bio_incineration_sum2016 of this Cwa07.
        :param bio_incineration_sum2017: The bio_incineration_sum2017 of this Cwa07.
        :param bio_land_application_sum: The bio_land_application_sum of this Cwa07.
        :param bio_land_application_sum2016: The bio_land_application_sum2016 of this Cwa07.
        :param bio_land_application_sum2017: The bio_land_application_sum2017 of this Cwa07.
        :param bio_mgmt_containers: The bio_mgmt_containers of this Cwa07.
        :param bio_mgmt_containers2016: The bio_mgmt_containers2016 of this Cwa07.
        :param bio_mgmt_containers2017: The bio_mgmt_containers2017 of this Cwa07.
        :param bio_mgmt_def_categories: The bio_mgmt_def_categories of this Cwa07.
        :param bio_mgmt_def_categories2016: The bio_mgmt_def_categories2016 of this Cwa07.
        :param bio_mgmt_def_categories2017: The bio_mgmt_def_categories2017 of this Cwa07.
        :param bio_mgmt_def_current_cnt: The bio_mgmt_def_current_cnt of this Cwa07.
        :param bio_mgmt_def_current_cnt2016: The bio_mgmt_def_current_cnt2016 of this Cwa07.
        :param bio_mgmt_def_current_cnt2017: The bio_mgmt_def_current_cnt2017 of this Cwa07.
        :param bio_mgmt_deficiencies: The bio_mgmt_deficiencies of this Cwa07.
        :param bio_mgmt_deficiencies2016: The bio_mgmt_deficiencies2016 of this Cwa07.
        :param bio_mgmt_deficiencies2017: The bio_mgmt_deficiencies2017 of this Cwa07.
        :param bio_mgmt_handlers: The bio_mgmt_handlers of this Cwa07.
        :param bio_mgmt_handlers2016: The bio_mgmt_handlers2016 of this Cwa07.
        :param bio_mgmt_handlers2017: The bio_mgmt_handlers2017 of this Cwa07.
        :param bio_mgmt_pathogens: The bio_mgmt_pathogens of this Cwa07.
        :param bio_mgmt_pathogens2016: The bio_mgmt_pathogens2016 of this Cwa07.
        :param bio_mgmt_pathogens2017: The bio_mgmt_pathogens2017 of this Cwa07.
        :param bio_mgmt_pathreds: The bio_mgmt_pathreds of this Cwa07.
        :param bio_mgmt_pathreds2016: The bio_mgmt_pathreds2016 of this Cwa07.
        :param bio_mgmt_pathreds2017: The bio_mgmt_pathreds2017 of this Cwa07.
        :param bio_mgmt_prctce_stypes: The bio_mgmt_prctce_stypes of this Cwa07.
        :param bio_mgmt_prctce_stypes2016: The bio_mgmt_prctce_stypes2016 of this Cwa07.
        :param bio_mgmt_prctce_stypes2017: The bio_mgmt_prctce_stypes2017 of this Cwa07.
        :param bio_mgmt_prctce_types: The bio_mgmt_prctce_types of this Cwa07.
        :param bio_mgmt_prctce_types2016: The bio_mgmt_prctce_types2016 of this Cwa07.
        :param bio_mgmt_prctce_types2017: The bio_mgmt_prctce_types2017 of this Cwa07.
        :param bio_mgmt_vectors: The bio_mgmt_vectors of this Cwa07.
        :param bio_mgmt_vectors2016: The bio_mgmt_vectors2016 of this Cwa07.
        :param bio_mgmt_vectors2017: The bio_mgmt_vectors2017 of this Cwa07.
        :param bio_other_management_sum: The bio_other_management_sum of this Cwa07.
        :param bio_other_management_sum2016: The bio_other_management_sum2016 of this Cwa07.
        :param bio_other_management_sum2017: The bio_other_management_sum2017 of this Cwa07.
        :param bio_other_mgmt_prctc_txts: The bio_other_mgmt_prctc_txts of this Cwa07.
        :param bio_other_mgmt_prctc_txts2016: The bio_other_mgmt_prctc_txts2016 of this Cwa07.
        :param bio_other_mgmt_prctc_txts2017: The bio_other_mgmt_prctc_txts2017 of this Cwa07.
        :param bio_qtrs_with_vio: The bio_qtrs_with_vio of this Cwa07.
        :param bio_report_date: The bio_report_date of this Cwa07.
        :param bio_report_date2016: The bio_report_date2016 of this Cwa07.
        :param bio_report_date2017: The bio_report_date2017 of this Cwa07.
        :param bio_report_year: The bio_report_year of this Cwa07.
        :param bio_report_years: The bio_report_years of this Cwa07.
        :param bio_reporting_obligations: The bio_reporting_obligations of this Cwa07.
        :param bio_reporting_obligations2016: The bio_reporting_obligations2016 of this Cwa07.
        :param bio_reporting_obligations2017: The bio_reporting_obligations2017 of this Cwa07.
        :param bio_surface_disp_sum: The bio_surface_disp_sum of this Cwa07.
        :param bio_surface_disp_sum2016: The bio_surface_disp_sum2016 of this Cwa07.
        :param bio_surface_disp_sum2017: The bio_surface_disp_sum2017 of this Cwa07.
        :param bio_total_volume_amt: The bio_total_volume_amt of this Cwa07.
        :param bio_total_volume_amt2016: The bio_total_volume_amt2016 of this Cwa07.
        :param bio_total_volume_amt2017: The bio_total_volume_amt2017 of this Cwa07.
        :param bio_trmnt_prcss_cmnt_txts2016: The bio_trmnt_prcss_cmnt_txts2016 of this Cwa07.
        :param bio_trmnt_prcss_cmnt_txts2017: The bio_trmnt_prcss_cmnt_txts2017 of this Cwa07.
        :param bio_trtmnt_prcss_cmmnt_txts: The bio_trtmnt_prcss_cmmnt_txts of this Cwa07.
        :param bio_trtmnt_processes: The bio_trtmnt_processes of this Cwa07.
        :param bio_trtmnt_processes2016: The bio_trtmnt_processes2016 of this Cwa07.
        :param bio_trtmnt_processes2017: The bio_trtmnt_processes2017 of this Cwa07.
        :param bio_vio_last_year: The bio_vio_last_year of this Cwa07.
        :param bio_vio_last_year_flag: The bio_vio_last_year_flag of this Cwa07.
        :param bio_vio_status: The bio_vio_status of this Cwa07.
        :param bio_viol_flag: The bio_viol_flag of this Cwa07.
        :param biosolids_flag: The biosolids_flag of this Cwa07.
        :param cwp13qtrs_compl_history: The cwp13qtrs_compl_history of this Cwa07.
        :param cwp_actual_average_flow_nmbr: The cwp_actual_average_flow_nmbr of this Cwa07.
        :param cwp_bio_fea_count: The cwp_bio_fea_count of this Cwa07.
        :param cwp_bio_iea_count: The cwp_bio_iea_count of this Cwa07.
        :param cwp_bio_insp_count: The cwp_bio_insp_count of this Cwa07.
        :param cwp_bio_penalties: The cwp_bio_penalties of this Cwa07.
        :param cwp_case_ids: The cwp_case_ids of this Cwa07.
        :param cwp_city: The cwp_city of this Cwa07.
        :param cwp_compliance_tracking: The cwp_compliance_tracking of this Cwa07.
        :param cwp_county: The cwp_county of this Cwa07.
        :param cwp_cso_flag: The cwp_cso_flag of this Cwa07.
        :param cwp_cso_outfalls: The cwp_cso_outfalls of this Cwa07.
        :param cwp_date_last_bio_fea: The cwp_date_last_bio_fea of this Cwa07.
        :param cwp_date_last_bio_fea_epa: The cwp_date_last_bio_fea_epa of this Cwa07.
        :param cwp_date_last_bio_fea_st: The cwp_date_last_bio_fea_st of this Cwa07.
        :param cwp_date_last_bio_iea: The cwp_date_last_bio_iea of this Cwa07.
        :param cwp_date_last_bio_iea_epa: The cwp_date_last_bio_iea_epa of this Cwa07.
        :param cwp_date_last_bio_iea_st: The cwp_date_last_bio_iea_st of this Cwa07.
        :param cwp_date_last_bio_insp: The cwp_date_last_bio_insp of this Cwa07.
        :param cwp_date_last_bio_insp_epa: The cwp_date_last_bio_insp_epa of this Cwa07.
        :param cwp_date_last_bio_insp_st: The cwp_date_last_bio_insp_st of this Cwa07.
        :param cwp_date_last_bio_penalty: The cwp_date_last_bio_penalty of this Cwa07.
        :param cwp_date_last_fea: The cwp_date_last_fea of this Cwa07.
        :param cwp_date_last_fea_epa: The cwp_date_last_fea_epa of this Cwa07.
        :param cwp_date_last_fea_st: The cwp_date_last_fea_st of this Cwa07.
        :param cwp_date_last_iea_epa: The cwp_date_last_iea_epa of this Cwa07.
        :param cwp_date_last_iea_st: The cwp_date_last_iea_st of this Cwa07.
        :param cwp_date_last_informal_ea: The cwp_date_last_informal_ea of this Cwa07.
        :param cwp_date_last_insp_epa: The cwp_date_last_insp_epa of this Cwa07.
        :param cwp_date_last_insp_st: The cwp_date_last_insp_st of this Cwa07.
        :param cwp_date_last_inspection: The cwp_date_last_inspection of this Cwa07.
        :param cwp_date_last_penalty: The cwp_date_last_penalty of this Cwa07.
        :param cwp_days_last_bio_insp: The cwp_days_last_bio_insp of this Cwa07.
        :param cwp_days_last_inspection: The cwp_days_last_inspection of this Cwa07.
        :param cwpe90_cnt: The cwpe90_cnt of this Cwa07.
        :param cwpepa_region: The cwpepa_region of this Cwa07.
        :param cwp_effective_date: The cwp_effective_date of this Cwa07.
        :param cwp_expiration_date: The cwp_expiration_date of this Cwa07.
        :param cwpfips_code: The cwpfips_code of this Cwa07.
        :param cwp_facility_type_code: The cwp_facility_type_code of this Cwa07.
        :param cwp_facility_type_indicator: The cwp_facility_type_indicator of this Cwa07.
        :param cwp_formal_ea_cnt: The cwp_formal_ea_cnt of this Cwa07.
        :param cwp_imp_water_flg: The cwp_imp_water_flg of this Cwa07.
        :param cwp_indian_cntry_flg: The cwp_indian_cntry_flg of this Cwa07.
        :param cwp_informal_enf_act_count: The cwp_informal_enf_act_count of this Cwa07.
        :param cwp_inspection_count: The cwp_inspection_count of this Cwa07.
        :param cwp_issue_date: The cwp_issue_date of this Cwa07.
        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Cwa07.
        :param cwpnaics_codes: The cwpnaics_codes of this Cwa07.
        :param cwp_name: The cwp_name of this Cwa07.
        :param cwp_permit_status_code: The cwp_permit_status_code of this Cwa07.
        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Cwa07.
        :param cwp_permit_type_code: The cwp_permit_type_code of this Cwa07.
        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Cwa07.
        :param cwp_qtrs_with_nc: The cwp_qtrs_with_nc of this Cwa07.
        :param cwp_qtrs_with_snc: The cwp_qtrs_with_snc of this Cwa07.
        :param cwpsic_codes: The cwpsic_codes of this Cwa07.
        :param cwpsnc_event_desc: The cwpsnc_event_desc of this Cwa07.
        :param cwpsnc_status: The cwpsnc_status of this Cwa07.
        :param cwpsnc_status_date: The cwpsnc_status_date of this Cwa07.
        :param cwp_state: The cwp_state of this Cwa07.
        :param cwp_state_district: The cwp_state_district of this Cwa07.
        :param cwp_state_water_body_code: The cwp_state_water_body_code of this Cwa07.
        :param cwp_state_water_body_name: The cwp_state_water_body_name of this Cwa07.
        :param cwp_status: The cwp_status of this Cwa07.
        :param cwp_street: The cwp_street of this Cwa07.
        :param cwptr_ibal_land_code: The cwptr_ibal_land_code of this Cwa07.
        :param cwp_termination_date: The cwp_termination_date of this Cwa07.
        :param cwp_total_design_flow_nmbr: The cwp_total_design_flow_nmbr of this Cwa07.
        :param cwp_total_penalties: The cwp_total_penalties of this Cwa07.
        :param cwp_version_nmbr: The cwp_version_nmbr of this Cwa07.
        :param cwp_vio_status: The cwp_vio_status of this Cwa07.
        :param cwp_viol_status: The cwp_viol_status of this Cwa07.
        :param cwp_zip: The cwp_zip of this Cwa07.
        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Cwa07.
        :param census_block_group: The census_block_group of this Cwa07.
        :param certified_date: The certified_date of this Cwa07.
        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Cwa07.
        :param collection_method: The collection_method of this Cwa07.
        :param control_measure: The control_measure of this Cwa07.
        :param control_measure_schedule: The control_measure_schedule of this Cwa07.
        :param curr_sv_flag: The curr_sv_flag of this Cwa07.
        :param curr_vio_flag: The curr_vio_flag of this Cwa07.
        :param dmr_impaired_poll: The dmr_impaired_poll of this Cwa07.
        :param dmr_pounds: The dmr_pounds of this Cwa07.
        :param dmr_twpe: The dmr_twpe of this Cwa07.
        :param dsch_to_ms4: The dsch_to_ms4 of this Cwa07.
        :param e90_exceeds1yr: The e90_exceeds1yr of this Cwa07.
        :param e90_exceeds2yr: The e90_exceeds2yr of this Cwa07.
        :param e90_exceeds3yr: The e90_exceeds3yr of this Cwa07.
        :param e90_exceeds4yr: The e90_exceeds4yr of this Cwa07.
        :param e90_exceeds5yr: The e90_exceeds5yr of this Cwa07.
        :param e90_pollutants1yr: The e90_pollutants1yr of this Cwa07.
        :param e90_pollutants2yr: The e90_pollutants2yr of this Cwa07.
        :param e90_pollutants3yr: The e90_pollutants3yr of this Cwa07.
        :param e90_pollutants4yr: The e90_pollutants4yr of this Cwa07.
        :param e90_pollutants5yr: The e90_pollutants5yr of this Cwa07.
        :param epa_system: The epa_system of this Cwa07.
        :param ea5yr_flag: The ea5yr_flag of this Cwa07.
        :param eff_charts_flag: The eff_charts_flag of this Cwa07.
        :param eff_exceeds: The eff_exceeds of this Cwa07.
        :param ejscreen_flag: The ejscreen_flag of this Cwa07.
        :param ejscreen_flag_us: The ejscreen_flag_us of this Cwa07.
        :param electr_rpt_waiver_eff_date: The electr_rpt_waiver_eff_date of this Cwa07.
        :param electr_rpt_waiver_exp_date: The electr_rpt_waiver_exp_date of this Cwa07.
        :param electr_rpt_waiver_type_code: The electr_rpt_waiver_type_code of this Cwa07.
        :param electr_rpt_waiver_type_desc: The electr_rpt_waiver_type_desc of this Cwa07.
        :param electr_submission_type_code: The electr_submission_type_code of this Cwa07.
        :param electr_submission_type_desc: The electr_submission_type_desc of this Cwa07.
        :param exposed_activity: The exposed_activity of this Cwa07.
        :param fac_county_name: The fac_county_name of this Cwa07.
        :param fac_derived_huc: The fac_derived_huc of this Cwa07.
        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Cwa07.
        :param fac_derived_wbd: The fac_derived_wbd of this Cwa07.
        :param fac_derived_wbdhu8: The fac_derived_wbdhu8 of this Cwa07.
        :param fac_derived_wbdhu8_name: The fac_derived_wbdhu8_name of this Cwa07.
        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Cwa07.
        :param fac_fips_code: The fac_fips_code of this Cwa07.
        :param fac_federal_agency_code: The fac_federal_agency_code of this Cwa07.
        :param fac_federal_agency_name: The fac_federal_agency_name of this Cwa07.
        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Cwa07.
        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Cwa07.
        :param fac_lat: The fac_lat of this Cwa07.
        :param fac_long: The fac_long of this Cwa07.
        :param fac_map_flg: The fac_map_flg of this Cwa07.
        :param fac_map_icon: The fac_map_icon of this Cwa07.
        :param fac_percent_minority: The fac_percent_minority of this Cwa07.
        :param fac_pop_den: The fac_pop_den of this Cwa07.
        :param fac_std_county_name: The fac_std_county_name of this Cwa07.
        :param fac_tri_potw_trans: The fac_tri_potw_trans of this Cwa07.
        :param fac_tri_reporter: The fac_tri_reporter of this Cwa07.
        :param fac_trisw_rel: The fac_trisw_rel of this Cwa07.
        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Cwa07.
        :param historic_criterion_code: The historic_criterion_code of this Cwa07.
        :param indsw_flag: The indsw_flag of this Cwa07.
        :param infea5yr_flag: The infea5yr_flag of this Cwa07.
        :param insp5yr_flag: The insp5yr_flag of this Cwa07.
        :param insp_def5yr_cnt: The insp_def5yr_cnt of this Cwa07.
        :param issuing_agency: The issuing_agency of this Cwa07.
        :param last_dmr_value_rcvd_date: The last_dmr_value_rcvd_date of this Cwa07.
        :param lim_pollutant: The lim_pollutant of this Cwa07.
        :param lower48: The lower48 of this Cwa07.
        :param map: The map of this Cwa07.
        :param master_external_permit_nmbr: The master_external_permit_nmbr of this Cwa07.
        :param max_pctile_us: The max_pctile_us of this Cwa07.
        :param max_score: The max_score of this Cwa07.
        :param miss_dmr_qtrs: The miss_dmr_qtrs of this Cwa07.
        :param msgp_corrective_action_smmry: The msgp_corrective_action_smmry of this Cwa07.
        :param msgp_facility_inspctn_smmry: The msgp_facility_inspctn_smmry of this Cwa07.
        :param msgp_last_report_year: The msgp_last_report_year of this Cwa07.
        :param msgp_no_further_rdctn_rtnle: The msgp_no_further_rdctn_rtnle of this Cwa07.
        :param msgp_permit_type: The msgp_permit_type of this Cwa07.
        :param msgp_visual_assessment_smmry: The msgp_visual_assessment_smmry of this Cwa07.
        :param npdes_data_groups: The npdes_data_groups of this Cwa07.
        :param npdes_data_groups_descs: The npdes_data_groups_descs of this Cwa07.
        :param npdesids: The npdesids of this Cwa07.
        :param object_id: The object_id of this Cwa07.
        :param other_permit_ids: The other_permit_ids of this Cwa07.
        :param over80_count_us: The over80_count_us of this Cwa07.
        :param past_cal_yr_average_flow: The past_cal_yr_average_flow of this Cwa07.
        :param past_cal_yr_conv_pol_ovr_lmt: The past_cal_yr_conv_pol_ovr_lmt of this Cwa07.
        :param past_cal_yr_conv_pollutants: The past_cal_yr_conv_pollutants of this Cwa07.
        :param past_cal_yr_toxic_pol_ovr_lmt: The past_cal_yr_toxic_pol_ovr_lmt of this Cwa07.
        :param past_cal_yr_toxic_pollutants: The past_cal_yr_toxic_pollutants of this Cwa07.
        :param pctile_cancer_us: The pctile_cancer_us of this Cwa07.
        :param pctile_dpm_us: The pctile_dpm_us of this Cwa07.
        :param pctile_o3_us: The pctile_o3_us of this Cwa07.
        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Cwa07.
        :param pctile_pm_us: The pctile_pm_us of this Cwa07.
        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Cwa07.
        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Cwa07.
        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Cwa07.
        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Cwa07.
        :param pctile_resp_us: The pctile_resp_us of this Cwa07.
        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Cwa07.
        :param permit_components: The permit_components of this Cwa07.
        :param permit_name: The permit_name of this Cwa07.
        :param permitting_agency: The permitting_agency of this Cwa07.
        :param poll_with_violation: The poll_with_violation of this Cwa07.
        :param rcraids: The rcraids of this Cwa07.
        :param rad_gnis_name: The rad_gnis_name of this Cwa07.
        :param rad_hu12_name: The rad_hu12_name of this Cwa07.
        :param rad_reachcode: The rad_reachcode of this Cwa07.
        :param rad_wbdhu8: The rad_wbdhu8 of this Cwa07.
        :param rad_wbdhu8_name: The rad_wbdhu8_name of this Cwa07.
        :param rad_wbd_huc12: The rad_wbd_huc12 of this Cwa07.
        :param receiving_ms4_name: The receiving_ms4_name of this Cwa07.
        :param reference_point: The reference_point of this Cwa07.
        :param registry_id: The registry_id of this Cwa07.
        :param rmp_ids: The rmp_ids of this Cwa07.
        :param sdwaids: The sdwaids of this Cwa07.
        :param score: The score of this Cwa07.
        :param sector: The sector of this Cwa07.
        :param source_id: The source_id of this Cwa07.
        :param species_critical_habital_flag: The species_critical_habital_flag of this Cwa07.
        :param state_auth_biosolids: The state_auth_biosolids of this Cwa07.
        :param state_auth_fedfac: The state_auth_fedfac of this Cwa07.
        :param state_auth_gen: The state_auth_gen of this Cwa07.
        :param state_auth_npdes: The state_auth_npdes of this Cwa07.
        :param state_auth_pretreat: The state_auth_pretreat of this Cwa07.
        :param statute: The statute of this Cwa07.
        :param storm_water_area: The storm_water_area of this Cwa07.
        :param submitted_date: The submitted_date of this Cwa07.
        :param subsector: The subsector of this Cwa07.
        :param swppp_url: The swppp_url of this Cwa07.
        :param triids: The triids of this Cwa07.
        :param tr_ibal_flag: The tr_ibal_flag of this Cwa07.
        :param type_of_monitoring: The type_of_monitoring of this Cwa07.
        :param type_of_water: The type_of_water of this Cwa07.
        :param vio_last_year: The vio_last_year of this Cwa07.
        :param viol_flag: The viol_flag of this Cwa07.
        :param web_docs: The web_docs of this Cwa07.
        """
        self.openapi_types = {
            'airids': str,
            'active_lower48': str,
            'alr_exceedences': str,
            'associated_pollutant': str,
            'attains_aquatic_life_use_flg': str,
            'attains_au_category': str,
            'attains_cause_groups': str,
            'attains_cycle_year': str,
            'attains_exceptnl_use_flg': str,
            'attains_imp_water_flg': str,
            'attains_possible_npdes_params': str,
            'attains_recreation_use_flg': str,
            'attains_shellfish_use_flg': str,
            'attains_source': str,
            'attains_state_causes': str,
            'beach_close_last2yrs_flg': str,
            'beach_close_last_year_flg': str,
            'bio_analy_method_catgrys': str,
            'bio_analy_method_catgrys2016': str,
            'bio_analy_method_catgrys2017': str,
            'bio_analy_methods': str,
            'bio_analy_methods2016': str,
            'bio_analy_methods2017': str,
            'bio_comment_text': str,
            'bio_comment_text2016': str,
            'bio_comment_text2017': str,
            'bio_incineration_sum': str,
            'bio_incineration_sum2016': str,
            'bio_incineration_sum2017': str,
            'bio_land_application_sum': str,
            'bio_land_application_sum2016': str,
            'bio_land_application_sum2017': str,
            'bio_mgmt_containers': str,
            'bio_mgmt_containers2016': str,
            'bio_mgmt_containers2017': str,
            'bio_mgmt_def_categories': str,
            'bio_mgmt_def_categories2016': str,
            'bio_mgmt_def_categories2017': str,
            'bio_mgmt_def_current_cnt': str,
            'bio_mgmt_def_current_cnt2016': str,
            'bio_mgmt_def_current_cnt2017': str,
            'bio_mgmt_deficiencies': str,
            'bio_mgmt_deficiencies2016': str,
            'bio_mgmt_deficiencies2017': str,
            'bio_mgmt_handlers': str,
            'bio_mgmt_handlers2016': str,
            'bio_mgmt_handlers2017': str,
            'bio_mgmt_pathogens': str,
            'bio_mgmt_pathogens2016': str,
            'bio_mgmt_pathogens2017': str,
            'bio_mgmt_pathreds': str,
            'bio_mgmt_pathreds2016': str,
            'bio_mgmt_pathreds2017': str,
            'bio_mgmt_prctce_stypes': str,
            'bio_mgmt_prctce_stypes2016': str,
            'bio_mgmt_prctce_stypes2017': str,
            'bio_mgmt_prctce_types': str,
            'bio_mgmt_prctce_types2016': str,
            'bio_mgmt_prctce_types2017': str,
            'bio_mgmt_vectors': str,
            'bio_mgmt_vectors2016': str,
            'bio_mgmt_vectors2017': str,
            'bio_other_management_sum': str,
            'bio_other_management_sum2016': str,
            'bio_other_management_sum2017': str,
            'bio_other_mgmt_prctc_txts': str,
            'bio_other_mgmt_prctc_txts2016': str,
            'bio_other_mgmt_prctc_txts2017': str,
            'bio_qtrs_with_vio': str,
            'bio_report_date': str,
            'bio_report_date2016': str,
            'bio_report_date2017': str,
            'bio_report_year': str,
            'bio_report_years': str,
            'bio_reporting_obligations': str,
            'bio_reporting_obligations2016': str,
            'bio_reporting_obligations2017': str,
            'bio_surface_disp_sum': str,
            'bio_surface_disp_sum2016': str,
            'bio_surface_disp_sum2017': str,
            'bio_total_volume_amt': str,
            'bio_total_volume_amt2016': str,
            'bio_total_volume_amt2017': str,
            'bio_trmnt_prcss_cmnt_txts2016': str,
            'bio_trmnt_prcss_cmnt_txts2017': str,
            'bio_trtmnt_prcss_cmmnt_txts': str,
            'bio_trtmnt_processes': str,
            'bio_trtmnt_processes2016': str,
            'bio_trtmnt_processes2017': str,
            'bio_vio_last_year': str,
            'bio_vio_last_year_flag': str,
            'bio_vio_status': str,
            'bio_viol_flag': str,
            'biosolids_flag': str,
            'cwp13qtrs_compl_history': str,
            'cwp_actual_average_flow_nmbr': str,
            'cwp_bio_fea_count': str,
            'cwp_bio_iea_count': str,
            'cwp_bio_insp_count': str,
            'cwp_bio_penalties': str,
            'cwp_case_ids': str,
            'cwp_city': str,
            'cwp_compliance_tracking': str,
            'cwp_county': str,
            'cwp_cso_flag': str,
            'cwp_cso_outfalls': str,
            'cwp_date_last_bio_fea': str,
            'cwp_date_last_bio_fea_epa': str,
            'cwp_date_last_bio_fea_st': str,
            'cwp_date_last_bio_iea': str,
            'cwp_date_last_bio_iea_epa': str,
            'cwp_date_last_bio_iea_st': str,
            'cwp_date_last_bio_insp': str,
            'cwp_date_last_bio_insp_epa': str,
            'cwp_date_last_bio_insp_st': str,
            'cwp_date_last_bio_penalty': str,
            'cwp_date_last_fea': str,
            'cwp_date_last_fea_epa': str,
            'cwp_date_last_fea_st': str,
            'cwp_date_last_iea_epa': str,
            'cwp_date_last_iea_st': str,
            'cwp_date_last_informal_ea': str,
            'cwp_date_last_insp_epa': str,
            'cwp_date_last_insp_st': str,
            'cwp_date_last_inspection': str,
            'cwp_date_last_penalty': str,
            'cwp_days_last_bio_insp': str,
            'cwp_days_last_inspection': str,
            'cwpe90_cnt': str,
            'cwpepa_region': str,
            'cwp_effective_date': str,
            'cwp_expiration_date': str,
            'cwpfips_code': str,
            'cwp_facility_type_code': str,
            'cwp_facility_type_indicator': str,
            'cwp_formal_ea_cnt': str,
            'cwp_imp_water_flg': str,
            'cwp_indian_cntry_flg': str,
            'cwp_informal_enf_act_count': str,
            'cwp_inspection_count': str,
            'cwp_issue_date': str,
            'cwp_major_minor_status_flag': str,
            'cwpnaics_codes': str,
            'cwp_name': str,
            'cwp_permit_status_code': str,
            'cwp_permit_status_desc': str,
            'cwp_permit_type_code': str,
            'cwp_permit_type_desc': str,
            'cwp_qtrs_with_nc': str,
            'cwp_qtrs_with_snc': str,
            'cwpsic_codes': str,
            'cwpsnc_event_desc': str,
            'cwpsnc_status': str,
            'cwpsnc_status_date': str,
            'cwp_state': str,
            'cwp_state_district': str,
            'cwp_state_water_body_code': str,
            'cwp_state_water_body_name': str,
            'cwp_status': str,
            'cwp_street': str,
            'cwptr_ibal_land_code': str,
            'cwp_termination_date': str,
            'cwp_total_design_flow_nmbr': str,
            'cwp_total_penalties': str,
            'cwp_version_nmbr': str,
            'cwp_vio_status': str,
            'cwp_viol_status': str,
            'cwp_zip': str,
            'calculated_accuracy_meters': str,
            'census_block_group': str,
            'certified_date': str,
            'chesapeake_bay_flag': str,
            'collection_method': str,
            'control_measure': str,
            'control_measure_schedule': str,
            'curr_sv_flag': str,
            'curr_vio_flag': str,
            'dmr_impaired_poll': str,
            'dmr_pounds': str,
            'dmr_twpe': str,
            'dsch_to_ms4': str,
            'e90_exceeds1yr': str,
            'e90_exceeds2yr': str,
            'e90_exceeds3yr': str,
            'e90_exceeds4yr': str,
            'e90_exceeds5yr': str,
            'e90_pollutants1yr': str,
            'e90_pollutants2yr': str,
            'e90_pollutants3yr': str,
            'e90_pollutants4yr': str,
            'e90_pollutants5yr': str,
            'epa_system': str,
            'ea5yr_flag': str,
            'eff_charts_flag': str,
            'eff_exceeds': str,
            'ejscreen_flag': str,
            'ejscreen_flag_us': str,
            'electr_rpt_waiver_eff_date': str,
            'electr_rpt_waiver_exp_date': str,
            'electr_rpt_waiver_type_code': str,
            'electr_rpt_waiver_type_desc': str,
            'electr_submission_type_code': str,
            'electr_submission_type_desc': str,
            'exposed_activity': str,
            'fac_county_name': str,
            'fac_derived_huc': str,
            'fac_derived_tr_ibes': str,
            'fac_derived_wbd': str,
            'fac_derived_wbdhu8': str,
            'fac_derived_wbdhu8_name': str,
            'fac_derived_wbd_name': str,
            'fac_fips_code': str,
            'fac_federal_agency_code': str,
            'fac_federal_agency_name': str,
            'fac_indian_cntry_flg': str,
            'fac_indian_spatial_flg': str,
            'fac_lat': str,
            'fac_long': str,
            'fac_map_flg': str,
            'fac_map_icon': str,
            'fac_percent_minority': str,
            'fac_pop_den': str,
            'fac_std_county_name': str,
            'fac_tri_potw_trans': str,
            'fac_tri_reporter': str,
            'fac_trisw_rel': str,
            'fac_us_mex_border_flg': str,
            'historic_criterion_code': str,
            'indsw_flag': str,
            'infea5yr_flag': str,
            'insp5yr_flag': str,
            'insp_def5yr_cnt': str,
            'issuing_agency': str,
            'last_dmr_value_rcvd_date': str,
            'lim_pollutant': str,
            'lower48': str,
            'map': str,
            'master_external_permit_nmbr': str,
            'max_pctile_us': str,
            'max_score': str,
            'miss_dmr_qtrs': str,
            'msgp_corrective_action_smmry': str,
            'msgp_facility_inspctn_smmry': str,
            'msgp_last_report_year': str,
            'msgp_no_further_rdctn_rtnle': str,
            'msgp_permit_type': str,
            'msgp_visual_assessment_smmry': str,
            'npdes_data_groups': str,
            'npdes_data_groups_descs': str,
            'npdesids': str,
            'object_id': str,
            'other_permit_ids': str,
            'over80_count_us': str,
            'past_cal_yr_average_flow': str,
            'past_cal_yr_conv_pol_ovr_lmt': str,
            'past_cal_yr_conv_pollutants': str,
            'past_cal_yr_toxic_pol_ovr_lmt': str,
            'past_cal_yr_toxic_pollutants': str,
            'pctile_cancer_us': str,
            'pctile_dpm_us': str,
            'pctile_o3_us': str,
            'pctile_pctpre1960_us': str,
            'pctile_pm_us': str,
            'pctile_proximity_npdesus': str,
            'pctile_proximity_npl_us': str,
            'pctile_proximity_rmp_us': str,
            'pctile_proximity_tsdf_us': str,
            'pctile_resp_us': str,
            'pctile_traffic_score_us': str,
            'permit_components': str,
            'permit_name': str,
            'permitting_agency': str,
            'poll_with_violation': str,
            'rcraids': str,
            'rad_gnis_name': str,
            'rad_hu12_name': str,
            'rad_reachcode': str,
            'rad_wbdhu8': str,
            'rad_wbdhu8_name': str,
            'rad_wbd_huc12': str,
            'receiving_ms4_name': str,
            'reference_point': str,
            'registry_id': str,
            'rmp_ids': str,
            'sdwaids': str,
            'score': str,
            'sector': str,
            'source_id': str,
            'species_critical_habital_flag': str,
            'state_auth_biosolids': str,
            'state_auth_fedfac': str,
            'state_auth_gen': str,
            'state_auth_npdes': str,
            'state_auth_pretreat': str,
            'statute': str,
            'storm_water_area': str,
            'submitted_date': str,
            'subsector': str,
            'swppp_url': str,
            'triids': str,
            'tr_ibal_flag': str,
            'type_of_monitoring': str,
            'type_of_water': str,
            'vio_last_year': str,
            'viol_flag': str,
            'web_docs': str
        }

        self.attribute_map = {
            'airids': 'AIRIDs',
            'active_lower48': 'ActiveLower48',
            'alr_exceedences': 'AlrExceedences',
            'associated_pollutant': 'AssociatedPollutant',
            'attains_aquatic_life_use_flg': 'AttainsAquaticLifeUseFlg',
            'attains_au_category': 'AttainsAuCategory',
            'attains_cause_groups': 'AttainsCauseGroups',
            'attains_cycle_year': 'AttainsCycleYear',
            'attains_exceptnl_use_flg': 'AttainsExceptnlUseFlg',
            'attains_imp_water_flg': 'AttainsImpWaterFlg',
            'attains_possible_npdes_params': 'AttainsPossibleNPDESParams',
            'attains_recreation_use_flg': 'AttainsRecreationUseFlg',
            'attains_shellfish_use_flg': 'AttainsShellfishUseFlg',
            'attains_source': 'AttainsSource',
            'attains_state_causes': 'AttainsStateCauses',
            'beach_close_last2yrs_flg': 'BeachCloseLast2yrsFlg',
            'beach_close_last_year_flg': 'BeachCloseLastYearFlg',
            'bio_analy_method_catgrys': 'BioAnalyMethodCatgrys',
            'bio_analy_method_catgrys2016': 'BioAnalyMethodCatgrys2016',
            'bio_analy_method_catgrys2017': 'BioAnalyMethodCatgrys2017',
            'bio_analy_methods': 'BioAnalyMethods',
            'bio_analy_methods2016': 'BioAnalyMethods2016',
            'bio_analy_methods2017': 'BioAnalyMethods2017',
            'bio_comment_text': 'BioCommentText',
            'bio_comment_text2016': 'BioCommentText2016',
            'bio_comment_text2017': 'BioCommentText2017',
            'bio_incineration_sum': 'BioIncinerationSum',
            'bio_incineration_sum2016': 'BioIncinerationSum2016',
            'bio_incineration_sum2017': 'BioIncinerationSum2017',
            'bio_land_application_sum': 'BioLandApplicationSum',
            'bio_land_application_sum2016': 'BioLandApplicationSum2016',
            'bio_land_application_sum2017': 'BioLandApplicationSum2017',
            'bio_mgmt_containers': 'BioMgmtContainers',
            'bio_mgmt_containers2016': 'BioMgmtContainers2016',
            'bio_mgmt_containers2017': 'BioMgmtContainers2017',
            'bio_mgmt_def_categories': 'BioMgmtDefCategories',
            'bio_mgmt_def_categories2016': 'BioMgmtDefCategories2016',
            'bio_mgmt_def_categories2017': 'BioMgmtDefCategories2017',
            'bio_mgmt_def_current_cnt': 'BioMgmtDefCurrentCnt',
            'bio_mgmt_def_current_cnt2016': 'BioMgmtDefCurrentCnt2016',
            'bio_mgmt_def_current_cnt2017': 'BioMgmtDefCurrentCnt2017',
            'bio_mgmt_deficiencies': 'BioMgmtDeficiencies',
            'bio_mgmt_deficiencies2016': 'BioMgmtDeficiencies2016',
            'bio_mgmt_deficiencies2017': 'BioMgmtDeficiencies2017',
            'bio_mgmt_handlers': 'BioMgmtHandlers',
            'bio_mgmt_handlers2016': 'BioMgmtHandlers2016',
            'bio_mgmt_handlers2017': 'BioMgmtHandlers2017',
            'bio_mgmt_pathogens': 'BioMgmtPathogens',
            'bio_mgmt_pathogens2016': 'BioMgmtPathogens2016',
            'bio_mgmt_pathogens2017': 'BioMgmtPathogens2017',
            'bio_mgmt_pathreds': 'BioMgmtPathreds',
            'bio_mgmt_pathreds2016': 'BioMgmtPathreds2016',
            'bio_mgmt_pathreds2017': 'BioMgmtPathreds2017',
            'bio_mgmt_prctce_stypes': 'BioMgmtPrctceStypes',
            'bio_mgmt_prctce_stypes2016': 'BioMgmtPrctceStypes2016',
            'bio_mgmt_prctce_stypes2017': 'BioMgmtPrctceStypes2017',
            'bio_mgmt_prctce_types': 'BioMgmtPrctceTypes',
            'bio_mgmt_prctce_types2016': 'BioMgmtPrctceTypes2016',
            'bio_mgmt_prctce_types2017': 'BioMgmtPrctceTypes2017',
            'bio_mgmt_vectors': 'BioMgmtVectors',
            'bio_mgmt_vectors2016': 'BioMgmtVectors2016',
            'bio_mgmt_vectors2017': 'BioMgmtVectors2017',
            'bio_other_management_sum': 'BioOtherManagementSum',
            'bio_other_management_sum2016': 'BioOtherManagementSum2016',
            'bio_other_management_sum2017': 'BioOtherManagementSum2017',
            'bio_other_mgmt_prctc_txts': 'BioOtherMgmtPrctcTxts',
            'bio_other_mgmt_prctc_txts2016': 'BioOtherMgmtPrctcTxts2016',
            'bio_other_mgmt_prctc_txts2017': 'BioOtherMgmtPrctcTxts2017',
            'bio_qtrs_with_vio': 'BioQtrsWithVio',
            'bio_report_date': 'BioReportDate',
            'bio_report_date2016': 'BioReportDate2016',
            'bio_report_date2017': 'BioReportDate2017',
            'bio_report_year': 'BioReportYear',
            'bio_report_years': 'BioReportYears',
            'bio_reporting_obligations': 'BioReportingObligations',
            'bio_reporting_obligations2016': 'BioReportingObligations2016',
            'bio_reporting_obligations2017': 'BioReportingObligations2017',
            'bio_surface_disp_sum': 'BioSurfaceDispSum',
            'bio_surface_disp_sum2016': 'BioSurfaceDispSum2016',
            'bio_surface_disp_sum2017': 'BioSurfaceDispSum2017',
            'bio_total_volume_amt': 'BioTotalVolumeAmt',
            'bio_total_volume_amt2016': 'BioTotalVolumeAmt2016',
            'bio_total_volume_amt2017': 'BioTotalVolumeAmt2017',
            'bio_trmnt_prcss_cmnt_txts2016': 'BioTrmntPrcssCmntTxts2016',
            'bio_trmnt_prcss_cmnt_txts2017': 'BioTrmntPrcssCmntTxts2017',
            'bio_trtmnt_prcss_cmmnt_txts': 'BioTrtmntPrcssCmmntTxts',
            'bio_trtmnt_processes': 'BioTrtmntProcesses',
            'bio_trtmnt_processes2016': 'BioTrtmntProcesses2016',
            'bio_trtmnt_processes2017': 'BioTrtmntProcesses2017',
            'bio_vio_last_year': 'BioVioLastYear',
            'bio_vio_last_year_flag': 'BioVioLastYearFlag',
            'bio_vio_status': 'BioVioStatus',
            'bio_viol_flag': 'BioViolFlag',
            'biosolids_flag': 'BiosolidsFlag',
            'cwp13qtrs_compl_history': 'CWP13qtrsComplHistory',
            'cwp_actual_average_flow_nmbr': 'CWPActualAverageFlowNmbr',
            'cwp_bio_fea_count': 'CWPBioFeaCount',
            'cwp_bio_iea_count': 'CWPBioIeaCount',
            'cwp_bio_insp_count': 'CWPBioInspCount',
            'cwp_bio_penalties': 'CWPBioPenalties',
            'cwp_case_ids': 'CWPCaseIDs',
            'cwp_city': 'CWPCity',
            'cwp_compliance_tracking': 'CWPComplianceTracking',
            'cwp_county': 'CWPCounty',
            'cwp_cso_flag': 'CWPCsoFlag',
            'cwp_cso_outfalls': 'CWPCsoOutfalls',
            'cwp_date_last_bio_fea': 'CWPDateLastBioFea',
            'cwp_date_last_bio_fea_epa': 'CWPDateLastBioFeaEPA',
            'cwp_date_last_bio_fea_st': 'CWPDateLastBioFeaSt',
            'cwp_date_last_bio_iea': 'CWPDateLastBioIea',
            'cwp_date_last_bio_iea_epa': 'CWPDateLastBioIeaEPA',
            'cwp_date_last_bio_iea_st': 'CWPDateLastBioIeaSt',
            'cwp_date_last_bio_insp': 'CWPDateLastBioInsp',
            'cwp_date_last_bio_insp_epa': 'CWPDateLastBioInspEPA',
            'cwp_date_last_bio_insp_st': 'CWPDateLastBioInspSt',
            'cwp_date_last_bio_penalty': 'CWPDateLastBioPenalty',
            'cwp_date_last_fea': 'CWPDateLastFea',
            'cwp_date_last_fea_epa': 'CWPDateLastFeaEPA',
            'cwp_date_last_fea_st': 'CWPDateLastFeaSt',
            'cwp_date_last_iea_epa': 'CWPDateLastIeaEPA',
            'cwp_date_last_iea_st': 'CWPDateLastIeaSt',
            'cwp_date_last_informal_ea': 'CWPDateLastInformalEa',
            'cwp_date_last_insp_epa': 'CWPDateLastInspEPA',
            'cwp_date_last_insp_st': 'CWPDateLastInspSt',
            'cwp_date_last_inspection': 'CWPDateLastInspection',
            'cwp_date_last_penalty': 'CWPDateLastPenalty',
            'cwp_days_last_bio_insp': 'CWPDaysLastBioInsp',
            'cwp_days_last_inspection': 'CWPDaysLastInspection',
            'cwpe90_cnt': 'CWPE90Cnt',
            'cwpepa_region': 'CWPEPARegion',
            'cwp_effective_date': 'CWPEffectiveDate',
            'cwp_expiration_date': 'CWPExpirationDate',
            'cwpfips_code': 'CWPFIPSCode',
            'cwp_facility_type_code': 'CWPFacilityTypeCode',
            'cwp_facility_type_indicator': 'CWPFacilityTypeIndicator',
            'cwp_formal_ea_cnt': 'CWPFormalEaCnt',
            'cwp_imp_water_flg': 'CWPImpWaterFlg',
            'cwp_indian_cntry_flg': 'CWPIndianCntryFlg',
            'cwp_informal_enf_act_count': 'CWPInformalEnfActCount',
            'cwp_inspection_count': 'CWPInspectionCount',
            'cwp_issue_date': 'CWPIssueDate',
            'cwp_major_minor_status_flag': 'CWPMajorMinorStatusFlag',
            'cwpnaics_codes': 'CWPNAICSCodes',
            'cwp_name': 'CWPName',
            'cwp_permit_status_code': 'CWPPermitStatusCode',
            'cwp_permit_status_desc': 'CWPPermitStatusDesc',
            'cwp_permit_type_code': 'CWPPermitTypeCode',
            'cwp_permit_type_desc': 'CWPPermitTypeDesc',
            'cwp_qtrs_with_nc': 'CWPQtrsWithNC',
            'cwp_qtrs_with_snc': 'CWPQtrsWithSNC',
            'cwpsic_codes': 'CWPSICCodes',
            'cwpsnc_event_desc': 'CWPSNCEventDesc',
            'cwpsnc_status': 'CWPSNCStatus',
            'cwpsnc_status_date': 'CWPSNCStatusDate',
            'cwp_state': 'CWPState',
            'cwp_state_district': 'CWPStateDistrict',
            'cwp_state_water_body_code': 'CWPStateWaterBodyCode',
            'cwp_state_water_body_name': 'CWPStateWaterBodyName',
            'cwp_status': 'CWPStatus',
            'cwp_street': 'CWPStreet',
            'cwptr_ibal_land_code': 'CWPTRIbalLandCode',
            'cwp_termination_date': 'CWPTerminationDate',
            'cwp_total_design_flow_nmbr': 'CWPTotalDesignFlowNmbr',
            'cwp_total_penalties': 'CWPTotalPenalties',
            'cwp_version_nmbr': 'CWPVersionNmbr',
            'cwp_vio_status': 'CWPVioStatus',
            'cwp_viol_status': 'CWPViolStatus',
            'cwp_zip': 'CWPZip',
            'calculated_accuracy_meters': 'CalculatedAccuracyMeters',
            'census_block_group': 'CensusBlockGroup',
            'certified_date': 'CertifiedDate',
            'chesapeake_bay_flag': 'ChesapeakeBayFlag',
            'collection_method': 'CollectionMethod',
            'control_measure': 'ControlMeasure',
            'control_measure_schedule': 'ControlMeasureSchedule',
            'curr_sv_flag': 'CurrSvFlag',
            'curr_vio_flag': 'CurrVioFlag',
            'dmr_impaired_poll': 'DMRImpairedPoll',
            'dmr_pounds': 'DMRPounds',
            'dmr_twpe': 'DMRTwpe',
            'dsch_to_ms4': 'DschToMs4',
            'e90_exceeds1yr': 'E90Exceeds1yr',
            'e90_exceeds2yr': 'E90Exceeds2yr',
            'e90_exceeds3yr': 'E90Exceeds3yr',
            'e90_exceeds4yr': 'E90Exceeds4yr',
            'e90_exceeds5yr': 'E90Exceeds5yr',
            'e90_pollutants1yr': 'E90Pollutants1yr',
            'e90_pollutants2yr': 'E90Pollutants2yr',
            'e90_pollutants3yr': 'E90Pollutants3yr',
            'e90_pollutants4yr': 'E90Pollutants4yr',
            'e90_pollutants5yr': 'E90Pollutants5yr',
            'epa_system': 'EPASystem',
            'ea5yr_flag': 'Ea5yrFlag',
            'eff_charts_flag': 'EffChartsFlag',
            'eff_exceeds': 'EffExceeds',
            'ejscreen_flag': 'EjscreenFlag',
            'ejscreen_flag_us': 'EjscreenFlagUs',
            'electr_rpt_waiver_eff_date': 'ElectrRptWaiverEffDate',
            'electr_rpt_waiver_exp_date': 'ElectrRptWaiverExpDate',
            'electr_rpt_waiver_type_code': 'ElectrRptWaiverTypeCode',
            'electr_rpt_waiver_type_desc': 'ElectrRptWaiverTypeDesc',
            'electr_submission_type_code': 'ElectrSubmissionTypeCode',
            'electr_submission_type_desc': 'ElectrSubmissionTypeDesc',
            'exposed_activity': 'ExposedActivity',
            'fac_county_name': 'FacCountyName',
            'fac_derived_huc': 'FacDerivedHuc',
            'fac_derived_tr_ibes': 'FacDerivedTRIbes',
            'fac_derived_wbd': 'FacDerivedWBD',
            'fac_derived_wbdhu8': 'FacDerivedWBDHu8',
            'fac_derived_wbdhu8_name': 'FacDerivedWBDHu8Name',
            'fac_derived_wbd_name': 'FacDerivedWBDName',
            'fac_fips_code': 'FacFIPSCode',
            'fac_federal_agency_code': 'FacFederalAgencyCode',
            'fac_federal_agency_name': 'FacFederalAgencyName',
            'fac_indian_cntry_flg': 'FacIndianCntryFlg',
            'fac_indian_spatial_flg': 'FacIndianSpatialFlg',
            'fac_lat': 'FacLat',
            'fac_long': 'FacLong',
            'fac_map_flg': 'FacMapFlg',
            'fac_map_icon': 'FacMapIcon',
            'fac_percent_minority': 'FacPercentMinority',
            'fac_pop_den': 'FacPopDen',
            'fac_std_county_name': 'FacStdCountyName',
            'fac_tri_potw_trans': 'FacTRIPotwTrans',
            'fac_tri_reporter': 'FacTRIReporter',
            'fac_trisw_rel': 'FacTRISwRel',
            'fac_us_mex_border_flg': 'FacUsMexBorderFlg',
            'historic_criterion_code': 'HistoricCriterionCode',
            'indsw_flag': 'IndswFlag',
            'infea5yr_flag': 'Infea5yrFlag',
            'insp5yr_flag': 'Insp5yrFlag',
            'insp_def5yr_cnt': 'InspDef5yrCnt',
            'issuing_agency': 'IssuingAgency',
            'last_dmr_value_rcvd_date': 'LastDMRValueRcvdDate',
            'lim_pollutant': 'LimPollutant',
            'lower48': 'Lower48',
            'map': 'Map',
            'master_external_permit_nmbr': 'MasterExternalPermitNmbr',
            'max_pctile_us': 'MaxPctileUs',
            'max_score': 'MaxScore',
            'miss_dmr_qtrs': 'MissDMRQtrs',
            'msgp_corrective_action_smmry': 'MsgpCorrectiveActionSmmry',
            'msgp_facility_inspctn_smmry': 'MsgpFacilityInspctnSmmry',
            'msgp_last_report_year': 'MsgpLastReportYear',
            'msgp_no_further_rdctn_rtnle': 'MsgpNoFurtherRdctnRtnle',
            'msgp_permit_type': 'MsgpPermitType',
            'msgp_visual_assessment_smmry': 'MsgpVisualAssessmentSmmry',
            'npdes_data_groups': 'NPDESDataGroups',
            'npdes_data_groups_descs': 'NPDESDataGroupsDescs',
            'npdesids': 'NPDESIDs',
            'object_id': 'ObjectId',
            'other_permit_ids': 'OtherPermitIDs',
            'over80_count_us': 'Over80CountUs',
            'past_cal_yr_average_flow': 'PastCalYrAverageFlow',
            'past_cal_yr_conv_pol_ovr_lmt': 'PastCalYrConvPolOvrLmt',
            'past_cal_yr_conv_pollutants': 'PastCalYrConvPollutants',
            'past_cal_yr_toxic_pol_ovr_lmt': 'PastCalYrToxicPolOvrLmt',
            'past_cal_yr_toxic_pollutants': 'PastCalYrToxicPollutants',
            'pctile_cancer_us': 'PctileCancerUs',
            'pctile_dpm_us': 'PctileDpmUs',
            'pctile_o3_us': 'PctileO3Us',
            'pctile_pctpre1960_us': 'PctilePctpre1960Us',
            'pctile_pm_us': 'PctilePmUs',
            'pctile_proximity_npdesus': 'PctileProximityNPDESUs',
            'pctile_proximity_npl_us': 'PctileProximityNplUs',
            'pctile_proximity_rmp_us': 'PctileProximityRmpUs',
            'pctile_proximity_tsdf_us': 'PctileProximityTsdfUs',
            'pctile_resp_us': 'PctileRespUs',
            'pctile_traffic_score_us': 'PctileTrafficScoreUs',
            'permit_components': 'PermitComponents',
            'permit_name': 'PermitName',
            'permitting_agency': 'PermittingAgency',
            'poll_with_violation': 'PollWithViolation',
            'rcraids': 'RCRAIDs',
            'rad_gnis_name': 'RadGnisName',
            'rad_hu12_name': 'RadHu12Name',
            'rad_reachcode': 'RadReachcode',
            'rad_wbdhu8': 'RadWBDHu8',
            'rad_wbdhu8_name': 'RadWBDHu8Name',
            'rad_wbd_huc12': 'RadWBDHuc12',
            'receiving_ms4_name': 'ReceivingMs4Name',
            'reference_point': 'ReferencePoint',
            'registry_id': 'RegistryID',
            'rmp_ids': 'RmpIDs',
            'sdwaids': 'SDWAIDs',
            'score': 'Score',
            'sector': 'Sector',
            'source_id': 'SourceID',
            'species_critical_habital_flag': 'SpeciesCriticalHabitalFlag',
            'state_auth_biosolids': 'StateAuthBiosolids',
            'state_auth_fedfac': 'StateAuthFedfac',
            'state_auth_gen': 'StateAuthGen',
            'state_auth_npdes': 'StateAuthNPDES',
            'state_auth_pretreat': 'StateAuthPretreat',
            'statute': 'Statute',
            'storm_water_area': 'StormWaterArea',
            'submitted_date': 'SubmittedDate',
            'subsector': 'Subsector',
            'swppp_url': 'SwpppUrl',
            'triids': 'TRIIDs',
            'tr_ibal_flag': 'TRIbalFlag',
            'type_of_monitoring': 'TypeOfMonitoring',
            'type_of_water': 'TypeOfWater',
            'vio_last_year': 'VioLastYear',
            'viol_flag': 'ViolFlag',
            'web_docs': 'WebDocs'
        }

        self._airids = airids
        self._active_lower48 = active_lower48
        self._alr_exceedences = alr_exceedences
        self._associated_pollutant = associated_pollutant
        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg
        self._attains_au_category = attains_au_category
        self._attains_cause_groups = attains_cause_groups
        self._attains_cycle_year = attains_cycle_year
        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg
        self._attains_imp_water_flg = attains_imp_water_flg
        self._attains_possible_npdes_params = attains_possible_npdes_params
        self._attains_recreation_use_flg = attains_recreation_use_flg
        self._attains_shellfish_use_flg = attains_shellfish_use_flg
        self._attains_source = attains_source
        self._attains_state_causes = attains_state_causes
        self._beach_close_last2yrs_flg = beach_close_last2yrs_flg
        self._beach_close_last_year_flg = beach_close_last_year_flg
        self._bio_analy_method_catgrys = bio_analy_method_catgrys
        self._bio_analy_method_catgrys2016 = bio_analy_method_catgrys2016
        self._bio_analy_method_catgrys2017 = bio_analy_method_catgrys2017
        self._bio_analy_methods = bio_analy_methods
        self._bio_analy_methods2016 = bio_analy_methods2016
        self._bio_analy_methods2017 = bio_analy_methods2017
        self._bio_comment_text = bio_comment_text
        self._bio_comment_text2016 = bio_comment_text2016
        self._bio_comment_text2017 = bio_comment_text2017
        self._bio_incineration_sum = bio_incineration_sum
        self._bio_incineration_sum2016 = bio_incineration_sum2016
        self._bio_incineration_sum2017 = bio_incineration_sum2017
        self._bio_land_application_sum = bio_land_application_sum
        self._bio_land_application_sum2016 = bio_land_application_sum2016
        self._bio_land_application_sum2017 = bio_land_application_sum2017
        self._bio_mgmt_containers = bio_mgmt_containers
        self._bio_mgmt_containers2016 = bio_mgmt_containers2016
        self._bio_mgmt_containers2017 = bio_mgmt_containers2017
        self._bio_mgmt_def_categories = bio_mgmt_def_categories
        self._bio_mgmt_def_categories2016 = bio_mgmt_def_categories2016
        self._bio_mgmt_def_categories2017 = bio_mgmt_def_categories2017
        self._bio_mgmt_def_current_cnt = bio_mgmt_def_current_cnt
        self._bio_mgmt_def_current_cnt2016 = bio_mgmt_def_current_cnt2016
        self._bio_mgmt_def_current_cnt2017 = bio_mgmt_def_current_cnt2017
        self._bio_mgmt_deficiencies = bio_mgmt_deficiencies
        self._bio_mgmt_deficiencies2016 = bio_mgmt_deficiencies2016
        self._bio_mgmt_deficiencies2017 = bio_mgmt_deficiencies2017
        self._bio_mgmt_handlers = bio_mgmt_handlers
        self._bio_mgmt_handlers2016 = bio_mgmt_handlers2016
        self._bio_mgmt_handlers2017 = bio_mgmt_handlers2017
        self._bio_mgmt_pathogens = bio_mgmt_pathogens
        self._bio_mgmt_pathogens2016 = bio_mgmt_pathogens2016
        self._bio_mgmt_pathogens2017 = bio_mgmt_pathogens2017
        self._bio_mgmt_pathreds = bio_mgmt_pathreds
        self._bio_mgmt_pathreds2016 = bio_mgmt_pathreds2016
        self._bio_mgmt_pathreds2017 = bio_mgmt_pathreds2017
        self._bio_mgmt_prctce_stypes = bio_mgmt_prctce_stypes
        self._bio_mgmt_prctce_stypes2016 = bio_mgmt_prctce_stypes2016
        self._bio_mgmt_prctce_stypes2017 = bio_mgmt_prctce_stypes2017
        self._bio_mgmt_prctce_types = bio_mgmt_prctce_types
        self._bio_mgmt_prctce_types2016 = bio_mgmt_prctce_types2016
        self._bio_mgmt_prctce_types2017 = bio_mgmt_prctce_types2017
        self._bio_mgmt_vectors = bio_mgmt_vectors
        self._bio_mgmt_vectors2016 = bio_mgmt_vectors2016
        self._bio_mgmt_vectors2017 = bio_mgmt_vectors2017
        self._bio_other_management_sum = bio_other_management_sum
        self._bio_other_management_sum2016 = bio_other_management_sum2016
        self._bio_other_management_sum2017 = bio_other_management_sum2017
        self._bio_other_mgmt_prctc_txts = bio_other_mgmt_prctc_txts
        self._bio_other_mgmt_prctc_txts2016 = bio_other_mgmt_prctc_txts2016
        self._bio_other_mgmt_prctc_txts2017 = bio_other_mgmt_prctc_txts2017
        self._bio_qtrs_with_vio = bio_qtrs_with_vio
        self._bio_report_date = bio_report_date
        self._bio_report_date2016 = bio_report_date2016
        self._bio_report_date2017 = bio_report_date2017
        self._bio_report_year = bio_report_year
        self._bio_report_years = bio_report_years
        self._bio_reporting_obligations = bio_reporting_obligations
        self._bio_reporting_obligations2016 = bio_reporting_obligations2016
        self._bio_reporting_obligations2017 = bio_reporting_obligations2017
        self._bio_surface_disp_sum = bio_surface_disp_sum
        self._bio_surface_disp_sum2016 = bio_surface_disp_sum2016
        self._bio_surface_disp_sum2017 = bio_surface_disp_sum2017
        self._bio_total_volume_amt = bio_total_volume_amt
        self._bio_total_volume_amt2016 = bio_total_volume_amt2016
        self._bio_total_volume_amt2017 = bio_total_volume_amt2017
        self._bio_trmnt_prcss_cmnt_txts2016 = bio_trmnt_prcss_cmnt_txts2016
        self._bio_trmnt_prcss_cmnt_txts2017 = bio_trmnt_prcss_cmnt_txts2017
        self._bio_trtmnt_prcss_cmmnt_txts = bio_trtmnt_prcss_cmmnt_txts
        self._bio_trtmnt_processes = bio_trtmnt_processes
        self._bio_trtmnt_processes2016 = bio_trtmnt_processes2016
        self._bio_trtmnt_processes2017 = bio_trtmnt_processes2017
        self._bio_vio_last_year = bio_vio_last_year
        self._bio_vio_last_year_flag = bio_vio_last_year_flag
        self._bio_vio_status = bio_vio_status
        self._bio_viol_flag = bio_viol_flag
        self._biosolids_flag = biosolids_flag
        self._cwp13qtrs_compl_history = cwp13qtrs_compl_history
        self._cwp_actual_average_flow_nmbr = cwp_actual_average_flow_nmbr
        self._cwp_bio_fea_count = cwp_bio_fea_count
        self._cwp_bio_iea_count = cwp_bio_iea_count
        self._cwp_bio_insp_count = cwp_bio_insp_count
        self._cwp_bio_penalties = cwp_bio_penalties
        self._cwp_case_ids = cwp_case_ids
        self._cwp_city = cwp_city
        self._cwp_compliance_tracking = cwp_compliance_tracking
        self._cwp_county = cwp_county
        self._cwp_cso_flag = cwp_cso_flag
        self._cwp_cso_outfalls = cwp_cso_outfalls
        self._cwp_date_last_bio_fea = cwp_date_last_bio_fea
        self._cwp_date_last_bio_fea_epa = cwp_date_last_bio_fea_epa
        self._cwp_date_last_bio_fea_st = cwp_date_last_bio_fea_st
        self._cwp_date_last_bio_iea = cwp_date_last_bio_iea
        self._cwp_date_last_bio_iea_epa = cwp_date_last_bio_iea_epa
        self._cwp_date_last_bio_iea_st = cwp_date_last_bio_iea_st
        self._cwp_date_last_bio_insp = cwp_date_last_bio_insp
        self._cwp_date_last_bio_insp_epa = cwp_date_last_bio_insp_epa
        self._cwp_date_last_bio_insp_st = cwp_date_last_bio_insp_st
        self._cwp_date_last_bio_penalty = cwp_date_last_bio_penalty
        self._cwp_date_last_fea = cwp_date_last_fea
        self._cwp_date_last_fea_epa = cwp_date_last_fea_epa
        self._cwp_date_last_fea_st = cwp_date_last_fea_st
        self._cwp_date_last_iea_epa = cwp_date_last_iea_epa
        self._cwp_date_last_iea_st = cwp_date_last_iea_st
        self._cwp_date_last_informal_ea = cwp_date_last_informal_ea
        self._cwp_date_last_insp_epa = cwp_date_last_insp_epa
        self._cwp_date_last_insp_st = cwp_date_last_insp_st
        self._cwp_date_last_inspection = cwp_date_last_inspection
        self._cwp_date_last_penalty = cwp_date_last_penalty
        self._cwp_days_last_bio_insp = cwp_days_last_bio_insp
        self._cwp_days_last_inspection = cwp_days_last_inspection
        self._cwpe90_cnt = cwpe90_cnt
        self._cwpepa_region = cwpepa_region
        self._cwp_effective_date = cwp_effective_date
        self._cwp_expiration_date = cwp_expiration_date
        self._cwpfips_code = cwpfips_code
        self._cwp_facility_type_code = cwp_facility_type_code
        self._cwp_facility_type_indicator = cwp_facility_type_indicator
        self._cwp_formal_ea_cnt = cwp_formal_ea_cnt
        self._cwp_imp_water_flg = cwp_imp_water_flg
        self._cwp_indian_cntry_flg = cwp_indian_cntry_flg
        self._cwp_informal_enf_act_count = cwp_informal_enf_act_count
        self._cwp_inspection_count = cwp_inspection_count
        self._cwp_issue_date = cwp_issue_date
        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag
        self._cwpnaics_codes = cwpnaics_codes
        self._cwp_name = cwp_name
        self._cwp_permit_status_code = cwp_permit_status_code
        self._cwp_permit_status_desc = cwp_permit_status_desc
        self._cwp_permit_type_code = cwp_permit_type_code
        self._cwp_permit_type_desc = cwp_permit_type_desc
        self._cwp_qtrs_with_nc = cwp_qtrs_with_nc
        self._cwp_qtrs_with_snc = cwp_qtrs_with_snc
        self._cwpsic_codes = cwpsic_codes
        self._cwpsnc_event_desc = cwpsnc_event_desc
        self._cwpsnc_status = cwpsnc_status
        self._cwpsnc_status_date = cwpsnc_status_date
        self._cwp_state = cwp_state
        self._cwp_state_district = cwp_state_district
        self._cwp_state_water_body_code = cwp_state_water_body_code
        self._cwp_state_water_body_name = cwp_state_water_body_name
        self._cwp_status = cwp_status
        self._cwp_street = cwp_street
        self._cwptr_ibal_land_code = cwptr_ibal_land_code
        self._cwp_termination_date = cwp_termination_date
        self._cwp_total_design_flow_nmbr = cwp_total_design_flow_nmbr
        self._cwp_total_penalties = cwp_total_penalties
        self._cwp_version_nmbr = cwp_version_nmbr
        self._cwp_vio_status = cwp_vio_status
        self._cwp_viol_status = cwp_viol_status
        self._cwp_zip = cwp_zip
        self._calculated_accuracy_meters = calculated_accuracy_meters
        self._census_block_group = census_block_group
        self._certified_date = certified_date
        self._chesapeake_bay_flag = chesapeake_bay_flag
        self._collection_method = collection_method
        self._control_measure = control_measure
        self._control_measure_schedule = control_measure_schedule
        self._curr_sv_flag = curr_sv_flag
        self._curr_vio_flag = curr_vio_flag
        self._dmr_impaired_poll = dmr_impaired_poll
        self._dmr_pounds = dmr_pounds
        self._dmr_twpe = dmr_twpe
        self._dsch_to_ms4 = dsch_to_ms4
        self._e90_exceeds1yr = e90_exceeds1yr
        self._e90_exceeds2yr = e90_exceeds2yr
        self._e90_exceeds3yr = e90_exceeds3yr
        self._e90_exceeds4yr = e90_exceeds4yr
        self._e90_exceeds5yr = e90_exceeds5yr
        self._e90_pollutants1yr = e90_pollutants1yr
        self._e90_pollutants2yr = e90_pollutants2yr
        self._e90_pollutants3yr = e90_pollutants3yr
        self._e90_pollutants4yr = e90_pollutants4yr
        self._e90_pollutants5yr = e90_pollutants5yr
        self._epa_system = epa_system
        self._ea5yr_flag = ea5yr_flag
        self._eff_charts_flag = eff_charts_flag
        self._eff_exceeds = eff_exceeds
        self._ejscreen_flag = ejscreen_flag
        self._ejscreen_flag_us = ejscreen_flag_us
        self._electr_rpt_waiver_eff_date = electr_rpt_waiver_eff_date
        self._electr_rpt_waiver_exp_date = electr_rpt_waiver_exp_date
        self._electr_rpt_waiver_type_code = electr_rpt_waiver_type_code
        self._electr_rpt_waiver_type_desc = electr_rpt_waiver_type_desc
        self._electr_submission_type_code = electr_submission_type_code
        self._electr_submission_type_desc = electr_submission_type_desc
        self._exposed_activity = exposed_activity
        self._fac_county_name = fac_county_name
        self._fac_derived_huc = fac_derived_huc
        self._fac_derived_tr_ibes = fac_derived_tr_ibes
        self._fac_derived_wbd = fac_derived_wbd
        self._fac_derived_wbdhu8 = fac_derived_wbdhu8
        self._fac_derived_wbdhu8_name = fac_derived_wbdhu8_name
        self._fac_derived_wbd_name = fac_derived_wbd_name
        self._fac_fips_code = fac_fips_code
        self._fac_federal_agency_code = fac_federal_agency_code
        self._fac_federal_agency_name = fac_federal_agency_name
        self._fac_indian_cntry_flg = fac_indian_cntry_flg
        self._fac_indian_spatial_flg = fac_indian_spatial_flg
        self._fac_lat = fac_lat
        self._fac_long = fac_long
        self._fac_map_flg = fac_map_flg
        self._fac_map_icon = fac_map_icon
        self._fac_percent_minority = fac_percent_minority
        self._fac_pop_den = fac_pop_den
        self._fac_std_county_name = fac_std_county_name
        self._fac_tri_potw_trans = fac_tri_potw_trans
        self._fac_tri_reporter = fac_tri_reporter
        self._fac_trisw_rel = fac_trisw_rel
        self._fac_us_mex_border_flg = fac_us_mex_border_flg
        self._historic_criterion_code = historic_criterion_code
        self._indsw_flag = indsw_flag
        self._infea5yr_flag = infea5yr_flag
        self._insp5yr_flag = insp5yr_flag
        self._insp_def5yr_cnt = insp_def5yr_cnt
        self._issuing_agency = issuing_agency
        self._last_dmr_value_rcvd_date = last_dmr_value_rcvd_date
        self._lim_pollutant = lim_pollutant
        self._lower48 = lower48
        self._map = map
        self._master_external_permit_nmbr = master_external_permit_nmbr
        self._max_pctile_us = max_pctile_us
        self._max_score = max_score
        self._miss_dmr_qtrs = miss_dmr_qtrs
        self._msgp_corrective_action_smmry = msgp_corrective_action_smmry
        self._msgp_facility_inspctn_smmry = msgp_facility_inspctn_smmry
        self._msgp_last_report_year = msgp_last_report_year
        self._msgp_no_further_rdctn_rtnle = msgp_no_further_rdctn_rtnle
        self._msgp_permit_type = msgp_permit_type
        self._msgp_visual_assessment_smmry = msgp_visual_assessment_smmry
        self._npdes_data_groups = npdes_data_groups
        self._npdes_data_groups_descs = npdes_data_groups_descs
        self._npdesids = npdesids
        self._object_id = object_id
        self._other_permit_ids = other_permit_ids
        self._over80_count_us = over80_count_us
        self._past_cal_yr_average_flow = past_cal_yr_average_flow
        self._past_cal_yr_conv_pol_ovr_lmt = past_cal_yr_conv_pol_ovr_lmt
        self._past_cal_yr_conv_pollutants = past_cal_yr_conv_pollutants
        self._past_cal_yr_toxic_pol_ovr_lmt = past_cal_yr_toxic_pol_ovr_lmt
        self._past_cal_yr_toxic_pollutants = past_cal_yr_toxic_pollutants
        self._pctile_cancer_us = pctile_cancer_us
        self._pctile_dpm_us = pctile_dpm_us
        self._pctile_o3_us = pctile_o3_us
        self._pctile_pctpre1960_us = pctile_pctpre1960_us
        self._pctile_pm_us = pctile_pm_us
        self._pctile_proximity_npdesus = pctile_proximity_npdesus
        self._pctile_proximity_npl_us = pctile_proximity_npl_us
        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us
        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us
        self._pctile_resp_us = pctile_resp_us
        self._pctile_traffic_score_us = pctile_traffic_score_us
        self._permit_components = permit_components
        self._permit_name = permit_name
        self._permitting_agency = permitting_agency
        self._poll_with_violation = poll_with_violation
        self._rcraids = rcraids
        self._rad_gnis_name = rad_gnis_name
        self._rad_hu12_name = rad_hu12_name
        self._rad_reachcode = rad_reachcode
        self._rad_wbdhu8 = rad_wbdhu8
        self._rad_wbdhu8_name = rad_wbdhu8_name
        self._rad_wbd_huc12 = rad_wbd_huc12
        self._receiving_ms4_name = receiving_ms4_name
        self._reference_point = reference_point
        self._registry_id = registry_id
        self._rmp_ids = rmp_ids
        self._sdwaids = sdwaids
        self._score = score
        self._sector = sector
        self._source_id = source_id
        self._species_critical_habital_flag = species_critical_habital_flag
        self._state_auth_biosolids = state_auth_biosolids
        self._state_auth_fedfac = state_auth_fedfac
        self._state_auth_gen = state_auth_gen
        self._state_auth_npdes = state_auth_npdes
        self._state_auth_pretreat = state_auth_pretreat
        self._statute = statute
        self._storm_water_area = storm_water_area
        self._submitted_date = submitted_date
        self._subsector = subsector
        self._swppp_url = swppp_url
        self._triids = triids
        self._tr_ibal_flag = tr_ibal_flag
        self._type_of_monitoring = type_of_monitoring
        self._type_of_water = type_of_water
        self._vio_last_year = vio_last_year
        self._viol_flag = viol_flag
        self._web_docs = web_docs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cwa07':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cwa07 of this Cwa07.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airids(self):
        """Gets the airids of this Cwa07.

        Air Facility System (AFS) ID.

        :return: The airids of this Cwa07.
        :rtype: str
        """
        return self._airids

    @airids.setter
    def airids(self, airids):
        """Sets the airids of this Cwa07.

        Air Facility System (AFS) ID.

        :param airids: The airids of this Cwa07.
        :type airids: str
        """
        if airids is None:
            raise ValueError("Invalid value for `airids`, must not be `None`")

        self._airids = airids

    @property
    def active_lower48(self):
        """Gets the active_lower48 of this Cwa07.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :return: The active_lower48 of this Cwa07.
        :rtype: str
        """
        return self._active_lower48

    @active_lower48.setter
    def active_lower48(self, active_lower48):
        """Sets the active_lower48 of this Cwa07.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :param active_lower48: The active_lower48 of this Cwa07.
        :type active_lower48: str
        """
        if active_lower48 is None:
            raise ValueError("Invalid value for `active_lower48`, must not be `None`")

        self._active_lower48 = active_lower48

    @property
    def alr_exceedences(self):
        """Gets the alr_exceedences of this Cwa07.


        :return: The alr_exceedences of this Cwa07.
        :rtype: str
        """
        return self._alr_exceedences

    @alr_exceedences.setter
    def alr_exceedences(self, alr_exceedences):
        """Sets the alr_exceedences of this Cwa07.


        :param alr_exceedences: The alr_exceedences of this Cwa07.
        :type alr_exceedences: str
        """
        if alr_exceedences is None:
            raise ValueError("Invalid value for `alr_exceedences`, must not be `None`")

        self._alr_exceedences = alr_exceedences

    @property
    def associated_pollutant(self):
        """Gets the associated_pollutant of this Cwa07.

        Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.

        :return: The associated_pollutant of this Cwa07.
        :rtype: str
        """
        return self._associated_pollutant

    @associated_pollutant.setter
    def associated_pollutant(self, associated_pollutant):
        """Sets the associated_pollutant of this Cwa07.

        Description of pollutant(s) or pollutant constituent(s) associated with each industrial activity exposed to stormwater.

        :param associated_pollutant: The associated_pollutant of this Cwa07.
        :type associated_pollutant: str
        """
        if associated_pollutant is None:
            raise ValueError("Invalid value for `associated_pollutant`, must not be `None`")

        self._associated_pollutant = associated_pollutant

    @property
    def attains_aquatic_life_use_flg(self):
        """Gets the attains_aquatic_life_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :return: The attains_aquatic_life_use_flg of this Cwa07.
        :rtype: str
        """
        return self._attains_aquatic_life_use_flg

    @attains_aquatic_life_use_flg.setter
    def attains_aquatic_life_use_flg(self, attains_aquatic_life_use_flg):
        """Sets the attains_aquatic_life_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for aquatic life use. The data are from the ATTAINS database.

        :param attains_aquatic_life_use_flg: The attains_aquatic_life_use_flg of this Cwa07.
        :type attains_aquatic_life_use_flg: str
        """
        if attains_aquatic_life_use_flg is None:
            raise ValueError("Invalid value for `attains_aquatic_life_use_flg`, must not be `None`")

        self._attains_aquatic_life_use_flg = attains_aquatic_life_use_flg

    @property
    def attains_au_category(self):
        """Gets the attains_au_category of this Cwa07.

        The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).

        :return: The attains_au_category of this Cwa07.
        :rtype: str
        """
        return self._attains_au_category

    @attains_au_category.setter
    def attains_au_category(self, attains_au_category):
        """Sets the attains_au_category of this Cwa07.

        The impairment class or category of the waterbody in which the facility is permitted to discharge directly. The data are from the ATTAINS database: - 5  = Impaired: TMDL needed. Available information indicates that at least one designated use is not being supported and a TMDL is needed (also known as the 303(d) listed waters). - 4  = Impaired: TMDL not needed. Available information indicates that at least one designated use is not being supported, but a TMDL is not needed (see subcategories). - 4a = TMDL completed. A TMDL has been completed, but impairment still exists. - 4b = TMDL alternative. Impairment is being addressed by a method other than a TMDL (e.g., stream bank improvements). - 4c = Non-pollutant causes. Cause of impairment is not a pollutant (e.g., habitat destruction).

        :param attains_au_category: The attains_au_category of this Cwa07.
        :type attains_au_category: str
        """
        if attains_au_category is None:
            raise ValueError("Invalid value for `attains_au_category`, must not be `None`")

        self._attains_au_category = attains_au_category

    @property
    def attains_cause_groups(self):
        """Gets the attains_cause_groups of this Cwa07.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :return: The attains_cause_groups of this Cwa07.
        :rtype: str
        """
        return self._attains_cause_groups

    @attains_cause_groups.setter
    def attains_cause_groups(self, attains_cause_groups):
        """Sets the attains_cause_groups of this Cwa07.

        Lists all groups of pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :param attains_cause_groups: The attains_cause_groups of this Cwa07.
        :type attains_cause_groups: str
        """
        if attains_cause_groups is None:
            raise ValueError("Invalid value for `attains_cause_groups`, must not be `None`")

        self._attains_cause_groups = attains_cause_groups

    @property
    def attains_cycle_year(self):
        """Gets the attains_cycle_year of this Cwa07.

        The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.

        :return: The attains_cycle_year of this Cwa07.
        :rtype: str
        """
        return self._attains_cycle_year

    @attains_cycle_year.setter
    def attains_cycle_year(self, attains_cycle_year):
        """Sets the attains_cycle_year of this Cwa07.

        The year in which the most recent state assessment occurred for the waterbody. The data are from the ATTAINS database.

        :param attains_cycle_year: The attains_cycle_year of this Cwa07.
        :type attains_cycle_year: str
        """
        if attains_cycle_year is None:
            raise ValueError("Invalid value for `attains_cycle_year`, must not be `None`")

        self._attains_cycle_year = attains_cycle_year

    @property
    def attains_exceptnl_use_flg(self):
        """Gets the attains_exceptnl_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :return: The attains_exceptnl_use_flg of this Cwa07.
        :rtype: str
        """
        return self._attains_exceptnl_use_flg

    @attains_exceptnl_use_flg.setter
    def attains_exceptnl_use_flg(self, attains_exceptnl_use_flg):
        """Sets the attains_exceptnl_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for exceptional use. The data are from the ATTAINS database.

        :param attains_exceptnl_use_flg: The attains_exceptnl_use_flg of this Cwa07.
        :type attains_exceptnl_use_flg: str
        """
        if attains_exceptnl_use_flg is None:
            raise ValueError("Invalid value for `attains_exceptnl_use_flg`, must not be `None`")

        self._attains_exceptnl_use_flg = attains_exceptnl_use_flg

    @property
    def attains_imp_water_flg(self):
        """Gets the attains_imp_water_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.

        :return: The attains_imp_water_flg of this Cwa07.
        :rtype: str
        """
        return self._attains_imp_water_flg

    @attains_imp_water_flg.setter
    def attains_imp_water_flg(self, attains_imp_water_flg):
        """Sets the attains_imp_water_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is listed for impairment. The data are from the ATTAINS database.

        :param attains_imp_water_flg: The attains_imp_water_flg of this Cwa07.
        :type attains_imp_water_flg: str
        """
        if attains_imp_water_flg is None:
            raise ValueError("Invalid value for `attains_imp_water_flg`, must not be `None`")

        self._attains_imp_water_flg = attains_imp_water_flg

    @property
    def attains_possible_npdes_params(self):
        """Gets the attains_possible_npdes_params of this Cwa07.

        Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.

        :return: The attains_possible_npdes_params of this Cwa07.
        :rtype: str
        """
        return self._attains_possible_npdes_params

    @attains_possible_npdes_params.setter
    def attains_possible_npdes_params(self, attains_possible_npdes_params):
        """Sets the attains_possible_npdes_params of this Cwa07.

        Lists all pollutants discharged by the facility that are potentially contributing to the impairment of local waterbodies.

        :param attains_possible_npdes_params: The attains_possible_npdes_params of this Cwa07.
        :type attains_possible_npdes_params: str
        """
        if attains_possible_npdes_params is None:
            raise ValueError("Invalid value for `attains_possible_npdes_params`, must not be `None`")

        self._attains_possible_npdes_params = attains_possible_npdes_params

    @property
    def attains_recreation_use_flg(self):
        """Gets the attains_recreation_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :return: The attains_recreation_use_flg of this Cwa07.
        :rtype: str
        """
        return self._attains_recreation_use_flg

    @attains_recreation_use_flg.setter
    def attains_recreation_use_flg(self, attains_recreation_use_flg):
        """Sets the attains_recreation_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for recreational use. The data are from the ATTAINS database.

        :param attains_recreation_use_flg: The attains_recreation_use_flg of this Cwa07.
        :type attains_recreation_use_flg: str
        """
        if attains_recreation_use_flg is None:
            raise ValueError("Invalid value for `attains_recreation_use_flg`, must not be `None`")

        self._attains_recreation_use_flg = attains_recreation_use_flg

    @property
    def attains_shellfish_use_flg(self):
        """Gets the attains_shellfish_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.

        :return: The attains_shellfish_use_flg of this Cwa07.
        :rtype: str
        """
        return self._attains_shellfish_use_flg

    @attains_shellfish_use_flg.setter
    def attains_shellfish_use_flg(self, attains_shellfish_use_flg):
        """Sets the attains_shellfish_use_flg of this Cwa07.

        Displays \"Y\" if the waterbody in which the facility resides is designated for shellfish use. The data are from the ATTAINS database.

        :param attains_shellfish_use_flg: The attains_shellfish_use_flg of this Cwa07.
        :type attains_shellfish_use_flg: str
        """
        if attains_shellfish_use_flg is None:
            raise ValueError("Invalid value for `attains_shellfish_use_flg`, must not be `None`")

        self._attains_shellfish_use_flg = attains_shellfish_use_flg

    @property
    def attains_source(self):
        """Gets the attains_source of this Cwa07.

        The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking & Implementation System (ATTAINS) database.

        :return: The attains_source of this Cwa07.
        :rtype: str
        """
        return self._attains_source

    @attains_source.setter
    def attains_source(self, attains_source):
        """Sets the attains_source of this Cwa07.

        The CWA Report in which the waterbody data can be found. The data are from the Assessment TMDL Tracking & Implementation System (ATTAINS) database.

        :param attains_source: The attains_source of this Cwa07.
        :type attains_source: str
        """
        if attains_source is None:
            raise ValueError("Invalid value for `attains_source`, must not be `None`")

        self._attains_source = attains_source

    @property
    def attains_state_causes(self):
        """Gets the attains_state_causes of this Cwa07.

        Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :return: The attains_state_causes of this Cwa07.
        :rtype: str
        """
        return self._attains_state_causes

    @attains_state_causes.setter
    def attains_state_causes(self, attains_state_causes):
        """Sets the attains_state_causes of this Cwa07.

        Lists all pollutants or stressors that are causing impairment in the assessed waterbody. The data are from the ATTAINS database.

        :param attains_state_causes: The attains_state_causes of this Cwa07.
        :type attains_state_causes: str
        """
        if attains_state_causes is None:
            raise ValueError("Invalid value for `attains_state_causes`, must not be `None`")

        self._attains_state_causes = attains_state_causes

    @property
    def beach_close_last2yrs_flg(self):
        """Gets the beach_close_last2yrs_flg of this Cwa07.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.

        :return: The beach_close_last2yrs_flg of this Cwa07.
        :rtype: str
        """
        return self._beach_close_last2yrs_flg

    @beach_close_last2yrs_flg.setter
    def beach_close_last2yrs_flg(self, beach_close_last2yrs_flg):
        """Sets the beach_close_last2yrs_flg of this Cwa07.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last two years.

        :param beach_close_last2yrs_flg: The beach_close_last2yrs_flg of this Cwa07.
        :type beach_close_last2yrs_flg: str
        """
        if beach_close_last2yrs_flg is None:
            raise ValueError("Invalid value for `beach_close_last2yrs_flg`, must not be `None`")

        self._beach_close_last2yrs_flg = beach_close_last2yrs_flg

    @property
    def beach_close_last_year_flg(self):
        """Gets the beach_close_last_year_flg of this Cwa07.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.

        :return: The beach_close_last_year_flg of this Cwa07.
        :rtype: str
        """
        return self._beach_close_last_year_flg

    @beach_close_last_year_flg.setter
    def beach_close_last_year_flg(self, beach_close_last_year_flg):
        """Sets the beach_close_last_year_flg of this Cwa07.

        Displays \"Y\" if the facility is located on or near a waterbody with a beach closure within the last year.

        :param beach_close_last_year_flg: The beach_close_last_year_flg of this Cwa07.
        :type beach_close_last_year_flg: str
        """
        if beach_close_last_year_flg is None:
            raise ValueError("Invalid value for `beach_close_last_year_flg`, must not be `None`")

        self._beach_close_last_year_flg = beach_close_last_year_flg

    @property
    def bio_analy_method_catgrys(self):
        """Gets the bio_analy_method_catgrys of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :return: The bio_analy_method_catgrys of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_method_catgrys

    @bio_analy_method_catgrys.setter
    def bio_analy_method_catgrys(self, bio_analy_method_catgrys):
        """Sets the bio_analy_method_catgrys of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :param bio_analy_method_catgrys: The bio_analy_method_catgrys of this Cwa07.
        :type bio_analy_method_catgrys: str
        """
        if bio_analy_method_catgrys is None:
            raise ValueError("Invalid value for `bio_analy_method_catgrys`, must not be `None`")

        self._bio_analy_method_catgrys = bio_analy_method_catgrys

    @property
    def bio_analy_method_catgrys2016(self):
        """Gets the bio_analy_method_catgrys2016 of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :return: The bio_analy_method_catgrys2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_method_catgrys2016

    @bio_analy_method_catgrys2016.setter
    def bio_analy_method_catgrys2016(self, bio_analy_method_catgrys2016):
        """Sets the bio_analy_method_catgrys2016 of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :param bio_analy_method_catgrys2016: The bio_analy_method_catgrys2016 of this Cwa07.
        :type bio_analy_method_catgrys2016: str
        """
        if bio_analy_method_catgrys2016 is None:
            raise ValueError("Invalid value for `bio_analy_method_catgrys2016`, must not be `None`")

        self._bio_analy_method_catgrys2016 = bio_analy_method_catgrys2016

    @property
    def bio_analy_method_catgrys2017(self):
        """Gets the bio_analy_method_catgrys2017 of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :return: The bio_analy_method_catgrys2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_method_catgrys2017

    @bio_analy_method_catgrys2017.setter
    def bio_analy_method_catgrys2017(self, bio_analy_method_catgrys2017):
        """Sets the bio_analy_method_catgrys2017 of this Cwa07.

        Displays the categories of the analytic methods used by the facility to analyze regulated parameters at the facility.

        :param bio_analy_method_catgrys2017: The bio_analy_method_catgrys2017 of this Cwa07.
        :type bio_analy_method_catgrys2017: str
        """
        if bio_analy_method_catgrys2017 is None:
            raise ValueError("Invalid value for `bio_analy_method_catgrys2017`, must not be `None`")

        self._bio_analy_method_catgrys2017 = bio_analy_method_catgrys2017

    @property
    def bio_analy_methods(self):
        """Gets the bio_analy_methods of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :return: The bio_analy_methods of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_methods

    @bio_analy_methods.setter
    def bio_analy_methods(self, bio_analy_methods):
        """Sets the bio_analy_methods of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :param bio_analy_methods: The bio_analy_methods of this Cwa07.
        :type bio_analy_methods: str
        """
        if bio_analy_methods is None:
            raise ValueError("Invalid value for `bio_analy_methods`, must not be `None`")

        self._bio_analy_methods = bio_analy_methods

    @property
    def bio_analy_methods2016(self):
        """Gets the bio_analy_methods2016 of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :return: The bio_analy_methods2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_methods2016

    @bio_analy_methods2016.setter
    def bio_analy_methods2016(self, bio_analy_methods2016):
        """Sets the bio_analy_methods2016 of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :param bio_analy_methods2016: The bio_analy_methods2016 of this Cwa07.
        :type bio_analy_methods2016: str
        """
        if bio_analy_methods2016 is None:
            raise ValueError("Invalid value for `bio_analy_methods2016`, must not be `None`")

        self._bio_analy_methods2016 = bio_analy_methods2016

    @property
    def bio_analy_methods2017(self):
        """Gets the bio_analy_methods2017 of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :return: The bio_analy_methods2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_analy_methods2017

    @bio_analy_methods2017.setter
    def bio_analy_methods2017(self, bio_analy_methods2017):
        """Sets the bio_analy_methods2017 of this Cwa07.

        Displays the analytic methods used by the facility to analyze enteric viruses, fecal coliforms, helminth ova, Salmonella sp., and other regulated parameters as reported on the Biosolids Program Report.

        :param bio_analy_methods2017: The bio_analy_methods2017 of this Cwa07.
        :type bio_analy_methods2017: str
        """
        if bio_analy_methods2017 is None:
            raise ValueError("Invalid value for `bio_analy_methods2017`, must not be `None`")

        self._bio_analy_methods2017 = bio_analy_methods2017

    @property
    def bio_comment_text(self):
        """Gets the bio_comment_text of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :return: The bio_comment_text of this Cwa07.
        :rtype: str
        """
        return self._bio_comment_text

    @bio_comment_text.setter
    def bio_comment_text(self, bio_comment_text):
        """Sets the bio_comment_text of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :param bio_comment_text: The bio_comment_text of this Cwa07.
        :type bio_comment_text: str
        """
        if bio_comment_text is None:
            raise ValueError("Invalid value for `bio_comment_text`, must not be `None`")

        self._bio_comment_text = bio_comment_text

    @property
    def bio_comment_text2016(self):
        """Gets the bio_comment_text2016 of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :return: The bio_comment_text2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_comment_text2016

    @bio_comment_text2016.setter
    def bio_comment_text2016(self, bio_comment_text2016):
        """Sets the bio_comment_text2016 of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :param bio_comment_text2016: The bio_comment_text2016 of this Cwa07.
        :type bio_comment_text2016: str
        """
        if bio_comment_text2016 is None:
            raise ValueError("Invalid value for `bio_comment_text2016`, must not be `None`")

        self._bio_comment_text2016 = bio_comment_text2016

    @property
    def bio_comment_text2017(self):
        """Gets the bio_comment_text2017 of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :return: The bio_comment_text2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_comment_text2017

    @bio_comment_text2017.setter
    def bio_comment_text2017(self, bio_comment_text2017):
        """Sets the bio_comment_text2017 of this Cwa07.

        Free text allowing the user to provide comments on the annual program report.

        :param bio_comment_text2017: The bio_comment_text2017 of this Cwa07.
        :type bio_comment_text2017: str
        """
        if bio_comment_text2017 is None:
            raise ValueError("Invalid value for `bio_comment_text2017`, must not be `None`")

        self._bio_comment_text2017 = bio_comment_text2017

    @property
    def bio_incineration_sum(self):
        """Gets the bio_incineration_sum of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :return: The bio_incineration_sum of this Cwa07.
        :rtype: str
        """
        return self._bio_incineration_sum

    @bio_incineration_sum.setter
    def bio_incineration_sum(self, bio_incineration_sum):
        """Sets the bio_incineration_sum of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :param bio_incineration_sum: The bio_incineration_sum of this Cwa07.
        :type bio_incineration_sum: str
        """
        if bio_incineration_sum is None:
            raise ValueError("Invalid value for `bio_incineration_sum`, must not be `None`")

        self._bio_incineration_sum = bio_incineration_sum

    @property
    def bio_incineration_sum2016(self):
        """Gets the bio_incineration_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :return: The bio_incineration_sum2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_incineration_sum2016

    @bio_incineration_sum2016.setter
    def bio_incineration_sum2016(self, bio_incineration_sum2016):
        """Sets the bio_incineration_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :param bio_incineration_sum2016: The bio_incineration_sum2016 of this Cwa07.
        :type bio_incineration_sum2016: str
        """
        if bio_incineration_sum2016 is None:
            raise ValueError("Invalid value for `bio_incineration_sum2016`, must not be `None`")

        self._bio_incineration_sum2016 = bio_incineration_sum2016

    @property
    def bio_incineration_sum2017(self):
        """Gets the bio_incineration_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :return: The bio_incineration_sum2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_incineration_sum2017

    @bio_incineration_sum2017.setter
    def bio_incineration_sum2017(self, bio_incineration_sum2017):
        """Sets the bio_incineration_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids incinerated.

        :param bio_incineration_sum2017: The bio_incineration_sum2017 of this Cwa07.
        :type bio_incineration_sum2017: str
        """
        if bio_incineration_sum2017 is None:
            raise ValueError("Invalid value for `bio_incineration_sum2017`, must not be `None`")

        self._bio_incineration_sum2017 = bio_incineration_sum2017

    @property
    def bio_land_application_sum(self):
        """Gets the bio_land_application_sum of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :return: The bio_land_application_sum of this Cwa07.
        :rtype: str
        """
        return self._bio_land_application_sum

    @bio_land_application_sum.setter
    def bio_land_application_sum(self, bio_land_application_sum):
        """Sets the bio_land_application_sum of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :param bio_land_application_sum: The bio_land_application_sum of this Cwa07.
        :type bio_land_application_sum: str
        """
        if bio_land_application_sum is None:
            raise ValueError("Invalid value for `bio_land_application_sum`, must not be `None`")

        self._bio_land_application_sum = bio_land_application_sum

    @property
    def bio_land_application_sum2016(self):
        """Gets the bio_land_application_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :return: The bio_land_application_sum2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_land_application_sum2016

    @bio_land_application_sum2016.setter
    def bio_land_application_sum2016(self, bio_land_application_sum2016):
        """Sets the bio_land_application_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :param bio_land_application_sum2016: The bio_land_application_sum2016 of this Cwa07.
        :type bio_land_application_sum2016: str
        """
        if bio_land_application_sum2016 is None:
            raise ValueError("Invalid value for `bio_land_application_sum2016`, must not be `None`")

        self._bio_land_application_sum2016 = bio_land_application_sum2016

    @property
    def bio_land_application_sum2017(self):
        """Gets the bio_land_application_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :return: The bio_land_application_sum2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_land_application_sum2017

    @bio_land_application_sum2017.setter
    def bio_land_application_sum2017(self, bio_land_application_sum2017):
        """Sets the bio_land_application_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids land applied.

        :param bio_land_application_sum2017: The bio_land_application_sum2017 of this Cwa07.
        :type bio_land_application_sum2017: str
        """
        if bio_land_application_sum2017 is None:
            raise ValueError("Invalid value for `bio_land_application_sum2017`, must not be `None`")

        self._bio_land_application_sum2017 = bio_land_application_sum2017

    @property
    def bio_mgmt_containers(self):
        """Gets the bio_mgmt_containers of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :return: The bio_mgmt_containers of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_containers

    @bio_mgmt_containers.setter
    def bio_mgmt_containers(self, bio_mgmt_containers):
        """Sets the bio_mgmt_containers of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :param bio_mgmt_containers: The bio_mgmt_containers of this Cwa07.
        :type bio_mgmt_containers: str
        """
        if bio_mgmt_containers is None:
            raise ValueError("Invalid value for `bio_mgmt_containers`, must not be `None`")

        self._bio_mgmt_containers = bio_mgmt_containers

    @property
    def bio_mgmt_containers2016(self):
        """Gets the bio_mgmt_containers2016 of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :return: The bio_mgmt_containers2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_containers2016

    @bio_mgmt_containers2016.setter
    def bio_mgmt_containers2016(self, bio_mgmt_containers2016):
        """Sets the bio_mgmt_containers2016 of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :param bio_mgmt_containers2016: The bio_mgmt_containers2016 of this Cwa07.
        :type bio_mgmt_containers2016: str
        """
        if bio_mgmt_containers2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_containers2016`, must not be `None`")

        self._bio_mgmt_containers2016 = bio_mgmt_containers2016

    @property
    def bio_mgmt_containers2017(self):
        """Gets the bio_mgmt_containers2017 of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :return: The bio_mgmt_containers2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_containers2017

    @bio_mgmt_containers2017.setter
    def bio_mgmt_containers2017(self, bio_mgmt_containers2017):
        """Sets the bio_mgmt_containers2017 of this Cwa07.

        Identifies the nature of each biosolids and sewage sludge material generated by the facility in terms of whether the material is a biosolid or sewage sludge and whether the material is ultimately conveyed off-site in bulk or in bags.

        :param bio_mgmt_containers2017: The bio_mgmt_containers2017 of this Cwa07.
        :type bio_mgmt_containers2017: str
        """
        if bio_mgmt_containers2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_containers2017`, must not be `None`")

        self._bio_mgmt_containers2017 = bio_mgmt_containers2017

    @property
    def bio_mgmt_def_categories(self):
        """Gets the bio_mgmt_def_categories of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :return: The bio_mgmt_def_categories of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_categories

    @bio_mgmt_def_categories.setter
    def bio_mgmt_def_categories(self, bio_mgmt_def_categories):
        """Sets the bio_mgmt_def_categories of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :param bio_mgmt_def_categories: The bio_mgmt_def_categories of this Cwa07.
        :type bio_mgmt_def_categories: str
        """
        if bio_mgmt_def_categories is None:
            raise ValueError("Invalid value for `bio_mgmt_def_categories`, must not be `None`")

        self._bio_mgmt_def_categories = bio_mgmt_def_categories

    @property
    def bio_mgmt_def_categories2016(self):
        """Gets the bio_mgmt_def_categories2016 of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :return: The bio_mgmt_def_categories2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_categories2016

    @bio_mgmt_def_categories2016.setter
    def bio_mgmt_def_categories2016(self, bio_mgmt_def_categories2016):
        """Sets the bio_mgmt_def_categories2016 of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :param bio_mgmt_def_categories2016: The bio_mgmt_def_categories2016 of this Cwa07.
        :type bio_mgmt_def_categories2016: str
        """
        if bio_mgmt_def_categories2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_def_categories2016`, must not be `None`")

        self._bio_mgmt_def_categories2016 = bio_mgmt_def_categories2016

    @property
    def bio_mgmt_def_categories2017(self):
        """Gets the bio_mgmt_def_categories2017 of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :return: The bio_mgmt_def_categories2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_categories2017

    @bio_mgmt_def_categories2017.setter
    def bio_mgmt_def_categories2017(self, bio_mgmt_def_categories2017):
        """Sets the bio_mgmt_def_categories2017 of this Cwa07.

        Indicates the program deficiency category to assist in reporting and displaying program deficiencies on web screens.

        :param bio_mgmt_def_categories2017: The bio_mgmt_def_categories2017 of this Cwa07.
        :type bio_mgmt_def_categories2017: str
        """
        if bio_mgmt_def_categories2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_def_categories2017`, must not be `None`")

        self._bio_mgmt_def_categories2017 = bio_mgmt_def_categories2017

    @property
    def bio_mgmt_def_current_cnt(self):
        """Gets the bio_mgmt_def_current_cnt of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :return: The bio_mgmt_def_current_cnt of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_current_cnt

    @bio_mgmt_def_current_cnt.setter
    def bio_mgmt_def_current_cnt(self, bio_mgmt_def_current_cnt):
        """Sets the bio_mgmt_def_current_cnt of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :param bio_mgmt_def_current_cnt: The bio_mgmt_def_current_cnt of this Cwa07.
        :type bio_mgmt_def_current_cnt: str
        """
        if bio_mgmt_def_current_cnt is None:
            raise ValueError("Invalid value for `bio_mgmt_def_current_cnt`, must not be `None`")

        self._bio_mgmt_def_current_cnt = bio_mgmt_def_current_cnt

    @property
    def bio_mgmt_def_current_cnt2016(self):
        """Gets the bio_mgmt_def_current_cnt2016 of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :return: The bio_mgmt_def_current_cnt2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_current_cnt2016

    @bio_mgmt_def_current_cnt2016.setter
    def bio_mgmt_def_current_cnt2016(self, bio_mgmt_def_current_cnt2016):
        """Sets the bio_mgmt_def_current_cnt2016 of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :param bio_mgmt_def_current_cnt2016: The bio_mgmt_def_current_cnt2016 of this Cwa07.
        :type bio_mgmt_def_current_cnt2016: str
        """
        if bio_mgmt_def_current_cnt2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_def_current_cnt2016`, must not be `None`")

        self._bio_mgmt_def_current_cnt2016 = bio_mgmt_def_current_cnt2016

    @property
    def bio_mgmt_def_current_cnt2017(self):
        """Gets the bio_mgmt_def_current_cnt2017 of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :return: The bio_mgmt_def_current_cnt2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_def_current_cnt2017

    @bio_mgmt_def_current_cnt2017.setter
    def bio_mgmt_def_current_cnt2017(self, bio_mgmt_def_current_cnt2017):
        """Sets the bio_mgmt_def_current_cnt2017 of this Cwa07.

        The number of times noncompliance reported by the facility in the last 3 years.

        :param bio_mgmt_def_current_cnt2017: The bio_mgmt_def_current_cnt2017 of this Cwa07.
        :type bio_mgmt_def_current_cnt2017: str
        """
        if bio_mgmt_def_current_cnt2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_def_current_cnt2017`, must not be `None`")

        self._bio_mgmt_def_current_cnt2017 = bio_mgmt_def_current_cnt2017

    @property
    def bio_mgmt_deficiencies(self):
        """Gets the bio_mgmt_deficiencies of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :return: The bio_mgmt_deficiencies of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_deficiencies

    @bio_mgmt_deficiencies.setter
    def bio_mgmt_deficiencies(self, bio_mgmt_deficiencies):
        """Sets the bio_mgmt_deficiencies of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :param bio_mgmt_deficiencies: The bio_mgmt_deficiencies of this Cwa07.
        :type bio_mgmt_deficiencies: str
        """
        if bio_mgmt_deficiencies is None:
            raise ValueError("Invalid value for `bio_mgmt_deficiencies`, must not be `None`")

        self._bio_mgmt_deficiencies = bio_mgmt_deficiencies

    @property
    def bio_mgmt_deficiencies2016(self):
        """Gets the bio_mgmt_deficiencies2016 of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :return: The bio_mgmt_deficiencies2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_deficiencies2016

    @bio_mgmt_deficiencies2016.setter
    def bio_mgmt_deficiencies2016(self, bio_mgmt_deficiencies2016):
        """Sets the bio_mgmt_deficiencies2016 of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :param bio_mgmt_deficiencies2016: The bio_mgmt_deficiencies2016 of this Cwa07.
        :type bio_mgmt_deficiencies2016: str
        """
        if bio_mgmt_deficiencies2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_deficiencies2016`, must not be `None`")

        self._bio_mgmt_deficiencies2016 = bio_mgmt_deficiencies2016

    @property
    def bio_mgmt_deficiencies2017(self):
        """Gets the bio_mgmt_deficiencies2017 of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :return: The bio_mgmt_deficiencies2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_deficiencies2017

    @bio_mgmt_deficiencies2017.setter
    def bio_mgmt_deficiencies2017(self, bio_mgmt_deficiencies2017):
        """Sets the bio_mgmt_deficiencies2017 of this Cwa07.

        Indicates the type of NPDES special regulatory program deficiency.

        :param bio_mgmt_deficiencies2017: The bio_mgmt_deficiencies2017 of this Cwa07.
        :type bio_mgmt_deficiencies2017: str
        """
        if bio_mgmt_deficiencies2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_deficiencies2017`, must not be `None`")

        self._bio_mgmt_deficiencies2017 = bio_mgmt_deficiencies2017

    @property
    def bio_mgmt_handlers(self):
        """Gets the bio_mgmt_handlers of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :return: The bio_mgmt_handlers of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_handlers

    @bio_mgmt_handlers.setter
    def bio_mgmt_handlers(self, bio_mgmt_handlers):
        """Sets the bio_mgmt_handlers of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :param bio_mgmt_handlers: The bio_mgmt_handlers of this Cwa07.
        :type bio_mgmt_handlers: str
        """
        if bio_mgmt_handlers is None:
            raise ValueError("Invalid value for `bio_mgmt_handlers`, must not be `None`")

        self._bio_mgmt_handlers = bio_mgmt_handlers

    @property
    def bio_mgmt_handlers2016(self):
        """Gets the bio_mgmt_handlers2016 of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :return: The bio_mgmt_handlers2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_handlers2016

    @bio_mgmt_handlers2016.setter
    def bio_mgmt_handlers2016(self, bio_mgmt_handlers2016):
        """Sets the bio_mgmt_handlers2016 of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :param bio_mgmt_handlers2016: The bio_mgmt_handlers2016 of this Cwa07.
        :type bio_mgmt_handlers2016: str
        """
        if bio_mgmt_handlers2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_handlers2016`, must not be `None`")

        self._bio_mgmt_handlers2016 = bio_mgmt_handlers2016

    @property
    def bio_mgmt_handlers2017(self):
        """Gets the bio_mgmt_handlers2017 of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :return: The bio_mgmt_handlers2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_handlers2017

    @bio_mgmt_handlers2017.setter
    def bio_mgmt_handlers2017(self, bio_mgmt_handlers2017):
        """Sets the bio_mgmt_handlers2017 of this Cwa07.

        Indicates the type of Biosolids or Sewage Sludge handlers/preparers, either owner/operator or off-site third-party handler/preparer.

        :param bio_mgmt_handlers2017: The bio_mgmt_handlers2017 of this Cwa07.
        :type bio_mgmt_handlers2017: str
        """
        if bio_mgmt_handlers2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_handlers2017`, must not be `None`")

        self._bio_mgmt_handlers2017 = bio_mgmt_handlers2017

    @property
    def bio_mgmt_pathogens(self):
        """Gets the bio_mgmt_pathogens of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :return: The bio_mgmt_pathogens of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathogens

    @bio_mgmt_pathogens.setter
    def bio_mgmt_pathogens(self, bio_mgmt_pathogens):
        """Sets the bio_mgmt_pathogens of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :param bio_mgmt_pathogens: The bio_mgmt_pathogens of this Cwa07.
        :type bio_mgmt_pathogens: str
        """
        if bio_mgmt_pathogens is None:
            raise ValueError("Invalid value for `bio_mgmt_pathogens`, must not be `None`")

        self._bio_mgmt_pathogens = bio_mgmt_pathogens

    @property
    def bio_mgmt_pathogens2016(self):
        """Gets the bio_mgmt_pathogens2016 of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :return: The bio_mgmt_pathogens2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathogens2016

    @bio_mgmt_pathogens2016.setter
    def bio_mgmt_pathogens2016(self, bio_mgmt_pathogens2016):
        """Sets the bio_mgmt_pathogens2016 of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :param bio_mgmt_pathogens2016: The bio_mgmt_pathogens2016 of this Cwa07.
        :type bio_mgmt_pathogens2016: str
        """
        if bio_mgmt_pathogens2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_pathogens2016`, must not be `None`")

        self._bio_mgmt_pathogens2016 = bio_mgmt_pathogens2016

    @property
    def bio_mgmt_pathogens2017(self):
        """Gets the bio_mgmt_pathogens2017 of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :return: The bio_mgmt_pathogens2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathogens2017

    @bio_mgmt_pathogens2017.setter
    def bio_mgmt_pathogens2017(self, bio_mgmt_pathogens2017):
        """Sets the bio_mgmt_pathogens2017 of this Cwa07.

        Identifies the pathogen class for biosolids or sewage sludge generated by the facility.

        :param bio_mgmt_pathogens2017: The bio_mgmt_pathogens2017 of this Cwa07.
        :type bio_mgmt_pathogens2017: str
        """
        if bio_mgmt_pathogens2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_pathogens2017`, must not be `None`")

        self._bio_mgmt_pathogens2017 = bio_mgmt_pathogens2017

    @property
    def bio_mgmt_pathreds(self):
        """Gets the bio_mgmt_pathreds of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :return: The bio_mgmt_pathreds of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathreds

    @bio_mgmt_pathreds.setter
    def bio_mgmt_pathreds(self, bio_mgmt_pathreds):
        """Sets the bio_mgmt_pathreds of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :param bio_mgmt_pathreds: The bio_mgmt_pathreds of this Cwa07.
        :type bio_mgmt_pathreds: str
        """
        if bio_mgmt_pathreds is None:
            raise ValueError("Invalid value for `bio_mgmt_pathreds`, must not be `None`")

        self._bio_mgmt_pathreds = bio_mgmt_pathreds

    @property
    def bio_mgmt_pathreds2016(self):
        """Gets the bio_mgmt_pathreds2016 of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :return: The bio_mgmt_pathreds2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathreds2016

    @bio_mgmt_pathreds2016.setter
    def bio_mgmt_pathreds2016(self, bio_mgmt_pathreds2016):
        """Sets the bio_mgmt_pathreds2016 of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :param bio_mgmt_pathreds2016: The bio_mgmt_pathreds2016 of this Cwa07.
        :type bio_mgmt_pathreds2016: str
        """
        if bio_mgmt_pathreds2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_pathreds2016`, must not be `None`")

        self._bio_mgmt_pathreds2016 = bio_mgmt_pathreds2016

    @property
    def bio_mgmt_pathreds2017(self):
        """Gets the bio_mgmt_pathreds2017 of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :return: The bio_mgmt_pathreds2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_pathreds2017

    @bio_mgmt_pathreds2017.setter
    def bio_mgmt_pathreds2017(self, bio_mgmt_pathreds2017):
        """Sets the bio_mgmt_pathreds2017 of this Cwa07.

        Identifies the options used by the facility to control pathogens for a Biosolids Management Practice.

        :param bio_mgmt_pathreds2017: The bio_mgmt_pathreds2017 of this Cwa07.
        :type bio_mgmt_pathreds2017: str
        """
        if bio_mgmt_pathreds2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_pathreds2017`, must not be `None`")

        self._bio_mgmt_pathreds2017 = bio_mgmt_pathreds2017

    @property
    def bio_mgmt_prctce_stypes(self):
        """Gets the bio_mgmt_prctce_stypes of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :return: The bio_mgmt_prctce_stypes of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_stypes

    @bio_mgmt_prctce_stypes.setter
    def bio_mgmt_prctce_stypes(self, bio_mgmt_prctce_stypes):
        """Sets the bio_mgmt_prctce_stypes of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :param bio_mgmt_prctce_stypes: The bio_mgmt_prctce_stypes of this Cwa07.
        :type bio_mgmt_prctce_stypes: str
        """
        if bio_mgmt_prctce_stypes is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_stypes`, must not be `None`")

        self._bio_mgmt_prctce_stypes = bio_mgmt_prctce_stypes

    @property
    def bio_mgmt_prctce_stypes2016(self):
        """Gets the bio_mgmt_prctce_stypes2016 of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :return: The bio_mgmt_prctce_stypes2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_stypes2016

    @bio_mgmt_prctce_stypes2016.setter
    def bio_mgmt_prctce_stypes2016(self, bio_mgmt_prctce_stypes2016):
        """Sets the bio_mgmt_prctce_stypes2016 of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :param bio_mgmt_prctce_stypes2016: The bio_mgmt_prctce_stypes2016 of this Cwa07.
        :type bio_mgmt_prctce_stypes2016: str
        """
        if bio_mgmt_prctce_stypes2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_stypes2016`, must not be `None`")

        self._bio_mgmt_prctce_stypes2016 = bio_mgmt_prctce_stypes2016

    @property
    def bio_mgmt_prctce_stypes2017(self):
        """Gets the bio_mgmt_prctce_stypes2017 of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :return: The bio_mgmt_prctce_stypes2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_stypes2017

    @bio_mgmt_prctce_stypes2017.setter
    def bio_mgmt_prctce_stypes2017(self, bio_mgmt_prctce_stypes2017):
        """Sets the bio_mgmt_prctce_stypes2017 of this Cwa07.

        Additional detail about the type of Management Practice used for an amount of Biosolids or Sewage Sludge.

        :param bio_mgmt_prctce_stypes2017: The bio_mgmt_prctce_stypes2017 of this Cwa07.
        :type bio_mgmt_prctce_stypes2017: str
        """
        if bio_mgmt_prctce_stypes2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_stypes2017`, must not be `None`")

        self._bio_mgmt_prctce_stypes2017 = bio_mgmt_prctce_stypes2017

    @property
    def bio_mgmt_prctce_types(self):
        """Gets the bio_mgmt_prctce_types of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :return: The bio_mgmt_prctce_types of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_types

    @bio_mgmt_prctce_types.setter
    def bio_mgmt_prctce_types(self, bio_mgmt_prctce_types):
        """Sets the bio_mgmt_prctce_types of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :param bio_mgmt_prctce_types: The bio_mgmt_prctce_types of this Cwa07.
        :type bio_mgmt_prctce_types: str
        """
        if bio_mgmt_prctce_types is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_types`, must not be `None`")

        self._bio_mgmt_prctce_types = bio_mgmt_prctce_types

    @property
    def bio_mgmt_prctce_types2016(self):
        """Gets the bio_mgmt_prctce_types2016 of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :return: The bio_mgmt_prctce_types2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_types2016

    @bio_mgmt_prctce_types2016.setter
    def bio_mgmt_prctce_types2016(self, bio_mgmt_prctce_types2016):
        """Sets the bio_mgmt_prctce_types2016 of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :param bio_mgmt_prctce_types2016: The bio_mgmt_prctce_types2016 of this Cwa07.
        :type bio_mgmt_prctce_types2016: str
        """
        if bio_mgmt_prctce_types2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_types2016`, must not be `None`")

        self._bio_mgmt_prctce_types2016 = bio_mgmt_prctce_types2016

    @property
    def bio_mgmt_prctce_types2017(self):
        """Gets the bio_mgmt_prctce_types2017 of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :return: The bio_mgmt_prctce_types2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_prctce_types2017

    @bio_mgmt_prctce_types2017.setter
    def bio_mgmt_prctce_types2017(self, bio_mgmt_prctce_types2017):
        """Sets the bio_mgmt_prctce_types2017 of this Cwa07.

        The type of biosolids or sewage sludge management practice (e.g., land application, surface disposal, incineration) used by the facility.

        :param bio_mgmt_prctce_types2017: The bio_mgmt_prctce_types2017 of this Cwa07.
        :type bio_mgmt_prctce_types2017: str
        """
        if bio_mgmt_prctce_types2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_prctce_types2017`, must not be `None`")

        self._bio_mgmt_prctce_types2017 = bio_mgmt_prctce_types2017

    @property
    def bio_mgmt_vectors(self):
        """Gets the bio_mgmt_vectors of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :return: The bio_mgmt_vectors of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_vectors

    @bio_mgmt_vectors.setter
    def bio_mgmt_vectors(self, bio_mgmt_vectors):
        """Sets the bio_mgmt_vectors of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :param bio_mgmt_vectors: The bio_mgmt_vectors of this Cwa07.
        :type bio_mgmt_vectors: str
        """
        if bio_mgmt_vectors is None:
            raise ValueError("Invalid value for `bio_mgmt_vectors`, must not be `None`")

        self._bio_mgmt_vectors = bio_mgmt_vectors

    @property
    def bio_mgmt_vectors2016(self):
        """Gets the bio_mgmt_vectors2016 of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :return: The bio_mgmt_vectors2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_vectors2016

    @bio_mgmt_vectors2016.setter
    def bio_mgmt_vectors2016(self, bio_mgmt_vectors2016):
        """Sets the bio_mgmt_vectors2016 of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :param bio_mgmt_vectors2016: The bio_mgmt_vectors2016 of this Cwa07.
        :type bio_mgmt_vectors2016: str
        """
        if bio_mgmt_vectors2016 is None:
            raise ValueError("Invalid value for `bio_mgmt_vectors2016`, must not be `None`")

        self._bio_mgmt_vectors2016 = bio_mgmt_vectors2016

    @property
    def bio_mgmt_vectors2017(self):
        """Gets the bio_mgmt_vectors2017 of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :return: The bio_mgmt_vectors2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_mgmt_vectors2017

    @bio_mgmt_vectors2017.setter
    def bio_mgmt_vectors2017(self, bio_mgmt_vectors2017):
        """Sets the bio_mgmt_vectors2017 of this Cwa07.

        Identifies the option used by the facility for vector attraction reduction.

        :param bio_mgmt_vectors2017: The bio_mgmt_vectors2017 of this Cwa07.
        :type bio_mgmt_vectors2017: str
        """
        if bio_mgmt_vectors2017 is None:
            raise ValueError("Invalid value for `bio_mgmt_vectors2017`, must not be `None`")

        self._bio_mgmt_vectors2017 = bio_mgmt_vectors2017

    @property
    def bio_other_management_sum(self):
        """Gets the bio_other_management_sum of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :return: The bio_other_management_sum of this Cwa07.
        :rtype: str
        """
        return self._bio_other_management_sum

    @bio_other_management_sum.setter
    def bio_other_management_sum(self, bio_other_management_sum):
        """Sets the bio_other_management_sum of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :param bio_other_management_sum: The bio_other_management_sum of this Cwa07.
        :type bio_other_management_sum: str
        """
        if bio_other_management_sum is None:
            raise ValueError("Invalid value for `bio_other_management_sum`, must not be `None`")

        self._bio_other_management_sum = bio_other_management_sum

    @property
    def bio_other_management_sum2016(self):
        """Gets the bio_other_management_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :return: The bio_other_management_sum2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_other_management_sum2016

    @bio_other_management_sum2016.setter
    def bio_other_management_sum2016(self, bio_other_management_sum2016):
        """Sets the bio_other_management_sum2016 of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :param bio_other_management_sum2016: The bio_other_management_sum2016 of this Cwa07.
        :type bio_other_management_sum2016: str
        """
        if bio_other_management_sum2016 is None:
            raise ValueError("Invalid value for `bio_other_management_sum2016`, must not be `None`")

        self._bio_other_management_sum2016 = bio_other_management_sum2016

    @property
    def bio_other_management_sum2017(self):
        """Gets the bio_other_management_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :return: The bio_other_management_sum2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_other_management_sum2017

    @bio_other_management_sum2017.setter
    def bio_other_management_sum2017(self, bio_other_management_sum2017):
        """Sets the bio_other_management_sum2017 of this Cwa07.

        The amount (dry metric tons) of biosolids managed using methods not previously described.

        :param bio_other_management_sum2017: The bio_other_management_sum2017 of this Cwa07.
        :type bio_other_management_sum2017: str
        """
        if bio_other_management_sum2017 is None:
            raise ValueError("Invalid value for `bio_other_management_sum2017`, must not be `None`")

        self._bio_other_management_sum2017 = bio_other_management_sum2017

    @property
    def bio_other_mgmt_prctc_txts(self):
        """Gets the bio_other_mgmt_prctc_txts of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :return: The bio_other_mgmt_prctc_txts of this Cwa07.
        :rtype: str
        """
        return self._bio_other_mgmt_prctc_txts

    @bio_other_mgmt_prctc_txts.setter
    def bio_other_mgmt_prctc_txts(self, bio_other_mgmt_prctc_txts):
        """Sets the bio_other_mgmt_prctc_txts of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :param bio_other_mgmt_prctc_txts: The bio_other_mgmt_prctc_txts of this Cwa07.
        :type bio_other_mgmt_prctc_txts: str
        """
        if bio_other_mgmt_prctc_txts is None:
            raise ValueError("Invalid value for `bio_other_mgmt_prctc_txts`, must not be `None`")

        self._bio_other_mgmt_prctc_txts = bio_other_mgmt_prctc_txts

    @property
    def bio_other_mgmt_prctc_txts2016(self):
        """Gets the bio_other_mgmt_prctc_txts2016 of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :return: The bio_other_mgmt_prctc_txts2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_other_mgmt_prctc_txts2016

    @bio_other_mgmt_prctc_txts2016.setter
    def bio_other_mgmt_prctc_txts2016(self, bio_other_mgmt_prctc_txts2016):
        """Sets the bio_other_mgmt_prctc_txts2016 of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :param bio_other_mgmt_prctc_txts2016: The bio_other_mgmt_prctc_txts2016 of this Cwa07.
        :type bio_other_mgmt_prctc_txts2016: str
        """
        if bio_other_mgmt_prctc_txts2016 is None:
            raise ValueError("Invalid value for `bio_other_mgmt_prctc_txts2016`, must not be `None`")

        self._bio_other_mgmt_prctc_txts2016 = bio_other_mgmt_prctc_txts2016

    @property
    def bio_other_mgmt_prctc_txts2017(self):
        """Gets the bio_other_mgmt_prctc_txts2017 of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :return: The bio_other_mgmt_prctc_txts2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_other_mgmt_prctc_txts2017

    @bio_other_mgmt_prctc_txts2017.setter
    def bio_other_mgmt_prctc_txts2017(self, bio_other_mgmt_prctc_txts2017):
        """Sets the bio_other_mgmt_prctc_txts2017 of this Cwa07.

        Free text additional description of \"other\" Biosolids Management Practices.

        :param bio_other_mgmt_prctc_txts2017: The bio_other_mgmt_prctc_txts2017 of this Cwa07.
        :type bio_other_mgmt_prctc_txts2017: str
        """
        if bio_other_mgmt_prctc_txts2017 is None:
            raise ValueError("Invalid value for `bio_other_mgmt_prctc_txts2017`, must not be `None`")

        self._bio_other_mgmt_prctc_txts2017 = bio_other_mgmt_prctc_txts2017

    @property
    def bio_qtrs_with_vio(self):
        """Gets the bio_qtrs_with_vio of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered with violations for biosolids.

        :return: The bio_qtrs_with_vio of this Cwa07.
        :rtype: str
        """
        return self._bio_qtrs_with_vio

    @bio_qtrs_with_vio.setter
    def bio_qtrs_with_vio(self, bio_qtrs_with_vio):
        """Sets the bio_qtrs_with_vio of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered with violations for biosolids.

        :param bio_qtrs_with_vio: The bio_qtrs_with_vio of this Cwa07.
        :type bio_qtrs_with_vio: str
        """
        if bio_qtrs_with_vio is None:
            raise ValueError("Invalid value for `bio_qtrs_with_vio`, must not be `None`")

        self._bio_qtrs_with_vio = bio_qtrs_with_vio

    @property
    def bio_report_date(self):
        """Gets the bio_report_date of this Cwa07.

        The date the report was received by EPA.

        :return: The bio_report_date of this Cwa07.
        :rtype: str
        """
        return self._bio_report_date

    @bio_report_date.setter
    def bio_report_date(self, bio_report_date):
        """Sets the bio_report_date of this Cwa07.

        The date the report was received by EPA.

        :param bio_report_date: The bio_report_date of this Cwa07.
        :type bio_report_date: str
        """
        if bio_report_date is None:
            raise ValueError("Invalid value for `bio_report_date`, must not be `None`")

        self._bio_report_date = bio_report_date

    @property
    def bio_report_date2016(self):
        """Gets the bio_report_date2016 of this Cwa07.

        The date the report was received by EPA.

        :return: The bio_report_date2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_report_date2016

    @bio_report_date2016.setter
    def bio_report_date2016(self, bio_report_date2016):
        """Sets the bio_report_date2016 of this Cwa07.

        The date the report was received by EPA.

        :param bio_report_date2016: The bio_report_date2016 of this Cwa07.
        :type bio_report_date2016: str
        """
        if bio_report_date2016 is None:
            raise ValueError("Invalid value for `bio_report_date2016`, must not be `None`")

        self._bio_report_date2016 = bio_report_date2016

    @property
    def bio_report_date2017(self):
        """Gets the bio_report_date2017 of this Cwa07.

        The date the report was received by EPA.

        :return: The bio_report_date2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_report_date2017

    @bio_report_date2017.setter
    def bio_report_date2017(self, bio_report_date2017):
        """Sets the bio_report_date2017 of this Cwa07.

        The date the report was received by EPA.

        :param bio_report_date2017: The bio_report_date2017 of this Cwa07.
        :type bio_report_date2017: str
        """
        if bio_report_date2017 is None:
            raise ValueError("Invalid value for `bio_report_date2017`, must not be `None`")

        self._bio_report_date2017 = bio_report_date2017

    @property
    def bio_report_year(self):
        """Gets the bio_report_year of this Cwa07.

        The calendar year corresponding to the Annual Biosolids Report.

        :return: The bio_report_year of this Cwa07.
        :rtype: str
        """
        return self._bio_report_year

    @bio_report_year.setter
    def bio_report_year(self, bio_report_year):
        """Sets the bio_report_year of this Cwa07.

        The calendar year corresponding to the Annual Biosolids Report.

        :param bio_report_year: The bio_report_year of this Cwa07.
        :type bio_report_year: str
        """
        if bio_report_year is None:
            raise ValueError("Invalid value for `bio_report_year`, must not be `None`")

        self._bio_report_year = bio_report_year

    @property
    def bio_report_years(self):
        """Gets the bio_report_years of this Cwa07.

        Reporting years are determined by the year of the reporting period end date. Data reflect the last two reporting years.

        :return: The bio_report_years of this Cwa07.
        :rtype: str
        """
        return self._bio_report_years

    @bio_report_years.setter
    def bio_report_years(self, bio_report_years):
        """Sets the bio_report_years of this Cwa07.

        Reporting years are determined by the year of the reporting period end date. Data reflect the last two reporting years.

        :param bio_report_years: The bio_report_years of this Cwa07.
        :type bio_report_years: str
        """
        if bio_report_years is None:
            raise ValueError("Invalid value for `bio_report_years`, must not be `None`")

        self._bio_report_years = bio_report_years

    @property
    def bio_reporting_obligations(self):
        """Gets the bio_reporting_obligations of this Cwa07.

        Indicates the reporting obligation reason.

        :return: The bio_reporting_obligations of this Cwa07.
        :rtype: str
        """
        return self._bio_reporting_obligations

    @bio_reporting_obligations.setter
    def bio_reporting_obligations(self, bio_reporting_obligations):
        """Sets the bio_reporting_obligations of this Cwa07.

        Indicates the reporting obligation reason.

        :param bio_reporting_obligations: The bio_reporting_obligations of this Cwa07.
        :type bio_reporting_obligations: str
        """
        if bio_reporting_obligations is None:
            raise ValueError("Invalid value for `bio_reporting_obligations`, must not be `None`")

        self._bio_reporting_obligations = bio_reporting_obligations

    @property
    def bio_reporting_obligations2016(self):
        """Gets the bio_reporting_obligations2016 of this Cwa07.

        Indicates the reporting obligation reason.

        :return: The bio_reporting_obligations2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_reporting_obligations2016

    @bio_reporting_obligations2016.setter
    def bio_reporting_obligations2016(self, bio_reporting_obligations2016):
        """Sets the bio_reporting_obligations2016 of this Cwa07.

        Indicates the reporting obligation reason.

        :param bio_reporting_obligations2016: The bio_reporting_obligations2016 of this Cwa07.
        :type bio_reporting_obligations2016: str
        """
        if bio_reporting_obligations2016 is None:
            raise ValueError("Invalid value for `bio_reporting_obligations2016`, must not be `None`")

        self._bio_reporting_obligations2016 = bio_reporting_obligations2016

    @property
    def bio_reporting_obligations2017(self):
        """Gets the bio_reporting_obligations2017 of this Cwa07.

        Indicates the reporting obligation reason.

        :return: The bio_reporting_obligations2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_reporting_obligations2017

    @bio_reporting_obligations2017.setter
    def bio_reporting_obligations2017(self, bio_reporting_obligations2017):
        """Sets the bio_reporting_obligations2017 of this Cwa07.

        Indicates the reporting obligation reason.

        :param bio_reporting_obligations2017: The bio_reporting_obligations2017 of this Cwa07.
        :type bio_reporting_obligations2017: str
        """
        if bio_reporting_obligations2017 is None:
            raise ValueError("Invalid value for `bio_reporting_obligations2017`, must not be `None`")

        self._bio_reporting_obligations2017 = bio_reporting_obligations2017

    @property
    def bio_surface_disp_sum(self):
        """Gets the bio_surface_disp_sum of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :return: The bio_surface_disp_sum of this Cwa07.
        :rtype: str
        """
        return self._bio_surface_disp_sum

    @bio_surface_disp_sum.setter
    def bio_surface_disp_sum(self, bio_surface_disp_sum):
        """Sets the bio_surface_disp_sum of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :param bio_surface_disp_sum: The bio_surface_disp_sum of this Cwa07.
        :type bio_surface_disp_sum: str
        """
        if bio_surface_disp_sum is None:
            raise ValueError("Invalid value for `bio_surface_disp_sum`, must not be `None`")

        self._bio_surface_disp_sum = bio_surface_disp_sum

    @property
    def bio_surface_disp_sum2016(self):
        """Gets the bio_surface_disp_sum2016 of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :return: The bio_surface_disp_sum2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_surface_disp_sum2016

    @bio_surface_disp_sum2016.setter
    def bio_surface_disp_sum2016(self, bio_surface_disp_sum2016):
        """Sets the bio_surface_disp_sum2016 of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :param bio_surface_disp_sum2016: The bio_surface_disp_sum2016 of this Cwa07.
        :type bio_surface_disp_sum2016: str
        """
        if bio_surface_disp_sum2016 is None:
            raise ValueError("Invalid value for `bio_surface_disp_sum2016`, must not be `None`")

        self._bio_surface_disp_sum2016 = bio_surface_disp_sum2016

    @property
    def bio_surface_disp_sum2017(self):
        """Gets the bio_surface_disp_sum2017 of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :return: The bio_surface_disp_sum2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_surface_disp_sum2017

    @bio_surface_disp_sum2017.setter
    def bio_surface_disp_sum2017(self, bio_surface_disp_sum2017):
        """Sets the bio_surface_disp_sum2017 of this Cwa07.

        The amount of surface disposal in dry metric tons (DMT).

        :param bio_surface_disp_sum2017: The bio_surface_disp_sum2017 of this Cwa07.
        :type bio_surface_disp_sum2017: str
        """
        if bio_surface_disp_sum2017 is None:
            raise ValueError("Invalid value for `bio_surface_disp_sum2017`, must not be `None`")

        self._bio_surface_disp_sum2017 = bio_surface_disp_sum2017

    @property
    def bio_total_volume_amt(self):
        """Gets the bio_total_volume_amt of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :return: The bio_total_volume_amt of this Cwa07.
        :rtype: str
        """
        return self._bio_total_volume_amt

    @bio_total_volume_amt.setter
    def bio_total_volume_amt(self, bio_total_volume_amt):
        """Sets the bio_total_volume_amt of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :param bio_total_volume_amt: The bio_total_volume_amt of this Cwa07.
        :type bio_total_volume_amt: str
        """
        if bio_total_volume_amt is None:
            raise ValueError("Invalid value for `bio_total_volume_amt`, must not be `None`")

        self._bio_total_volume_amt = bio_total_volume_amt

    @property
    def bio_total_volume_amt2016(self):
        """Gets the bio_total_volume_amt2016 of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :return: The bio_total_volume_amt2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_total_volume_amt2016

    @bio_total_volume_amt2016.setter
    def bio_total_volume_amt2016(self, bio_total_volume_amt2016):
        """Sets the bio_total_volume_amt2016 of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :param bio_total_volume_amt2016: The bio_total_volume_amt2016 of this Cwa07.
        :type bio_total_volume_amt2016: str
        """
        if bio_total_volume_amt2016 is None:
            raise ValueError("Invalid value for `bio_total_volume_amt2016`, must not be `None`")

        self._bio_total_volume_amt2016 = bio_total_volume_amt2016

    @property
    def bio_total_volume_amt2017(self):
        """Gets the bio_total_volume_amt2017 of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :return: The bio_total_volume_amt2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_total_volume_amt2017

    @bio_total_volume_amt2017.setter
    def bio_total_volume_amt2017(self, bio_total_volume_amt2017):
        """Sets the bio_total_volume_amt2017 of this Cwa07.

        The amount (in dry metric tons) of biosolids or sewage sludge generated at the facility.

        :param bio_total_volume_amt2017: The bio_total_volume_amt2017 of this Cwa07.
        :type bio_total_volume_amt2017: str
        """
        if bio_total_volume_amt2017 is None:
            raise ValueError("Invalid value for `bio_total_volume_amt2017`, must not be `None`")

        self._bio_total_volume_amt2017 = bio_total_volume_amt2017

    @property
    def bio_trmnt_prcss_cmnt_txts2016(self):
        """Gets the bio_trmnt_prcss_cmnt_txts2016 of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :return: The bio_trmnt_prcss_cmnt_txts2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_trmnt_prcss_cmnt_txts2016

    @bio_trmnt_prcss_cmnt_txts2016.setter
    def bio_trmnt_prcss_cmnt_txts2016(self, bio_trmnt_prcss_cmnt_txts2016):
        """Sets the bio_trmnt_prcss_cmnt_txts2016 of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :param bio_trmnt_prcss_cmnt_txts2016: The bio_trmnt_prcss_cmnt_txts2016 of this Cwa07.
        :type bio_trmnt_prcss_cmnt_txts2016: str
        """
        if bio_trmnt_prcss_cmnt_txts2016 is None:
            raise ValueError("Invalid value for `bio_trmnt_prcss_cmnt_txts2016`, must not be `None`")

        self._bio_trmnt_prcss_cmnt_txts2016 = bio_trmnt_prcss_cmnt_txts2016

    @property
    def bio_trmnt_prcss_cmnt_txts2017(self):
        """Gets the bio_trmnt_prcss_cmnt_txts2017 of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :return: The bio_trmnt_prcss_cmnt_txts2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_trmnt_prcss_cmnt_txts2017

    @bio_trmnt_prcss_cmnt_txts2017.setter
    def bio_trmnt_prcss_cmnt_txts2017(self, bio_trmnt_prcss_cmnt_txts2017):
        """Sets the bio_trmnt_prcss_cmnt_txts2017 of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :param bio_trmnt_prcss_cmnt_txts2017: The bio_trmnt_prcss_cmnt_txts2017 of this Cwa07.
        :type bio_trmnt_prcss_cmnt_txts2017: str
        """
        if bio_trmnt_prcss_cmnt_txts2017 is None:
            raise ValueError("Invalid value for `bio_trmnt_prcss_cmnt_txts2017`, must not be `None`")

        self._bio_trmnt_prcss_cmnt_txts2017 = bio_trmnt_prcss_cmnt_txts2017

    @property
    def bio_trtmnt_prcss_cmmnt_txts(self):
        """Gets the bio_trtmnt_prcss_cmmnt_txts of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :return: The bio_trtmnt_prcss_cmmnt_txts of this Cwa07.
        :rtype: str
        """
        return self._bio_trtmnt_prcss_cmmnt_txts

    @bio_trtmnt_prcss_cmmnt_txts.setter
    def bio_trtmnt_prcss_cmmnt_txts(self, bio_trtmnt_prcss_cmmnt_txts):
        """Sets the bio_trtmnt_prcss_cmmnt_txts of this Cwa07.

        Free text additional description of \"other\" biotreatment processes.

        :param bio_trtmnt_prcss_cmmnt_txts: The bio_trtmnt_prcss_cmmnt_txts of this Cwa07.
        :type bio_trtmnt_prcss_cmmnt_txts: str
        """
        if bio_trtmnt_prcss_cmmnt_txts is None:
            raise ValueError("Invalid value for `bio_trtmnt_prcss_cmmnt_txts`, must not be `None`")

        self._bio_trtmnt_prcss_cmmnt_txts = bio_trtmnt_prcss_cmmnt_txts

    @property
    def bio_trtmnt_processes(self):
        """Gets the bio_trtmnt_processes of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :return: The bio_trtmnt_processes of this Cwa07.
        :rtype: str
        """
        return self._bio_trtmnt_processes

    @bio_trtmnt_processes.setter
    def bio_trtmnt_processes(self, bio_trtmnt_processes):
        """Sets the bio_trtmnt_processes of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :param bio_trtmnt_processes: The bio_trtmnt_processes of this Cwa07.
        :type bio_trtmnt_processes: str
        """
        if bio_trtmnt_processes is None:
            raise ValueError("Invalid value for `bio_trtmnt_processes`, must not be `None`")

        self._bio_trtmnt_processes = bio_trtmnt_processes

    @property
    def bio_trtmnt_processes2016(self):
        """Gets the bio_trtmnt_processes2016 of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :return: The bio_trtmnt_processes2016 of this Cwa07.
        :rtype: str
        """
        return self._bio_trtmnt_processes2016

    @bio_trtmnt_processes2016.setter
    def bio_trtmnt_processes2016(self, bio_trtmnt_processes2016):
        """Sets the bio_trtmnt_processes2016 of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :param bio_trtmnt_processes2016: The bio_trtmnt_processes2016 of this Cwa07.
        :type bio_trtmnt_processes2016: str
        """
        if bio_trtmnt_processes2016 is None:
            raise ValueError("Invalid value for `bio_trtmnt_processes2016`, must not be `None`")

        self._bio_trtmnt_processes2016 = bio_trtmnt_processes2016

    @property
    def bio_trtmnt_processes2017(self):
        """Gets the bio_trtmnt_processes2017 of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :return: The bio_trtmnt_processes2017 of this Cwa07.
        :rtype: str
        """
        return self._bio_trtmnt_processes2017

    @bio_trtmnt_processes2017.setter
    def bio_trtmnt_processes2017(self, bio_trtmnt_processes2017):
        """Sets the bio_trtmnt_processes2017 of this Cwa07.

        Identifies the biosolids or sewage sludge treatment process or processes at the facility.

        :param bio_trtmnt_processes2017: The bio_trtmnt_processes2017 of this Cwa07.
        :type bio_trtmnt_processes2017: str
        """
        if bio_trtmnt_processes2017 is None:
            raise ValueError("Invalid value for `bio_trtmnt_processes2017`, must not be `None`")

        self._bio_trtmnt_processes2017 = bio_trtmnt_processes2017

    @property
    def bio_vio_last_year(self):
        """Gets the bio_vio_last_year of this Cwa07.

        A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.

        :return: The bio_vio_last_year of this Cwa07.
        :rtype: str
        """
        return self._bio_vio_last_year

    @bio_vio_last_year.setter
    def bio_vio_last_year(self, bio_vio_last_year):
        """Sets the bio_vio_last_year of this Cwa07.

        A flag (values of 1 for Yes, 0 for No) that a Bisolids Violation occurred in the last 4 quarters.

        :param bio_vio_last_year: The bio_vio_last_year of this Cwa07.
        :type bio_vio_last_year: str
        """
        if bio_vio_last_year is None:
            raise ValueError("Invalid value for `bio_vio_last_year`, must not be `None`")

        self._bio_vio_last_year = bio_vio_last_year

    @property
    def bio_vio_last_year_flag(self):
        """Gets the bio_vio_last_year_flag of this Cwa07.

        Y if the facility has a biosolids single event violation under the Clean Water Act in the last year. Note: Violations reported on the 2016 and 2017 Biosolids Annual Report are not updated with the weekly data refresh and may not be representative of a facility's recently submitted or updated report.�

        :return: The bio_vio_last_year_flag of this Cwa07.
        :rtype: str
        """
        return self._bio_vio_last_year_flag

    @bio_vio_last_year_flag.setter
    def bio_vio_last_year_flag(self, bio_vio_last_year_flag):
        """Sets the bio_vio_last_year_flag of this Cwa07.

        Y if the facility has a biosolids single event violation under the Clean Water Act in the last year. Note: Violations reported on the 2016 and 2017 Biosolids Annual Report are not updated with the weekly data refresh and may not be representative of a facility's recently submitted or updated report.�

        :param bio_vio_last_year_flag: The bio_vio_last_year_flag of this Cwa07.
        :type bio_vio_last_year_flag: str
        """
        if bio_vio_last_year_flag is None:
            raise ValueError("Invalid value for `bio_vio_last_year_flag`, must not be `None`")

        self._bio_vio_last_year_flag = bio_vio_last_year_flag

    @property
    def bio_vio_status(self):
        """Gets the bio_vio_status of this Cwa07.

        A value of 1 indicates if the Biosolids facility currently has an unresolved biosolids related Single Event Violation.

        :return: The bio_vio_status of this Cwa07.
        :rtype: str
        """
        return self._bio_vio_status

    @bio_vio_status.setter
    def bio_vio_status(self, bio_vio_status):
        """Sets the bio_vio_status of this Cwa07.

        A value of 1 indicates if the Biosolids facility currently has an unresolved biosolids related Single Event Violation.

        :param bio_vio_status: The bio_vio_status of this Cwa07.
        :type bio_vio_status: str
        """
        if bio_vio_status is None:
            raise ValueError("Invalid value for `bio_vio_status`, must not be `None`")

        self._bio_vio_status = bio_vio_status

    @property
    def bio_viol_flag(self):
        """Gets the bio_viol_flag of this Cwa07.

        Displays \"Yes\" if the facility is in violation for biosolids under the Clean Water Act, in the last three years.

        :return: The bio_viol_flag of this Cwa07.
        :rtype: str
        """
        return self._bio_viol_flag

    @bio_viol_flag.setter
    def bio_viol_flag(self, bio_viol_flag):
        """Sets the bio_viol_flag of this Cwa07.

        Displays \"Yes\" if the facility is in violation for biosolids under the Clean Water Act, in the last three years.

        :param bio_viol_flag: The bio_viol_flag of this Cwa07.
        :type bio_viol_flag: str
        """
        if bio_viol_flag is None:
            raise ValueError("Invalid value for `bio_viol_flag`, must not be `None`")

        self._bio_viol_flag = bio_viol_flag

    @property
    def biosolids_flag(self):
        """Gets the biosolids_flag of this Cwa07.

        A Yes/No field to indicate permits with biosolids management and compliance information.

        :return: The biosolids_flag of this Cwa07.
        :rtype: str
        """
        return self._biosolids_flag

    @biosolids_flag.setter
    def biosolids_flag(self, biosolids_flag):
        """Sets the biosolids_flag of this Cwa07.

        A Yes/No field to indicate permits with biosolids management and compliance information.

        :param biosolids_flag: The biosolids_flag of this Cwa07.
        :type biosolids_flag: str
        """
        if biosolids_flag is None:
            raise ValueError("Invalid value for `biosolids_flag`, must not be `None`")

        self._biosolids_flag = biosolids_flag

    @property
    def cwp13qtrs_compl_history(self):
        """Gets the cwp13qtrs_compl_history of this Cwa07.

        The facility's 3-year or 13-quarter compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :return: The cwp13qtrs_compl_history of this Cwa07.
        :rtype: str
        """
        return self._cwp13qtrs_compl_history

    @cwp13qtrs_compl_history.setter
    def cwp13qtrs_compl_history(self, cwp13qtrs_compl_history):
        """Sets the cwp13qtrs_compl_history of this Cwa07.

        The facility's 3-year or 13-quarter compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :param cwp13qtrs_compl_history: The cwp13qtrs_compl_history of this Cwa07.
        :type cwp13qtrs_compl_history: str
        """
        if cwp13qtrs_compl_history is None:
            raise ValueError("Invalid value for `cwp13qtrs_compl_history`, must not be `None`")

        self._cwp13qtrs_compl_history = cwp13qtrs_compl_history

    @property
    def cwp_actual_average_flow_nmbr(self):
        """Gets the cwp_actual_average_flow_nmbr of this Cwa07.

        The actual amount of the facility's wastewater flow measured in million gallons per day (MGD).

        :return: The cwp_actual_average_flow_nmbr of this Cwa07.
        :rtype: str
        """
        return self._cwp_actual_average_flow_nmbr

    @cwp_actual_average_flow_nmbr.setter
    def cwp_actual_average_flow_nmbr(self, cwp_actual_average_flow_nmbr):
        """Sets the cwp_actual_average_flow_nmbr of this Cwa07.

        The actual amount of the facility's wastewater flow measured in million gallons per day (MGD).

        :param cwp_actual_average_flow_nmbr: The cwp_actual_average_flow_nmbr of this Cwa07.
        :type cwp_actual_average_flow_nmbr: str
        """
        if cwp_actual_average_flow_nmbr is None:
            raise ValueError("Invalid value for `cwp_actual_average_flow_nmbr`, must not be `None`")

        self._cwp_actual_average_flow_nmbr = cwp_actual_average_flow_nmbr

    @property
    def cwp_bio_fea_count(self):
        """Gets the cwp_bio_fea_count of this Cwa07.

        The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.

        :return: The cwp_bio_fea_count of this Cwa07.
        :rtype: str
        """
        return self._cwp_bio_fea_count

    @cwp_bio_fea_count.setter
    def cwp_bio_fea_count(self, cwp_bio_fea_count):
        """Sets the cwp_bio_fea_count of this Cwa07.

        The count of Biosolids related Formal Enforcement Actions that have been taken against the Facility.

        :param cwp_bio_fea_count: The cwp_bio_fea_count of this Cwa07.
        :type cwp_bio_fea_count: str
        """
        if cwp_bio_fea_count is None:
            raise ValueError("Invalid value for `cwp_bio_fea_count`, must not be `None`")

        self._cwp_bio_fea_count = cwp_bio_fea_count

    @property
    def cwp_bio_iea_count(self):
        """Gets the cwp_bio_iea_count of this Cwa07.

        The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.

        :return: The cwp_bio_iea_count of this Cwa07.
        :rtype: str
        """
        return self._cwp_bio_iea_count

    @cwp_bio_iea_count.setter
    def cwp_bio_iea_count(self, cwp_bio_iea_count):
        """Sets the cwp_bio_iea_count of this Cwa07.

        The count of Biosolids related Informal Enforcement Actions that have been taken against the Facility.

        :param cwp_bio_iea_count: The cwp_bio_iea_count of this Cwa07.
        :type cwp_bio_iea_count: str
        """
        if cwp_bio_iea_count is None:
            raise ValueError("Invalid value for `cwp_bio_iea_count`, must not be `None`")

        self._cwp_bio_iea_count = cwp_bio_iea_count

    @property
    def cwp_bio_insp_count(self):
        """Gets the cwp_bio_insp_count of this Cwa07.

        The count of Biosolids related Inspections that have occured for the facility.

        :return: The cwp_bio_insp_count of this Cwa07.
        :rtype: str
        """
        return self._cwp_bio_insp_count

    @cwp_bio_insp_count.setter
    def cwp_bio_insp_count(self, cwp_bio_insp_count):
        """Sets the cwp_bio_insp_count of this Cwa07.

        The count of Biosolids related Inspections that have occured for the facility.

        :param cwp_bio_insp_count: The cwp_bio_insp_count of this Cwa07.
        :type cwp_bio_insp_count: str
        """
        if cwp_bio_insp_count is None:
            raise ValueError("Invalid value for `cwp_bio_insp_count`, must not be `None`")

        self._cwp_bio_insp_count = cwp_bio_insp_count

    @property
    def cwp_bio_penalties(self):
        """Gets the cwp_bio_penalties of this Cwa07.

        The total amount of Biosolids related penalties that have been assessed against the facility.

        :return: The cwp_bio_penalties of this Cwa07.
        :rtype: str
        """
        return self._cwp_bio_penalties

    @cwp_bio_penalties.setter
    def cwp_bio_penalties(self, cwp_bio_penalties):
        """Sets the cwp_bio_penalties of this Cwa07.

        The total amount of Biosolids related penalties that have been assessed against the facility.

        :param cwp_bio_penalties: The cwp_bio_penalties of this Cwa07.
        :type cwp_bio_penalties: str
        """
        if cwp_bio_penalties is None:
            raise ValueError("Invalid value for `cwp_bio_penalties`, must not be `None`")

        self._cwp_bio_penalties = cwp_bio_penalties

    @property
    def cwp_case_ids(self):
        """Gets the cwp_case_ids of this Cwa07.

        Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.

        :return: The cwp_case_ids of this Cwa07.
        :rtype: str
        """
        return self._cwp_case_ids

    @cwp_case_ids.setter
    def cwp_case_ids(self, cwp_case_ids):
        """Sets the cwp_case_ids of this Cwa07.

        Indicates the ICIS Case Number, a unique number identifying the civil enforcement action.

        :param cwp_case_ids: The cwp_case_ids of this Cwa07.
        :type cwp_case_ids: str
        """
        if cwp_case_ids is None:
            raise ValueError("Invalid value for `cwp_case_ids`, must not be `None`")

        self._cwp_case_ids = cwp_case_ids

    @property
    def cwp_city(self):
        """Gets the cwp_city of this Cwa07.

        City in which the facility is located.

        :return: The cwp_city of this Cwa07.
        :rtype: str
        """
        return self._cwp_city

    @cwp_city.setter
    def cwp_city(self, cwp_city):
        """Sets the cwp_city of this Cwa07.

        City in which the facility is located.

        :param cwp_city: The cwp_city of this Cwa07.
        :type cwp_city: str
        """
        if cwp_city is None:
            raise ValueError("Invalid value for `cwp_city`, must not be `None`")

        self._cwp_city = cwp_city

    @property
    def cwp_compliance_tracking(self):
        """Gets the cwp_compliance_tracking of this Cwa07.

        Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).

        :return: The cwp_compliance_tracking of this Cwa07.
        :rtype: str
        """
        return self._cwp_compliance_tracking

    @cwp_compliance_tracking.setter
    def cwp_compliance_tracking(self, cwp_compliance_tracking):
        """Sets the cwp_compliance_tracking of this Cwa07.

        Extent to which data is being entered and effluent exceedances are being identified (Off, On, Partial).

        :param cwp_compliance_tracking: The cwp_compliance_tracking of this Cwa07.
        :type cwp_compliance_tracking: str
        """
        if cwp_compliance_tracking is None:
            raise ValueError("Invalid value for `cwp_compliance_tracking`, must not be `None`")

        self._cwp_compliance_tracking = cwp_compliance_tracking

    @property
    def cwp_county(self):
        """Gets the cwp_county of this Cwa07.

        County in which the facility is located.

        :return: The cwp_county of this Cwa07.
        :rtype: str
        """
        return self._cwp_county

    @cwp_county.setter
    def cwp_county(self, cwp_county):
        """Sets the cwp_county of this Cwa07.

        County in which the facility is located.

        :param cwp_county: The cwp_county of this Cwa07.
        :type cwp_county: str
        """
        if cwp_county is None:
            raise ValueError("Invalid value for `cwp_county`, must not be `None`")

        self._cwp_county = cwp_county

    @property
    def cwp_cso_flag(self):
        """Gets the cwp_cso_flag of this Cwa07.

        The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.

        :return: The cwp_cso_flag of this Cwa07.
        :rtype: str
        """
        return self._cwp_cso_flag

    @cwp_cso_flag.setter
    def cwp_cso_flag(self, cwp_cso_flag):
        """Sets the cwp_cso_flag of this Cwa07.

        The discharge from a Combined Sewer System at a point prior to the treatment plant. CSOs are point sources subject to NPDES permit requirements including both technology-based and water quality-based requirements of the Clean Water Act.

        :param cwp_cso_flag: The cwp_cso_flag of this Cwa07.
        :type cwp_cso_flag: str
        """
        if cwp_cso_flag is None:
            raise ValueError("Invalid value for `cwp_cso_flag`, must not be `None`")

        self._cwp_cso_flag = cwp_cso_flag

    @property
    def cwp_cso_outfalls(self):
        """Gets the cwp_cso_outfalls of this Cwa07.

        The number of discharge outfalls at points prior to the treatment plant.

        :return: The cwp_cso_outfalls of this Cwa07.
        :rtype: str
        """
        return self._cwp_cso_outfalls

    @cwp_cso_outfalls.setter
    def cwp_cso_outfalls(self, cwp_cso_outfalls):
        """Sets the cwp_cso_outfalls of this Cwa07.

        The number of discharge outfalls at points prior to the treatment plant.

        :param cwp_cso_outfalls: The cwp_cso_outfalls of this Cwa07.
        :type cwp_cso_outfalls: str
        """
        if cwp_cso_outfalls is None:
            raise ValueError("Invalid value for `cwp_cso_outfalls`, must not be `None`")

        self._cwp_cso_outfalls = cwp_cso_outfalls

    @property
    def cwp_date_last_bio_fea(self):
        """Gets the cwp_date_last_bio_fea of this Cwa07.

        Indicates the effective date of the most recent listed biosolids formal enforcement action taken against the facility within the last five years.

        :return: The cwp_date_last_bio_fea of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_fea

    @cwp_date_last_bio_fea.setter
    def cwp_date_last_bio_fea(self, cwp_date_last_bio_fea):
        """Sets the cwp_date_last_bio_fea of this Cwa07.

        Indicates the effective date of the most recent listed biosolids formal enforcement action taken against the facility within the last five years.

        :param cwp_date_last_bio_fea: The cwp_date_last_bio_fea of this Cwa07.
        :type cwp_date_last_bio_fea: str
        """
        if cwp_date_last_bio_fea is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_fea`, must not be `None`")

        self._cwp_date_last_bio_fea = cwp_date_last_bio_fea

    @property
    def cwp_date_last_bio_fea_epa(self):
        """Gets the cwp_date_last_bio_fea_epa of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.

        :return: The cwp_date_last_bio_fea_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_fea_epa

    @cwp_date_last_bio_fea_epa.setter
    def cwp_date_last_bio_fea_epa(self, cwp_date_last_bio_fea_epa):
        """Sets the cwp_date_last_bio_fea_epa of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA within the last five years.

        :param cwp_date_last_bio_fea_epa: The cwp_date_last_bio_fea_epa of this Cwa07.
        :type cwp_date_last_bio_fea_epa: str
        """
        if cwp_date_last_bio_fea_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_fea_epa`, must not be `None`")

        self._cwp_date_last_bio_fea_epa = cwp_date_last_bio_fea_epa

    @property
    def cwp_date_last_bio_fea_st(self):
        """Gets the cwp_date_last_bio_fea_st of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.

        :return: The cwp_date_last_bio_fea_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_fea_st

    @cwp_date_last_bio_fea_st.setter
    def cwp_date_last_bio_fea_st(self, cwp_date_last_bio_fea_st):
        """Sets the cwp_date_last_bio_fea_st of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency within the last five years.

        :param cwp_date_last_bio_fea_st: The cwp_date_last_bio_fea_st of this Cwa07.
        :type cwp_date_last_bio_fea_st: str
        """
        if cwp_date_last_bio_fea_st is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_fea_st`, must not be `None`")

        self._cwp_date_last_bio_fea_st = cwp_date_last_bio_fea_st

    @property
    def cwp_date_last_bio_iea(self):
        """Gets the cwp_date_last_bio_iea of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility within the last five years.

        :return: The cwp_date_last_bio_iea of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_iea

    @cwp_date_last_bio_iea.setter
    def cwp_date_last_bio_iea(self, cwp_date_last_bio_iea):
        """Sets the cwp_date_last_bio_iea of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility within the last five years.

        :param cwp_date_last_bio_iea: The cwp_date_last_bio_iea of this Cwa07.
        :type cwp_date_last_bio_iea: str
        """
        if cwp_date_last_bio_iea is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_iea`, must not be `None`")

        self._cwp_date_last_bio_iea = cwp_date_last_bio_iea

    @property
    def cwp_date_last_bio_iea_epa(self):
        """Gets the cwp_date_last_bio_iea_epa of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by EPA within the last five years.

        :return: The cwp_date_last_bio_iea_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_iea_epa

    @cwp_date_last_bio_iea_epa.setter
    def cwp_date_last_bio_iea_epa(self, cwp_date_last_bio_iea_epa):
        """Sets the cwp_date_last_bio_iea_epa of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by EPA within the last five years.

        :param cwp_date_last_bio_iea_epa: The cwp_date_last_bio_iea_epa of this Cwa07.
        :type cwp_date_last_bio_iea_epa: str
        """
        if cwp_date_last_bio_iea_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_iea_epa`, must not be `None`")

        self._cwp_date_last_bio_iea_epa = cwp_date_last_bio_iea_epa

    @property
    def cwp_date_last_bio_iea_st(self):
        """Gets the cwp_date_last_bio_iea_st of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by a state environmental agency within the last five years.

        :return: The cwp_date_last_bio_iea_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_iea_st

    @cwp_date_last_bio_iea_st.setter
    def cwp_date_last_bio_iea_st(self, cwp_date_last_bio_iea_st):
        """Sets the cwp_date_last_bio_iea_st of this Cwa07.

        Indicates the effective date of the most recent listed biosolids informal enforcement action taken against the facility by a state environmental agency within the last five years.

        :param cwp_date_last_bio_iea_st: The cwp_date_last_bio_iea_st of this Cwa07.
        :type cwp_date_last_bio_iea_st: str
        """
        if cwp_date_last_bio_iea_st is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_iea_st`, must not be `None`")

        self._cwp_date_last_bio_iea_st = cwp_date_last_bio_iea_st

    @property
    def cwp_date_last_bio_insp(self):
        """Gets the cwp_date_last_bio_insp of this Cwa07.

        The date on which the most recent biosolids program inspection of the facility took place.

        :return: The cwp_date_last_bio_insp of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_insp

    @cwp_date_last_bio_insp.setter
    def cwp_date_last_bio_insp(self, cwp_date_last_bio_insp):
        """Sets the cwp_date_last_bio_insp of this Cwa07.

        The date on which the most recent biosolids program inspection of the facility took place.

        :param cwp_date_last_bio_insp: The cwp_date_last_bio_insp of this Cwa07.
        :type cwp_date_last_bio_insp: str
        """
        if cwp_date_last_bio_insp is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_insp`, must not be `None`")

        self._cwp_date_last_bio_insp = cwp_date_last_bio_insp

    @property
    def cwp_date_last_bio_insp_epa(self):
        """Gets the cwp_date_last_bio_insp_epa of this Cwa07.

        Indicate the last inspection date by EPA

        :return: The cwp_date_last_bio_insp_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_insp_epa

    @cwp_date_last_bio_insp_epa.setter
    def cwp_date_last_bio_insp_epa(self, cwp_date_last_bio_insp_epa):
        """Sets the cwp_date_last_bio_insp_epa of this Cwa07.

        Indicate the last inspection date by EPA

        :param cwp_date_last_bio_insp_epa: The cwp_date_last_bio_insp_epa of this Cwa07.
        :type cwp_date_last_bio_insp_epa: str
        """
        if cwp_date_last_bio_insp_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_insp_epa`, must not be `None`")

        self._cwp_date_last_bio_insp_epa = cwp_date_last_bio_insp_epa

    @property
    def cwp_date_last_bio_insp_st(self):
        """Gets the cwp_date_last_bio_insp_st of this Cwa07.

        Indicate the last inspection date by state environmental agency

        :return: The cwp_date_last_bio_insp_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_insp_st

    @cwp_date_last_bio_insp_st.setter
    def cwp_date_last_bio_insp_st(self, cwp_date_last_bio_insp_st):
        """Sets the cwp_date_last_bio_insp_st of this Cwa07.

        Indicate the last inspection date by state environmental agency

        :param cwp_date_last_bio_insp_st: The cwp_date_last_bio_insp_st of this Cwa07.
        :type cwp_date_last_bio_insp_st: str
        """
        if cwp_date_last_bio_insp_st is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_insp_st`, must not be `None`")

        self._cwp_date_last_bio_insp_st = cwp_date_last_bio_insp_st

    @property
    def cwp_date_last_bio_penalty(self):
        """Gets the cwp_date_last_bio_penalty of this Cwa07.

        Indicates the date on which the most recent assessed (or final) biosolids penalty was taken against the facility within the last five years. This measure only includes penalties that have been entered in the program database ICIS-NPDES.

        :return: The cwp_date_last_bio_penalty of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_bio_penalty

    @cwp_date_last_bio_penalty.setter
    def cwp_date_last_bio_penalty(self, cwp_date_last_bio_penalty):
        """Sets the cwp_date_last_bio_penalty of this Cwa07.

        Indicates the date on which the most recent assessed (or final) biosolids penalty was taken against the facility within the last five years. This measure only includes penalties that have been entered in the program database ICIS-NPDES.

        :param cwp_date_last_bio_penalty: The cwp_date_last_bio_penalty of this Cwa07.
        :type cwp_date_last_bio_penalty: str
        """
        if cwp_date_last_bio_penalty is None:
            raise ValueError("Invalid value for `cwp_date_last_bio_penalty`, must not be `None`")

        self._cwp_date_last_bio_penalty = cwp_date_last_bio_penalty

    @property
    def cwp_date_last_fea(self):
        """Gets the cwp_date_last_fea of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility.

        :return: The cwp_date_last_fea of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_fea

    @cwp_date_last_fea.setter
    def cwp_date_last_fea(self, cwp_date_last_fea):
        """Sets the cwp_date_last_fea of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility.

        :param cwp_date_last_fea: The cwp_date_last_fea of this Cwa07.
        :type cwp_date_last_fea: str
        """
        if cwp_date_last_fea is None:
            raise ValueError("Invalid value for `cwp_date_last_fea`, must not be `None`")

        self._cwp_date_last_fea = cwp_date_last_fea

    @property
    def cwp_date_last_fea_epa(self):
        """Gets the cwp_date_last_fea_epa of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA.

        :return: The cwp_date_last_fea_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_fea_epa

    @cwp_date_last_fea_epa.setter
    def cwp_date_last_fea_epa(self, cwp_date_last_fea_epa):
        """Sets the cwp_date_last_fea_epa of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by EPA.

        :param cwp_date_last_fea_epa: The cwp_date_last_fea_epa of this Cwa07.
        :type cwp_date_last_fea_epa: str
        """
        if cwp_date_last_fea_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_fea_epa`, must not be `None`")

        self._cwp_date_last_fea_epa = cwp_date_last_fea_epa

    @property
    def cwp_date_last_fea_st(self):
        """Gets the cwp_date_last_fea_st of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency.

        :return: The cwp_date_last_fea_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_fea_st

    @cwp_date_last_fea_st.setter
    def cwp_date_last_fea_st(self, cwp_date_last_fea_st):
        """Sets the cwp_date_last_fea_st of this Cwa07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility by a state environmental agency.

        :param cwp_date_last_fea_st: The cwp_date_last_fea_st of this Cwa07.
        :type cwp_date_last_fea_st: str
        """
        if cwp_date_last_fea_st is None:
            raise ValueError("Invalid value for `cwp_date_last_fea_st`, must not be `None`")

        self._cwp_date_last_fea_st = cwp_date_last_fea_st

    @property
    def cwp_date_last_iea_epa(self):
        """Gets the cwp_date_last_iea_epa of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA.

        :return: The cwp_date_last_iea_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_iea_epa

    @cwp_date_last_iea_epa.setter
    def cwp_date_last_iea_epa(self, cwp_date_last_iea_epa):
        """Sets the cwp_date_last_iea_epa of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility by EPA.

        :param cwp_date_last_iea_epa: The cwp_date_last_iea_epa of this Cwa07.
        :type cwp_date_last_iea_epa: str
        """
        if cwp_date_last_iea_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_iea_epa`, must not be `None`")

        self._cwp_date_last_iea_epa = cwp_date_last_iea_epa

    @property
    def cwp_date_last_iea_st(self):
        """Gets the cwp_date_last_iea_st of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency.

        :return: The cwp_date_last_iea_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_iea_st

    @cwp_date_last_iea_st.setter
    def cwp_date_last_iea_st(self, cwp_date_last_iea_st):
        """Sets the cwp_date_last_iea_st of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility by a state environmental agency.

        :param cwp_date_last_iea_st: The cwp_date_last_iea_st of this Cwa07.
        :type cwp_date_last_iea_st: str
        """
        if cwp_date_last_iea_st is None:
            raise ValueError("Invalid value for `cwp_date_last_iea_st`, must not be `None`")

        self._cwp_date_last_iea_st = cwp_date_last_iea_st

    @property
    def cwp_date_last_informal_ea(self):
        """Gets the cwp_date_last_informal_ea of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility.

        :return: The cwp_date_last_informal_ea of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_informal_ea

    @cwp_date_last_informal_ea.setter
    def cwp_date_last_informal_ea(self, cwp_date_last_informal_ea):
        """Sets the cwp_date_last_informal_ea of this Cwa07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility.

        :param cwp_date_last_informal_ea: The cwp_date_last_informal_ea of this Cwa07.
        :type cwp_date_last_informal_ea: str
        """
        if cwp_date_last_informal_ea is None:
            raise ValueError("Invalid value for `cwp_date_last_informal_ea`, must not be `None`")

        self._cwp_date_last_informal_ea = cwp_date_last_informal_ea

    @property
    def cwp_date_last_insp_epa(self):
        """Gets the cwp_date_last_insp_epa of this Cwa07.

        Indicates the effective date of the most recent inspection taken against the facility.

        :return: The cwp_date_last_insp_epa of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_insp_epa

    @cwp_date_last_insp_epa.setter
    def cwp_date_last_insp_epa(self, cwp_date_last_insp_epa):
        """Sets the cwp_date_last_insp_epa of this Cwa07.

        Indicates the effective date of the most recent inspection taken against the facility.

        :param cwp_date_last_insp_epa: The cwp_date_last_insp_epa of this Cwa07.
        :type cwp_date_last_insp_epa: str
        """
        if cwp_date_last_insp_epa is None:
            raise ValueError("Invalid value for `cwp_date_last_insp_epa`, must not be `None`")

        self._cwp_date_last_insp_epa = cwp_date_last_insp_epa

    @property
    def cwp_date_last_insp_st(self):
        """Gets the cwp_date_last_insp_st of this Cwa07.

        Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency.

        :return: The cwp_date_last_insp_st of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_insp_st

    @cwp_date_last_insp_st.setter
    def cwp_date_last_insp_st(self, cwp_date_last_insp_st):
        """Sets the cwp_date_last_insp_st of this Cwa07.

        Indicates the effective date of the most recent inspection taken against the facility by a state environmental agency.

        :param cwp_date_last_insp_st: The cwp_date_last_insp_st of this Cwa07.
        :type cwp_date_last_insp_st: str
        """
        if cwp_date_last_insp_st is None:
            raise ValueError("Invalid value for `cwp_date_last_insp_st`, must not be `None`")

        self._cwp_date_last_insp_st = cwp_date_last_insp_st

    @property
    def cwp_date_last_inspection(self):
        """Gets the cwp_date_last_inspection of this Cwa07.

        The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.

        :return: The cwp_date_last_inspection of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_inspection

    @cwp_date_last_inspection.setter
    def cwp_date_last_inspection(self, cwp_date_last_inspection):
        """Sets the cwp_date_last_inspection of this Cwa07.

        The date on which the most recent inspection of the facility took place. For the CAA, the date on which a Full Compliance Evaluation (FCE) was completed.

        :param cwp_date_last_inspection: The cwp_date_last_inspection of this Cwa07.
        :type cwp_date_last_inspection: str
        """
        if cwp_date_last_inspection is None:
            raise ValueError("Invalid value for `cwp_date_last_inspection`, must not be `None`")

        self._cwp_date_last_inspection = cwp_date_last_inspection

    @property
    def cwp_date_last_penalty(self):
        """Gets the cwp_date_last_penalty of this Cwa07.

        Indicates date of most recent penalty against the facility.

        :return: The cwp_date_last_penalty of this Cwa07.
        :rtype: str
        """
        return self._cwp_date_last_penalty

    @cwp_date_last_penalty.setter
    def cwp_date_last_penalty(self, cwp_date_last_penalty):
        """Sets the cwp_date_last_penalty of this Cwa07.

        Indicates date of most recent penalty against the facility.

        :param cwp_date_last_penalty: The cwp_date_last_penalty of this Cwa07.
        :type cwp_date_last_penalty: str
        """
        if cwp_date_last_penalty is None:
            raise ValueError("Invalid value for `cwp_date_last_penalty`, must not be `None`")

        self._cwp_date_last_penalty = cwp_date_last_penalty

    @property
    def cwp_days_last_bio_insp(self):
        """Gets the cwp_days_last_bio_insp of this Cwa07.

        Indicates the number of days since the most recent Biosolids related inspection of the facility.

        :return: The cwp_days_last_bio_insp of this Cwa07.
        :rtype: str
        """
        return self._cwp_days_last_bio_insp

    @cwp_days_last_bio_insp.setter
    def cwp_days_last_bio_insp(self, cwp_days_last_bio_insp):
        """Sets the cwp_days_last_bio_insp of this Cwa07.

        Indicates the number of days since the most recent Biosolids related inspection of the facility.

        :param cwp_days_last_bio_insp: The cwp_days_last_bio_insp of this Cwa07.
        :type cwp_days_last_bio_insp: str
        """
        if cwp_days_last_bio_insp is None:
            raise ValueError("Invalid value for `cwp_days_last_bio_insp`, must not be `None`")

        self._cwp_days_last_bio_insp = cwp_days_last_bio_insp

    @property
    def cwp_days_last_inspection(self):
        """Gets the cwp_days_last_inspection of this Cwa07.

        Indicates the number of days since the most recent inspection of the facility.

        :return: The cwp_days_last_inspection of this Cwa07.
        :rtype: str
        """
        return self._cwp_days_last_inspection

    @cwp_days_last_inspection.setter
    def cwp_days_last_inspection(self, cwp_days_last_inspection):
        """Sets the cwp_days_last_inspection of this Cwa07.

        Indicates the number of days since the most recent inspection of the facility.

        :param cwp_days_last_inspection: The cwp_days_last_inspection of this Cwa07.
        :type cwp_days_last_inspection: str
        """
        if cwp_days_last_inspection is None:
            raise ValueError("Invalid value for `cwp_days_last_inspection`, must not be `None`")

        self._cwp_days_last_inspection = cwp_days_last_inspection

    @property
    def cwpe90_cnt(self):
        """Gets the cwpe90_cnt of this Cwa07.

        Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.

        :return: The cwpe90_cnt of this Cwa07.
        :rtype: str
        """
        return self._cwpe90_cnt

    @cwpe90_cnt.setter
    def cwpe90_cnt(self, cwpe90_cnt):
        """Sets the cwpe90_cnt of this Cwa07.

        Displays the number of instances where effluent limits have been exceeded in the past 3 years (E90 compliance code), based on monthly Discharge Monitoring Reports (DMRs) submitted by facilities.

        :param cwpe90_cnt: The cwpe90_cnt of this Cwa07.
        :type cwpe90_cnt: str
        """
        if cwpe90_cnt is None:
            raise ValueError("Invalid value for `cwpe90_cnt`, must not be `None`")

        self._cwpe90_cnt = cwpe90_cnt

    @property
    def cwpepa_region(self):
        """Gets the cwpepa_region of this Cwa07.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.

        :return: The cwpepa_region of this Cwa07.
        :rtype: str
        """
        return self._cwpepa_region

    @cwpepa_region.setter
    def cwpepa_region(self, cwpepa_region):
        """Sets the cwpepa_region of this Cwa07.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories.

        :param cwpepa_region: The cwpepa_region of this Cwa07.
        :type cwpepa_region: str
        """
        if cwpepa_region is None:
            raise ValueError("Invalid value for `cwpepa_region`, must not be `None`")

        self._cwpepa_region = cwpepa_region

    @property
    def cwp_effective_date(self):
        """Gets the cwp_effective_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit became effective.

        :return: The cwp_effective_date of this Cwa07.
        :rtype: str
        """
        return self._cwp_effective_date

    @cwp_effective_date.setter
    def cwp_effective_date(self, cwp_effective_date):
        """Sets the cwp_effective_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit became effective.

        :param cwp_effective_date: The cwp_effective_date of this Cwa07.
        :type cwp_effective_date: str
        """
        if cwp_effective_date is None:
            raise ValueError("Invalid value for `cwp_effective_date`, must not be `None`")

        self._cwp_effective_date = cwp_effective_date

    @property
    def cwp_expiration_date(self):
        """Gets the cwp_expiration_date of this Cwa07.

        Date that the permit expires.

        :return: The cwp_expiration_date of this Cwa07.
        :rtype: str
        """
        return self._cwp_expiration_date

    @cwp_expiration_date.setter
    def cwp_expiration_date(self, cwp_expiration_date):
        """Sets the cwp_expiration_date of this Cwa07.

        Date that the permit expires.

        :param cwp_expiration_date: The cwp_expiration_date of this Cwa07.
        :type cwp_expiration_date: str
        """
        if cwp_expiration_date is None:
            raise ValueError("Invalid value for `cwp_expiration_date`, must not be `None`")

        self._cwp_expiration_date = cwp_expiration_date

    @property
    def cwpfips_code(self):
        """Gets the cwpfips_code of this Cwa07.

        A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.

        :return: The cwpfips_code of this Cwa07.
        :rtype: str
        """
        return self._cwpfips_code

    @cwpfips_code.setter
    def cwpfips_code(self, cwpfips_code):
        """Sets the cwpfips_code of this Cwa07.

        A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.

        :param cwpfips_code: The cwpfips_code of this Cwa07.
        :type cwpfips_code: str
        """
        if cwpfips_code is None:
            raise ValueError("Invalid value for `cwpfips_code`, must not be `None`")

        self._cwpfips_code = cwpfips_code

    @property
    def cwp_facility_type_code(self):
        """Gets the cwp_facility_type_code of this Cwa07.


        :return: The cwp_facility_type_code of this Cwa07.
        :rtype: str
        """
        return self._cwp_facility_type_code

    @cwp_facility_type_code.setter
    def cwp_facility_type_code(self, cwp_facility_type_code):
        """Sets the cwp_facility_type_code of this Cwa07.


        :param cwp_facility_type_code: The cwp_facility_type_code of this Cwa07.
        :type cwp_facility_type_code: str
        """
        if cwp_facility_type_code is None:
            raise ValueError("Invalid value for `cwp_facility_type_code`, must not be `None`")

        self._cwp_facility_type_code = cwp_facility_type_code

    @property
    def cwp_facility_type_indicator(self):
        """Gets the cwp_facility_type_indicator of this Cwa07.

        Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.

        :return: The cwp_facility_type_indicator of this Cwa07.
        :rtype: str
        """
        return self._cwp_facility_type_indicator

    @cwp_facility_type_indicator.setter
    def cwp_facility_type_indicator(self, cwp_facility_type_indicator):
        """Sets the cwp_facility_type_indicator of this Cwa07.

        Each National Pollutant Discharge Elimination System (NPDES) permit is defined by the program office as a Major or non-major discharger. This field also indicates the permit type.

        :param cwp_facility_type_indicator: The cwp_facility_type_indicator of this Cwa07.
        :type cwp_facility_type_indicator: str
        """
        if cwp_facility_type_indicator is None:
            raise ValueError("Invalid value for `cwp_facility_type_indicator`, must not be `None`")

        self._cwp_facility_type_indicator = cwp_facility_type_indicator

    @property
    def cwp_formal_ea_cnt(self):
        """Gets the cwp_formal_ea_cnt of this Cwa07.

        Indicates the total number of enforcement actions taken against the facility within the last five years. \"NA\" indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.

        :return: The cwp_formal_ea_cnt of this Cwa07.
        :rtype: str
        """
        return self._cwp_formal_ea_cnt

    @cwp_formal_ea_cnt.setter
    def cwp_formal_ea_cnt(self, cwp_formal_ea_cnt):
        """Sets the cwp_formal_ea_cnt of this Cwa07.

        Indicates the total number of enforcement actions taken against the facility within the last five years. \"NA\" indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits.

        :param cwp_formal_ea_cnt: The cwp_formal_ea_cnt of this Cwa07.
        :type cwp_formal_ea_cnt: str
        """
        if cwp_formal_ea_cnt is None:
            raise ValueError("Invalid value for `cwp_formal_ea_cnt`, must not be `None`")

        self._cwp_formal_ea_cnt = cwp_formal_ea_cnt

    @property
    def cwp_imp_water_flg(self):
        """Gets the cwp_imp_water_flg of this Cwa07.

        Displays \"Y\" if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.

        :return: The cwp_imp_water_flg of this Cwa07.
        :rtype: str
        """
        return self._cwp_imp_water_flg

    @cwp_imp_water_flg.setter
    def cwp_imp_water_flg(self, cwp_imp_water_flg):
        """Sets the cwp_imp_water_flg of this Cwa07.

        Displays \"Y\" if the permitted facility discharges directly into category 4 or 5 impaired waters, as designated under section 303(d) of the Clean Water Act.

        :param cwp_imp_water_flg: The cwp_imp_water_flg of this Cwa07.
        :type cwp_imp_water_flg: str
        """
        if cwp_imp_water_flg is None:
            raise ValueError("Invalid value for `cwp_imp_water_flg`, must not be `None`")

        self._cwp_imp_water_flg = cwp_imp_water_flg

    @property
    def cwp_indian_cntry_flg(self):
        """Gets the cwp_indian_cntry_flg of this Cwa07.

        Displays \"Y\" if a facility is located in Indian country.

        :return: The cwp_indian_cntry_flg of this Cwa07.
        :rtype: str
        """
        return self._cwp_indian_cntry_flg

    @cwp_indian_cntry_flg.setter
    def cwp_indian_cntry_flg(self, cwp_indian_cntry_flg):
        """Sets the cwp_indian_cntry_flg of this Cwa07.

        Displays \"Y\" if a facility is located in Indian country.

        :param cwp_indian_cntry_flg: The cwp_indian_cntry_flg of this Cwa07.
        :type cwp_indian_cntry_flg: str
        """
        if cwp_indian_cntry_flg is None:
            raise ValueError("Invalid value for `cwp_indian_cntry_flg`, must not be `None`")

        self._cwp_indian_cntry_flg = cwp_indian_cntry_flg

    @property
    def cwp_informal_enf_act_count(self):
        """Gets the cwp_informal_enf_act_count of this Cwa07.

        Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.

        :return: The cwp_informal_enf_act_count of this Cwa07.
        :rtype: str
        """
        return self._cwp_informal_enf_act_count

    @cwp_informal_enf_act_count.setter
    def cwp_informal_enf_act_count(self, cwp_informal_enf_act_count):
        """Sets the cwp_informal_enf_act_count of this Cwa07.

        Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years.

        :param cwp_informal_enf_act_count: The cwp_informal_enf_act_count of this Cwa07.
        :type cwp_informal_enf_act_count: str
        """
        if cwp_informal_enf_act_count is None:
            raise ValueError("Invalid value for `cwp_informal_enf_act_count`, must not be `None`")

        self._cwp_informal_enf_act_count = cwp_informal_enf_act_count

    @property
    def cwp_inspection_count(self):
        """Gets the cwp_inspection_count of this Cwa07.

        The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.

        :return: The cwp_inspection_count of this Cwa07.
        :rtype: str
        """
        return self._cwp_inspection_count

    @cwp_inspection_count.setter
    def cwp_inspection_count(self, cwp_inspection_count):
        """Sets the cwp_inspection_count of this Cwa07.

        The number of inspections/compliance evaluations, under the corresponding statute, occurring at the facility within the last five years.

        :param cwp_inspection_count: The cwp_inspection_count of this Cwa07.
        :type cwp_inspection_count: str
        """
        if cwp_inspection_count is None:
            raise ValueError("Invalid value for `cwp_inspection_count`, must not be `None`")

        self._cwp_inspection_count = cwp_inspection_count

    @property
    def cwp_issue_date(self):
        """Gets the cwp_issue_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit was issued.

        :return: The cwp_issue_date of this Cwa07.
        :rtype: str
        """
        return self._cwp_issue_date

    @cwp_issue_date.setter
    def cwp_issue_date(self, cwp_issue_date):
        """Sets the cwp_issue_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit was issued.

        :param cwp_issue_date: The cwp_issue_date of this Cwa07.
        :type cwp_issue_date: str
        """
        if cwp_issue_date is None:
            raise ValueError("Invalid value for `cwp_issue_date`, must not be `None`")

        self._cwp_issue_date = cwp_issue_date

    @property
    def cwp_major_minor_status_flag(self):
        """Gets the cwp_major_minor_status_flag of this Cwa07.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :return: The cwp_major_minor_status_flag of this Cwa07.
        :rtype: str
        """
        return self._cwp_major_minor_status_flag

    @cwp_major_minor_status_flag.setter
    def cwp_major_minor_status_flag(self, cwp_major_minor_status_flag):
        """Sets the cwp_major_minor_status_flag of this Cwa07.

        Facilities marked \"M\" for major refers to CWA major permittees. - M = Major - N = Minor

        :param cwp_major_minor_status_flag: The cwp_major_minor_status_flag of this Cwa07.
        :type cwp_major_minor_status_flag: str
        """
        if cwp_major_minor_status_flag is None:
            raise ValueError("Invalid value for `cwp_major_minor_status_flag`, must not be `None`")

        self._cwp_major_minor_status_flag = cwp_major_minor_status_flag

    @property
    def cwpnaics_codes(self):
        """Gets the cwpnaics_codes of this Cwa07.

        Indicates the facility's or permit's primary North American Industry Classification System (NAICS) Code.

        :return: The cwpnaics_codes of this Cwa07.
        :rtype: str
        """
        return self._cwpnaics_codes

    @cwpnaics_codes.setter
    def cwpnaics_codes(self, cwpnaics_codes):
        """Sets the cwpnaics_codes of this Cwa07.

        Indicates the facility's or permit's primary North American Industry Classification System (NAICS) Code.

        :param cwpnaics_codes: The cwpnaics_codes of this Cwa07.
        :type cwpnaics_codes: str
        """
        if cwpnaics_codes is None:
            raise ValueError("Invalid value for `cwpnaics_codes`, must not be `None`")

        self._cwpnaics_codes = cwpnaics_codes

    @property
    def cwp_name(self):
        """Gets the cwp_name of this Cwa07.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :return: The cwp_name of this Cwa07.
        :rtype: str
        """
        return self._cwp_name

    @cwp_name.setter
    def cwp_name(self, cwp_name):
        """Sets the cwp_name of this Cwa07.

        Facility or permit holder name, as maintained in ICIS-NPDES.

        :param cwp_name: The cwp_name of this Cwa07.
        :type cwp_name: str
        """
        if cwp_name is None:
            raise ValueError("Invalid value for `cwp_name`, must not be `None`")

        self._cwp_name = cwp_name

    @property
    def cwp_permit_status_code(self):
        """Gets the cwp_permit_status_code of this Cwa07.

        The code associated with the facility's NPDES permit status.

        :return: The cwp_permit_status_code of this Cwa07.
        :rtype: str
        """
        return self._cwp_permit_status_code

    @cwp_permit_status_code.setter
    def cwp_permit_status_code(self, cwp_permit_status_code):
        """Sets the cwp_permit_status_code of this Cwa07.

        The code associated with the facility's NPDES permit status.

        :param cwp_permit_status_code: The cwp_permit_status_code of this Cwa07.
        :type cwp_permit_status_code: str
        """
        if cwp_permit_status_code is None:
            raise ValueError("Invalid value for `cwp_permit_status_code`, must not be `None`")

        self._cwp_permit_status_code = cwp_permit_status_code

    @property
    def cwp_permit_status_desc(self):
        """Gets the cwp_permit_status_desc of this Cwa07.

        The current stage/status in the NPDES permit life cycle.

        :return: The cwp_permit_status_desc of this Cwa07.
        :rtype: str
        """
        return self._cwp_permit_status_desc

    @cwp_permit_status_desc.setter
    def cwp_permit_status_desc(self, cwp_permit_status_desc):
        """Sets the cwp_permit_status_desc of this Cwa07.

        The current stage/status in the NPDES permit life cycle.

        :param cwp_permit_status_desc: The cwp_permit_status_desc of this Cwa07.
        :type cwp_permit_status_desc: str
        """
        if cwp_permit_status_desc is None:
            raise ValueError("Invalid value for `cwp_permit_status_desc`, must not be `None`")

        self._cwp_permit_status_desc = cwp_permit_status_desc

    @property
    def cwp_permit_type_code(self):
        """Gets the cwp_permit_type_code of this Cwa07.

        The code associated with the facility's NPDES permit classification.

        :return: The cwp_permit_type_code of this Cwa07.
        :rtype: str
        """
        return self._cwp_permit_type_code

    @cwp_permit_type_code.setter
    def cwp_permit_type_code(self, cwp_permit_type_code):
        """Sets the cwp_permit_type_code of this Cwa07.

        The code associated with the facility's NPDES permit classification.

        :param cwp_permit_type_code: The cwp_permit_type_code of this Cwa07.
        :type cwp_permit_type_code: str
        """
        if cwp_permit_type_code is None:
            raise ValueError("Invalid value for `cwp_permit_type_code`, must not be `None`")

        self._cwp_permit_type_code = cwp_permit_type_code

    @property
    def cwp_permit_type_desc(self):
        """Gets the cwp_permit_type_desc of this Cwa07.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :return: The cwp_permit_type_desc of this Cwa07.
        :rtype: str
        """
        return self._cwp_permit_type_desc

    @cwp_permit_type_desc.setter
    def cwp_permit_type_desc(self, cwp_permit_type_desc):
        """Sets the cwp_permit_type_desc of this Cwa07.

        NPDES facility permit classification: - NPDES Individual Permit - General Permit Covered Facility - NPDES Master General Permit - Associated Permit Record - Individual Industrial User Permit - Individual State Issued Permit - State Issued Master General Permit - Unpermitted Facility

        :param cwp_permit_type_desc: The cwp_permit_type_desc of this Cwa07.
        :type cwp_permit_type_desc: str
        """
        if cwp_permit_type_desc is None:
            raise ValueError("Invalid value for `cwp_permit_type_desc`, must not be `None`")

        self._cwp_permit_type_desc = cwp_permit_type_desc

    @property
    def cwp_qtrs_with_nc(self):
        """Gets the cwp_qtrs_with_nc of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in noncompliance (NC) status, or in Significant Noncompliance (SNC), as described above under Compliance Status.

        :return: The cwp_qtrs_with_nc of this Cwa07.
        :rtype: str
        """
        return self._cwp_qtrs_with_nc

    @cwp_qtrs_with_nc.setter
    def cwp_qtrs_with_nc(self, cwp_qtrs_with_nc):
        """Sets the cwp_qtrs_with_nc of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit or site is considered either with violations, in noncompliance (NC) status, or in Significant Noncompliance (SNC), as described above under Compliance Status.

        :param cwp_qtrs_with_nc: The cwp_qtrs_with_nc of this Cwa07.
        :type cwp_qtrs_with_nc: str
        """
        if cwp_qtrs_with_nc is None:
            raise ValueError("Invalid value for `cwp_qtrs_with_nc`, must not be `None`")

        self._cwp_qtrs_with_nc = cwp_qtrs_with_nc

    @property
    def cwp_qtrs_with_snc(self):
        """Gets the cwp_qtrs_with_snc of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Noncompliance (SNC), as described above under Compliance Status.

        :return: The cwp_qtrs_with_snc of this Cwa07.
        :rtype: str
        """
        return self._cwp_qtrs_with_snc

    @cwp_qtrs_with_snc.setter
    def cwp_qtrs_with_snc(self, cwp_qtrs_with_snc):
        """Sets the cwp_qtrs_with_snc of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which the permit is considered in Significant Noncompliance (SNC), as described above under Compliance Status.

        :param cwp_qtrs_with_snc: The cwp_qtrs_with_snc of this Cwa07.
        :type cwp_qtrs_with_snc: str
        """
        if cwp_qtrs_with_snc is None:
            raise ValueError("Invalid value for `cwp_qtrs_with_snc`, must not be `None`")

        self._cwp_qtrs_with_snc = cwp_qtrs_with_snc

    @property
    def cwpsic_codes(self):
        """Gets the cwpsic_codes of this Cwa07.

        Indicates the facility's or permit's primary Standard Industrial Classification (SIC) Code.

        :return: The cwpsic_codes of this Cwa07.
        :rtype: str
        """
        return self._cwpsic_codes

    @cwpsic_codes.setter
    def cwpsic_codes(self, cwpsic_codes):
        """Sets the cwpsic_codes of this Cwa07.

        Indicates the facility's or permit's primary Standard Industrial Classification (SIC) Code.

        :param cwpsic_codes: The cwpsic_codes of this Cwa07.
        :type cwpsic_codes: str
        """
        if cwpsic_codes is None:
            raise ValueError("Invalid value for `cwpsic_codes`, must not be `None`")

        self._cwpsic_codes = cwpsic_codes

    @property
    def cwpsnc_event_desc(self):
        """Gets the cwpsnc_event_desc of this Cwa07.

        Describes the event that resulted in the facility's status of Significant Noncompliance.

        :return: The cwpsnc_event_desc of this Cwa07.
        :rtype: str
        """
        return self._cwpsnc_event_desc

    @cwpsnc_event_desc.setter
    def cwpsnc_event_desc(self, cwpsnc_event_desc):
        """Sets the cwpsnc_event_desc of this Cwa07.

        Describes the event that resulted in the facility's status of Significant Noncompliance.

        :param cwpsnc_event_desc: The cwpsnc_event_desc of this Cwa07.
        :type cwpsnc_event_desc: str
        """
        if cwpsnc_event_desc is None:
            raise ValueError("Invalid value for `cwpsnc_event_desc`, must not be `None`")

        self._cwpsnc_event_desc = cwpsnc_event_desc

    @property
    def cwpsnc_status(self):
        """Gets the cwpsnc_status of this Cwa07.

        Indicates when a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation.

        :return: The cwpsnc_status of this Cwa07.
        :rtype: str
        """
        return self._cwpsnc_status

    @cwpsnc_status.setter
    def cwpsnc_status(self, cwpsnc_status):
        """Sets the cwpsnc_status of this Cwa07.

        Indicates when a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation.

        :param cwpsnc_status: The cwpsnc_status of this Cwa07.
        :type cwpsnc_status: str
        """
        if cwpsnc_status is None:
            raise ValueError("Invalid value for `cwpsnc_status`, must not be `None`")

        self._cwpsnc_status = cwpsnc_status

    @property
    def cwpsnc_status_date(self):
        """Gets the cwpsnc_status_date of this Cwa07.

        The status date of the facility's Significant Noncompliance designation.

        :return: The cwpsnc_status_date of this Cwa07.
        :rtype: str
        """
        return self._cwpsnc_status_date

    @cwpsnc_status_date.setter
    def cwpsnc_status_date(self, cwpsnc_status_date):
        """Sets the cwpsnc_status_date of this Cwa07.

        The status date of the facility's Significant Noncompliance designation.

        :param cwpsnc_status_date: The cwpsnc_status_date of this Cwa07.
        :type cwpsnc_status_date: str
        """
        if cwpsnc_status_date is None:
            raise ValueError("Invalid value for `cwpsnc_status_date`, must not be `None`")

        self._cwpsnc_status_date = cwpsnc_status_date

    @property
    def cwp_state(self):
        """Gets the cwp_state of this Cwa07.

        Facility location - two-digit state abbreviation.

        :return: The cwp_state of this Cwa07.
        :rtype: str
        """
        return self._cwp_state

    @cwp_state.setter
    def cwp_state(self, cwp_state):
        """Sets the cwp_state of this Cwa07.

        Facility location - two-digit state abbreviation.

        :param cwp_state: The cwp_state of this Cwa07.
        :type cwp_state: str
        """
        if cwp_state is None:
            raise ValueError("Invalid value for `cwp_state`, must not be `None`")

        self._cwp_state = cwp_state

    @property
    def cwp_state_district(self):
        """Gets the cwp_state_district of this Cwa07.

        The State Congressional District the facility is located within.

        :return: The cwp_state_district of this Cwa07.
        :rtype: str
        """
        return self._cwp_state_district

    @cwp_state_district.setter
    def cwp_state_district(self, cwp_state_district):
        """Sets the cwp_state_district of this Cwa07.

        The State Congressional District the facility is located within.

        :param cwp_state_district: The cwp_state_district of this Cwa07.
        :type cwp_state_district: str
        """
        if cwp_state_district is None:
            raise ValueError("Invalid value for `cwp_state_district`, must not be `None`")

        self._cwp_state_district = cwp_state_district

    @property
    def cwp_state_water_body_code(self):
        """Gets the cwp_state_water_body_code of this Cwa07.

        Code from the Assessment TMDL Tracking & Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)

        :return: The cwp_state_water_body_code of this Cwa07.
        :rtype: str
        """
        return self._cwp_state_water_body_code

    @cwp_state_water_body_code.setter
    def cwp_state_water_body_code(self, cwp_state_water_body_code):
        """Sets the cwp_state_water_body_code of this Cwa07.

        Code from the Assessment TMDL Tracking & Implementation System (ATTAINS) database, assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)

        :param cwp_state_water_body_code: The cwp_state_water_body_code of this Cwa07.
        :type cwp_state_water_body_code: str
        """
        if cwp_state_water_body_code is None:
            raise ValueError("Invalid value for `cwp_state_water_body_code`, must not be `None`")

        self._cwp_state_water_body_code = cwp_state_water_body_code

    @property
    def cwp_state_water_body_name(self):
        """Gets the cwp_state_water_body_name of this Cwa07.

        The name of the watershed from the ATTAINS database in which the facility resides.

        :return: The cwp_state_water_body_name of this Cwa07.
        :rtype: str
        """
        return self._cwp_state_water_body_name

    @cwp_state_water_body_name.setter
    def cwp_state_water_body_name(self, cwp_state_water_body_name):
        """Sets the cwp_state_water_body_name of this Cwa07.

        The name of the watershed from the ATTAINS database in which the facility resides.

        :param cwp_state_water_body_name: The cwp_state_water_body_name of this Cwa07.
        :type cwp_state_water_body_name: str
        """
        if cwp_state_water_body_name is None:
            raise ValueError("Invalid value for `cwp_state_water_body_name`, must not be `None`")

        self._cwp_state_water_body_name = cwp_state_water_body_name

    @property
    def cwp_status(self):
        """Gets the cwp_status of this Cwa07.

        An indication of the facility's current compliance status under the Clean Water Act: - Significant Violation - Noncompliance - No Violation - Unknown

        :return: The cwp_status of this Cwa07.
        :rtype: str
        """
        return self._cwp_status

    @cwp_status.setter
    def cwp_status(self, cwp_status):
        """Sets the cwp_status of this Cwa07.

        An indication of the facility's current compliance status under the Clean Water Act: - Significant Violation - Noncompliance - No Violation - Unknown

        :param cwp_status: The cwp_status of this Cwa07.
        :type cwp_status: str
        """
        if cwp_status is None:
            raise ValueError("Invalid value for `cwp_status`, must not be `None`")

        self._cwp_status = cwp_status

    @property
    def cwp_street(self):
        """Gets the cwp_street of this Cwa07.

        Facility street address

        :return: The cwp_street of this Cwa07.
        :rtype: str
        """
        return self._cwp_street

    @cwp_street.setter
    def cwp_street(self, cwp_street):
        """Sets the cwp_street of this Cwa07.

        Facility street address

        :param cwp_street: The cwp_street of this Cwa07.
        :type cwp_street: str
        """
        if cwp_street is None:
            raise ValueError("Invalid value for `cwp_street`, must not be `None`")

        self._cwp_street = cwp_street

    @property
    def cwptr_ibal_land_code(self):
        """Gets the cwptr_ibal_land_code of this Cwa07.

        From ICIS, the unique identifier for every unit of land within Indian Country.

        :return: The cwptr_ibal_land_code of this Cwa07.
        :rtype: str
        """
        return self._cwptr_ibal_land_code

    @cwptr_ibal_land_code.setter
    def cwptr_ibal_land_code(self, cwptr_ibal_land_code):
        """Sets the cwptr_ibal_land_code of this Cwa07.

        From ICIS, the unique identifier for every unit of land within Indian Country.

        :param cwptr_ibal_land_code: The cwptr_ibal_land_code of this Cwa07.
        :type cwptr_ibal_land_code: str
        """
        if cwptr_ibal_land_code is None:
            raise ValueError("Invalid value for `cwptr_ibal_land_code`, must not be `None`")

        self._cwptr_ibal_land_code = cwptr_ibal_land_code

    @property
    def cwp_termination_date(self):
        """Gets the cwp_termination_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit was terminated.

        :return: The cwp_termination_date of this Cwa07.
        :rtype: str
        """
        return self._cwp_termination_date

    @cwp_termination_date.setter
    def cwp_termination_date(self, cwp_termination_date):
        """Sets the cwp_termination_date of this Cwa07.

        Date (MM/DD/YYYY) that the permit was terminated.

        :param cwp_termination_date: The cwp_termination_date of this Cwa07.
        :type cwp_termination_date: str
        """
        if cwp_termination_date is None:
            raise ValueError("Invalid value for `cwp_termination_date`, must not be `None`")

        self._cwp_termination_date = cwp_termination_date

    @property
    def cwp_total_design_flow_nmbr(self):
        """Gets the cwp_total_design_flow_nmbr of this Cwa07.

        The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.

        :return: The cwp_total_design_flow_nmbr of this Cwa07.
        :rtype: str
        """
        return self._cwp_total_design_flow_nmbr

    @cwp_total_design_flow_nmbr.setter
    def cwp_total_design_flow_nmbr(self, cwp_total_design_flow_nmbr):
        """Sets the cwp_total_design_flow_nmbr of this Cwa07.

        The amount of wastewater flow in million gallons per day (MGD) that the facility is designed for.

        :param cwp_total_design_flow_nmbr: The cwp_total_design_flow_nmbr of this Cwa07.
        :type cwp_total_design_flow_nmbr: str
        """
        if cwp_total_design_flow_nmbr is None:
            raise ValueError("Invalid value for `cwp_total_design_flow_nmbr`, must not be `None`")

        self._cwp_total_design_flow_nmbr = cwp_total_design_flow_nmbr

    @property
    def cwp_total_penalties(self):
        """Gets the cwp_total_penalties of this Cwa07.

        The total penalty value incurred over 5 years.

        :return: The cwp_total_penalties of this Cwa07.
        :rtype: str
        """
        return self._cwp_total_penalties

    @cwp_total_penalties.setter
    def cwp_total_penalties(self, cwp_total_penalties):
        """Sets the cwp_total_penalties of this Cwa07.

        The total penalty value incurred over 5 years.

        :param cwp_total_penalties: The cwp_total_penalties of this Cwa07.
        :type cwp_total_penalties: str
        """
        if cwp_total_penalties is None:
            raise ValueError("Invalid value for `cwp_total_penalties`, must not be `None`")

        self._cwp_total_penalties = cwp_total_penalties

    @property
    def cwp_version_nmbr(self):
        """Gets the cwp_version_nmbr of this Cwa07.

        The version number of the facility's NPDES permit.

        :return: The cwp_version_nmbr of this Cwa07.
        :rtype: str
        """
        return self._cwp_version_nmbr

    @cwp_version_nmbr.setter
    def cwp_version_nmbr(self, cwp_version_nmbr):
        """Sets the cwp_version_nmbr of this Cwa07.

        The version number of the facility's NPDES permit.

        :param cwp_version_nmbr: The cwp_version_nmbr of this Cwa07.
        :type cwp_version_nmbr: str
        """
        if cwp_version_nmbr is None:
            raise ValueError("Invalid value for `cwp_version_nmbr`, must not be `None`")

        self._cwp_version_nmbr = cwp_version_nmbr

    @property
    def cwp_vio_status(self):
        """Gets the cwp_vio_status of this Cwa07.

        The current Reportable Non Compliance value for the facility.

        :return: The cwp_vio_status of this Cwa07.
        :rtype: str
        """
        return self._cwp_vio_status

    @cwp_vio_status.setter
    def cwp_vio_status(self, cwp_vio_status):
        """Sets the cwp_vio_status of this Cwa07.

        The current Reportable Non Compliance value for the facility.

        :param cwp_vio_status: The cwp_vio_status of this Cwa07.
        :type cwp_vio_status: str
        """
        if cwp_vio_status is None:
            raise ValueError("Invalid value for `cwp_vio_status`, must not be `None`")

        self._cwp_vio_status = cwp_vio_status

    @property
    def cwp_viol_status(self):
        """Gets the cwp_viol_status of this Cwa07.

        Indicates if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.

        :return: The cwp_viol_status of this Cwa07.
        :rtype: str
        """
        return self._cwp_viol_status

    @cwp_viol_status.setter
    def cwp_viol_status(self, cwp_viol_status):
        """Sets the cwp_viol_status of this Cwa07.

        Indicates if the facility is currently in any violation under the Clean Water Act, either in Noncompliance or Significant Noncompliance.

        :param cwp_viol_status: The cwp_viol_status of this Cwa07.
        :type cwp_viol_status: str
        """
        if cwp_viol_status is None:
            raise ValueError("Invalid value for `cwp_viol_status`, must not be `None`")

        self._cwp_viol_status = cwp_viol_status

    @property
    def cwp_zip(self):
        """Gets the cwp_zip of this Cwa07.

        Facility ZIP code

        :return: The cwp_zip of this Cwa07.
        :rtype: str
        """
        return self._cwp_zip

    @cwp_zip.setter
    def cwp_zip(self, cwp_zip):
        """Sets the cwp_zip of this Cwa07.

        Facility ZIP code

        :param cwp_zip: The cwp_zip of this Cwa07.
        :type cwp_zip: str
        """
        if cwp_zip is None:
            raise ValueError("Invalid value for `cwp_zip`, must not be `None`")

        self._cwp_zip = cwp_zip

    @property
    def calculated_accuracy_meters(self):
        """Gets the calculated_accuracy_meters of this Cwa07.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :return: The calculated_accuracy_meters of this Cwa07.
        :rtype: str
        """
        return self._calculated_accuracy_meters

    @calculated_accuracy_meters.setter
    def calculated_accuracy_meters(self, calculated_accuracy_meters):
        """Sets the calculated_accuracy_meters of this Cwa07.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Cwa07.
        :type calculated_accuracy_meters: str
        """
        if calculated_accuracy_meters is None:
            raise ValueError("Invalid value for `calculated_accuracy_meters`, must not be `None`")

        self._calculated_accuracy_meters = calculated_accuracy_meters

    @property
    def census_block_group(self):
        """Gets the census_block_group of this Cwa07.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :return: The census_block_group of this Cwa07.
        :rtype: str
        """
        return self._census_block_group

    @census_block_group.setter
    def census_block_group(self, census_block_group):
        """Sets the census_block_group of this Cwa07.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :param census_block_group: The census_block_group of this Cwa07.
        :type census_block_group: str
        """
        if census_block_group is None:
            raise ValueError("Invalid value for `census_block_group`, must not be `None`")

        self._census_block_group = census_block_group

    @property
    def certified_date(self):
        """Gets the certified_date of this Cwa07.

        The issue date or effective date of the permit.

        :return: The certified_date of this Cwa07.
        :rtype: str
        """
        return self._certified_date

    @certified_date.setter
    def certified_date(self, certified_date):
        """Sets the certified_date of this Cwa07.

        The issue date or effective date of the permit.

        :param certified_date: The certified_date of this Cwa07.
        :type certified_date: str
        """
        if certified_date is None:
            raise ValueError("Invalid value for `certified_date`, must not be `None`")

        self._certified_date = certified_date

    @property
    def chesapeake_bay_flag(self):
        """Gets the chesapeake_bay_flag of this Cwa07.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :return: The chesapeake_bay_flag of this Cwa07.
        :rtype: str
        """
        return self._chesapeake_bay_flag

    @chesapeake_bay_flag.setter
    def chesapeake_bay_flag(self, chesapeake_bay_flag):
        """Sets the chesapeake_bay_flag of this Cwa07.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Cwa07.
        :type chesapeake_bay_flag: str
        """
        if chesapeake_bay_flag is None:
            raise ValueError("Invalid value for `chesapeake_bay_flag`, must not be `None`")

        self._chesapeake_bay_flag = chesapeake_bay_flag

    @property
    def collection_method(self):
        """Gets the collection_method of this Cwa07.

        ??

        :return: The collection_method of this Cwa07.
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this Cwa07.

        ??

        :param collection_method: The collection_method of this Cwa07.
        :type collection_method: str
        """
        if collection_method is None:
            raise ValueError("Invalid value for `collection_method`, must not be `None`")

        self._collection_method = collection_method

    @property
    def control_measure(self):
        """Gets the control_measure of this Cwa07.

        Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.

        :return: The control_measure of this Cwa07.
        :rtype: str
        """
        return self._control_measure

    @control_measure.setter
    def control_measure(self, control_measure):
        """Sets the control_measure of this Cwa07.

        Description of control measures employed to comply with the non-numeric technology-based effluent limits required in Part 2.1.2 and Part 8.

        :param control_measure: The control_measure of this Cwa07.
        :type control_measure: str
        """
        if control_measure is None:
            raise ValueError("Invalid value for `control_measure`, must not be `None`")

        self._control_measure = control_measure

    @property
    def control_measure_schedule(self):
        """Gets the control_measure_schedule of this Cwa07.

        Description of schedule for control measures associated with good housekeeping and maintenance.

        :return: The control_measure_schedule of this Cwa07.
        :rtype: str
        """
        return self._control_measure_schedule

    @control_measure_schedule.setter
    def control_measure_schedule(self, control_measure_schedule):
        """Sets the control_measure_schedule of this Cwa07.

        Description of schedule for control measures associated with good housekeeping and maintenance.

        :param control_measure_schedule: The control_measure_schedule of this Cwa07.
        :type control_measure_schedule: str
        """
        if control_measure_schedule is None:
            raise ValueError("Invalid value for `control_measure_schedule`, must not be `None`")

        self._control_measure_schedule = control_measure_schedule

    @property
    def curr_sv_flag(self):
        """Gets the curr_sv_flag of this Cwa07.

        Indicates if the facility has a current significant violation. 1 = Yes

        :return: The curr_sv_flag of this Cwa07.
        :rtype: str
        """
        return self._curr_sv_flag

    @curr_sv_flag.setter
    def curr_sv_flag(self, curr_sv_flag):
        """Sets the curr_sv_flag of this Cwa07.

        Indicates if the facility has a current significant violation. 1 = Yes

        :param curr_sv_flag: The curr_sv_flag of this Cwa07.
        :type curr_sv_flag: str
        """
        if curr_sv_flag is None:
            raise ValueError("Invalid value for `curr_sv_flag`, must not be `None`")

        self._curr_sv_flag = curr_sv_flag

    @property
    def curr_vio_flag(self):
        """Gets the curr_vio_flag of this Cwa07.

        Indicates if the facility has a current violation. 1 = Yes

        :return: The curr_vio_flag of this Cwa07.
        :rtype: str
        """
        return self._curr_vio_flag

    @curr_vio_flag.setter
    def curr_vio_flag(self, curr_vio_flag):
        """Sets the curr_vio_flag of this Cwa07.

        Indicates if the facility has a current violation. 1 = Yes

        :param curr_vio_flag: The curr_vio_flag of this Cwa07.
        :type curr_vio_flag: str
        """
        if curr_vio_flag is None:
            raise ValueError("Invalid value for `curr_vio_flag`, must not be `None`")

        self._curr_vio_flag = curr_vio_flag

    @property
    def dmr_impaired_poll(self):
        """Gets the dmr_impaired_poll of this Cwa07.

        The pollutants with limits or monitoring requirements in a facility's NPDES permit with the potential to contribute to impairment of local waterbodies

        :return: The dmr_impaired_poll of this Cwa07.
        :rtype: str
        """
        return self._dmr_impaired_poll

    @dmr_impaired_poll.setter
    def dmr_impaired_poll(self, dmr_impaired_poll):
        """Sets the dmr_impaired_poll of this Cwa07.

        The pollutants with limits or monitoring requirements in a facility's NPDES permit with the potential to contribute to impairment of local waterbodies

        :param dmr_impaired_poll: The dmr_impaired_poll of this Cwa07.
        :type dmr_impaired_poll: str
        """
        if dmr_impaired_poll is None:
            raise ValueError("Invalid value for `dmr_impaired_poll`, must not be `None`")

        self._dmr_impaired_poll = dmr_impaired_poll

    @property
    def dmr_pounds(self):
        """Gets the dmr_pounds of this Cwa07.

        Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.

        :return: The dmr_pounds of this Cwa07.
        :rtype: str
        """
        return self._dmr_pounds

    @dmr_pounds.setter
    def dmr_pounds(self, dmr_pounds):
        """Sets the dmr_pounds of this Cwa07.

        Total pounds of pollutants discharged by the NPDES ID for the most recent complete calendar year.

        :param dmr_pounds: The dmr_pounds of this Cwa07.
        :type dmr_pounds: str
        """
        if dmr_pounds is None:
            raise ValueError("Invalid value for `dmr_pounds`, must not be `None`")

        self._dmr_pounds = dmr_pounds

    @property
    def dmr_twpe(self):
        """Gets the dmr_twpe of this Cwa07.

        Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.

        :return: The dmr_twpe of this Cwa07.
        :rtype: str
        """
        return self._dmr_twpe

    @dmr_twpe.setter
    def dmr_twpe(self, dmr_twpe):
        """Sets the dmr_twpe of this Cwa07.

        Total toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year. TWPE is the mass of a pollutant or chemical discharged that accounts for its relative toxicity.

        :param dmr_twpe: The dmr_twpe of this Cwa07.
        :type dmr_twpe: str
        """
        if dmr_twpe is None:
            raise ValueError("Invalid value for `dmr_twpe`, must not be `None`")

        self._dmr_twpe = dmr_twpe

    @property
    def dsch_to_ms4(self):
        """Gets the dsch_to_ms4 of this Cwa07.

        Indicates�if a facility discharges into a Municipal Separate Storm Sewer System (MS4).

        :return: The dsch_to_ms4 of this Cwa07.
        :rtype: str
        """
        return self._dsch_to_ms4

    @dsch_to_ms4.setter
    def dsch_to_ms4(self, dsch_to_ms4):
        """Sets the dsch_to_ms4 of this Cwa07.

        Indicates�if a facility discharges into a Municipal Separate Storm Sewer System (MS4).

        :param dsch_to_ms4: The dsch_to_ms4 of this Cwa07.
        :type dsch_to_ms4: str
        """
        if dsch_to_ms4 is None:
            raise ValueError("Invalid value for `dsch_to_ms4`, must not be `None`")

        self._dsch_to_ms4 = dsch_to_ms4

    @property
    def e90_exceeds1yr(self):
        """Gets the e90_exceeds1yr of this Cwa07.

        The number of E90 Exceedences in the last year.

        :return: The e90_exceeds1yr of this Cwa07.
        :rtype: str
        """
        return self._e90_exceeds1yr

    @e90_exceeds1yr.setter
    def e90_exceeds1yr(self, e90_exceeds1yr):
        """Sets the e90_exceeds1yr of this Cwa07.

        The number of E90 Exceedences in the last year.

        :param e90_exceeds1yr: The e90_exceeds1yr of this Cwa07.
        :type e90_exceeds1yr: str
        """
        if e90_exceeds1yr is None:
            raise ValueError("Invalid value for `e90_exceeds1yr`, must not be `None`")

        self._e90_exceeds1yr = e90_exceeds1yr

    @property
    def e90_exceeds2yr(self):
        """Gets the e90_exceeds2yr of this Cwa07.

        The number of E90 Exceedences in the last 2 years.

        :return: The e90_exceeds2yr of this Cwa07.
        :rtype: str
        """
        return self._e90_exceeds2yr

    @e90_exceeds2yr.setter
    def e90_exceeds2yr(self, e90_exceeds2yr):
        """Sets the e90_exceeds2yr of this Cwa07.

        The number of E90 Exceedences in the last 2 years.

        :param e90_exceeds2yr: The e90_exceeds2yr of this Cwa07.
        :type e90_exceeds2yr: str
        """
        if e90_exceeds2yr is None:
            raise ValueError("Invalid value for `e90_exceeds2yr`, must not be `None`")

        self._e90_exceeds2yr = e90_exceeds2yr

    @property
    def e90_exceeds3yr(self):
        """Gets the e90_exceeds3yr of this Cwa07.

        The number of E90 Exceedences in the last 3 years.

        :return: The e90_exceeds3yr of this Cwa07.
        :rtype: str
        """
        return self._e90_exceeds3yr

    @e90_exceeds3yr.setter
    def e90_exceeds3yr(self, e90_exceeds3yr):
        """Sets the e90_exceeds3yr of this Cwa07.

        The number of E90 Exceedences in the last 3 years.

        :param e90_exceeds3yr: The e90_exceeds3yr of this Cwa07.
        :type e90_exceeds3yr: str
        """
        if e90_exceeds3yr is None:
            raise ValueError("Invalid value for `e90_exceeds3yr`, must not be `None`")

        self._e90_exceeds3yr = e90_exceeds3yr

    @property
    def e90_exceeds4yr(self):
        """Gets the e90_exceeds4yr of this Cwa07.

        The number of E90 Exceedences in the last 4 years.

        :return: The e90_exceeds4yr of this Cwa07.
        :rtype: str
        """
        return self._e90_exceeds4yr

    @e90_exceeds4yr.setter
    def e90_exceeds4yr(self, e90_exceeds4yr):
        """Sets the e90_exceeds4yr of this Cwa07.

        The number of E90 Exceedences in the last 4 years.

        :param e90_exceeds4yr: The e90_exceeds4yr of this Cwa07.
        :type e90_exceeds4yr: str
        """
        if e90_exceeds4yr is None:
            raise ValueError("Invalid value for `e90_exceeds4yr`, must not be `None`")

        self._e90_exceeds4yr = e90_exceeds4yr

    @property
    def e90_exceeds5yr(self):
        """Gets the e90_exceeds5yr of this Cwa07.

        The number of E90 Exceedences in the last 5 years.

        :return: The e90_exceeds5yr of this Cwa07.
        :rtype: str
        """
        return self._e90_exceeds5yr

    @e90_exceeds5yr.setter
    def e90_exceeds5yr(self, e90_exceeds5yr):
        """Sets the e90_exceeds5yr of this Cwa07.

        The number of E90 Exceedences in the last 5 years.

        :param e90_exceeds5yr: The e90_exceeds5yr of this Cwa07.
        :type e90_exceeds5yr: str
        """
        if e90_exceeds5yr is None:
            raise ValueError("Invalid value for `e90_exceeds5yr`, must not be `None`")

        self._e90_exceeds5yr = e90_exceeds5yr

    @property
    def e90_pollutants1yr(self):
        """Gets the e90_pollutants1yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last year.

        :return: The e90_pollutants1yr of this Cwa07.
        :rtype: str
        """
        return self._e90_pollutants1yr

    @e90_pollutants1yr.setter
    def e90_pollutants1yr(self, e90_pollutants1yr):
        """Sets the e90_pollutants1yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last year.

        :param e90_pollutants1yr: The e90_pollutants1yr of this Cwa07.
        :type e90_pollutants1yr: str
        """
        if e90_pollutants1yr is None:
            raise ValueError("Invalid value for `e90_pollutants1yr`, must not be `None`")

        self._e90_pollutants1yr = e90_pollutants1yr

    @property
    def e90_pollutants2yr(self):
        """Gets the e90_pollutants2yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 2 years.

        :return: The e90_pollutants2yr of this Cwa07.
        :rtype: str
        """
        return self._e90_pollutants2yr

    @e90_pollutants2yr.setter
    def e90_pollutants2yr(self, e90_pollutants2yr):
        """Sets the e90_pollutants2yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 2 years.

        :param e90_pollutants2yr: The e90_pollutants2yr of this Cwa07.
        :type e90_pollutants2yr: str
        """
        if e90_pollutants2yr is None:
            raise ValueError("Invalid value for `e90_pollutants2yr`, must not be `None`")

        self._e90_pollutants2yr = e90_pollutants2yr

    @property
    def e90_pollutants3yr(self):
        """Gets the e90_pollutants3yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 3 years.

        :return: The e90_pollutants3yr of this Cwa07.
        :rtype: str
        """
        return self._e90_pollutants3yr

    @e90_pollutants3yr.setter
    def e90_pollutants3yr(self, e90_pollutants3yr):
        """Sets the e90_pollutants3yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 3 years.

        :param e90_pollutants3yr: The e90_pollutants3yr of this Cwa07.
        :type e90_pollutants3yr: str
        """
        if e90_pollutants3yr is None:
            raise ValueError("Invalid value for `e90_pollutants3yr`, must not be `None`")

        self._e90_pollutants3yr = e90_pollutants3yr

    @property
    def e90_pollutants4yr(self):
        """Gets the e90_pollutants4yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 4 years.

        :return: The e90_pollutants4yr of this Cwa07.
        :rtype: str
        """
        return self._e90_pollutants4yr

    @e90_pollutants4yr.setter
    def e90_pollutants4yr(self, e90_pollutants4yr):
        """Sets the e90_pollutants4yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 4 years.

        :param e90_pollutants4yr: The e90_pollutants4yr of this Cwa07.
        :type e90_pollutants4yr: str
        """
        if e90_pollutants4yr is None:
            raise ValueError("Invalid value for `e90_pollutants4yr`, must not be `None`")

        self._e90_pollutants4yr = e90_pollutants4yr

    @property
    def e90_pollutants5yr(self):
        """Gets the e90_pollutants5yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 5 years.

        :return: The e90_pollutants5yr of this Cwa07.
        :rtype: str
        """
        return self._e90_pollutants5yr

    @e90_pollutants5yr.setter
    def e90_pollutants5yr(self, e90_pollutants5yr):
        """Sets the e90_pollutants5yr of this Cwa07.

        The pollutants for the E90 Exceedences in the last 5 years.

        :param e90_pollutants5yr: The e90_pollutants5yr of this Cwa07.
        :type e90_pollutants5yr: str
        """
        if e90_pollutants5yr is None:
            raise ValueError("Invalid value for `e90_pollutants5yr`, must not be `None`")

        self._e90_pollutants5yr = e90_pollutants5yr

    @property
    def epa_system(self):
        """Gets the epa_system of this Cwa07.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Cwa07.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Cwa07.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Cwa07.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def ea5yr_flag(self):
        """Gets the ea5yr_flag of this Cwa07.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :return: The ea5yr_flag of this Cwa07.
        :rtype: str
        """
        return self._ea5yr_flag

    @ea5yr_flag.setter
    def ea5yr_flag(self, ea5yr_flag):
        """Sets the ea5yr_flag of this Cwa07.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :param ea5yr_flag: The ea5yr_flag of this Cwa07.
        :type ea5yr_flag: str
        """
        if ea5yr_flag is None:
            raise ValueError("Invalid value for `ea5yr_flag`, must not be `None`")

        self._ea5yr_flag = ea5yr_flag

    @property
    def eff_charts_flag(self):
        """Gets the eff_charts_flag of this Cwa07.


        :return: The eff_charts_flag of this Cwa07.
        :rtype: str
        """
        return self._eff_charts_flag

    @eff_charts_flag.setter
    def eff_charts_flag(self, eff_charts_flag):
        """Sets the eff_charts_flag of this Cwa07.


        :param eff_charts_flag: The eff_charts_flag of this Cwa07.
        :type eff_charts_flag: str
        """
        if eff_charts_flag is None:
            raise ValueError("Invalid value for `eff_charts_flag`, must not be `None`")

        self._eff_charts_flag = eff_charts_flag

    @property
    def eff_exceeds(self):
        """Gets the eff_exceeds of this Cwa07.

        The number of E90 Effluent Violations in the last 3 years.

        :return: The eff_exceeds of this Cwa07.
        :rtype: str
        """
        return self._eff_exceeds

    @eff_exceeds.setter
    def eff_exceeds(self, eff_exceeds):
        """Sets the eff_exceeds of this Cwa07.

        The number of E90 Effluent Violations in the last 3 years.

        :param eff_exceeds: The eff_exceeds of this Cwa07.
        :type eff_exceeds: str
        """
        if eff_exceeds is None:
            raise ValueError("Invalid value for `eff_exceeds`, must not be `None`")

        self._eff_exceeds = eff_exceeds

    @property
    def ejscreen_flag(self):
        """Gets the ejscreen_flag of this Cwa07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag of this Cwa07.
        :rtype: str
        """
        return self._ejscreen_flag

    @ejscreen_flag.setter
    def ejscreen_flag(self, ejscreen_flag):
        """Sets the ejscreen_flag of this Cwa07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag: The ejscreen_flag of this Cwa07.
        :type ejscreen_flag: str
        """
        if ejscreen_flag is None:
            raise ValueError("Invalid value for `ejscreen_flag`, must not be `None`")

        self._ejscreen_flag = ejscreen_flag

    @property
    def ejscreen_flag_us(self):
        """Gets the ejscreen_flag_us of this Cwa07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag_us of this Cwa07.
        :rtype: str
        """
        return self._ejscreen_flag_us

    @ejscreen_flag_us.setter
    def ejscreen_flag_us(self, ejscreen_flag_us):
        """Sets the ejscreen_flag_us of this Cwa07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag_us: The ejscreen_flag_us of this Cwa07.
        :type ejscreen_flag_us: str
        """
        if ejscreen_flag_us is None:
            raise ValueError("Invalid value for `ejscreen_flag_us`, must not be `None`")

        self._ejscreen_flag_us = ejscreen_flag_us

    @property
    def electr_rpt_waiver_eff_date(self):
        """Gets the electr_rpt_waiver_eff_date of this Cwa07.

        This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.

        :return: The electr_rpt_waiver_eff_date of this Cwa07.
        :rtype: str
        """
        return self._electr_rpt_waiver_eff_date

    @electr_rpt_waiver_eff_date.setter
    def electr_rpt_waiver_eff_date(self, electr_rpt_waiver_eff_date):
        """Sets the electr_rpt_waiver_eff_date of this Cwa07.

        This is the effective date for a  waiver from electronic reporting in compliance with this part. This data element should always be populated for a waiver.

        :param electr_rpt_waiver_eff_date: The electr_rpt_waiver_eff_date of this Cwa07.
        :type electr_rpt_waiver_eff_date: str
        """
        if electr_rpt_waiver_eff_date is None:
            raise ValueError("Invalid value for `electr_rpt_waiver_eff_date`, must not be `None`")

        self._electr_rpt_waiver_eff_date = electr_rpt_waiver_eff_date

    @property
    def electr_rpt_waiver_exp_date(self):
        """Gets the electr_rpt_waiver_exp_date of this Cwa07.

        This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :return: The electr_rpt_waiver_exp_date of this Cwa07.
        :rtype: str
        """
        return self._electr_rpt_waiver_exp_date

    @electr_rpt_waiver_exp_date.setter
    def electr_rpt_waiver_exp_date(self, electr_rpt_waiver_exp_date):
        """Sets the electr_rpt_waiver_exp_date of this Cwa07.

        This is the expiration date for a temporary waiver from electronic reporting in compliance with this part. This data element should be left blank if the permittee has a permanent waiver from electronic reporting or if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :param electr_rpt_waiver_exp_date: The electr_rpt_waiver_exp_date of this Cwa07.
        :type electr_rpt_waiver_exp_date: str
        """
        if electr_rpt_waiver_exp_date is None:
            raise ValueError("Invalid value for `electr_rpt_waiver_exp_date`, must not be `None`")

        self._electr_rpt_waiver_exp_date = electr_rpt_waiver_exp_date

    @property
    def electr_rpt_waiver_type_code(self):
        """Gets the electr_rpt_waiver_type_code of this Cwa07.

        The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :return: The electr_rpt_waiver_type_code of this Cwa07.
        :rtype: str
        """
        return self._electr_rpt_waiver_type_code

    @electr_rpt_waiver_type_code.setter
    def electr_rpt_waiver_type_code(self, electr_rpt_waiver_type_code):
        """Sets the electr_rpt_waiver_type_code of this Cwa07.

        The unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :param electr_rpt_waiver_type_code: The electr_rpt_waiver_type_code of this Cwa07.
        :type electr_rpt_waiver_type_code: str
        """
        if electr_rpt_waiver_type_code is None:
            raise ValueError("Invalid value for `electr_rpt_waiver_type_code`, must not be `None`")

        self._electr_rpt_waiver_type_code = electr_rpt_waiver_type_code

    @property
    def electr_rpt_waiver_type_desc(self):
        """Gets the electr_rpt_waiver_type_desc of this Cwa07.

        Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :return: The electr_rpt_waiver_type_desc of this Cwa07.
        :rtype: str
        """
        return self._electr_rpt_waiver_type_desc

    @electr_rpt_waiver_type_desc.setter
    def electr_rpt_waiver_type_desc(self, electr_rpt_waiver_type_desc):
        """Sets the electr_rpt_waiver_type_desc of this Cwa07.

        Description of the unique code that identifies whether the authorized NPDES program has granted the permittee a waiver from electronic reporting in compliance with this part (e.g,  temporary waiver, permanent waiver). This data element should be left blank if the permittee does not have a waiver from electronic reporting in compliance with this part.

        :param electr_rpt_waiver_type_desc: The electr_rpt_waiver_type_desc of this Cwa07.
        :type electr_rpt_waiver_type_desc: str
        """
        if electr_rpt_waiver_type_desc is None:
            raise ValueError("Invalid value for `electr_rpt_waiver_type_desc`, must not be `None`")

        self._electr_rpt_waiver_type_desc = electr_rpt_waiver_type_desc

    @property
    def electr_submission_type_code(self):
        """Gets the electr_submission_type_code of this Cwa07.

        This is the code indicating the means by which the data were submitted electronically.

        :return: The electr_submission_type_code of this Cwa07.
        :rtype: str
        """
        return self._electr_submission_type_code

    @electr_submission_type_code.setter
    def electr_submission_type_code(self, electr_submission_type_code):
        """Sets the electr_submission_type_code of this Cwa07.

        This is the code indicating the means by which the data were submitted electronically.

        :param electr_submission_type_code: The electr_submission_type_code of this Cwa07.
        :type electr_submission_type_code: str
        """
        if electr_submission_type_code is None:
            raise ValueError("Invalid value for `electr_submission_type_code`, must not be `None`")

        self._electr_submission_type_code = electr_submission_type_code

    @property
    def electr_submission_type_desc(self):
        """Gets the electr_submission_type_desc of this Cwa07.

        This is the description of the code indicating the means by which the data were submitted electronically.

        :return: The electr_submission_type_desc of this Cwa07.
        :rtype: str
        """
        return self._electr_submission_type_desc

    @electr_submission_type_desc.setter
    def electr_submission_type_desc(self, electr_submission_type_desc):
        """Sets the electr_submission_type_desc of this Cwa07.

        This is the description of the code indicating the means by which the data were submitted electronically.

        :param electr_submission_type_desc: The electr_submission_type_desc of this Cwa07.
        :type electr_submission_type_desc: str
        """
        if electr_submission_type_desc is None:
            raise ValueError("Invalid value for `electr_submission_type_desc`, must not be `None`")

        self._electr_submission_type_desc = electr_submission_type_desc

    @property
    def exposed_activity(self):
        """Gets the exposed_activity of this Cwa07.

        Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.

        :return: The exposed_activity of this Cwa07.
        :rtype: str
        """
        return self._exposed_activity

    @exposed_activity.setter
    def exposed_activity(self, exposed_activity):
        """Sets the exposed_activity of this Cwa07.

        Description of onsite industrial activities exposed to stormwater and potential spill and leak areas.

        :param exposed_activity: The exposed_activity of this Cwa07.
        :type exposed_activity: str
        """
        if exposed_activity is None:
            raise ValueError("Invalid value for `exposed_activity`, must not be `None`")

        self._exposed_activity = exposed_activity

    @property
    def fac_county_name(self):
        """Gets the fac_county_name of this Cwa07.

        The facility county name from EPA's Facility Registry System

        :return: The fac_county_name of this Cwa07.
        :rtype: str
        """
        return self._fac_county_name

    @fac_county_name.setter
    def fac_county_name(self, fac_county_name):
        """Sets the fac_county_name of this Cwa07.

        The facility county name from EPA's Facility Registry System

        :param fac_county_name: The fac_county_name of this Cwa07.
        :type fac_county_name: str
        """
        if fac_county_name is None:
            raise ValueError("Invalid value for `fac_county_name`, must not be `None`")

        self._fac_county_name = fac_county_name

    @property
    def fac_derived_huc(self):
        """Gets the fac_derived_huc of this Cwa07.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :return: The fac_derived_huc of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_huc

    @fac_derived_huc.setter
    def fac_derived_huc(self, fac_derived_huc):
        """Sets the fac_derived_huc of this Cwa07.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :param fac_derived_huc: The fac_derived_huc of this Cwa07.
        :type fac_derived_huc: str
        """
        if fac_derived_huc is None:
            raise ValueError("Invalid value for `fac_derived_huc`, must not be `None`")

        self._fac_derived_huc = fac_derived_huc

    @property
    def fac_derived_tr_ibes(self):
        """Gets the fac_derived_tr_ibes of this Cwa07.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :return: The fac_derived_tr_ibes of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_tr_ibes

    @fac_derived_tr_ibes.setter
    def fac_derived_tr_ibes(self, fac_derived_tr_ibes):
        """Sets the fac_derived_tr_ibes of this Cwa07.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Cwa07.
        :type fac_derived_tr_ibes: str
        """
        if fac_derived_tr_ibes is None:
            raise ValueError("Invalid value for `fac_derived_tr_ibes`, must not be `None`")

        self._fac_derived_tr_ibes = fac_derived_tr_ibes

    @property
    def fac_derived_wbd(self):
        """Gets the fac_derived_wbd of this Cwa07.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :return: The fac_derived_wbd of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_wbd

    @fac_derived_wbd.setter
    def fac_derived_wbd(self, fac_derived_wbd):
        """Sets the fac_derived_wbd of this Cwa07.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :param fac_derived_wbd: The fac_derived_wbd of this Cwa07.
        :type fac_derived_wbd: str
        """
        if fac_derived_wbd is None:
            raise ValueError("Invalid value for `fac_derived_wbd`, must not be `None`")

        self._fac_derived_wbd = fac_derived_wbd

    @property
    def fac_derived_wbdhu8(self):
        """Gets the fac_derived_wbdhu8 of this Cwa07.

        Spatially derived HUC based on the facility's geographic coordinates in FRS.

        :return: The fac_derived_wbdhu8 of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_wbdhu8

    @fac_derived_wbdhu8.setter
    def fac_derived_wbdhu8(self, fac_derived_wbdhu8):
        """Sets the fac_derived_wbdhu8 of this Cwa07.

        Spatially derived HUC based on the facility's geographic coordinates in FRS.

        :param fac_derived_wbdhu8: The fac_derived_wbdhu8 of this Cwa07.
        :type fac_derived_wbdhu8: str
        """
        if fac_derived_wbdhu8 is None:
            raise ValueError("Invalid value for `fac_derived_wbdhu8`, must not be `None`")

        self._fac_derived_wbdhu8 = fac_derived_wbdhu8

    @property
    def fac_derived_wbdhu8_name(self):
        """Gets the fac_derived_wbdhu8_name of this Cwa07.

        The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.

        :return: The fac_derived_wbdhu8_name of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_wbdhu8_name

    @fac_derived_wbdhu8_name.setter
    def fac_derived_wbdhu8_name(self, fac_derived_wbdhu8_name):
        """Sets the fac_derived_wbdhu8_name of this Cwa07.

        The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.

        :param fac_derived_wbdhu8_name: The fac_derived_wbdhu8_name of this Cwa07.
        :type fac_derived_wbdhu8_name: str
        """
        if fac_derived_wbdhu8_name is None:
            raise ValueError("Invalid value for `fac_derived_wbdhu8_name`, must not be `None`")

        self._fac_derived_wbdhu8_name = fac_derived_wbdhu8_name

    @property
    def fac_derived_wbd_name(self):
        """Gets the fac_derived_wbd_name of this Cwa07.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :return: The fac_derived_wbd_name of this Cwa07.
        :rtype: str
        """
        return self._fac_derived_wbd_name

    @fac_derived_wbd_name.setter
    def fac_derived_wbd_name(self, fac_derived_wbd_name):
        """Sets the fac_derived_wbd_name of this Cwa07.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Cwa07.
        :type fac_derived_wbd_name: str
        """
        if fac_derived_wbd_name is None:
            raise ValueError("Invalid value for `fac_derived_wbd_name`, must not be `None`")

        self._fac_derived_wbd_name = fac_derived_wbd_name

    @property
    def fac_fips_code(self):
        """Gets the fac_fips_code of this Cwa07.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :return: The fac_fips_code of this Cwa07.
        :rtype: str
        """
        return self._fac_fips_code

    @fac_fips_code.setter
    def fac_fips_code(self, fac_fips_code):
        """Sets the fac_fips_code of this Cwa07.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :param fac_fips_code: The fac_fips_code of this Cwa07.
        :type fac_fips_code: str
        """
        if fac_fips_code is None:
            raise ValueError("Invalid value for `fac_fips_code`, must not be `None`")

        self._fac_fips_code = fac_fips_code

    @property
    def fac_federal_agency_code(self):
        """Gets the fac_federal_agency_code of this Cwa07.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :return: The fac_federal_agency_code of this Cwa07.
        :rtype: str
        """
        return self._fac_federal_agency_code

    @fac_federal_agency_code.setter
    def fac_federal_agency_code(self, fac_federal_agency_code):
        """Sets the fac_federal_agency_code of this Cwa07.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :param fac_federal_agency_code: The fac_federal_agency_code of this Cwa07.
        :type fac_federal_agency_code: str
        """
        if fac_federal_agency_code is None:
            raise ValueError("Invalid value for `fac_federal_agency_code`, must not be `None`")

        self._fac_federal_agency_code = fac_federal_agency_code

    @property
    def fac_federal_agency_name(self):
        """Gets the fac_federal_agency_name of this Cwa07.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :return: The fac_federal_agency_name of this Cwa07.
        :rtype: str
        """
        return self._fac_federal_agency_name

    @fac_federal_agency_name.setter
    def fac_federal_agency_name(self, fac_federal_agency_name):
        """Sets the fac_federal_agency_name of this Cwa07.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :param fac_federal_agency_name: The fac_federal_agency_name of this Cwa07.
        :type fac_federal_agency_name: str
        """
        if fac_federal_agency_name is None:
            raise ValueError("Invalid value for `fac_federal_agency_name`, must not be `None`")

        self._fac_federal_agency_name = fac_federal_agency_name

    @property
    def fac_indian_cntry_flg(self):
        """Gets the fac_indian_cntry_flg of this Cwa07.

        Flag showing Y/N whether the facility is located in Indian Country.

        :return: The fac_indian_cntry_flg of this Cwa07.
        :rtype: str
        """
        return self._fac_indian_cntry_flg

    @fac_indian_cntry_flg.setter
    def fac_indian_cntry_flg(self, fac_indian_cntry_flg):
        """Sets the fac_indian_cntry_flg of this Cwa07.

        Flag showing Y/N whether the facility is located in Indian Country.

        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Cwa07.
        :type fac_indian_cntry_flg: str
        """
        if fac_indian_cntry_flg is None:
            raise ValueError("Invalid value for `fac_indian_cntry_flg`, must not be `None`")

        self._fac_indian_cntry_flg = fac_indian_cntry_flg

    @property
    def fac_indian_spatial_flg(self):
        """Gets the fac_indian_spatial_flg of this Cwa07.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :return: The fac_indian_spatial_flg of this Cwa07.
        :rtype: str
        """
        return self._fac_indian_spatial_flg

    @fac_indian_spatial_flg.setter
    def fac_indian_spatial_flg(self, fac_indian_spatial_flg):
        """Sets the fac_indian_spatial_flg of this Cwa07.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Cwa07.
        :type fac_indian_spatial_flg: str
        """
        if fac_indian_spatial_flg is None:
            raise ValueError("Invalid value for `fac_indian_spatial_flg`, must not be `None`")

        self._fac_indian_spatial_flg = fac_indian_spatial_flg

    @property
    def fac_lat(self):
        """Gets the fac_lat of this Cwa07.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_lat of this Cwa07.
        :rtype: str
        """
        return self._fac_lat

    @fac_lat.setter
    def fac_lat(self, fac_lat):
        """Sets the fac_lat of this Cwa07.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_lat: The fac_lat of this Cwa07.
        :type fac_lat: str
        """
        if fac_lat is None:
            raise ValueError("Invalid value for `fac_lat`, must not be `None`")

        self._fac_lat = fac_lat

    @property
    def fac_long(self):
        """Gets the fac_long of this Cwa07.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_long of this Cwa07.
        :rtype: str
        """
        return self._fac_long

    @fac_long.setter
    def fac_long(self, fac_long):
        """Sets the fac_long of this Cwa07.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_long: The fac_long of this Cwa07.
        :type fac_long: str
        """
        if fac_long is None:
            raise ValueError("Invalid value for `fac_long`, must not be `None`")

        self._fac_long = fac_long

    @property
    def fac_map_flg(self):
        """Gets the fac_map_flg of this Cwa07.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :return: The fac_map_flg of this Cwa07.
        :rtype: str
        """
        return self._fac_map_flg

    @fac_map_flg.setter
    def fac_map_flg(self, fac_map_flg):
        """Sets the fac_map_flg of this Cwa07.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :param fac_map_flg: The fac_map_flg of this Cwa07.
        :type fac_map_flg: str
        """
        if fac_map_flg is None:
            raise ValueError("Invalid value for `fac_map_flg`, must not be `None`")

        self._fac_map_flg = fac_map_flg

    @property
    def fac_map_icon(self):
        """Gets the fac_map_icon of this Cwa07.

        The default map icon image file calculated for the facility by the ECHO program.

        :return: The fac_map_icon of this Cwa07.
        :rtype: str
        """
        return self._fac_map_icon

    @fac_map_icon.setter
    def fac_map_icon(self, fac_map_icon):
        """Sets the fac_map_icon of this Cwa07.

        The default map icon image file calculated for the facility by the ECHO program.

        :param fac_map_icon: The fac_map_icon of this Cwa07.
        :type fac_map_icon: str
        """
        if fac_map_icon is None:
            raise ValueError("Invalid value for `fac_map_icon`, must not be `None`")

        self._fac_map_icon = fac_map_icon

    @property
    def fac_percent_minority(self):
        """Gets the fac_percent_minority of this Cwa07.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :return: The fac_percent_minority of this Cwa07.
        :rtype: str
        """
        return self._fac_percent_minority

    @fac_percent_minority.setter
    def fac_percent_minority(self, fac_percent_minority):
        """Sets the fac_percent_minority of this Cwa07.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :param fac_percent_minority: The fac_percent_minority of this Cwa07.
        :type fac_percent_minority: str
        """
        if fac_percent_minority is None:
            raise ValueError("Invalid value for `fac_percent_minority`, must not be `None`")

        self._fac_percent_minority = fac_percent_minority

    @property
    def fac_pop_den(self):
        """Gets the fac_pop_den of this Cwa07.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).

        :return: The fac_pop_den of this Cwa07.
        :rtype: str
        """
        return self._fac_pop_den

    @fac_pop_den.setter
    def fac_pop_den(self, fac_pop_den):
        """Sets the fac_pop_den of this Cwa07.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).

        :param fac_pop_den: The fac_pop_den of this Cwa07.
        :type fac_pop_den: str
        """
        if fac_pop_den is None:
            raise ValueError("Invalid value for `fac_pop_den`, must not be `None`")

        self._fac_pop_den = fac_pop_den

    @property
    def fac_std_county_name(self):
        """Gets the fac_std_county_name of this Cwa07.

        The standardized  facility county name from EPA's Facility Registry System

        :return: The fac_std_county_name of this Cwa07.
        :rtype: str
        """
        return self._fac_std_county_name

    @fac_std_county_name.setter
    def fac_std_county_name(self, fac_std_county_name):
        """Sets the fac_std_county_name of this Cwa07.

        The standardized  facility county name from EPA's Facility Registry System

        :param fac_std_county_name: The fac_std_county_name of this Cwa07.
        :type fac_std_county_name: str
        """
        if fac_std_county_name is None:
            raise ValueError("Invalid value for `fac_std_county_name`, must not be `None`")

        self._fac_std_county_name = fac_std_county_name

    @property
    def fac_tri_potw_trans(self):
        """Gets the fac_tri_potw_trans of this Cwa07.

        POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.

        :return: The fac_tri_potw_trans of this Cwa07.
        :rtype: str
        """
        return self._fac_tri_potw_trans

    @fac_tri_potw_trans.setter
    def fac_tri_potw_trans(self, fac_tri_potw_trans):
        """Sets the fac_tri_potw_trans of this Cwa07.

        POTW transfer information from the Toxics Release Inventory (TRI) represents the amount of toxic chemicals transferred to a Publicly Operated Treatment Works (POTW), in pounds, for the most recent reporting year.

        :param fac_tri_potw_trans: The fac_tri_potw_trans of this Cwa07.
        :type fac_tri_potw_trans: str
        """
        if fac_tri_potw_trans is None:
            raise ValueError("Invalid value for `fac_tri_potw_trans`, must not be `None`")

        self._fac_tri_potw_trans = fac_tri_potw_trans

    @property
    def fac_tri_reporter(self):
        """Gets the fac_tri_reporter of this Cwa07.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :return: The fac_tri_reporter of this Cwa07.
        :rtype: str
        """
        return self._fac_tri_reporter

    @fac_tri_reporter.setter
    def fac_tri_reporter(self, fac_tri_reporter):
        """Sets the fac_tri_reporter of this Cwa07.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :param fac_tri_reporter: The fac_tri_reporter of this Cwa07.
        :type fac_tri_reporter: str
        """
        if fac_tri_reporter is None:
            raise ValueError("Invalid value for `fac_tri_reporter`, must not be `None`")

        self._fac_tri_reporter = fac_tri_reporter

    @property
    def fac_trisw_rel(self):
        """Gets the fac_trisw_rel of this Cwa07.

        Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.

        :return: The fac_trisw_rel of this Cwa07.
        :rtype: str
        """
        return self._fac_trisw_rel

    @fac_trisw_rel.setter
    def fac_trisw_rel(self, fac_trisw_rel):
        """Sets the fac_trisw_rel of this Cwa07.

        Chemical surface water release information from the Toxics Release Inventory (TRI) represents the total chemical releases discharged to surface water, in pounds, for the most recent reporting year.

        :param fac_trisw_rel: The fac_trisw_rel of this Cwa07.
        :type fac_trisw_rel: str
        """
        if fac_trisw_rel is None:
            raise ValueError("Invalid value for `fac_trisw_rel`, must not be `None`")

        self._fac_trisw_rel = fac_trisw_rel

    @property
    def fac_us_mex_border_flg(self):
        """Gets the fac_us_mex_border_flg of this Cwa07.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :return: The fac_us_mex_border_flg of this Cwa07.
        :rtype: str
        """
        return self._fac_us_mex_border_flg

    @fac_us_mex_border_flg.setter
    def fac_us_mex_border_flg(self, fac_us_mex_border_flg):
        """Sets the fac_us_mex_border_flg of this Cwa07.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Cwa07.
        :type fac_us_mex_border_flg: str
        """
        if fac_us_mex_border_flg is None:
            raise ValueError("Invalid value for `fac_us_mex_border_flg`, must not be `None`")

        self._fac_us_mex_border_flg = fac_us_mex_border_flg

    @property
    def historic_criterion_code(self):
        """Gets the historic_criterion_code of this Cwa07.

        Indicates the eligibility criteria for historic properties preservation.

        :return: The historic_criterion_code of this Cwa07.
        :rtype: str
        """
        return self._historic_criterion_code

    @historic_criterion_code.setter
    def historic_criterion_code(self, historic_criterion_code):
        """Sets the historic_criterion_code of this Cwa07.

        Indicates the eligibility criteria for historic properties preservation.

        :param historic_criterion_code: The historic_criterion_code of this Cwa07.
        :type historic_criterion_code: str
        """
        if historic_criterion_code is None:
            raise ValueError("Invalid value for `historic_criterion_code`, must not be `None`")

        self._historic_criterion_code = historic_criterion_code

    @property
    def indsw_flag(self):
        """Gets the indsw_flag of this Cwa07.

        A value of Y indicates an Industrial Stormwater Permit.

        :return: The indsw_flag of this Cwa07.
        :rtype: str
        """
        return self._indsw_flag

    @indsw_flag.setter
    def indsw_flag(self, indsw_flag):
        """Sets the indsw_flag of this Cwa07.

        A value of Y indicates an Industrial Stormwater Permit.

        :param indsw_flag: The indsw_flag of this Cwa07.
        :type indsw_flag: str
        """
        if indsw_flag is None:
            raise ValueError("Invalid value for `indsw_flag`, must not be `None`")

        self._indsw_flag = indsw_flag

    @property
    def infea5yr_flag(self):
        """Gets the infea5yr_flag of this Cwa07.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :return: The infea5yr_flag of this Cwa07.
        :rtype: str
        """
        return self._infea5yr_flag

    @infea5yr_flag.setter
    def infea5yr_flag(self, infea5yr_flag):
        """Sets the infea5yr_flag of this Cwa07.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :param infea5yr_flag: The infea5yr_flag of this Cwa07.
        :type infea5yr_flag: str
        """
        if infea5yr_flag is None:
            raise ValueError("Invalid value for `infea5yr_flag`, must not be `None`")

        self._infea5yr_flag = infea5yr_flag

    @property
    def insp5yr_flag(self):
        """Gets the insp5yr_flag of this Cwa07.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :return: The insp5yr_flag of this Cwa07.
        :rtype: str
        """
        return self._insp5yr_flag

    @insp5yr_flag.setter
    def insp5yr_flag(self, insp5yr_flag):
        """Sets the insp5yr_flag of this Cwa07.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :param insp5yr_flag: The insp5yr_flag of this Cwa07.
        :type insp5yr_flag: str
        """
        if insp5yr_flag is None:
            raise ValueError("Invalid value for `insp5yr_flag`, must not be `None`")

        self._insp5yr_flag = insp5yr_flag

    @property
    def insp_def5yr_cnt(self):
        """Gets the insp_def5yr_cnt of this Cwa07.


        :return: The insp_def5yr_cnt of this Cwa07.
        :rtype: str
        """
        return self._insp_def5yr_cnt

    @insp_def5yr_cnt.setter
    def insp_def5yr_cnt(self, insp_def5yr_cnt):
        """Sets the insp_def5yr_cnt of this Cwa07.


        :param insp_def5yr_cnt: The insp_def5yr_cnt of this Cwa07.
        :type insp_def5yr_cnt: str
        """
        if insp_def5yr_cnt is None:
            raise ValueError("Invalid value for `insp_def5yr_cnt`, must not be `None`")

        self._insp_def5yr_cnt = insp_def5yr_cnt

    @property
    def issuing_agency(self):
        """Gets the issuing_agency of this Cwa07.

        This is the name of the organization issuing or granting a permit.

        :return: The issuing_agency of this Cwa07.
        :rtype: str
        """
        return self._issuing_agency

    @issuing_agency.setter
    def issuing_agency(self, issuing_agency):
        """Sets the issuing_agency of this Cwa07.

        This is the name of the organization issuing or granting a permit.

        :param issuing_agency: The issuing_agency of this Cwa07.
        :type issuing_agency: str
        """
        if issuing_agency is None:
            raise ValueError("Invalid value for `issuing_agency`, must not be `None`")

        self._issuing_agency = issuing_agency

    @property
    def last_dmr_value_rcvd_date(self):
        """Gets the last_dmr_value_rcvd_date of this Cwa07.

        The latest date that a Discharge Monitoring Report was received by the State or EPA.

        :return: The last_dmr_value_rcvd_date of this Cwa07.
        :rtype: str
        """
        return self._last_dmr_value_rcvd_date

    @last_dmr_value_rcvd_date.setter
    def last_dmr_value_rcvd_date(self, last_dmr_value_rcvd_date):
        """Sets the last_dmr_value_rcvd_date of this Cwa07.

        The latest date that a Discharge Monitoring Report was received by the State or EPA.

        :param last_dmr_value_rcvd_date: The last_dmr_value_rcvd_date of this Cwa07.
        :type last_dmr_value_rcvd_date: str
        """
        if last_dmr_value_rcvd_date is None:
            raise ValueError("Invalid value for `last_dmr_value_rcvd_date`, must not be `None`")

        self._last_dmr_value_rcvd_date = last_dmr_value_rcvd_date

    @property
    def lim_pollutant(self):
        """Gets the lim_pollutant of this Cwa07.

        The list of pollutants with enforceable (i.e., numeric limits or monitoring only) and/or benchmark limits in the current version of a NPDES permit.

        :return: The lim_pollutant of this Cwa07.
        :rtype: str
        """
        return self._lim_pollutant

    @lim_pollutant.setter
    def lim_pollutant(self, lim_pollutant):
        """Sets the lim_pollutant of this Cwa07.

        The list of pollutants with enforceable (i.e., numeric limits or monitoring only) and/or benchmark limits in the current version of a NPDES permit.

        :param lim_pollutant: The lim_pollutant of this Cwa07.
        :type lim_pollutant: str
        """
        if lim_pollutant is None:
            raise ValueError("Invalid value for `lim_pollutant`, must not be `None`")

        self._lim_pollutant = lim_pollutant

    @property
    def lower48(self):
        """Gets the lower48 of this Cwa07.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :return: The lower48 of this Cwa07.
        :rtype: str
        """
        return self._lower48

    @lower48.setter
    def lower48(self, lower48):
        """Sets the lower48 of this Cwa07.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :param lower48: The lower48 of this Cwa07.
        :type lower48: str
        """
        if lower48 is None:
            raise ValueError("Invalid value for `lower48`, must not be `None`")

        self._lower48 = lower48

    @property
    def map(self):
        """Gets the map of this Cwa07.

        No Longer Used.

        :return: The map of this Cwa07.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Cwa07.

        No Longer Used.

        :param map: The map of this Cwa07.
        :type map: str
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def master_external_permit_nmbr(self):
        """Gets the master_external_permit_nmbr of this Cwa07.

        This is the unique identifier for the Master General Permit for a General Permit Covered Facility.

        :return: The master_external_permit_nmbr of this Cwa07.
        :rtype: str
        """
        return self._master_external_permit_nmbr

    @master_external_permit_nmbr.setter
    def master_external_permit_nmbr(self, master_external_permit_nmbr):
        """Sets the master_external_permit_nmbr of this Cwa07.

        This is the unique identifier for the Master General Permit for a General Permit Covered Facility.

        :param master_external_permit_nmbr: The master_external_permit_nmbr of this Cwa07.
        :type master_external_permit_nmbr: str
        """
        if master_external_permit_nmbr is None:
            raise ValueError("Invalid value for `master_external_permit_nmbr`, must not be `None`")

        self._master_external_permit_nmbr = master_external_permit_nmbr

    @property
    def max_pctile_us(self):
        """Gets the max_pctile_us of this Cwa07.

        The maximum percentile from all individual EJSCREEN indicators.

        :return: The max_pctile_us of this Cwa07.
        :rtype: str
        """
        return self._max_pctile_us

    @max_pctile_us.setter
    def max_pctile_us(self, max_pctile_us):
        """Sets the max_pctile_us of this Cwa07.

        The maximum percentile from all individual EJSCREEN indicators.

        :param max_pctile_us: The max_pctile_us of this Cwa07.
        :type max_pctile_us: str
        """
        if max_pctile_us is None:
            raise ValueError("Invalid value for `max_pctile_us`, must not be `None`")

        self._max_pctile_us = max_pctile_us

    @property
    def max_score(self):
        """Gets the max_score of this Cwa07.

        A sorting score for internal use.

        :return: The max_score of this Cwa07.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Cwa07.

        A sorting score for internal use.

        :param max_score: The max_score of this Cwa07.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def miss_dmr_qtrs(self):
        """Gets the miss_dmr_qtrs of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which EPA's data system was not able to determine the facility-level compliance status.

        :return: The miss_dmr_qtrs of this Cwa07.
        :rtype: str
        """
        return self._miss_dmr_qtrs

    @miss_dmr_qtrs.setter
    def miss_dmr_qtrs(self, miss_dmr_qtrs):
        """Sets the miss_dmr_qtrs of this Cwa07.

        Count of the number of quarters, out of the last twelve quarters, in which EPA's data system was not able to determine the facility-level compliance status.

        :param miss_dmr_qtrs: The miss_dmr_qtrs of this Cwa07.
        :type miss_dmr_qtrs: str
        """
        if miss_dmr_qtrs is None:
            raise ValueError("Invalid value for `miss_dmr_qtrs`, must not be `None`")

        self._miss_dmr_qtrs = miss_dmr_qtrs

    @property
    def msgp_corrective_action_smmry(self):
        """Gets the msgp_corrective_action_smmry of this Cwa07.

        Summary of the corrective action documentation (part 4.3 of the permit) during the MSGP annual report year.

        :return: The msgp_corrective_action_smmry of this Cwa07.
        :rtype: str
        """
        return self._msgp_corrective_action_smmry

    @msgp_corrective_action_smmry.setter
    def msgp_corrective_action_smmry(self, msgp_corrective_action_smmry):
        """Sets the msgp_corrective_action_smmry of this Cwa07.

        Summary of the corrective action documentation (part 4.3 of the permit) during the MSGP annual report year.

        :param msgp_corrective_action_smmry: The msgp_corrective_action_smmry of this Cwa07.
        :type msgp_corrective_action_smmry: str
        """
        if msgp_corrective_action_smmry is None:
            raise ValueError("Invalid value for `msgp_corrective_action_smmry`, must not be `None`")

        self._msgp_corrective_action_smmry = msgp_corrective_action_smmry

    @property
    def msgp_facility_inspctn_smmry(self):
        """Gets the msgp_facility_inspctn_smmry of this Cwa07.

        Summary of the quarterly facility inspection documentation (part 3.1 of the permit) during the MSGP annual report year.

        :return: The msgp_facility_inspctn_smmry of this Cwa07.
        :rtype: str
        """
        return self._msgp_facility_inspctn_smmry

    @msgp_facility_inspctn_smmry.setter
    def msgp_facility_inspctn_smmry(self, msgp_facility_inspctn_smmry):
        """Sets the msgp_facility_inspctn_smmry of this Cwa07.

        Summary of the quarterly facility inspection documentation (part 3.1 of the permit) during the MSGP annual report year.

        :param msgp_facility_inspctn_smmry: The msgp_facility_inspctn_smmry of this Cwa07.
        :type msgp_facility_inspctn_smmry: str
        """
        if msgp_facility_inspctn_smmry is None:
            raise ValueError("Invalid value for `msgp_facility_inspctn_smmry`, must not be `None`")

        self._msgp_facility_inspctn_smmry = msgp_facility_inspctn_smmry

    @property
    def msgp_last_report_year(self):
        """Gets the msgp_last_report_year of this Cwa07.

        The calendar year of the latest MSGP annual report submitted by the permitted facility.

        :return: The msgp_last_report_year of this Cwa07.
        :rtype: str
        """
        return self._msgp_last_report_year

    @msgp_last_report_year.setter
    def msgp_last_report_year(self, msgp_last_report_year):
        """Sets the msgp_last_report_year of this Cwa07.

        The calendar year of the latest MSGP annual report submitted by the permitted facility.

        :param msgp_last_report_year: The msgp_last_report_year of this Cwa07.
        :type msgp_last_report_year: str
        """
        if msgp_last_report_year is None:
            raise ValueError("Invalid value for `msgp_last_report_year`, must not be `None`")

        self._msgp_last_report_year = msgp_last_report_year

    @property
    def msgp_no_further_rdctn_rtnle(self):
        """Gets the msgp_no_further_rdctn_rtnle of this Cwa07.

        Description of rationale for why no further reductions are achievable (part 6.2.1.2 of the permit) during the MSGP annual report year.

        :return: The msgp_no_further_rdctn_rtnle of this Cwa07.
        :rtype: str
        """
        return self._msgp_no_further_rdctn_rtnle

    @msgp_no_further_rdctn_rtnle.setter
    def msgp_no_further_rdctn_rtnle(self, msgp_no_further_rdctn_rtnle):
        """Sets the msgp_no_further_rdctn_rtnle of this Cwa07.

        Description of rationale for why no further reductions are achievable (part 6.2.1.2 of the permit) during the MSGP annual report year.

        :param msgp_no_further_rdctn_rtnle: The msgp_no_further_rdctn_rtnle of this Cwa07.
        :type msgp_no_further_rdctn_rtnle: str
        """
        if msgp_no_further_rdctn_rtnle is None:
            raise ValueError("Invalid value for `msgp_no_further_rdctn_rtnle`, must not be `None`")

        self._msgp_no_further_rdctn_rtnle = msgp_no_further_rdctn_rtnle

    @property
    def msgp_permit_type(self):
        """Gets the msgp_permit_type of this Cwa07.

        The Industrial stormwater permit type.

        :return: The msgp_permit_type of this Cwa07.
        :rtype: str
        """
        return self._msgp_permit_type

    @msgp_permit_type.setter
    def msgp_permit_type(self, msgp_permit_type):
        """Sets the msgp_permit_type of this Cwa07.

        The Industrial stormwater permit type.

        :param msgp_permit_type: The msgp_permit_type of this Cwa07.
        :type msgp_permit_type: str
        """
        if msgp_permit_type is None:
            raise ValueError("Invalid value for `msgp_permit_type`, must not be `None`")

        self._msgp_permit_type = msgp_permit_type

    @property
    def msgp_visual_assessment_smmry(self):
        """Gets the msgp_visual_assessment_smmry of this Cwa07.

        Summary of the quarterly visual assessment documentation (part 3.3 of the permit) during the MSGP annual report year.

        :return: The msgp_visual_assessment_smmry of this Cwa07.
        :rtype: str
        """
        return self._msgp_visual_assessment_smmry

    @msgp_visual_assessment_smmry.setter
    def msgp_visual_assessment_smmry(self, msgp_visual_assessment_smmry):
        """Sets the msgp_visual_assessment_smmry of this Cwa07.

        Summary of the quarterly visual assessment documentation (part 3.3 of the permit) during the MSGP annual report year.

        :param msgp_visual_assessment_smmry: The msgp_visual_assessment_smmry of this Cwa07.
        :type msgp_visual_assessment_smmry: str
        """
        if msgp_visual_assessment_smmry is None:
            raise ValueError("Invalid value for `msgp_visual_assessment_smmry`, must not be `None`")

        self._msgp_visual_assessment_smmry = msgp_visual_assessment_smmry

    @property
    def npdes_data_groups(self):
        """Gets the npdes_data_groups of this Cwa07.

        This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.

        :return: The npdes_data_groups of this Cwa07.
        :rtype: str
        """
        return self._npdes_data_groups

    @npdes_data_groups.setter
    def npdes_data_groups(self, npdes_data_groups):
        """Sets the npdes_data_groups of this Cwa07.

        This is the code indicating the NPDES eReporting Rule Data Group that applies to the data.

        :param npdes_data_groups: The npdes_data_groups of this Cwa07.
        :type npdes_data_groups: str
        """
        if npdes_data_groups is None:
            raise ValueError("Invalid value for `npdes_data_groups`, must not be `None`")

        self._npdes_data_groups = npdes_data_groups

    @property
    def npdes_data_groups_descs(self):
        """Gets the npdes_data_groups_descs of this Cwa07.

        Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.

        :return: The npdes_data_groups_descs of this Cwa07.
        :rtype: str
        """
        return self._npdes_data_groups_descs

    @npdes_data_groups_descs.setter
    def npdes_data_groups_descs(self, npdes_data_groups_descs):
        """Sets the npdes_data_groups_descs of this Cwa07.

        Description for each NPDES Data Group eReporting rule code related to the current NPDES permit.

        :param npdes_data_groups_descs: The npdes_data_groups_descs of this Cwa07.
        :type npdes_data_groups_descs: str
        """
        if npdes_data_groups_descs is None:
            raise ValueError("Invalid value for `npdes_data_groups_descs`, must not be `None`")

        self._npdes_data_groups_descs = npdes_data_groups_descs

    @property
    def npdesids(self):
        """Gets the npdesids of this Cwa07.

        Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)

        :return: The npdesids of this Cwa07.
        :rtype: str
        """
        return self._npdesids

    @npdesids.setter
    def npdesids(self, npdesids):
        """Sets the npdesids of this Cwa07.

        Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)

        :param npdesids: The npdesids of this Cwa07.
        :type npdesids: str
        """
        if npdesids is None:
            raise ValueError("Invalid value for `npdesids`, must not be `None`")

        self._npdesids = npdesids

    @property
    def object_id(self):
        """Gets the object_id of this Cwa07.

        Sequential number assigned to each facility or cluster returned.

        :return: The object_id of this Cwa07.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Cwa07.

        Sequential number assigned to each facility or cluster returned.

        :param object_id: The object_id of this Cwa07.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def other_permit_ids(self):
        """Gets the other_permit_ids of this Cwa07.


        :return: The other_permit_ids of this Cwa07.
        :rtype: str
        """
        return self._other_permit_ids

    @other_permit_ids.setter
    def other_permit_ids(self, other_permit_ids):
        """Sets the other_permit_ids of this Cwa07.


        :param other_permit_ids: The other_permit_ids of this Cwa07.
        :type other_permit_ids: str
        """
        if other_permit_ids is None:
            raise ValueError("Invalid value for `other_permit_ids`, must not be `None`")

        self._other_permit_ids = other_permit_ids

    @property
    def over80_count_us(self):
        """Gets the over80_count_us of this Cwa07.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :return: The over80_count_us of this Cwa07.
        :rtype: str
        """
        return self._over80_count_us

    @over80_count_us.setter
    def over80_count_us(self, over80_count_us):
        """Sets the over80_count_us of this Cwa07.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :param over80_count_us: The over80_count_us of this Cwa07.
        :type over80_count_us: str
        """
        if over80_count_us is None:
            raise ValueError("Invalid value for `over80_count_us`, must not be `None`")

        self._over80_count_us = over80_count_us

    @property
    def past_cal_yr_average_flow(self):
        """Gets the past_cal_yr_average_flow of this Cwa07.

        The past calendar year average flow in Million Gallons a Day (MGD).

        :return: The past_cal_yr_average_flow of this Cwa07.
        :rtype: str
        """
        return self._past_cal_yr_average_flow

    @past_cal_yr_average_flow.setter
    def past_cal_yr_average_flow(self, past_cal_yr_average_flow):
        """Sets the past_cal_yr_average_flow of this Cwa07.

        The past calendar year average flow in Million Gallons a Day (MGD).

        :param past_cal_yr_average_flow: The past_cal_yr_average_flow of this Cwa07.
        :type past_cal_yr_average_flow: str
        """
        if past_cal_yr_average_flow is None:
            raise ValueError("Invalid value for `past_cal_yr_average_flow`, must not be `None`")

        self._past_cal_yr_average_flow = past_cal_yr_average_flow

    @property
    def past_cal_yr_conv_pol_ovr_lmt(self):
        """Gets the past_cal_yr_conv_pol_ovr_lmt of this Cwa07.

        Total load over limit of conventional pollutant pounds equivalent discharged by the NPDES ID for the most recent complete calendar year.

        :return: The past_cal_yr_conv_pol_ovr_lmt of this Cwa07.
        :rtype: str
        """
        return self._past_cal_yr_conv_pol_ovr_lmt

    @past_cal_yr_conv_pol_ovr_lmt.setter
    def past_cal_yr_conv_pol_ovr_lmt(self, past_cal_yr_conv_pol_ovr_lmt):
        """Sets the past_cal_yr_conv_pol_ovr_lmt of this Cwa07.

        Total load over limit of conventional pollutant pounds equivalent discharged by the NPDES ID for the most recent complete calendar year.

        :param past_cal_yr_conv_pol_ovr_lmt: The past_cal_yr_conv_pol_ovr_lmt of this Cwa07.
        :type past_cal_yr_conv_pol_ovr_lmt: str
        """
        if past_cal_yr_conv_pol_ovr_lmt is None:
            raise ValueError("Invalid value for `past_cal_yr_conv_pol_ovr_lmt`, must not be `None`")

        self._past_cal_yr_conv_pol_ovr_lmt = past_cal_yr_conv_pol_ovr_lmt

    @property
    def past_cal_yr_conv_pollutants(self):
        """Gets the past_cal_yr_conv_pollutants of this Cwa07.

        Total pounds of conventional pollutants discharged by the NPDES ID for the most recent complete calendar year.

        :return: The past_cal_yr_conv_pollutants of this Cwa07.
        :rtype: str
        """
        return self._past_cal_yr_conv_pollutants

    @past_cal_yr_conv_pollutants.setter
    def past_cal_yr_conv_pollutants(self, past_cal_yr_conv_pollutants):
        """Sets the past_cal_yr_conv_pollutants of this Cwa07.

        Total pounds of conventional pollutants discharged by the NPDES ID for the most recent complete calendar year.

        :param past_cal_yr_conv_pollutants: The past_cal_yr_conv_pollutants of this Cwa07.
        :type past_cal_yr_conv_pollutants: str
        """
        if past_cal_yr_conv_pollutants is None:
            raise ValueError("Invalid value for `past_cal_yr_conv_pollutants`, must not be `None`")

        self._past_cal_yr_conv_pollutants = past_cal_yr_conv_pollutants

    @property
    def past_cal_yr_toxic_pol_ovr_lmt(self):
        """Gets the past_cal_yr_toxic_pol_ovr_lmt of this Cwa07.

        Total load over limit of toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year.

        :return: The past_cal_yr_toxic_pol_ovr_lmt of this Cwa07.
        :rtype: str
        """
        return self._past_cal_yr_toxic_pol_ovr_lmt

    @past_cal_yr_toxic_pol_ovr_lmt.setter
    def past_cal_yr_toxic_pol_ovr_lmt(self, past_cal_yr_toxic_pol_ovr_lmt):
        """Sets the past_cal_yr_toxic_pol_ovr_lmt of this Cwa07.

        Total load over limit of toxic-weighted pounds equivalent (TWPE) discharged by the NPDES ID for the most recent complete calendar year.

        :param past_cal_yr_toxic_pol_ovr_lmt: The past_cal_yr_toxic_pol_ovr_lmt of this Cwa07.
        :type past_cal_yr_toxic_pol_ovr_lmt: str
        """
        if past_cal_yr_toxic_pol_ovr_lmt is None:
            raise ValueError("Invalid value for `past_cal_yr_toxic_pol_ovr_lmt`, must not be `None`")

        self._past_cal_yr_toxic_pol_ovr_lmt = past_cal_yr_toxic_pol_ovr_lmt

    @property
    def past_cal_yr_toxic_pollutants(self):
        """Gets the past_cal_yr_toxic_pollutants of this Cwa07.

        The toxic pollutants discharged by the NPDES facility for the most recent complete calendar year.

        :return: The past_cal_yr_toxic_pollutants of this Cwa07.
        :rtype: str
        """
        return self._past_cal_yr_toxic_pollutants

    @past_cal_yr_toxic_pollutants.setter
    def past_cal_yr_toxic_pollutants(self, past_cal_yr_toxic_pollutants):
        """Sets the past_cal_yr_toxic_pollutants of this Cwa07.

        The toxic pollutants discharged by the NPDES facility for the most recent complete calendar year.

        :param past_cal_yr_toxic_pollutants: The past_cal_yr_toxic_pollutants of this Cwa07.
        :type past_cal_yr_toxic_pollutants: str
        """
        if past_cal_yr_toxic_pollutants is None:
            raise ValueError("Invalid value for `past_cal_yr_toxic_pollutants`, must not be `None`")

        self._past_cal_yr_toxic_pollutants = past_cal_yr_toxic_pollutants

    @property
    def pctile_cancer_us(self):
        """Gets the pctile_cancer_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :return: The pctile_cancer_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_cancer_us

    @pctile_cancer_us.setter
    def pctile_cancer_us(self, pctile_cancer_us):
        """Sets the pctile_cancer_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :param pctile_cancer_us: The pctile_cancer_us of this Cwa07.
        :type pctile_cancer_us: str
        """
        if pctile_cancer_us is None:
            raise ValueError("Invalid value for `pctile_cancer_us`, must not be `None`")

        self._pctile_cancer_us = pctile_cancer_us

    @property
    def pctile_dpm_us(self):
        """Gets the pctile_dpm_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :return: The pctile_dpm_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_dpm_us

    @pctile_dpm_us.setter
    def pctile_dpm_us(self, pctile_dpm_us):
        """Sets the pctile_dpm_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :param pctile_dpm_us: The pctile_dpm_us of this Cwa07.
        :type pctile_dpm_us: str
        """
        if pctile_dpm_us is None:
            raise ValueError("Invalid value for `pctile_dpm_us`, must not be `None`")

        self._pctile_dpm_us = pctile_dpm_us

    @property
    def pctile_o3_us(self):
        """Gets the pctile_o3_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :return: The pctile_o3_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_o3_us

    @pctile_o3_us.setter
    def pctile_o3_us(self, pctile_o3_us):
        """Sets the pctile_o3_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :param pctile_o3_us: The pctile_o3_us of this Cwa07.
        :type pctile_o3_us: str
        """
        if pctile_o3_us is None:
            raise ValueError("Invalid value for `pctile_o3_us`, must not be `None`")

        self._pctile_o3_us = pctile_o3_us

    @property
    def pctile_pctpre1960_us(self):
        """Gets the pctile_pctpre1960_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :return: The pctile_pctpre1960_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_pctpre1960_us

    @pctile_pctpre1960_us.setter
    def pctile_pctpre1960_us(self, pctile_pctpre1960_us):
        """Sets the pctile_pctpre1960_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Cwa07.
        :type pctile_pctpre1960_us: str
        """
        if pctile_pctpre1960_us is None:
            raise ValueError("Invalid value for `pctile_pctpre1960_us`, must not be `None`")

        self._pctile_pctpre1960_us = pctile_pctpre1960_us

    @property
    def pctile_pm_us(self):
        """Gets the pctile_pm_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :return: The pctile_pm_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_pm_us

    @pctile_pm_us.setter
    def pctile_pm_us(self, pctile_pm_us):
        """Sets the pctile_pm_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :param pctile_pm_us: The pctile_pm_us of this Cwa07.
        :type pctile_pm_us: str
        """
        if pctile_pm_us is None:
            raise ValueError("Invalid value for `pctile_pm_us`, must not be `None`")

        self._pctile_pm_us = pctile_pm_us

    @property
    def pctile_proximity_npdesus(self):
        """Gets the pctile_proximity_npdesus of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :return: The pctile_proximity_npdesus of this Cwa07.
        :rtype: str
        """
        return self._pctile_proximity_npdesus

    @pctile_proximity_npdesus.setter
    def pctile_proximity_npdesus(self, pctile_proximity_npdesus):
        """Sets the pctile_proximity_npdesus of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Cwa07.
        :type pctile_proximity_npdesus: str
        """
        if pctile_proximity_npdesus is None:
            raise ValueError("Invalid value for `pctile_proximity_npdesus`, must not be `None`")

        self._pctile_proximity_npdesus = pctile_proximity_npdesus

    @property
    def pctile_proximity_npl_us(self):
        """Gets the pctile_proximity_npl_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :return: The pctile_proximity_npl_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_proximity_npl_us

    @pctile_proximity_npl_us.setter
    def pctile_proximity_npl_us(self, pctile_proximity_npl_us):
        """Sets the pctile_proximity_npl_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Cwa07.
        :type pctile_proximity_npl_us: str
        """
        if pctile_proximity_npl_us is None:
            raise ValueError("Invalid value for `pctile_proximity_npl_us`, must not be `None`")

        self._pctile_proximity_npl_us = pctile_proximity_npl_us

    @property
    def pctile_proximity_rmp_us(self):
        """Gets the pctile_proximity_rmp_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :return: The pctile_proximity_rmp_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_proximity_rmp_us

    @pctile_proximity_rmp_us.setter
    def pctile_proximity_rmp_us(self, pctile_proximity_rmp_us):
        """Sets the pctile_proximity_rmp_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Cwa07.
        :type pctile_proximity_rmp_us: str
        """
        if pctile_proximity_rmp_us is None:
            raise ValueError("Invalid value for `pctile_proximity_rmp_us`, must not be `None`")

        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us

    @property
    def pctile_proximity_tsdf_us(self):
        """Gets the pctile_proximity_tsdf_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :return: The pctile_proximity_tsdf_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_proximity_tsdf_us

    @pctile_proximity_tsdf_us.setter
    def pctile_proximity_tsdf_us(self, pctile_proximity_tsdf_us):
        """Sets the pctile_proximity_tsdf_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Cwa07.
        :type pctile_proximity_tsdf_us: str
        """
        if pctile_proximity_tsdf_us is None:
            raise ValueError("Invalid value for `pctile_proximity_tsdf_us`, must not be `None`")

        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us

    @property
    def pctile_resp_us(self):
        """Gets the pctile_resp_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :return: The pctile_resp_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_resp_us

    @pctile_resp_us.setter
    def pctile_resp_us(self, pctile_resp_us):
        """Sets the pctile_resp_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :param pctile_resp_us: The pctile_resp_us of this Cwa07.
        :type pctile_resp_us: str
        """
        if pctile_resp_us is None:
            raise ValueError("Invalid value for `pctile_resp_us`, must not be `None`")

        self._pctile_resp_us = pctile_resp_us

    @property
    def pctile_traffic_score_us(self):
        """Gets the pctile_traffic_score_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :return: The pctile_traffic_score_us of this Cwa07.
        :rtype: str
        """
        return self._pctile_traffic_score_us

    @pctile_traffic_score_us.setter
    def pctile_traffic_score_us(self, pctile_traffic_score_us):
        """Sets the pctile_traffic_score_us of this Cwa07.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Cwa07.
        :type pctile_traffic_score_us: str
        """
        if pctile_traffic_score_us is None:
            raise ValueError("Invalid value for `pctile_traffic_score_us`, must not be `None`")

        self._pctile_traffic_score_us = pctile_traffic_score_us

    @property
    def permit_components(self):
        """Gets the permit_components of this Cwa07.

        Indicates the permit component(s) associated with the NPDES Permit Program Area.

        :return: The permit_components of this Cwa07.
        :rtype: str
        """
        return self._permit_components

    @permit_components.setter
    def permit_components(self, permit_components):
        """Sets the permit_components of this Cwa07.

        Indicates the permit component(s) associated with the NPDES Permit Program Area.

        :param permit_components: The permit_components of this Cwa07.
        :type permit_components: str
        """
        if permit_components is None:
            raise ValueError("Invalid value for `permit_components`, must not be `None`")

        self._permit_components = permit_components

    @property
    def permit_name(self):
        """Gets the permit_name of this Cwa07.


        :return: The permit_name of this Cwa07.
        :rtype: str
        """
        return self._permit_name

    @permit_name.setter
    def permit_name(self, permit_name):
        """Sets the permit_name of this Cwa07.


        :param permit_name: The permit_name of this Cwa07.
        :type permit_name: str
        """
        if permit_name is None:
            raise ValueError("Invalid value for `permit_name`, must not be `None`")

        self._permit_name = permit_name

    @property
    def permitting_agency(self):
        """Gets the permitting_agency of this Cwa07.

        This is the type of organization issuing or granting a permit.

        :return: The permitting_agency of this Cwa07.
        :rtype: str
        """
        return self._permitting_agency

    @permitting_agency.setter
    def permitting_agency(self, permitting_agency):
        """Sets the permitting_agency of this Cwa07.

        This is the type of organization issuing or granting a permit.

        :param permitting_agency: The permitting_agency of this Cwa07.
        :type permitting_agency: str
        """
        if permitting_agency is None:
            raise ValueError("Invalid value for `permitting_agency`, must not be `None`")

        self._permitting_agency = permitting_agency

    @property
    def poll_with_violation(self):
        """Gets the poll_with_violation of this Cwa07.

        The names of pollutants with effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.

        :return: The poll_with_violation of this Cwa07.
        :rtype: str
        """
        return self._poll_with_violation

    @poll_with_violation.setter
    def poll_with_violation(self, poll_with_violation):
        """Sets the poll_with_violation of this Cwa07.

        The names of pollutants with effluent exceedances (i.e., violation code E90) in the past three years in ICIS-NPDES.

        :param poll_with_violation: The poll_with_violation of this Cwa07.
        :type poll_with_violation: str
        """
        if poll_with_violation is None:
            raise ValueError("Invalid value for `poll_with_violation`, must not be `None`")

        self._poll_with_violation = poll_with_violation

    @property
    def rcraids(self):
        """Gets the rcraids of this Cwa07.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :return: The rcraids of this Cwa07.
        :rtype: str
        """
        return self._rcraids

    @rcraids.setter
    def rcraids(self, rcraids):
        """Sets the rcraids of this Cwa07.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :param rcraids: The rcraids of this Cwa07.
        :type rcraids: str
        """
        if rcraids is None:
            raise ValueError("Invalid value for `rcraids`, must not be `None`")

        self._rcraids = rcraids

    @property
    def rad_gnis_name(self):
        """Gets the rad_gnis_name of this Cwa07.

        The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.

        :return: The rad_gnis_name of this Cwa07.
        :rtype: str
        """
        return self._rad_gnis_name

    @rad_gnis_name.setter
    def rad_gnis_name(self, rad_gnis_name):
        """Sets the rad_gnis_name of this Cwa07.

        The name of the waterbody from the Geographic Names Information System (GNIS) database in which the facility is permitted to discharge directly.

        :param rad_gnis_name: The rad_gnis_name of this Cwa07.
        :type rad_gnis_name: str
        """
        if rad_gnis_name is None:
            raise ValueError("Invalid value for `rad_gnis_name`, must not be `None`")

        self._rad_gnis_name = rad_gnis_name

    @property
    def rad_hu12_name(self):
        """Gets the rad_hu12_name of this Cwa07.

        The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).

        :return: The rad_hu12_name of this Cwa07.
        :rtype: str
        """
        return self._rad_hu12_name

    @rad_hu12_name.setter
    def rad_hu12_name(self, rad_hu12_name):
        """Sets the rad_hu12_name of this Cwa07.

        The name of the waterbody in which the facility is permitted to discharge directly (from the Reach Address Database, RAD).

        :param rad_hu12_name: The rad_hu12_name of this Cwa07.
        :type rad_hu12_name: str
        """
        if rad_hu12_name is None:
            raise ValueError("Invalid value for `rad_hu12_name`, must not be `None`")

        self._rad_hu12_name = rad_hu12_name

    @property
    def rad_reachcode(self):
        """Gets the rad_reachcode of this Cwa07.

        A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.

        :return: The rad_reachcode of this Cwa07.
        :rtype: str
        """
        return self._rad_reachcode

    @rad_reachcode.setter
    def rad_reachcode(self, rad_reachcode):
        """Sets the rad_reachcode of this Cwa07.

        A nationally unique and permanent identifier for the waterbody, assigned by the US Geological Survey.

        :param rad_reachcode: The rad_reachcode of this Cwa07.
        :type rad_reachcode: str
        """
        if rad_reachcode is None:
            raise ValueError("Invalid value for `rad_reachcode`, must not be `None`")

        self._rad_reachcode = rad_reachcode

    @property
    def rad_wbdhu8(self):
        """Gets the rad_wbdhu8 of this Cwa07.

        Hydrologic Unit Code (HUC) from the Reach Address Database (RAD), which is derived from the USGS Watershed Boundary Dataset.

        :return: The rad_wbdhu8 of this Cwa07.
        :rtype: str
        """
        return self._rad_wbdhu8

    @rad_wbdhu8.setter
    def rad_wbdhu8(self, rad_wbdhu8):
        """Sets the rad_wbdhu8 of this Cwa07.

        Hydrologic Unit Code (HUC) from the Reach Address Database (RAD), which is derived from the USGS Watershed Boundary Dataset.

        :param rad_wbdhu8: The rad_wbdhu8 of this Cwa07.
        :type rad_wbdhu8: str
        """
        if rad_wbdhu8 is None:
            raise ValueError("Invalid value for `rad_wbdhu8`, must not be `None`")

        self._rad_wbdhu8 = rad_wbdhu8

    @property
    def rad_wbdhu8_name(self):
        """Gets the rad_wbdhu8_name of this Cwa07.

        The name of the hydrologic unit in which the facility may discharge, from the Reach Address Database (RAD) and derived from the USGS Watershed Boundary Dataset.

        :return: The rad_wbdhu8_name of this Cwa07.
        :rtype: str
        """
        return self._rad_wbdhu8_name

    @rad_wbdhu8_name.setter
    def rad_wbdhu8_name(self, rad_wbdhu8_name):
        """Sets the rad_wbdhu8_name of this Cwa07.

        The name of the hydrologic unit in which the facility may discharge, from the Reach Address Database (RAD) and derived from the USGS Watershed Boundary Dataset.

        :param rad_wbdhu8_name: The rad_wbdhu8_name of this Cwa07.
        :type rad_wbdhu8_name: str
        """
        if rad_wbdhu8_name is None:
            raise ValueError("Invalid value for `rad_wbdhu8_name`, must not be `None`")

        self._rad_wbdhu8_name = rad_wbdhu8_name

    @property
    def rad_wbd_huc12(self):
        """Gets the rad_wbd_huc12 of this Cwa07.

        Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)

        :return: The rad_wbd_huc12 of this Cwa07.
        :rtype: str
        """
        return self._rad_wbd_huc12

    @rad_wbd_huc12.setter
    def rad_wbd_huc12(self, rad_wbd_huc12):
        """Sets the rad_wbd_huc12 of this Cwa07.

        Code from the Reach Address Database (RAD), assigned by the US Geological Survey, used to classify watersheds in the United States and the Caribbean. The code consists of twelve digits which correspond to six levels of classification: - Region (first-level, 2-digit HUC) - Subregion (second-level, 4-digit HUC) - Accounting unit (third-level, 6-digit HUC) - Cataloguing unit (fourth-level, 8-digit HUC) - Watershed (fifth-level, 10-digit HUC) - Subwatershed (sixth-level, 12-digit HUC)

        :param rad_wbd_huc12: The rad_wbd_huc12 of this Cwa07.
        :type rad_wbd_huc12: str
        """
        if rad_wbd_huc12 is None:
            raise ValueError("Invalid value for `rad_wbd_huc12`, must not be `None`")

        self._rad_wbd_huc12 = rad_wbd_huc12

    @property
    def receiving_ms4_name(self):
        """Gets the receiving_ms4_name of this Cwa07.

        This is the name of the receiving MS4(s).

        :return: The receiving_ms4_name of this Cwa07.
        :rtype: str
        """
        return self._receiving_ms4_name

    @receiving_ms4_name.setter
    def receiving_ms4_name(self, receiving_ms4_name):
        """Sets the receiving_ms4_name of this Cwa07.

        This is the name of the receiving MS4(s).

        :param receiving_ms4_name: The receiving_ms4_name of this Cwa07.
        :type receiving_ms4_name: str
        """
        if receiving_ms4_name is None:
            raise ValueError("Invalid value for `receiving_ms4_name`, must not be `None`")

        self._receiving_ms4_name = receiving_ms4_name

    @property
    def reference_point(self):
        """Gets the reference_point of this Cwa07.

        ??

        :return: The reference_point of this Cwa07.
        :rtype: str
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this Cwa07.

        ??

        :param reference_point: The reference_point of this Cwa07.
        :type reference_point: str
        """
        if reference_point is None:
            raise ValueError("Invalid value for `reference_point`, must not be `None`")

        self._reference_point = reference_point

    @property
    def registry_id(self):
        """Gets the registry_id of this Cwa07.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Cwa07.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Cwa07.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Cwa07.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def rmp_ids(self):
        """Gets the rmp_ids of this Cwa07.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :return: The rmp_ids of this Cwa07.
        :rtype: str
        """
        return self._rmp_ids

    @rmp_ids.setter
    def rmp_ids(self, rmp_ids):
        """Sets the rmp_ids of this Cwa07.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :param rmp_ids: The rmp_ids of this Cwa07.
        :type rmp_ids: str
        """
        if rmp_ids is None:
            raise ValueError("Invalid value for `rmp_ids`, must not be `None`")

        self._rmp_ids = rmp_ids

    @property
    def sdwaids(self):
        """Gets the sdwaids of this Cwa07.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :return: The sdwaids of this Cwa07.
        :rtype: str
        """
        return self._sdwaids

    @sdwaids.setter
    def sdwaids(self, sdwaids):
        """Sets the sdwaids of this Cwa07.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :param sdwaids: The sdwaids of this Cwa07.
        :type sdwaids: str
        """
        if sdwaids is None:
            raise ValueError("Invalid value for `sdwaids`, must not be `None`")

        self._sdwaids = sdwaids

    @property
    def score(self):
        """Gets the score of this Cwa07.


        :return: The score of this Cwa07.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Cwa07.


        :param score: The score of this Cwa07.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sector(self):
        """Gets the sector of this Cwa07.

        The sector code and description for the industrial stormwater facility.

        :return: The sector of this Cwa07.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Cwa07.

        The sector code and description for the industrial stormwater facility.

        :param sector: The sector of this Cwa07.
        :type sector: str
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")

        self._sector = sector

    @property
    def source_id(self):
        """Gets the source_id of this Cwa07.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Cwa07.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Cwa07.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Cwa07.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def species_critical_habital_flag(self):
        """Gets the species_critical_habital_flag of this Cwa07.

        This identifies if Endangered Species Act (ESA) provisions are met.

        :return: The species_critical_habital_flag of this Cwa07.
        :rtype: str
        """
        return self._species_critical_habital_flag

    @species_critical_habital_flag.setter
    def species_critical_habital_flag(self, species_critical_habital_flag):
        """Sets the species_critical_habital_flag of this Cwa07.

        This identifies if Endangered Species Act (ESA) provisions are met.

        :param species_critical_habital_flag: The species_critical_habital_flag of this Cwa07.
        :type species_critical_habital_flag: str
        """
        if species_critical_habital_flag is None:
            raise ValueError("Invalid value for `species_critical_habital_flag`, must not be `None`")

        self._species_critical_habital_flag = species_critical_habital_flag

    @property
    def state_auth_biosolids(self):
        """Gets the state_auth_biosolids of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Biosolids.

        :return: The state_auth_biosolids of this Cwa07.
        :rtype: str
        """
        return self._state_auth_biosolids

    @state_auth_biosolids.setter
    def state_auth_biosolids(self, state_auth_biosolids):
        """Sets the state_auth_biosolids of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Biosolids.

        :param state_auth_biosolids: The state_auth_biosolids of this Cwa07.
        :type state_auth_biosolids: str
        """
        if state_auth_biosolids is None:
            raise ValueError("Invalid value for `state_auth_biosolids`, must not be `None`")

        self._state_auth_biosolids = state_auth_biosolids

    @property
    def state_auth_fedfac(self):
        """Gets the state_auth_fedfac of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized to regulate Federally owned facilities.

        :return: The state_auth_fedfac of this Cwa07.
        :rtype: str
        """
        return self._state_auth_fedfac

    @state_auth_fedfac.setter
    def state_auth_fedfac(self, state_auth_fedfac):
        """Sets the state_auth_fedfac of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized to regulate Federally owned facilities.

        :param state_auth_fedfac: The state_auth_fedfac of this Cwa07.
        :type state_auth_fedfac: str
        """
        if state_auth_fedfac is None:
            raise ValueError("Invalid value for `state_auth_fedfac`, must not be `None`")

        self._state_auth_fedfac = state_auth_fedfac

    @property
    def state_auth_gen(self):
        """Gets the state_auth_gen of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for General NPDES Facilities.

        :return: The state_auth_gen of this Cwa07.
        :rtype: str
        """
        return self._state_auth_gen

    @state_auth_gen.setter
    def state_auth_gen(self, state_auth_gen):
        """Sets the state_auth_gen of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for General NPDES Facilities.

        :param state_auth_gen: The state_auth_gen of this Cwa07.
        :type state_auth_gen: str
        """
        if state_auth_gen is None:
            raise ValueError("Invalid value for `state_auth_gen`, must not be `None`")

        self._state_auth_gen = state_auth_gen

    @property
    def state_auth_npdes(self):
        """Gets the state_auth_npdes of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for NPDES Facilities.

        :return: The state_auth_npdes of this Cwa07.
        :rtype: str
        """
        return self._state_auth_npdes

    @state_auth_npdes.setter
    def state_auth_npdes(self, state_auth_npdes):
        """Sets the state_auth_npdes of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for NPDES Facilities.

        :param state_auth_npdes: The state_auth_npdes of this Cwa07.
        :type state_auth_npdes: str
        """
        if state_auth_npdes is None:
            raise ValueError("Invalid value for `state_auth_npdes`, must not be `None`")

        self._state_auth_npdes = state_auth_npdes

    @property
    def state_auth_pretreat(self):
        """Gets the state_auth_pretreat of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Pretreatment Facilities.

        :return: The state_auth_pretreat of this Cwa07.
        :rtype: str
        """
        return self._state_auth_pretreat

    @state_auth_pretreat.setter
    def state_auth_pretreat(self, state_auth_pretreat):
        """Sets the state_auth_pretreat of this Cwa07.

        Indicates whether the state/tribe/territory code (first 2 digits of the NPDES_ID/SOURCE_ID) is authorized for Pretreatment Facilities.

        :param state_auth_pretreat: The state_auth_pretreat of this Cwa07.
        :type state_auth_pretreat: str
        """
        if state_auth_pretreat is None:
            raise ValueError("Invalid value for `state_auth_pretreat`, must not be `None`")

        self._state_auth_pretreat = state_auth_pretreat

    @property
    def statute(self):
        """Gets the statute of this Cwa07.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Cwa07.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Cwa07.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Cwa07.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def storm_water_area(self):
        """Gets the storm_water_area of this Cwa07.

        The estimated area of industrial activity at the site exposed to stormwater in acres.

        :return: The storm_water_area of this Cwa07.
        :rtype: str
        """
        return self._storm_water_area

    @storm_water_area.setter
    def storm_water_area(self, storm_water_area):
        """Sets the storm_water_area of this Cwa07.

        The estimated area of industrial activity at the site exposed to stormwater in acres.

        :param storm_water_area: The storm_water_area of this Cwa07.
        :type storm_water_area: str
        """
        if storm_water_area is None:
            raise ValueError("Invalid value for `storm_water_area`, must not be `None`")

        self._storm_water_area = storm_water_area

    @property
    def submitted_date(self):
        """Gets the submitted_date of this Cwa07.

        Date that the permit was submitted to the issuing agency.

        :return: The submitted_date of this Cwa07.
        :rtype: str
        """
        return self._submitted_date

    @submitted_date.setter
    def submitted_date(self, submitted_date):
        """Sets the submitted_date of this Cwa07.

        Date that the permit was submitted to the issuing agency.

        :param submitted_date: The submitted_date of this Cwa07.
        :type submitted_date: str
        """
        if submitted_date is None:
            raise ValueError("Invalid value for `submitted_date`, must not be `None`")

        self._submitted_date = submitted_date

    @property
    def subsector(self):
        """Gets the subsector of this Cwa07.

        The industrial subsector associated with the facility.

        :return: The subsector of this Cwa07.
        :rtype: str
        """
        return self._subsector

    @subsector.setter
    def subsector(self, subsector):
        """Sets the subsector of this Cwa07.

        The industrial subsector associated with the facility.

        :param subsector: The subsector of this Cwa07.
        :type subsector: str
        """
        if subsector is None:
            raise ValueError("Invalid value for `subsector`, must not be `None`")

        self._subsector = subsector

    @property
    def swppp_url(self):
        """Gets the swppp_url of this Cwa07.

        Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.

        :return: The swppp_url of this Cwa07.
        :rtype: str
        """
        return self._swppp_url

    @swppp_url.setter
    def swppp_url(self, swppp_url):
        """Sets the swppp_url of this Cwa07.

        Web address URL of Internet page where current copy of Stormwater Pollution Prevention Plan (SWPPP) is maintained.

        :param swppp_url: The swppp_url of this Cwa07.
        :type swppp_url: str
        """
        if swppp_url is None:
            raise ValueError("Invalid value for `swppp_url`, must not be `None`")

        self._swppp_url = swppp_url

    @property
    def triids(self):
        """Gets the triids of this Cwa07.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :return: The triids of this Cwa07.
        :rtype: str
        """
        return self._triids

    @triids.setter
    def triids(self, triids):
        """Sets the triids of this Cwa07.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :param triids: The triids of this Cwa07.
        :type triids: str
        """
        if triids is None:
            raise ValueError("Invalid value for `triids`, must not be `None`")

        self._triids = triids

    @property
    def tr_ibal_flag(self):
        """Gets the tr_ibal_flag of this Cwa07.

        A flag indicating that the facility is within a tribal area.

        :return: The tr_ibal_flag of this Cwa07.
        :rtype: str
        """
        return self._tr_ibal_flag

    @tr_ibal_flag.setter
    def tr_ibal_flag(self, tr_ibal_flag):
        """Sets the tr_ibal_flag of this Cwa07.

        A flag indicating that the facility is within a tribal area.

        :param tr_ibal_flag: The tr_ibal_flag of this Cwa07.
        :type tr_ibal_flag: str
        """
        if tr_ibal_flag is None:
            raise ValueError("Invalid value for `tr_ibal_flag`, must not be `None`")

        self._tr_ibal_flag = tr_ibal_flag

    @property
    def type_of_monitoring(self):
        """Gets the type_of_monitoring of this Cwa07.

        The type of monitoring specified in the SWPPP.

        :return: The type_of_monitoring of this Cwa07.
        :rtype: str
        """
        return self._type_of_monitoring

    @type_of_monitoring.setter
    def type_of_monitoring(self, type_of_monitoring):
        """Sets the type_of_monitoring of this Cwa07.

        The type of monitoring specified in the SWPPP.

        :param type_of_monitoring: The type_of_monitoring of this Cwa07.
        :type type_of_monitoring: str
        """
        if type_of_monitoring is None:
            raise ValueError("Invalid value for `type_of_monitoring`, must not be `None`")

        self._type_of_monitoring = type_of_monitoring

    @property
    def type_of_water(self):
        """Gets the type_of_water of this Cwa07.

        The type of water body receiving discharges stormwater discharges specified in the SWPPP.

        :return: The type_of_water of this Cwa07.
        :rtype: str
        """
        return self._type_of_water

    @type_of_water.setter
    def type_of_water(self, type_of_water):
        """Sets the type_of_water of this Cwa07.

        The type of water body receiving discharges stormwater discharges specified in the SWPPP.

        :param type_of_water: The type_of_water of this Cwa07.
        :type type_of_water: str
        """
        if type_of_water is None:
            raise ValueError("Invalid value for `type_of_water`, must not be `None`")

        self._type_of_water = type_of_water

    @property
    def vio_last_year(self):
        """Gets the vio_last_year of this Cwa07.

        A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.

        :return: The vio_last_year of this Cwa07.
        :rtype: str
        """
        return self._vio_last_year

    @vio_last_year.setter
    def vio_last_year(self, vio_last_year):
        """Sets the vio_last_year of this Cwa07.

        A flag (values of 1 for Yes, 0 for No) that a Water Program Violation occurred in the last 4 quarters.

        :param vio_last_year: The vio_last_year of this Cwa07.
        :type vio_last_year: str
        """
        if vio_last_year is None:
            raise ValueError("Invalid value for `vio_last_year`, must not be `None`")

        self._vio_last_year = vio_last_year

    @property
    def viol_flag(self):
        """Gets the viol_flag of this Cwa07.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :return: The viol_flag of this Cwa07.
        :rtype: str
        """
        return self._viol_flag

    @viol_flag.setter
    def viol_flag(self, viol_flag):
        """Sets the viol_flag of this Cwa07.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :param viol_flag: The viol_flag of this Cwa07.
        :type viol_flag: str
        """
        if viol_flag is None:
            raise ValueError("Invalid value for `viol_flag`, must not be `None`")

        self._viol_flag = viol_flag

    @property
    def web_docs(self):
        """Gets the web_docs of this Cwa07.

        Contains flags that identify what web accessible documents are available for the facility.

        :return: The web_docs of this Cwa07.
        :rtype: str
        """
        return self._web_docs

    @web_docs.setter
    def web_docs(self, web_docs):
        """Sets the web_docs of this Cwa07.

        Contains flags that identify what web accessible documents are available for the facility.

        :param web_docs: The web_docs of this Cwa07.
        :type web_docs: str
        """
        if web_docs is None:
            raise ValueError("Invalid value for `web_docs`, must not be `None`")

        self._web_docs = web_docs
