/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facilities Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.579228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rcra07 {
  public static final String SERIALIZED_NAME_AI_R_I_DS = "AIRIDs";
  @SerializedName(SERIALIZED_NAME_AI_R_I_DS)
  private String aiRIDs;

  public static final String SERIALIZED_NAME_ACTIVE_LOWER48 = "ActiveLower48";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOWER48)
  private String activeLower48;

  public static final String SERIALIZED_NAME_CW_A_I_DS = "CWAIDs";
  @SerializedName(SERIALIZED_NAME_CW_A_I_DS)
  private String cwAIDs;

  public static final String SERIALIZED_NAME_CALCULATED_ACCURACY_METERS = "CalculatedAccuracyMeters";
  @SerializedName(SERIALIZED_NAME_CALCULATED_ACCURACY_METERS)
  private String calculatedAccuracyMeters;

  public static final String SERIALIZED_NAME_CENSUS_BLOCK_GROUP = "CensusBlockGroup";
  @SerializedName(SERIALIZED_NAME_CENSUS_BLOCK_GROUP)
  private String censusBlockGroup;

  public static final String SERIALIZED_NAME_CHEM_NAMES_REL_LAND = "ChemNamesRelLand";
  @SerializedName(SERIALIZED_NAME_CHEM_NAMES_REL_LAND)
  private String chemNamesRelLand;

  public static final String SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG = "ChesapeakeBayFlag";
  @SerializedName(SERIALIZED_NAME_CHESAPEAKE_BAY_FLAG)
  private String chesapeakeBayFlag;

  public static final String SERIALIZED_NAME_CLEANUP_ACTION_FLAG = "CleanupActionFlag";
  @SerializedName(SERIALIZED_NAME_CLEANUP_ACTION_FLAG)
  private String cleanupActionFlag;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "CollectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_CURR_SV_FLAG = "CurrSvFlag";
  @SerializedName(SERIALIZED_NAME_CURR_SV_FLAG)
  private String currSvFlag;

  public static final String SERIALIZED_NAME_CURR_VIO_FLAG = "CurrVioFlag";
  @SerializedName(SERIALIZED_NAME_CURR_VIO_FLAG)
  private String currVioFlag;

  public static final String SERIALIZED_NAME_CURRENT_VIO_CNT = "CurrentVioCnt";
  @SerializedName(SERIALIZED_NAME_CURRENT_VIO_CNT)
  private String currentVioCnt;

  public static final String SERIALIZED_NAME_DATE_LAST_RECORD_REVIEW = "DateLastRecordReview";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_RECORD_REVIEW)
  private String dateLastRecordReview;

  public static final String SERIALIZED_NAME_EP_A_SYSTEM = "EPASystem";
  @SerializedName(SERIALIZED_NAME_EP_A_SYSTEM)
  private String epASystem;

  public static final String SERIALIZED_NAME_EA5YR_FLAG = "Ea5yrFlag";
  @SerializedName(SERIALIZED_NAME_EA5YR_FLAG)
  private String ea5yrFlag;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG = "EjscreenFlag";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG)
  private String ejscreenFlag;

  public static final String SERIALIZED_NAME_EJSCREEN_FLAG_US = "EjscreenFlagUs";
  @SerializedName(SERIALIZED_NAME_EJSCREEN_FLAG_US)
  private String ejscreenFlagUs;

  public static final String SERIALIZED_NAME_FAC_COUNTY_NAME = "FacCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_COUNTY_NAME)
  private String facCountyName;

  public static final String SERIALIZED_NAME_FAC_DERIVED_HUC = "FacDerivedHuc";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_HUC)
  private String facDerivedHuc;

  public static final String SERIALIZED_NAME_FAC_DERIVED_T_R_IBES = "FacDerivedTRIbes";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_T_R_IBES)
  private String facDerivedTRIbes;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D = "FacDerivedWBD";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D)
  private String facDerivedWBD;

  public static final String SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME = "FacDerivedWBDName";
  @SerializedName(SERIALIZED_NAME_FAC_DERIVED_W_B_D_NAME)
  private String facDerivedWBDName;

  public static final String SERIALIZED_NAME_FAC_F_I_P_S_CODE = "FacFIPSCode";
  @SerializedName(SERIALIZED_NAME_FAC_F_I_P_S_CODE)
  private String facFIPSCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE = "FacFederalAgencyCode";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_CODE)
  private String facFederalAgencyCode;

  public static final String SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME = "FacFederalAgencyName";
  @SerializedName(SERIALIZED_NAME_FAC_FEDERAL_AGENCY_NAME)
  private String facFederalAgencyName;

  public static final String SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG = "FacIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_CNTRY_FLG)
  private String facIndianCntryFlg;

  public static final String SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG = "FacIndianSpatialFlg";
  @SerializedName(SERIALIZED_NAME_FAC_INDIAN_SPATIAL_FLG)
  private String facIndianSpatialFlg;

  public static final String SERIALIZED_NAME_FAC_LAT = "FacLat";
  @SerializedName(SERIALIZED_NAME_FAC_LAT)
  private String facLat;

  public static final String SERIALIZED_NAME_FAC_LONG = "FacLong";
  @SerializedName(SERIALIZED_NAME_FAC_LONG)
  private String facLong;

  public static final String SERIALIZED_NAME_FAC_MAP_FLG = "FacMapFlg";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_FLG)
  private String facMapFlg;

  public static final String SERIALIZED_NAME_FAC_MAP_ICON = "FacMapIcon";
  @SerializedName(SERIALIZED_NAME_FAC_MAP_ICON)
  private String facMapIcon;

  public static final String SERIALIZED_NAME_FAC_PERCENT_MINORITY = "FacPercentMinority";
  @SerializedName(SERIALIZED_NAME_FAC_PERCENT_MINORITY)
  private String facPercentMinority;

  public static final String SERIALIZED_NAME_FAC_POPULATION_DENSITY = "FacPopulationDensity";
  @SerializedName(SERIALIZED_NAME_FAC_POPULATION_DENSITY)
  private String facPopulationDensity;

  public static final String SERIALIZED_NAME_FAC_S_I_C_CODES = "FacSICCodes";
  @SerializedName(SERIALIZED_NAME_FAC_S_I_C_CODES)
  private String facSICCodes;

  public static final String SERIALIZED_NAME_FAC_STD_COUNTY_NAME = "FacStdCountyName";
  @SerializedName(SERIALIZED_NAME_FAC_STD_COUNTY_NAME)
  private String facStdCountyName;

  public static final String SERIALIZED_NAME_FAC_T_R_I_LAND_RELEASES = "FacTRILandReleases";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_LAND_RELEASES)
  private String facTRILandReleases;

  public static final String SERIALIZED_NAME_FAC_T_R_I_OFF_SITE_TRANSFERS = "FacTRIOffSiteTransfers";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_OFF_SITE_TRANSFERS)
  private String facTRIOffSiteTransfers;

  public static final String SERIALIZED_NAME_FAC_T_R_I_ON_SITE_RELEASES = "FacTRIOnSiteReleases";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_ON_SITE_RELEASES)
  private String facTRIOnSiteReleases;

  public static final String SERIALIZED_NAME_FAC_T_R_I_REPORTER = "FacTRIReporter";
  @SerializedName(SERIALIZED_NAME_FAC_T_R_I_REPORTER)
  private String facTRIReporter;

  public static final String SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG = "FacUsMexBorderFlg";
  @SerializedName(SERIALIZED_NAME_FAC_US_MEX_BORDER_FLG)
  private String facUsMexBorderFlg;

  public static final String SERIALIZED_NAME_INFEA5YR_FLAG = "Infea5yrFlag";
  @SerializedName(SERIALIZED_NAME_INFEA5YR_FLAG)
  private String infea5yrFlag;

  public static final String SERIALIZED_NAME_INSP5YR_FLAG = "Insp5yrFlag";
  @SerializedName(SERIALIZED_NAME_INSP5YR_FLAG)
  private String insp5yrFlag;

  public static final String SERIALIZED_NAME_LAST_VIOLATION_DATE = "LastViolationDate";
  @SerializedName(SERIALIZED_NAME_LAST_VIOLATION_DATE)
  private String lastViolationDate;

  public static final String SERIALIZED_NAME_LOWER48 = "Lower48";
  @SerializedName(SERIALIZED_NAME_LOWER48)
  private String lower48;

  public static final String SERIALIZED_NAME_MAP = "Map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_MAX_PCTILE_US = "MaxPctileUs";
  @SerializedName(SERIALIZED_NAME_MAX_PCTILE_US)
  private String maxPctileUs;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private String maxScore;

  public static final String SERIALIZED_NAME_OBJECT_ID = "ObjectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_OPERATOR_CODE = "OperatorCode";
  @SerializedName(SERIALIZED_NAME_OPERATOR_CODE)
  private String operatorCode;

  public static final String SERIALIZED_NAME_OPERATOR_DESC = "OperatorDesc";
  @SerializedName(SERIALIZED_NAME_OPERATOR_DESC)
  private String operatorDesc;

  public static final String SERIALIZED_NAME_OVER80_COUNT_US = "Over80CountUs";
  @SerializedName(SERIALIZED_NAME_OVER80_COUNT_US)
  private String over80CountUs;

  public static final String SERIALIZED_NAME_OWNER_CODE = "OwnerCode";
  @SerializedName(SERIALIZED_NAME_OWNER_CODE)
  private String ownerCode;

  public static final String SERIALIZED_NAME_OWNER_DESC = "OwnerDesc";
  @SerializedName(SERIALIZED_NAME_OWNER_DESC)
  private String ownerDesc;

  public static final String SERIALIZED_NAME_PCTILE_CANCER_US = "PctileCancerUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_CANCER_US)
  private String pctileCancerUs;

  public static final String SERIALIZED_NAME_PCTILE_DPM_US = "PctileDpmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_DPM_US)
  private String pctileDpmUs;

  public static final String SERIALIZED_NAME_PCTILE_O3_US = "PctileO3Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_O3_US)
  private String pctileO3Us;

  public static final String SERIALIZED_NAME_PCTILE_PCTPRE1960_US = "PctilePctpre1960Us";
  @SerializedName(SERIALIZED_NAME_PCTILE_PCTPRE1960_US)
  private String pctilePctpre1960Us;

  public static final String SERIALIZED_NAME_PCTILE_PM_US = "PctilePmUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PM_US)
  private String pctilePmUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US = "PctileProximityNPDESUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_N_P_D_E_S_US)
  private String pctileProximityNPDESUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US = "PctileProximityNplUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_NPL_US)
  private String pctileProximityNplUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US = "PctileProximityRmpUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_RMP_US)
  private String pctileProximityRmpUs;

  public static final String SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US = "PctileProximityTsdfUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_PROXIMITY_TSDF_US)
  private String pctileProximityTsdfUs;

  public static final String SERIALIZED_NAME_PCTILE_RESP_US = "PctileRespUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_RESP_US)
  private String pctileRespUs;

  public static final String SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US = "PctileTrafficScoreUs";
  @SerializedName(SERIALIZED_NAME_PCTILE_TRAFFIC_SCORE_US)
  private String pctileTrafficScoreUs;

  public static final String SERIALIZED_NAME_RC_R_A3YR_COMPL_QTRS_HISTORY = "RCRA3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_RC_R_A3YR_COMPL_QTRS_HISTORY)
  private String rcRA3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_RC_R_A_CASE_I_DS = "RCRACaseIDs";
  @SerializedName(SERIALIZED_NAME_RC_R_A_CASE_I_DS)
  private String rcRACaseIDs;

  public static final String SERIALIZED_NAME_RC_R_A_CITY = "RCRACity";
  @SerializedName(SERIALIZED_NAME_RC_R_A_CITY)
  private String rcRACity;

  public static final String SERIALIZED_NAME_RC_R_A_COMPL_STATUS = "RCRAComplStatus";
  @SerializedName(SERIALIZED_NAME_RC_R_A_COMPL_STATUS)
  private String rcRAComplStatus;

  public static final String SERIALIZED_NAME_RC_R_A_COUNTY = "RCRACounty";
  @SerializedName(SERIALIZED_NAME_RC_R_A_COUNTY)
  private String rcRACounty;

  public static final String SERIALIZED_NAME_RC_R_A_DAYS_LAST_INSPECTION = "RCRADaysLastInspection";
  @SerializedName(SERIALIZED_NAME_RC_R_A_DAYS_LAST_INSPECTION)
  private String rcRADaysLastInspection;

  public static final String SERIALIZED_NAME_RC_R_A_E_P_A_REGION = "RCRAEPARegion";
  @SerializedName(SERIALIZED_NAME_RC_R_A_E_P_A_REGION)
  private String rcRAEPARegion;

  public static final String SERIALIZED_NAME_RC_R_A_F_I_P_S_CODE = "RCRAFIPSCode";
  @SerializedName(SERIALIZED_NAME_RC_R_A_F_I_P_S_CODE)
  private String rcRAFIPSCode;

  public static final String SERIALIZED_NAME_RC_R_A_FEA_CNT = "RCRAFeaCnt";
  @SerializedName(SERIALIZED_NAME_RC_R_A_FEA_CNT)
  private String rcRAFeaCnt;

  public static final String SERIALIZED_NAME_RC_R_A_I_DS = "RCRAIDs";
  @SerializedName(SERIALIZED_NAME_RC_R_A_I_DS)
  private String rcRAIDs;

  public static final String SERIALIZED_NAME_RC_R_A_IEA_CNT = "RCRAIeaCnt";
  @SerializedName(SERIALIZED_NAME_RC_R_A_IEA_CNT)
  private String rcRAIeaCnt;

  public static final String SERIALIZED_NAME_RC_R_A_IMP_WATER_FLG = "RCRAImpWaterFlg";
  @SerializedName(SERIALIZED_NAME_RC_R_A_IMP_WATER_FLG)
  private String rcRAImpWaterFlg;

  public static final String SERIALIZED_NAME_RC_R_A_INDIAN_CNTRY_FLG = "RCRAIndianCntryFlg";
  @SerializedName(SERIALIZED_NAME_RC_R_A_INDIAN_CNTRY_FLG)
  private String rcRAIndianCntryFlg;

  public static final String SERIALIZED_NAME_RC_R_A_INSP_CNT = "RCRAInspCnt";
  @SerializedName(SERIALIZED_NAME_RC_R_A_INSP_CNT)
  private String rcRAInspCnt;

  public static final String SERIALIZED_NAME_RC_R_A_LAND_TYPE_CODE = "RCRALandTypeCode";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAND_TYPE_CODE)
  private String rcRALandTypeCode;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE = "RCRALastFeaDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE)
  private String rcRALastFeaDate;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE_E_P_A = "RCRALastFeaDateEPA";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE_E_P_A)
  private String rcRALastFeaDateEPA;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE_STATE = "RCRALastFeaDateState";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_FEA_DATE_STATE)
  private String rcRALastFeaDateState;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE = "RCRALastIeaDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE)
  private String rcRALastIeaDate;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE_E_P_A = "RCRALastIeaDateEPA";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE_E_P_A)
  private String rcRALastIeaDateEPA;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE_STATE = "RCRALastIeaDateState";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_IEA_DATE_STATE)
  private String rcRALastIeaDateState;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_INSP_DATE_E_P_A = "RCRALastInspDateEPA";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_INSP_DATE_E_P_A)
  private String rcRALastInspDateEPA;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_INSP_DATE_STATE = "RCRALastInspDateState";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_INSP_DATE_STATE)
  private String rcRALastInspDateState;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_INSPECTION_DATE = "RCRALastInspectionDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_INSPECTION_DATE)
  private String rcRALastInspectionDate;

  public static final String SERIALIZED_NAME_RC_R_A_LAST_PENALTY_DATE = "RCRALastPenaltyDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_LAST_PENALTY_DATE)
  private String rcRALastPenaltyDate;

  public static final String SERIALIZED_NAME_RC_R_A_MAP_ICON = "RCRAMapIcon";
  @SerializedName(SERIALIZED_NAME_RC_R_A_MAP_ICON)
  private String rcRAMapIcon;

  public static final String SERIALIZED_NAME_R_C_R_A_N_A_I_C_S = "RCRANAICS";
  @SerializedName(SERIALIZED_NAME_R_C_R_A_N_A_I_C_S)
  private String RCRANAICS;

  public static final String SERIALIZED_NAME_RC_R_A_NAME = "RCRAName";
  @SerializedName(SERIALIZED_NAME_RC_R_A_NAME)
  private String rcRAName;

  public static final String SERIALIZED_NAME_RC_R_A_OLDEST_OPEN_VIO_DATE = "RCRAOldestOpenVioDate";
  @SerializedName(SERIALIZED_NAME_RC_R_A_OLDEST_OPEN_VIO_DATE)
  private String rcRAOldestOpenVioDate;

  public static final String SERIALIZED_NAME_RC_R_A_PENALTIES = "RCRAPenalties";
  @SerializedName(SERIALIZED_NAME_RC_R_A_PENALTIES)
  private String rcRAPenalties;

  public static final String SERIALIZED_NAME_RC_R_A_QTRS_WITH_N_C = "RCRAQtrsWithNC";
  @SerializedName(SERIALIZED_NAME_RC_R_A_QTRS_WITH_N_C)
  private String rcRAQtrsWithNC;

  public static final String SERIALIZED_NAME_RC_R_A_QTRS_WITH_S_N_C = "RCRAQtrsWithSNC";
  @SerializedName(SERIALIZED_NAME_RC_R_A_QTRS_WITH_S_N_C)
  private String rcRAQtrsWithSNC;

  public static final String SERIALIZED_NAME_R_C_R_A_S_N_C = "RCRASNC";
  @SerializedName(SERIALIZED_NAME_R_C_R_A_S_N_C)
  private String RCRASNC;

  public static final String SERIALIZED_NAME_RC_R_A_STATE = "RCRAState";
  @SerializedName(SERIALIZED_NAME_RC_R_A_STATE)
  private String rcRAState;

  public static final String SERIALIZED_NAME_RC_R_A_STATE_DISTRICT = "RCRAStateDistrict";
  @SerializedName(SERIALIZED_NAME_RC_R_A_STATE_DISTRICT)
  private String rcRAStateDistrict;

  public static final String SERIALIZED_NAME_RC_R_A_STATUS = "RCRAStatus";
  @SerializedName(SERIALIZED_NAME_RC_R_A_STATUS)
  private String rcRAStatus;

  public static final String SERIALIZED_NAME_RC_R_A_STREET = "RCRAStreet";
  @SerializedName(SERIALIZED_NAME_RC_R_A_STREET)
  private String rcRAStreet;

  public static final String SERIALIZED_NAME_RC_R_A_T_R_IBAL_LAND_CODE = "RCRATRIbalLandCode";
  @SerializedName(SERIALIZED_NAME_RC_R_A_T_R_IBAL_LAND_CODE)
  private String rcRATRIbalLandCode;

  public static final String SERIALIZED_NAME_RC_R_A_UNIVERSE = "RCRAUniverse";
  @SerializedName(SERIALIZED_NAME_RC_R_A_UNIVERSE)
  private String rcRAUniverse;

  public static final String SERIALIZED_NAME_RC_R_A_VIOLATION_TYPES = "RCRAViolationTypes";
  @SerializedName(SERIALIZED_NAME_RC_R_A_VIOLATION_TYPES)
  private String rcRAViolationTypes;

  public static final String SERIALIZED_NAME_RC_R_A_ZIP = "RCRAZip";
  @SerializedName(SERIALIZED_NAME_RC_R_A_ZIP)
  private String rcRAZip;

  public static final String SERIALIZED_NAME_RC_R_AINFO_LAND_TYPE_CODE = "RCRAinfoLandTypeCode";
  @SerializedName(SERIALIZED_NAME_RC_R_AINFO_LAND_TYPE_CODE)
  private String rcRAinfoLandTypeCode;

  public static final String SERIALIZED_NAME_RC_R_AINFO_LAND_TYPE_DESC = "RCRAinfoLandTypeDesc";
  @SerializedName(SERIALIZED_NAME_RC_R_AINFO_LAND_TYPE_DESC)
  private String rcRAinfoLandTypeDesc;

  public static final String SERIALIZED_NAME_REFERENCE_POINT = "ReferencePoint";
  @SerializedName(SERIALIZED_NAME_REFERENCE_POINT)
  private String referencePoint;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_RMP_I_DS = "RmpIDs";
  @SerializedName(SERIALIZED_NAME_RMP_I_DS)
  private String rmpIDs;

  public static final String SERIALIZED_NAME_SD_W_A_I_DS = "SDWAIDs";
  @SerializedName(SERIALIZED_NAME_SD_W_A_I_DS)
  private String sdWAIDs;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SEMS_I_DS = "SemsIDs";
  @SerializedName(SERIALIZED_NAME_SEMS_I_DS)
  private String semsIDs;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private String sourceID;

  public static final String SERIALIZED_NAME_STATUTE = "Statute";
  @SerializedName(SERIALIZED_NAME_STATUTE)
  private String statute;

  public static final String SERIALIZED_NAME_TR_I_I_DS = "TRIIDs";
  @SerializedName(SERIALIZED_NAME_TR_I_I_DS)
  private String trIIDs;

  public static final String SERIALIZED_NAME_TR_IBAL_FLAG = "TRIbalFlag";
  @SerializedName(SERIALIZED_NAME_TR_IBAL_FLAG)
  private String trIbalFlag;

  public static final String SERIALIZED_NAME_TSDF = "Tsdf";
  @SerializedName(SERIALIZED_NAME_TSDF)
  private String tsdf;

  public static final String SERIALIZED_NAME_VIOL_FLAG = "ViolFlag";
  @SerializedName(SERIALIZED_NAME_VIOL_FLAG)
  private String violFlag;

  public static final String SERIALIZED_NAME_WEB_DOCS = "WebDocs";
  @SerializedName(SERIALIZED_NAME_WEB_DOCS)
  private String webDocs;

  public Rcra07() {
  }

  public Rcra07 aiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
    return this;
  }

  /**
   * Air Facility System (AFS) ID.
   * @return aiRIDs
   */
  @javax.annotation.Nonnull
  public String getAiRIDs() {
    return aiRIDs;
  }

  public void setAiRIDs(String aiRIDs) {
    this.aiRIDs = aiRIDs;
  }


  public Rcra07 activeLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
    return this;
  }

  /**
   * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
   * @return activeLower48
   */
  @javax.annotation.Nonnull
  public String getActiveLower48() {
    return activeLower48;
  }

  public void setActiveLower48(String activeLower48) {
    this.activeLower48 = activeLower48;
  }


  public Rcra07 cwAIDs(String cwAIDs) {
    this.cwAIDs = cwAIDs;
    return this;
  }

  /**
   * A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
   * @return cwAIDs
   */
  @javax.annotation.Nonnull
  public String getCwAIDs() {
    return cwAIDs;
  }

  public void setCwAIDs(String cwAIDs) {
    this.cwAIDs = cwAIDs;
  }


  public Rcra07 calculatedAccuracyMeters(String calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
    return this;
  }

  /**
   * The estimated accuracy in Meters for the facility&#39;s geospatial coordinate.
   * @return calculatedAccuracyMeters
   */
  @javax.annotation.Nonnull
  public String getCalculatedAccuracyMeters() {
    return calculatedAccuracyMeters;
  }

  public void setCalculatedAccuracyMeters(String calculatedAccuracyMeters) {
    this.calculatedAccuracyMeters = calculatedAccuracyMeters;
  }


  public Rcra07 censusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
    return this;
  }

  /**
   * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
   * @return censusBlockGroup
   */
  @javax.annotation.Nonnull
  public String getCensusBlockGroup() {
    return censusBlockGroup;
  }

  public void setCensusBlockGroup(String censusBlockGroup) {
    this.censusBlockGroup = censusBlockGroup;
  }


  public Rcra07 chemNamesRelLand(String chemNamesRelLand) {
    this.chemNamesRelLand = chemNamesRelLand;
    return this;
  }

  /**
   * It is an aggregated field containing all the names found for the current reporting year (2017).
   * @return chemNamesRelLand
   */
  @javax.annotation.Nonnull
  public String getChemNamesRelLand() {
    return chemNamesRelLand;
  }

  public void setChemNamesRelLand(String chemNamesRelLand) {
    this.chemNamesRelLand = chemNamesRelLand;
  }


  public Rcra07 chesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
    return this;
  }

  /**
   * Displays \&quot;Y\&quot; if the facility is located within the Chesapeake Bay watershed.
   * @return chesapeakeBayFlag
   */
  @javax.annotation.Nonnull
  public String getChesapeakeBayFlag() {
    return chesapeakeBayFlag;
  }

  public void setChesapeakeBayFlag(String chesapeakeBayFlag) {
    this.chesapeakeBayFlag = chesapeakeBayFlag;
  }


  public Rcra07 cleanupActionFlag(String cleanupActionFlag) {
    this.cleanupActionFlag = cleanupActionFlag;
    return this;
  }

  /**
   * Get cleanupActionFlag
   * @return cleanupActionFlag
   */
  @javax.annotation.Nonnull
  public String getCleanupActionFlag() {
    return cleanupActionFlag;
  }

  public void setCleanupActionFlag(String cleanupActionFlag) {
    this.cleanupActionFlag = cleanupActionFlag;
  }


  public Rcra07 collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * ??
   * @return collectionMethod
   */
  @javax.annotation.Nonnull
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public Rcra07 currSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current significant violation. 1 &#x3D; Yes
   * @return currSvFlag
   */
  @javax.annotation.Nonnull
  public String getCurrSvFlag() {
    return currSvFlag;
  }

  public void setCurrSvFlag(String currSvFlag) {
    this.currSvFlag = currSvFlag;
  }


  public Rcra07 currVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current violation. 1 &#x3D; Yes
   * @return currVioFlag
   */
  @javax.annotation.Nonnull
  public String getCurrVioFlag() {
    return currVioFlag;
  }

  public void setCurrVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
  }


  public Rcra07 currentVioCnt(String currentVioCnt) {
    this.currentVioCnt = currentVioCnt;
    return this;
  }

  /**
   * Get currentVioCnt
   * @return currentVioCnt
   */
  @javax.annotation.Nonnull
  public String getCurrentVioCnt() {
    return currentVioCnt;
  }

  public void setCurrentVioCnt(String currentVioCnt) {
    this.currentVioCnt = currentVioCnt;
  }


  public Rcra07 dateLastRecordReview(String dateLastRecordReview) {
    this.dateLastRecordReview = dateLastRecordReview;
    return this;
  }

  /**
   * Get dateLastRecordReview
   * @return dateLastRecordReview
   */
  @javax.annotation.Nonnull
  public String getDateLastRecordReview() {
    return dateLastRecordReview;
  }

  public void setDateLastRecordReview(String dateLastRecordReview) {
    this.dateLastRecordReview = dateLastRecordReview;
  }


  public Rcra07 epASystem(String epASystem) {
    this.epASystem = epASystem;
    return this;
  }

  /**
   * The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
   * @return epASystem
   */
  @javax.annotation.Nonnull
  public String getEpASystem() {
    return epASystem;
  }

  public void setEpASystem(String epASystem) {
    this.epASystem = epASystem;
  }


  public Rcra07 ea5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes
   * @return ea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getEa5yrFlag() {
    return ea5yrFlag;
  }

  public void setEa5yrFlag(String ea5yrFlag) {
    this.ea5yrFlag = ea5yrFlag;
  }


  public Rcra07 ejscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlag
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlag() {
    return ejscreenFlag;
  }

  public void setEjscreenFlag(String ejscreenFlag) {
    this.ejscreenFlag = ejscreenFlag;
  }


  public Rcra07 ejscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
    return this;
  }

  /**
   * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
   * @return ejscreenFlagUs
   */
  @javax.annotation.Nonnull
  public String getEjscreenFlagUs() {
    return ejscreenFlagUs;
  }

  public void setEjscreenFlagUs(String ejscreenFlagUs) {
    this.ejscreenFlagUs = ejscreenFlagUs;
  }


  public Rcra07 facCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
    return this;
  }

  /**
   * The facility county name from EPA&#39;s Facility Registry System
   * @return facCountyName
   */
  @javax.annotation.Nonnull
  public String getFacCountyName() {
    return facCountyName;
  }

  public void setFacCountyName(String facCountyName) {
    this.facCountyName = facCountyName;
  }


  public Rcra07 facDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
    return this;
  }

  /**
   * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
   * @return facDerivedHuc
   */
  @javax.annotation.Nonnull
  public String getFacDerivedHuc() {
    return facDerivedHuc;
  }

  public void setFacDerivedHuc(String facDerivedHuc) {
    this.facDerivedHuc = facDerivedHuc;
  }


  public Rcra07 facDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
    return this;
  }

  /**
   * The tribes or tribal territories located within 25 miles of the facility&#39;s location.
   * @return facDerivedTRIbes
   */
  @javax.annotation.Nonnull
  public String getFacDerivedTRIbes() {
    return facDerivedTRIbes;
  }

  public void setFacDerivedTRIbes(String facDerivedTRIbes) {
    this.facDerivedTRIbes = facDerivedTRIbes;
  }


  public Rcra07 facDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
    return this;
  }

  /**
   * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
   * @return facDerivedWBD
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBD() {
    return facDerivedWBD;
  }

  public void setFacDerivedWBD(String facDerivedWBD) {
    this.facDerivedWBD = facDerivedWBD;
  }


  public Rcra07 facDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
    return this;
  }

  /**
   * The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
   * @return facDerivedWBDName
   */
  @javax.annotation.Nonnull
  public String getFacDerivedWBDName() {
    return facDerivedWBDName;
  }

  public void setFacDerivedWBDName(String facDerivedWBDName) {
    this.facDerivedWBDName = facDerivedWBDName;
  }


  public Rcra07 facFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
    return this;
  }

  /**
   * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
   * @return facFIPSCode
   */
  @javax.annotation.Nonnull
  public String getFacFIPSCode() {
    return facFIPSCode;
  }

  public void setFacFIPSCode(String facFIPSCode) {
    this.facFIPSCode = facFIPSCode;
  }


  public Rcra07 facFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
    return this;
  }

  /**
   * Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C &#x3D; Civilian Federal Agency; D &#x3D; Department of Defense; E &#x3D; Department of Energy; X &#x3D; Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
   * @return facFederalAgencyCode
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyCode() {
    return facFederalAgencyCode;
  }

  public void setFacFederalAgencyCode(String facFederalAgencyCode) {
    this.facFederalAgencyCode = facFederalAgencyCode;
  }


  public Rcra07 facFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
    return this;
  }

  /**
   * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
   * @return facFederalAgencyName
   */
  @javax.annotation.Nonnull
  public String getFacFederalAgencyName() {
    return facFederalAgencyName;
  }

  public void setFacFederalAgencyName(String facFederalAgencyName) {
    this.facFederalAgencyName = facFederalAgencyName;
  }


  public Rcra07 facIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
    return this;
  }

  /**
   * Flag showing Y/N whether the facility is located in Indian Country.
   * @return facIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianCntryFlg() {
    return facIndianCntryFlg;
  }

  public void setFacIndianCntryFlg(String facIndianCntryFlg) {
    this.facIndianCntryFlg = facIndianCntryFlg;
  }


  public Rcra07 facIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
    return this;
  }

  /**
   * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
   * @return facIndianSpatialFlg
   */
  @javax.annotation.Nonnull
  public String getFacIndianSpatialFlg() {
    return facIndianSpatialFlg;
  }

  public void setFacIndianSpatialFlg(String facIndianSpatialFlg) {
    this.facIndianSpatialFlg = facIndianSpatialFlg;
  }


  public Rcra07 facLat(String facLat) {
    this.facLat = facLat;
    return this;
  }

  /**
   * The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLat
   */
  @javax.annotation.Nonnull
  public String getFacLat() {
    return facLat;
  }

  public void setFacLat(String facLat) {
    this.facLat = facLat;
  }


  public Rcra07 facLong(String facLong) {
    this.facLong = facLong;
    return this;
  }

  /**
   * The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
   * @return facLong
   */
  @javax.annotation.Nonnull
  public String getFacLong() {
    return facLong;
  }

  public void setFacLong(String facLong) {
    this.facLong = facLong;
  }


  public Rcra07 facMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
    return this;
  }

  /**
   * Graphical indicator denoting whether geographical data required to map a facility are available.
   * @return facMapFlg
   */
  @javax.annotation.Nonnull
  public String getFacMapFlg() {
    return facMapFlg;
  }

  public void setFacMapFlg(String facMapFlg) {
    this.facMapFlg = facMapFlg;
  }


  public Rcra07 facMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
    return this;
  }

  /**
   * The default map icon image file calculated for the facility by the ECHO program.
   * @return facMapIcon
   */
  @javax.annotation.Nonnull
  public String getFacMapIcon() {
    return facMapIcon;
  }

  public void setFacMapIcon(String facMapIcon) {
    this.facMapIcon = facMapIcon;
  }


  public Rcra07 facPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
    return this;
  }

  /**
   * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
   * @return facPercentMinority
   */
  @javax.annotation.Nonnull
  public String getFacPercentMinority() {
    return facPercentMinority;
  }

  public void setFacPercentMinority(String facPercentMinority) {
    this.facPercentMinority = facPercentMinority;
  }


  public Rcra07 facPopulationDensity(String facPopulationDensity) {
    this.facPopulationDensity = facPopulationDensity;
    return this;
  }

  /**
   * The number of persons per square mile in the profiled area.
   * @return facPopulationDensity
   */
  @javax.annotation.Nonnull
  public String getFacPopulationDensity() {
    return facPopulationDensity;
  }

  public void setFacPopulationDensity(String facPopulationDensity) {
    this.facPopulationDensity = facPopulationDensity;
  }


  public Rcra07 facSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
    return this;
  }

  /**
   * Indicates the facility’s or permit&#39;s primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
   * @return facSICCodes
   */
  @javax.annotation.Nonnull
  public String getFacSICCodes() {
    return facSICCodes;
  }

  public void setFacSICCodes(String facSICCodes) {
    this.facSICCodes = facSICCodes;
  }


  public Rcra07 facStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
    return this;
  }

  /**
   * The standardized  facility county name from EPA&#39;s Facility Registry System
   * @return facStdCountyName
   */
  @javax.annotation.Nonnull
  public String getFacStdCountyName() {
    return facStdCountyName;
  }

  public void setFacStdCountyName(String facStdCountyName) {
    this.facStdCountyName = facStdCountyName;
  }


  public Rcra07 facTRILandReleases(String facTRILandReleases) {
    this.facTRILandReleases = facTRILandReleases;
    return this;
  }

  /**
   * Get facTRILandReleases
   * @return facTRILandReleases
   */
  @javax.annotation.Nonnull
  public String getFacTRILandReleases() {
    return facTRILandReleases;
  }

  public void setFacTRILandReleases(String facTRILandReleases) {
    this.facTRILandReleases = facTRILandReleases;
  }


  public Rcra07 facTRIOffSiteTransfers(String facTRIOffSiteTransfers) {
    this.facTRIOffSiteTransfers = facTRIOffSiteTransfers;
    return this;
  }

  /**
   * Get facTRIOffSiteTransfers
   * @return facTRIOffSiteTransfers
   */
  @javax.annotation.Nonnull
  public String getFacTRIOffSiteTransfers() {
    return facTRIOffSiteTransfers;
  }

  public void setFacTRIOffSiteTransfers(String facTRIOffSiteTransfers) {
    this.facTRIOffSiteTransfers = facTRIOffSiteTransfers;
  }


  public Rcra07 facTRIOnSiteReleases(String facTRIOnSiteReleases) {
    this.facTRIOnSiteReleases = facTRIOnSiteReleases;
    return this;
  }

  /**
   * Get facTRIOnSiteReleases
   * @return facTRIOnSiteReleases
   */
  @javax.annotation.Nonnull
  public String getFacTRIOnSiteReleases() {
    return facTRIOnSiteReleases;
  }

  public void setFacTRIOnSiteReleases(String facTRIOnSiteReleases) {
    this.facTRIOnSiteReleases = facTRIOnSiteReleases;
  }


  public Rcra07 facTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
    return this;
  }

  /**
   * Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
   * @return facTRIReporter
   */
  @javax.annotation.Nonnull
  public String getFacTRIReporter() {
    return facTRIReporter;
  }

  public void setFacTRIReporter(String facTRIReporter) {
    this.facTRIReporter = facTRIReporter;
  }


  public Rcra07 facUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
    return this;
  }

  /**
   * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
   * @return facUsMexBorderFlg
   */
  @javax.annotation.Nonnull
  public String getFacUsMexBorderFlg() {
    return facUsMexBorderFlg;
  }

  public void setFacUsMexBorderFlg(String facUsMexBorderFlg) {
    this.facUsMexBorderFlg = facUsMexBorderFlg;
  }


  public Rcra07 infea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.
   * @return infea5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInfea5yrFlag() {
    return infea5yrFlag;
  }

  public void setInfea5yrFlag(String infea5yrFlag) {
    this.infea5yrFlag = infea5yrFlag;
  }


  public Rcra07 insp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
   * @return insp5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInsp5yrFlag() {
    return insp5yrFlag;
  }

  public void setInsp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
  }


  public Rcra07 lastViolationDate(String lastViolationDate) {
    this.lastViolationDate = lastViolationDate;
    return this;
  }

  /**
   * Get lastViolationDate
   * @return lastViolationDate
   */
  @javax.annotation.Nonnull
  public String getLastViolationDate() {
    return lastViolationDate;
  }

  public void setLastViolationDate(String lastViolationDate) {
    this.lastViolationDate = lastViolationDate;
  }


  public Rcra07 lower48(String lower48) {
    this.lower48 = lower48;
    return this;
  }

  /**
   * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
   * @return lower48
   */
  @javax.annotation.Nonnull
  public String getLower48() {
    return lower48;
  }

  public void setLower48(String lower48) {
    this.lower48 = lower48;
  }


  public Rcra07 map(String map) {
    this.map = map;
    return this;
  }

  /**
   * No Longer Used.
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public Rcra07 maxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
    return this;
  }

  /**
   * The maximum percentile from all individual EJSCREEN indicators.
   * @return maxPctileUs
   */
  @javax.annotation.Nonnull
  public String getMaxPctileUs() {
    return maxPctileUs;
  }

  public void setMaxPctileUs(String maxPctileUs) {
    this.maxPctileUs = maxPctileUs;
  }


  public Rcra07 maxScore(String maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * A sorting score for internal use.
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public String getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(String maxScore) {
    this.maxScore = maxScore;
  }


  public Rcra07 objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * Sequential number assigned to each facility or cluster returned.
   * @return objectId
   */
  @javax.annotation.Nonnull
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public Rcra07 operatorCode(String operatorCode) {
    this.operatorCode = operatorCode;
    return this;
  }

  /**
   * Get operatorCode
   * @return operatorCode
   */
  @javax.annotation.Nonnull
  public String getOperatorCode() {
    return operatorCode;
  }

  public void setOperatorCode(String operatorCode) {
    this.operatorCode = operatorCode;
  }


  public Rcra07 operatorDesc(String operatorDesc) {
    this.operatorDesc = operatorDesc;
    return this;
  }

  /**
   * Get operatorDesc
   * @return operatorDesc
   */
  @javax.annotation.Nonnull
  public String getOperatorDesc() {
    return operatorDesc;
  }

  public void setOperatorDesc(String operatorDesc) {
    this.operatorDesc = operatorDesc;
  }


  public Rcra07 over80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
    return this;
  }

  /**
   * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
   * @return over80CountUs
   */
  @javax.annotation.Nonnull
  public String getOver80CountUs() {
    return over80CountUs;
  }

  public void setOver80CountUs(String over80CountUs) {
    this.over80CountUs = over80CountUs;
  }


  public Rcra07 ownerCode(String ownerCode) {
    this.ownerCode = ownerCode;
    return this;
  }

  /**
   * Get ownerCode
   * @return ownerCode
   */
  @javax.annotation.Nonnull
  public String getOwnerCode() {
    return ownerCode;
  }

  public void setOwnerCode(String ownerCode) {
    this.ownerCode = ownerCode;
  }


  public Rcra07 ownerDesc(String ownerDesc) {
    this.ownerDesc = ownerDesc;
    return this;
  }

  /**
   * Description of Owner code
   * @return ownerDesc
   */
  @javax.annotation.Nonnull
  public String getOwnerDesc() {
    return ownerDesc;
  }

  public void setOwnerDesc(String ownerDesc) {
    this.ownerDesc = ownerDesc;
  }


  public Rcra07 pctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
   * @return pctileCancerUs
   */
  @javax.annotation.Nonnull
  public String getPctileCancerUs() {
    return pctileCancerUs;
  }

  public void setPctileCancerUs(String pctileCancerUs) {
    this.pctileCancerUs = pctileCancerUs;
  }


  public Rcra07 pctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
   * @return pctileDpmUs
   */
  @javax.annotation.Nonnull
  public String getPctileDpmUs() {
    return pctileDpmUs;
  }

  public void setPctileDpmUs(String pctileDpmUs) {
    this.pctileDpmUs = pctileDpmUs;
  }


  public Rcra07 pctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN ozone indicator.
   * @return pctileO3Us
   */
  @javax.annotation.Nonnull
  public String getPctileO3Us() {
    return pctileO3Us;
  }

  public void setPctileO3Us(String pctileO3Us) {
    this.pctileO3Us = pctileO3Us;
  }


  public Rcra07 pctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
   * @return pctilePctpre1960Us
   */
  @javax.annotation.Nonnull
  public String getPctilePctpre1960Us() {
    return pctilePctpre1960Us;
  }

  public void setPctilePctpre1960Us(String pctilePctpre1960Us) {
    this.pctilePctpre1960Us = pctilePctpre1960Us;
  }


  public Rcra07 pctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
   * @return pctilePmUs
   */
  @javax.annotation.Nonnull
  public String getPctilePmUs() {
    return pctilePmUs;
  }

  public void setPctilePmUs(String pctilePmUs) {
    this.pctilePmUs = pctilePmUs;
  }


  public Rcra07 pctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
   * @return pctileProximityNPDESUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNPDESUs() {
    return pctileProximityNPDESUs;
  }

  public void setPctileProximityNPDESUs(String pctileProximityNPDESUs) {
    this.pctileProximityNPDESUs = pctileProximityNPDESUs;
  }


  public Rcra07 pctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
   * @return pctileProximityNplUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityNplUs() {
    return pctileProximityNplUs;
  }

  public void setPctileProximityNplUs(String pctileProximityNplUs) {
    this.pctileProximityNplUs = pctileProximityNplUs;
  }


  public Rcra07 pctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
   * @return pctileProximityRmpUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityRmpUs() {
    return pctileProximityRmpUs;
  }

  public void setPctileProximityRmpUs(String pctileProximityRmpUs) {
    this.pctileProximityRmpUs = pctileProximityRmpUs;
  }


  public Rcra07 pctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
   * @return pctileProximityTsdfUs
   */
  @javax.annotation.Nonnull
  public String getPctileProximityTsdfUs() {
    return pctileProximityTsdfUs;
  }

  public void setPctileProximityTsdfUs(String pctileProximityTsdfUs) {
    this.pctileProximityTsdfUs = pctileProximityTsdfUs;
  }


  public Rcra07 pctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
   * @return pctileRespUs
   */
  @javax.annotation.Nonnull
  public String getPctileRespUs() {
    return pctileRespUs;
  }

  public void setPctileRespUs(String pctileRespUs) {
    this.pctileRespUs = pctileRespUs;
  }


  public Rcra07 pctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
    return this;
  }

  /**
   * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
   * @return pctileTrafficScoreUs
   */
  @javax.annotation.Nonnull
  public String getPctileTrafficScoreUs() {
    return pctileTrafficScoreUs;
  }

  public void setPctileTrafficScoreUs(String pctileTrafficScoreUs) {
    this.pctileTrafficScoreUs = pctileTrafficScoreUs;
  }


  public Rcra07 rcRA3yrComplQtrsHistory(String rcRA3yrComplQtrsHistory) {
    this.rcRA3yrComplQtrsHistory = rcRA3yrComplQtrsHistory;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
   * @return rcRA3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getRcRA3yrComplQtrsHistory() {
    return rcRA3yrComplQtrsHistory;
  }

  public void setRcRA3yrComplQtrsHistory(String rcRA3yrComplQtrsHistory) {
    this.rcRA3yrComplQtrsHistory = rcRA3yrComplQtrsHistory;
  }


  public Rcra07 rcRACaseIDs(String rcRACaseIDs) {
    this.rcRACaseIDs = rcRACaseIDs;
    return this;
  }

  /**
   * Get rcRACaseIDs
   * @return rcRACaseIDs
   */
  @javax.annotation.Nonnull
  public String getRcRACaseIDs() {
    return rcRACaseIDs;
  }

  public void setRcRACaseIDs(String rcRACaseIDs) {
    this.rcRACaseIDs = rcRACaseIDs;
  }


  public Rcra07 rcRACity(String rcRACity) {
    this.rcRACity = rcRACity;
    return this;
  }

  /**
   * Get rcRACity
   * @return rcRACity
   */
  @javax.annotation.Nonnull
  public String getRcRACity() {
    return rcRACity;
  }

  public void setRcRACity(String rcRACity) {
    this.rcRACity = rcRACity;
  }


  public Rcra07 rcRAComplStatus(String rcRAComplStatus) {
    this.rcRAComplStatus = rcRAComplStatus;
    return this;
  }

  /**
   * Get rcRAComplStatus
   * @return rcRAComplStatus
   */
  @javax.annotation.Nonnull
  public String getRcRAComplStatus() {
    return rcRAComplStatus;
  }

  public void setRcRAComplStatus(String rcRAComplStatus) {
    this.rcRAComplStatus = rcRAComplStatus;
  }


  public Rcra07 rcRACounty(String rcRACounty) {
    this.rcRACounty = rcRACounty;
    return this;
  }

  /**
   * Get rcRACounty
   * @return rcRACounty
   */
  @javax.annotation.Nonnull
  public String getRcRACounty() {
    return rcRACounty;
  }

  public void setRcRACounty(String rcRACounty) {
    this.rcRACounty = rcRACounty;
  }


  public Rcra07 rcRADaysLastInspection(String rcRADaysLastInspection) {
    this.rcRADaysLastInspection = rcRADaysLastInspection;
    return this;
  }

  /**
   * Get rcRADaysLastInspection
   * @return rcRADaysLastInspection
   */
  @javax.annotation.Nonnull
  public String getRcRADaysLastInspection() {
    return rcRADaysLastInspection;
  }

  public void setRcRADaysLastInspection(String rcRADaysLastInspection) {
    this.rcRADaysLastInspection = rcRADaysLastInspection;
  }


  public Rcra07 rcRAEPARegion(String rcRAEPARegion) {
    this.rcRAEPARegion = rcRAEPARegion;
    return this;
  }

  /**
   * Get rcRAEPARegion
   * @return rcRAEPARegion
   */
  @javax.annotation.Nonnull
  public String getRcRAEPARegion() {
    return rcRAEPARegion;
  }

  public void setRcRAEPARegion(String rcRAEPARegion) {
    this.rcRAEPARegion = rcRAEPARegion;
  }


  public Rcra07 rcRAFIPSCode(String rcRAFIPSCode) {
    this.rcRAFIPSCode = rcRAFIPSCode;
    return this;
  }

  /**
   * Get rcRAFIPSCode
   * @return rcRAFIPSCode
   */
  @javax.annotation.Nonnull
  public String getRcRAFIPSCode() {
    return rcRAFIPSCode;
  }

  public void setRcRAFIPSCode(String rcRAFIPSCode) {
    this.rcRAFIPSCode = rcRAFIPSCode;
  }


  public Rcra07 rcRAFeaCnt(String rcRAFeaCnt) {
    this.rcRAFeaCnt = rcRAFeaCnt;
    return this;
  }

  /**
   * Get rcRAFeaCnt
   * @return rcRAFeaCnt
   */
  @javax.annotation.Nonnull
  public String getRcRAFeaCnt() {
    return rcRAFeaCnt;
  }

  public void setRcRAFeaCnt(String rcRAFeaCnt) {
    this.rcRAFeaCnt = rcRAFeaCnt;
  }


  public Rcra07 rcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
    return this;
  }

  /**
   * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
   * @return rcRAIDs
   */
  @javax.annotation.Nonnull
  public String getRcRAIDs() {
    return rcRAIDs;
  }

  public void setRcRAIDs(String rcRAIDs) {
    this.rcRAIDs = rcRAIDs;
  }


  public Rcra07 rcRAIeaCnt(String rcRAIeaCnt) {
    this.rcRAIeaCnt = rcRAIeaCnt;
    return this;
  }

  /**
   * Get rcRAIeaCnt
   * @return rcRAIeaCnt
   */
  @javax.annotation.Nonnull
  public String getRcRAIeaCnt() {
    return rcRAIeaCnt;
  }

  public void setRcRAIeaCnt(String rcRAIeaCnt) {
    this.rcRAIeaCnt = rcRAIeaCnt;
  }


  public Rcra07 rcRAImpWaterFlg(String rcRAImpWaterFlg) {
    this.rcRAImpWaterFlg = rcRAImpWaterFlg;
    return this;
  }

  /**
   * Get rcRAImpWaterFlg
   * @return rcRAImpWaterFlg
   */
  @javax.annotation.Nonnull
  public String getRcRAImpWaterFlg() {
    return rcRAImpWaterFlg;
  }

  public void setRcRAImpWaterFlg(String rcRAImpWaterFlg) {
    this.rcRAImpWaterFlg = rcRAImpWaterFlg;
  }


  public Rcra07 rcRAIndianCntryFlg(String rcRAIndianCntryFlg) {
    this.rcRAIndianCntryFlg = rcRAIndianCntryFlg;
    return this;
  }

  /**
   * Get rcRAIndianCntryFlg
   * @return rcRAIndianCntryFlg
   */
  @javax.annotation.Nonnull
  public String getRcRAIndianCntryFlg() {
    return rcRAIndianCntryFlg;
  }

  public void setRcRAIndianCntryFlg(String rcRAIndianCntryFlg) {
    this.rcRAIndianCntryFlg = rcRAIndianCntryFlg;
  }


  public Rcra07 rcRAInspCnt(String rcRAInspCnt) {
    this.rcRAInspCnt = rcRAInspCnt;
    return this;
  }

  /**
   * Get rcRAInspCnt
   * @return rcRAInspCnt
   */
  @javax.annotation.Nonnull
  public String getRcRAInspCnt() {
    return rcRAInspCnt;
  }

  public void setRcRAInspCnt(String rcRAInspCnt) {
    this.rcRAInspCnt = rcRAInspCnt;
  }


  public Rcra07 rcRALandTypeCode(String rcRALandTypeCode) {
    this.rcRALandTypeCode = rcRALandTypeCode;
    return this;
  }

  /**
   * Get rcRALandTypeCode
   * @return rcRALandTypeCode
   */
  @javax.annotation.Nonnull
  public String getRcRALandTypeCode() {
    return rcRALandTypeCode;
  }

  public void setRcRALandTypeCode(String rcRALandTypeCode) {
    this.rcRALandTypeCode = rcRALandTypeCode;
  }


  public Rcra07 rcRALastFeaDate(String rcRALastFeaDate) {
    this.rcRALastFeaDate = rcRALastFeaDate;
    return this;
  }

  /**
   * Get rcRALastFeaDate
   * @return rcRALastFeaDate
   */
  @javax.annotation.Nonnull
  public String getRcRALastFeaDate() {
    return rcRALastFeaDate;
  }

  public void setRcRALastFeaDate(String rcRALastFeaDate) {
    this.rcRALastFeaDate = rcRALastFeaDate;
  }


  public Rcra07 rcRALastFeaDateEPA(String rcRALastFeaDateEPA) {
    this.rcRALastFeaDateEPA = rcRALastFeaDateEPA;
    return this;
  }

  /**
   * Get rcRALastFeaDateEPA
   * @return rcRALastFeaDateEPA
   */
  @javax.annotation.Nonnull
  public String getRcRALastFeaDateEPA() {
    return rcRALastFeaDateEPA;
  }

  public void setRcRALastFeaDateEPA(String rcRALastFeaDateEPA) {
    this.rcRALastFeaDateEPA = rcRALastFeaDateEPA;
  }


  public Rcra07 rcRALastFeaDateState(String rcRALastFeaDateState) {
    this.rcRALastFeaDateState = rcRALastFeaDateState;
    return this;
  }

  /**
   * Get rcRALastFeaDateState
   * @return rcRALastFeaDateState
   */
  @javax.annotation.Nonnull
  public String getRcRALastFeaDateState() {
    return rcRALastFeaDateState;
  }

  public void setRcRALastFeaDateState(String rcRALastFeaDateState) {
    this.rcRALastFeaDateState = rcRALastFeaDateState;
  }


  public Rcra07 rcRALastIeaDate(String rcRALastIeaDate) {
    this.rcRALastIeaDate = rcRALastIeaDate;
    return this;
  }

  /**
   * Get rcRALastIeaDate
   * @return rcRALastIeaDate
   */
  @javax.annotation.Nonnull
  public String getRcRALastIeaDate() {
    return rcRALastIeaDate;
  }

  public void setRcRALastIeaDate(String rcRALastIeaDate) {
    this.rcRALastIeaDate = rcRALastIeaDate;
  }


  public Rcra07 rcRALastIeaDateEPA(String rcRALastIeaDateEPA) {
    this.rcRALastIeaDateEPA = rcRALastIeaDateEPA;
    return this;
  }

  /**
   * Get rcRALastIeaDateEPA
   * @return rcRALastIeaDateEPA
   */
  @javax.annotation.Nonnull
  public String getRcRALastIeaDateEPA() {
    return rcRALastIeaDateEPA;
  }

  public void setRcRALastIeaDateEPA(String rcRALastIeaDateEPA) {
    this.rcRALastIeaDateEPA = rcRALastIeaDateEPA;
  }


  public Rcra07 rcRALastIeaDateState(String rcRALastIeaDateState) {
    this.rcRALastIeaDateState = rcRALastIeaDateState;
    return this;
  }

  /**
   * Get rcRALastIeaDateState
   * @return rcRALastIeaDateState
   */
  @javax.annotation.Nonnull
  public String getRcRALastIeaDateState() {
    return rcRALastIeaDateState;
  }

  public void setRcRALastIeaDateState(String rcRALastIeaDateState) {
    this.rcRALastIeaDateState = rcRALastIeaDateState;
  }


  public Rcra07 rcRALastInspDateEPA(String rcRALastInspDateEPA) {
    this.rcRALastInspDateEPA = rcRALastInspDateEPA;
    return this;
  }

  /**
   * Get rcRALastInspDateEPA
   * @return rcRALastInspDateEPA
   */
  @javax.annotation.Nonnull
  public String getRcRALastInspDateEPA() {
    return rcRALastInspDateEPA;
  }

  public void setRcRALastInspDateEPA(String rcRALastInspDateEPA) {
    this.rcRALastInspDateEPA = rcRALastInspDateEPA;
  }


  public Rcra07 rcRALastInspDateState(String rcRALastInspDateState) {
    this.rcRALastInspDateState = rcRALastInspDateState;
    return this;
  }

  /**
   * Get rcRALastInspDateState
   * @return rcRALastInspDateState
   */
  @javax.annotation.Nonnull
  public String getRcRALastInspDateState() {
    return rcRALastInspDateState;
  }

  public void setRcRALastInspDateState(String rcRALastInspDateState) {
    this.rcRALastInspDateState = rcRALastInspDateState;
  }


  public Rcra07 rcRALastInspectionDate(String rcRALastInspectionDate) {
    this.rcRALastInspectionDate = rcRALastInspectionDate;
    return this;
  }

  /**
   * Get rcRALastInspectionDate
   * @return rcRALastInspectionDate
   */
  @javax.annotation.Nonnull
  public String getRcRALastInspectionDate() {
    return rcRALastInspectionDate;
  }

  public void setRcRALastInspectionDate(String rcRALastInspectionDate) {
    this.rcRALastInspectionDate = rcRALastInspectionDate;
  }


  public Rcra07 rcRALastPenaltyDate(String rcRALastPenaltyDate) {
    this.rcRALastPenaltyDate = rcRALastPenaltyDate;
    return this;
  }

  /**
   * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
   * @return rcRALastPenaltyDate
   */
  @javax.annotation.Nonnull
  public String getRcRALastPenaltyDate() {
    return rcRALastPenaltyDate;
  }

  public void setRcRALastPenaltyDate(String rcRALastPenaltyDate) {
    this.rcRALastPenaltyDate = rcRALastPenaltyDate;
  }


  public Rcra07 rcRAMapIcon(String rcRAMapIcon) {
    this.rcRAMapIcon = rcRAMapIcon;
    return this;
  }

  /**
   * Get rcRAMapIcon
   * @return rcRAMapIcon
   */
  @javax.annotation.Nonnull
  public String getRcRAMapIcon() {
    return rcRAMapIcon;
  }

  public void setRcRAMapIcon(String rcRAMapIcon) {
    this.rcRAMapIcon = rcRAMapIcon;
  }


  public Rcra07 RCRANAICS(String RCRANAICS) {
    this.RCRANAICS = RCRANAICS;
    return this;
  }

  /**
   * The RCRA permit&#39;s primary North American Industry Classification System (NAICS) Code.
   * @return RCRANAICS
   */
  @javax.annotation.Nonnull
  public String getRCRANAICS() {
    return RCRANAICS;
  }

  public void setRCRANAICS(String RCRANAICS) {
    this.RCRANAICS = RCRANAICS;
  }


  public Rcra07 rcRAName(String rcRAName) {
    this.rcRAName = rcRAName;
    return this;
  }

  /**
   * Get rcRAName
   * @return rcRAName
   */
  @javax.annotation.Nonnull
  public String getRcRAName() {
    return rcRAName;
  }

  public void setRcRAName(String rcRAName) {
    this.rcRAName = rcRAName;
  }


  public Rcra07 rcRAOldestOpenVioDate(String rcRAOldestOpenVioDate) {
    this.rcRAOldestOpenVioDate = rcRAOldestOpenVioDate;
    return this;
  }

  /**
   * Get rcRAOldestOpenVioDate
   * @return rcRAOldestOpenVioDate
   */
  @javax.annotation.Nonnull
  public String getRcRAOldestOpenVioDate() {
    return rcRAOldestOpenVioDate;
  }

  public void setRcRAOldestOpenVioDate(String rcRAOldestOpenVioDate) {
    this.rcRAOldestOpenVioDate = rcRAOldestOpenVioDate;
  }


  public Rcra07 rcRAPenalties(String rcRAPenalties) {
    this.rcRAPenalties = rcRAPenalties;
    return this;
  }

  /**
   * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
   * @return rcRAPenalties
   */
  @javax.annotation.Nonnull
  public String getRcRAPenalties() {
    return rcRAPenalties;
  }

  public void setRcRAPenalties(String rcRAPenalties) {
    this.rcRAPenalties = rcRAPenalties;
  }


  public Rcra07 rcRAQtrsWithNC(String rcRAQtrsWithNC) {
    this.rcRAQtrsWithNC = rcRAQtrsWithNC;
    return this;
  }

  /**
   * The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
   * @return rcRAQtrsWithNC
   */
  @javax.annotation.Nonnull
  public String getRcRAQtrsWithNC() {
    return rcRAQtrsWithNC;
  }

  public void setRcRAQtrsWithNC(String rcRAQtrsWithNC) {
    this.rcRAQtrsWithNC = rcRAQtrsWithNC;
  }


  public Rcra07 rcRAQtrsWithSNC(String rcRAQtrsWithSNC) {
    this.rcRAQtrsWithSNC = rcRAQtrsWithSNC;
    return this;
  }

  /**
   * Get rcRAQtrsWithSNC
   * @return rcRAQtrsWithSNC
   */
  @javax.annotation.Nonnull
  public String getRcRAQtrsWithSNC() {
    return rcRAQtrsWithSNC;
  }

  public void setRcRAQtrsWithSNC(String rcRAQtrsWithSNC) {
    this.rcRAQtrsWithSNC = rcRAQtrsWithSNC;
  }


  public Rcra07 RCRASNC(String RCRASNC) {
    this.RCRASNC = RCRASNC;
    return this;
  }

  /**
   * Get RCRASNC
   * @return RCRASNC
   */
  @javax.annotation.Nonnull
  public String getRCRASNC() {
    return RCRASNC;
  }

  public void setRCRASNC(String RCRASNC) {
    this.RCRASNC = RCRASNC;
  }


  public Rcra07 rcRAState(String rcRAState) {
    this.rcRAState = rcRAState;
    return this;
  }

  /**
   * Get rcRAState
   * @return rcRAState
   */
  @javax.annotation.Nonnull
  public String getRcRAState() {
    return rcRAState;
  }

  public void setRcRAState(String rcRAState) {
    this.rcRAState = rcRAState;
  }


  public Rcra07 rcRAStateDistrict(String rcRAStateDistrict) {
    this.rcRAStateDistrict = rcRAStateDistrict;
    return this;
  }

  /**
   * Get rcRAStateDistrict
   * @return rcRAStateDistrict
   */
  @javax.annotation.Nonnull
  public String getRcRAStateDistrict() {
    return rcRAStateDistrict;
  }

  public void setRcRAStateDistrict(String rcRAStateDistrict) {
    this.rcRAStateDistrict = rcRAStateDistrict;
  }


  public Rcra07 rcRAStatus(String rcRAStatus) {
    this.rcRAStatus = rcRAStatus;
    return this;
  }

  /**
   * Get rcRAStatus
   * @return rcRAStatus
   */
  @javax.annotation.Nonnull
  public String getRcRAStatus() {
    return rcRAStatus;
  }

  public void setRcRAStatus(String rcRAStatus) {
    this.rcRAStatus = rcRAStatus;
  }


  public Rcra07 rcRAStreet(String rcRAStreet) {
    this.rcRAStreet = rcRAStreet;
    return this;
  }

  /**
   * Get rcRAStreet
   * @return rcRAStreet
   */
  @javax.annotation.Nonnull
  public String getRcRAStreet() {
    return rcRAStreet;
  }

  public void setRcRAStreet(String rcRAStreet) {
    this.rcRAStreet = rcRAStreet;
  }


  public Rcra07 rcRATRIbalLandCode(String rcRATRIbalLandCode) {
    this.rcRATRIbalLandCode = rcRATRIbalLandCode;
    return this;
  }

  /**
   * Get rcRATRIbalLandCode
   * @return rcRATRIbalLandCode
   */
  @javax.annotation.Nonnull
  public String getRcRATRIbalLandCode() {
    return rcRATRIbalLandCode;
  }

  public void setRcRATRIbalLandCode(String rcRATRIbalLandCode) {
    this.rcRATRIbalLandCode = rcRATRIbalLandCode;
  }


  public Rcra07 rcRAUniverse(String rcRAUniverse) {
    this.rcRAUniverse = rcRAUniverse;
    return this;
  }

  /**
   * Get rcRAUniverse
   * @return rcRAUniverse
   */
  @javax.annotation.Nonnull
  public String getRcRAUniverse() {
    return rcRAUniverse;
  }

  public void setRcRAUniverse(String rcRAUniverse) {
    this.rcRAUniverse = rcRAUniverse;
  }


  public Rcra07 rcRAViolationTypes(String rcRAViolationTypes) {
    this.rcRAViolationTypes = rcRAViolationTypes;
    return this;
  }

  /**
   * Get rcRAViolationTypes
   * @return rcRAViolationTypes
   */
  @javax.annotation.Nonnull
  public String getRcRAViolationTypes() {
    return rcRAViolationTypes;
  }

  public void setRcRAViolationTypes(String rcRAViolationTypes) {
    this.rcRAViolationTypes = rcRAViolationTypes;
  }


  public Rcra07 rcRAZip(String rcRAZip) {
    this.rcRAZip = rcRAZip;
    return this;
  }

  /**
   * Get rcRAZip
   * @return rcRAZip
   */
  @javax.annotation.Nonnull
  public String getRcRAZip() {
    return rcRAZip;
  }

  public void setRcRAZip(String rcRAZip) {
    this.rcRAZip = rcRAZip;
  }


  public Rcra07 rcRAinfoLandTypeCode(String rcRAinfoLandTypeCode) {
    this.rcRAinfoLandTypeCode = rcRAinfoLandTypeCode;
    return this;
  }

  /**
   * Get rcRAinfoLandTypeCode
   * @return rcRAinfoLandTypeCode
   */
  @javax.annotation.Nonnull
  public String getRcRAinfoLandTypeCode() {
    return rcRAinfoLandTypeCode;
  }

  public void setRcRAinfoLandTypeCode(String rcRAinfoLandTypeCode) {
    this.rcRAinfoLandTypeCode = rcRAinfoLandTypeCode;
  }


  public Rcra07 rcRAinfoLandTypeDesc(String rcRAinfoLandTypeDesc) {
    this.rcRAinfoLandTypeDesc = rcRAinfoLandTypeDesc;
    return this;
  }

  /**
   * Get rcRAinfoLandTypeDesc
   * @return rcRAinfoLandTypeDesc
   */
  @javax.annotation.Nonnull
  public String getRcRAinfoLandTypeDesc() {
    return rcRAinfoLandTypeDesc;
  }

  public void setRcRAinfoLandTypeDesc(String rcRAinfoLandTypeDesc) {
    this.rcRAinfoLandTypeDesc = rcRAinfoLandTypeDesc;
  }


  public Rcra07 referencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
    return this;
  }

  /**
   * ??
   * @return referencePoint
   */
  @javax.annotation.Nonnull
  public String getReferencePoint() {
    return referencePoint;
  }

  public void setReferencePoint(String referencePoint) {
    this.referencePoint = referencePoint;
  }


  public Rcra07 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Rcra07 rmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
    return this;
  }

  /**
   * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
   * @return rmpIDs
   */
  @javax.annotation.Nonnull
  public String getRmpIDs() {
    return rmpIDs;
  }

  public void setRmpIDs(String rmpIDs) {
    this.rmpIDs = rmpIDs;
  }


  public Rcra07 sdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
    return this;
  }

  /**
   * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
   * @return sdWAIDs
   */
  @javax.annotation.Nonnull
  public String getSdWAIDs() {
    return sdWAIDs;
  }

  public void setSdWAIDs(String sdWAIDs) {
    this.sdWAIDs = sdWAIDs;
  }


  public Rcra07 score(String score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public Rcra07 semsIDs(String semsIDs) {
    this.semsIDs = semsIDs;
    return this;
  }

  /**
   * Get semsIDs
   * @return semsIDs
   */
  @javax.annotation.Nonnull
  public String getSemsIDs() {
    return semsIDs;
  }

  public void setSemsIDs(String semsIDs) {
    this.semsIDs = semsIDs;
  }


  public Rcra07 sourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * Unique Identifier assigned by EPA.
   * @return sourceID
   */
  @javax.annotation.Nonnull
  public String getSourceID() {
    return sourceID;
  }

  public void setSourceID(String sourceID) {
    this.sourceID = sourceID;
  }


  public Rcra07 statute(String statute) {
    this.statute = statute;
    return this;
  }

  /**
   * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
   * @return statute
   */
  @javax.annotation.Nonnull
  public String getStatute() {
    return statute;
  }

  public void setStatute(String statute) {
    this.statute = statute;
  }


  public Rcra07 trIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
    return this;
  }

  /**
   * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.
   * @return trIIDs
   */
  @javax.annotation.Nonnull
  public String getTrIIDs() {
    return trIIDs;
  }

  public void setTrIIDs(String trIIDs) {
    this.trIIDs = trIIDs;
  }


  public Rcra07 trIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
    return this;
  }

  /**
   * A flag indicating that the facility is within a tribal area.
   * @return trIbalFlag
   */
  @javax.annotation.Nonnull
  public String getTrIbalFlag() {
    return trIbalFlag;
  }

  public void setTrIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
  }


  public Rcra07 tsdf(String tsdf) {
    this.tsdf = tsdf;
    return this;
  }

  /**
   * Get tsdf
   * @return tsdf
   */
  @javax.annotation.Nonnull
  public String getTsdf() {
    return tsdf;
  }

  public void setTsdf(String tsdf) {
    this.tsdf = tsdf;
  }


  public Rcra07 violFlag(String violFlag) {
    this.violFlag = violFlag;
    return this;
  }

  /**
   * Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes
   * @return violFlag
   */
  @javax.annotation.Nonnull
  public String getViolFlag() {
    return violFlag;
  }

  public void setViolFlag(String violFlag) {
    this.violFlag = violFlag;
  }


  public Rcra07 webDocs(String webDocs) {
    this.webDocs = webDocs;
    return this;
  }

  /**
   * Contains flags that identify what web accessible documents are available for the facility.
   * @return webDocs
   */
  @javax.annotation.Nonnull
  public String getWebDocs() {
    return webDocs;
  }

  public void setWebDocs(String webDocs) {
    this.webDocs = webDocs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rcra07 rcra07 = (Rcra07) o;
    return Objects.equals(this.aiRIDs, rcra07.aiRIDs) &&
        Objects.equals(this.activeLower48, rcra07.activeLower48) &&
        Objects.equals(this.cwAIDs, rcra07.cwAIDs) &&
        Objects.equals(this.calculatedAccuracyMeters, rcra07.calculatedAccuracyMeters) &&
        Objects.equals(this.censusBlockGroup, rcra07.censusBlockGroup) &&
        Objects.equals(this.chemNamesRelLand, rcra07.chemNamesRelLand) &&
        Objects.equals(this.chesapeakeBayFlag, rcra07.chesapeakeBayFlag) &&
        Objects.equals(this.cleanupActionFlag, rcra07.cleanupActionFlag) &&
        Objects.equals(this.collectionMethod, rcra07.collectionMethod) &&
        Objects.equals(this.currSvFlag, rcra07.currSvFlag) &&
        Objects.equals(this.currVioFlag, rcra07.currVioFlag) &&
        Objects.equals(this.currentVioCnt, rcra07.currentVioCnt) &&
        Objects.equals(this.dateLastRecordReview, rcra07.dateLastRecordReview) &&
        Objects.equals(this.epASystem, rcra07.epASystem) &&
        Objects.equals(this.ea5yrFlag, rcra07.ea5yrFlag) &&
        Objects.equals(this.ejscreenFlag, rcra07.ejscreenFlag) &&
        Objects.equals(this.ejscreenFlagUs, rcra07.ejscreenFlagUs) &&
        Objects.equals(this.facCountyName, rcra07.facCountyName) &&
        Objects.equals(this.facDerivedHuc, rcra07.facDerivedHuc) &&
        Objects.equals(this.facDerivedTRIbes, rcra07.facDerivedTRIbes) &&
        Objects.equals(this.facDerivedWBD, rcra07.facDerivedWBD) &&
        Objects.equals(this.facDerivedWBDName, rcra07.facDerivedWBDName) &&
        Objects.equals(this.facFIPSCode, rcra07.facFIPSCode) &&
        Objects.equals(this.facFederalAgencyCode, rcra07.facFederalAgencyCode) &&
        Objects.equals(this.facFederalAgencyName, rcra07.facFederalAgencyName) &&
        Objects.equals(this.facIndianCntryFlg, rcra07.facIndianCntryFlg) &&
        Objects.equals(this.facIndianSpatialFlg, rcra07.facIndianSpatialFlg) &&
        Objects.equals(this.facLat, rcra07.facLat) &&
        Objects.equals(this.facLong, rcra07.facLong) &&
        Objects.equals(this.facMapFlg, rcra07.facMapFlg) &&
        Objects.equals(this.facMapIcon, rcra07.facMapIcon) &&
        Objects.equals(this.facPercentMinority, rcra07.facPercentMinority) &&
        Objects.equals(this.facPopulationDensity, rcra07.facPopulationDensity) &&
        Objects.equals(this.facSICCodes, rcra07.facSICCodes) &&
        Objects.equals(this.facStdCountyName, rcra07.facStdCountyName) &&
        Objects.equals(this.facTRILandReleases, rcra07.facTRILandReleases) &&
        Objects.equals(this.facTRIOffSiteTransfers, rcra07.facTRIOffSiteTransfers) &&
        Objects.equals(this.facTRIOnSiteReleases, rcra07.facTRIOnSiteReleases) &&
        Objects.equals(this.facTRIReporter, rcra07.facTRIReporter) &&
        Objects.equals(this.facUsMexBorderFlg, rcra07.facUsMexBorderFlg) &&
        Objects.equals(this.infea5yrFlag, rcra07.infea5yrFlag) &&
        Objects.equals(this.insp5yrFlag, rcra07.insp5yrFlag) &&
        Objects.equals(this.lastViolationDate, rcra07.lastViolationDate) &&
        Objects.equals(this.lower48, rcra07.lower48) &&
        Objects.equals(this.map, rcra07.map) &&
        Objects.equals(this.maxPctileUs, rcra07.maxPctileUs) &&
        Objects.equals(this.maxScore, rcra07.maxScore) &&
        Objects.equals(this.objectId, rcra07.objectId) &&
        Objects.equals(this.operatorCode, rcra07.operatorCode) &&
        Objects.equals(this.operatorDesc, rcra07.operatorDesc) &&
        Objects.equals(this.over80CountUs, rcra07.over80CountUs) &&
        Objects.equals(this.ownerCode, rcra07.ownerCode) &&
        Objects.equals(this.ownerDesc, rcra07.ownerDesc) &&
        Objects.equals(this.pctileCancerUs, rcra07.pctileCancerUs) &&
        Objects.equals(this.pctileDpmUs, rcra07.pctileDpmUs) &&
        Objects.equals(this.pctileO3Us, rcra07.pctileO3Us) &&
        Objects.equals(this.pctilePctpre1960Us, rcra07.pctilePctpre1960Us) &&
        Objects.equals(this.pctilePmUs, rcra07.pctilePmUs) &&
        Objects.equals(this.pctileProximityNPDESUs, rcra07.pctileProximityNPDESUs) &&
        Objects.equals(this.pctileProximityNplUs, rcra07.pctileProximityNplUs) &&
        Objects.equals(this.pctileProximityRmpUs, rcra07.pctileProximityRmpUs) &&
        Objects.equals(this.pctileProximityTsdfUs, rcra07.pctileProximityTsdfUs) &&
        Objects.equals(this.pctileRespUs, rcra07.pctileRespUs) &&
        Objects.equals(this.pctileTrafficScoreUs, rcra07.pctileTrafficScoreUs) &&
        Objects.equals(this.rcRA3yrComplQtrsHistory, rcra07.rcRA3yrComplQtrsHistory) &&
        Objects.equals(this.rcRACaseIDs, rcra07.rcRACaseIDs) &&
        Objects.equals(this.rcRACity, rcra07.rcRACity) &&
        Objects.equals(this.rcRAComplStatus, rcra07.rcRAComplStatus) &&
        Objects.equals(this.rcRACounty, rcra07.rcRACounty) &&
        Objects.equals(this.rcRADaysLastInspection, rcra07.rcRADaysLastInspection) &&
        Objects.equals(this.rcRAEPARegion, rcra07.rcRAEPARegion) &&
        Objects.equals(this.rcRAFIPSCode, rcra07.rcRAFIPSCode) &&
        Objects.equals(this.rcRAFeaCnt, rcra07.rcRAFeaCnt) &&
        Objects.equals(this.rcRAIDs, rcra07.rcRAIDs) &&
        Objects.equals(this.rcRAIeaCnt, rcra07.rcRAIeaCnt) &&
        Objects.equals(this.rcRAImpWaterFlg, rcra07.rcRAImpWaterFlg) &&
        Objects.equals(this.rcRAIndianCntryFlg, rcra07.rcRAIndianCntryFlg) &&
        Objects.equals(this.rcRAInspCnt, rcra07.rcRAInspCnt) &&
        Objects.equals(this.rcRALandTypeCode, rcra07.rcRALandTypeCode) &&
        Objects.equals(this.rcRALastFeaDate, rcra07.rcRALastFeaDate) &&
        Objects.equals(this.rcRALastFeaDateEPA, rcra07.rcRALastFeaDateEPA) &&
        Objects.equals(this.rcRALastFeaDateState, rcra07.rcRALastFeaDateState) &&
        Objects.equals(this.rcRALastIeaDate, rcra07.rcRALastIeaDate) &&
        Objects.equals(this.rcRALastIeaDateEPA, rcra07.rcRALastIeaDateEPA) &&
        Objects.equals(this.rcRALastIeaDateState, rcra07.rcRALastIeaDateState) &&
        Objects.equals(this.rcRALastInspDateEPA, rcra07.rcRALastInspDateEPA) &&
        Objects.equals(this.rcRALastInspDateState, rcra07.rcRALastInspDateState) &&
        Objects.equals(this.rcRALastInspectionDate, rcra07.rcRALastInspectionDate) &&
        Objects.equals(this.rcRALastPenaltyDate, rcra07.rcRALastPenaltyDate) &&
        Objects.equals(this.rcRAMapIcon, rcra07.rcRAMapIcon) &&
        Objects.equals(this.RCRANAICS, rcra07.RCRANAICS) &&
        Objects.equals(this.rcRAName, rcra07.rcRAName) &&
        Objects.equals(this.rcRAOldestOpenVioDate, rcra07.rcRAOldestOpenVioDate) &&
        Objects.equals(this.rcRAPenalties, rcra07.rcRAPenalties) &&
        Objects.equals(this.rcRAQtrsWithNC, rcra07.rcRAQtrsWithNC) &&
        Objects.equals(this.rcRAQtrsWithSNC, rcra07.rcRAQtrsWithSNC) &&
        Objects.equals(this.RCRASNC, rcra07.RCRASNC) &&
        Objects.equals(this.rcRAState, rcra07.rcRAState) &&
        Objects.equals(this.rcRAStateDistrict, rcra07.rcRAStateDistrict) &&
        Objects.equals(this.rcRAStatus, rcra07.rcRAStatus) &&
        Objects.equals(this.rcRAStreet, rcra07.rcRAStreet) &&
        Objects.equals(this.rcRATRIbalLandCode, rcra07.rcRATRIbalLandCode) &&
        Objects.equals(this.rcRAUniverse, rcra07.rcRAUniverse) &&
        Objects.equals(this.rcRAViolationTypes, rcra07.rcRAViolationTypes) &&
        Objects.equals(this.rcRAZip, rcra07.rcRAZip) &&
        Objects.equals(this.rcRAinfoLandTypeCode, rcra07.rcRAinfoLandTypeCode) &&
        Objects.equals(this.rcRAinfoLandTypeDesc, rcra07.rcRAinfoLandTypeDesc) &&
        Objects.equals(this.referencePoint, rcra07.referencePoint) &&
        Objects.equals(this.registryID, rcra07.registryID) &&
        Objects.equals(this.rmpIDs, rcra07.rmpIDs) &&
        Objects.equals(this.sdWAIDs, rcra07.sdWAIDs) &&
        Objects.equals(this.score, rcra07.score) &&
        Objects.equals(this.semsIDs, rcra07.semsIDs) &&
        Objects.equals(this.sourceID, rcra07.sourceID) &&
        Objects.equals(this.statute, rcra07.statute) &&
        Objects.equals(this.trIIDs, rcra07.trIIDs) &&
        Objects.equals(this.trIbalFlag, rcra07.trIbalFlag) &&
        Objects.equals(this.tsdf, rcra07.tsdf) &&
        Objects.equals(this.violFlag, rcra07.violFlag) &&
        Objects.equals(this.webDocs, rcra07.webDocs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiRIDs, activeLower48, cwAIDs, calculatedAccuracyMeters, censusBlockGroup, chemNamesRelLand, chesapeakeBayFlag, cleanupActionFlag, collectionMethod, currSvFlag, currVioFlag, currentVioCnt, dateLastRecordReview, epASystem, ea5yrFlag, ejscreenFlag, ejscreenFlagUs, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facIndianCntryFlg, facIndianSpatialFlg, facLat, facLong, facMapFlg, facMapIcon, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRILandReleases, facTRIOffSiteTransfers, facTRIOnSiteReleases, facTRIReporter, facUsMexBorderFlg, infea5yrFlag, insp5yrFlag, lastViolationDate, lower48, map, maxPctileUs, maxScore, objectId, operatorCode, operatorDesc, over80CountUs, ownerCode, ownerDesc, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rcRA3yrComplQtrsHistory, rcRACaseIDs, rcRACity, rcRAComplStatus, rcRACounty, rcRADaysLastInspection, rcRAEPARegion, rcRAFIPSCode, rcRAFeaCnt, rcRAIDs, rcRAIeaCnt, rcRAImpWaterFlg, rcRAIndianCntryFlg, rcRAInspCnt, rcRALandTypeCode, rcRALastFeaDate, rcRALastFeaDateEPA, rcRALastFeaDateState, rcRALastIeaDate, rcRALastIeaDateEPA, rcRALastIeaDateState, rcRALastInspDateEPA, rcRALastInspDateState, rcRALastInspectionDate, rcRALastPenaltyDate, rcRAMapIcon, RCRANAICS, rcRAName, rcRAOldestOpenVioDate, rcRAPenalties, rcRAQtrsWithNC, rcRAQtrsWithSNC, RCRASNC, rcRAState, rcRAStateDistrict, rcRAStatus, rcRAStreet, rcRATRIbalLandCode, rcRAUniverse, rcRAViolationTypes, rcRAZip, rcRAinfoLandTypeCode, rcRAinfoLandTypeDesc, referencePoint, registryID, rmpIDs, sdWAIDs, score, semsIDs, sourceID, statute, trIIDs, trIbalFlag, tsdf, violFlag, webDocs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rcra07 {\n");
    sb.append("    aiRIDs: ").append(toIndentedString(aiRIDs)).append("\n");
    sb.append("    activeLower48: ").append(toIndentedString(activeLower48)).append("\n");
    sb.append("    cwAIDs: ").append(toIndentedString(cwAIDs)).append("\n");
    sb.append("    calculatedAccuracyMeters: ").append(toIndentedString(calculatedAccuracyMeters)).append("\n");
    sb.append("    censusBlockGroup: ").append(toIndentedString(censusBlockGroup)).append("\n");
    sb.append("    chemNamesRelLand: ").append(toIndentedString(chemNamesRelLand)).append("\n");
    sb.append("    chesapeakeBayFlag: ").append(toIndentedString(chesapeakeBayFlag)).append("\n");
    sb.append("    cleanupActionFlag: ").append(toIndentedString(cleanupActionFlag)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    currSvFlag: ").append(toIndentedString(currSvFlag)).append("\n");
    sb.append("    currVioFlag: ").append(toIndentedString(currVioFlag)).append("\n");
    sb.append("    currentVioCnt: ").append(toIndentedString(currentVioCnt)).append("\n");
    sb.append("    dateLastRecordReview: ").append(toIndentedString(dateLastRecordReview)).append("\n");
    sb.append("    epASystem: ").append(toIndentedString(epASystem)).append("\n");
    sb.append("    ea5yrFlag: ").append(toIndentedString(ea5yrFlag)).append("\n");
    sb.append("    ejscreenFlag: ").append(toIndentedString(ejscreenFlag)).append("\n");
    sb.append("    ejscreenFlagUs: ").append(toIndentedString(ejscreenFlagUs)).append("\n");
    sb.append("    facCountyName: ").append(toIndentedString(facCountyName)).append("\n");
    sb.append("    facDerivedHuc: ").append(toIndentedString(facDerivedHuc)).append("\n");
    sb.append("    facDerivedTRIbes: ").append(toIndentedString(facDerivedTRIbes)).append("\n");
    sb.append("    facDerivedWBD: ").append(toIndentedString(facDerivedWBD)).append("\n");
    sb.append("    facDerivedWBDName: ").append(toIndentedString(facDerivedWBDName)).append("\n");
    sb.append("    facFIPSCode: ").append(toIndentedString(facFIPSCode)).append("\n");
    sb.append("    facFederalAgencyCode: ").append(toIndentedString(facFederalAgencyCode)).append("\n");
    sb.append("    facFederalAgencyName: ").append(toIndentedString(facFederalAgencyName)).append("\n");
    sb.append("    facIndianCntryFlg: ").append(toIndentedString(facIndianCntryFlg)).append("\n");
    sb.append("    facIndianSpatialFlg: ").append(toIndentedString(facIndianSpatialFlg)).append("\n");
    sb.append("    facLat: ").append(toIndentedString(facLat)).append("\n");
    sb.append("    facLong: ").append(toIndentedString(facLong)).append("\n");
    sb.append("    facMapFlg: ").append(toIndentedString(facMapFlg)).append("\n");
    sb.append("    facMapIcon: ").append(toIndentedString(facMapIcon)).append("\n");
    sb.append("    facPercentMinority: ").append(toIndentedString(facPercentMinority)).append("\n");
    sb.append("    facPopulationDensity: ").append(toIndentedString(facPopulationDensity)).append("\n");
    sb.append("    facSICCodes: ").append(toIndentedString(facSICCodes)).append("\n");
    sb.append("    facStdCountyName: ").append(toIndentedString(facStdCountyName)).append("\n");
    sb.append("    facTRILandReleases: ").append(toIndentedString(facTRILandReleases)).append("\n");
    sb.append("    facTRIOffSiteTransfers: ").append(toIndentedString(facTRIOffSiteTransfers)).append("\n");
    sb.append("    facTRIOnSiteReleases: ").append(toIndentedString(facTRIOnSiteReleases)).append("\n");
    sb.append("    facTRIReporter: ").append(toIndentedString(facTRIReporter)).append("\n");
    sb.append("    facUsMexBorderFlg: ").append(toIndentedString(facUsMexBorderFlg)).append("\n");
    sb.append("    infea5yrFlag: ").append(toIndentedString(infea5yrFlag)).append("\n");
    sb.append("    insp5yrFlag: ").append(toIndentedString(insp5yrFlag)).append("\n");
    sb.append("    lastViolationDate: ").append(toIndentedString(lastViolationDate)).append("\n");
    sb.append("    lower48: ").append(toIndentedString(lower48)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    maxPctileUs: ").append(toIndentedString(maxPctileUs)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    operatorCode: ").append(toIndentedString(operatorCode)).append("\n");
    sb.append("    operatorDesc: ").append(toIndentedString(operatorDesc)).append("\n");
    sb.append("    over80CountUs: ").append(toIndentedString(over80CountUs)).append("\n");
    sb.append("    ownerCode: ").append(toIndentedString(ownerCode)).append("\n");
    sb.append("    ownerDesc: ").append(toIndentedString(ownerDesc)).append("\n");
    sb.append("    pctileCancerUs: ").append(toIndentedString(pctileCancerUs)).append("\n");
    sb.append("    pctileDpmUs: ").append(toIndentedString(pctileDpmUs)).append("\n");
    sb.append("    pctileO3Us: ").append(toIndentedString(pctileO3Us)).append("\n");
    sb.append("    pctilePctpre1960Us: ").append(toIndentedString(pctilePctpre1960Us)).append("\n");
    sb.append("    pctilePmUs: ").append(toIndentedString(pctilePmUs)).append("\n");
    sb.append("    pctileProximityNPDESUs: ").append(toIndentedString(pctileProximityNPDESUs)).append("\n");
    sb.append("    pctileProximityNplUs: ").append(toIndentedString(pctileProximityNplUs)).append("\n");
    sb.append("    pctileProximityRmpUs: ").append(toIndentedString(pctileProximityRmpUs)).append("\n");
    sb.append("    pctileProximityTsdfUs: ").append(toIndentedString(pctileProximityTsdfUs)).append("\n");
    sb.append("    pctileRespUs: ").append(toIndentedString(pctileRespUs)).append("\n");
    sb.append("    pctileTrafficScoreUs: ").append(toIndentedString(pctileTrafficScoreUs)).append("\n");
    sb.append("    rcRA3yrComplQtrsHistory: ").append(toIndentedString(rcRA3yrComplQtrsHistory)).append("\n");
    sb.append("    rcRACaseIDs: ").append(toIndentedString(rcRACaseIDs)).append("\n");
    sb.append("    rcRACity: ").append(toIndentedString(rcRACity)).append("\n");
    sb.append("    rcRAComplStatus: ").append(toIndentedString(rcRAComplStatus)).append("\n");
    sb.append("    rcRACounty: ").append(toIndentedString(rcRACounty)).append("\n");
    sb.append("    rcRADaysLastInspection: ").append(toIndentedString(rcRADaysLastInspection)).append("\n");
    sb.append("    rcRAEPARegion: ").append(toIndentedString(rcRAEPARegion)).append("\n");
    sb.append("    rcRAFIPSCode: ").append(toIndentedString(rcRAFIPSCode)).append("\n");
    sb.append("    rcRAFeaCnt: ").append(toIndentedString(rcRAFeaCnt)).append("\n");
    sb.append("    rcRAIDs: ").append(toIndentedString(rcRAIDs)).append("\n");
    sb.append("    rcRAIeaCnt: ").append(toIndentedString(rcRAIeaCnt)).append("\n");
    sb.append("    rcRAImpWaterFlg: ").append(toIndentedString(rcRAImpWaterFlg)).append("\n");
    sb.append("    rcRAIndianCntryFlg: ").append(toIndentedString(rcRAIndianCntryFlg)).append("\n");
    sb.append("    rcRAInspCnt: ").append(toIndentedString(rcRAInspCnt)).append("\n");
    sb.append("    rcRALandTypeCode: ").append(toIndentedString(rcRALandTypeCode)).append("\n");
    sb.append("    rcRALastFeaDate: ").append(toIndentedString(rcRALastFeaDate)).append("\n");
    sb.append("    rcRALastFeaDateEPA: ").append(toIndentedString(rcRALastFeaDateEPA)).append("\n");
    sb.append("    rcRALastFeaDateState: ").append(toIndentedString(rcRALastFeaDateState)).append("\n");
    sb.append("    rcRALastIeaDate: ").append(toIndentedString(rcRALastIeaDate)).append("\n");
    sb.append("    rcRALastIeaDateEPA: ").append(toIndentedString(rcRALastIeaDateEPA)).append("\n");
    sb.append("    rcRALastIeaDateState: ").append(toIndentedString(rcRALastIeaDateState)).append("\n");
    sb.append("    rcRALastInspDateEPA: ").append(toIndentedString(rcRALastInspDateEPA)).append("\n");
    sb.append("    rcRALastInspDateState: ").append(toIndentedString(rcRALastInspDateState)).append("\n");
    sb.append("    rcRALastInspectionDate: ").append(toIndentedString(rcRALastInspectionDate)).append("\n");
    sb.append("    rcRALastPenaltyDate: ").append(toIndentedString(rcRALastPenaltyDate)).append("\n");
    sb.append("    rcRAMapIcon: ").append(toIndentedString(rcRAMapIcon)).append("\n");
    sb.append("    RCRANAICS: ").append(toIndentedString(RCRANAICS)).append("\n");
    sb.append("    rcRAName: ").append(toIndentedString(rcRAName)).append("\n");
    sb.append("    rcRAOldestOpenVioDate: ").append(toIndentedString(rcRAOldestOpenVioDate)).append("\n");
    sb.append("    rcRAPenalties: ").append(toIndentedString(rcRAPenalties)).append("\n");
    sb.append("    rcRAQtrsWithNC: ").append(toIndentedString(rcRAQtrsWithNC)).append("\n");
    sb.append("    rcRAQtrsWithSNC: ").append(toIndentedString(rcRAQtrsWithSNC)).append("\n");
    sb.append("    RCRASNC: ").append(toIndentedString(RCRASNC)).append("\n");
    sb.append("    rcRAState: ").append(toIndentedString(rcRAState)).append("\n");
    sb.append("    rcRAStateDistrict: ").append(toIndentedString(rcRAStateDistrict)).append("\n");
    sb.append("    rcRAStatus: ").append(toIndentedString(rcRAStatus)).append("\n");
    sb.append("    rcRAStreet: ").append(toIndentedString(rcRAStreet)).append("\n");
    sb.append("    rcRATRIbalLandCode: ").append(toIndentedString(rcRATRIbalLandCode)).append("\n");
    sb.append("    rcRAUniverse: ").append(toIndentedString(rcRAUniverse)).append("\n");
    sb.append("    rcRAViolationTypes: ").append(toIndentedString(rcRAViolationTypes)).append("\n");
    sb.append("    rcRAZip: ").append(toIndentedString(rcRAZip)).append("\n");
    sb.append("    rcRAinfoLandTypeCode: ").append(toIndentedString(rcRAinfoLandTypeCode)).append("\n");
    sb.append("    rcRAinfoLandTypeDesc: ").append(toIndentedString(rcRAinfoLandTypeDesc)).append("\n");
    sb.append("    referencePoint: ").append(toIndentedString(referencePoint)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    rmpIDs: ").append(toIndentedString(rmpIDs)).append("\n");
    sb.append("    sdWAIDs: ").append(toIndentedString(sdWAIDs)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    semsIDs: ").append(toIndentedString(semsIDs)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    statute: ").append(toIndentedString(statute)).append("\n");
    sb.append("    trIIDs: ").append(toIndentedString(trIIDs)).append("\n");
    sb.append("    trIbalFlag: ").append(toIndentedString(trIbalFlag)).append("\n");
    sb.append("    tsdf: ").append(toIndentedString(tsdf)).append("\n");
    sb.append("    violFlag: ").append(toIndentedString(violFlag)).append("\n");
    sb.append("    webDocs: ").append(toIndentedString(webDocs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AIRIDs");
    openapiFields.add("ActiveLower48");
    openapiFields.add("CWAIDs");
    openapiFields.add("CalculatedAccuracyMeters");
    openapiFields.add("CensusBlockGroup");
    openapiFields.add("ChemNamesRelLand");
    openapiFields.add("ChesapeakeBayFlag");
    openapiFields.add("CleanupActionFlag");
    openapiFields.add("CollectionMethod");
    openapiFields.add("CurrSvFlag");
    openapiFields.add("CurrVioFlag");
    openapiFields.add("CurrentVioCnt");
    openapiFields.add("DateLastRecordReview");
    openapiFields.add("EPASystem");
    openapiFields.add("Ea5yrFlag");
    openapiFields.add("EjscreenFlag");
    openapiFields.add("EjscreenFlagUs");
    openapiFields.add("FacCountyName");
    openapiFields.add("FacDerivedHuc");
    openapiFields.add("FacDerivedTRIbes");
    openapiFields.add("FacDerivedWBD");
    openapiFields.add("FacDerivedWBDName");
    openapiFields.add("FacFIPSCode");
    openapiFields.add("FacFederalAgencyCode");
    openapiFields.add("FacFederalAgencyName");
    openapiFields.add("FacIndianCntryFlg");
    openapiFields.add("FacIndianSpatialFlg");
    openapiFields.add("FacLat");
    openapiFields.add("FacLong");
    openapiFields.add("FacMapFlg");
    openapiFields.add("FacMapIcon");
    openapiFields.add("FacPercentMinority");
    openapiFields.add("FacPopulationDensity");
    openapiFields.add("FacSICCodes");
    openapiFields.add("FacStdCountyName");
    openapiFields.add("FacTRILandReleases");
    openapiFields.add("FacTRIOffSiteTransfers");
    openapiFields.add("FacTRIOnSiteReleases");
    openapiFields.add("FacTRIReporter");
    openapiFields.add("FacUsMexBorderFlg");
    openapiFields.add("Infea5yrFlag");
    openapiFields.add("Insp5yrFlag");
    openapiFields.add("LastViolationDate");
    openapiFields.add("Lower48");
    openapiFields.add("Map");
    openapiFields.add("MaxPctileUs");
    openapiFields.add("MaxScore");
    openapiFields.add("ObjectId");
    openapiFields.add("OperatorCode");
    openapiFields.add("OperatorDesc");
    openapiFields.add("Over80CountUs");
    openapiFields.add("OwnerCode");
    openapiFields.add("OwnerDesc");
    openapiFields.add("PctileCancerUs");
    openapiFields.add("PctileDpmUs");
    openapiFields.add("PctileO3Us");
    openapiFields.add("PctilePctpre1960Us");
    openapiFields.add("PctilePmUs");
    openapiFields.add("PctileProximityNPDESUs");
    openapiFields.add("PctileProximityNplUs");
    openapiFields.add("PctileProximityRmpUs");
    openapiFields.add("PctileProximityTsdfUs");
    openapiFields.add("PctileRespUs");
    openapiFields.add("PctileTrafficScoreUs");
    openapiFields.add("RCRA3yrComplQtrsHistory");
    openapiFields.add("RCRACaseIDs");
    openapiFields.add("RCRACity");
    openapiFields.add("RCRAComplStatus");
    openapiFields.add("RCRACounty");
    openapiFields.add("RCRADaysLastInspection");
    openapiFields.add("RCRAEPARegion");
    openapiFields.add("RCRAFIPSCode");
    openapiFields.add("RCRAFeaCnt");
    openapiFields.add("RCRAIDs");
    openapiFields.add("RCRAIeaCnt");
    openapiFields.add("RCRAImpWaterFlg");
    openapiFields.add("RCRAIndianCntryFlg");
    openapiFields.add("RCRAInspCnt");
    openapiFields.add("RCRALandTypeCode");
    openapiFields.add("RCRALastFeaDate");
    openapiFields.add("RCRALastFeaDateEPA");
    openapiFields.add("RCRALastFeaDateState");
    openapiFields.add("RCRALastIeaDate");
    openapiFields.add("RCRALastIeaDateEPA");
    openapiFields.add("RCRALastIeaDateState");
    openapiFields.add("RCRALastInspDateEPA");
    openapiFields.add("RCRALastInspDateState");
    openapiFields.add("RCRALastInspectionDate");
    openapiFields.add("RCRALastPenaltyDate");
    openapiFields.add("RCRAMapIcon");
    openapiFields.add("RCRANAICS");
    openapiFields.add("RCRAName");
    openapiFields.add("RCRAOldestOpenVioDate");
    openapiFields.add("RCRAPenalties");
    openapiFields.add("RCRAQtrsWithNC");
    openapiFields.add("RCRAQtrsWithSNC");
    openapiFields.add("RCRASNC");
    openapiFields.add("RCRAState");
    openapiFields.add("RCRAStateDistrict");
    openapiFields.add("RCRAStatus");
    openapiFields.add("RCRAStreet");
    openapiFields.add("RCRATRIbalLandCode");
    openapiFields.add("RCRAUniverse");
    openapiFields.add("RCRAViolationTypes");
    openapiFields.add("RCRAZip");
    openapiFields.add("RCRAinfoLandTypeCode");
    openapiFields.add("RCRAinfoLandTypeDesc");
    openapiFields.add("ReferencePoint");
    openapiFields.add("RegistryID");
    openapiFields.add("RmpIDs");
    openapiFields.add("SDWAIDs");
    openapiFields.add("Score");
    openapiFields.add("SemsIDs");
    openapiFields.add("SourceID");
    openapiFields.add("Statute");
    openapiFields.add("TRIIDs");
    openapiFields.add("TRIbalFlag");
    openapiFields.add("Tsdf");
    openapiFields.add("ViolFlag");
    openapiFields.add("WebDocs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AIRIDs");
    openapiRequiredFields.add("ActiveLower48");
    openapiRequiredFields.add("CWAIDs");
    openapiRequiredFields.add("CalculatedAccuracyMeters");
    openapiRequiredFields.add("CensusBlockGroup");
    openapiRequiredFields.add("ChemNamesRelLand");
    openapiRequiredFields.add("ChesapeakeBayFlag");
    openapiRequiredFields.add("CleanupActionFlag");
    openapiRequiredFields.add("CollectionMethod");
    openapiRequiredFields.add("CurrSvFlag");
    openapiRequiredFields.add("CurrVioFlag");
    openapiRequiredFields.add("CurrentVioCnt");
    openapiRequiredFields.add("DateLastRecordReview");
    openapiRequiredFields.add("EPASystem");
    openapiRequiredFields.add("Ea5yrFlag");
    openapiRequiredFields.add("EjscreenFlag");
    openapiRequiredFields.add("EjscreenFlagUs");
    openapiRequiredFields.add("FacCountyName");
    openapiRequiredFields.add("FacDerivedHuc");
    openapiRequiredFields.add("FacDerivedTRIbes");
    openapiRequiredFields.add("FacDerivedWBD");
    openapiRequiredFields.add("FacDerivedWBDName");
    openapiRequiredFields.add("FacFIPSCode");
    openapiRequiredFields.add("FacFederalAgencyCode");
    openapiRequiredFields.add("FacFederalAgencyName");
    openapiRequiredFields.add("FacIndianCntryFlg");
    openapiRequiredFields.add("FacIndianSpatialFlg");
    openapiRequiredFields.add("FacLat");
    openapiRequiredFields.add("FacLong");
    openapiRequiredFields.add("FacMapFlg");
    openapiRequiredFields.add("FacMapIcon");
    openapiRequiredFields.add("FacPercentMinority");
    openapiRequiredFields.add("FacPopulationDensity");
    openapiRequiredFields.add("FacSICCodes");
    openapiRequiredFields.add("FacStdCountyName");
    openapiRequiredFields.add("FacTRILandReleases");
    openapiRequiredFields.add("FacTRIOffSiteTransfers");
    openapiRequiredFields.add("FacTRIOnSiteReleases");
    openapiRequiredFields.add("FacTRIReporter");
    openapiRequiredFields.add("FacUsMexBorderFlg");
    openapiRequiredFields.add("Infea5yrFlag");
    openapiRequiredFields.add("Insp5yrFlag");
    openapiRequiredFields.add("LastViolationDate");
    openapiRequiredFields.add("Lower48");
    openapiRequiredFields.add("Map");
    openapiRequiredFields.add("MaxPctileUs");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("ObjectId");
    openapiRequiredFields.add("OperatorCode");
    openapiRequiredFields.add("OperatorDesc");
    openapiRequiredFields.add("Over80CountUs");
    openapiRequiredFields.add("OwnerCode");
    openapiRequiredFields.add("OwnerDesc");
    openapiRequiredFields.add("PctileCancerUs");
    openapiRequiredFields.add("PctileDpmUs");
    openapiRequiredFields.add("PctileO3Us");
    openapiRequiredFields.add("PctilePctpre1960Us");
    openapiRequiredFields.add("PctilePmUs");
    openapiRequiredFields.add("PctileProximityNPDESUs");
    openapiRequiredFields.add("PctileProximityNplUs");
    openapiRequiredFields.add("PctileProximityRmpUs");
    openapiRequiredFields.add("PctileProximityTsdfUs");
    openapiRequiredFields.add("PctileRespUs");
    openapiRequiredFields.add("PctileTrafficScoreUs");
    openapiRequiredFields.add("RCRA3yrComplQtrsHistory");
    openapiRequiredFields.add("RCRACaseIDs");
    openapiRequiredFields.add("RCRACity");
    openapiRequiredFields.add("RCRAComplStatus");
    openapiRequiredFields.add("RCRACounty");
    openapiRequiredFields.add("RCRADaysLastInspection");
    openapiRequiredFields.add("RCRAEPARegion");
    openapiRequiredFields.add("RCRAFIPSCode");
    openapiRequiredFields.add("RCRAFeaCnt");
    openapiRequiredFields.add("RCRAIDs");
    openapiRequiredFields.add("RCRAIeaCnt");
    openapiRequiredFields.add("RCRAImpWaterFlg");
    openapiRequiredFields.add("RCRAIndianCntryFlg");
    openapiRequiredFields.add("RCRAInspCnt");
    openapiRequiredFields.add("RCRALandTypeCode");
    openapiRequiredFields.add("RCRALastFeaDate");
    openapiRequiredFields.add("RCRALastFeaDateEPA");
    openapiRequiredFields.add("RCRALastFeaDateState");
    openapiRequiredFields.add("RCRALastIeaDate");
    openapiRequiredFields.add("RCRALastIeaDateEPA");
    openapiRequiredFields.add("RCRALastIeaDateState");
    openapiRequiredFields.add("RCRALastInspDateEPA");
    openapiRequiredFields.add("RCRALastInspDateState");
    openapiRequiredFields.add("RCRALastInspectionDate");
    openapiRequiredFields.add("RCRALastPenaltyDate");
    openapiRequiredFields.add("RCRAMapIcon");
    openapiRequiredFields.add("RCRANAICS");
    openapiRequiredFields.add("RCRAName");
    openapiRequiredFields.add("RCRAOldestOpenVioDate");
    openapiRequiredFields.add("RCRAPenalties");
    openapiRequiredFields.add("RCRAQtrsWithNC");
    openapiRequiredFields.add("RCRAQtrsWithSNC");
    openapiRequiredFields.add("RCRASNC");
    openapiRequiredFields.add("RCRAState");
    openapiRequiredFields.add("RCRAStateDistrict");
    openapiRequiredFields.add("RCRAStatus");
    openapiRequiredFields.add("RCRAStreet");
    openapiRequiredFields.add("RCRATRIbalLandCode");
    openapiRequiredFields.add("RCRAUniverse");
    openapiRequiredFields.add("RCRAViolationTypes");
    openapiRequiredFields.add("RCRAZip");
    openapiRequiredFields.add("RCRAinfoLandTypeCode");
    openapiRequiredFields.add("RCRAinfoLandTypeDesc");
    openapiRequiredFields.add("ReferencePoint");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("RmpIDs");
    openapiRequiredFields.add("SDWAIDs");
    openapiRequiredFields.add("Score");
    openapiRequiredFields.add("SemsIDs");
    openapiRequiredFields.add("SourceID");
    openapiRequiredFields.add("Statute");
    openapiRequiredFields.add("TRIIDs");
    openapiRequiredFields.add("TRIbalFlag");
    openapiRequiredFields.add("Tsdf");
    openapiRequiredFields.add("ViolFlag");
    openapiRequiredFields.add("WebDocs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rcra07
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rcra07.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rcra07 is not found in the empty JSON string", Rcra07.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rcra07.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rcra07` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rcra07.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AIRIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AIRIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AIRIDs").toString()));
      }
      if (!jsonObj.get("ActiveLower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActiveLower48").toString()));
      }
      if (!jsonObj.get("CWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWAIDs").toString()));
      }
      if (!jsonObj.get("CalculatedAccuracyMeters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CalculatedAccuracyMeters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CalculatedAccuracyMeters").toString()));
      }
      if (!jsonObj.get("CensusBlockGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CensusBlockGroup").toString()));
      }
      if (!jsonObj.get("ChemNamesRelLand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChemNamesRelLand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChemNamesRelLand").toString()));
      }
      if (!jsonObj.get("ChesapeakeBayFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChesapeakeBayFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChesapeakeBayFlag").toString()));
      }
      if (!jsonObj.get("CleanupActionFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CleanupActionFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CleanupActionFlag").toString()));
      }
      if (!jsonObj.get("CollectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectionMethod").toString()));
      }
      if (!jsonObj.get("CurrSvFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrSvFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrSvFlag").toString()));
      }
      if (!jsonObj.get("CurrVioFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrVioFlag").toString()));
      }
      if (!jsonObj.get("CurrentVioCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentVioCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentVioCnt").toString()));
      }
      if (!jsonObj.get("DateLastRecordReview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateLastRecordReview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateLastRecordReview").toString()));
      }
      if (!jsonObj.get("EPASystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPASystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPASystem").toString()));
      }
      if (!jsonObj.get("Ea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ea5yrFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlag").toString()));
      }
      if (!jsonObj.get("EjscreenFlagUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EjscreenFlagUs").toString()));
      }
      if (!jsonObj.get("FacCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacCountyName").toString()));
      }
      if (!jsonObj.get("FacDerivedHuc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedHuc").toString()));
      }
      if (!jsonObj.get("FacDerivedTRIbes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedTRIbes").toString()));
      }
      if (!jsonObj.get("FacDerivedWBD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBD").toString()));
      }
      if (!jsonObj.get("FacDerivedWBDName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacDerivedWBDName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacDerivedWBDName").toString()));
      }
      if (!jsonObj.get("FacFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFIPSCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyCode").toString()));
      }
      if (!jsonObj.get("FacFederalAgencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacFederalAgencyName").toString()));
      }
      if (!jsonObj.get("FacIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("FacIndianSpatialFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacIndianSpatialFlg").toString()));
      }
      if (!jsonObj.get("FacLat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLat").toString()));
      }
      if (!jsonObj.get("FacLong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacLong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacLong").toString()));
      }
      if (!jsonObj.get("FacMapFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapFlg").toString()));
      }
      if (!jsonObj.get("FacMapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacMapIcon").toString()));
      }
      if (!jsonObj.get("FacPercentMinority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPercentMinority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPercentMinority").toString()));
      }
      if (!jsonObj.get("FacPopulationDensity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacPopulationDensity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacPopulationDensity").toString()));
      }
      if (!jsonObj.get("FacSICCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacSICCodes").toString()));
      }
      if (!jsonObj.get("FacStdCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacStdCountyName").toString()));
      }
      if (!jsonObj.get("FacTRILandReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRILandReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRILandReleases").toString()));
      }
      if (!jsonObj.get("FacTRIOffSiteTransfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIOffSiteTransfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIOffSiteTransfers").toString()));
      }
      if (!jsonObj.get("FacTRIOnSiteReleases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIOnSiteReleases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIOnSiteReleases").toString()));
      }
      if (!jsonObj.get("FacTRIReporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacTRIReporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacTRIReporter").toString()));
      }
      if (!jsonObj.get("FacUsMexBorderFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacUsMexBorderFlg").toString()));
      }
      if (!jsonObj.get("Infea5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Infea5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Infea5yrFlag").toString()));
      }
      if (!jsonObj.get("Insp5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Insp5yrFlag").toString()));
      }
      if (!jsonObj.get("LastViolationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastViolationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastViolationDate").toString()));
      }
      if (!jsonObj.get("Lower48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lower48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lower48").toString()));
      }
      if (!jsonObj.get("Map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Map").toString()));
      }
      if (!jsonObj.get("MaxPctileUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxPctileUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxPctileUs").toString()));
      }
      if (!jsonObj.get("MaxScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxScore").toString()));
      }
      if (!jsonObj.get("ObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectId").toString()));
      }
      if (!jsonObj.get("OperatorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorCode").toString()));
      }
      if (!jsonObj.get("OperatorDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorDesc").toString()));
      }
      if (!jsonObj.get("Over80CountUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Over80CountUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Over80CountUs").toString()));
      }
      if (!jsonObj.get("OwnerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerCode").toString()));
      }
      if (!jsonObj.get("OwnerDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerDesc").toString()));
      }
      if (!jsonObj.get("PctileCancerUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileCancerUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileCancerUs").toString()));
      }
      if (!jsonObj.get("PctileDpmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileDpmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileDpmUs").toString()));
      }
      if (!jsonObj.get("PctileO3Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileO3Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileO3Us").toString()));
      }
      if (!jsonObj.get("PctilePctpre1960Us").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePctpre1960Us` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePctpre1960Us").toString()));
      }
      if (!jsonObj.get("PctilePmUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctilePmUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctilePmUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNPDESUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNPDESUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNPDESUs").toString()));
      }
      if (!jsonObj.get("PctileProximityNplUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityNplUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityNplUs").toString()));
      }
      if (!jsonObj.get("PctileProximityRmpUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityRmpUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityRmpUs").toString()));
      }
      if (!jsonObj.get("PctileProximityTsdfUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileProximityTsdfUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileProximityTsdfUs").toString()));
      }
      if (!jsonObj.get("PctileRespUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileRespUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileRespUs").toString()));
      }
      if (!jsonObj.get("PctileTrafficScoreUs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PctileTrafficScoreUs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PctileTrafficScoreUs").toString()));
      }
      if (!jsonObj.get("RCRA3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRA3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRA3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("RCRACaseIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRACaseIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRACaseIDs").toString()));
      }
      if (!jsonObj.get("RCRACity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRACity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRACity").toString()));
      }
      if (!jsonObj.get("RCRAComplStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAComplStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAComplStatus").toString()));
      }
      if (!jsonObj.get("RCRACounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRACounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRACounty").toString()));
      }
      if (!jsonObj.get("RCRADaysLastInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRADaysLastInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRADaysLastInspection").toString()));
      }
      if (!jsonObj.get("RCRAEPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAEPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAEPARegion").toString()));
      }
      if (!jsonObj.get("RCRAFIPSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAFIPSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAFIPSCode").toString()));
      }
      if (!jsonObj.get("RCRAFeaCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAFeaCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAFeaCnt").toString()));
      }
      if (!jsonObj.get("RCRAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIDs").toString()));
      }
      if (!jsonObj.get("RCRAIeaCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIeaCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIeaCnt").toString()));
      }
      if (!jsonObj.get("RCRAImpWaterFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAImpWaterFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAImpWaterFlg").toString()));
      }
      if (!jsonObj.get("RCRAIndianCntryFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAIndianCntryFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAIndianCntryFlg").toString()));
      }
      if (!jsonObj.get("RCRAInspCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAInspCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAInspCnt").toString()));
      }
      if (!jsonObj.get("RCRALandTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALandTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALandTypeCode").toString()));
      }
      if (!jsonObj.get("RCRALastFeaDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastFeaDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastFeaDate").toString()));
      }
      if (!jsonObj.get("RCRALastFeaDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastFeaDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastFeaDateEPA").toString()));
      }
      if (!jsonObj.get("RCRALastFeaDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastFeaDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastFeaDateState").toString()));
      }
      if (!jsonObj.get("RCRALastIeaDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastIeaDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastIeaDate").toString()));
      }
      if (!jsonObj.get("RCRALastIeaDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastIeaDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastIeaDateEPA").toString()));
      }
      if (!jsonObj.get("RCRALastIeaDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastIeaDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastIeaDateState").toString()));
      }
      if (!jsonObj.get("RCRALastInspDateEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastInspDateEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastInspDateEPA").toString()));
      }
      if (!jsonObj.get("RCRALastInspDateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastInspDateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastInspDateState").toString()));
      }
      if (!jsonObj.get("RCRALastInspectionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastInspectionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastInspectionDate").toString()));
      }
      if (!jsonObj.get("RCRALastPenaltyDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRALastPenaltyDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRALastPenaltyDate").toString()));
      }
      if (!jsonObj.get("RCRAMapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAMapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAMapIcon").toString()));
      }
      if (!jsonObj.get("RCRANAICS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRANAICS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRANAICS").toString()));
      }
      if (!jsonObj.get("RCRAName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAName").toString()));
      }
      if (!jsonObj.get("RCRAOldestOpenVioDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAOldestOpenVioDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAOldestOpenVioDate").toString()));
      }
      if (!jsonObj.get("RCRAPenalties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAPenalties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAPenalties").toString()));
      }
      if (!jsonObj.get("RCRAQtrsWithNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAQtrsWithNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAQtrsWithNC").toString()));
      }
      if (!jsonObj.get("RCRAQtrsWithSNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAQtrsWithSNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAQtrsWithSNC").toString()));
      }
      if (!jsonObj.get("RCRASNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRASNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRASNC").toString()));
      }
      if (!jsonObj.get("RCRAState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAState").toString()));
      }
      if (!jsonObj.get("RCRAStateDistrict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAStateDistrict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAStateDistrict").toString()));
      }
      if (!jsonObj.get("RCRAStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAStatus").toString()));
      }
      if (!jsonObj.get("RCRAStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAStreet").toString()));
      }
      if (!jsonObj.get("RCRATRIbalLandCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRATRIbalLandCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRATRIbalLandCode").toString()));
      }
      if (!jsonObj.get("RCRAUniverse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAUniverse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAUniverse").toString()));
      }
      if (!jsonObj.get("RCRAViolationTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAViolationTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAViolationTypes").toString()));
      }
      if (!jsonObj.get("RCRAZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAZip").toString()));
      }
      if (!jsonObj.get("RCRAinfoLandTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAinfoLandTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAinfoLandTypeCode").toString()));
      }
      if (!jsonObj.get("RCRAinfoLandTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRAinfoLandTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRAinfoLandTypeDesc").toString()));
      }
      if (!jsonObj.get("ReferencePoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferencePoint").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("RmpIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RmpIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RmpIDs").toString()));
      }
      if (!jsonObj.get("SDWAIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAIDs").toString()));
      }
      if (!jsonObj.get("Score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      if (!jsonObj.get("SemsIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SemsIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SemsIDs").toString()));
      }
      if (!jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if (!jsonObj.get("Statute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statute").toString()));
      }
      if (!jsonObj.get("TRIIDs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIIDs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIIDs").toString()));
      }
      if (!jsonObj.get("TRIbalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIbalFlag").toString()));
      }
      if (!jsonObj.get("Tsdf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tsdf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tsdf").toString()));
      }
      if (!jsonObj.get("ViolFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolFlag").toString()));
      }
      if (!jsonObj.get("WebDocs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebDocs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebDocs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rcra07.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rcra07' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rcra07> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rcra07.class));

       return (TypeAdapter<T>) new TypeAdapter<Rcra07>() {
           @Override
           public void write(JsonWriter out, Rcra07 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rcra07 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rcra07 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rcra07
   * @throws IOException if the JSON string is invalid with respect to Rcra07
   */
  public static Rcra07 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rcra07.class);
  }

  /**
   * Convert an instance of Rcra07 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

