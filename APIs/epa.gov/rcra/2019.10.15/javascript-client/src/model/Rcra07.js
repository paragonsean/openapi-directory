/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rcra07 model module.
 * @module model/Rcra07
 * @version 2019.10.15
 */
class Rcra07 {
    /**
     * Constructs a new <code>Rcra07</code>.
     * Facilities Object
     * @alias module:model/Rcra07
     * @param aIRIDs {String} Air Facility System (AFS) ID.
     * @param activeLower48 {String} A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
     * @param cWAIDs {String} A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
     * @param calculatedAccuracyMeters {String} The estimated accuracy in Meters for the facility's geospatial coordinate.
     * @param censusBlockGroup {String} A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
     * @param chemNamesRelLand {String} It is an aggregated field containing all the names found for the current reporting year (2017).
     * @param chesapeakeBayFlag {String} Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.
     * @param cleanupActionFlag {String} 
     * @param collectionMethod {String} ??
     * @param currSvFlag {String} Indicates if the facility has a current significant violation. 1 = Yes
     * @param currVioFlag {String} Indicates if the facility has a current violation. 1 = Yes
     * @param currentVioCnt {String} 
     * @param dateLastRecordReview {String} 
     * @param ePASystem {String} The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
     * @param ea5yrFlag {String} Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
     * @param ejscreenFlag {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param ejscreenFlagUs {String} A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
     * @param facCountyName {String} The facility county name from EPA's Facility Registry System
     * @param facDerivedHuc {String} The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
     * @param facDerivedTRIbes {String} The tribes or tribal territories located within 25 miles of the facility's location.
     * @param facDerivedWBD {String} The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
     * @param facDerivedWBDName {String} The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
     * @param facFIPSCode {String} The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
     * @param facFederalAgencyCode {String} Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
     * @param facFederalAgencyName {String} Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
     * @param facIndianCntryFlg {String} Flag showing Y/N whether the facility is located in Indian Country.
     * @param facIndianSpatialFlg {String} Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
     * @param facLat {String} The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
     * @param facLong {String} The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
     * @param facMapFlg {String} Graphical indicator denoting whether geographical data required to map a facility are available.
     * @param facMapIcon {String} The default map icon image file calculated for the facility by the ECHO program.
     * @param facPercentMinority {String} Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
     * @param facPopulationDensity {String} The number of persons per square mile in the profiled area.
     * @param facSICCodes {String} Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
     * @param facStdCountyName {String} The standardized  facility county name from EPA's Facility Registry System
     * @param facTRILandReleases {String} 
     * @param facTRIOffSiteTransfers {String} 
     * @param facTRIOnSiteReleases {String} 
     * @param facTRIReporter {String} Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
     * @param facUsMexBorderFlg {String} A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
     * @param infea5yrFlag {String} Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
     * @param insp5yrFlag {String} Indicates if the facility has an inspection within the last 5 years. 1 = Yes
     * @param lastViolationDate {String} 
     * @param lower48 {String} Flag showing Y/N whether location is within the contiguous (lower 48) United States.
     * @param map {String} No Longer Used.
     * @param maxPctileUs {String} The maximum percentile from all individual EJSCREEN indicators.
     * @param maxScore {String} A sorting score for internal use.
     * @param objectId {String} Sequential number assigned to each facility or cluster returned.
     * @param operatorCode {String} 
     * @param operatorDesc {String} 
     * @param over80CountUs {String} The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
     * @param ownerCode {String} 
     * @param ownerDesc {String} Description of Owner code
     * @param pctileCancerUs {String} The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
     * @param pctileDpmUs {String} The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
     * @param pctileO3Us {String} The national percentile of the census block group for the EJSCREEN ozone indicator.
     * @param pctilePctpre1960Us {String} The national percentile of the census block group for the EJSCREEN Lead paint indicator.
     * @param pctilePmUs {String} The national percentile of the census block group for the EJSCREEN particulate matter indicator.
     * @param pctileProximityNPDESUs {String} The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
     * @param pctileProximityNplUs {String} The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
     * @param pctileProximityRmpUs {String} The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
     * @param pctileProximityTsdfUs {String} The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
     * @param pctileRespUs {String} The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
     * @param pctileTrafficScoreUs {String} The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
     * @param rCRA3yrComplQtrsHistory {String} The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
     * @param rCRACaseIDs {String} 
     * @param rCRACity {String} 
     * @param rCRAComplStatus {String} 
     * @param rCRACounty {String} 
     * @param rCRADaysLastInspection {String} 
     * @param rCRAEPARegion {String} 
     * @param rCRAFIPSCode {String} 
     * @param rCRAFeaCnt {String} 
     * @param rCRAIDs {String} A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
     * @param rCRAIeaCnt {String} 
     * @param rCRAImpWaterFlg {String} 
     * @param rCRAIndianCntryFlg {String} 
     * @param rCRAInspCnt {String} 
     * @param rCRALandTypeCode {String} 
     * @param rCRALastFeaDate {String} 
     * @param rCRALastFeaDateEPA {String} 
     * @param rCRALastFeaDateState {String} 
     * @param rCRALastIeaDate {String} 
     * @param rCRALastIeaDateEPA {String} 
     * @param rCRALastIeaDateState {String} 
     * @param rCRALastInspDateEPA {String} 
     * @param rCRALastInspDateState {String} 
     * @param rCRALastInspectionDate {String} 
     * @param rCRALastPenaltyDate {String} Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
     * @param rCRAMapIcon {String} 
     * @param RCRANAICS {String} The RCRA permit's primary North American Industry Classification System (NAICS) Code.
     * @param rCRAName {String} 
     * @param rCRAOldestOpenVioDate {String} 
     * @param rCRAPenalties {String} The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
     * @param rCRAQtrsWithNC {String} The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
     * @param rCRAQtrsWithSNC {String} 
     * @param RCRASNC {String} 
     * @param rCRAState {String} 
     * @param rCRAStateDistrict {String} 
     * @param rCRAStatus {String} 
     * @param rCRAStreet {String} 
     * @param rCRATRIbalLandCode {String} 
     * @param rCRAUniverse {String} 
     * @param rCRAViolationTypes {String} 
     * @param rCRAZip {String} 
     * @param rCRAinfoLandTypeCode {String} 
     * @param rCRAinfoLandTypeDesc {String} 
     * @param referencePoint {String} ??
     * @param registryID {String} An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
     * @param rmpIDs {String} A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
     * @param sDWAIDs {String} A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
     * @param score {String} 
     * @param semsIDs {String} 
     * @param sourceID {String} Unique Identifier assigned by EPA.
     * @param statute {String} The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
     * @param tRIIDs {String} A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
     * @param tRIbalFlag {String} A flag indicating that the facility is within a tribal area.
     * @param tsdf {String} 
     * @param violFlag {String} Indicates if the facility had a violation within the last 3 years. 1 = Yes
     * @param webDocs {String} Contains flags that identify what web accessible documents are available for the facility.
     */
    constructor(aIRIDs, activeLower48, cWAIDs, calculatedAccuracyMeters, censusBlockGroup, chemNamesRelLand, chesapeakeBayFlag, cleanupActionFlag, collectionMethod, currSvFlag, currVioFlag, currentVioCnt, dateLastRecordReview, ePASystem, ea5yrFlag, ejscreenFlag, ejscreenFlagUs, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facIndianCntryFlg, facIndianSpatialFlg, facLat, facLong, facMapFlg, facMapIcon, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRILandReleases, facTRIOffSiteTransfers, facTRIOnSiteReleases, facTRIReporter, facUsMexBorderFlg, infea5yrFlag, insp5yrFlag, lastViolationDate, lower48, map, maxPctileUs, maxScore, objectId, operatorCode, operatorDesc, over80CountUs, ownerCode, ownerDesc, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRACaseIDs, rCRACity, rCRAComplStatus, rCRACounty, rCRADaysLastInspection, rCRAEPARegion, rCRAFIPSCode, rCRAFeaCnt, rCRAIDs, rCRAIeaCnt, rCRAImpWaterFlg, rCRAIndianCntryFlg, rCRAInspCnt, rCRALandTypeCode, rCRALastFeaDate, rCRALastFeaDateEPA, rCRALastFeaDateState, rCRALastIeaDate, rCRALastIeaDateEPA, rCRALastIeaDateState, rCRALastInspDateEPA, rCRALastInspDateState, rCRALastInspectionDate, rCRALastPenaltyDate, rCRAMapIcon, RCRANAICS, rCRAName, rCRAOldestOpenVioDate, rCRAPenalties, rCRAQtrsWithNC, rCRAQtrsWithSNC, RCRASNC, rCRAState, rCRAStateDistrict, rCRAStatus, rCRAStreet, rCRATRIbalLandCode, rCRAUniverse, rCRAViolationTypes, rCRAZip, rCRAinfoLandTypeCode, rCRAinfoLandTypeDesc, referencePoint, registryID, rmpIDs, sDWAIDs, score, semsIDs, sourceID, statute, tRIIDs, tRIbalFlag, tsdf, violFlag, webDocs) { 
        
        Rcra07.initialize(this, aIRIDs, activeLower48, cWAIDs, calculatedAccuracyMeters, censusBlockGroup, chemNamesRelLand, chesapeakeBayFlag, cleanupActionFlag, collectionMethod, currSvFlag, currVioFlag, currentVioCnt, dateLastRecordReview, ePASystem, ea5yrFlag, ejscreenFlag, ejscreenFlagUs, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facIndianCntryFlg, facIndianSpatialFlg, facLat, facLong, facMapFlg, facMapIcon, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRILandReleases, facTRIOffSiteTransfers, facTRIOnSiteReleases, facTRIReporter, facUsMexBorderFlg, infea5yrFlag, insp5yrFlag, lastViolationDate, lower48, map, maxPctileUs, maxScore, objectId, operatorCode, operatorDesc, over80CountUs, ownerCode, ownerDesc, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRACaseIDs, rCRACity, rCRAComplStatus, rCRACounty, rCRADaysLastInspection, rCRAEPARegion, rCRAFIPSCode, rCRAFeaCnt, rCRAIDs, rCRAIeaCnt, rCRAImpWaterFlg, rCRAIndianCntryFlg, rCRAInspCnt, rCRALandTypeCode, rCRALastFeaDate, rCRALastFeaDateEPA, rCRALastFeaDateState, rCRALastIeaDate, rCRALastIeaDateEPA, rCRALastIeaDateState, rCRALastInspDateEPA, rCRALastInspDateState, rCRALastInspectionDate, rCRALastPenaltyDate, rCRAMapIcon, RCRANAICS, rCRAName, rCRAOldestOpenVioDate, rCRAPenalties, rCRAQtrsWithNC, rCRAQtrsWithSNC, RCRASNC, rCRAState, rCRAStateDistrict, rCRAStatus, rCRAStreet, rCRATRIbalLandCode, rCRAUniverse, rCRAViolationTypes, rCRAZip, rCRAinfoLandTypeCode, rCRAinfoLandTypeDesc, referencePoint, registryID, rmpIDs, sDWAIDs, score, semsIDs, sourceID, statute, tRIIDs, tRIbalFlag, tsdf, violFlag, webDocs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aIRIDs, activeLower48, cWAIDs, calculatedAccuracyMeters, censusBlockGroup, chemNamesRelLand, chesapeakeBayFlag, cleanupActionFlag, collectionMethod, currSvFlag, currVioFlag, currentVioCnt, dateLastRecordReview, ePASystem, ea5yrFlag, ejscreenFlag, ejscreenFlagUs, facCountyName, facDerivedHuc, facDerivedTRIbes, facDerivedWBD, facDerivedWBDName, facFIPSCode, facFederalAgencyCode, facFederalAgencyName, facIndianCntryFlg, facIndianSpatialFlg, facLat, facLong, facMapFlg, facMapIcon, facPercentMinority, facPopulationDensity, facSICCodes, facStdCountyName, facTRILandReleases, facTRIOffSiteTransfers, facTRIOnSiteReleases, facTRIReporter, facUsMexBorderFlg, infea5yrFlag, insp5yrFlag, lastViolationDate, lower48, map, maxPctileUs, maxScore, objectId, operatorCode, operatorDesc, over80CountUs, ownerCode, ownerDesc, pctileCancerUs, pctileDpmUs, pctileO3Us, pctilePctpre1960Us, pctilePmUs, pctileProximityNPDESUs, pctileProximityNplUs, pctileProximityRmpUs, pctileProximityTsdfUs, pctileRespUs, pctileTrafficScoreUs, rCRA3yrComplQtrsHistory, rCRACaseIDs, rCRACity, rCRAComplStatus, rCRACounty, rCRADaysLastInspection, rCRAEPARegion, rCRAFIPSCode, rCRAFeaCnt, rCRAIDs, rCRAIeaCnt, rCRAImpWaterFlg, rCRAIndianCntryFlg, rCRAInspCnt, rCRALandTypeCode, rCRALastFeaDate, rCRALastFeaDateEPA, rCRALastFeaDateState, rCRALastIeaDate, rCRALastIeaDateEPA, rCRALastIeaDateState, rCRALastInspDateEPA, rCRALastInspDateState, rCRALastInspectionDate, rCRALastPenaltyDate, rCRAMapIcon, RCRANAICS, rCRAName, rCRAOldestOpenVioDate, rCRAPenalties, rCRAQtrsWithNC, rCRAQtrsWithSNC, RCRASNC, rCRAState, rCRAStateDistrict, rCRAStatus, rCRAStreet, rCRATRIbalLandCode, rCRAUniverse, rCRAViolationTypes, rCRAZip, rCRAinfoLandTypeCode, rCRAinfoLandTypeDesc, referencePoint, registryID, rmpIDs, sDWAIDs, score, semsIDs, sourceID, statute, tRIIDs, tRIbalFlag, tsdf, violFlag, webDocs) { 
        obj['AIRIDs'] = aIRIDs;
        obj['ActiveLower48'] = activeLower48;
        obj['CWAIDs'] = cWAIDs;
        obj['CalculatedAccuracyMeters'] = calculatedAccuracyMeters;
        obj['CensusBlockGroup'] = censusBlockGroup;
        obj['ChemNamesRelLand'] = chemNamesRelLand;
        obj['ChesapeakeBayFlag'] = chesapeakeBayFlag;
        obj['CleanupActionFlag'] = cleanupActionFlag;
        obj['CollectionMethod'] = collectionMethod;
        obj['CurrSvFlag'] = currSvFlag;
        obj['CurrVioFlag'] = currVioFlag;
        obj['CurrentVioCnt'] = currentVioCnt;
        obj['DateLastRecordReview'] = dateLastRecordReview;
        obj['EPASystem'] = ePASystem;
        obj['Ea5yrFlag'] = ea5yrFlag;
        obj['EjscreenFlag'] = ejscreenFlag;
        obj['EjscreenFlagUs'] = ejscreenFlagUs;
        obj['FacCountyName'] = facCountyName;
        obj['FacDerivedHuc'] = facDerivedHuc;
        obj['FacDerivedTRIbes'] = facDerivedTRIbes;
        obj['FacDerivedWBD'] = facDerivedWBD;
        obj['FacDerivedWBDName'] = facDerivedWBDName;
        obj['FacFIPSCode'] = facFIPSCode;
        obj['FacFederalAgencyCode'] = facFederalAgencyCode;
        obj['FacFederalAgencyName'] = facFederalAgencyName;
        obj['FacIndianCntryFlg'] = facIndianCntryFlg;
        obj['FacIndianSpatialFlg'] = facIndianSpatialFlg;
        obj['FacLat'] = facLat;
        obj['FacLong'] = facLong;
        obj['FacMapFlg'] = facMapFlg;
        obj['FacMapIcon'] = facMapIcon;
        obj['FacPercentMinority'] = facPercentMinority;
        obj['FacPopulationDensity'] = facPopulationDensity;
        obj['FacSICCodes'] = facSICCodes;
        obj['FacStdCountyName'] = facStdCountyName;
        obj['FacTRILandReleases'] = facTRILandReleases;
        obj['FacTRIOffSiteTransfers'] = facTRIOffSiteTransfers;
        obj['FacTRIOnSiteReleases'] = facTRIOnSiteReleases;
        obj['FacTRIReporter'] = facTRIReporter;
        obj['FacUsMexBorderFlg'] = facUsMexBorderFlg;
        obj['Infea5yrFlag'] = infea5yrFlag;
        obj['Insp5yrFlag'] = insp5yrFlag;
        obj['LastViolationDate'] = lastViolationDate;
        obj['Lower48'] = lower48;
        obj['Map'] = map;
        obj['MaxPctileUs'] = maxPctileUs;
        obj['MaxScore'] = maxScore;
        obj['ObjectId'] = objectId;
        obj['OperatorCode'] = operatorCode;
        obj['OperatorDesc'] = operatorDesc;
        obj['Over80CountUs'] = over80CountUs;
        obj['OwnerCode'] = ownerCode;
        obj['OwnerDesc'] = ownerDesc;
        obj['PctileCancerUs'] = pctileCancerUs;
        obj['PctileDpmUs'] = pctileDpmUs;
        obj['PctileO3Us'] = pctileO3Us;
        obj['PctilePctpre1960Us'] = pctilePctpre1960Us;
        obj['PctilePmUs'] = pctilePmUs;
        obj['PctileProximityNPDESUs'] = pctileProximityNPDESUs;
        obj['PctileProximityNplUs'] = pctileProximityNplUs;
        obj['PctileProximityRmpUs'] = pctileProximityRmpUs;
        obj['PctileProximityTsdfUs'] = pctileProximityTsdfUs;
        obj['PctileRespUs'] = pctileRespUs;
        obj['PctileTrafficScoreUs'] = pctileTrafficScoreUs;
        obj['RCRA3yrComplQtrsHistory'] = rCRA3yrComplQtrsHistory;
        obj['RCRACaseIDs'] = rCRACaseIDs;
        obj['RCRACity'] = rCRACity;
        obj['RCRAComplStatus'] = rCRAComplStatus;
        obj['RCRACounty'] = rCRACounty;
        obj['RCRADaysLastInspection'] = rCRADaysLastInspection;
        obj['RCRAEPARegion'] = rCRAEPARegion;
        obj['RCRAFIPSCode'] = rCRAFIPSCode;
        obj['RCRAFeaCnt'] = rCRAFeaCnt;
        obj['RCRAIDs'] = rCRAIDs;
        obj['RCRAIeaCnt'] = rCRAIeaCnt;
        obj['RCRAImpWaterFlg'] = rCRAImpWaterFlg;
        obj['RCRAIndianCntryFlg'] = rCRAIndianCntryFlg;
        obj['RCRAInspCnt'] = rCRAInspCnt;
        obj['RCRALandTypeCode'] = rCRALandTypeCode;
        obj['RCRALastFeaDate'] = rCRALastFeaDate;
        obj['RCRALastFeaDateEPA'] = rCRALastFeaDateEPA;
        obj['RCRALastFeaDateState'] = rCRALastFeaDateState;
        obj['RCRALastIeaDate'] = rCRALastIeaDate;
        obj['RCRALastIeaDateEPA'] = rCRALastIeaDateEPA;
        obj['RCRALastIeaDateState'] = rCRALastIeaDateState;
        obj['RCRALastInspDateEPA'] = rCRALastInspDateEPA;
        obj['RCRALastInspDateState'] = rCRALastInspDateState;
        obj['RCRALastInspectionDate'] = rCRALastInspectionDate;
        obj['RCRALastPenaltyDate'] = rCRALastPenaltyDate;
        obj['RCRAMapIcon'] = rCRAMapIcon;
        obj['RCRANAICS'] = RCRANAICS;
        obj['RCRAName'] = rCRAName;
        obj['RCRAOldestOpenVioDate'] = rCRAOldestOpenVioDate;
        obj['RCRAPenalties'] = rCRAPenalties;
        obj['RCRAQtrsWithNC'] = rCRAQtrsWithNC;
        obj['RCRAQtrsWithSNC'] = rCRAQtrsWithSNC;
        obj['RCRASNC'] = RCRASNC;
        obj['RCRAState'] = rCRAState;
        obj['RCRAStateDistrict'] = rCRAStateDistrict;
        obj['RCRAStatus'] = rCRAStatus;
        obj['RCRAStreet'] = rCRAStreet;
        obj['RCRATRIbalLandCode'] = rCRATRIbalLandCode;
        obj['RCRAUniverse'] = rCRAUniverse;
        obj['RCRAViolationTypes'] = rCRAViolationTypes;
        obj['RCRAZip'] = rCRAZip;
        obj['RCRAinfoLandTypeCode'] = rCRAinfoLandTypeCode;
        obj['RCRAinfoLandTypeDesc'] = rCRAinfoLandTypeDesc;
        obj['ReferencePoint'] = referencePoint;
        obj['RegistryID'] = registryID;
        obj['RmpIDs'] = rmpIDs;
        obj['SDWAIDs'] = sDWAIDs;
        obj['Score'] = score;
        obj['SemsIDs'] = semsIDs;
        obj['SourceID'] = sourceID;
        obj['Statute'] = statute;
        obj['TRIIDs'] = tRIIDs;
        obj['TRIbalFlag'] = tRIbalFlag;
        obj['Tsdf'] = tsdf;
        obj['ViolFlag'] = violFlag;
        obj['WebDocs'] = webDocs;
    }

    /**
     * Constructs a <code>Rcra07</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rcra07} obj Optional instance to populate.
     * @return {module:model/Rcra07} The populated <code>Rcra07</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rcra07();

            if (data.hasOwnProperty('AIRIDs')) {
                obj['AIRIDs'] = ApiClient.convertToType(data['AIRIDs'], 'String');
            }
            if (data.hasOwnProperty('ActiveLower48')) {
                obj['ActiveLower48'] = ApiClient.convertToType(data['ActiveLower48'], 'String');
            }
            if (data.hasOwnProperty('CWAIDs')) {
                obj['CWAIDs'] = ApiClient.convertToType(data['CWAIDs'], 'String');
            }
            if (data.hasOwnProperty('CalculatedAccuracyMeters')) {
                obj['CalculatedAccuracyMeters'] = ApiClient.convertToType(data['CalculatedAccuracyMeters'], 'String');
            }
            if (data.hasOwnProperty('CensusBlockGroup')) {
                obj['CensusBlockGroup'] = ApiClient.convertToType(data['CensusBlockGroup'], 'String');
            }
            if (data.hasOwnProperty('ChemNamesRelLand')) {
                obj['ChemNamesRelLand'] = ApiClient.convertToType(data['ChemNamesRelLand'], 'String');
            }
            if (data.hasOwnProperty('ChesapeakeBayFlag')) {
                obj['ChesapeakeBayFlag'] = ApiClient.convertToType(data['ChesapeakeBayFlag'], 'String');
            }
            if (data.hasOwnProperty('CleanupActionFlag')) {
                obj['CleanupActionFlag'] = ApiClient.convertToType(data['CleanupActionFlag'], 'String');
            }
            if (data.hasOwnProperty('CollectionMethod')) {
                obj['CollectionMethod'] = ApiClient.convertToType(data['CollectionMethod'], 'String');
            }
            if (data.hasOwnProperty('CurrSvFlag')) {
                obj['CurrSvFlag'] = ApiClient.convertToType(data['CurrSvFlag'], 'String');
            }
            if (data.hasOwnProperty('CurrVioFlag')) {
                obj['CurrVioFlag'] = ApiClient.convertToType(data['CurrVioFlag'], 'String');
            }
            if (data.hasOwnProperty('CurrentVioCnt')) {
                obj['CurrentVioCnt'] = ApiClient.convertToType(data['CurrentVioCnt'], 'String');
            }
            if (data.hasOwnProperty('DateLastRecordReview')) {
                obj['DateLastRecordReview'] = ApiClient.convertToType(data['DateLastRecordReview'], 'String');
            }
            if (data.hasOwnProperty('EPASystem')) {
                obj['EPASystem'] = ApiClient.convertToType(data['EPASystem'], 'String');
            }
            if (data.hasOwnProperty('Ea5yrFlag')) {
                obj['Ea5yrFlag'] = ApiClient.convertToType(data['Ea5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlag')) {
                obj['EjscreenFlag'] = ApiClient.convertToType(data['EjscreenFlag'], 'String');
            }
            if (data.hasOwnProperty('EjscreenFlagUs')) {
                obj['EjscreenFlagUs'] = ApiClient.convertToType(data['EjscreenFlagUs'], 'String');
            }
            if (data.hasOwnProperty('FacCountyName')) {
                obj['FacCountyName'] = ApiClient.convertToType(data['FacCountyName'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedHuc')) {
                obj['FacDerivedHuc'] = ApiClient.convertToType(data['FacDerivedHuc'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedTRIbes')) {
                obj['FacDerivedTRIbes'] = ApiClient.convertToType(data['FacDerivedTRIbes'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBD')) {
                obj['FacDerivedWBD'] = ApiClient.convertToType(data['FacDerivedWBD'], 'String');
            }
            if (data.hasOwnProperty('FacDerivedWBDName')) {
                obj['FacDerivedWBDName'] = ApiClient.convertToType(data['FacDerivedWBDName'], 'String');
            }
            if (data.hasOwnProperty('FacFIPSCode')) {
                obj['FacFIPSCode'] = ApiClient.convertToType(data['FacFIPSCode'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgencyCode')) {
                obj['FacFederalAgencyCode'] = ApiClient.convertToType(data['FacFederalAgencyCode'], 'String');
            }
            if (data.hasOwnProperty('FacFederalAgencyName')) {
                obj['FacFederalAgencyName'] = ApiClient.convertToType(data['FacFederalAgencyName'], 'String');
            }
            if (data.hasOwnProperty('FacIndianCntryFlg')) {
                obj['FacIndianCntryFlg'] = ApiClient.convertToType(data['FacIndianCntryFlg'], 'String');
            }
            if (data.hasOwnProperty('FacIndianSpatialFlg')) {
                obj['FacIndianSpatialFlg'] = ApiClient.convertToType(data['FacIndianSpatialFlg'], 'String');
            }
            if (data.hasOwnProperty('FacLat')) {
                obj['FacLat'] = ApiClient.convertToType(data['FacLat'], 'String');
            }
            if (data.hasOwnProperty('FacLong')) {
                obj['FacLong'] = ApiClient.convertToType(data['FacLong'], 'String');
            }
            if (data.hasOwnProperty('FacMapFlg')) {
                obj['FacMapFlg'] = ApiClient.convertToType(data['FacMapFlg'], 'String');
            }
            if (data.hasOwnProperty('FacMapIcon')) {
                obj['FacMapIcon'] = ApiClient.convertToType(data['FacMapIcon'], 'String');
            }
            if (data.hasOwnProperty('FacPercentMinority')) {
                obj['FacPercentMinority'] = ApiClient.convertToType(data['FacPercentMinority'], 'String');
            }
            if (data.hasOwnProperty('FacPopulationDensity')) {
                obj['FacPopulationDensity'] = ApiClient.convertToType(data['FacPopulationDensity'], 'String');
            }
            if (data.hasOwnProperty('FacSICCodes')) {
                obj['FacSICCodes'] = ApiClient.convertToType(data['FacSICCodes'], 'String');
            }
            if (data.hasOwnProperty('FacStdCountyName')) {
                obj['FacStdCountyName'] = ApiClient.convertToType(data['FacStdCountyName'], 'String');
            }
            if (data.hasOwnProperty('FacTRILandReleases')) {
                obj['FacTRILandReleases'] = ApiClient.convertToType(data['FacTRILandReleases'], 'String');
            }
            if (data.hasOwnProperty('FacTRIOffSiteTransfers')) {
                obj['FacTRIOffSiteTransfers'] = ApiClient.convertToType(data['FacTRIOffSiteTransfers'], 'String');
            }
            if (data.hasOwnProperty('FacTRIOnSiteReleases')) {
                obj['FacTRIOnSiteReleases'] = ApiClient.convertToType(data['FacTRIOnSiteReleases'], 'String');
            }
            if (data.hasOwnProperty('FacTRIReporter')) {
                obj['FacTRIReporter'] = ApiClient.convertToType(data['FacTRIReporter'], 'String');
            }
            if (data.hasOwnProperty('FacUsMexBorderFlg')) {
                obj['FacUsMexBorderFlg'] = ApiClient.convertToType(data['FacUsMexBorderFlg'], 'String');
            }
            if (data.hasOwnProperty('Infea5yrFlag')) {
                obj['Infea5yrFlag'] = ApiClient.convertToType(data['Infea5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('Insp5yrFlag')) {
                obj['Insp5yrFlag'] = ApiClient.convertToType(data['Insp5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('LastViolationDate')) {
                obj['LastViolationDate'] = ApiClient.convertToType(data['LastViolationDate'], 'String');
            }
            if (data.hasOwnProperty('Lower48')) {
                obj['Lower48'] = ApiClient.convertToType(data['Lower48'], 'String');
            }
            if (data.hasOwnProperty('Map')) {
                obj['Map'] = ApiClient.convertToType(data['Map'], 'String');
            }
            if (data.hasOwnProperty('MaxPctileUs')) {
                obj['MaxPctileUs'] = ApiClient.convertToType(data['MaxPctileUs'], 'String');
            }
            if (data.hasOwnProperty('MaxScore')) {
                obj['MaxScore'] = ApiClient.convertToType(data['MaxScore'], 'String');
            }
            if (data.hasOwnProperty('ObjectId')) {
                obj['ObjectId'] = ApiClient.convertToType(data['ObjectId'], 'String');
            }
            if (data.hasOwnProperty('OperatorCode')) {
                obj['OperatorCode'] = ApiClient.convertToType(data['OperatorCode'], 'String');
            }
            if (data.hasOwnProperty('OperatorDesc')) {
                obj['OperatorDesc'] = ApiClient.convertToType(data['OperatorDesc'], 'String');
            }
            if (data.hasOwnProperty('Over80CountUs')) {
                obj['Over80CountUs'] = ApiClient.convertToType(data['Over80CountUs'], 'String');
            }
            if (data.hasOwnProperty('OwnerCode')) {
                obj['OwnerCode'] = ApiClient.convertToType(data['OwnerCode'], 'String');
            }
            if (data.hasOwnProperty('OwnerDesc')) {
                obj['OwnerDesc'] = ApiClient.convertToType(data['OwnerDesc'], 'String');
            }
            if (data.hasOwnProperty('PctileCancerUs')) {
                obj['PctileCancerUs'] = ApiClient.convertToType(data['PctileCancerUs'], 'String');
            }
            if (data.hasOwnProperty('PctileDpmUs')) {
                obj['PctileDpmUs'] = ApiClient.convertToType(data['PctileDpmUs'], 'String');
            }
            if (data.hasOwnProperty('PctileO3Us')) {
                obj['PctileO3Us'] = ApiClient.convertToType(data['PctileO3Us'], 'String');
            }
            if (data.hasOwnProperty('PctilePctpre1960Us')) {
                obj['PctilePctpre1960Us'] = ApiClient.convertToType(data['PctilePctpre1960Us'], 'String');
            }
            if (data.hasOwnProperty('PctilePmUs')) {
                obj['PctilePmUs'] = ApiClient.convertToType(data['PctilePmUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityNPDESUs')) {
                obj['PctileProximityNPDESUs'] = ApiClient.convertToType(data['PctileProximityNPDESUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityNplUs')) {
                obj['PctileProximityNplUs'] = ApiClient.convertToType(data['PctileProximityNplUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityRmpUs')) {
                obj['PctileProximityRmpUs'] = ApiClient.convertToType(data['PctileProximityRmpUs'], 'String');
            }
            if (data.hasOwnProperty('PctileProximityTsdfUs')) {
                obj['PctileProximityTsdfUs'] = ApiClient.convertToType(data['PctileProximityTsdfUs'], 'String');
            }
            if (data.hasOwnProperty('PctileRespUs')) {
                obj['PctileRespUs'] = ApiClient.convertToType(data['PctileRespUs'], 'String');
            }
            if (data.hasOwnProperty('PctileTrafficScoreUs')) {
                obj['PctileTrafficScoreUs'] = ApiClient.convertToType(data['PctileTrafficScoreUs'], 'String');
            }
            if (data.hasOwnProperty('RCRA3yrComplQtrsHistory')) {
                obj['RCRA3yrComplQtrsHistory'] = ApiClient.convertToType(data['RCRA3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('RCRACaseIDs')) {
                obj['RCRACaseIDs'] = ApiClient.convertToType(data['RCRACaseIDs'], 'String');
            }
            if (data.hasOwnProperty('RCRACity')) {
                obj['RCRACity'] = ApiClient.convertToType(data['RCRACity'], 'String');
            }
            if (data.hasOwnProperty('RCRAComplStatus')) {
                obj['RCRAComplStatus'] = ApiClient.convertToType(data['RCRAComplStatus'], 'String');
            }
            if (data.hasOwnProperty('RCRACounty')) {
                obj['RCRACounty'] = ApiClient.convertToType(data['RCRACounty'], 'String');
            }
            if (data.hasOwnProperty('RCRADaysLastInspection')) {
                obj['RCRADaysLastInspection'] = ApiClient.convertToType(data['RCRADaysLastInspection'], 'String');
            }
            if (data.hasOwnProperty('RCRAEPARegion')) {
                obj['RCRAEPARegion'] = ApiClient.convertToType(data['RCRAEPARegion'], 'String');
            }
            if (data.hasOwnProperty('RCRAFIPSCode')) {
                obj['RCRAFIPSCode'] = ApiClient.convertToType(data['RCRAFIPSCode'], 'String');
            }
            if (data.hasOwnProperty('RCRAFeaCnt')) {
                obj['RCRAFeaCnt'] = ApiClient.convertToType(data['RCRAFeaCnt'], 'String');
            }
            if (data.hasOwnProperty('RCRAIDs')) {
                obj['RCRAIDs'] = ApiClient.convertToType(data['RCRAIDs'], 'String');
            }
            if (data.hasOwnProperty('RCRAIeaCnt')) {
                obj['RCRAIeaCnt'] = ApiClient.convertToType(data['RCRAIeaCnt'], 'String');
            }
            if (data.hasOwnProperty('RCRAImpWaterFlg')) {
                obj['RCRAImpWaterFlg'] = ApiClient.convertToType(data['RCRAImpWaterFlg'], 'String');
            }
            if (data.hasOwnProperty('RCRAIndianCntryFlg')) {
                obj['RCRAIndianCntryFlg'] = ApiClient.convertToType(data['RCRAIndianCntryFlg'], 'String');
            }
            if (data.hasOwnProperty('RCRAInspCnt')) {
                obj['RCRAInspCnt'] = ApiClient.convertToType(data['RCRAInspCnt'], 'String');
            }
            if (data.hasOwnProperty('RCRALandTypeCode')) {
                obj['RCRALandTypeCode'] = ApiClient.convertToType(data['RCRALandTypeCode'], 'String');
            }
            if (data.hasOwnProperty('RCRALastFeaDate')) {
                obj['RCRALastFeaDate'] = ApiClient.convertToType(data['RCRALastFeaDate'], 'String');
            }
            if (data.hasOwnProperty('RCRALastFeaDateEPA')) {
                obj['RCRALastFeaDateEPA'] = ApiClient.convertToType(data['RCRALastFeaDateEPA'], 'String');
            }
            if (data.hasOwnProperty('RCRALastFeaDateState')) {
                obj['RCRALastFeaDateState'] = ApiClient.convertToType(data['RCRALastFeaDateState'], 'String');
            }
            if (data.hasOwnProperty('RCRALastIeaDate')) {
                obj['RCRALastIeaDate'] = ApiClient.convertToType(data['RCRALastIeaDate'], 'String');
            }
            if (data.hasOwnProperty('RCRALastIeaDateEPA')) {
                obj['RCRALastIeaDateEPA'] = ApiClient.convertToType(data['RCRALastIeaDateEPA'], 'String');
            }
            if (data.hasOwnProperty('RCRALastIeaDateState')) {
                obj['RCRALastIeaDateState'] = ApiClient.convertToType(data['RCRALastIeaDateState'], 'String');
            }
            if (data.hasOwnProperty('RCRALastInspDateEPA')) {
                obj['RCRALastInspDateEPA'] = ApiClient.convertToType(data['RCRALastInspDateEPA'], 'String');
            }
            if (data.hasOwnProperty('RCRALastInspDateState')) {
                obj['RCRALastInspDateState'] = ApiClient.convertToType(data['RCRALastInspDateState'], 'String');
            }
            if (data.hasOwnProperty('RCRALastInspectionDate')) {
                obj['RCRALastInspectionDate'] = ApiClient.convertToType(data['RCRALastInspectionDate'], 'String');
            }
            if (data.hasOwnProperty('RCRALastPenaltyDate')) {
                obj['RCRALastPenaltyDate'] = ApiClient.convertToType(data['RCRALastPenaltyDate'], 'String');
            }
            if (data.hasOwnProperty('RCRAMapIcon')) {
                obj['RCRAMapIcon'] = ApiClient.convertToType(data['RCRAMapIcon'], 'String');
            }
            if (data.hasOwnProperty('RCRANAICS')) {
                obj['RCRANAICS'] = ApiClient.convertToType(data['RCRANAICS'], 'String');
            }
            if (data.hasOwnProperty('RCRAName')) {
                obj['RCRAName'] = ApiClient.convertToType(data['RCRAName'], 'String');
            }
            if (data.hasOwnProperty('RCRAOldestOpenVioDate')) {
                obj['RCRAOldestOpenVioDate'] = ApiClient.convertToType(data['RCRAOldestOpenVioDate'], 'String');
            }
            if (data.hasOwnProperty('RCRAPenalties')) {
                obj['RCRAPenalties'] = ApiClient.convertToType(data['RCRAPenalties'], 'String');
            }
            if (data.hasOwnProperty('RCRAQtrsWithNC')) {
                obj['RCRAQtrsWithNC'] = ApiClient.convertToType(data['RCRAQtrsWithNC'], 'String');
            }
            if (data.hasOwnProperty('RCRAQtrsWithSNC')) {
                obj['RCRAQtrsWithSNC'] = ApiClient.convertToType(data['RCRAQtrsWithSNC'], 'String');
            }
            if (data.hasOwnProperty('RCRASNC')) {
                obj['RCRASNC'] = ApiClient.convertToType(data['RCRASNC'], 'String');
            }
            if (data.hasOwnProperty('RCRAState')) {
                obj['RCRAState'] = ApiClient.convertToType(data['RCRAState'], 'String');
            }
            if (data.hasOwnProperty('RCRAStateDistrict')) {
                obj['RCRAStateDistrict'] = ApiClient.convertToType(data['RCRAStateDistrict'], 'String');
            }
            if (data.hasOwnProperty('RCRAStatus')) {
                obj['RCRAStatus'] = ApiClient.convertToType(data['RCRAStatus'], 'String');
            }
            if (data.hasOwnProperty('RCRAStreet')) {
                obj['RCRAStreet'] = ApiClient.convertToType(data['RCRAStreet'], 'String');
            }
            if (data.hasOwnProperty('RCRATRIbalLandCode')) {
                obj['RCRATRIbalLandCode'] = ApiClient.convertToType(data['RCRATRIbalLandCode'], 'String');
            }
            if (data.hasOwnProperty('RCRAUniverse')) {
                obj['RCRAUniverse'] = ApiClient.convertToType(data['RCRAUniverse'], 'String');
            }
            if (data.hasOwnProperty('RCRAViolationTypes')) {
                obj['RCRAViolationTypes'] = ApiClient.convertToType(data['RCRAViolationTypes'], 'String');
            }
            if (data.hasOwnProperty('RCRAZip')) {
                obj['RCRAZip'] = ApiClient.convertToType(data['RCRAZip'], 'String');
            }
            if (data.hasOwnProperty('RCRAinfoLandTypeCode')) {
                obj['RCRAinfoLandTypeCode'] = ApiClient.convertToType(data['RCRAinfoLandTypeCode'], 'String');
            }
            if (data.hasOwnProperty('RCRAinfoLandTypeDesc')) {
                obj['RCRAinfoLandTypeDesc'] = ApiClient.convertToType(data['RCRAinfoLandTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('ReferencePoint')) {
                obj['ReferencePoint'] = ApiClient.convertToType(data['ReferencePoint'], 'String');
            }
            if (data.hasOwnProperty('RegistryID')) {
                obj['RegistryID'] = ApiClient.convertToType(data['RegistryID'], 'String');
            }
            if (data.hasOwnProperty('RmpIDs')) {
                obj['RmpIDs'] = ApiClient.convertToType(data['RmpIDs'], 'String');
            }
            if (data.hasOwnProperty('SDWAIDs')) {
                obj['SDWAIDs'] = ApiClient.convertToType(data['SDWAIDs'], 'String');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'String');
            }
            if (data.hasOwnProperty('SemsIDs')) {
                obj['SemsIDs'] = ApiClient.convertToType(data['SemsIDs'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('Statute')) {
                obj['Statute'] = ApiClient.convertToType(data['Statute'], 'String');
            }
            if (data.hasOwnProperty('TRIIDs')) {
                obj['TRIIDs'] = ApiClient.convertToType(data['TRIIDs'], 'String');
            }
            if (data.hasOwnProperty('TRIbalFlag')) {
                obj['TRIbalFlag'] = ApiClient.convertToType(data['TRIbalFlag'], 'String');
            }
            if (data.hasOwnProperty('Tsdf')) {
                obj['Tsdf'] = ApiClient.convertToType(data['Tsdf'], 'String');
            }
            if (data.hasOwnProperty('ViolFlag')) {
                obj['ViolFlag'] = ApiClient.convertToType(data['ViolFlag'], 'String');
            }
            if (data.hasOwnProperty('WebDocs')) {
                obj['WebDocs'] = ApiClient.convertToType(data['WebDocs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rcra07</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rcra07</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rcra07.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AIRIDs'] && !(typeof data['AIRIDs'] === 'string' || data['AIRIDs'] instanceof String)) {
            throw new Error("Expected the field `AIRIDs` to be a primitive type in the JSON string but got " + data['AIRIDs']);
        }
        // ensure the json data is a string
        if (data['ActiveLower48'] && !(typeof data['ActiveLower48'] === 'string' || data['ActiveLower48'] instanceof String)) {
            throw new Error("Expected the field `ActiveLower48` to be a primitive type in the JSON string but got " + data['ActiveLower48']);
        }
        // ensure the json data is a string
        if (data['CWAIDs'] && !(typeof data['CWAIDs'] === 'string' || data['CWAIDs'] instanceof String)) {
            throw new Error("Expected the field `CWAIDs` to be a primitive type in the JSON string but got " + data['CWAIDs']);
        }
        // ensure the json data is a string
        if (data['CalculatedAccuracyMeters'] && !(typeof data['CalculatedAccuracyMeters'] === 'string' || data['CalculatedAccuracyMeters'] instanceof String)) {
            throw new Error("Expected the field `CalculatedAccuracyMeters` to be a primitive type in the JSON string but got " + data['CalculatedAccuracyMeters']);
        }
        // ensure the json data is a string
        if (data['CensusBlockGroup'] && !(typeof data['CensusBlockGroup'] === 'string' || data['CensusBlockGroup'] instanceof String)) {
            throw new Error("Expected the field `CensusBlockGroup` to be a primitive type in the JSON string but got " + data['CensusBlockGroup']);
        }
        // ensure the json data is a string
        if (data['ChemNamesRelLand'] && !(typeof data['ChemNamesRelLand'] === 'string' || data['ChemNamesRelLand'] instanceof String)) {
            throw new Error("Expected the field `ChemNamesRelLand` to be a primitive type in the JSON string but got " + data['ChemNamesRelLand']);
        }
        // ensure the json data is a string
        if (data['ChesapeakeBayFlag'] && !(typeof data['ChesapeakeBayFlag'] === 'string' || data['ChesapeakeBayFlag'] instanceof String)) {
            throw new Error("Expected the field `ChesapeakeBayFlag` to be a primitive type in the JSON string but got " + data['ChesapeakeBayFlag']);
        }
        // ensure the json data is a string
        if (data['CleanupActionFlag'] && !(typeof data['CleanupActionFlag'] === 'string' || data['CleanupActionFlag'] instanceof String)) {
            throw new Error("Expected the field `CleanupActionFlag` to be a primitive type in the JSON string but got " + data['CleanupActionFlag']);
        }
        // ensure the json data is a string
        if (data['CollectionMethod'] && !(typeof data['CollectionMethod'] === 'string' || data['CollectionMethod'] instanceof String)) {
            throw new Error("Expected the field `CollectionMethod` to be a primitive type in the JSON string but got " + data['CollectionMethod']);
        }
        // ensure the json data is a string
        if (data['CurrSvFlag'] && !(typeof data['CurrSvFlag'] === 'string' || data['CurrSvFlag'] instanceof String)) {
            throw new Error("Expected the field `CurrSvFlag` to be a primitive type in the JSON string but got " + data['CurrSvFlag']);
        }
        // ensure the json data is a string
        if (data['CurrVioFlag'] && !(typeof data['CurrVioFlag'] === 'string' || data['CurrVioFlag'] instanceof String)) {
            throw new Error("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got " + data['CurrVioFlag']);
        }
        // ensure the json data is a string
        if (data['CurrentVioCnt'] && !(typeof data['CurrentVioCnt'] === 'string' || data['CurrentVioCnt'] instanceof String)) {
            throw new Error("Expected the field `CurrentVioCnt` to be a primitive type in the JSON string but got " + data['CurrentVioCnt']);
        }
        // ensure the json data is a string
        if (data['DateLastRecordReview'] && !(typeof data['DateLastRecordReview'] === 'string' || data['DateLastRecordReview'] instanceof String)) {
            throw new Error("Expected the field `DateLastRecordReview` to be a primitive type in the JSON string but got " + data['DateLastRecordReview']);
        }
        // ensure the json data is a string
        if (data['EPASystem'] && !(typeof data['EPASystem'] === 'string' || data['EPASystem'] instanceof String)) {
            throw new Error("Expected the field `EPASystem` to be a primitive type in the JSON string but got " + data['EPASystem']);
        }
        // ensure the json data is a string
        if (data['Ea5yrFlag'] && !(typeof data['Ea5yrFlag'] === 'string' || data['Ea5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Ea5yrFlag` to be a primitive type in the JSON string but got " + data['Ea5yrFlag']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlag'] && !(typeof data['EjscreenFlag'] === 'string' || data['EjscreenFlag'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlag` to be a primitive type in the JSON string but got " + data['EjscreenFlag']);
        }
        // ensure the json data is a string
        if (data['EjscreenFlagUs'] && !(typeof data['EjscreenFlagUs'] === 'string' || data['EjscreenFlagUs'] instanceof String)) {
            throw new Error("Expected the field `EjscreenFlagUs` to be a primitive type in the JSON string but got " + data['EjscreenFlagUs']);
        }
        // ensure the json data is a string
        if (data['FacCountyName'] && !(typeof data['FacCountyName'] === 'string' || data['FacCountyName'] instanceof String)) {
            throw new Error("Expected the field `FacCountyName` to be a primitive type in the JSON string but got " + data['FacCountyName']);
        }
        // ensure the json data is a string
        if (data['FacDerivedHuc'] && !(typeof data['FacDerivedHuc'] === 'string' || data['FacDerivedHuc'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedHuc` to be a primitive type in the JSON string but got " + data['FacDerivedHuc']);
        }
        // ensure the json data is a string
        if (data['FacDerivedTRIbes'] && !(typeof data['FacDerivedTRIbes'] === 'string' || data['FacDerivedTRIbes'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedTRIbes` to be a primitive type in the JSON string but got " + data['FacDerivedTRIbes']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBD'] && !(typeof data['FacDerivedWBD'] === 'string' || data['FacDerivedWBD'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBD` to be a primitive type in the JSON string but got " + data['FacDerivedWBD']);
        }
        // ensure the json data is a string
        if (data['FacDerivedWBDName'] && !(typeof data['FacDerivedWBDName'] === 'string' || data['FacDerivedWBDName'] instanceof String)) {
            throw new Error("Expected the field `FacDerivedWBDName` to be a primitive type in the JSON string but got " + data['FacDerivedWBDName']);
        }
        // ensure the json data is a string
        if (data['FacFIPSCode'] && !(typeof data['FacFIPSCode'] === 'string' || data['FacFIPSCode'] instanceof String)) {
            throw new Error("Expected the field `FacFIPSCode` to be a primitive type in the JSON string but got " + data['FacFIPSCode']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgencyCode'] && !(typeof data['FacFederalAgencyCode'] === 'string' || data['FacFederalAgencyCode'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgencyCode` to be a primitive type in the JSON string but got " + data['FacFederalAgencyCode']);
        }
        // ensure the json data is a string
        if (data['FacFederalAgencyName'] && !(typeof data['FacFederalAgencyName'] === 'string' || data['FacFederalAgencyName'] instanceof String)) {
            throw new Error("Expected the field `FacFederalAgencyName` to be a primitive type in the JSON string but got " + data['FacFederalAgencyName']);
        }
        // ensure the json data is a string
        if (data['FacIndianCntryFlg'] && !(typeof data['FacIndianCntryFlg'] === 'string' || data['FacIndianCntryFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianCntryFlg` to be a primitive type in the JSON string but got " + data['FacIndianCntryFlg']);
        }
        // ensure the json data is a string
        if (data['FacIndianSpatialFlg'] && !(typeof data['FacIndianSpatialFlg'] === 'string' || data['FacIndianSpatialFlg'] instanceof String)) {
            throw new Error("Expected the field `FacIndianSpatialFlg` to be a primitive type in the JSON string but got " + data['FacIndianSpatialFlg']);
        }
        // ensure the json data is a string
        if (data['FacLat'] && !(typeof data['FacLat'] === 'string' || data['FacLat'] instanceof String)) {
            throw new Error("Expected the field `FacLat` to be a primitive type in the JSON string but got " + data['FacLat']);
        }
        // ensure the json data is a string
        if (data['FacLong'] && !(typeof data['FacLong'] === 'string' || data['FacLong'] instanceof String)) {
            throw new Error("Expected the field `FacLong` to be a primitive type in the JSON string but got " + data['FacLong']);
        }
        // ensure the json data is a string
        if (data['FacMapFlg'] && !(typeof data['FacMapFlg'] === 'string' || data['FacMapFlg'] instanceof String)) {
            throw new Error("Expected the field `FacMapFlg` to be a primitive type in the JSON string but got " + data['FacMapFlg']);
        }
        // ensure the json data is a string
        if (data['FacMapIcon'] && !(typeof data['FacMapIcon'] === 'string' || data['FacMapIcon'] instanceof String)) {
            throw new Error("Expected the field `FacMapIcon` to be a primitive type in the JSON string but got " + data['FacMapIcon']);
        }
        // ensure the json data is a string
        if (data['FacPercentMinority'] && !(typeof data['FacPercentMinority'] === 'string' || data['FacPercentMinority'] instanceof String)) {
            throw new Error("Expected the field `FacPercentMinority` to be a primitive type in the JSON string but got " + data['FacPercentMinority']);
        }
        // ensure the json data is a string
        if (data['FacPopulationDensity'] && !(typeof data['FacPopulationDensity'] === 'string' || data['FacPopulationDensity'] instanceof String)) {
            throw new Error("Expected the field `FacPopulationDensity` to be a primitive type in the JSON string but got " + data['FacPopulationDensity']);
        }
        // ensure the json data is a string
        if (data['FacSICCodes'] && !(typeof data['FacSICCodes'] === 'string' || data['FacSICCodes'] instanceof String)) {
            throw new Error("Expected the field `FacSICCodes` to be a primitive type in the JSON string but got " + data['FacSICCodes']);
        }
        // ensure the json data is a string
        if (data['FacStdCountyName'] && !(typeof data['FacStdCountyName'] === 'string' || data['FacStdCountyName'] instanceof String)) {
            throw new Error("Expected the field `FacStdCountyName` to be a primitive type in the JSON string but got " + data['FacStdCountyName']);
        }
        // ensure the json data is a string
        if (data['FacTRILandReleases'] && !(typeof data['FacTRILandReleases'] === 'string' || data['FacTRILandReleases'] instanceof String)) {
            throw new Error("Expected the field `FacTRILandReleases` to be a primitive type in the JSON string but got " + data['FacTRILandReleases']);
        }
        // ensure the json data is a string
        if (data['FacTRIOffSiteTransfers'] && !(typeof data['FacTRIOffSiteTransfers'] === 'string' || data['FacTRIOffSiteTransfers'] instanceof String)) {
            throw new Error("Expected the field `FacTRIOffSiteTransfers` to be a primitive type in the JSON string but got " + data['FacTRIOffSiteTransfers']);
        }
        // ensure the json data is a string
        if (data['FacTRIOnSiteReleases'] && !(typeof data['FacTRIOnSiteReleases'] === 'string' || data['FacTRIOnSiteReleases'] instanceof String)) {
            throw new Error("Expected the field `FacTRIOnSiteReleases` to be a primitive type in the JSON string but got " + data['FacTRIOnSiteReleases']);
        }
        // ensure the json data is a string
        if (data['FacTRIReporter'] && !(typeof data['FacTRIReporter'] === 'string' || data['FacTRIReporter'] instanceof String)) {
            throw new Error("Expected the field `FacTRIReporter` to be a primitive type in the JSON string but got " + data['FacTRIReporter']);
        }
        // ensure the json data is a string
        if (data['FacUsMexBorderFlg'] && !(typeof data['FacUsMexBorderFlg'] === 'string' || data['FacUsMexBorderFlg'] instanceof String)) {
            throw new Error("Expected the field `FacUsMexBorderFlg` to be a primitive type in the JSON string but got " + data['FacUsMexBorderFlg']);
        }
        // ensure the json data is a string
        if (data['Infea5yrFlag'] && !(typeof data['Infea5yrFlag'] === 'string' || data['Infea5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Infea5yrFlag` to be a primitive type in the JSON string but got " + data['Infea5yrFlag']);
        }
        // ensure the json data is a string
        if (data['Insp5yrFlag'] && !(typeof data['Insp5yrFlag'] === 'string' || data['Insp5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got " + data['Insp5yrFlag']);
        }
        // ensure the json data is a string
        if (data['LastViolationDate'] && !(typeof data['LastViolationDate'] === 'string' || data['LastViolationDate'] instanceof String)) {
            throw new Error("Expected the field `LastViolationDate` to be a primitive type in the JSON string but got " + data['LastViolationDate']);
        }
        // ensure the json data is a string
        if (data['Lower48'] && !(typeof data['Lower48'] === 'string' || data['Lower48'] instanceof String)) {
            throw new Error("Expected the field `Lower48` to be a primitive type in the JSON string but got " + data['Lower48']);
        }
        // ensure the json data is a string
        if (data['Map'] && !(typeof data['Map'] === 'string' || data['Map'] instanceof String)) {
            throw new Error("Expected the field `Map` to be a primitive type in the JSON string but got " + data['Map']);
        }
        // ensure the json data is a string
        if (data['MaxPctileUs'] && !(typeof data['MaxPctileUs'] === 'string' || data['MaxPctileUs'] instanceof String)) {
            throw new Error("Expected the field `MaxPctileUs` to be a primitive type in the JSON string but got " + data['MaxPctileUs']);
        }
        // ensure the json data is a string
        if (data['MaxScore'] && !(typeof data['MaxScore'] === 'string' || data['MaxScore'] instanceof String)) {
            throw new Error("Expected the field `MaxScore` to be a primitive type in the JSON string but got " + data['MaxScore']);
        }
        // ensure the json data is a string
        if (data['ObjectId'] && !(typeof data['ObjectId'] === 'string' || data['ObjectId'] instanceof String)) {
            throw new Error("Expected the field `ObjectId` to be a primitive type in the JSON string but got " + data['ObjectId']);
        }
        // ensure the json data is a string
        if (data['OperatorCode'] && !(typeof data['OperatorCode'] === 'string' || data['OperatorCode'] instanceof String)) {
            throw new Error("Expected the field `OperatorCode` to be a primitive type in the JSON string but got " + data['OperatorCode']);
        }
        // ensure the json data is a string
        if (data['OperatorDesc'] && !(typeof data['OperatorDesc'] === 'string' || data['OperatorDesc'] instanceof String)) {
            throw new Error("Expected the field `OperatorDesc` to be a primitive type in the JSON string but got " + data['OperatorDesc']);
        }
        // ensure the json data is a string
        if (data['Over80CountUs'] && !(typeof data['Over80CountUs'] === 'string' || data['Over80CountUs'] instanceof String)) {
            throw new Error("Expected the field `Over80CountUs` to be a primitive type in the JSON string but got " + data['Over80CountUs']);
        }
        // ensure the json data is a string
        if (data['OwnerCode'] && !(typeof data['OwnerCode'] === 'string' || data['OwnerCode'] instanceof String)) {
            throw new Error("Expected the field `OwnerCode` to be a primitive type in the JSON string but got " + data['OwnerCode']);
        }
        // ensure the json data is a string
        if (data['OwnerDesc'] && !(typeof data['OwnerDesc'] === 'string' || data['OwnerDesc'] instanceof String)) {
            throw new Error("Expected the field `OwnerDesc` to be a primitive type in the JSON string but got " + data['OwnerDesc']);
        }
        // ensure the json data is a string
        if (data['PctileCancerUs'] && !(typeof data['PctileCancerUs'] === 'string' || data['PctileCancerUs'] instanceof String)) {
            throw new Error("Expected the field `PctileCancerUs` to be a primitive type in the JSON string but got " + data['PctileCancerUs']);
        }
        // ensure the json data is a string
        if (data['PctileDpmUs'] && !(typeof data['PctileDpmUs'] === 'string' || data['PctileDpmUs'] instanceof String)) {
            throw new Error("Expected the field `PctileDpmUs` to be a primitive type in the JSON string but got " + data['PctileDpmUs']);
        }
        // ensure the json data is a string
        if (data['PctileO3Us'] && !(typeof data['PctileO3Us'] === 'string' || data['PctileO3Us'] instanceof String)) {
            throw new Error("Expected the field `PctileO3Us` to be a primitive type in the JSON string but got " + data['PctileO3Us']);
        }
        // ensure the json data is a string
        if (data['PctilePctpre1960Us'] && !(typeof data['PctilePctpre1960Us'] === 'string' || data['PctilePctpre1960Us'] instanceof String)) {
            throw new Error("Expected the field `PctilePctpre1960Us` to be a primitive type in the JSON string but got " + data['PctilePctpre1960Us']);
        }
        // ensure the json data is a string
        if (data['PctilePmUs'] && !(typeof data['PctilePmUs'] === 'string' || data['PctilePmUs'] instanceof String)) {
            throw new Error("Expected the field `PctilePmUs` to be a primitive type in the JSON string but got " + data['PctilePmUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityNPDESUs'] && !(typeof data['PctileProximityNPDESUs'] === 'string' || data['PctileProximityNPDESUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityNPDESUs` to be a primitive type in the JSON string but got " + data['PctileProximityNPDESUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityNplUs'] && !(typeof data['PctileProximityNplUs'] === 'string' || data['PctileProximityNplUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityNplUs` to be a primitive type in the JSON string but got " + data['PctileProximityNplUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityRmpUs'] && !(typeof data['PctileProximityRmpUs'] === 'string' || data['PctileProximityRmpUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityRmpUs` to be a primitive type in the JSON string but got " + data['PctileProximityRmpUs']);
        }
        // ensure the json data is a string
        if (data['PctileProximityTsdfUs'] && !(typeof data['PctileProximityTsdfUs'] === 'string' || data['PctileProximityTsdfUs'] instanceof String)) {
            throw new Error("Expected the field `PctileProximityTsdfUs` to be a primitive type in the JSON string but got " + data['PctileProximityTsdfUs']);
        }
        // ensure the json data is a string
        if (data['PctileRespUs'] && !(typeof data['PctileRespUs'] === 'string' || data['PctileRespUs'] instanceof String)) {
            throw new Error("Expected the field `PctileRespUs` to be a primitive type in the JSON string but got " + data['PctileRespUs']);
        }
        // ensure the json data is a string
        if (data['PctileTrafficScoreUs'] && !(typeof data['PctileTrafficScoreUs'] === 'string' || data['PctileTrafficScoreUs'] instanceof String)) {
            throw new Error("Expected the field `PctileTrafficScoreUs` to be a primitive type in the JSON string but got " + data['PctileTrafficScoreUs']);
        }
        // ensure the json data is a string
        if (data['RCRA3yrComplQtrsHistory'] && !(typeof data['RCRA3yrComplQtrsHistory'] === 'string' || data['RCRA3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `RCRA3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['RCRA3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['RCRACaseIDs'] && !(typeof data['RCRACaseIDs'] === 'string' || data['RCRACaseIDs'] instanceof String)) {
            throw new Error("Expected the field `RCRACaseIDs` to be a primitive type in the JSON string but got " + data['RCRACaseIDs']);
        }
        // ensure the json data is a string
        if (data['RCRACity'] && !(typeof data['RCRACity'] === 'string' || data['RCRACity'] instanceof String)) {
            throw new Error("Expected the field `RCRACity` to be a primitive type in the JSON string but got " + data['RCRACity']);
        }
        // ensure the json data is a string
        if (data['RCRAComplStatus'] && !(typeof data['RCRAComplStatus'] === 'string' || data['RCRAComplStatus'] instanceof String)) {
            throw new Error("Expected the field `RCRAComplStatus` to be a primitive type in the JSON string but got " + data['RCRAComplStatus']);
        }
        // ensure the json data is a string
        if (data['RCRACounty'] && !(typeof data['RCRACounty'] === 'string' || data['RCRACounty'] instanceof String)) {
            throw new Error("Expected the field `RCRACounty` to be a primitive type in the JSON string but got " + data['RCRACounty']);
        }
        // ensure the json data is a string
        if (data['RCRADaysLastInspection'] && !(typeof data['RCRADaysLastInspection'] === 'string' || data['RCRADaysLastInspection'] instanceof String)) {
            throw new Error("Expected the field `RCRADaysLastInspection` to be a primitive type in the JSON string but got " + data['RCRADaysLastInspection']);
        }
        // ensure the json data is a string
        if (data['RCRAEPARegion'] && !(typeof data['RCRAEPARegion'] === 'string' || data['RCRAEPARegion'] instanceof String)) {
            throw new Error("Expected the field `RCRAEPARegion` to be a primitive type in the JSON string but got " + data['RCRAEPARegion']);
        }
        // ensure the json data is a string
        if (data['RCRAFIPSCode'] && !(typeof data['RCRAFIPSCode'] === 'string' || data['RCRAFIPSCode'] instanceof String)) {
            throw new Error("Expected the field `RCRAFIPSCode` to be a primitive type in the JSON string but got " + data['RCRAFIPSCode']);
        }
        // ensure the json data is a string
        if (data['RCRAFeaCnt'] && !(typeof data['RCRAFeaCnt'] === 'string' || data['RCRAFeaCnt'] instanceof String)) {
            throw new Error("Expected the field `RCRAFeaCnt` to be a primitive type in the JSON string but got " + data['RCRAFeaCnt']);
        }
        // ensure the json data is a string
        if (data['RCRAIDs'] && !(typeof data['RCRAIDs'] === 'string' || data['RCRAIDs'] instanceof String)) {
            throw new Error("Expected the field `RCRAIDs` to be a primitive type in the JSON string but got " + data['RCRAIDs']);
        }
        // ensure the json data is a string
        if (data['RCRAIeaCnt'] && !(typeof data['RCRAIeaCnt'] === 'string' || data['RCRAIeaCnt'] instanceof String)) {
            throw new Error("Expected the field `RCRAIeaCnt` to be a primitive type in the JSON string but got " + data['RCRAIeaCnt']);
        }
        // ensure the json data is a string
        if (data['RCRAImpWaterFlg'] && !(typeof data['RCRAImpWaterFlg'] === 'string' || data['RCRAImpWaterFlg'] instanceof String)) {
            throw new Error("Expected the field `RCRAImpWaterFlg` to be a primitive type in the JSON string but got " + data['RCRAImpWaterFlg']);
        }
        // ensure the json data is a string
        if (data['RCRAIndianCntryFlg'] && !(typeof data['RCRAIndianCntryFlg'] === 'string' || data['RCRAIndianCntryFlg'] instanceof String)) {
            throw new Error("Expected the field `RCRAIndianCntryFlg` to be a primitive type in the JSON string but got " + data['RCRAIndianCntryFlg']);
        }
        // ensure the json data is a string
        if (data['RCRAInspCnt'] && !(typeof data['RCRAInspCnt'] === 'string' || data['RCRAInspCnt'] instanceof String)) {
            throw new Error("Expected the field `RCRAInspCnt` to be a primitive type in the JSON string but got " + data['RCRAInspCnt']);
        }
        // ensure the json data is a string
        if (data['RCRALandTypeCode'] && !(typeof data['RCRALandTypeCode'] === 'string' || data['RCRALandTypeCode'] instanceof String)) {
            throw new Error("Expected the field `RCRALandTypeCode` to be a primitive type in the JSON string but got " + data['RCRALandTypeCode']);
        }
        // ensure the json data is a string
        if (data['RCRALastFeaDate'] && !(typeof data['RCRALastFeaDate'] === 'string' || data['RCRALastFeaDate'] instanceof String)) {
            throw new Error("Expected the field `RCRALastFeaDate` to be a primitive type in the JSON string but got " + data['RCRALastFeaDate']);
        }
        // ensure the json data is a string
        if (data['RCRALastFeaDateEPA'] && !(typeof data['RCRALastFeaDateEPA'] === 'string' || data['RCRALastFeaDateEPA'] instanceof String)) {
            throw new Error("Expected the field `RCRALastFeaDateEPA` to be a primitive type in the JSON string but got " + data['RCRALastFeaDateEPA']);
        }
        // ensure the json data is a string
        if (data['RCRALastFeaDateState'] && !(typeof data['RCRALastFeaDateState'] === 'string' || data['RCRALastFeaDateState'] instanceof String)) {
            throw new Error("Expected the field `RCRALastFeaDateState` to be a primitive type in the JSON string but got " + data['RCRALastFeaDateState']);
        }
        // ensure the json data is a string
        if (data['RCRALastIeaDate'] && !(typeof data['RCRALastIeaDate'] === 'string' || data['RCRALastIeaDate'] instanceof String)) {
            throw new Error("Expected the field `RCRALastIeaDate` to be a primitive type in the JSON string but got " + data['RCRALastIeaDate']);
        }
        // ensure the json data is a string
        if (data['RCRALastIeaDateEPA'] && !(typeof data['RCRALastIeaDateEPA'] === 'string' || data['RCRALastIeaDateEPA'] instanceof String)) {
            throw new Error("Expected the field `RCRALastIeaDateEPA` to be a primitive type in the JSON string but got " + data['RCRALastIeaDateEPA']);
        }
        // ensure the json data is a string
        if (data['RCRALastIeaDateState'] && !(typeof data['RCRALastIeaDateState'] === 'string' || data['RCRALastIeaDateState'] instanceof String)) {
            throw new Error("Expected the field `RCRALastIeaDateState` to be a primitive type in the JSON string but got " + data['RCRALastIeaDateState']);
        }
        // ensure the json data is a string
        if (data['RCRALastInspDateEPA'] && !(typeof data['RCRALastInspDateEPA'] === 'string' || data['RCRALastInspDateEPA'] instanceof String)) {
            throw new Error("Expected the field `RCRALastInspDateEPA` to be a primitive type in the JSON string but got " + data['RCRALastInspDateEPA']);
        }
        // ensure the json data is a string
        if (data['RCRALastInspDateState'] && !(typeof data['RCRALastInspDateState'] === 'string' || data['RCRALastInspDateState'] instanceof String)) {
            throw new Error("Expected the field `RCRALastInspDateState` to be a primitive type in the JSON string but got " + data['RCRALastInspDateState']);
        }
        // ensure the json data is a string
        if (data['RCRALastInspectionDate'] && !(typeof data['RCRALastInspectionDate'] === 'string' || data['RCRALastInspectionDate'] instanceof String)) {
            throw new Error("Expected the field `RCRALastInspectionDate` to be a primitive type in the JSON string but got " + data['RCRALastInspectionDate']);
        }
        // ensure the json data is a string
        if (data['RCRALastPenaltyDate'] && !(typeof data['RCRALastPenaltyDate'] === 'string' || data['RCRALastPenaltyDate'] instanceof String)) {
            throw new Error("Expected the field `RCRALastPenaltyDate` to be a primitive type in the JSON string but got " + data['RCRALastPenaltyDate']);
        }
        // ensure the json data is a string
        if (data['RCRAMapIcon'] && !(typeof data['RCRAMapIcon'] === 'string' || data['RCRAMapIcon'] instanceof String)) {
            throw new Error("Expected the field `RCRAMapIcon` to be a primitive type in the JSON string but got " + data['RCRAMapIcon']);
        }
        // ensure the json data is a string
        if (data['RCRANAICS'] && !(typeof data['RCRANAICS'] === 'string' || data['RCRANAICS'] instanceof String)) {
            throw new Error("Expected the field `RCRANAICS` to be a primitive type in the JSON string but got " + data['RCRANAICS']);
        }
        // ensure the json data is a string
        if (data['RCRAName'] && !(typeof data['RCRAName'] === 'string' || data['RCRAName'] instanceof String)) {
            throw new Error("Expected the field `RCRAName` to be a primitive type in the JSON string but got " + data['RCRAName']);
        }
        // ensure the json data is a string
        if (data['RCRAOldestOpenVioDate'] && !(typeof data['RCRAOldestOpenVioDate'] === 'string' || data['RCRAOldestOpenVioDate'] instanceof String)) {
            throw new Error("Expected the field `RCRAOldestOpenVioDate` to be a primitive type in the JSON string but got " + data['RCRAOldestOpenVioDate']);
        }
        // ensure the json data is a string
        if (data['RCRAPenalties'] && !(typeof data['RCRAPenalties'] === 'string' || data['RCRAPenalties'] instanceof String)) {
            throw new Error("Expected the field `RCRAPenalties` to be a primitive type in the JSON string but got " + data['RCRAPenalties']);
        }
        // ensure the json data is a string
        if (data['RCRAQtrsWithNC'] && !(typeof data['RCRAQtrsWithNC'] === 'string' || data['RCRAQtrsWithNC'] instanceof String)) {
            throw new Error("Expected the field `RCRAQtrsWithNC` to be a primitive type in the JSON string but got " + data['RCRAQtrsWithNC']);
        }
        // ensure the json data is a string
        if (data['RCRAQtrsWithSNC'] && !(typeof data['RCRAQtrsWithSNC'] === 'string' || data['RCRAQtrsWithSNC'] instanceof String)) {
            throw new Error("Expected the field `RCRAQtrsWithSNC` to be a primitive type in the JSON string but got " + data['RCRAQtrsWithSNC']);
        }
        // ensure the json data is a string
        if (data['RCRASNC'] && !(typeof data['RCRASNC'] === 'string' || data['RCRASNC'] instanceof String)) {
            throw new Error("Expected the field `RCRASNC` to be a primitive type in the JSON string but got " + data['RCRASNC']);
        }
        // ensure the json data is a string
        if (data['RCRAState'] && !(typeof data['RCRAState'] === 'string' || data['RCRAState'] instanceof String)) {
            throw new Error("Expected the field `RCRAState` to be a primitive type in the JSON string but got " + data['RCRAState']);
        }
        // ensure the json data is a string
        if (data['RCRAStateDistrict'] && !(typeof data['RCRAStateDistrict'] === 'string' || data['RCRAStateDistrict'] instanceof String)) {
            throw new Error("Expected the field `RCRAStateDistrict` to be a primitive type in the JSON string but got " + data['RCRAStateDistrict']);
        }
        // ensure the json data is a string
        if (data['RCRAStatus'] && !(typeof data['RCRAStatus'] === 'string' || data['RCRAStatus'] instanceof String)) {
            throw new Error("Expected the field `RCRAStatus` to be a primitive type in the JSON string but got " + data['RCRAStatus']);
        }
        // ensure the json data is a string
        if (data['RCRAStreet'] && !(typeof data['RCRAStreet'] === 'string' || data['RCRAStreet'] instanceof String)) {
            throw new Error("Expected the field `RCRAStreet` to be a primitive type in the JSON string but got " + data['RCRAStreet']);
        }
        // ensure the json data is a string
        if (data['RCRATRIbalLandCode'] && !(typeof data['RCRATRIbalLandCode'] === 'string' || data['RCRATRIbalLandCode'] instanceof String)) {
            throw new Error("Expected the field `RCRATRIbalLandCode` to be a primitive type in the JSON string but got " + data['RCRATRIbalLandCode']);
        }
        // ensure the json data is a string
        if (data['RCRAUniverse'] && !(typeof data['RCRAUniverse'] === 'string' || data['RCRAUniverse'] instanceof String)) {
            throw new Error("Expected the field `RCRAUniverse` to be a primitive type in the JSON string but got " + data['RCRAUniverse']);
        }
        // ensure the json data is a string
        if (data['RCRAViolationTypes'] && !(typeof data['RCRAViolationTypes'] === 'string' || data['RCRAViolationTypes'] instanceof String)) {
            throw new Error("Expected the field `RCRAViolationTypes` to be a primitive type in the JSON string but got " + data['RCRAViolationTypes']);
        }
        // ensure the json data is a string
        if (data['RCRAZip'] && !(typeof data['RCRAZip'] === 'string' || data['RCRAZip'] instanceof String)) {
            throw new Error("Expected the field `RCRAZip` to be a primitive type in the JSON string but got " + data['RCRAZip']);
        }
        // ensure the json data is a string
        if (data['RCRAinfoLandTypeCode'] && !(typeof data['RCRAinfoLandTypeCode'] === 'string' || data['RCRAinfoLandTypeCode'] instanceof String)) {
            throw new Error("Expected the field `RCRAinfoLandTypeCode` to be a primitive type in the JSON string but got " + data['RCRAinfoLandTypeCode']);
        }
        // ensure the json data is a string
        if (data['RCRAinfoLandTypeDesc'] && !(typeof data['RCRAinfoLandTypeDesc'] === 'string' || data['RCRAinfoLandTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `RCRAinfoLandTypeDesc` to be a primitive type in the JSON string but got " + data['RCRAinfoLandTypeDesc']);
        }
        // ensure the json data is a string
        if (data['ReferencePoint'] && !(typeof data['ReferencePoint'] === 'string' || data['ReferencePoint'] instanceof String)) {
            throw new Error("Expected the field `ReferencePoint` to be a primitive type in the JSON string but got " + data['ReferencePoint']);
        }
        // ensure the json data is a string
        if (data['RegistryID'] && !(typeof data['RegistryID'] === 'string' || data['RegistryID'] instanceof String)) {
            throw new Error("Expected the field `RegistryID` to be a primitive type in the JSON string but got " + data['RegistryID']);
        }
        // ensure the json data is a string
        if (data['RmpIDs'] && !(typeof data['RmpIDs'] === 'string' || data['RmpIDs'] instanceof String)) {
            throw new Error("Expected the field `RmpIDs` to be a primitive type in the JSON string but got " + data['RmpIDs']);
        }
        // ensure the json data is a string
        if (data['SDWAIDs'] && !(typeof data['SDWAIDs'] === 'string' || data['SDWAIDs'] instanceof String)) {
            throw new Error("Expected the field `SDWAIDs` to be a primitive type in the JSON string but got " + data['SDWAIDs']);
        }
        // ensure the json data is a string
        if (data['Score'] && !(typeof data['Score'] === 'string' || data['Score'] instanceof String)) {
            throw new Error("Expected the field `Score` to be a primitive type in the JSON string but got " + data['Score']);
        }
        // ensure the json data is a string
        if (data['SemsIDs'] && !(typeof data['SemsIDs'] === 'string' || data['SemsIDs'] instanceof String)) {
            throw new Error("Expected the field `SemsIDs` to be a primitive type in the JSON string but got " + data['SemsIDs']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['Statute'] && !(typeof data['Statute'] === 'string' || data['Statute'] instanceof String)) {
            throw new Error("Expected the field `Statute` to be a primitive type in the JSON string but got " + data['Statute']);
        }
        // ensure the json data is a string
        if (data['TRIIDs'] && !(typeof data['TRIIDs'] === 'string' || data['TRIIDs'] instanceof String)) {
            throw new Error("Expected the field `TRIIDs` to be a primitive type in the JSON string but got " + data['TRIIDs']);
        }
        // ensure the json data is a string
        if (data['TRIbalFlag'] && !(typeof data['TRIbalFlag'] === 'string' || data['TRIbalFlag'] instanceof String)) {
            throw new Error("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got " + data['TRIbalFlag']);
        }
        // ensure the json data is a string
        if (data['Tsdf'] && !(typeof data['Tsdf'] === 'string' || data['Tsdf'] instanceof String)) {
            throw new Error("Expected the field `Tsdf` to be a primitive type in the JSON string but got " + data['Tsdf']);
        }
        // ensure the json data is a string
        if (data['ViolFlag'] && !(typeof data['ViolFlag'] === 'string' || data['ViolFlag'] instanceof String)) {
            throw new Error("Expected the field `ViolFlag` to be a primitive type in the JSON string but got " + data['ViolFlag']);
        }
        // ensure the json data is a string
        if (data['WebDocs'] && !(typeof data['WebDocs'] === 'string' || data['WebDocs'] instanceof String)) {
            throw new Error("Expected the field `WebDocs` to be a primitive type in the JSON string but got " + data['WebDocs']);
        }

        return true;
    }


}

Rcra07.RequiredProperties = ["AIRIDs", "ActiveLower48", "CWAIDs", "CalculatedAccuracyMeters", "CensusBlockGroup", "ChemNamesRelLand", "ChesapeakeBayFlag", "CleanupActionFlag", "CollectionMethod", "CurrSvFlag", "CurrVioFlag", "CurrentVioCnt", "DateLastRecordReview", "EPASystem", "Ea5yrFlag", "EjscreenFlag", "EjscreenFlagUs", "FacCountyName", "FacDerivedHuc", "FacDerivedTRIbes", "FacDerivedWBD", "FacDerivedWBDName", "FacFIPSCode", "FacFederalAgencyCode", "FacFederalAgencyName", "FacIndianCntryFlg", "FacIndianSpatialFlg", "FacLat", "FacLong", "FacMapFlg", "FacMapIcon", "FacPercentMinority", "FacPopulationDensity", "FacSICCodes", "FacStdCountyName", "FacTRILandReleases", "FacTRIOffSiteTransfers", "FacTRIOnSiteReleases", "FacTRIReporter", "FacUsMexBorderFlg", "Infea5yrFlag", "Insp5yrFlag", "LastViolationDate", "Lower48", "Map", "MaxPctileUs", "MaxScore", "ObjectId", "OperatorCode", "OperatorDesc", "Over80CountUs", "OwnerCode", "OwnerDesc", "PctileCancerUs", "PctileDpmUs", "PctileO3Us", "PctilePctpre1960Us", "PctilePmUs", "PctileProximityNPDESUs", "PctileProximityNplUs", "PctileProximityRmpUs", "PctileProximityTsdfUs", "PctileRespUs", "PctileTrafficScoreUs", "RCRA3yrComplQtrsHistory", "RCRACaseIDs", "RCRACity", "RCRAComplStatus", "RCRACounty", "RCRADaysLastInspection", "RCRAEPARegion", "RCRAFIPSCode", "RCRAFeaCnt", "RCRAIDs", "RCRAIeaCnt", "RCRAImpWaterFlg", "RCRAIndianCntryFlg", "RCRAInspCnt", "RCRALandTypeCode", "RCRALastFeaDate", "RCRALastFeaDateEPA", "RCRALastFeaDateState", "RCRALastIeaDate", "RCRALastIeaDateEPA", "RCRALastIeaDateState", "RCRALastInspDateEPA", "RCRALastInspDateState", "RCRALastInspectionDate", "RCRALastPenaltyDate", "RCRAMapIcon", "RCRANAICS", "RCRAName", "RCRAOldestOpenVioDate", "RCRAPenalties", "RCRAQtrsWithNC", "RCRAQtrsWithSNC", "RCRASNC", "RCRAState", "RCRAStateDistrict", "RCRAStatus", "RCRAStreet", "RCRATRIbalLandCode", "RCRAUniverse", "RCRAViolationTypes", "RCRAZip", "RCRAinfoLandTypeCode", "RCRAinfoLandTypeDesc", "ReferencePoint", "RegistryID", "RmpIDs", "SDWAIDs", "Score", "SemsIDs", "SourceID", "Statute", "TRIIDs", "TRIbalFlag", "Tsdf", "ViolFlag", "WebDocs"];

/**
 * Air Facility System (AFS) ID.
 * @member {String} AIRIDs
 */
Rcra07.prototype['AIRIDs'] = undefined;

/**
 * A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
 * @member {String} ActiveLower48
 */
Rcra07.prototype['ActiveLower48'] = undefined;

/**
 * A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
 * @member {String} CWAIDs
 */
Rcra07.prototype['CWAIDs'] = undefined;

/**
 * The estimated accuracy in Meters for the facility's geospatial coordinate.
 * @member {String} CalculatedAccuracyMeters
 */
Rcra07.prototype['CalculatedAccuracyMeters'] = undefined;

/**
 * A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
 * @member {String} CensusBlockGroup
 */
Rcra07.prototype['CensusBlockGroup'] = undefined;

/**
 * It is an aggregated field containing all the names found for the current reporting year (2017).
 * @member {String} ChemNamesRelLand
 */
Rcra07.prototype['ChemNamesRelLand'] = undefined;

/**
 * Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.
 * @member {String} ChesapeakeBayFlag
 */
Rcra07.prototype['ChesapeakeBayFlag'] = undefined;

/**
 * @member {String} CleanupActionFlag
 */
Rcra07.prototype['CleanupActionFlag'] = undefined;

/**
 * ??
 * @member {String} CollectionMethod
 */
Rcra07.prototype['CollectionMethod'] = undefined;

/**
 * Indicates if the facility has a current significant violation. 1 = Yes
 * @member {String} CurrSvFlag
 */
Rcra07.prototype['CurrSvFlag'] = undefined;

/**
 * Indicates if the facility has a current violation. 1 = Yes
 * @member {String} CurrVioFlag
 */
Rcra07.prototype['CurrVioFlag'] = undefined;

/**
 * @member {String} CurrentVioCnt
 */
Rcra07.prototype['CurrentVioCnt'] = undefined;

/**
 * @member {String} DateLastRecordReview
 */
Rcra07.prototype['DateLastRecordReview'] = undefined;

/**
 * The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
 * @member {String} EPASystem
 */
Rcra07.prototype['EPASystem'] = undefined;

/**
 * Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes
 * @member {String} Ea5yrFlag
 */
Rcra07.prototype['Ea5yrFlag'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlag
 */
Rcra07.prototype['EjscreenFlag'] = undefined;

/**
 * A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
 * @member {String} EjscreenFlagUs
 */
Rcra07.prototype['EjscreenFlagUs'] = undefined;

/**
 * The facility county name from EPA's Facility Registry System
 * @member {String} FacCountyName
 */
Rcra07.prototype['FacCountyName'] = undefined;

/**
 * The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
 * @member {String} FacDerivedHuc
 */
Rcra07.prototype['FacDerivedHuc'] = undefined;

/**
 * The tribes or tribal territories located within 25 miles of the facility's location.
 * @member {String} FacDerivedTRIbes
 */
Rcra07.prototype['FacDerivedTRIbes'] = undefined;

/**
 * The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
 * @member {String} FacDerivedWBD
 */
Rcra07.prototype['FacDerivedWBD'] = undefined;

/**
 * The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
 * @member {String} FacDerivedWBDName
 */
Rcra07.prototype['FacDerivedWBDName'] = undefined;

/**
 * The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
 * @member {String} FacFIPSCode
 */
Rcra07.prototype['FacFIPSCode'] = undefined;

/**
 * Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
 * @member {String} FacFederalAgencyCode
 */
Rcra07.prototype['FacFederalAgencyCode'] = undefined;

/**
 * Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
 * @member {String} FacFederalAgencyName
 */
Rcra07.prototype['FacFederalAgencyName'] = undefined;

/**
 * Flag showing Y/N whether the facility is located in Indian Country.
 * @member {String} FacIndianCntryFlg
 */
Rcra07.prototype['FacIndianCntryFlg'] = undefined;

/**
 * Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
 * @member {String} FacIndianSpatialFlg
 */
Rcra07.prototype['FacIndianSpatialFlg'] = undefined;

/**
 * The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
 * @member {String} FacLat
 */
Rcra07.prototype['FacLat'] = undefined;

/**
 * The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
 * @member {String} FacLong
 */
Rcra07.prototype['FacLong'] = undefined;

/**
 * Graphical indicator denoting whether geographical data required to map a facility are available.
 * @member {String} FacMapFlg
 */
Rcra07.prototype['FacMapFlg'] = undefined;

/**
 * The default map icon image file calculated for the facility by the ECHO program.
 * @member {String} FacMapIcon
 */
Rcra07.prototype['FacMapIcon'] = undefined;

/**
 * Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
 * @member {String} FacPercentMinority
 */
Rcra07.prototype['FacPercentMinority'] = undefined;

/**
 * The number of persons per square mile in the profiled area.
 * @member {String} FacPopulationDensity
 */
Rcra07.prototype['FacPopulationDensity'] = undefined;

/**
 * Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
 * @member {String} FacSICCodes
 */
Rcra07.prototype['FacSICCodes'] = undefined;

/**
 * The standardized  facility county name from EPA's Facility Registry System
 * @member {String} FacStdCountyName
 */
Rcra07.prototype['FacStdCountyName'] = undefined;

/**
 * @member {String} FacTRILandReleases
 */
Rcra07.prototype['FacTRILandReleases'] = undefined;

/**
 * @member {String} FacTRIOffSiteTransfers
 */
Rcra07.prototype['FacTRIOffSiteTransfers'] = undefined;

/**
 * @member {String} FacTRIOnSiteReleases
 */
Rcra07.prototype['FacTRIOnSiteReleases'] = undefined;

/**
 * Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
 * @member {String} FacTRIReporter
 */
Rcra07.prototype['FacTRIReporter'] = undefined;

/**
 * A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
 * @member {String} FacUsMexBorderFlg
 */
Rcra07.prototype['FacUsMexBorderFlg'] = undefined;

/**
 * Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.
 * @member {String} Infea5yrFlag
 */
Rcra07.prototype['Infea5yrFlag'] = undefined;

/**
 * Indicates if the facility has an inspection within the last 5 years. 1 = Yes
 * @member {String} Insp5yrFlag
 */
Rcra07.prototype['Insp5yrFlag'] = undefined;

/**
 * @member {String} LastViolationDate
 */
Rcra07.prototype['LastViolationDate'] = undefined;

/**
 * Flag showing Y/N whether location is within the contiguous (lower 48) United States.
 * @member {String} Lower48
 */
Rcra07.prototype['Lower48'] = undefined;

/**
 * No Longer Used.
 * @member {String} Map
 */
Rcra07.prototype['Map'] = undefined;

/**
 * The maximum percentile from all individual EJSCREEN indicators.
 * @member {String} MaxPctileUs
 */
Rcra07.prototype['MaxPctileUs'] = undefined;

/**
 * A sorting score for internal use.
 * @member {String} MaxScore
 */
Rcra07.prototype['MaxScore'] = undefined;

/**
 * Sequential number assigned to each facility or cluster returned.
 * @member {String} ObjectId
 */
Rcra07.prototype['ObjectId'] = undefined;

/**
 * @member {String} OperatorCode
 */
Rcra07.prototype['OperatorCode'] = undefined;

/**
 * @member {String} OperatorDesc
 */
Rcra07.prototype['OperatorDesc'] = undefined;

/**
 * The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
 * @member {String} Over80CountUs
 */
Rcra07.prototype['Over80CountUs'] = undefined;

/**
 * @member {String} OwnerCode
 */
Rcra07.prototype['OwnerCode'] = undefined;

/**
 * Description of Owner code
 * @member {String} OwnerDesc
 */
Rcra07.prototype['OwnerDesc'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
 * @member {String} PctileCancerUs
 */
Rcra07.prototype['PctileCancerUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
 * @member {String} PctileDpmUs
 */
Rcra07.prototype['PctileDpmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN ozone indicator.
 * @member {String} PctileO3Us
 */
Rcra07.prototype['PctileO3Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Lead paint indicator.
 * @member {String} PctilePctpre1960Us
 */
Rcra07.prototype['PctilePctpre1960Us'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN particulate matter indicator.
 * @member {String} PctilePmUs
 */
Rcra07.prototype['PctilePmUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
 * @member {String} PctileProximityNPDESUs
 */
Rcra07.prototype['PctileProximityNPDESUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
 * @member {String} PctileProximityNplUs
 */
Rcra07.prototype['PctileProximityNplUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
 * @member {String} PctileProximityRmpUs
 */
Rcra07.prototype['PctileProximityRmpUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
 * @member {String} PctileProximityTsdfUs
 */
Rcra07.prototype['PctileProximityTsdfUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
 * @member {String} PctileRespUs
 */
Rcra07.prototype['PctileRespUs'] = undefined;

/**
 * The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
 * @member {String} PctileTrafficScoreUs
 */
Rcra07.prototype['PctileTrafficScoreUs'] = undefined;

/**
 * The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined
 * @member {String} RCRA3yrComplQtrsHistory
 */
Rcra07.prototype['RCRA3yrComplQtrsHistory'] = undefined;

/**
 * @member {String} RCRACaseIDs
 */
Rcra07.prototype['RCRACaseIDs'] = undefined;

/**
 * @member {String} RCRACity
 */
Rcra07.prototype['RCRACity'] = undefined;

/**
 * @member {String} RCRAComplStatus
 */
Rcra07.prototype['RCRAComplStatus'] = undefined;

/**
 * @member {String} RCRACounty
 */
Rcra07.prototype['RCRACounty'] = undefined;

/**
 * @member {String} RCRADaysLastInspection
 */
Rcra07.prototype['RCRADaysLastInspection'] = undefined;

/**
 * @member {String} RCRAEPARegion
 */
Rcra07.prototype['RCRAEPARegion'] = undefined;

/**
 * @member {String} RCRAFIPSCode
 */
Rcra07.prototype['RCRAFIPSCode'] = undefined;

/**
 * @member {String} RCRAFeaCnt
 */
Rcra07.prototype['RCRAFeaCnt'] = undefined;

/**
 * A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
 * @member {String} RCRAIDs
 */
Rcra07.prototype['RCRAIDs'] = undefined;

/**
 * @member {String} RCRAIeaCnt
 */
Rcra07.prototype['RCRAIeaCnt'] = undefined;

/**
 * @member {String} RCRAImpWaterFlg
 */
Rcra07.prototype['RCRAImpWaterFlg'] = undefined;

/**
 * @member {String} RCRAIndianCntryFlg
 */
Rcra07.prototype['RCRAIndianCntryFlg'] = undefined;

/**
 * @member {String} RCRAInspCnt
 */
Rcra07.prototype['RCRAInspCnt'] = undefined;

/**
 * @member {String} RCRALandTypeCode
 */
Rcra07.prototype['RCRALandTypeCode'] = undefined;

/**
 * @member {String} RCRALastFeaDate
 */
Rcra07.prototype['RCRALastFeaDate'] = undefined;

/**
 * @member {String} RCRALastFeaDateEPA
 */
Rcra07.prototype['RCRALastFeaDateEPA'] = undefined;

/**
 * @member {String} RCRALastFeaDateState
 */
Rcra07.prototype['RCRALastFeaDateState'] = undefined;

/**
 * @member {String} RCRALastIeaDate
 */
Rcra07.prototype['RCRALastIeaDate'] = undefined;

/**
 * @member {String} RCRALastIeaDateEPA
 */
Rcra07.prototype['RCRALastIeaDateEPA'] = undefined;

/**
 * @member {String} RCRALastIeaDateState
 */
Rcra07.prototype['RCRALastIeaDateState'] = undefined;

/**
 * @member {String} RCRALastInspDateEPA
 */
Rcra07.prototype['RCRALastInspDateEPA'] = undefined;

/**
 * @member {String} RCRALastInspDateState
 */
Rcra07.prototype['RCRALastInspDateState'] = undefined;

/**
 * @member {String} RCRALastInspectionDate
 */
Rcra07.prototype['RCRALastInspectionDate'] = undefined;

/**
 * Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.
 * @member {String} RCRALastPenaltyDate
 */
Rcra07.prototype['RCRALastPenaltyDate'] = undefined;

/**
 * @member {String} RCRAMapIcon
 */
Rcra07.prototype['RCRAMapIcon'] = undefined;

/**
 * The RCRA permit's primary North American Industry Classification System (NAICS) Code.
 * @member {String} RCRANAICS
 */
Rcra07.prototype['RCRANAICS'] = undefined;

/**
 * @member {String} RCRAName
 */
Rcra07.prototype['RCRAName'] = undefined;

/**
 * @member {String} RCRAOldestOpenVioDate
 */
Rcra07.prototype['RCRAOldestOpenVioDate'] = undefined;

/**
 * The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.
 * @member {String} RCRAPenalties
 */
Rcra07.prototype['RCRAPenalties'] = undefined;

/**
 * The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.
 * @member {String} RCRAQtrsWithNC
 */
Rcra07.prototype['RCRAQtrsWithNC'] = undefined;

/**
 * @member {String} RCRAQtrsWithSNC
 */
Rcra07.prototype['RCRAQtrsWithSNC'] = undefined;

/**
 * @member {String} RCRASNC
 */
Rcra07.prototype['RCRASNC'] = undefined;

/**
 * @member {String} RCRAState
 */
Rcra07.prototype['RCRAState'] = undefined;

/**
 * @member {String} RCRAStateDistrict
 */
Rcra07.prototype['RCRAStateDistrict'] = undefined;

/**
 * @member {String} RCRAStatus
 */
Rcra07.prototype['RCRAStatus'] = undefined;

/**
 * @member {String} RCRAStreet
 */
Rcra07.prototype['RCRAStreet'] = undefined;

/**
 * @member {String} RCRATRIbalLandCode
 */
Rcra07.prototype['RCRATRIbalLandCode'] = undefined;

/**
 * @member {String} RCRAUniverse
 */
Rcra07.prototype['RCRAUniverse'] = undefined;

/**
 * @member {String} RCRAViolationTypes
 */
Rcra07.prototype['RCRAViolationTypes'] = undefined;

/**
 * @member {String} RCRAZip
 */
Rcra07.prototype['RCRAZip'] = undefined;

/**
 * @member {String} RCRAinfoLandTypeCode
 */
Rcra07.prototype['RCRAinfoLandTypeCode'] = undefined;

/**
 * @member {String} RCRAinfoLandTypeDesc
 */
Rcra07.prototype['RCRAinfoLandTypeDesc'] = undefined;

/**
 * ??
 * @member {String} ReferencePoint
 */
Rcra07.prototype['ReferencePoint'] = undefined;

/**
 * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
 * @member {String} RegistryID
 */
Rcra07.prototype['RegistryID'] = undefined;

/**
 * A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
 * @member {String} RmpIDs
 */
Rcra07.prototype['RmpIDs'] = undefined;

/**
 * A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
 * @member {String} SDWAIDs
 */
Rcra07.prototype['SDWAIDs'] = undefined;

/**
 * @member {String} Score
 */
Rcra07.prototype['Score'] = undefined;

/**
 * @member {String} SemsIDs
 */
Rcra07.prototype['SemsIDs'] = undefined;

/**
 * Unique Identifier assigned by EPA.
 * @member {String} SourceID
 */
Rcra07.prototype['SourceID'] = undefined;

/**
 * The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act
 * @member {String} Statute
 */
Rcra07.prototype['Statute'] = undefined;

/**
 * A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.
 * @member {String} TRIIDs
 */
Rcra07.prototype['TRIIDs'] = undefined;

/**
 * A flag indicating that the facility is within a tribal area.
 * @member {String} TRIbalFlag
 */
Rcra07.prototype['TRIbalFlag'] = undefined;

/**
 * @member {String} Tsdf
 */
Rcra07.prototype['Tsdf'] = undefined;

/**
 * Indicates if the facility had a violation within the last 3 years. 1 = Yes
 * @member {String} ViolFlag
 */
Rcra07.prototype['ViolFlag'] = undefined;

/**
 * Contains flags that identify what web accessible documents are available for the facility.
 * @member {String} WebDocs
 */
Rcra07.prototype['WebDocs'] = undefined;






export default Rcra07;

