/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rcra05 model module.
 * @module model/Rcra05
 * @version 2019.10.15
 */
class Rcra05 {
    /**
     * Constructs a new <code>Rcra05</code>.
     * Cluster Data Object
     * @alias module:model/Rcra05
     * @param cVRows {String} Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
     * @param clusterCount {String} The number of facilities or cases in the cluster.
     * @param clusterIcon {String} The icon file used to reprsent the cluster.
     * @param clusterLatitude {String} The latitude in decimal degrees expressed using the NAD83 horizontal datum.
     * @param clusterLongitude {String} The longitude in decimal degrees expressed using the NAD83 horizontal datum.
     * @param clusterName {String} THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314
     * @param clusterType {String} The representative geographic area used for clustering.  Examples:  State, County, Zip Code
     * @param clusterValue {String} The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011
     * @param ePARegionCode {String} The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
     * @param fEARows {String} Summary count of the number of facilities with a formal enforcement action in the past five years
     * @param iNSPRows {String} Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
     * @param indianCountryRows {String} Number of facilities with tribal_flag populated
     * @param infFEARows {String} Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
     * @param objectId {String} Sequential number assigned to each facility or cluster returned.
     * @param sVRows {String} Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")
     * @param totalPenalties {String} The total dollar amount of either assessed or final penalties within the five year time period
     * @param v3Rows {String} Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
     */
    constructor(cVRows, clusterCount, clusterIcon, clusterLatitude, clusterLongitude, clusterName, clusterType, clusterValue, ePARegionCode, fEARows, iNSPRows, indianCountryRows, infFEARows, objectId, sVRows, totalPenalties, v3Rows) { 
        
        Rcra05.initialize(this, cVRows, clusterCount, clusterIcon, clusterLatitude, clusterLongitude, clusterName, clusterType, clusterValue, ePARegionCode, fEARows, iNSPRows, indianCountryRows, infFEARows, objectId, sVRows, totalPenalties, v3Rows);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cVRows, clusterCount, clusterIcon, clusterLatitude, clusterLongitude, clusterName, clusterType, clusterValue, ePARegionCode, fEARows, iNSPRows, indianCountryRows, infFEARows, objectId, sVRows, totalPenalties, v3Rows) { 
        obj['CVRows'] = cVRows;
        obj['ClusterCount'] = clusterCount;
        obj['ClusterIcon'] = clusterIcon;
        obj['ClusterLatitude'] = clusterLatitude;
        obj['ClusterLongitude'] = clusterLongitude;
        obj['ClusterName'] = clusterName;
        obj['ClusterType'] = clusterType;
        obj['ClusterValue'] = clusterValue;
        obj['EPARegionCode'] = ePARegionCode;
        obj['FEARows'] = fEARows;
        obj['INSPRows'] = iNSPRows;
        obj['IndianCountryRows'] = indianCountryRows;
        obj['InfFEARows'] = infFEARows;
        obj['ObjectId'] = objectId;
        obj['SVRows'] = sVRows;
        obj['TotalPenalties'] = totalPenalties;
        obj['V3Rows'] = v3Rows;
    }

    /**
     * Constructs a <code>Rcra05</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rcra05} obj Optional instance to populate.
     * @return {module:model/Rcra05} The populated <code>Rcra05</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rcra05();

            if (data.hasOwnProperty('CVRows')) {
                obj['CVRows'] = ApiClient.convertToType(data['CVRows'], 'String');
            }
            if (data.hasOwnProperty('ClusterCount')) {
                obj['ClusterCount'] = ApiClient.convertToType(data['ClusterCount'], 'String');
            }
            if (data.hasOwnProperty('ClusterIcon')) {
                obj['ClusterIcon'] = ApiClient.convertToType(data['ClusterIcon'], 'String');
            }
            if (data.hasOwnProperty('ClusterLatitude')) {
                obj['ClusterLatitude'] = ApiClient.convertToType(data['ClusterLatitude'], 'String');
            }
            if (data.hasOwnProperty('ClusterLongitude')) {
                obj['ClusterLongitude'] = ApiClient.convertToType(data['ClusterLongitude'], 'String');
            }
            if (data.hasOwnProperty('ClusterName')) {
                obj['ClusterName'] = ApiClient.convertToType(data['ClusterName'], 'String');
            }
            if (data.hasOwnProperty('ClusterType')) {
                obj['ClusterType'] = ApiClient.convertToType(data['ClusterType'], 'String');
            }
            if (data.hasOwnProperty('ClusterValue')) {
                obj['ClusterValue'] = ApiClient.convertToType(data['ClusterValue'], 'String');
            }
            if (data.hasOwnProperty('EPARegionCode')) {
                obj['EPARegionCode'] = ApiClient.convertToType(data['EPARegionCode'], 'String');
            }
            if (data.hasOwnProperty('FEARows')) {
                obj['FEARows'] = ApiClient.convertToType(data['FEARows'], 'String');
            }
            if (data.hasOwnProperty('INSPRows')) {
                obj['INSPRows'] = ApiClient.convertToType(data['INSPRows'], 'String');
            }
            if (data.hasOwnProperty('IndianCountryRows')) {
                obj['IndianCountryRows'] = ApiClient.convertToType(data['IndianCountryRows'], 'String');
            }
            if (data.hasOwnProperty('InfFEARows')) {
                obj['InfFEARows'] = ApiClient.convertToType(data['InfFEARows'], 'String');
            }
            if (data.hasOwnProperty('ObjectId')) {
                obj['ObjectId'] = ApiClient.convertToType(data['ObjectId'], 'String');
            }
            if (data.hasOwnProperty('SVRows')) {
                obj['SVRows'] = ApiClient.convertToType(data['SVRows'], 'String');
            }
            if (data.hasOwnProperty('TotalPenalties')) {
                obj['TotalPenalties'] = ApiClient.convertToType(data['TotalPenalties'], 'String');
            }
            if (data.hasOwnProperty('V3Rows')) {
                obj['V3Rows'] = ApiClient.convertToType(data['V3Rows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rcra05</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rcra05</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rcra05.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CVRows'] && !(typeof data['CVRows'] === 'string' || data['CVRows'] instanceof String)) {
            throw new Error("Expected the field `CVRows` to be a primitive type in the JSON string but got " + data['CVRows']);
        }
        // ensure the json data is a string
        if (data['ClusterCount'] && !(typeof data['ClusterCount'] === 'string' || data['ClusterCount'] instanceof String)) {
            throw new Error("Expected the field `ClusterCount` to be a primitive type in the JSON string but got " + data['ClusterCount']);
        }
        // ensure the json data is a string
        if (data['ClusterIcon'] && !(typeof data['ClusterIcon'] === 'string' || data['ClusterIcon'] instanceof String)) {
            throw new Error("Expected the field `ClusterIcon` to be a primitive type in the JSON string but got " + data['ClusterIcon']);
        }
        // ensure the json data is a string
        if (data['ClusterLatitude'] && !(typeof data['ClusterLatitude'] === 'string' || data['ClusterLatitude'] instanceof String)) {
            throw new Error("Expected the field `ClusterLatitude` to be a primitive type in the JSON string but got " + data['ClusterLatitude']);
        }
        // ensure the json data is a string
        if (data['ClusterLongitude'] && !(typeof data['ClusterLongitude'] === 'string' || data['ClusterLongitude'] instanceof String)) {
            throw new Error("Expected the field `ClusterLongitude` to be a primitive type in the JSON string but got " + data['ClusterLongitude']);
        }
        // ensure the json data is a string
        if (data['ClusterName'] && !(typeof data['ClusterName'] === 'string' || data['ClusterName'] instanceof String)) {
            throw new Error("Expected the field `ClusterName` to be a primitive type in the JSON string but got " + data['ClusterName']);
        }
        // ensure the json data is a string
        if (data['ClusterType'] && !(typeof data['ClusterType'] === 'string' || data['ClusterType'] instanceof String)) {
            throw new Error("Expected the field `ClusterType` to be a primitive type in the JSON string but got " + data['ClusterType']);
        }
        // ensure the json data is a string
        if (data['ClusterValue'] && !(typeof data['ClusterValue'] === 'string' || data['ClusterValue'] instanceof String)) {
            throw new Error("Expected the field `ClusterValue` to be a primitive type in the JSON string but got " + data['ClusterValue']);
        }
        // ensure the json data is a string
        if (data['EPARegionCode'] && !(typeof data['EPARegionCode'] === 'string' || data['EPARegionCode'] instanceof String)) {
            throw new Error("Expected the field `EPARegionCode` to be a primitive type in the JSON string but got " + data['EPARegionCode']);
        }
        // ensure the json data is a string
        if (data['FEARows'] && !(typeof data['FEARows'] === 'string' || data['FEARows'] instanceof String)) {
            throw new Error("Expected the field `FEARows` to be a primitive type in the JSON string but got " + data['FEARows']);
        }
        // ensure the json data is a string
        if (data['INSPRows'] && !(typeof data['INSPRows'] === 'string' || data['INSPRows'] instanceof String)) {
            throw new Error("Expected the field `INSPRows` to be a primitive type in the JSON string but got " + data['INSPRows']);
        }
        // ensure the json data is a string
        if (data['IndianCountryRows'] && !(typeof data['IndianCountryRows'] === 'string' || data['IndianCountryRows'] instanceof String)) {
            throw new Error("Expected the field `IndianCountryRows` to be a primitive type in the JSON string but got " + data['IndianCountryRows']);
        }
        // ensure the json data is a string
        if (data['InfFEARows'] && !(typeof data['InfFEARows'] === 'string' || data['InfFEARows'] instanceof String)) {
            throw new Error("Expected the field `InfFEARows` to be a primitive type in the JSON string but got " + data['InfFEARows']);
        }
        // ensure the json data is a string
        if (data['ObjectId'] && !(typeof data['ObjectId'] === 'string' || data['ObjectId'] instanceof String)) {
            throw new Error("Expected the field `ObjectId` to be a primitive type in the JSON string but got " + data['ObjectId']);
        }
        // ensure the json data is a string
        if (data['SVRows'] && !(typeof data['SVRows'] === 'string' || data['SVRows'] instanceof String)) {
            throw new Error("Expected the field `SVRows` to be a primitive type in the JSON string but got " + data['SVRows']);
        }
        // ensure the json data is a string
        if (data['TotalPenalties'] && !(typeof data['TotalPenalties'] === 'string' || data['TotalPenalties'] instanceof String)) {
            throw new Error("Expected the field `TotalPenalties` to be a primitive type in the JSON string but got " + data['TotalPenalties']);
        }
        // ensure the json data is a string
        if (data['V3Rows'] && !(typeof data['V3Rows'] === 'string' || data['V3Rows'] instanceof String)) {
            throw new Error("Expected the field `V3Rows` to be a primitive type in the JSON string but got " + data['V3Rows']);
        }

        return true;
    }


}

Rcra05.RequiredProperties = ["CVRows", "ClusterCount", "ClusterIcon", "ClusterLatitude", "ClusterLongitude", "ClusterName", "ClusterType", "ClusterValue", "EPARegionCode", "FEARows", "INSPRows", "IndianCountryRows", "InfFEARows", "ObjectId", "SVRows", "TotalPenalties", "V3Rows"];

/**
 * Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.
 * @member {String} CVRows
 */
Rcra05.prototype['CVRows'] = undefined;

/**
 * The number of facilities or cases in the cluster.
 * @member {String} ClusterCount
 */
Rcra05.prototype['ClusterCount'] = undefined;

/**
 * The icon file used to reprsent the cluster.
 * @member {String} ClusterIcon
 */
Rcra05.prototype['ClusterIcon'] = undefined;

/**
 * The latitude in decimal degrees expressed using the NAD83 horizontal datum.
 * @member {String} ClusterLatitude
 */
Rcra05.prototype['ClusterLatitude'] = undefined;

/**
 * The longitude in decimal degrees expressed using the NAD83 horizontal datum.
 * @member {String} ClusterLongitude
 */
Rcra05.prototype['ClusterLongitude'] = undefined;

/**
 * THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314
 * @member {String} ClusterName
 */
Rcra05.prototype['ClusterName'] = undefined;

/**
 * The representative geographic area used for clustering.  Examples:  State, County, Zip Code
 * @member {String} ClusterType
 */
Rcra05.prototype['ClusterType'] = undefined;

/**
 * The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011
 * @member {String} ClusterValue
 */
Rcra05.prototype['ClusterValue'] = undefined;

/**
 * The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories
 * @member {String} EPARegionCode
 */
Rcra05.prototype['EPARegionCode'] = undefined;

/**
 * Summary count of the number of facilities with a formal enforcement action in the past five years
 * @member {String} FEARows
 */
Rcra05.prototype['FEARows'] = undefined;

/**
 * Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)
 * @member {String} INSPRows
 */
Rcra05.prototype['INSPRows'] = undefined;

/**
 * Number of facilities with tribal_flag populated
 * @member {String} IndianCountryRows
 */
Rcra05.prototype['IndianCountryRows'] = undefined;

/**
 * Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)
 * @member {String} InfFEARows
 */
Rcra05.prototype['InfFEARows'] = undefined;

/**
 * Sequential number assigned to each facility or cluster returned.
 * @member {String} ObjectId
 */
Rcra05.prototype['ObjectId'] = undefined;

/**
 * Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")
 * @member {String} SVRows
 */
Rcra05.prototype['SVRows'] = undefined;

/**
 * The total dollar amount of either assessed or final penalties within the five year time period
 * @member {String} TotalPenalties
 */
Rcra05.prototype['TotalPenalties'] = undefined;

/**
 * Number of facilities having one or more quarters in non-compliance (QNC) in the last three years
 * @member {String} V3Rows
 */
Rcra05.prototype['V3Rows'] = undefined;






export default Rcra05;

