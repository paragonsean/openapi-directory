# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo import Geo
from openapi_server.models.rcra10 import Rcra10
from openapi_server import util


class Rcra09(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geometry: Geo=None, properties: Rcra10=None, type: str=None):
        """Rcra09 - a model defined in OpenAPI

        :param geometry: The geometry of this Rcra09.
        :param properties: The properties of this Rcra09.
        :param type: The type of this Rcra09.
        """
        self.openapi_types = {
            'geometry': Geo,
            'properties': Rcra10,
            'type': str
        }

        self.attribute_map = {
            'geometry': 'geometry',
            'properties': 'properties',
            'type': 'type'
        }

        self._geometry = geometry
        self._properties = properties
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rcra09':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rcra09 of this Rcra09.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geometry(self):
        """Gets the geometry of this Rcra09.


        :return: The geometry of this Rcra09.
        :rtype: Geo
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Rcra09.


        :param geometry: The geometry of this Rcra09.
        :type geometry: Geo
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry

    @property
    def properties(self):
        """Gets the properties of this Rcra09.


        :return: The properties of this Rcra09.
        :rtype: Rcra10
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Rcra09.


        :param properties: The properties of this Rcra09.
        :type properties: Rcra10
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def type(self):
        """Gets the type of this Rcra09.

        Static marker indicating object is a GeoJSON Feature.

        :return: The type of this Rcra09.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Rcra09.

        Static marker indicating object is a GeoJSON Feature.

        :param type: The type of this Rcra09.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
