# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rcra05(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cv_rows: str=None, cluster_count: str=None, cluster_icon: str=None, cluster_latitude: str=None, cluster_longitude: str=None, cluster_name: str=None, cluster_type: str=None, cluster_value: str=None, epa_region_code: str=None, fea_rows: str=None, insp_rows: str=None, indian_country_rows: str=None, inf_fea_rows: str=None, object_id: str=None, sv_rows: str=None, total_penalties: str=None, v3_rows: str=None):
        """Rcra05 - a model defined in OpenAPI

        :param cv_rows: The cv_rows of this Rcra05.
        :param cluster_count: The cluster_count of this Rcra05.
        :param cluster_icon: The cluster_icon of this Rcra05.
        :param cluster_latitude: The cluster_latitude of this Rcra05.
        :param cluster_longitude: The cluster_longitude of this Rcra05.
        :param cluster_name: The cluster_name of this Rcra05.
        :param cluster_type: The cluster_type of this Rcra05.
        :param cluster_value: The cluster_value of this Rcra05.
        :param epa_region_code: The epa_region_code of this Rcra05.
        :param fea_rows: The fea_rows of this Rcra05.
        :param insp_rows: The insp_rows of this Rcra05.
        :param indian_country_rows: The indian_country_rows of this Rcra05.
        :param inf_fea_rows: The inf_fea_rows of this Rcra05.
        :param object_id: The object_id of this Rcra05.
        :param sv_rows: The sv_rows of this Rcra05.
        :param total_penalties: The total_penalties of this Rcra05.
        :param v3_rows: The v3_rows of this Rcra05.
        """
        self.openapi_types = {
            'cv_rows': str,
            'cluster_count': str,
            'cluster_icon': str,
            'cluster_latitude': str,
            'cluster_longitude': str,
            'cluster_name': str,
            'cluster_type': str,
            'cluster_value': str,
            'epa_region_code': str,
            'fea_rows': str,
            'insp_rows': str,
            'indian_country_rows': str,
            'inf_fea_rows': str,
            'object_id': str,
            'sv_rows': str,
            'total_penalties': str,
            'v3_rows': str
        }

        self.attribute_map = {
            'cv_rows': 'CVRows',
            'cluster_count': 'ClusterCount',
            'cluster_icon': 'ClusterIcon',
            'cluster_latitude': 'ClusterLatitude',
            'cluster_longitude': 'ClusterLongitude',
            'cluster_name': 'ClusterName',
            'cluster_type': 'ClusterType',
            'cluster_value': 'ClusterValue',
            'epa_region_code': 'EPARegionCode',
            'fea_rows': 'FEARows',
            'insp_rows': 'INSPRows',
            'indian_country_rows': 'IndianCountryRows',
            'inf_fea_rows': 'InfFEARows',
            'object_id': 'ObjectId',
            'sv_rows': 'SVRows',
            'total_penalties': 'TotalPenalties',
            'v3_rows': 'V3Rows'
        }

        self._cv_rows = cv_rows
        self._cluster_count = cluster_count
        self._cluster_icon = cluster_icon
        self._cluster_latitude = cluster_latitude
        self._cluster_longitude = cluster_longitude
        self._cluster_name = cluster_name
        self._cluster_type = cluster_type
        self._cluster_value = cluster_value
        self._epa_region_code = epa_region_code
        self._fea_rows = fea_rows
        self._insp_rows = insp_rows
        self._indian_country_rows = indian_country_rows
        self._inf_fea_rows = inf_fea_rows
        self._object_id = object_id
        self._sv_rows = sv_rows
        self._total_penalties = total_penalties
        self._v3_rows = v3_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rcra05':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rcra05 of this Rcra05.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cv_rows(self):
        """Gets the cv_rows of this Rcra05.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :return: The cv_rows of this Rcra05.
        :rtype: str
        """
        return self._cv_rows

    @cv_rows.setter
    def cv_rows(self, cv_rows):
        """Sets the cv_rows of this Rcra05.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :param cv_rows: The cv_rows of this Rcra05.
        :type cv_rows: str
        """
        if cv_rows is None:
            raise ValueError("Invalid value for `cv_rows`, must not be `None`")

        self._cv_rows = cv_rows

    @property
    def cluster_count(self):
        """Gets the cluster_count of this Rcra05.

        The number of facilities or cases in the cluster.

        :return: The cluster_count of this Rcra05.
        :rtype: str
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """Sets the cluster_count of this Rcra05.

        The number of facilities or cases in the cluster.

        :param cluster_count: The cluster_count of this Rcra05.
        :type cluster_count: str
        """
        if cluster_count is None:
            raise ValueError("Invalid value for `cluster_count`, must not be `None`")

        self._cluster_count = cluster_count

    @property
    def cluster_icon(self):
        """Gets the cluster_icon of this Rcra05.

        The icon file used to reprsent the cluster.

        :return: The cluster_icon of this Rcra05.
        :rtype: str
        """
        return self._cluster_icon

    @cluster_icon.setter
    def cluster_icon(self, cluster_icon):
        """Sets the cluster_icon of this Rcra05.

        The icon file used to reprsent the cluster.

        :param cluster_icon: The cluster_icon of this Rcra05.
        :type cluster_icon: str
        """
        if cluster_icon is None:
            raise ValueError("Invalid value for `cluster_icon`, must not be `None`")

        self._cluster_icon = cluster_icon

    @property
    def cluster_latitude(self):
        """Gets the cluster_latitude of this Rcra05.

        The latitude in decimal degrees expressed using the NAD83 horizontal datum.

        :return: The cluster_latitude of this Rcra05.
        :rtype: str
        """
        return self._cluster_latitude

    @cluster_latitude.setter
    def cluster_latitude(self, cluster_latitude):
        """Sets the cluster_latitude of this Rcra05.

        The latitude in decimal degrees expressed using the NAD83 horizontal datum.

        :param cluster_latitude: The cluster_latitude of this Rcra05.
        :type cluster_latitude: str
        """
        if cluster_latitude is None:
            raise ValueError("Invalid value for `cluster_latitude`, must not be `None`")

        self._cluster_latitude = cluster_latitude

    @property
    def cluster_longitude(self):
        """Gets the cluster_longitude of this Rcra05.

        The longitude in decimal degrees expressed using the NAD83 horizontal datum.

        :return: The cluster_longitude of this Rcra05.
        :rtype: str
        """
        return self._cluster_longitude

    @cluster_longitude.setter
    def cluster_longitude(self, cluster_longitude):
        """Sets the cluster_longitude of this Rcra05.

        The longitude in decimal degrees expressed using the NAD83 horizontal datum.

        :param cluster_longitude: The cluster_longitude of this Rcra05.
        :type cluster_longitude: str
        """
        if cluster_longitude is None:
            raise ValueError("Invalid value for `cluster_longitude`, must not be `None`")

        self._cluster_longitude = cluster_longitude

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Rcra05.

        THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314

        :return: The cluster_name of this Rcra05.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Rcra05.

        THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314

        :param cluster_name: The cluster_name of this Rcra05.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def cluster_type(self):
        """Gets the cluster_type of this Rcra05.

        The representative geographic area used for clustering.  Examples:  State, County, Zip Code

        :return: The cluster_type of this Rcra05.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this Rcra05.

        The representative geographic area used for clustering.  Examples:  State, County, Zip Code

        :param cluster_type: The cluster_type of this Rcra05.
        :type cluster_type: str
        """
        if cluster_type is None:
            raise ValueError("Invalid value for `cluster_type`, must not be `None`")

        self._cluster_type = cluster_type

    @property
    def cluster_value(self):
        """Gets the cluster_value of this Rcra05.

        The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011

        :return: The cluster_value of this Rcra05.
        :rtype: str
        """
        return self._cluster_value

    @cluster_value.setter
    def cluster_value(self, cluster_value):
        """Sets the cluster_value of this Rcra05.

        The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011

        :param cluster_value: The cluster_value of this Rcra05.
        :type cluster_value: str
        """
        if cluster_value is None:
            raise ValueError("Invalid value for `cluster_value`, must not be `None`")

        self._cluster_value = cluster_value

    @property
    def epa_region_code(self):
        """Gets the epa_region_code of this Rcra05.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories

        :return: The epa_region_code of this Rcra05.
        :rtype: str
        """
        return self._epa_region_code

    @epa_region_code.setter
    def epa_region_code(self, epa_region_code):
        """Sets the epa_region_code of this Rcra05.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories

        :param epa_region_code: The epa_region_code of this Rcra05.
        :type epa_region_code: str
        """
        if epa_region_code is None:
            raise ValueError("Invalid value for `epa_region_code`, must not be `None`")

        self._epa_region_code = epa_region_code

    @property
    def fea_rows(self):
        """Gets the fea_rows of this Rcra05.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :return: The fea_rows of this Rcra05.
        :rtype: str
        """
        return self._fea_rows

    @fea_rows.setter
    def fea_rows(self, fea_rows):
        """Sets the fea_rows of this Rcra05.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :param fea_rows: The fea_rows of this Rcra05.
        :type fea_rows: str
        """
        if fea_rows is None:
            raise ValueError("Invalid value for `fea_rows`, must not be `None`")

        self._fea_rows = fea_rows

    @property
    def insp_rows(self):
        """Gets the insp_rows of this Rcra05.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :return: The insp_rows of this Rcra05.
        :rtype: str
        """
        return self._insp_rows

    @insp_rows.setter
    def insp_rows(self, insp_rows):
        """Sets the insp_rows of this Rcra05.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :param insp_rows: The insp_rows of this Rcra05.
        :type insp_rows: str
        """
        if insp_rows is None:
            raise ValueError("Invalid value for `insp_rows`, must not be `None`")

        self._insp_rows = insp_rows

    @property
    def indian_country_rows(self):
        """Gets the indian_country_rows of this Rcra05.

        Number of facilities with tribal_flag populated

        :return: The indian_country_rows of this Rcra05.
        :rtype: str
        """
        return self._indian_country_rows

    @indian_country_rows.setter
    def indian_country_rows(self, indian_country_rows):
        """Sets the indian_country_rows of this Rcra05.

        Number of facilities with tribal_flag populated

        :param indian_country_rows: The indian_country_rows of this Rcra05.
        :type indian_country_rows: str
        """
        if indian_country_rows is None:
            raise ValueError("Invalid value for `indian_country_rows`, must not be `None`")

        self._indian_country_rows = indian_country_rows

    @property
    def inf_fea_rows(self):
        """Gets the inf_fea_rows of this Rcra05.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :return: The inf_fea_rows of this Rcra05.
        :rtype: str
        """
        return self._inf_fea_rows

    @inf_fea_rows.setter
    def inf_fea_rows(self, inf_fea_rows):
        """Sets the inf_fea_rows of this Rcra05.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :param inf_fea_rows: The inf_fea_rows of this Rcra05.
        :type inf_fea_rows: str
        """
        if inf_fea_rows is None:
            raise ValueError("Invalid value for `inf_fea_rows`, must not be `None`")

        self._inf_fea_rows = inf_fea_rows

    @property
    def object_id(self):
        """Gets the object_id of this Rcra05.

        Sequential number assigned to each facility or cluster returned.

        :return: The object_id of this Rcra05.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Rcra05.

        Sequential number assigned to each facility or cluster returned.

        :param object_id: The object_id of this Rcra05.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def sv_rows(self):
        """Gets the sv_rows of this Rcra05.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :return: The sv_rows of this Rcra05.
        :rtype: str
        """
        return self._sv_rows

    @sv_rows.setter
    def sv_rows(self, sv_rows):
        """Sets the sv_rows of this Rcra05.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :param sv_rows: The sv_rows of this Rcra05.
        :type sv_rows: str
        """
        if sv_rows is None:
            raise ValueError("Invalid value for `sv_rows`, must not be `None`")

        self._sv_rows = sv_rows

    @property
    def total_penalties(self):
        """Gets the total_penalties of this Rcra05.

        The total dollar amount of either assessed or final penalties within the five year time period

        :return: The total_penalties of this Rcra05.
        :rtype: str
        """
        return self._total_penalties

    @total_penalties.setter
    def total_penalties(self, total_penalties):
        """Sets the total_penalties of this Rcra05.

        The total dollar amount of either assessed or final penalties within the five year time period

        :param total_penalties: The total_penalties of this Rcra05.
        :type total_penalties: str
        """
        if total_penalties is None:
            raise ValueError("Invalid value for `total_penalties`, must not be `None`")

        self._total_penalties = total_penalties

    @property
    def v3_rows(self):
        """Gets the v3_rows of this Rcra05.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :return: The v3_rows of this Rcra05.
        :rtype: str
        """
        return self._v3_rows

    @v3_rows.setter
    def v3_rows(self, v3_rows):
        """Sets the v3_rows of this Rcra05.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :param v3_rows: The v3_rows of this Rcra05.
        :type v3_rows: str
        """
        if v3_rows is None:
            raise ValueError("Invalid value for `v3_rows`, must not be `None`")

        self._v3_rows = v3_rows
