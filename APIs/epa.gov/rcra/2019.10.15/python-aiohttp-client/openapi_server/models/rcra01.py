# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rcra01(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airids: str=None, active_lower48: str=None, cwaids: str=None, calculated_accuracy_meters: str=None, census_block_group: str=None, chem_names_rel_land: str=None, chesapeake_bay_flag: str=None, cleanup_action_flag: str=None, collection_method: str=None, curr_sv_flag: str=None, curr_vio_flag: str=None, current_vio_cnt: str=None, date_last_record_review: str=None, epa_system: str=None, ea5yr_flag: str=None, ejscreen_flag: str=None, ejscreen_flag_us: str=None, fac_county_name: str=None, fac_derived_huc: str=None, fac_derived_tr_ibes: str=None, fac_derived_wbd: str=None, fac_derived_wbd_name: str=None, fac_fips_code: str=None, fac_federal_agency_code: str=None, fac_federal_agency_name: str=None, fac_indian_cntry_flg: str=None, fac_indian_spatial_flg: str=None, fac_lat: str=None, fac_long: str=None, fac_map_flg: str=None, fac_map_icon: str=None, fac_percent_minority: str=None, fac_population_density: str=None, fac_sic_codes: str=None, fac_std_county_name: str=None, fac_tri_land_releases: str=None, fac_tri_off_site_transfers: str=None, fac_trion_site_releases: str=None, fac_tri_reporter: str=None, fac_us_mex_border_flg: str=None, infea5yr_flag: str=None, insp5yr_flag: str=None, last_violation_date: str=None, lower48: str=None, map: str=None, max_pctile_us: str=None, max_score: str=None, operator_code: str=None, operator_desc: str=None, over80_count_us: str=None, owner_code: str=None, owner_desc: str=None, pctile_cancer_us: str=None, pctile_dpm_us: str=None, pctile_o3_us: str=None, pctile_pctpre1960_us: str=None, pctile_pm_us: str=None, pctile_proximity_npdesus: str=None, pctile_proximity_npl_us: str=None, pctile_proximity_rmp_us: str=None, pctile_proximity_tsdf_us: str=None, pctile_resp_us: str=None, pctile_traffic_score_us: str=None, rcra3yr_compl_qtrs_history: str=None, rcra_case_ids: str=None, rcra_city: str=None, rcra_compl_status: str=None, rcra_county: str=None, rcra_days_last_inspection: str=None, rcraepa_region: str=None, rcrafips_code: str=None, rcra_fea_cnt: str=None, rcraids: str=None, rcra_iea_cnt: str=None, rcra_imp_water_flg: str=None, rcra_indian_cntry_flg: str=None, rcra_insp_cnt: str=None, rcra_land_type_code: str=None, rcra_last_fea_date: str=None, rcra_last_fea_date_epa: str=None, rcra_last_fea_date_state: str=None, rcra_last_iea_date: str=None, rcra_last_iea_date_epa: str=None, rcra_last_iea_date_state: str=None, rcra_last_insp_date_epa: str=None, rcra_last_insp_date_state: str=None, rcra_last_inspection_date: str=None, rcra_last_penalty_date: str=None, rcra_map_icon: str=None, rcranaics: str=None, rcra_name: str=None, rcra_oldest_open_vio_date: str=None, rcra_penalties: str=None, rcra_qtrs_with_nc: str=None, rcra_qtrs_with_snc: str=None, rcrasnc: str=None, rcra_state: str=None, rcra_state_district: str=None, rcra_status: str=None, rcra_street: str=None, rcratr_ibal_land_code: str=None, rcra_universe: str=None, rcra_violation_types: str=None, rcra_zip: str=None, rcr_ainfo_land_type_code: str=None, rcr_ainfo_land_type_desc: str=None, reference_point: str=None, registry_id: str=None, rmp_ids: str=None, sdwaids: str=None, score: str=None, sems_ids: str=None, source_id: str=None, statute: str=None, triids: str=None, tr_ibal_flag: str=None, tsdf: str=None, viol_flag: str=None, web_docs: str=None):
        """Rcra01 - a model defined in OpenAPI

        :param airids: The airids of this Rcra01.
        :param active_lower48: The active_lower48 of this Rcra01.
        :param cwaids: The cwaids of this Rcra01.
        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Rcra01.
        :param census_block_group: The census_block_group of this Rcra01.
        :param chem_names_rel_land: The chem_names_rel_land of this Rcra01.
        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Rcra01.
        :param cleanup_action_flag: The cleanup_action_flag of this Rcra01.
        :param collection_method: The collection_method of this Rcra01.
        :param curr_sv_flag: The curr_sv_flag of this Rcra01.
        :param curr_vio_flag: The curr_vio_flag of this Rcra01.
        :param current_vio_cnt: The current_vio_cnt of this Rcra01.
        :param date_last_record_review: The date_last_record_review of this Rcra01.
        :param epa_system: The epa_system of this Rcra01.
        :param ea5yr_flag: The ea5yr_flag of this Rcra01.
        :param ejscreen_flag: The ejscreen_flag of this Rcra01.
        :param ejscreen_flag_us: The ejscreen_flag_us of this Rcra01.
        :param fac_county_name: The fac_county_name of this Rcra01.
        :param fac_derived_huc: The fac_derived_huc of this Rcra01.
        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Rcra01.
        :param fac_derived_wbd: The fac_derived_wbd of this Rcra01.
        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Rcra01.
        :param fac_fips_code: The fac_fips_code of this Rcra01.
        :param fac_federal_agency_code: The fac_federal_agency_code of this Rcra01.
        :param fac_federal_agency_name: The fac_federal_agency_name of this Rcra01.
        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Rcra01.
        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Rcra01.
        :param fac_lat: The fac_lat of this Rcra01.
        :param fac_long: The fac_long of this Rcra01.
        :param fac_map_flg: The fac_map_flg of this Rcra01.
        :param fac_map_icon: The fac_map_icon of this Rcra01.
        :param fac_percent_minority: The fac_percent_minority of this Rcra01.
        :param fac_population_density: The fac_population_density of this Rcra01.
        :param fac_sic_codes: The fac_sic_codes of this Rcra01.
        :param fac_std_county_name: The fac_std_county_name of this Rcra01.
        :param fac_tri_land_releases: The fac_tri_land_releases of this Rcra01.
        :param fac_tri_off_site_transfers: The fac_tri_off_site_transfers of this Rcra01.
        :param fac_trion_site_releases: The fac_trion_site_releases of this Rcra01.
        :param fac_tri_reporter: The fac_tri_reporter of this Rcra01.
        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Rcra01.
        :param infea5yr_flag: The infea5yr_flag of this Rcra01.
        :param insp5yr_flag: The insp5yr_flag of this Rcra01.
        :param last_violation_date: The last_violation_date of this Rcra01.
        :param lower48: The lower48 of this Rcra01.
        :param map: The map of this Rcra01.
        :param max_pctile_us: The max_pctile_us of this Rcra01.
        :param max_score: The max_score of this Rcra01.
        :param operator_code: The operator_code of this Rcra01.
        :param operator_desc: The operator_desc of this Rcra01.
        :param over80_count_us: The over80_count_us of this Rcra01.
        :param owner_code: The owner_code of this Rcra01.
        :param owner_desc: The owner_desc of this Rcra01.
        :param pctile_cancer_us: The pctile_cancer_us of this Rcra01.
        :param pctile_dpm_us: The pctile_dpm_us of this Rcra01.
        :param pctile_o3_us: The pctile_o3_us of this Rcra01.
        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Rcra01.
        :param pctile_pm_us: The pctile_pm_us of this Rcra01.
        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Rcra01.
        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Rcra01.
        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Rcra01.
        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Rcra01.
        :param pctile_resp_us: The pctile_resp_us of this Rcra01.
        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Rcra01.
        :param rcra3yr_compl_qtrs_history: The rcra3yr_compl_qtrs_history of this Rcra01.
        :param rcra_case_ids: The rcra_case_ids of this Rcra01.
        :param rcra_city: The rcra_city of this Rcra01.
        :param rcra_compl_status: The rcra_compl_status of this Rcra01.
        :param rcra_county: The rcra_county of this Rcra01.
        :param rcra_days_last_inspection: The rcra_days_last_inspection of this Rcra01.
        :param rcraepa_region: The rcraepa_region of this Rcra01.
        :param rcrafips_code: The rcrafips_code of this Rcra01.
        :param rcra_fea_cnt: The rcra_fea_cnt of this Rcra01.
        :param rcraids: The rcraids of this Rcra01.
        :param rcra_iea_cnt: The rcra_iea_cnt of this Rcra01.
        :param rcra_imp_water_flg: The rcra_imp_water_flg of this Rcra01.
        :param rcra_indian_cntry_flg: The rcra_indian_cntry_flg of this Rcra01.
        :param rcra_insp_cnt: The rcra_insp_cnt of this Rcra01.
        :param rcra_land_type_code: The rcra_land_type_code of this Rcra01.
        :param rcra_last_fea_date: The rcra_last_fea_date of this Rcra01.
        :param rcra_last_fea_date_epa: The rcra_last_fea_date_epa of this Rcra01.
        :param rcra_last_fea_date_state: The rcra_last_fea_date_state of this Rcra01.
        :param rcra_last_iea_date: The rcra_last_iea_date of this Rcra01.
        :param rcra_last_iea_date_epa: The rcra_last_iea_date_epa of this Rcra01.
        :param rcra_last_iea_date_state: The rcra_last_iea_date_state of this Rcra01.
        :param rcra_last_insp_date_epa: The rcra_last_insp_date_epa of this Rcra01.
        :param rcra_last_insp_date_state: The rcra_last_insp_date_state of this Rcra01.
        :param rcra_last_inspection_date: The rcra_last_inspection_date of this Rcra01.
        :param rcra_last_penalty_date: The rcra_last_penalty_date of this Rcra01.
        :param rcra_map_icon: The rcra_map_icon of this Rcra01.
        :param rcranaics: The rcranaics of this Rcra01.
        :param rcra_name: The rcra_name of this Rcra01.
        :param rcra_oldest_open_vio_date: The rcra_oldest_open_vio_date of this Rcra01.
        :param rcra_penalties: The rcra_penalties of this Rcra01.
        :param rcra_qtrs_with_nc: The rcra_qtrs_with_nc of this Rcra01.
        :param rcra_qtrs_with_snc: The rcra_qtrs_with_snc of this Rcra01.
        :param rcrasnc: The rcrasnc of this Rcra01.
        :param rcra_state: The rcra_state of this Rcra01.
        :param rcra_state_district: The rcra_state_district of this Rcra01.
        :param rcra_status: The rcra_status of this Rcra01.
        :param rcra_street: The rcra_street of this Rcra01.
        :param rcratr_ibal_land_code: The rcratr_ibal_land_code of this Rcra01.
        :param rcra_universe: The rcra_universe of this Rcra01.
        :param rcra_violation_types: The rcra_violation_types of this Rcra01.
        :param rcra_zip: The rcra_zip of this Rcra01.
        :param rcr_ainfo_land_type_code: The rcr_ainfo_land_type_code of this Rcra01.
        :param rcr_ainfo_land_type_desc: The rcr_ainfo_land_type_desc of this Rcra01.
        :param reference_point: The reference_point of this Rcra01.
        :param registry_id: The registry_id of this Rcra01.
        :param rmp_ids: The rmp_ids of this Rcra01.
        :param sdwaids: The sdwaids of this Rcra01.
        :param score: The score of this Rcra01.
        :param sems_ids: The sems_ids of this Rcra01.
        :param source_id: The source_id of this Rcra01.
        :param statute: The statute of this Rcra01.
        :param triids: The triids of this Rcra01.
        :param tr_ibal_flag: The tr_ibal_flag of this Rcra01.
        :param tsdf: The tsdf of this Rcra01.
        :param viol_flag: The viol_flag of this Rcra01.
        :param web_docs: The web_docs of this Rcra01.
        """
        self.openapi_types = {
            'airids': str,
            'active_lower48': str,
            'cwaids': str,
            'calculated_accuracy_meters': str,
            'census_block_group': str,
            'chem_names_rel_land': str,
            'chesapeake_bay_flag': str,
            'cleanup_action_flag': str,
            'collection_method': str,
            'curr_sv_flag': str,
            'curr_vio_flag': str,
            'current_vio_cnt': str,
            'date_last_record_review': str,
            'epa_system': str,
            'ea5yr_flag': str,
            'ejscreen_flag': str,
            'ejscreen_flag_us': str,
            'fac_county_name': str,
            'fac_derived_huc': str,
            'fac_derived_tr_ibes': str,
            'fac_derived_wbd': str,
            'fac_derived_wbd_name': str,
            'fac_fips_code': str,
            'fac_federal_agency_code': str,
            'fac_federal_agency_name': str,
            'fac_indian_cntry_flg': str,
            'fac_indian_spatial_flg': str,
            'fac_lat': str,
            'fac_long': str,
            'fac_map_flg': str,
            'fac_map_icon': str,
            'fac_percent_minority': str,
            'fac_population_density': str,
            'fac_sic_codes': str,
            'fac_std_county_name': str,
            'fac_tri_land_releases': str,
            'fac_tri_off_site_transfers': str,
            'fac_trion_site_releases': str,
            'fac_tri_reporter': str,
            'fac_us_mex_border_flg': str,
            'infea5yr_flag': str,
            'insp5yr_flag': str,
            'last_violation_date': str,
            'lower48': str,
            'map': str,
            'max_pctile_us': str,
            'max_score': str,
            'operator_code': str,
            'operator_desc': str,
            'over80_count_us': str,
            'owner_code': str,
            'owner_desc': str,
            'pctile_cancer_us': str,
            'pctile_dpm_us': str,
            'pctile_o3_us': str,
            'pctile_pctpre1960_us': str,
            'pctile_pm_us': str,
            'pctile_proximity_npdesus': str,
            'pctile_proximity_npl_us': str,
            'pctile_proximity_rmp_us': str,
            'pctile_proximity_tsdf_us': str,
            'pctile_resp_us': str,
            'pctile_traffic_score_us': str,
            'rcra3yr_compl_qtrs_history': str,
            'rcra_case_ids': str,
            'rcra_city': str,
            'rcra_compl_status': str,
            'rcra_county': str,
            'rcra_days_last_inspection': str,
            'rcraepa_region': str,
            'rcrafips_code': str,
            'rcra_fea_cnt': str,
            'rcraids': str,
            'rcra_iea_cnt': str,
            'rcra_imp_water_flg': str,
            'rcra_indian_cntry_flg': str,
            'rcra_insp_cnt': str,
            'rcra_land_type_code': str,
            'rcra_last_fea_date': str,
            'rcra_last_fea_date_epa': str,
            'rcra_last_fea_date_state': str,
            'rcra_last_iea_date': str,
            'rcra_last_iea_date_epa': str,
            'rcra_last_iea_date_state': str,
            'rcra_last_insp_date_epa': str,
            'rcra_last_insp_date_state': str,
            'rcra_last_inspection_date': str,
            'rcra_last_penalty_date': str,
            'rcra_map_icon': str,
            'rcranaics': str,
            'rcra_name': str,
            'rcra_oldest_open_vio_date': str,
            'rcra_penalties': str,
            'rcra_qtrs_with_nc': str,
            'rcra_qtrs_with_snc': str,
            'rcrasnc': str,
            'rcra_state': str,
            'rcra_state_district': str,
            'rcra_status': str,
            'rcra_street': str,
            'rcratr_ibal_land_code': str,
            'rcra_universe': str,
            'rcra_violation_types': str,
            'rcra_zip': str,
            'rcr_ainfo_land_type_code': str,
            'rcr_ainfo_land_type_desc': str,
            'reference_point': str,
            'registry_id': str,
            'rmp_ids': str,
            'sdwaids': str,
            'score': str,
            'sems_ids': str,
            'source_id': str,
            'statute': str,
            'triids': str,
            'tr_ibal_flag': str,
            'tsdf': str,
            'viol_flag': str,
            'web_docs': str
        }

        self.attribute_map = {
            'airids': 'AIRIDs',
            'active_lower48': 'ActiveLower48',
            'cwaids': 'CWAIDs',
            'calculated_accuracy_meters': 'CalculatedAccuracyMeters',
            'census_block_group': 'CensusBlockGroup',
            'chem_names_rel_land': 'ChemNamesRelLand',
            'chesapeake_bay_flag': 'ChesapeakeBayFlag',
            'cleanup_action_flag': 'CleanupActionFlag',
            'collection_method': 'CollectionMethod',
            'curr_sv_flag': 'CurrSvFlag',
            'curr_vio_flag': 'CurrVioFlag',
            'current_vio_cnt': 'CurrentVioCnt',
            'date_last_record_review': 'DateLastRecordReview',
            'epa_system': 'EPASystem',
            'ea5yr_flag': 'Ea5yrFlag',
            'ejscreen_flag': 'EjscreenFlag',
            'ejscreen_flag_us': 'EjscreenFlagUs',
            'fac_county_name': 'FacCountyName',
            'fac_derived_huc': 'FacDerivedHuc',
            'fac_derived_tr_ibes': 'FacDerivedTRIbes',
            'fac_derived_wbd': 'FacDerivedWBD',
            'fac_derived_wbd_name': 'FacDerivedWBDName',
            'fac_fips_code': 'FacFIPSCode',
            'fac_federal_agency_code': 'FacFederalAgencyCode',
            'fac_federal_agency_name': 'FacFederalAgencyName',
            'fac_indian_cntry_flg': 'FacIndianCntryFlg',
            'fac_indian_spatial_flg': 'FacIndianSpatialFlg',
            'fac_lat': 'FacLat',
            'fac_long': 'FacLong',
            'fac_map_flg': 'FacMapFlg',
            'fac_map_icon': 'FacMapIcon',
            'fac_percent_minority': 'FacPercentMinority',
            'fac_population_density': 'FacPopulationDensity',
            'fac_sic_codes': 'FacSICCodes',
            'fac_std_county_name': 'FacStdCountyName',
            'fac_tri_land_releases': 'FacTRILandReleases',
            'fac_tri_off_site_transfers': 'FacTRIOffSiteTransfers',
            'fac_trion_site_releases': 'FacTRIOnSiteReleases',
            'fac_tri_reporter': 'FacTRIReporter',
            'fac_us_mex_border_flg': 'FacUsMexBorderFlg',
            'infea5yr_flag': 'Infea5yrFlag',
            'insp5yr_flag': 'Insp5yrFlag',
            'last_violation_date': 'LastViolationDate',
            'lower48': 'Lower48',
            'map': 'Map',
            'max_pctile_us': 'MaxPctileUs',
            'max_score': 'MaxScore',
            'operator_code': 'OperatorCode',
            'operator_desc': 'OperatorDesc',
            'over80_count_us': 'Over80CountUs',
            'owner_code': 'OwnerCode',
            'owner_desc': 'OwnerDesc',
            'pctile_cancer_us': 'PctileCancerUs',
            'pctile_dpm_us': 'PctileDpmUs',
            'pctile_o3_us': 'PctileO3Us',
            'pctile_pctpre1960_us': 'PctilePctpre1960Us',
            'pctile_pm_us': 'PctilePmUs',
            'pctile_proximity_npdesus': 'PctileProximityNPDESUs',
            'pctile_proximity_npl_us': 'PctileProximityNplUs',
            'pctile_proximity_rmp_us': 'PctileProximityRmpUs',
            'pctile_proximity_tsdf_us': 'PctileProximityTsdfUs',
            'pctile_resp_us': 'PctileRespUs',
            'pctile_traffic_score_us': 'PctileTrafficScoreUs',
            'rcra3yr_compl_qtrs_history': 'RCRA3yrComplQtrsHistory',
            'rcra_case_ids': 'RCRACaseIDs',
            'rcra_city': 'RCRACity',
            'rcra_compl_status': 'RCRAComplStatus',
            'rcra_county': 'RCRACounty',
            'rcra_days_last_inspection': 'RCRADaysLastInspection',
            'rcraepa_region': 'RCRAEPARegion',
            'rcrafips_code': 'RCRAFIPSCode',
            'rcra_fea_cnt': 'RCRAFeaCnt',
            'rcraids': 'RCRAIDs',
            'rcra_iea_cnt': 'RCRAIeaCnt',
            'rcra_imp_water_flg': 'RCRAImpWaterFlg',
            'rcra_indian_cntry_flg': 'RCRAIndianCntryFlg',
            'rcra_insp_cnt': 'RCRAInspCnt',
            'rcra_land_type_code': 'RCRALandTypeCode',
            'rcra_last_fea_date': 'RCRALastFeaDate',
            'rcra_last_fea_date_epa': 'RCRALastFeaDateEPA',
            'rcra_last_fea_date_state': 'RCRALastFeaDateState',
            'rcra_last_iea_date': 'RCRALastIeaDate',
            'rcra_last_iea_date_epa': 'RCRALastIeaDateEPA',
            'rcra_last_iea_date_state': 'RCRALastIeaDateState',
            'rcra_last_insp_date_epa': 'RCRALastInspDateEPA',
            'rcra_last_insp_date_state': 'RCRALastInspDateState',
            'rcra_last_inspection_date': 'RCRALastInspectionDate',
            'rcra_last_penalty_date': 'RCRALastPenaltyDate',
            'rcra_map_icon': 'RCRAMapIcon',
            'rcranaics': 'RCRANAICS',
            'rcra_name': 'RCRAName',
            'rcra_oldest_open_vio_date': 'RCRAOldestOpenVioDate',
            'rcra_penalties': 'RCRAPenalties',
            'rcra_qtrs_with_nc': 'RCRAQtrsWithNC',
            'rcra_qtrs_with_snc': 'RCRAQtrsWithSNC',
            'rcrasnc': 'RCRASNC',
            'rcra_state': 'RCRAState',
            'rcra_state_district': 'RCRAStateDistrict',
            'rcra_status': 'RCRAStatus',
            'rcra_street': 'RCRAStreet',
            'rcratr_ibal_land_code': 'RCRATRIbalLandCode',
            'rcra_universe': 'RCRAUniverse',
            'rcra_violation_types': 'RCRAViolationTypes',
            'rcra_zip': 'RCRAZip',
            'rcr_ainfo_land_type_code': 'RCRAinfoLandTypeCode',
            'rcr_ainfo_land_type_desc': 'RCRAinfoLandTypeDesc',
            'reference_point': 'ReferencePoint',
            'registry_id': 'RegistryID',
            'rmp_ids': 'RmpIDs',
            'sdwaids': 'SDWAIDs',
            'score': 'Score',
            'sems_ids': 'SemsIDs',
            'source_id': 'SourceID',
            'statute': 'Statute',
            'triids': 'TRIIDs',
            'tr_ibal_flag': 'TRIbalFlag',
            'tsdf': 'Tsdf',
            'viol_flag': 'ViolFlag',
            'web_docs': 'WebDocs'
        }

        self._airids = airids
        self._active_lower48 = active_lower48
        self._cwaids = cwaids
        self._calculated_accuracy_meters = calculated_accuracy_meters
        self._census_block_group = census_block_group
        self._chem_names_rel_land = chem_names_rel_land
        self._chesapeake_bay_flag = chesapeake_bay_flag
        self._cleanup_action_flag = cleanup_action_flag
        self._collection_method = collection_method
        self._curr_sv_flag = curr_sv_flag
        self._curr_vio_flag = curr_vio_flag
        self._current_vio_cnt = current_vio_cnt
        self._date_last_record_review = date_last_record_review
        self._epa_system = epa_system
        self._ea5yr_flag = ea5yr_flag
        self._ejscreen_flag = ejscreen_flag
        self._ejscreen_flag_us = ejscreen_flag_us
        self._fac_county_name = fac_county_name
        self._fac_derived_huc = fac_derived_huc
        self._fac_derived_tr_ibes = fac_derived_tr_ibes
        self._fac_derived_wbd = fac_derived_wbd
        self._fac_derived_wbd_name = fac_derived_wbd_name
        self._fac_fips_code = fac_fips_code
        self._fac_federal_agency_code = fac_federal_agency_code
        self._fac_federal_agency_name = fac_federal_agency_name
        self._fac_indian_cntry_flg = fac_indian_cntry_flg
        self._fac_indian_spatial_flg = fac_indian_spatial_flg
        self._fac_lat = fac_lat
        self._fac_long = fac_long
        self._fac_map_flg = fac_map_flg
        self._fac_map_icon = fac_map_icon
        self._fac_percent_minority = fac_percent_minority
        self._fac_population_density = fac_population_density
        self._fac_sic_codes = fac_sic_codes
        self._fac_std_county_name = fac_std_county_name
        self._fac_tri_land_releases = fac_tri_land_releases
        self._fac_tri_off_site_transfers = fac_tri_off_site_transfers
        self._fac_trion_site_releases = fac_trion_site_releases
        self._fac_tri_reporter = fac_tri_reporter
        self._fac_us_mex_border_flg = fac_us_mex_border_flg
        self._infea5yr_flag = infea5yr_flag
        self._insp5yr_flag = insp5yr_flag
        self._last_violation_date = last_violation_date
        self._lower48 = lower48
        self._map = map
        self._max_pctile_us = max_pctile_us
        self._max_score = max_score
        self._operator_code = operator_code
        self._operator_desc = operator_desc
        self._over80_count_us = over80_count_us
        self._owner_code = owner_code
        self._owner_desc = owner_desc
        self._pctile_cancer_us = pctile_cancer_us
        self._pctile_dpm_us = pctile_dpm_us
        self._pctile_o3_us = pctile_o3_us
        self._pctile_pctpre1960_us = pctile_pctpre1960_us
        self._pctile_pm_us = pctile_pm_us
        self._pctile_proximity_npdesus = pctile_proximity_npdesus
        self._pctile_proximity_npl_us = pctile_proximity_npl_us
        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us
        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us
        self._pctile_resp_us = pctile_resp_us
        self._pctile_traffic_score_us = pctile_traffic_score_us
        self._rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history
        self._rcra_case_ids = rcra_case_ids
        self._rcra_city = rcra_city
        self._rcra_compl_status = rcra_compl_status
        self._rcra_county = rcra_county
        self._rcra_days_last_inspection = rcra_days_last_inspection
        self._rcraepa_region = rcraepa_region
        self._rcrafips_code = rcrafips_code
        self._rcra_fea_cnt = rcra_fea_cnt
        self._rcraids = rcraids
        self._rcra_iea_cnt = rcra_iea_cnt
        self._rcra_imp_water_flg = rcra_imp_water_flg
        self._rcra_indian_cntry_flg = rcra_indian_cntry_flg
        self._rcra_insp_cnt = rcra_insp_cnt
        self._rcra_land_type_code = rcra_land_type_code
        self._rcra_last_fea_date = rcra_last_fea_date
        self._rcra_last_fea_date_epa = rcra_last_fea_date_epa
        self._rcra_last_fea_date_state = rcra_last_fea_date_state
        self._rcra_last_iea_date = rcra_last_iea_date
        self._rcra_last_iea_date_epa = rcra_last_iea_date_epa
        self._rcra_last_iea_date_state = rcra_last_iea_date_state
        self._rcra_last_insp_date_epa = rcra_last_insp_date_epa
        self._rcra_last_insp_date_state = rcra_last_insp_date_state
        self._rcra_last_inspection_date = rcra_last_inspection_date
        self._rcra_last_penalty_date = rcra_last_penalty_date
        self._rcra_map_icon = rcra_map_icon
        self._rcranaics = rcranaics
        self._rcra_name = rcra_name
        self._rcra_oldest_open_vio_date = rcra_oldest_open_vio_date
        self._rcra_penalties = rcra_penalties
        self._rcra_qtrs_with_nc = rcra_qtrs_with_nc
        self._rcra_qtrs_with_snc = rcra_qtrs_with_snc
        self._rcrasnc = rcrasnc
        self._rcra_state = rcra_state
        self._rcra_state_district = rcra_state_district
        self._rcra_status = rcra_status
        self._rcra_street = rcra_street
        self._rcratr_ibal_land_code = rcratr_ibal_land_code
        self._rcra_universe = rcra_universe
        self._rcra_violation_types = rcra_violation_types
        self._rcra_zip = rcra_zip
        self._rcr_ainfo_land_type_code = rcr_ainfo_land_type_code
        self._rcr_ainfo_land_type_desc = rcr_ainfo_land_type_desc
        self._reference_point = reference_point
        self._registry_id = registry_id
        self._rmp_ids = rmp_ids
        self._sdwaids = sdwaids
        self._score = score
        self._sems_ids = sems_ids
        self._source_id = source_id
        self._statute = statute
        self._triids = triids
        self._tr_ibal_flag = tr_ibal_flag
        self._tsdf = tsdf
        self._viol_flag = viol_flag
        self._web_docs = web_docs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rcra01':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rcra01 of this Rcra01.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airids(self):
        """Gets the airids of this Rcra01.

        Air Facility System (AFS) ID.

        :return: The airids of this Rcra01.
        :rtype: str
        """
        return self._airids

    @airids.setter
    def airids(self, airids):
        """Sets the airids of this Rcra01.

        Air Facility System (AFS) ID.

        :param airids: The airids of this Rcra01.
        :type airids: str
        """
        if airids is None:
            raise ValueError("Invalid value for `airids`, must not be `None`")

        self._airids = airids

    @property
    def active_lower48(self):
        """Gets the active_lower48 of this Rcra01.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :return: The active_lower48 of this Rcra01.
        :rtype: str
        """
        return self._active_lower48

    @active_lower48.setter
    def active_lower48(self, active_lower48):
        """Sets the active_lower48 of this Rcra01.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :param active_lower48: The active_lower48 of this Rcra01.
        :type active_lower48: str
        """
        if active_lower48 is None:
            raise ValueError("Invalid value for `active_lower48`, must not be `None`")

        self._active_lower48 = active_lower48

    @property
    def cwaids(self):
        """Gets the cwaids of this Rcra01.

        A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.

        :return: The cwaids of this Rcra01.
        :rtype: str
        """
        return self._cwaids

    @cwaids.setter
    def cwaids(self, cwaids):
        """Sets the cwaids of this Rcra01.

        A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.

        :param cwaids: The cwaids of this Rcra01.
        :type cwaids: str
        """
        if cwaids is None:
            raise ValueError("Invalid value for `cwaids`, must not be `None`")

        self._cwaids = cwaids

    @property
    def calculated_accuracy_meters(self):
        """Gets the calculated_accuracy_meters of this Rcra01.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :return: The calculated_accuracy_meters of this Rcra01.
        :rtype: str
        """
        return self._calculated_accuracy_meters

    @calculated_accuracy_meters.setter
    def calculated_accuracy_meters(self, calculated_accuracy_meters):
        """Sets the calculated_accuracy_meters of this Rcra01.

        The estimated accuracy in Meters for the facility's geospatial coordinate.

        :param calculated_accuracy_meters: The calculated_accuracy_meters of this Rcra01.
        :type calculated_accuracy_meters: str
        """
        if calculated_accuracy_meters is None:
            raise ValueError("Invalid value for `calculated_accuracy_meters`, must not be `None`")

        self._calculated_accuracy_meters = calculated_accuracy_meters

    @property
    def census_block_group(self):
        """Gets the census_block_group of this Rcra01.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :return: The census_block_group of this Rcra01.
        :rtype: str
        """
        return self._census_block_group

    @census_block_group.setter
    def census_block_group(self, census_block_group):
        """Sets the census_block_group of this Rcra01.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :param census_block_group: The census_block_group of this Rcra01.
        :type census_block_group: str
        """
        if census_block_group is None:
            raise ValueError("Invalid value for `census_block_group`, must not be `None`")

        self._census_block_group = census_block_group

    @property
    def chem_names_rel_land(self):
        """Gets the chem_names_rel_land of this Rcra01.

        It is an aggregated field containing all the names found for the current reporting year (2017).

        :return: The chem_names_rel_land of this Rcra01.
        :rtype: str
        """
        return self._chem_names_rel_land

    @chem_names_rel_land.setter
    def chem_names_rel_land(self, chem_names_rel_land):
        """Sets the chem_names_rel_land of this Rcra01.

        It is an aggregated field containing all the names found for the current reporting year (2017).

        :param chem_names_rel_land: The chem_names_rel_land of this Rcra01.
        :type chem_names_rel_land: str
        """
        if chem_names_rel_land is None:
            raise ValueError("Invalid value for `chem_names_rel_land`, must not be `None`")

        self._chem_names_rel_land = chem_names_rel_land

    @property
    def chesapeake_bay_flag(self):
        """Gets the chesapeake_bay_flag of this Rcra01.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :return: The chesapeake_bay_flag of this Rcra01.
        :rtype: str
        """
        return self._chesapeake_bay_flag

    @chesapeake_bay_flag.setter
    def chesapeake_bay_flag(self, chesapeake_bay_flag):
        """Sets the chesapeake_bay_flag of this Rcra01.

        Displays \"Y\" if the facility is located within the Chesapeake Bay watershed.

        :param chesapeake_bay_flag: The chesapeake_bay_flag of this Rcra01.
        :type chesapeake_bay_flag: str
        """
        if chesapeake_bay_flag is None:
            raise ValueError("Invalid value for `chesapeake_bay_flag`, must not be `None`")

        self._chesapeake_bay_flag = chesapeake_bay_flag

    @property
    def cleanup_action_flag(self):
        """Gets the cleanup_action_flag of this Rcra01.


        :return: The cleanup_action_flag of this Rcra01.
        :rtype: str
        """
        return self._cleanup_action_flag

    @cleanup_action_flag.setter
    def cleanup_action_flag(self, cleanup_action_flag):
        """Sets the cleanup_action_flag of this Rcra01.


        :param cleanup_action_flag: The cleanup_action_flag of this Rcra01.
        :type cleanup_action_flag: str
        """
        if cleanup_action_flag is None:
            raise ValueError("Invalid value for `cleanup_action_flag`, must not be `None`")

        self._cleanup_action_flag = cleanup_action_flag

    @property
    def collection_method(self):
        """Gets the collection_method of this Rcra01.

        ??

        :return: The collection_method of this Rcra01.
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this Rcra01.

        ??

        :param collection_method: The collection_method of this Rcra01.
        :type collection_method: str
        """
        if collection_method is None:
            raise ValueError("Invalid value for `collection_method`, must not be `None`")

        self._collection_method = collection_method

    @property
    def curr_sv_flag(self):
        """Gets the curr_sv_flag of this Rcra01.

        Indicates if the facility has a current significant violation. 1 = Yes

        :return: The curr_sv_flag of this Rcra01.
        :rtype: str
        """
        return self._curr_sv_flag

    @curr_sv_flag.setter
    def curr_sv_flag(self, curr_sv_flag):
        """Sets the curr_sv_flag of this Rcra01.

        Indicates if the facility has a current significant violation. 1 = Yes

        :param curr_sv_flag: The curr_sv_flag of this Rcra01.
        :type curr_sv_flag: str
        """
        if curr_sv_flag is None:
            raise ValueError("Invalid value for `curr_sv_flag`, must not be `None`")

        self._curr_sv_flag = curr_sv_flag

    @property
    def curr_vio_flag(self):
        """Gets the curr_vio_flag of this Rcra01.

        Indicates if the facility has a current violation. 1 = Yes

        :return: The curr_vio_flag of this Rcra01.
        :rtype: str
        """
        return self._curr_vio_flag

    @curr_vio_flag.setter
    def curr_vio_flag(self, curr_vio_flag):
        """Sets the curr_vio_flag of this Rcra01.

        Indicates if the facility has a current violation. 1 = Yes

        :param curr_vio_flag: The curr_vio_flag of this Rcra01.
        :type curr_vio_flag: str
        """
        if curr_vio_flag is None:
            raise ValueError("Invalid value for `curr_vio_flag`, must not be `None`")

        self._curr_vio_flag = curr_vio_flag

    @property
    def current_vio_cnt(self):
        """Gets the current_vio_cnt of this Rcra01.


        :return: The current_vio_cnt of this Rcra01.
        :rtype: str
        """
        return self._current_vio_cnt

    @current_vio_cnt.setter
    def current_vio_cnt(self, current_vio_cnt):
        """Sets the current_vio_cnt of this Rcra01.


        :param current_vio_cnt: The current_vio_cnt of this Rcra01.
        :type current_vio_cnt: str
        """
        if current_vio_cnt is None:
            raise ValueError("Invalid value for `current_vio_cnt`, must not be `None`")

        self._current_vio_cnt = current_vio_cnt

    @property
    def date_last_record_review(self):
        """Gets the date_last_record_review of this Rcra01.


        :return: The date_last_record_review of this Rcra01.
        :rtype: str
        """
        return self._date_last_record_review

    @date_last_record_review.setter
    def date_last_record_review(self, date_last_record_review):
        """Sets the date_last_record_review of this Rcra01.


        :param date_last_record_review: The date_last_record_review of this Rcra01.
        :type date_last_record_review: str
        """
        if date_last_record_review is None:
            raise ValueError("Invalid value for `date_last_record_review`, must not be `None`")

        self._date_last_record_review = date_last_record_review

    @property
    def epa_system(self):
        """Gets the epa_system of this Rcra01.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :return: The epa_system of this Rcra01.
        :rtype: str
        """
        return self._epa_system

    @epa_system.setter
    def epa_system(self, epa_system):
        """Sets the epa_system of this Rcra01.

        The EPA data system in which permit and facility records are kept. EPA's Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.

        :param epa_system: The epa_system of this Rcra01.
        :type epa_system: str
        """
        if epa_system is None:
            raise ValueError("Invalid value for `epa_system`, must not be `None`")

        self._epa_system = epa_system

    @property
    def ea5yr_flag(self):
        """Gets the ea5yr_flag of this Rcra01.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :return: The ea5yr_flag of this Rcra01.
        :rtype: str
        """
        return self._ea5yr_flag

    @ea5yr_flag.setter
    def ea5yr_flag(self, ea5yr_flag):
        """Sets the ea5yr_flag of this Rcra01.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :param ea5yr_flag: The ea5yr_flag of this Rcra01.
        :type ea5yr_flag: str
        """
        if ea5yr_flag is None:
            raise ValueError("Invalid value for `ea5yr_flag`, must not be `None`")

        self._ea5yr_flag = ea5yr_flag

    @property
    def ejscreen_flag(self):
        """Gets the ejscreen_flag of this Rcra01.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag of this Rcra01.
        :rtype: str
        """
        return self._ejscreen_flag

    @ejscreen_flag.setter
    def ejscreen_flag(self, ejscreen_flag):
        """Sets the ejscreen_flag of this Rcra01.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag: The ejscreen_flag of this Rcra01.
        :type ejscreen_flag: str
        """
        if ejscreen_flag is None:
            raise ValueError("Invalid value for `ejscreen_flag`, must not be `None`")

        self._ejscreen_flag = ejscreen_flag

    @property
    def ejscreen_flag_us(self):
        """Gets the ejscreen_flag_us of this Rcra01.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag_us of this Rcra01.
        :rtype: str
        """
        return self._ejscreen_flag_us

    @ejscreen_flag_us.setter
    def ejscreen_flag_us(self, ejscreen_flag_us):
        """Sets the ejscreen_flag_us of this Rcra01.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag_us: The ejscreen_flag_us of this Rcra01.
        :type ejscreen_flag_us: str
        """
        if ejscreen_flag_us is None:
            raise ValueError("Invalid value for `ejscreen_flag_us`, must not be `None`")

        self._ejscreen_flag_us = ejscreen_flag_us

    @property
    def fac_county_name(self):
        """Gets the fac_county_name of this Rcra01.

        The facility county name from EPA's Facility Registry System

        :return: The fac_county_name of this Rcra01.
        :rtype: str
        """
        return self._fac_county_name

    @fac_county_name.setter
    def fac_county_name(self, fac_county_name):
        """Sets the fac_county_name of this Rcra01.

        The facility county name from EPA's Facility Registry System

        :param fac_county_name: The fac_county_name of this Rcra01.
        :type fac_county_name: str
        """
        if fac_county_name is None:
            raise ValueError("Invalid value for `fac_county_name`, must not be `None`")

        self._fac_county_name = fac_county_name

    @property
    def fac_derived_huc(self):
        """Gets the fac_derived_huc of this Rcra01.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :return: The fac_derived_huc of this Rcra01.
        :rtype: str
        """
        return self._fac_derived_huc

    @fac_derived_huc.setter
    def fac_derived_huc(self, fac_derived_huc):
        """Sets the fac_derived_huc of this Rcra01.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :param fac_derived_huc: The fac_derived_huc of this Rcra01.
        :type fac_derived_huc: str
        """
        if fac_derived_huc is None:
            raise ValueError("Invalid value for `fac_derived_huc`, must not be `None`")

        self._fac_derived_huc = fac_derived_huc

    @property
    def fac_derived_tr_ibes(self):
        """Gets the fac_derived_tr_ibes of this Rcra01.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :return: The fac_derived_tr_ibes of this Rcra01.
        :rtype: str
        """
        return self._fac_derived_tr_ibes

    @fac_derived_tr_ibes.setter
    def fac_derived_tr_ibes(self, fac_derived_tr_ibes):
        """Sets the fac_derived_tr_ibes of this Rcra01.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Rcra01.
        :type fac_derived_tr_ibes: str
        """
        if fac_derived_tr_ibes is None:
            raise ValueError("Invalid value for `fac_derived_tr_ibes`, must not be `None`")

        self._fac_derived_tr_ibes = fac_derived_tr_ibes

    @property
    def fac_derived_wbd(self):
        """Gets the fac_derived_wbd of this Rcra01.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :return: The fac_derived_wbd of this Rcra01.
        :rtype: str
        """
        return self._fac_derived_wbd

    @fac_derived_wbd.setter
    def fac_derived_wbd(self, fac_derived_wbd):
        """Sets the fac_derived_wbd of this Rcra01.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :param fac_derived_wbd: The fac_derived_wbd of this Rcra01.
        :type fac_derived_wbd: str
        """
        if fac_derived_wbd is None:
            raise ValueError("Invalid value for `fac_derived_wbd`, must not be `None`")

        self._fac_derived_wbd = fac_derived_wbd

    @property
    def fac_derived_wbd_name(self):
        """Gets the fac_derived_wbd_name of this Rcra01.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :return: The fac_derived_wbd_name of this Rcra01.
        :rtype: str
        """
        return self._fac_derived_wbd_name

    @fac_derived_wbd_name.setter
    def fac_derived_wbd_name(self, fac_derived_wbd_name):
        """Sets the fac_derived_wbd_name of this Rcra01.

        The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate

        :param fac_derived_wbd_name: The fac_derived_wbd_name of this Rcra01.
        :type fac_derived_wbd_name: str
        """
        if fac_derived_wbd_name is None:
            raise ValueError("Invalid value for `fac_derived_wbd_name`, must not be `None`")

        self._fac_derived_wbd_name = fac_derived_wbd_name

    @property
    def fac_fips_code(self):
        """Gets the fac_fips_code of this Rcra01.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :return: The fac_fips_code of this Rcra01.
        :rtype: str
        """
        return self._fac_fips_code

    @fac_fips_code.setter
    def fac_fips_code(self, fac_fips_code):
        """Sets the fac_fips_code of this Rcra01.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :param fac_fips_code: The fac_fips_code of this Rcra01.
        :type fac_fips_code: str
        """
        if fac_fips_code is None:
            raise ValueError("Invalid value for `fac_fips_code`, must not be `None`")

        self._fac_fips_code = fac_fips_code

    @property
    def fac_federal_agency_code(self):
        """Gets the fac_federal_agency_code of this Rcra01.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :return: The fac_federal_agency_code of this Rcra01.
        :rtype: str
        """
        return self._fac_federal_agency_code

    @fac_federal_agency_code.setter
    def fac_federal_agency_code(self, fac_federal_agency_code):
        """Sets the fac_federal_agency_code of this Rcra01.

        Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C = Civilian Federal Agency; D = Department of Defense; E = Department of Energy; X = Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.

        :param fac_federal_agency_code: The fac_federal_agency_code of this Rcra01.
        :type fac_federal_agency_code: str
        """
        if fac_federal_agency_code is None:
            raise ValueError("Invalid value for `fac_federal_agency_code`, must not be `None`")

        self._fac_federal_agency_code = fac_federal_agency_code

    @property
    def fac_federal_agency_name(self):
        """Gets the fac_federal_agency_name of this Rcra01.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :return: The fac_federal_agency_name of this Rcra01.
        :rtype: str
        """
        return self._fac_federal_agency_name

    @fac_federal_agency_name.setter
    def fac_federal_agency_name(self, fac_federal_agency_name):
        """Sets the fac_federal_agency_name of this Rcra01.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :param fac_federal_agency_name: The fac_federal_agency_name of this Rcra01.
        :type fac_federal_agency_name: str
        """
        if fac_federal_agency_name is None:
            raise ValueError("Invalid value for `fac_federal_agency_name`, must not be `None`")

        self._fac_federal_agency_name = fac_federal_agency_name

    @property
    def fac_indian_cntry_flg(self):
        """Gets the fac_indian_cntry_flg of this Rcra01.

        Flag showing Y/N whether the facility is located in Indian Country.

        :return: The fac_indian_cntry_flg of this Rcra01.
        :rtype: str
        """
        return self._fac_indian_cntry_flg

    @fac_indian_cntry_flg.setter
    def fac_indian_cntry_flg(self, fac_indian_cntry_flg):
        """Sets the fac_indian_cntry_flg of this Rcra01.

        Flag showing Y/N whether the facility is located in Indian Country.

        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Rcra01.
        :type fac_indian_cntry_flg: str
        """
        if fac_indian_cntry_flg is None:
            raise ValueError("Invalid value for `fac_indian_cntry_flg`, must not be `None`")

        self._fac_indian_cntry_flg = fac_indian_cntry_flg

    @property
    def fac_indian_spatial_flg(self):
        """Gets the fac_indian_spatial_flg of this Rcra01.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :return: The fac_indian_spatial_flg of this Rcra01.
        :rtype: str
        """
        return self._fac_indian_spatial_flg

    @fac_indian_spatial_flg.setter
    def fac_indian_spatial_flg(self, fac_indian_spatial_flg):
        """Sets the fac_indian_spatial_flg of this Rcra01.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Rcra01.
        :type fac_indian_spatial_flg: str
        """
        if fac_indian_spatial_flg is None:
            raise ValueError("Invalid value for `fac_indian_spatial_flg`, must not be `None`")

        self._fac_indian_spatial_flg = fac_indian_spatial_flg

    @property
    def fac_lat(self):
        """Gets the fac_lat of this Rcra01.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_lat of this Rcra01.
        :rtype: str
        """
        return self._fac_lat

    @fac_lat.setter
    def fac_lat(self, fac_lat):
        """Sets the fac_lat of this Rcra01.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_lat: The fac_lat of this Rcra01.
        :type fac_lat: str
        """
        if fac_lat is None:
            raise ValueError("Invalid value for `fac_lat`, must not be `None`")

        self._fac_lat = fac_lat

    @property
    def fac_long(self):
        """Gets the fac_long of this Rcra01.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_long of this Rcra01.
        :rtype: str
        """
        return self._fac_long

    @fac_long.setter
    def fac_long(self, fac_long):
        """Sets the fac_long of this Rcra01.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_long: The fac_long of this Rcra01.
        :type fac_long: str
        """
        if fac_long is None:
            raise ValueError("Invalid value for `fac_long`, must not be `None`")

        self._fac_long = fac_long

    @property
    def fac_map_flg(self):
        """Gets the fac_map_flg of this Rcra01.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :return: The fac_map_flg of this Rcra01.
        :rtype: str
        """
        return self._fac_map_flg

    @fac_map_flg.setter
    def fac_map_flg(self, fac_map_flg):
        """Sets the fac_map_flg of this Rcra01.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :param fac_map_flg: The fac_map_flg of this Rcra01.
        :type fac_map_flg: str
        """
        if fac_map_flg is None:
            raise ValueError("Invalid value for `fac_map_flg`, must not be `None`")

        self._fac_map_flg = fac_map_flg

    @property
    def fac_map_icon(self):
        """Gets the fac_map_icon of this Rcra01.

        The default map icon image file calculated for the facility by the ECHO program.

        :return: The fac_map_icon of this Rcra01.
        :rtype: str
        """
        return self._fac_map_icon

    @fac_map_icon.setter
    def fac_map_icon(self, fac_map_icon):
        """Sets the fac_map_icon of this Rcra01.

        The default map icon image file calculated for the facility by the ECHO program.

        :param fac_map_icon: The fac_map_icon of this Rcra01.
        :type fac_map_icon: str
        """
        if fac_map_icon is None:
            raise ValueError("Invalid value for `fac_map_icon`, must not be `None`")

        self._fac_map_icon = fac_map_icon

    @property
    def fac_percent_minority(self):
        """Gets the fac_percent_minority of this Rcra01.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :return: The fac_percent_minority of this Rcra01.
        :rtype: str
        """
        return self._fac_percent_minority

    @fac_percent_minority.setter
    def fac_percent_minority(self, fac_percent_minority):
        """Sets the fac_percent_minority of this Rcra01.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :param fac_percent_minority: The fac_percent_minority of this Rcra01.
        :type fac_percent_minority: str
        """
        if fac_percent_minority is None:
            raise ValueError("Invalid value for `fac_percent_minority`, must not be `None`")

        self._fac_percent_minority = fac_percent_minority

    @property
    def fac_population_density(self):
        """Gets the fac_population_density of this Rcra01.

        The number of persons per square mile in the profiled area.

        :return: The fac_population_density of this Rcra01.
        :rtype: str
        """
        return self._fac_population_density

    @fac_population_density.setter
    def fac_population_density(self, fac_population_density):
        """Sets the fac_population_density of this Rcra01.

        The number of persons per square mile in the profiled area.

        :param fac_population_density: The fac_population_density of this Rcra01.
        :type fac_population_density: str
        """
        if fac_population_density is None:
            raise ValueError("Invalid value for `fac_population_density`, must not be `None`")

        self._fac_population_density = fac_population_density

    @property
    def fac_sic_codes(self):
        """Gets the fac_sic_codes of this Rcra01.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :return: The fac_sic_codes of this Rcra01.
        :rtype: str
        """
        return self._fac_sic_codes

    @fac_sic_codes.setter
    def fac_sic_codes(self, fac_sic_codes):
        """Sets the fac_sic_codes of this Rcra01.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :param fac_sic_codes: The fac_sic_codes of this Rcra01.
        :type fac_sic_codes: str
        """
        if fac_sic_codes is None:
            raise ValueError("Invalid value for `fac_sic_codes`, must not be `None`")

        self._fac_sic_codes = fac_sic_codes

    @property
    def fac_std_county_name(self):
        """Gets the fac_std_county_name of this Rcra01.

        The standardized  facility county name from EPA's Facility Registry System

        :return: The fac_std_county_name of this Rcra01.
        :rtype: str
        """
        return self._fac_std_county_name

    @fac_std_county_name.setter
    def fac_std_county_name(self, fac_std_county_name):
        """Sets the fac_std_county_name of this Rcra01.

        The standardized  facility county name from EPA's Facility Registry System

        :param fac_std_county_name: The fac_std_county_name of this Rcra01.
        :type fac_std_county_name: str
        """
        if fac_std_county_name is None:
            raise ValueError("Invalid value for `fac_std_county_name`, must not be `None`")

        self._fac_std_county_name = fac_std_county_name

    @property
    def fac_tri_land_releases(self):
        """Gets the fac_tri_land_releases of this Rcra01.


        :return: The fac_tri_land_releases of this Rcra01.
        :rtype: str
        """
        return self._fac_tri_land_releases

    @fac_tri_land_releases.setter
    def fac_tri_land_releases(self, fac_tri_land_releases):
        """Sets the fac_tri_land_releases of this Rcra01.


        :param fac_tri_land_releases: The fac_tri_land_releases of this Rcra01.
        :type fac_tri_land_releases: str
        """
        if fac_tri_land_releases is None:
            raise ValueError("Invalid value for `fac_tri_land_releases`, must not be `None`")

        self._fac_tri_land_releases = fac_tri_land_releases

    @property
    def fac_tri_off_site_transfers(self):
        """Gets the fac_tri_off_site_transfers of this Rcra01.


        :return: The fac_tri_off_site_transfers of this Rcra01.
        :rtype: str
        """
        return self._fac_tri_off_site_transfers

    @fac_tri_off_site_transfers.setter
    def fac_tri_off_site_transfers(self, fac_tri_off_site_transfers):
        """Sets the fac_tri_off_site_transfers of this Rcra01.


        :param fac_tri_off_site_transfers: The fac_tri_off_site_transfers of this Rcra01.
        :type fac_tri_off_site_transfers: str
        """
        if fac_tri_off_site_transfers is None:
            raise ValueError("Invalid value for `fac_tri_off_site_transfers`, must not be `None`")

        self._fac_tri_off_site_transfers = fac_tri_off_site_transfers

    @property
    def fac_trion_site_releases(self):
        """Gets the fac_trion_site_releases of this Rcra01.


        :return: The fac_trion_site_releases of this Rcra01.
        :rtype: str
        """
        return self._fac_trion_site_releases

    @fac_trion_site_releases.setter
    def fac_trion_site_releases(self, fac_trion_site_releases):
        """Sets the fac_trion_site_releases of this Rcra01.


        :param fac_trion_site_releases: The fac_trion_site_releases of this Rcra01.
        :type fac_trion_site_releases: str
        """
        if fac_trion_site_releases is None:
            raise ValueError("Invalid value for `fac_trion_site_releases`, must not be `None`")

        self._fac_trion_site_releases = fac_trion_site_releases

    @property
    def fac_tri_reporter(self):
        """Gets the fac_tri_reporter of this Rcra01.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :return: The fac_tri_reporter of this Rcra01.
        :rtype: str
        """
        return self._fac_tri_reporter

    @fac_tri_reporter.setter
    def fac_tri_reporter(self, fac_tri_reporter):
        """Sets the fac_tri_reporter of this Rcra01.

        Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :param fac_tri_reporter: The fac_tri_reporter of this Rcra01.
        :type fac_tri_reporter: str
        """
        if fac_tri_reporter is None:
            raise ValueError("Invalid value for `fac_tri_reporter`, must not be `None`")

        self._fac_tri_reporter = fac_tri_reporter

    @property
    def fac_us_mex_border_flg(self):
        """Gets the fac_us_mex_border_flg of this Rcra01.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :return: The fac_us_mex_border_flg of this Rcra01.
        :rtype: str
        """
        return self._fac_us_mex_border_flg

    @fac_us_mex_border_flg.setter
    def fac_us_mex_border_flg(self, fac_us_mex_border_flg):
        """Sets the fac_us_mex_border_flg of this Rcra01.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Rcra01.
        :type fac_us_mex_border_flg: str
        """
        if fac_us_mex_border_flg is None:
            raise ValueError("Invalid value for `fac_us_mex_border_flg`, must not be `None`")

        self._fac_us_mex_border_flg = fac_us_mex_border_flg

    @property
    def infea5yr_flag(self):
        """Gets the infea5yr_flag of this Rcra01.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :return: The infea5yr_flag of this Rcra01.
        :rtype: str
        """
        return self._infea5yr_flag

    @infea5yr_flag.setter
    def infea5yr_flag(self, infea5yr_flag):
        """Sets the infea5yr_flag of this Rcra01.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :param infea5yr_flag: The infea5yr_flag of this Rcra01.
        :type infea5yr_flag: str
        """
        if infea5yr_flag is None:
            raise ValueError("Invalid value for `infea5yr_flag`, must not be `None`")

        self._infea5yr_flag = infea5yr_flag

    @property
    def insp5yr_flag(self):
        """Gets the insp5yr_flag of this Rcra01.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :return: The insp5yr_flag of this Rcra01.
        :rtype: str
        """
        return self._insp5yr_flag

    @insp5yr_flag.setter
    def insp5yr_flag(self, insp5yr_flag):
        """Sets the insp5yr_flag of this Rcra01.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :param insp5yr_flag: The insp5yr_flag of this Rcra01.
        :type insp5yr_flag: str
        """
        if insp5yr_flag is None:
            raise ValueError("Invalid value for `insp5yr_flag`, must not be `None`")

        self._insp5yr_flag = insp5yr_flag

    @property
    def last_violation_date(self):
        """Gets the last_violation_date of this Rcra01.


        :return: The last_violation_date of this Rcra01.
        :rtype: str
        """
        return self._last_violation_date

    @last_violation_date.setter
    def last_violation_date(self, last_violation_date):
        """Sets the last_violation_date of this Rcra01.


        :param last_violation_date: The last_violation_date of this Rcra01.
        :type last_violation_date: str
        """
        if last_violation_date is None:
            raise ValueError("Invalid value for `last_violation_date`, must not be `None`")

        self._last_violation_date = last_violation_date

    @property
    def lower48(self):
        """Gets the lower48 of this Rcra01.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :return: The lower48 of this Rcra01.
        :rtype: str
        """
        return self._lower48

    @lower48.setter
    def lower48(self, lower48):
        """Sets the lower48 of this Rcra01.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :param lower48: The lower48 of this Rcra01.
        :type lower48: str
        """
        if lower48 is None:
            raise ValueError("Invalid value for `lower48`, must not be `None`")

        self._lower48 = lower48

    @property
    def map(self):
        """Gets the map of this Rcra01.

        No Longer Used.

        :return: The map of this Rcra01.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Rcra01.

        No Longer Used.

        :param map: The map of this Rcra01.
        :type map: str
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def max_pctile_us(self):
        """Gets the max_pctile_us of this Rcra01.

        The maximum percentile from all individual EJSCREEN indicators.

        :return: The max_pctile_us of this Rcra01.
        :rtype: str
        """
        return self._max_pctile_us

    @max_pctile_us.setter
    def max_pctile_us(self, max_pctile_us):
        """Sets the max_pctile_us of this Rcra01.

        The maximum percentile from all individual EJSCREEN indicators.

        :param max_pctile_us: The max_pctile_us of this Rcra01.
        :type max_pctile_us: str
        """
        if max_pctile_us is None:
            raise ValueError("Invalid value for `max_pctile_us`, must not be `None`")

        self._max_pctile_us = max_pctile_us

    @property
    def max_score(self):
        """Gets the max_score of this Rcra01.

        A sorting score for internal use.

        :return: The max_score of this Rcra01.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Rcra01.

        A sorting score for internal use.

        :param max_score: The max_score of this Rcra01.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def operator_code(self):
        """Gets the operator_code of this Rcra01.


        :return: The operator_code of this Rcra01.
        :rtype: str
        """
        return self._operator_code

    @operator_code.setter
    def operator_code(self, operator_code):
        """Sets the operator_code of this Rcra01.


        :param operator_code: The operator_code of this Rcra01.
        :type operator_code: str
        """
        if operator_code is None:
            raise ValueError("Invalid value for `operator_code`, must not be `None`")

        self._operator_code = operator_code

    @property
    def operator_desc(self):
        """Gets the operator_desc of this Rcra01.


        :return: The operator_desc of this Rcra01.
        :rtype: str
        """
        return self._operator_desc

    @operator_desc.setter
    def operator_desc(self, operator_desc):
        """Sets the operator_desc of this Rcra01.


        :param operator_desc: The operator_desc of this Rcra01.
        :type operator_desc: str
        """
        if operator_desc is None:
            raise ValueError("Invalid value for `operator_desc`, must not be `None`")

        self._operator_desc = operator_desc

    @property
    def over80_count_us(self):
        """Gets the over80_count_us of this Rcra01.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :return: The over80_count_us of this Rcra01.
        :rtype: str
        """
        return self._over80_count_us

    @over80_count_us.setter
    def over80_count_us(self, over80_count_us):
        """Sets the over80_count_us of this Rcra01.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :param over80_count_us: The over80_count_us of this Rcra01.
        :type over80_count_us: str
        """
        if over80_count_us is None:
            raise ValueError("Invalid value for `over80_count_us`, must not be `None`")

        self._over80_count_us = over80_count_us

    @property
    def owner_code(self):
        """Gets the owner_code of this Rcra01.


        :return: The owner_code of this Rcra01.
        :rtype: str
        """
        return self._owner_code

    @owner_code.setter
    def owner_code(self, owner_code):
        """Sets the owner_code of this Rcra01.


        :param owner_code: The owner_code of this Rcra01.
        :type owner_code: str
        """
        if owner_code is None:
            raise ValueError("Invalid value for `owner_code`, must not be `None`")

        self._owner_code = owner_code

    @property
    def owner_desc(self):
        """Gets the owner_desc of this Rcra01.

        Description of Owner code

        :return: The owner_desc of this Rcra01.
        :rtype: str
        """
        return self._owner_desc

    @owner_desc.setter
    def owner_desc(self, owner_desc):
        """Sets the owner_desc of this Rcra01.

        Description of Owner code

        :param owner_desc: The owner_desc of this Rcra01.
        :type owner_desc: str
        """
        if owner_desc is None:
            raise ValueError("Invalid value for `owner_desc`, must not be `None`")

        self._owner_desc = owner_desc

    @property
    def pctile_cancer_us(self):
        """Gets the pctile_cancer_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :return: The pctile_cancer_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_cancer_us

    @pctile_cancer_us.setter
    def pctile_cancer_us(self, pctile_cancer_us):
        """Sets the pctile_cancer_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :param pctile_cancer_us: The pctile_cancer_us of this Rcra01.
        :type pctile_cancer_us: str
        """
        if pctile_cancer_us is None:
            raise ValueError("Invalid value for `pctile_cancer_us`, must not be `None`")

        self._pctile_cancer_us = pctile_cancer_us

    @property
    def pctile_dpm_us(self):
        """Gets the pctile_dpm_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :return: The pctile_dpm_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_dpm_us

    @pctile_dpm_us.setter
    def pctile_dpm_us(self, pctile_dpm_us):
        """Sets the pctile_dpm_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :param pctile_dpm_us: The pctile_dpm_us of this Rcra01.
        :type pctile_dpm_us: str
        """
        if pctile_dpm_us is None:
            raise ValueError("Invalid value for `pctile_dpm_us`, must not be `None`")

        self._pctile_dpm_us = pctile_dpm_us

    @property
    def pctile_o3_us(self):
        """Gets the pctile_o3_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :return: The pctile_o3_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_o3_us

    @pctile_o3_us.setter
    def pctile_o3_us(self, pctile_o3_us):
        """Sets the pctile_o3_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :param pctile_o3_us: The pctile_o3_us of this Rcra01.
        :type pctile_o3_us: str
        """
        if pctile_o3_us is None:
            raise ValueError("Invalid value for `pctile_o3_us`, must not be `None`")

        self._pctile_o3_us = pctile_o3_us

    @property
    def pctile_pctpre1960_us(self):
        """Gets the pctile_pctpre1960_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :return: The pctile_pctpre1960_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_pctpre1960_us

    @pctile_pctpre1960_us.setter
    def pctile_pctpre1960_us(self, pctile_pctpre1960_us):
        """Sets the pctile_pctpre1960_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Rcra01.
        :type pctile_pctpre1960_us: str
        """
        if pctile_pctpre1960_us is None:
            raise ValueError("Invalid value for `pctile_pctpre1960_us`, must not be `None`")

        self._pctile_pctpre1960_us = pctile_pctpre1960_us

    @property
    def pctile_pm_us(self):
        """Gets the pctile_pm_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :return: The pctile_pm_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_pm_us

    @pctile_pm_us.setter
    def pctile_pm_us(self, pctile_pm_us):
        """Sets the pctile_pm_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :param pctile_pm_us: The pctile_pm_us of this Rcra01.
        :type pctile_pm_us: str
        """
        if pctile_pm_us is None:
            raise ValueError("Invalid value for `pctile_pm_us`, must not be `None`")

        self._pctile_pm_us = pctile_pm_us

    @property
    def pctile_proximity_npdesus(self):
        """Gets the pctile_proximity_npdesus of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :return: The pctile_proximity_npdesus of this Rcra01.
        :rtype: str
        """
        return self._pctile_proximity_npdesus

    @pctile_proximity_npdesus.setter
    def pctile_proximity_npdesus(self, pctile_proximity_npdesus):
        """Sets the pctile_proximity_npdesus of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Rcra01.
        :type pctile_proximity_npdesus: str
        """
        if pctile_proximity_npdesus is None:
            raise ValueError("Invalid value for `pctile_proximity_npdesus`, must not be `None`")

        self._pctile_proximity_npdesus = pctile_proximity_npdesus

    @property
    def pctile_proximity_npl_us(self):
        """Gets the pctile_proximity_npl_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :return: The pctile_proximity_npl_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_proximity_npl_us

    @pctile_proximity_npl_us.setter
    def pctile_proximity_npl_us(self, pctile_proximity_npl_us):
        """Sets the pctile_proximity_npl_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Rcra01.
        :type pctile_proximity_npl_us: str
        """
        if pctile_proximity_npl_us is None:
            raise ValueError("Invalid value for `pctile_proximity_npl_us`, must not be `None`")

        self._pctile_proximity_npl_us = pctile_proximity_npl_us

    @property
    def pctile_proximity_rmp_us(self):
        """Gets the pctile_proximity_rmp_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :return: The pctile_proximity_rmp_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_proximity_rmp_us

    @pctile_proximity_rmp_us.setter
    def pctile_proximity_rmp_us(self, pctile_proximity_rmp_us):
        """Sets the pctile_proximity_rmp_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Rcra01.
        :type pctile_proximity_rmp_us: str
        """
        if pctile_proximity_rmp_us is None:
            raise ValueError("Invalid value for `pctile_proximity_rmp_us`, must not be `None`")

        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us

    @property
    def pctile_proximity_tsdf_us(self):
        """Gets the pctile_proximity_tsdf_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :return: The pctile_proximity_tsdf_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_proximity_tsdf_us

    @pctile_proximity_tsdf_us.setter
    def pctile_proximity_tsdf_us(self, pctile_proximity_tsdf_us):
        """Sets the pctile_proximity_tsdf_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Rcra01.
        :type pctile_proximity_tsdf_us: str
        """
        if pctile_proximity_tsdf_us is None:
            raise ValueError("Invalid value for `pctile_proximity_tsdf_us`, must not be `None`")

        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us

    @property
    def pctile_resp_us(self):
        """Gets the pctile_resp_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :return: The pctile_resp_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_resp_us

    @pctile_resp_us.setter
    def pctile_resp_us(self, pctile_resp_us):
        """Sets the pctile_resp_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :param pctile_resp_us: The pctile_resp_us of this Rcra01.
        :type pctile_resp_us: str
        """
        if pctile_resp_us is None:
            raise ValueError("Invalid value for `pctile_resp_us`, must not be `None`")

        self._pctile_resp_us = pctile_resp_us

    @property
    def pctile_traffic_score_us(self):
        """Gets the pctile_traffic_score_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :return: The pctile_traffic_score_us of this Rcra01.
        :rtype: str
        """
        return self._pctile_traffic_score_us

    @pctile_traffic_score_us.setter
    def pctile_traffic_score_us(self, pctile_traffic_score_us):
        """Sets the pctile_traffic_score_us of this Rcra01.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Rcra01.
        :type pctile_traffic_score_us: str
        """
        if pctile_traffic_score_us is None:
            raise ValueError("Invalid value for `pctile_traffic_score_us`, must not be `None`")

        self._pctile_traffic_score_us = pctile_traffic_score_us

    @property
    def rcra3yr_compl_qtrs_history(self):
        """Gets the rcra3yr_compl_qtrs_history of this Rcra01.

        The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :return: The rcra3yr_compl_qtrs_history of this Rcra01.
        :rtype: str
        """
        return self._rcra3yr_compl_qtrs_history

    @rcra3yr_compl_qtrs_history.setter
    def rcra3yr_compl_qtrs_history(self, rcra3yr_compl_qtrs_history):
        """Sets the rcra3yr_compl_qtrs_history of this Rcra01.

        The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :param rcra3yr_compl_qtrs_history: The rcra3yr_compl_qtrs_history of this Rcra01.
        :type rcra3yr_compl_qtrs_history: str
        """
        if rcra3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `rcra3yr_compl_qtrs_history`, must not be `None`")

        self._rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history

    @property
    def rcra_case_ids(self):
        """Gets the rcra_case_ids of this Rcra01.


        :return: The rcra_case_ids of this Rcra01.
        :rtype: str
        """
        return self._rcra_case_ids

    @rcra_case_ids.setter
    def rcra_case_ids(self, rcra_case_ids):
        """Sets the rcra_case_ids of this Rcra01.


        :param rcra_case_ids: The rcra_case_ids of this Rcra01.
        :type rcra_case_ids: str
        """
        if rcra_case_ids is None:
            raise ValueError("Invalid value for `rcra_case_ids`, must not be `None`")

        self._rcra_case_ids = rcra_case_ids

    @property
    def rcra_city(self):
        """Gets the rcra_city of this Rcra01.


        :return: The rcra_city of this Rcra01.
        :rtype: str
        """
        return self._rcra_city

    @rcra_city.setter
    def rcra_city(self, rcra_city):
        """Sets the rcra_city of this Rcra01.


        :param rcra_city: The rcra_city of this Rcra01.
        :type rcra_city: str
        """
        if rcra_city is None:
            raise ValueError("Invalid value for `rcra_city`, must not be `None`")

        self._rcra_city = rcra_city

    @property
    def rcra_compl_status(self):
        """Gets the rcra_compl_status of this Rcra01.


        :return: The rcra_compl_status of this Rcra01.
        :rtype: str
        """
        return self._rcra_compl_status

    @rcra_compl_status.setter
    def rcra_compl_status(self, rcra_compl_status):
        """Sets the rcra_compl_status of this Rcra01.


        :param rcra_compl_status: The rcra_compl_status of this Rcra01.
        :type rcra_compl_status: str
        """
        if rcra_compl_status is None:
            raise ValueError("Invalid value for `rcra_compl_status`, must not be `None`")

        self._rcra_compl_status = rcra_compl_status

    @property
    def rcra_county(self):
        """Gets the rcra_county of this Rcra01.


        :return: The rcra_county of this Rcra01.
        :rtype: str
        """
        return self._rcra_county

    @rcra_county.setter
    def rcra_county(self, rcra_county):
        """Sets the rcra_county of this Rcra01.


        :param rcra_county: The rcra_county of this Rcra01.
        :type rcra_county: str
        """
        if rcra_county is None:
            raise ValueError("Invalid value for `rcra_county`, must not be `None`")

        self._rcra_county = rcra_county

    @property
    def rcra_days_last_inspection(self):
        """Gets the rcra_days_last_inspection of this Rcra01.


        :return: The rcra_days_last_inspection of this Rcra01.
        :rtype: str
        """
        return self._rcra_days_last_inspection

    @rcra_days_last_inspection.setter
    def rcra_days_last_inspection(self, rcra_days_last_inspection):
        """Sets the rcra_days_last_inspection of this Rcra01.


        :param rcra_days_last_inspection: The rcra_days_last_inspection of this Rcra01.
        :type rcra_days_last_inspection: str
        """
        if rcra_days_last_inspection is None:
            raise ValueError("Invalid value for `rcra_days_last_inspection`, must not be `None`")

        self._rcra_days_last_inspection = rcra_days_last_inspection

    @property
    def rcraepa_region(self):
        """Gets the rcraepa_region of this Rcra01.


        :return: The rcraepa_region of this Rcra01.
        :rtype: str
        """
        return self._rcraepa_region

    @rcraepa_region.setter
    def rcraepa_region(self, rcraepa_region):
        """Sets the rcraepa_region of this Rcra01.


        :param rcraepa_region: The rcraepa_region of this Rcra01.
        :type rcraepa_region: str
        """
        if rcraepa_region is None:
            raise ValueError("Invalid value for `rcraepa_region`, must not be `None`")

        self._rcraepa_region = rcraepa_region

    @property
    def rcrafips_code(self):
        """Gets the rcrafips_code of this Rcra01.


        :return: The rcrafips_code of this Rcra01.
        :rtype: str
        """
        return self._rcrafips_code

    @rcrafips_code.setter
    def rcrafips_code(self, rcrafips_code):
        """Sets the rcrafips_code of this Rcra01.


        :param rcrafips_code: The rcrafips_code of this Rcra01.
        :type rcrafips_code: str
        """
        if rcrafips_code is None:
            raise ValueError("Invalid value for `rcrafips_code`, must not be `None`")

        self._rcrafips_code = rcrafips_code

    @property
    def rcra_fea_cnt(self):
        """Gets the rcra_fea_cnt of this Rcra01.


        :return: The rcra_fea_cnt of this Rcra01.
        :rtype: str
        """
        return self._rcra_fea_cnt

    @rcra_fea_cnt.setter
    def rcra_fea_cnt(self, rcra_fea_cnt):
        """Sets the rcra_fea_cnt of this Rcra01.


        :param rcra_fea_cnt: The rcra_fea_cnt of this Rcra01.
        :type rcra_fea_cnt: str
        """
        if rcra_fea_cnt is None:
            raise ValueError("Invalid value for `rcra_fea_cnt`, must not be `None`")

        self._rcra_fea_cnt = rcra_fea_cnt

    @property
    def rcraids(self):
        """Gets the rcraids of this Rcra01.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :return: The rcraids of this Rcra01.
        :rtype: str
        """
        return self._rcraids

    @rcraids.setter
    def rcraids(self, rcraids):
        """Sets the rcraids of this Rcra01.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :param rcraids: The rcraids of this Rcra01.
        :type rcraids: str
        """
        if rcraids is None:
            raise ValueError("Invalid value for `rcraids`, must not be `None`")

        self._rcraids = rcraids

    @property
    def rcra_iea_cnt(self):
        """Gets the rcra_iea_cnt of this Rcra01.


        :return: The rcra_iea_cnt of this Rcra01.
        :rtype: str
        """
        return self._rcra_iea_cnt

    @rcra_iea_cnt.setter
    def rcra_iea_cnt(self, rcra_iea_cnt):
        """Sets the rcra_iea_cnt of this Rcra01.


        :param rcra_iea_cnt: The rcra_iea_cnt of this Rcra01.
        :type rcra_iea_cnt: str
        """
        if rcra_iea_cnt is None:
            raise ValueError("Invalid value for `rcra_iea_cnt`, must not be `None`")

        self._rcra_iea_cnt = rcra_iea_cnt

    @property
    def rcra_imp_water_flg(self):
        """Gets the rcra_imp_water_flg of this Rcra01.


        :return: The rcra_imp_water_flg of this Rcra01.
        :rtype: str
        """
        return self._rcra_imp_water_flg

    @rcra_imp_water_flg.setter
    def rcra_imp_water_flg(self, rcra_imp_water_flg):
        """Sets the rcra_imp_water_flg of this Rcra01.


        :param rcra_imp_water_flg: The rcra_imp_water_flg of this Rcra01.
        :type rcra_imp_water_flg: str
        """
        if rcra_imp_water_flg is None:
            raise ValueError("Invalid value for `rcra_imp_water_flg`, must not be `None`")

        self._rcra_imp_water_flg = rcra_imp_water_flg

    @property
    def rcra_indian_cntry_flg(self):
        """Gets the rcra_indian_cntry_flg of this Rcra01.


        :return: The rcra_indian_cntry_flg of this Rcra01.
        :rtype: str
        """
        return self._rcra_indian_cntry_flg

    @rcra_indian_cntry_flg.setter
    def rcra_indian_cntry_flg(self, rcra_indian_cntry_flg):
        """Sets the rcra_indian_cntry_flg of this Rcra01.


        :param rcra_indian_cntry_flg: The rcra_indian_cntry_flg of this Rcra01.
        :type rcra_indian_cntry_flg: str
        """
        if rcra_indian_cntry_flg is None:
            raise ValueError("Invalid value for `rcra_indian_cntry_flg`, must not be `None`")

        self._rcra_indian_cntry_flg = rcra_indian_cntry_flg

    @property
    def rcra_insp_cnt(self):
        """Gets the rcra_insp_cnt of this Rcra01.


        :return: The rcra_insp_cnt of this Rcra01.
        :rtype: str
        """
        return self._rcra_insp_cnt

    @rcra_insp_cnt.setter
    def rcra_insp_cnt(self, rcra_insp_cnt):
        """Sets the rcra_insp_cnt of this Rcra01.


        :param rcra_insp_cnt: The rcra_insp_cnt of this Rcra01.
        :type rcra_insp_cnt: str
        """
        if rcra_insp_cnt is None:
            raise ValueError("Invalid value for `rcra_insp_cnt`, must not be `None`")

        self._rcra_insp_cnt = rcra_insp_cnt

    @property
    def rcra_land_type_code(self):
        """Gets the rcra_land_type_code of this Rcra01.


        :return: The rcra_land_type_code of this Rcra01.
        :rtype: str
        """
        return self._rcra_land_type_code

    @rcra_land_type_code.setter
    def rcra_land_type_code(self, rcra_land_type_code):
        """Sets the rcra_land_type_code of this Rcra01.


        :param rcra_land_type_code: The rcra_land_type_code of this Rcra01.
        :type rcra_land_type_code: str
        """
        if rcra_land_type_code is None:
            raise ValueError("Invalid value for `rcra_land_type_code`, must not be `None`")

        self._rcra_land_type_code = rcra_land_type_code

    @property
    def rcra_last_fea_date(self):
        """Gets the rcra_last_fea_date of this Rcra01.


        :return: The rcra_last_fea_date of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_fea_date

    @rcra_last_fea_date.setter
    def rcra_last_fea_date(self, rcra_last_fea_date):
        """Sets the rcra_last_fea_date of this Rcra01.


        :param rcra_last_fea_date: The rcra_last_fea_date of this Rcra01.
        :type rcra_last_fea_date: str
        """
        if rcra_last_fea_date is None:
            raise ValueError("Invalid value for `rcra_last_fea_date`, must not be `None`")

        self._rcra_last_fea_date = rcra_last_fea_date

    @property
    def rcra_last_fea_date_epa(self):
        """Gets the rcra_last_fea_date_epa of this Rcra01.


        :return: The rcra_last_fea_date_epa of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_fea_date_epa

    @rcra_last_fea_date_epa.setter
    def rcra_last_fea_date_epa(self, rcra_last_fea_date_epa):
        """Sets the rcra_last_fea_date_epa of this Rcra01.


        :param rcra_last_fea_date_epa: The rcra_last_fea_date_epa of this Rcra01.
        :type rcra_last_fea_date_epa: str
        """
        if rcra_last_fea_date_epa is None:
            raise ValueError("Invalid value for `rcra_last_fea_date_epa`, must not be `None`")

        self._rcra_last_fea_date_epa = rcra_last_fea_date_epa

    @property
    def rcra_last_fea_date_state(self):
        """Gets the rcra_last_fea_date_state of this Rcra01.


        :return: The rcra_last_fea_date_state of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_fea_date_state

    @rcra_last_fea_date_state.setter
    def rcra_last_fea_date_state(self, rcra_last_fea_date_state):
        """Sets the rcra_last_fea_date_state of this Rcra01.


        :param rcra_last_fea_date_state: The rcra_last_fea_date_state of this Rcra01.
        :type rcra_last_fea_date_state: str
        """
        if rcra_last_fea_date_state is None:
            raise ValueError("Invalid value for `rcra_last_fea_date_state`, must not be `None`")

        self._rcra_last_fea_date_state = rcra_last_fea_date_state

    @property
    def rcra_last_iea_date(self):
        """Gets the rcra_last_iea_date of this Rcra01.


        :return: The rcra_last_iea_date of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_iea_date

    @rcra_last_iea_date.setter
    def rcra_last_iea_date(self, rcra_last_iea_date):
        """Sets the rcra_last_iea_date of this Rcra01.


        :param rcra_last_iea_date: The rcra_last_iea_date of this Rcra01.
        :type rcra_last_iea_date: str
        """
        if rcra_last_iea_date is None:
            raise ValueError("Invalid value for `rcra_last_iea_date`, must not be `None`")

        self._rcra_last_iea_date = rcra_last_iea_date

    @property
    def rcra_last_iea_date_epa(self):
        """Gets the rcra_last_iea_date_epa of this Rcra01.


        :return: The rcra_last_iea_date_epa of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_iea_date_epa

    @rcra_last_iea_date_epa.setter
    def rcra_last_iea_date_epa(self, rcra_last_iea_date_epa):
        """Sets the rcra_last_iea_date_epa of this Rcra01.


        :param rcra_last_iea_date_epa: The rcra_last_iea_date_epa of this Rcra01.
        :type rcra_last_iea_date_epa: str
        """
        if rcra_last_iea_date_epa is None:
            raise ValueError("Invalid value for `rcra_last_iea_date_epa`, must not be `None`")

        self._rcra_last_iea_date_epa = rcra_last_iea_date_epa

    @property
    def rcra_last_iea_date_state(self):
        """Gets the rcra_last_iea_date_state of this Rcra01.


        :return: The rcra_last_iea_date_state of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_iea_date_state

    @rcra_last_iea_date_state.setter
    def rcra_last_iea_date_state(self, rcra_last_iea_date_state):
        """Sets the rcra_last_iea_date_state of this Rcra01.


        :param rcra_last_iea_date_state: The rcra_last_iea_date_state of this Rcra01.
        :type rcra_last_iea_date_state: str
        """
        if rcra_last_iea_date_state is None:
            raise ValueError("Invalid value for `rcra_last_iea_date_state`, must not be `None`")

        self._rcra_last_iea_date_state = rcra_last_iea_date_state

    @property
    def rcra_last_insp_date_epa(self):
        """Gets the rcra_last_insp_date_epa of this Rcra01.


        :return: The rcra_last_insp_date_epa of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_insp_date_epa

    @rcra_last_insp_date_epa.setter
    def rcra_last_insp_date_epa(self, rcra_last_insp_date_epa):
        """Sets the rcra_last_insp_date_epa of this Rcra01.


        :param rcra_last_insp_date_epa: The rcra_last_insp_date_epa of this Rcra01.
        :type rcra_last_insp_date_epa: str
        """
        if rcra_last_insp_date_epa is None:
            raise ValueError("Invalid value for `rcra_last_insp_date_epa`, must not be `None`")

        self._rcra_last_insp_date_epa = rcra_last_insp_date_epa

    @property
    def rcra_last_insp_date_state(self):
        """Gets the rcra_last_insp_date_state of this Rcra01.


        :return: The rcra_last_insp_date_state of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_insp_date_state

    @rcra_last_insp_date_state.setter
    def rcra_last_insp_date_state(self, rcra_last_insp_date_state):
        """Sets the rcra_last_insp_date_state of this Rcra01.


        :param rcra_last_insp_date_state: The rcra_last_insp_date_state of this Rcra01.
        :type rcra_last_insp_date_state: str
        """
        if rcra_last_insp_date_state is None:
            raise ValueError("Invalid value for `rcra_last_insp_date_state`, must not be `None`")

        self._rcra_last_insp_date_state = rcra_last_insp_date_state

    @property
    def rcra_last_inspection_date(self):
        """Gets the rcra_last_inspection_date of this Rcra01.


        :return: The rcra_last_inspection_date of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_inspection_date

    @rcra_last_inspection_date.setter
    def rcra_last_inspection_date(self, rcra_last_inspection_date):
        """Sets the rcra_last_inspection_date of this Rcra01.


        :param rcra_last_inspection_date: The rcra_last_inspection_date of this Rcra01.
        :type rcra_last_inspection_date: str
        """
        if rcra_last_inspection_date is None:
            raise ValueError("Invalid value for `rcra_last_inspection_date`, must not be `None`")

        self._rcra_last_inspection_date = rcra_last_inspection_date

    @property
    def rcra_last_penalty_date(self):
        """Gets the rcra_last_penalty_date of this Rcra01.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.

        :return: The rcra_last_penalty_date of this Rcra01.
        :rtype: str
        """
        return self._rcra_last_penalty_date

    @rcra_last_penalty_date.setter
    def rcra_last_penalty_date(self, rcra_last_penalty_date):
        """Sets the rcra_last_penalty_date of this Rcra01.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.

        :param rcra_last_penalty_date: The rcra_last_penalty_date of this Rcra01.
        :type rcra_last_penalty_date: str
        """
        if rcra_last_penalty_date is None:
            raise ValueError("Invalid value for `rcra_last_penalty_date`, must not be `None`")

        self._rcra_last_penalty_date = rcra_last_penalty_date

    @property
    def rcra_map_icon(self):
        """Gets the rcra_map_icon of this Rcra01.


        :return: The rcra_map_icon of this Rcra01.
        :rtype: str
        """
        return self._rcra_map_icon

    @rcra_map_icon.setter
    def rcra_map_icon(self, rcra_map_icon):
        """Sets the rcra_map_icon of this Rcra01.


        :param rcra_map_icon: The rcra_map_icon of this Rcra01.
        :type rcra_map_icon: str
        """
        if rcra_map_icon is None:
            raise ValueError("Invalid value for `rcra_map_icon`, must not be `None`")

        self._rcra_map_icon = rcra_map_icon

    @property
    def rcranaics(self):
        """Gets the rcranaics of this Rcra01.

        The RCRA permit's primary North American Industry Classification System (NAICS) Code.

        :return: The rcranaics of this Rcra01.
        :rtype: str
        """
        return self._rcranaics

    @rcranaics.setter
    def rcranaics(self, rcranaics):
        """Sets the rcranaics of this Rcra01.

        The RCRA permit's primary North American Industry Classification System (NAICS) Code.

        :param rcranaics: The rcranaics of this Rcra01.
        :type rcranaics: str
        """
        if rcranaics is None:
            raise ValueError("Invalid value for `rcranaics`, must not be `None`")

        self._rcranaics = rcranaics

    @property
    def rcra_name(self):
        """Gets the rcra_name of this Rcra01.


        :return: The rcra_name of this Rcra01.
        :rtype: str
        """
        return self._rcra_name

    @rcra_name.setter
    def rcra_name(self, rcra_name):
        """Sets the rcra_name of this Rcra01.


        :param rcra_name: The rcra_name of this Rcra01.
        :type rcra_name: str
        """
        if rcra_name is None:
            raise ValueError("Invalid value for `rcra_name`, must not be `None`")

        self._rcra_name = rcra_name

    @property
    def rcra_oldest_open_vio_date(self):
        """Gets the rcra_oldest_open_vio_date of this Rcra01.


        :return: The rcra_oldest_open_vio_date of this Rcra01.
        :rtype: str
        """
        return self._rcra_oldest_open_vio_date

    @rcra_oldest_open_vio_date.setter
    def rcra_oldest_open_vio_date(self, rcra_oldest_open_vio_date):
        """Sets the rcra_oldest_open_vio_date of this Rcra01.


        :param rcra_oldest_open_vio_date: The rcra_oldest_open_vio_date of this Rcra01.
        :type rcra_oldest_open_vio_date: str
        """
        if rcra_oldest_open_vio_date is None:
            raise ValueError("Invalid value for `rcra_oldest_open_vio_date`, must not be `None`")

        self._rcra_oldest_open_vio_date = rcra_oldest_open_vio_date

    @property
    def rcra_penalties(self):
        """Gets the rcra_penalties of this Rcra01.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.

        :return: The rcra_penalties of this Rcra01.
        :rtype: str
        """
        return self._rcra_penalties

    @rcra_penalties.setter
    def rcra_penalties(self, rcra_penalties):
        """Sets the rcra_penalties of this Rcra01.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.

        :param rcra_penalties: The rcra_penalties of this Rcra01.
        :type rcra_penalties: str
        """
        if rcra_penalties is None:
            raise ValueError("Invalid value for `rcra_penalties`, must not be `None`")

        self._rcra_penalties = rcra_penalties

    @property
    def rcra_qtrs_with_nc(self):
        """Gets the rcra_qtrs_with_nc of this Rcra01.

        The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.

        :return: The rcra_qtrs_with_nc of this Rcra01.
        :rtype: str
        """
        return self._rcra_qtrs_with_nc

    @rcra_qtrs_with_nc.setter
    def rcra_qtrs_with_nc(self, rcra_qtrs_with_nc):
        """Sets the rcra_qtrs_with_nc of this Rcra01.

        The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.

        :param rcra_qtrs_with_nc: The rcra_qtrs_with_nc of this Rcra01.
        :type rcra_qtrs_with_nc: str
        """
        if rcra_qtrs_with_nc is None:
            raise ValueError("Invalid value for `rcra_qtrs_with_nc`, must not be `None`")

        self._rcra_qtrs_with_nc = rcra_qtrs_with_nc

    @property
    def rcra_qtrs_with_snc(self):
        """Gets the rcra_qtrs_with_snc of this Rcra01.


        :return: The rcra_qtrs_with_snc of this Rcra01.
        :rtype: str
        """
        return self._rcra_qtrs_with_snc

    @rcra_qtrs_with_snc.setter
    def rcra_qtrs_with_snc(self, rcra_qtrs_with_snc):
        """Sets the rcra_qtrs_with_snc of this Rcra01.


        :param rcra_qtrs_with_snc: The rcra_qtrs_with_snc of this Rcra01.
        :type rcra_qtrs_with_snc: str
        """
        if rcra_qtrs_with_snc is None:
            raise ValueError("Invalid value for `rcra_qtrs_with_snc`, must not be `None`")

        self._rcra_qtrs_with_snc = rcra_qtrs_with_snc

    @property
    def rcrasnc(self):
        """Gets the rcrasnc of this Rcra01.


        :return: The rcrasnc of this Rcra01.
        :rtype: str
        """
        return self._rcrasnc

    @rcrasnc.setter
    def rcrasnc(self, rcrasnc):
        """Sets the rcrasnc of this Rcra01.


        :param rcrasnc: The rcrasnc of this Rcra01.
        :type rcrasnc: str
        """
        if rcrasnc is None:
            raise ValueError("Invalid value for `rcrasnc`, must not be `None`")

        self._rcrasnc = rcrasnc

    @property
    def rcra_state(self):
        """Gets the rcra_state of this Rcra01.


        :return: The rcra_state of this Rcra01.
        :rtype: str
        """
        return self._rcra_state

    @rcra_state.setter
    def rcra_state(self, rcra_state):
        """Sets the rcra_state of this Rcra01.


        :param rcra_state: The rcra_state of this Rcra01.
        :type rcra_state: str
        """
        if rcra_state is None:
            raise ValueError("Invalid value for `rcra_state`, must not be `None`")

        self._rcra_state = rcra_state

    @property
    def rcra_state_district(self):
        """Gets the rcra_state_district of this Rcra01.


        :return: The rcra_state_district of this Rcra01.
        :rtype: str
        """
        return self._rcra_state_district

    @rcra_state_district.setter
    def rcra_state_district(self, rcra_state_district):
        """Sets the rcra_state_district of this Rcra01.


        :param rcra_state_district: The rcra_state_district of this Rcra01.
        :type rcra_state_district: str
        """
        if rcra_state_district is None:
            raise ValueError("Invalid value for `rcra_state_district`, must not be `None`")

        self._rcra_state_district = rcra_state_district

    @property
    def rcra_status(self):
        """Gets the rcra_status of this Rcra01.


        :return: The rcra_status of this Rcra01.
        :rtype: str
        """
        return self._rcra_status

    @rcra_status.setter
    def rcra_status(self, rcra_status):
        """Sets the rcra_status of this Rcra01.


        :param rcra_status: The rcra_status of this Rcra01.
        :type rcra_status: str
        """
        if rcra_status is None:
            raise ValueError("Invalid value for `rcra_status`, must not be `None`")

        self._rcra_status = rcra_status

    @property
    def rcra_street(self):
        """Gets the rcra_street of this Rcra01.


        :return: The rcra_street of this Rcra01.
        :rtype: str
        """
        return self._rcra_street

    @rcra_street.setter
    def rcra_street(self, rcra_street):
        """Sets the rcra_street of this Rcra01.


        :param rcra_street: The rcra_street of this Rcra01.
        :type rcra_street: str
        """
        if rcra_street is None:
            raise ValueError("Invalid value for `rcra_street`, must not be `None`")

        self._rcra_street = rcra_street

    @property
    def rcratr_ibal_land_code(self):
        """Gets the rcratr_ibal_land_code of this Rcra01.


        :return: The rcratr_ibal_land_code of this Rcra01.
        :rtype: str
        """
        return self._rcratr_ibal_land_code

    @rcratr_ibal_land_code.setter
    def rcratr_ibal_land_code(self, rcratr_ibal_land_code):
        """Sets the rcratr_ibal_land_code of this Rcra01.


        :param rcratr_ibal_land_code: The rcratr_ibal_land_code of this Rcra01.
        :type rcratr_ibal_land_code: str
        """
        if rcratr_ibal_land_code is None:
            raise ValueError("Invalid value for `rcratr_ibal_land_code`, must not be `None`")

        self._rcratr_ibal_land_code = rcratr_ibal_land_code

    @property
    def rcra_universe(self):
        """Gets the rcra_universe of this Rcra01.


        :return: The rcra_universe of this Rcra01.
        :rtype: str
        """
        return self._rcra_universe

    @rcra_universe.setter
    def rcra_universe(self, rcra_universe):
        """Sets the rcra_universe of this Rcra01.


        :param rcra_universe: The rcra_universe of this Rcra01.
        :type rcra_universe: str
        """
        if rcra_universe is None:
            raise ValueError("Invalid value for `rcra_universe`, must not be `None`")

        self._rcra_universe = rcra_universe

    @property
    def rcra_violation_types(self):
        """Gets the rcra_violation_types of this Rcra01.


        :return: The rcra_violation_types of this Rcra01.
        :rtype: str
        """
        return self._rcra_violation_types

    @rcra_violation_types.setter
    def rcra_violation_types(self, rcra_violation_types):
        """Sets the rcra_violation_types of this Rcra01.


        :param rcra_violation_types: The rcra_violation_types of this Rcra01.
        :type rcra_violation_types: str
        """
        if rcra_violation_types is None:
            raise ValueError("Invalid value for `rcra_violation_types`, must not be `None`")

        self._rcra_violation_types = rcra_violation_types

    @property
    def rcra_zip(self):
        """Gets the rcra_zip of this Rcra01.


        :return: The rcra_zip of this Rcra01.
        :rtype: str
        """
        return self._rcra_zip

    @rcra_zip.setter
    def rcra_zip(self, rcra_zip):
        """Sets the rcra_zip of this Rcra01.


        :param rcra_zip: The rcra_zip of this Rcra01.
        :type rcra_zip: str
        """
        if rcra_zip is None:
            raise ValueError("Invalid value for `rcra_zip`, must not be `None`")

        self._rcra_zip = rcra_zip

    @property
    def rcr_ainfo_land_type_code(self):
        """Gets the rcr_ainfo_land_type_code of this Rcra01.


        :return: The rcr_ainfo_land_type_code of this Rcra01.
        :rtype: str
        """
        return self._rcr_ainfo_land_type_code

    @rcr_ainfo_land_type_code.setter
    def rcr_ainfo_land_type_code(self, rcr_ainfo_land_type_code):
        """Sets the rcr_ainfo_land_type_code of this Rcra01.


        :param rcr_ainfo_land_type_code: The rcr_ainfo_land_type_code of this Rcra01.
        :type rcr_ainfo_land_type_code: str
        """
        if rcr_ainfo_land_type_code is None:
            raise ValueError("Invalid value for `rcr_ainfo_land_type_code`, must not be `None`")

        self._rcr_ainfo_land_type_code = rcr_ainfo_land_type_code

    @property
    def rcr_ainfo_land_type_desc(self):
        """Gets the rcr_ainfo_land_type_desc of this Rcra01.


        :return: The rcr_ainfo_land_type_desc of this Rcra01.
        :rtype: str
        """
        return self._rcr_ainfo_land_type_desc

    @rcr_ainfo_land_type_desc.setter
    def rcr_ainfo_land_type_desc(self, rcr_ainfo_land_type_desc):
        """Sets the rcr_ainfo_land_type_desc of this Rcra01.


        :param rcr_ainfo_land_type_desc: The rcr_ainfo_land_type_desc of this Rcra01.
        :type rcr_ainfo_land_type_desc: str
        """
        if rcr_ainfo_land_type_desc is None:
            raise ValueError("Invalid value for `rcr_ainfo_land_type_desc`, must not be `None`")

        self._rcr_ainfo_land_type_desc = rcr_ainfo_land_type_desc

    @property
    def reference_point(self):
        """Gets the reference_point of this Rcra01.

        ??

        :return: The reference_point of this Rcra01.
        :rtype: str
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this Rcra01.

        ??

        :param reference_point: The reference_point of this Rcra01.
        :type reference_point: str
        """
        if reference_point is None:
            raise ValueError("Invalid value for `reference_point`, must not be `None`")

        self._reference_point = reference_point

    @property
    def registry_id(self):
        """Gets the registry_id of this Rcra01.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Rcra01.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Rcra01.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Rcra01.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def rmp_ids(self):
        """Gets the rmp_ids of this Rcra01.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :return: The rmp_ids of this Rcra01.
        :rtype: str
        """
        return self._rmp_ids

    @rmp_ids.setter
    def rmp_ids(self, rmp_ids):
        """Sets the rmp_ids of this Rcra01.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :param rmp_ids: The rmp_ids of this Rcra01.
        :type rmp_ids: str
        """
        if rmp_ids is None:
            raise ValueError("Invalid value for `rmp_ids`, must not be `None`")

        self._rmp_ids = rmp_ids

    @property
    def sdwaids(self):
        """Gets the sdwaids of this Rcra01.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :return: The sdwaids of this Rcra01.
        :rtype: str
        """
        return self._sdwaids

    @sdwaids.setter
    def sdwaids(self, sdwaids):
        """Sets the sdwaids of this Rcra01.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :param sdwaids: The sdwaids of this Rcra01.
        :type sdwaids: str
        """
        if sdwaids is None:
            raise ValueError("Invalid value for `sdwaids`, must not be `None`")

        self._sdwaids = sdwaids

    @property
    def score(self):
        """Gets the score of this Rcra01.


        :return: The score of this Rcra01.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Rcra01.


        :param score: The score of this Rcra01.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sems_ids(self):
        """Gets the sems_ids of this Rcra01.


        :return: The sems_ids of this Rcra01.
        :rtype: str
        """
        return self._sems_ids

    @sems_ids.setter
    def sems_ids(self, sems_ids):
        """Sets the sems_ids of this Rcra01.


        :param sems_ids: The sems_ids of this Rcra01.
        :type sems_ids: str
        """
        if sems_ids is None:
            raise ValueError("Invalid value for `sems_ids`, must not be `None`")

        self._sems_ids = sems_ids

    @property
    def source_id(self):
        """Gets the source_id of this Rcra01.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Rcra01.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Rcra01.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Rcra01.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def statute(self):
        """Gets the statute of this Rcra01.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :return: The statute of this Rcra01.
        :rtype: str
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this Rcra01.

        The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA = the Clean Air Act - CWA = the Clean Water Act - RCRA = the Resource Conservation and Recovery Act - EP313 = the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA = the Toxic Substances Control Act - SDWA = the Safe Drinking Water Act

        :param statute: The statute of this Rcra01.
        :type statute: str
        """
        if statute is None:
            raise ValueError("Invalid value for `statute`, must not be `None`")

        self._statute = statute

    @property
    def triids(self):
        """Gets the triids of this Rcra01.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :return: The triids of this Rcra01.
        :rtype: str
        """
        return self._triids

    @triids.setter
    def triids(self, triids):
        """Sets the triids of this Rcra01.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :param triids: The triids of this Rcra01.
        :type triids: str
        """
        if triids is None:
            raise ValueError("Invalid value for `triids`, must not be `None`")

        self._triids = triids

    @property
    def tr_ibal_flag(self):
        """Gets the tr_ibal_flag of this Rcra01.

        A flag indicating that the facility is within a tribal area.

        :return: The tr_ibal_flag of this Rcra01.
        :rtype: str
        """
        return self._tr_ibal_flag

    @tr_ibal_flag.setter
    def tr_ibal_flag(self, tr_ibal_flag):
        """Sets the tr_ibal_flag of this Rcra01.

        A flag indicating that the facility is within a tribal area.

        :param tr_ibal_flag: The tr_ibal_flag of this Rcra01.
        :type tr_ibal_flag: str
        """
        if tr_ibal_flag is None:
            raise ValueError("Invalid value for `tr_ibal_flag`, must not be `None`")

        self._tr_ibal_flag = tr_ibal_flag

    @property
    def tsdf(self):
        """Gets the tsdf of this Rcra01.


        :return: The tsdf of this Rcra01.
        :rtype: str
        """
        return self._tsdf

    @tsdf.setter
    def tsdf(self, tsdf):
        """Sets the tsdf of this Rcra01.


        :param tsdf: The tsdf of this Rcra01.
        :type tsdf: str
        """
        if tsdf is None:
            raise ValueError("Invalid value for `tsdf`, must not be `None`")

        self._tsdf = tsdf

    @property
    def viol_flag(self):
        """Gets the viol_flag of this Rcra01.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :return: The viol_flag of this Rcra01.
        :rtype: str
        """
        return self._viol_flag

    @viol_flag.setter
    def viol_flag(self, viol_flag):
        """Sets the viol_flag of this Rcra01.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :param viol_flag: The viol_flag of this Rcra01.
        :type viol_flag: str
        """
        if viol_flag is None:
            raise ValueError("Invalid value for `viol_flag`, must not be `None`")

        self._viol_flag = viol_flag

    @property
    def web_docs(self):
        """Gets the web_docs of this Rcra01.

        Contains flags that identify what web accessible documents are available for the facility.

        :return: The web_docs of this Rcra01.
        :rtype: str
        """
        return self._web_docs

    @web_docs.setter
    def web_docs(self, web_docs):
        """Sets the web_docs of this Rcra01.

        Contains flags that identify what web accessible documents are available for the facility.

        :param web_docs: The web_docs of this Rcra01.
        :type web_docs: str
        """
        if web_docs is None:
            raise ValueError("Invalid value for `web_docs`, must not be `None`")

        self._web_docs = web_docs
