/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceConservationAndRecoveryActApi_H
#define OAI_OAIResourceConservationAndRecoveryActApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_rcra_rest_services_get_facilities_get_200_response.h"
#include "OAI_rcra_rest_services_get_facility_info_get_200_response.h"
#include "OAI_rcra_rest_services_get_geojson_get_200_response.h"
#include "OAI_rcra_rest_services_get_map_get_200_response.h"
#include "OAI_rcra_rest_services_get_qid_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceConservationAndRecoveryActApi : public QObject {
    Q_OBJECT

public:
    OAIResourceConservationAndRecoveryActApi(const int timeOut = 0);
    ~OAIResourceConservationAndRecoveryActApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_stdist QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_cmps QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_olr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_trichem QString [optional]
    * @param[in]  p_tri_lr_pol QString [optional]
    * @param[in]  p_tri_lr_yr QString [optional]
    * @param[in]  p_tri_lr_amt QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_owc QString [optional]
    * @param[in]  p_owd QString [optional]
    * @param[in]  p_opc QString [optional]
    * @param[in]  p_opd QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_violy double [optional]
    * @param[in]  p_ncv QString [optional]
    * @param[in]  p_fcv QString [optional]
    * @param[in]  p_violt QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void rcraRestServicesGetFacilitiesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cmps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_olr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trichem = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_violy = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ncv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fcv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_stdist QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_cmps QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_olr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_trichem QString [optional]
    * @param[in]  p_tri_lr_pol QString [optional]
    * @param[in]  p_tri_lr_yr QString [optional]
    * @param[in]  p_tri_lr_amt QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_owc QString [optional]
    * @param[in]  p_owd QString [optional]
    * @param[in]  p_opc QString [optional]
    * @param[in]  p_opd QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_violy double [optional]
    * @param[in]  p_ncv QString [optional]
    * @param[in]  p_fcv QString [optional]
    * @param[in]  p_violt QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void rcraRestServicesGetFacilitiesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cmps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_olr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trichem = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_violy = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ncv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fcv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_stdist QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_cmps QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_olr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_trichem QString [optional]
    * @param[in]  p_tri_lr_pol QString [optional]
    * @param[in]  p_tri_lr_yr QString [optional]
    * @param[in]  p_tri_lr_amt QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_owc QString [optional]
    * @param[in]  p_owd QString [optional]
    * @param[in]  p_opc QString [optional]
    * @param[in]  p_opd QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_violy double [optional]
    * @param[in]  p_ncv QString [optional]
    * @param[in]  p_fcv QString [optional]
    * @param[in]  p_violt QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetFacilityInfoGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cmps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_olr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trichem = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_violy = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ncv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fcv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_sa QString [optional]
    * @param[in]  p_sa1 QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_stdist QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_frs QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_ncs QString [optional]
    * @param[in]  p_pen QString [optional]
    * @param[in]  xmin double [optional]
    * @param[in]  ymin double [optional]
    * @param[in]  xmax double [optional]
    * @param[in]  ymax double [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_sic2 QString [optional]
    * @param[in]  p_sic4 QString [optional]
    * @param[in]  p_fa QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_cmps QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_impw QString [optional]
    * @param[in]  p_trep QString [optional]
    * @param[in]  p_olr QString [optional]
    * @param[in]  p_oct QString [optional]
    * @param[in]  p_trichem QString [optional]
    * @param[in]  p_tri_lr_pol QString [optional]
    * @param[in]  p_tri_lr_yr QString [optional]
    * @param[in]  p_tri_lr_amt QString [optional]
    * @param[in]  p_pm QString [optional]
    * @param[in]  p_pd QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_huc QString [optional]
    * @param[in]  p_wbd QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_med QString [optional]
    * @param[in]  p_owc QString [optional]
    * @param[in]  p_owd QString [optional]
    * @param[in]  p_opc QString [optional]
    * @param[in]  p_opd QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly double [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_tribeid double [optional]
    * @param[in]  p_tribename QString [optional]
    * @param[in]  p_tribedist double [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_agoo QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_pityp QString [optional]
    * @param[in]  p_cifdi QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_psncq QString [optional]
    * @param[in]  p_dwd QString [optional]
    * @param[in]  p_violy double [optional]
    * @param[in]  p_ncv QString [optional]
    * @param[in]  p_fcv QString [optional]
    * @param[in]  p_violt QString [optional]
    * @param[in]  p_des QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_pidall QString [optional]
    * @param[in]  p_fac_ico QString [optional]
    * @param[in]  p_icoo QString [optional]
    * @param[in]  p_fac_icos QString [optional]
    * @param[in]  p_ejscreen QString [optional]
    * @param[in]  p_limit_addr QString [optional]
    * @param[in]  p_lat double [optional]
    * @param[in]  p_long double [optional]
    * @param[in]  p_radius double [optional]
    * @param[in]  p_decouple QString [optional]
    * @param[in]  p_ejscreen_over80cnt QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  summarylist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetFacilityInfoPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sa1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_stdist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_frs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ncs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &xmin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymin = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &xmax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ymax = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cmps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_impw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_olr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trichem = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_pol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tri_lr_amt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_huc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_wbd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_med = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_opd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ysly = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribeid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_tribename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_tribedist = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_agoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pityp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cifdi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_psncq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_dwd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_violy = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ncv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fcv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_des = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pidall = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_icoo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_icos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_limit_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_decouple = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ejscreen_over80cnt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &summarylist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetGeojsonGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetGeojsonPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetInfoClustersGet(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  p_qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  p_pretty_print double [optional]
    */
    virtual void rcraRestServicesGetInfoClustersPost(const QString &p_qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void rcraRestServicesGetMapGet(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void rcraRestServicesGetMapPost(const QString &qid, const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void rcraRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void rcraRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void rcraRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetFacilitiesGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetFacilitiesPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetFacilityInfoGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetFacilityInfoPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetGeojsonGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetGeojsonPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetInfoClustersGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetInfoClustersPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void rcraRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void rcraRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void rcraRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void rcraRestServicesGetFacilitiesGetSignal(OAI_rcra_rest_services_get_facilities_get_200_response summary);
    void rcraRestServicesGetFacilitiesPostSignal(OAI_rcra_rest_services_get_facilities_get_200_response summary);
    void rcraRestServicesGetFacilityInfoGetSignal(OAI_rcra_rest_services_get_facility_info_get_200_response summary);
    void rcraRestServicesGetFacilityInfoPostSignal(OAI_rcra_rest_services_get_facility_info_get_200_response summary);
    void rcraRestServicesGetGeojsonGetSignal(OAI_rcra_rest_services_get_geojson_get_200_response summary);
    void rcraRestServicesGetGeojsonPostSignal(OAI_rcra_rest_services_get_geojson_get_200_response summary);
    void rcraRestServicesGetInfoClustersGetSignal(OAIHttpFileElement summary);
    void rcraRestServicesGetInfoClustersPostSignal(OAIHttpFileElement summary);
    void rcraRestServicesGetMapGetSignal(OAI_rcra_rest_services_get_map_get_200_response summary);
    void rcraRestServicesGetMapPostSignal(OAI_rcra_rest_services_get_map_get_200_response summary);
    void rcraRestServicesGetQidGetSignal(OAI_rcra_rest_services_get_qid_get_200_response summary);
    void rcraRestServicesGetQidPostSignal(OAI_rcra_rest_services_get_qid_get_200_response summary);


    void rcraRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rcraRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rcraRestServicesGetFacilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_facilities_get_200_response summary);
    void rcraRestServicesGetFacilitiesPostSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_facilities_get_200_response summary);
    void rcraRestServicesGetFacilityInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_facility_info_get_200_response summary);
    void rcraRestServicesGetFacilityInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_facility_info_get_200_response summary);
    void rcraRestServicesGetGeojsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_geojson_get_200_response summary);
    void rcraRestServicesGetGeojsonPostSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_geojson_get_200_response summary);
    void rcraRestServicesGetInfoClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rcraRestServicesGetInfoClustersPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rcraRestServicesGetMapGetSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_map_get_200_response summary);
    void rcraRestServicesGetMapPostSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_map_get_200_response summary);
    void rcraRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_qid_get_200_response summary);
    void rcraRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_rcra_rest_services_get_qid_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetDownloadGetSignalError() instead")
    void rcraRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetDownloadPostSignalError() instead")
    void rcraRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilitiesGetSignalError() instead")
    void rcraRestServicesGetFacilitiesGetSignalE(OAI_rcra_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilitiesGetSignalError(OAI_rcra_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilitiesPostSignalError() instead")
    void rcraRestServicesGetFacilitiesPostSignalE(OAI_rcra_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilitiesPostSignalError(OAI_rcra_rest_services_get_facilities_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilityInfoGetSignalError() instead")
    void rcraRestServicesGetFacilityInfoGetSignalE(OAI_rcra_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilityInfoGetSignalError(OAI_rcra_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilityInfoPostSignalError() instead")
    void rcraRestServicesGetFacilityInfoPostSignalE(OAI_rcra_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilityInfoPostSignalError(OAI_rcra_rest_services_get_facility_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetGeojsonGetSignalError() instead")
    void rcraRestServicesGetGeojsonGetSignalE(OAI_rcra_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetGeojsonGetSignalError(OAI_rcra_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetGeojsonPostSignalError() instead")
    void rcraRestServicesGetGeojsonPostSignalE(OAI_rcra_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetGeojsonPostSignalError(OAI_rcra_rest_services_get_geojson_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetInfoClustersGetSignalError() instead")
    void rcraRestServicesGetInfoClustersGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetInfoClustersGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetInfoClustersPostSignalError() instead")
    void rcraRestServicesGetInfoClustersPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetInfoClustersPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetMapGetSignalError() instead")
    void rcraRestServicesGetMapGetSignalE(OAI_rcra_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetMapGetSignalError(OAI_rcra_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetMapPostSignalError() instead")
    void rcraRestServicesGetMapPostSignalE(OAI_rcra_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetMapPostSignalError(OAI_rcra_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetQidGetSignalError() instead")
    void rcraRestServicesGetQidGetSignalE(OAI_rcra_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetQidGetSignalError(OAI_rcra_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetQidPostSignalError() instead")
    void rcraRestServicesGetQidPostSignalE(OAI_rcra_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetQidPostSignalError(OAI_rcra_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetDownloadGetSignalErrorFull() instead")
    void rcraRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetDownloadPostSignalErrorFull() instead")
    void rcraRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilitiesGetSignalErrorFull() instead")
    void rcraRestServicesGetFacilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilitiesPostSignalErrorFull() instead")
    void rcraRestServicesGetFacilitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilityInfoGetSignalErrorFull() instead")
    void rcraRestServicesGetFacilityInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilityInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetFacilityInfoPostSignalErrorFull() instead")
    void rcraRestServicesGetFacilityInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetFacilityInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetGeojsonGetSignalErrorFull() instead")
    void rcraRestServicesGetGeojsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetGeojsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetGeojsonPostSignalErrorFull() instead")
    void rcraRestServicesGetGeojsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetGeojsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetInfoClustersGetSignalErrorFull() instead")
    void rcraRestServicesGetInfoClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetInfoClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetInfoClustersPostSignalErrorFull() instead")
    void rcraRestServicesGetInfoClustersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetInfoClustersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetMapGetSignalErrorFull() instead")
    void rcraRestServicesGetMapGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetMapGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetMapPostSignalErrorFull() instead")
    void rcraRestServicesGetMapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetMapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetQidGetSignalErrorFull() instead")
    void rcraRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rcraRestServicesGetQidPostSignalErrorFull() instead")
    void rcraRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rcraRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
