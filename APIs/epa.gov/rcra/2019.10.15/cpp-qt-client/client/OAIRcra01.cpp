/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRcra01.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRcra01::OAIRcra01(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRcra01::OAIRcra01() {
    this->initializeModel();
}

OAIRcra01::~OAIRcra01() {}

void OAIRcra01::initializeModel() {

    m_airids_isSet = false;
    m_airids_isValid = false;

    m_active_lower48_isSet = false;
    m_active_lower48_isValid = false;

    m_cwaids_isSet = false;
    m_cwaids_isValid = false;

    m_calculated_accuracy_meters_isSet = false;
    m_calculated_accuracy_meters_isValid = false;

    m_census_block_group_isSet = false;
    m_census_block_group_isValid = false;

    m_chem_names_rel_land_isSet = false;
    m_chem_names_rel_land_isValid = false;

    m_chesapeake_bay_flag_isSet = false;
    m_chesapeake_bay_flag_isValid = false;

    m_cleanup_action_flag_isSet = false;
    m_cleanup_action_flag_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_curr_sv_flag_isSet = false;
    m_curr_sv_flag_isValid = false;

    m_curr_vio_flag_isSet = false;
    m_curr_vio_flag_isValid = false;

    m_current_vio_cnt_isSet = false;
    m_current_vio_cnt_isValid = false;

    m_date_last_record_review_isSet = false;
    m_date_last_record_review_isValid = false;

    m_epa_system_isSet = false;
    m_epa_system_isValid = false;

    m_ea5yr_flag_isSet = false;
    m_ea5yr_flag_isValid = false;

    m_ejscreen_flag_isSet = false;
    m_ejscreen_flag_isValid = false;

    m_ejscreen_flag_us_isSet = false;
    m_ejscreen_flag_us_isValid = false;

    m_fac_county_name_isSet = false;
    m_fac_county_name_isValid = false;

    m_fac_derived_huc_isSet = false;
    m_fac_derived_huc_isValid = false;

    m_fac_derived_tr_ibes_isSet = false;
    m_fac_derived_tr_ibes_isValid = false;

    m_fac_derived_wbd_isSet = false;
    m_fac_derived_wbd_isValid = false;

    m_fac_derived_wbd_name_isSet = false;
    m_fac_derived_wbd_name_isValid = false;

    m_fac_fips_code_isSet = false;
    m_fac_fips_code_isValid = false;

    m_fac_federal_agency_code_isSet = false;
    m_fac_federal_agency_code_isValid = false;

    m_fac_federal_agency_name_isSet = false;
    m_fac_federal_agency_name_isValid = false;

    m_fac_indian_cntry_flg_isSet = false;
    m_fac_indian_cntry_flg_isValid = false;

    m_fac_indian_spatial_flg_isSet = false;
    m_fac_indian_spatial_flg_isValid = false;

    m_fac_lat_isSet = false;
    m_fac_lat_isValid = false;

    m_fac_long_isSet = false;
    m_fac_long_isValid = false;

    m_fac_map_flg_isSet = false;
    m_fac_map_flg_isValid = false;

    m_fac_map_icon_isSet = false;
    m_fac_map_icon_isValid = false;

    m_fac_percent_minority_isSet = false;
    m_fac_percent_minority_isValid = false;

    m_fac_population_density_isSet = false;
    m_fac_population_density_isValid = false;

    m_fac_sic_codes_isSet = false;
    m_fac_sic_codes_isValid = false;

    m_fac_std_county_name_isSet = false;
    m_fac_std_county_name_isValid = false;

    m_fac_tri_land_releases_isSet = false;
    m_fac_tri_land_releases_isValid = false;

    m_fac_tri_off_site_transfers_isSet = false;
    m_fac_tri_off_site_transfers_isValid = false;

    m_fac_trion_site_releases_isSet = false;
    m_fac_trion_site_releases_isValid = false;

    m_fac_tri_reporter_isSet = false;
    m_fac_tri_reporter_isValid = false;

    m_fac_us_mex_border_flg_isSet = false;
    m_fac_us_mex_border_flg_isValid = false;

    m_infea5yr_flag_isSet = false;
    m_infea5yr_flag_isValid = false;

    m_insp5yr_flag_isSet = false;
    m_insp5yr_flag_isValid = false;

    m_last_violation_date_isSet = false;
    m_last_violation_date_isValid = false;

    m_lower48_isSet = false;
    m_lower48_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_max_pctile_us_isSet = false;
    m_max_pctile_us_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_operator_code_isSet = false;
    m_operator_code_isValid = false;

    m_operator_desc_isSet = false;
    m_operator_desc_isValid = false;

    m_over80_count_us_isSet = false;
    m_over80_count_us_isValid = false;

    m_owner_code_isSet = false;
    m_owner_code_isValid = false;

    m_owner_desc_isSet = false;
    m_owner_desc_isValid = false;

    m_pctile_cancer_us_isSet = false;
    m_pctile_cancer_us_isValid = false;

    m_pctile_dpm_us_isSet = false;
    m_pctile_dpm_us_isValid = false;

    m_pctile_o3_us_isSet = false;
    m_pctile_o3_us_isValid = false;

    m_pctile_pctpre1960_us_isSet = false;
    m_pctile_pctpre1960_us_isValid = false;

    m_pctile_pm_us_isSet = false;
    m_pctile_pm_us_isValid = false;

    m_pctile_proximity_npdesus_isSet = false;
    m_pctile_proximity_npdesus_isValid = false;

    m_pctile_proximity_npl_us_isSet = false;
    m_pctile_proximity_npl_us_isValid = false;

    m_pctile_proximity_rmp_us_isSet = false;
    m_pctile_proximity_rmp_us_isValid = false;

    m_pctile_proximity_tsdf_us_isSet = false;
    m_pctile_proximity_tsdf_us_isValid = false;

    m_pctile_resp_us_isSet = false;
    m_pctile_resp_us_isValid = false;

    m_pctile_traffic_score_us_isSet = false;
    m_pctile_traffic_score_us_isValid = false;

    m_rcra3yr_compl_qtrs_history_isSet = false;
    m_rcra3yr_compl_qtrs_history_isValid = false;

    m_rcra_case_ids_isSet = false;
    m_rcra_case_ids_isValid = false;

    m_rcra_city_isSet = false;
    m_rcra_city_isValid = false;

    m_rcra_compl_status_isSet = false;
    m_rcra_compl_status_isValid = false;

    m_rcra_county_isSet = false;
    m_rcra_county_isValid = false;

    m_rcra_days_last_inspection_isSet = false;
    m_rcra_days_last_inspection_isValid = false;

    m_rcraepa_region_isSet = false;
    m_rcraepa_region_isValid = false;

    m_rcrafips_code_isSet = false;
    m_rcrafips_code_isValid = false;

    m_rcra_fea_cnt_isSet = false;
    m_rcra_fea_cnt_isValid = false;

    m_rcraids_isSet = false;
    m_rcraids_isValid = false;

    m_rcra_iea_cnt_isSet = false;
    m_rcra_iea_cnt_isValid = false;

    m_rcra_imp_water_flg_isSet = false;
    m_rcra_imp_water_flg_isValid = false;

    m_rcra_indian_cntry_flg_isSet = false;
    m_rcra_indian_cntry_flg_isValid = false;

    m_rcra_insp_cnt_isSet = false;
    m_rcra_insp_cnt_isValid = false;

    m_rcra_land_type_code_isSet = false;
    m_rcra_land_type_code_isValid = false;

    m_rcra_last_fea_date_isSet = false;
    m_rcra_last_fea_date_isValid = false;

    m_rcra_last_fea_date_epa_isSet = false;
    m_rcra_last_fea_date_epa_isValid = false;

    m_rcra_last_fea_date_state_isSet = false;
    m_rcra_last_fea_date_state_isValid = false;

    m_rcra_last_iea_date_isSet = false;
    m_rcra_last_iea_date_isValid = false;

    m_rcra_last_iea_date_epa_isSet = false;
    m_rcra_last_iea_date_epa_isValid = false;

    m_rcra_last_iea_date_state_isSet = false;
    m_rcra_last_iea_date_state_isValid = false;

    m_rcra_last_insp_date_epa_isSet = false;
    m_rcra_last_insp_date_epa_isValid = false;

    m_rcra_last_insp_date_state_isSet = false;
    m_rcra_last_insp_date_state_isValid = false;

    m_rcra_last_inspection_date_isSet = false;
    m_rcra_last_inspection_date_isValid = false;

    m_rcra_last_penalty_date_isSet = false;
    m_rcra_last_penalty_date_isValid = false;

    m_rcra_map_icon_isSet = false;
    m_rcra_map_icon_isValid = false;

    m_rcranaics_isSet = false;
    m_rcranaics_isValid = false;

    m_rcra_name_isSet = false;
    m_rcra_name_isValid = false;

    m_rcra_oldest_open_vio_date_isSet = false;
    m_rcra_oldest_open_vio_date_isValid = false;

    m_rcra_penalties_isSet = false;
    m_rcra_penalties_isValid = false;

    m_rcra_qtrs_with_nc_isSet = false;
    m_rcra_qtrs_with_nc_isValid = false;

    m_rcra_qtrs_with_snc_isSet = false;
    m_rcra_qtrs_with_snc_isValid = false;

    m_rcrasnc_isSet = false;
    m_rcrasnc_isValid = false;

    m_rcra_state_isSet = false;
    m_rcra_state_isValid = false;

    m_rcra_state_district_isSet = false;
    m_rcra_state_district_isValid = false;

    m_rcra_status_isSet = false;
    m_rcra_status_isValid = false;

    m_rcra_street_isSet = false;
    m_rcra_street_isValid = false;

    m_rcratr_ibal_land_code_isSet = false;
    m_rcratr_ibal_land_code_isValid = false;

    m_rcra_universe_isSet = false;
    m_rcra_universe_isValid = false;

    m_rcra_violation_types_isSet = false;
    m_rcra_violation_types_isValid = false;

    m_rcra_zip_isSet = false;
    m_rcra_zip_isValid = false;

    m_rcr_ainfo_land_type_code_isSet = false;
    m_rcr_ainfo_land_type_code_isValid = false;

    m_rcr_ainfo_land_type_desc_isSet = false;
    m_rcr_ainfo_land_type_desc_isValid = false;

    m_reference_point_isSet = false;
    m_reference_point_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_rmp_ids_isSet = false;
    m_rmp_ids_isValid = false;

    m_sdwaids_isSet = false;
    m_sdwaids_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sems_ids_isSet = false;
    m_sems_ids_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_statute_isSet = false;
    m_statute_isValid = false;

    m_triids_isSet = false;
    m_triids_isValid = false;

    m_tr_ibal_flag_isSet = false;
    m_tr_ibal_flag_isValid = false;

    m_tsdf_isSet = false;
    m_tsdf_isValid = false;

    m_viol_flag_isSet = false;
    m_viol_flag_isValid = false;

    m_web_docs_isSet = false;
    m_web_docs_isValid = false;
}

void OAIRcra01::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRcra01::fromJsonObject(QJsonObject json) {

    m_airids_isValid = ::OpenAPI::fromJsonValue(m_airids, json[QString("AIRIDs")]);
    m_airids_isSet = !json[QString("AIRIDs")].isNull() && m_airids_isValid;

    m_active_lower48_isValid = ::OpenAPI::fromJsonValue(m_active_lower48, json[QString("ActiveLower48")]);
    m_active_lower48_isSet = !json[QString("ActiveLower48")].isNull() && m_active_lower48_isValid;

    m_cwaids_isValid = ::OpenAPI::fromJsonValue(m_cwaids, json[QString("CWAIDs")]);
    m_cwaids_isSet = !json[QString("CWAIDs")].isNull() && m_cwaids_isValid;

    m_calculated_accuracy_meters_isValid = ::OpenAPI::fromJsonValue(m_calculated_accuracy_meters, json[QString("CalculatedAccuracyMeters")]);
    m_calculated_accuracy_meters_isSet = !json[QString("CalculatedAccuracyMeters")].isNull() && m_calculated_accuracy_meters_isValid;

    m_census_block_group_isValid = ::OpenAPI::fromJsonValue(m_census_block_group, json[QString("CensusBlockGroup")]);
    m_census_block_group_isSet = !json[QString("CensusBlockGroup")].isNull() && m_census_block_group_isValid;

    m_chem_names_rel_land_isValid = ::OpenAPI::fromJsonValue(m_chem_names_rel_land, json[QString("ChemNamesRelLand")]);
    m_chem_names_rel_land_isSet = !json[QString("ChemNamesRelLand")].isNull() && m_chem_names_rel_land_isValid;

    m_chesapeake_bay_flag_isValid = ::OpenAPI::fromJsonValue(m_chesapeake_bay_flag, json[QString("ChesapeakeBayFlag")]);
    m_chesapeake_bay_flag_isSet = !json[QString("ChesapeakeBayFlag")].isNull() && m_chesapeake_bay_flag_isValid;

    m_cleanup_action_flag_isValid = ::OpenAPI::fromJsonValue(m_cleanup_action_flag, json[QString("CleanupActionFlag")]);
    m_cleanup_action_flag_isSet = !json[QString("CleanupActionFlag")].isNull() && m_cleanup_action_flag_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("CollectionMethod")]);
    m_collection_method_isSet = !json[QString("CollectionMethod")].isNull() && m_collection_method_isValid;

    m_curr_sv_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_sv_flag, json[QString("CurrSvFlag")]);
    m_curr_sv_flag_isSet = !json[QString("CurrSvFlag")].isNull() && m_curr_sv_flag_isValid;

    m_curr_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_vio_flag, json[QString("CurrVioFlag")]);
    m_curr_vio_flag_isSet = !json[QString("CurrVioFlag")].isNull() && m_curr_vio_flag_isValid;

    m_current_vio_cnt_isValid = ::OpenAPI::fromJsonValue(m_current_vio_cnt, json[QString("CurrentVioCnt")]);
    m_current_vio_cnt_isSet = !json[QString("CurrentVioCnt")].isNull() && m_current_vio_cnt_isValid;

    m_date_last_record_review_isValid = ::OpenAPI::fromJsonValue(m_date_last_record_review, json[QString("DateLastRecordReview")]);
    m_date_last_record_review_isSet = !json[QString("DateLastRecordReview")].isNull() && m_date_last_record_review_isValid;

    m_epa_system_isValid = ::OpenAPI::fromJsonValue(m_epa_system, json[QString("EPASystem")]);
    m_epa_system_isSet = !json[QString("EPASystem")].isNull() && m_epa_system_isValid;

    m_ea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_ea5yr_flag, json[QString("Ea5yrFlag")]);
    m_ea5yr_flag_isSet = !json[QString("Ea5yrFlag")].isNull() && m_ea5yr_flag_isValid;

    m_ejscreen_flag_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag, json[QString("EjscreenFlag")]);
    m_ejscreen_flag_isSet = !json[QString("EjscreenFlag")].isNull() && m_ejscreen_flag_isValid;

    m_ejscreen_flag_us_isValid = ::OpenAPI::fromJsonValue(m_ejscreen_flag_us, json[QString("EjscreenFlagUs")]);
    m_ejscreen_flag_us_isSet = !json[QString("EjscreenFlagUs")].isNull() && m_ejscreen_flag_us_isValid;

    m_fac_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_county_name, json[QString("FacCountyName")]);
    m_fac_county_name_isSet = !json[QString("FacCountyName")].isNull() && m_fac_county_name_isValid;

    m_fac_derived_huc_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_huc, json[QString("FacDerivedHuc")]);
    m_fac_derived_huc_isSet = !json[QString("FacDerivedHuc")].isNull() && m_fac_derived_huc_isValid;

    m_fac_derived_tr_ibes_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_tr_ibes, json[QString("FacDerivedTRIbes")]);
    m_fac_derived_tr_ibes_isSet = !json[QString("FacDerivedTRIbes")].isNull() && m_fac_derived_tr_ibes_isValid;

    m_fac_derived_wbd_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd, json[QString("FacDerivedWBD")]);
    m_fac_derived_wbd_isSet = !json[QString("FacDerivedWBD")].isNull() && m_fac_derived_wbd_isValid;

    m_fac_derived_wbd_name_isValid = ::OpenAPI::fromJsonValue(m_fac_derived_wbd_name, json[QString("FacDerivedWBDName")]);
    m_fac_derived_wbd_name_isSet = !json[QString("FacDerivedWBDName")].isNull() && m_fac_derived_wbd_name_isValid;

    m_fac_fips_code_isValid = ::OpenAPI::fromJsonValue(m_fac_fips_code, json[QString("FacFIPSCode")]);
    m_fac_fips_code_isSet = !json[QString("FacFIPSCode")].isNull() && m_fac_fips_code_isValid;

    m_fac_federal_agency_code_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_code, json[QString("FacFederalAgencyCode")]);
    m_fac_federal_agency_code_isSet = !json[QString("FacFederalAgencyCode")].isNull() && m_fac_federal_agency_code_isValid;

    m_fac_federal_agency_name_isValid = ::OpenAPI::fromJsonValue(m_fac_federal_agency_name, json[QString("FacFederalAgencyName")]);
    m_fac_federal_agency_name_isSet = !json[QString("FacFederalAgencyName")].isNull() && m_fac_federal_agency_name_isValid;

    m_fac_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_cntry_flg, json[QString("FacIndianCntryFlg")]);
    m_fac_indian_cntry_flg_isSet = !json[QString("FacIndianCntryFlg")].isNull() && m_fac_indian_cntry_flg_isValid;

    m_fac_indian_spatial_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_indian_spatial_flg, json[QString("FacIndianSpatialFlg")]);
    m_fac_indian_spatial_flg_isSet = !json[QString("FacIndianSpatialFlg")].isNull() && m_fac_indian_spatial_flg_isValid;

    m_fac_lat_isValid = ::OpenAPI::fromJsonValue(m_fac_lat, json[QString("FacLat")]);
    m_fac_lat_isSet = !json[QString("FacLat")].isNull() && m_fac_lat_isValid;

    m_fac_long_isValid = ::OpenAPI::fromJsonValue(m_fac_long, json[QString("FacLong")]);
    m_fac_long_isSet = !json[QString("FacLong")].isNull() && m_fac_long_isValid;

    m_fac_map_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_map_flg, json[QString("FacMapFlg")]);
    m_fac_map_flg_isSet = !json[QString("FacMapFlg")].isNull() && m_fac_map_flg_isValid;

    m_fac_map_icon_isValid = ::OpenAPI::fromJsonValue(m_fac_map_icon, json[QString("FacMapIcon")]);
    m_fac_map_icon_isSet = !json[QString("FacMapIcon")].isNull() && m_fac_map_icon_isValid;

    m_fac_percent_minority_isValid = ::OpenAPI::fromJsonValue(m_fac_percent_minority, json[QString("FacPercentMinority")]);
    m_fac_percent_minority_isSet = !json[QString("FacPercentMinority")].isNull() && m_fac_percent_minority_isValid;

    m_fac_population_density_isValid = ::OpenAPI::fromJsonValue(m_fac_population_density, json[QString("FacPopulationDensity")]);
    m_fac_population_density_isSet = !json[QString("FacPopulationDensity")].isNull() && m_fac_population_density_isValid;

    m_fac_sic_codes_isValid = ::OpenAPI::fromJsonValue(m_fac_sic_codes, json[QString("FacSICCodes")]);
    m_fac_sic_codes_isSet = !json[QString("FacSICCodes")].isNull() && m_fac_sic_codes_isValid;

    m_fac_std_county_name_isValid = ::OpenAPI::fromJsonValue(m_fac_std_county_name, json[QString("FacStdCountyName")]);
    m_fac_std_county_name_isSet = !json[QString("FacStdCountyName")].isNull() && m_fac_std_county_name_isValid;

    m_fac_tri_land_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_land_releases, json[QString("FacTRILandReleases")]);
    m_fac_tri_land_releases_isSet = !json[QString("FacTRILandReleases")].isNull() && m_fac_tri_land_releases_isValid;

    m_fac_tri_off_site_transfers_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_off_site_transfers, json[QString("FacTRIOffSiteTransfers")]);
    m_fac_tri_off_site_transfers_isSet = !json[QString("FacTRIOffSiteTransfers")].isNull() && m_fac_tri_off_site_transfers_isValid;

    m_fac_trion_site_releases_isValid = ::OpenAPI::fromJsonValue(m_fac_trion_site_releases, json[QString("FacTRIOnSiteReleases")]);
    m_fac_trion_site_releases_isSet = !json[QString("FacTRIOnSiteReleases")].isNull() && m_fac_trion_site_releases_isValid;

    m_fac_tri_reporter_isValid = ::OpenAPI::fromJsonValue(m_fac_tri_reporter, json[QString("FacTRIReporter")]);
    m_fac_tri_reporter_isSet = !json[QString("FacTRIReporter")].isNull() && m_fac_tri_reporter_isValid;

    m_fac_us_mex_border_flg_isValid = ::OpenAPI::fromJsonValue(m_fac_us_mex_border_flg, json[QString("FacUsMexBorderFlg")]);
    m_fac_us_mex_border_flg_isSet = !json[QString("FacUsMexBorderFlg")].isNull() && m_fac_us_mex_border_flg_isValid;

    m_infea5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_infea5yr_flag, json[QString("Infea5yrFlag")]);
    m_infea5yr_flag_isSet = !json[QString("Infea5yrFlag")].isNull() && m_infea5yr_flag_isValid;

    m_insp5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_insp5yr_flag, json[QString("Insp5yrFlag")]);
    m_insp5yr_flag_isSet = !json[QString("Insp5yrFlag")].isNull() && m_insp5yr_flag_isValid;

    m_last_violation_date_isValid = ::OpenAPI::fromJsonValue(m_last_violation_date, json[QString("LastViolationDate")]);
    m_last_violation_date_isSet = !json[QString("LastViolationDate")].isNull() && m_last_violation_date_isValid;

    m_lower48_isValid = ::OpenAPI::fromJsonValue(m_lower48, json[QString("Lower48")]);
    m_lower48_isSet = !json[QString("Lower48")].isNull() && m_lower48_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("Map")]);
    m_map_isSet = !json[QString("Map")].isNull() && m_map_isValid;

    m_max_pctile_us_isValid = ::OpenAPI::fromJsonValue(m_max_pctile_us, json[QString("MaxPctileUs")]);
    m_max_pctile_us_isSet = !json[QString("MaxPctileUs")].isNull() && m_max_pctile_us_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_operator_code_isValid = ::OpenAPI::fromJsonValue(m_operator_code, json[QString("OperatorCode")]);
    m_operator_code_isSet = !json[QString("OperatorCode")].isNull() && m_operator_code_isValid;

    m_operator_desc_isValid = ::OpenAPI::fromJsonValue(m_operator_desc, json[QString("OperatorDesc")]);
    m_operator_desc_isSet = !json[QString("OperatorDesc")].isNull() && m_operator_desc_isValid;

    m_over80_count_us_isValid = ::OpenAPI::fromJsonValue(m_over80_count_us, json[QString("Over80CountUs")]);
    m_over80_count_us_isSet = !json[QString("Over80CountUs")].isNull() && m_over80_count_us_isValid;

    m_owner_code_isValid = ::OpenAPI::fromJsonValue(m_owner_code, json[QString("OwnerCode")]);
    m_owner_code_isSet = !json[QString("OwnerCode")].isNull() && m_owner_code_isValid;

    m_owner_desc_isValid = ::OpenAPI::fromJsonValue(m_owner_desc, json[QString("OwnerDesc")]);
    m_owner_desc_isSet = !json[QString("OwnerDesc")].isNull() && m_owner_desc_isValid;

    m_pctile_cancer_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_cancer_us, json[QString("PctileCancerUs")]);
    m_pctile_cancer_us_isSet = !json[QString("PctileCancerUs")].isNull() && m_pctile_cancer_us_isValid;

    m_pctile_dpm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_dpm_us, json[QString("PctileDpmUs")]);
    m_pctile_dpm_us_isSet = !json[QString("PctileDpmUs")].isNull() && m_pctile_dpm_us_isValid;

    m_pctile_o3_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_o3_us, json[QString("PctileO3Us")]);
    m_pctile_o3_us_isSet = !json[QString("PctileO3Us")].isNull() && m_pctile_o3_us_isValid;

    m_pctile_pctpre1960_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pctpre1960_us, json[QString("PctilePctpre1960Us")]);
    m_pctile_pctpre1960_us_isSet = !json[QString("PctilePctpre1960Us")].isNull() && m_pctile_pctpre1960_us_isValid;

    m_pctile_pm_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_pm_us, json[QString("PctilePmUs")]);
    m_pctile_pm_us_isSet = !json[QString("PctilePmUs")].isNull() && m_pctile_pm_us_isValid;

    m_pctile_proximity_npdesus_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npdesus, json[QString("PctileProximityNPDESUs")]);
    m_pctile_proximity_npdesus_isSet = !json[QString("PctileProximityNPDESUs")].isNull() && m_pctile_proximity_npdesus_isValid;

    m_pctile_proximity_npl_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_npl_us, json[QString("PctileProximityNplUs")]);
    m_pctile_proximity_npl_us_isSet = !json[QString("PctileProximityNplUs")].isNull() && m_pctile_proximity_npl_us_isValid;

    m_pctile_proximity_rmp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_rmp_us, json[QString("PctileProximityRmpUs")]);
    m_pctile_proximity_rmp_us_isSet = !json[QString("PctileProximityRmpUs")].isNull() && m_pctile_proximity_rmp_us_isValid;

    m_pctile_proximity_tsdf_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_proximity_tsdf_us, json[QString("PctileProximityTsdfUs")]);
    m_pctile_proximity_tsdf_us_isSet = !json[QString("PctileProximityTsdfUs")].isNull() && m_pctile_proximity_tsdf_us_isValid;

    m_pctile_resp_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_resp_us, json[QString("PctileRespUs")]);
    m_pctile_resp_us_isSet = !json[QString("PctileRespUs")].isNull() && m_pctile_resp_us_isValid;

    m_pctile_traffic_score_us_isValid = ::OpenAPI::fromJsonValue(m_pctile_traffic_score_us, json[QString("PctileTrafficScoreUs")]);
    m_pctile_traffic_score_us_isSet = !json[QString("PctileTrafficScoreUs")].isNull() && m_pctile_traffic_score_us_isValid;

    m_rcra3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_rcra3yr_compl_qtrs_history, json[QString("RCRA3yrComplQtrsHistory")]);
    m_rcra3yr_compl_qtrs_history_isSet = !json[QString("RCRA3yrComplQtrsHistory")].isNull() && m_rcra3yr_compl_qtrs_history_isValid;

    m_rcra_case_ids_isValid = ::OpenAPI::fromJsonValue(m_rcra_case_ids, json[QString("RCRACaseIDs")]);
    m_rcra_case_ids_isSet = !json[QString("RCRACaseIDs")].isNull() && m_rcra_case_ids_isValid;

    m_rcra_city_isValid = ::OpenAPI::fromJsonValue(m_rcra_city, json[QString("RCRACity")]);
    m_rcra_city_isSet = !json[QString("RCRACity")].isNull() && m_rcra_city_isValid;

    m_rcra_compl_status_isValid = ::OpenAPI::fromJsonValue(m_rcra_compl_status, json[QString("RCRAComplStatus")]);
    m_rcra_compl_status_isSet = !json[QString("RCRAComplStatus")].isNull() && m_rcra_compl_status_isValid;

    m_rcra_county_isValid = ::OpenAPI::fromJsonValue(m_rcra_county, json[QString("RCRACounty")]);
    m_rcra_county_isSet = !json[QString("RCRACounty")].isNull() && m_rcra_county_isValid;

    m_rcra_days_last_inspection_isValid = ::OpenAPI::fromJsonValue(m_rcra_days_last_inspection, json[QString("RCRADaysLastInspection")]);
    m_rcra_days_last_inspection_isSet = !json[QString("RCRADaysLastInspection")].isNull() && m_rcra_days_last_inspection_isValid;

    m_rcraepa_region_isValid = ::OpenAPI::fromJsonValue(m_rcraepa_region, json[QString("RCRAEPARegion")]);
    m_rcraepa_region_isSet = !json[QString("RCRAEPARegion")].isNull() && m_rcraepa_region_isValid;

    m_rcrafips_code_isValid = ::OpenAPI::fromJsonValue(m_rcrafips_code, json[QString("RCRAFIPSCode")]);
    m_rcrafips_code_isSet = !json[QString("RCRAFIPSCode")].isNull() && m_rcrafips_code_isValid;

    m_rcra_fea_cnt_isValid = ::OpenAPI::fromJsonValue(m_rcra_fea_cnt, json[QString("RCRAFeaCnt")]);
    m_rcra_fea_cnt_isSet = !json[QString("RCRAFeaCnt")].isNull() && m_rcra_fea_cnt_isValid;

    m_rcraids_isValid = ::OpenAPI::fromJsonValue(m_rcraids, json[QString("RCRAIDs")]);
    m_rcraids_isSet = !json[QString("RCRAIDs")].isNull() && m_rcraids_isValid;

    m_rcra_iea_cnt_isValid = ::OpenAPI::fromJsonValue(m_rcra_iea_cnt, json[QString("RCRAIeaCnt")]);
    m_rcra_iea_cnt_isSet = !json[QString("RCRAIeaCnt")].isNull() && m_rcra_iea_cnt_isValid;

    m_rcra_imp_water_flg_isValid = ::OpenAPI::fromJsonValue(m_rcra_imp_water_flg, json[QString("RCRAImpWaterFlg")]);
    m_rcra_imp_water_flg_isSet = !json[QString("RCRAImpWaterFlg")].isNull() && m_rcra_imp_water_flg_isValid;

    m_rcra_indian_cntry_flg_isValid = ::OpenAPI::fromJsonValue(m_rcra_indian_cntry_flg, json[QString("RCRAIndianCntryFlg")]);
    m_rcra_indian_cntry_flg_isSet = !json[QString("RCRAIndianCntryFlg")].isNull() && m_rcra_indian_cntry_flg_isValid;

    m_rcra_insp_cnt_isValid = ::OpenAPI::fromJsonValue(m_rcra_insp_cnt, json[QString("RCRAInspCnt")]);
    m_rcra_insp_cnt_isSet = !json[QString("RCRAInspCnt")].isNull() && m_rcra_insp_cnt_isValid;

    m_rcra_land_type_code_isValid = ::OpenAPI::fromJsonValue(m_rcra_land_type_code, json[QString("RCRALandTypeCode")]);
    m_rcra_land_type_code_isSet = !json[QString("RCRALandTypeCode")].isNull() && m_rcra_land_type_code_isValid;

    m_rcra_last_fea_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_fea_date, json[QString("RCRALastFeaDate")]);
    m_rcra_last_fea_date_isSet = !json[QString("RCRALastFeaDate")].isNull() && m_rcra_last_fea_date_isValid;

    m_rcra_last_fea_date_epa_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_fea_date_epa, json[QString("RCRALastFeaDateEPA")]);
    m_rcra_last_fea_date_epa_isSet = !json[QString("RCRALastFeaDateEPA")].isNull() && m_rcra_last_fea_date_epa_isValid;

    m_rcra_last_fea_date_state_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_fea_date_state, json[QString("RCRALastFeaDateState")]);
    m_rcra_last_fea_date_state_isSet = !json[QString("RCRALastFeaDateState")].isNull() && m_rcra_last_fea_date_state_isValid;

    m_rcra_last_iea_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_iea_date, json[QString("RCRALastIeaDate")]);
    m_rcra_last_iea_date_isSet = !json[QString("RCRALastIeaDate")].isNull() && m_rcra_last_iea_date_isValid;

    m_rcra_last_iea_date_epa_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_iea_date_epa, json[QString("RCRALastIeaDateEPA")]);
    m_rcra_last_iea_date_epa_isSet = !json[QString("RCRALastIeaDateEPA")].isNull() && m_rcra_last_iea_date_epa_isValid;

    m_rcra_last_iea_date_state_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_iea_date_state, json[QString("RCRALastIeaDateState")]);
    m_rcra_last_iea_date_state_isSet = !json[QString("RCRALastIeaDateState")].isNull() && m_rcra_last_iea_date_state_isValid;

    m_rcra_last_insp_date_epa_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_insp_date_epa, json[QString("RCRALastInspDateEPA")]);
    m_rcra_last_insp_date_epa_isSet = !json[QString("RCRALastInspDateEPA")].isNull() && m_rcra_last_insp_date_epa_isValid;

    m_rcra_last_insp_date_state_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_insp_date_state, json[QString("RCRALastInspDateState")]);
    m_rcra_last_insp_date_state_isSet = !json[QString("RCRALastInspDateState")].isNull() && m_rcra_last_insp_date_state_isValid;

    m_rcra_last_inspection_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_inspection_date, json[QString("RCRALastInspectionDate")]);
    m_rcra_last_inspection_date_isSet = !json[QString("RCRALastInspectionDate")].isNull() && m_rcra_last_inspection_date_isValid;

    m_rcra_last_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_last_penalty_date, json[QString("RCRALastPenaltyDate")]);
    m_rcra_last_penalty_date_isSet = !json[QString("RCRALastPenaltyDate")].isNull() && m_rcra_last_penalty_date_isValid;

    m_rcra_map_icon_isValid = ::OpenAPI::fromJsonValue(m_rcra_map_icon, json[QString("RCRAMapIcon")]);
    m_rcra_map_icon_isSet = !json[QString("RCRAMapIcon")].isNull() && m_rcra_map_icon_isValid;

    m_rcranaics_isValid = ::OpenAPI::fromJsonValue(m_rcranaics, json[QString("RCRANAICS")]);
    m_rcranaics_isSet = !json[QString("RCRANAICS")].isNull() && m_rcranaics_isValid;

    m_rcra_name_isValid = ::OpenAPI::fromJsonValue(m_rcra_name, json[QString("RCRAName")]);
    m_rcra_name_isSet = !json[QString("RCRAName")].isNull() && m_rcra_name_isValid;

    m_rcra_oldest_open_vio_date_isValid = ::OpenAPI::fromJsonValue(m_rcra_oldest_open_vio_date, json[QString("RCRAOldestOpenVioDate")]);
    m_rcra_oldest_open_vio_date_isSet = !json[QString("RCRAOldestOpenVioDate")].isNull() && m_rcra_oldest_open_vio_date_isValid;

    m_rcra_penalties_isValid = ::OpenAPI::fromJsonValue(m_rcra_penalties, json[QString("RCRAPenalties")]);
    m_rcra_penalties_isSet = !json[QString("RCRAPenalties")].isNull() && m_rcra_penalties_isValid;

    m_rcra_qtrs_with_nc_isValid = ::OpenAPI::fromJsonValue(m_rcra_qtrs_with_nc, json[QString("RCRAQtrsWithNC")]);
    m_rcra_qtrs_with_nc_isSet = !json[QString("RCRAQtrsWithNC")].isNull() && m_rcra_qtrs_with_nc_isValid;

    m_rcra_qtrs_with_snc_isValid = ::OpenAPI::fromJsonValue(m_rcra_qtrs_with_snc, json[QString("RCRAQtrsWithSNC")]);
    m_rcra_qtrs_with_snc_isSet = !json[QString("RCRAQtrsWithSNC")].isNull() && m_rcra_qtrs_with_snc_isValid;

    m_rcrasnc_isValid = ::OpenAPI::fromJsonValue(m_rcrasnc, json[QString("RCRASNC")]);
    m_rcrasnc_isSet = !json[QString("RCRASNC")].isNull() && m_rcrasnc_isValid;

    m_rcra_state_isValid = ::OpenAPI::fromJsonValue(m_rcra_state, json[QString("RCRAState")]);
    m_rcra_state_isSet = !json[QString("RCRAState")].isNull() && m_rcra_state_isValid;

    m_rcra_state_district_isValid = ::OpenAPI::fromJsonValue(m_rcra_state_district, json[QString("RCRAStateDistrict")]);
    m_rcra_state_district_isSet = !json[QString("RCRAStateDistrict")].isNull() && m_rcra_state_district_isValid;

    m_rcra_status_isValid = ::OpenAPI::fromJsonValue(m_rcra_status, json[QString("RCRAStatus")]);
    m_rcra_status_isSet = !json[QString("RCRAStatus")].isNull() && m_rcra_status_isValid;

    m_rcra_street_isValid = ::OpenAPI::fromJsonValue(m_rcra_street, json[QString("RCRAStreet")]);
    m_rcra_street_isSet = !json[QString("RCRAStreet")].isNull() && m_rcra_street_isValid;

    m_rcratr_ibal_land_code_isValid = ::OpenAPI::fromJsonValue(m_rcratr_ibal_land_code, json[QString("RCRATRIbalLandCode")]);
    m_rcratr_ibal_land_code_isSet = !json[QString("RCRATRIbalLandCode")].isNull() && m_rcratr_ibal_land_code_isValid;

    m_rcra_universe_isValid = ::OpenAPI::fromJsonValue(m_rcra_universe, json[QString("RCRAUniverse")]);
    m_rcra_universe_isSet = !json[QString("RCRAUniverse")].isNull() && m_rcra_universe_isValid;

    m_rcra_violation_types_isValid = ::OpenAPI::fromJsonValue(m_rcra_violation_types, json[QString("RCRAViolationTypes")]);
    m_rcra_violation_types_isSet = !json[QString("RCRAViolationTypes")].isNull() && m_rcra_violation_types_isValid;

    m_rcra_zip_isValid = ::OpenAPI::fromJsonValue(m_rcra_zip, json[QString("RCRAZip")]);
    m_rcra_zip_isSet = !json[QString("RCRAZip")].isNull() && m_rcra_zip_isValid;

    m_rcr_ainfo_land_type_code_isValid = ::OpenAPI::fromJsonValue(m_rcr_ainfo_land_type_code, json[QString("RCRAinfoLandTypeCode")]);
    m_rcr_ainfo_land_type_code_isSet = !json[QString("RCRAinfoLandTypeCode")].isNull() && m_rcr_ainfo_land_type_code_isValid;

    m_rcr_ainfo_land_type_desc_isValid = ::OpenAPI::fromJsonValue(m_rcr_ainfo_land_type_desc, json[QString("RCRAinfoLandTypeDesc")]);
    m_rcr_ainfo_land_type_desc_isSet = !json[QString("RCRAinfoLandTypeDesc")].isNull() && m_rcr_ainfo_land_type_desc_isValid;

    m_reference_point_isValid = ::OpenAPI::fromJsonValue(m_reference_point, json[QString("ReferencePoint")]);
    m_reference_point_isSet = !json[QString("ReferencePoint")].isNull() && m_reference_point_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_rmp_ids_isValid = ::OpenAPI::fromJsonValue(m_rmp_ids, json[QString("RmpIDs")]);
    m_rmp_ids_isSet = !json[QString("RmpIDs")].isNull() && m_rmp_ids_isValid;

    m_sdwaids_isValid = ::OpenAPI::fromJsonValue(m_sdwaids, json[QString("SDWAIDs")]);
    m_sdwaids_isSet = !json[QString("SDWAIDs")].isNull() && m_sdwaids_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_sems_ids_isValid = ::OpenAPI::fromJsonValue(m_sems_ids, json[QString("SemsIDs")]);
    m_sems_ids_isSet = !json[QString("SemsIDs")].isNull() && m_sems_ids_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_statute_isValid = ::OpenAPI::fromJsonValue(m_statute, json[QString("Statute")]);
    m_statute_isSet = !json[QString("Statute")].isNull() && m_statute_isValid;

    m_triids_isValid = ::OpenAPI::fromJsonValue(m_triids, json[QString("TRIIDs")]);
    m_triids_isSet = !json[QString("TRIIDs")].isNull() && m_triids_isValid;

    m_tr_ibal_flag_isValid = ::OpenAPI::fromJsonValue(m_tr_ibal_flag, json[QString("TRIbalFlag")]);
    m_tr_ibal_flag_isSet = !json[QString("TRIbalFlag")].isNull() && m_tr_ibal_flag_isValid;

    m_tsdf_isValid = ::OpenAPI::fromJsonValue(m_tsdf, json[QString("Tsdf")]);
    m_tsdf_isSet = !json[QString("Tsdf")].isNull() && m_tsdf_isValid;

    m_viol_flag_isValid = ::OpenAPI::fromJsonValue(m_viol_flag, json[QString("ViolFlag")]);
    m_viol_flag_isSet = !json[QString("ViolFlag")].isNull() && m_viol_flag_isValid;

    m_web_docs_isValid = ::OpenAPI::fromJsonValue(m_web_docs, json[QString("WebDocs")]);
    m_web_docs_isSet = !json[QString("WebDocs")].isNull() && m_web_docs_isValid;
}

QString OAIRcra01::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRcra01::asJsonObject() const {
    QJsonObject obj;
    if (m_airids_isSet) {
        obj.insert(QString("AIRIDs"), ::OpenAPI::toJsonValue(m_airids));
    }
    if (m_active_lower48_isSet) {
        obj.insert(QString("ActiveLower48"), ::OpenAPI::toJsonValue(m_active_lower48));
    }
    if (m_cwaids_isSet) {
        obj.insert(QString("CWAIDs"), ::OpenAPI::toJsonValue(m_cwaids));
    }
    if (m_calculated_accuracy_meters_isSet) {
        obj.insert(QString("CalculatedAccuracyMeters"), ::OpenAPI::toJsonValue(m_calculated_accuracy_meters));
    }
    if (m_census_block_group_isSet) {
        obj.insert(QString("CensusBlockGroup"), ::OpenAPI::toJsonValue(m_census_block_group));
    }
    if (m_chem_names_rel_land_isSet) {
        obj.insert(QString("ChemNamesRelLand"), ::OpenAPI::toJsonValue(m_chem_names_rel_land));
    }
    if (m_chesapeake_bay_flag_isSet) {
        obj.insert(QString("ChesapeakeBayFlag"), ::OpenAPI::toJsonValue(m_chesapeake_bay_flag));
    }
    if (m_cleanup_action_flag_isSet) {
        obj.insert(QString("CleanupActionFlag"), ::OpenAPI::toJsonValue(m_cleanup_action_flag));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("CollectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_curr_sv_flag_isSet) {
        obj.insert(QString("CurrSvFlag"), ::OpenAPI::toJsonValue(m_curr_sv_flag));
    }
    if (m_curr_vio_flag_isSet) {
        obj.insert(QString("CurrVioFlag"), ::OpenAPI::toJsonValue(m_curr_vio_flag));
    }
    if (m_current_vio_cnt_isSet) {
        obj.insert(QString("CurrentVioCnt"), ::OpenAPI::toJsonValue(m_current_vio_cnt));
    }
    if (m_date_last_record_review_isSet) {
        obj.insert(QString("DateLastRecordReview"), ::OpenAPI::toJsonValue(m_date_last_record_review));
    }
    if (m_epa_system_isSet) {
        obj.insert(QString("EPASystem"), ::OpenAPI::toJsonValue(m_epa_system));
    }
    if (m_ea5yr_flag_isSet) {
        obj.insert(QString("Ea5yrFlag"), ::OpenAPI::toJsonValue(m_ea5yr_flag));
    }
    if (m_ejscreen_flag_isSet) {
        obj.insert(QString("EjscreenFlag"), ::OpenAPI::toJsonValue(m_ejscreen_flag));
    }
    if (m_ejscreen_flag_us_isSet) {
        obj.insert(QString("EjscreenFlagUs"), ::OpenAPI::toJsonValue(m_ejscreen_flag_us));
    }
    if (m_fac_county_name_isSet) {
        obj.insert(QString("FacCountyName"), ::OpenAPI::toJsonValue(m_fac_county_name));
    }
    if (m_fac_derived_huc_isSet) {
        obj.insert(QString("FacDerivedHuc"), ::OpenAPI::toJsonValue(m_fac_derived_huc));
    }
    if (m_fac_derived_tr_ibes_isSet) {
        obj.insert(QString("FacDerivedTRIbes"), ::OpenAPI::toJsonValue(m_fac_derived_tr_ibes));
    }
    if (m_fac_derived_wbd_isSet) {
        obj.insert(QString("FacDerivedWBD"), ::OpenAPI::toJsonValue(m_fac_derived_wbd));
    }
    if (m_fac_derived_wbd_name_isSet) {
        obj.insert(QString("FacDerivedWBDName"), ::OpenAPI::toJsonValue(m_fac_derived_wbd_name));
    }
    if (m_fac_fips_code_isSet) {
        obj.insert(QString("FacFIPSCode"), ::OpenAPI::toJsonValue(m_fac_fips_code));
    }
    if (m_fac_federal_agency_code_isSet) {
        obj.insert(QString("FacFederalAgencyCode"), ::OpenAPI::toJsonValue(m_fac_federal_agency_code));
    }
    if (m_fac_federal_agency_name_isSet) {
        obj.insert(QString("FacFederalAgencyName"), ::OpenAPI::toJsonValue(m_fac_federal_agency_name));
    }
    if (m_fac_indian_cntry_flg_isSet) {
        obj.insert(QString("FacIndianCntryFlg"), ::OpenAPI::toJsonValue(m_fac_indian_cntry_flg));
    }
    if (m_fac_indian_spatial_flg_isSet) {
        obj.insert(QString("FacIndianSpatialFlg"), ::OpenAPI::toJsonValue(m_fac_indian_spatial_flg));
    }
    if (m_fac_lat_isSet) {
        obj.insert(QString("FacLat"), ::OpenAPI::toJsonValue(m_fac_lat));
    }
    if (m_fac_long_isSet) {
        obj.insert(QString("FacLong"), ::OpenAPI::toJsonValue(m_fac_long));
    }
    if (m_fac_map_flg_isSet) {
        obj.insert(QString("FacMapFlg"), ::OpenAPI::toJsonValue(m_fac_map_flg));
    }
    if (m_fac_map_icon_isSet) {
        obj.insert(QString("FacMapIcon"), ::OpenAPI::toJsonValue(m_fac_map_icon));
    }
    if (m_fac_percent_minority_isSet) {
        obj.insert(QString("FacPercentMinority"), ::OpenAPI::toJsonValue(m_fac_percent_minority));
    }
    if (m_fac_population_density_isSet) {
        obj.insert(QString("FacPopulationDensity"), ::OpenAPI::toJsonValue(m_fac_population_density));
    }
    if (m_fac_sic_codes_isSet) {
        obj.insert(QString("FacSICCodes"), ::OpenAPI::toJsonValue(m_fac_sic_codes));
    }
    if (m_fac_std_county_name_isSet) {
        obj.insert(QString("FacStdCountyName"), ::OpenAPI::toJsonValue(m_fac_std_county_name));
    }
    if (m_fac_tri_land_releases_isSet) {
        obj.insert(QString("FacTRILandReleases"), ::OpenAPI::toJsonValue(m_fac_tri_land_releases));
    }
    if (m_fac_tri_off_site_transfers_isSet) {
        obj.insert(QString("FacTRIOffSiteTransfers"), ::OpenAPI::toJsonValue(m_fac_tri_off_site_transfers));
    }
    if (m_fac_trion_site_releases_isSet) {
        obj.insert(QString("FacTRIOnSiteReleases"), ::OpenAPI::toJsonValue(m_fac_trion_site_releases));
    }
    if (m_fac_tri_reporter_isSet) {
        obj.insert(QString("FacTRIReporter"), ::OpenAPI::toJsonValue(m_fac_tri_reporter));
    }
    if (m_fac_us_mex_border_flg_isSet) {
        obj.insert(QString("FacUsMexBorderFlg"), ::OpenAPI::toJsonValue(m_fac_us_mex_border_flg));
    }
    if (m_infea5yr_flag_isSet) {
        obj.insert(QString("Infea5yrFlag"), ::OpenAPI::toJsonValue(m_infea5yr_flag));
    }
    if (m_insp5yr_flag_isSet) {
        obj.insert(QString("Insp5yrFlag"), ::OpenAPI::toJsonValue(m_insp5yr_flag));
    }
    if (m_last_violation_date_isSet) {
        obj.insert(QString("LastViolationDate"), ::OpenAPI::toJsonValue(m_last_violation_date));
    }
    if (m_lower48_isSet) {
        obj.insert(QString("Lower48"), ::OpenAPI::toJsonValue(m_lower48));
    }
    if (m_map_isSet) {
        obj.insert(QString("Map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_max_pctile_us_isSet) {
        obj.insert(QString("MaxPctileUs"), ::OpenAPI::toJsonValue(m_max_pctile_us));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_operator_code_isSet) {
        obj.insert(QString("OperatorCode"), ::OpenAPI::toJsonValue(m_operator_code));
    }
    if (m_operator_desc_isSet) {
        obj.insert(QString("OperatorDesc"), ::OpenAPI::toJsonValue(m_operator_desc));
    }
    if (m_over80_count_us_isSet) {
        obj.insert(QString("Over80CountUs"), ::OpenAPI::toJsonValue(m_over80_count_us));
    }
    if (m_owner_code_isSet) {
        obj.insert(QString("OwnerCode"), ::OpenAPI::toJsonValue(m_owner_code));
    }
    if (m_owner_desc_isSet) {
        obj.insert(QString("OwnerDesc"), ::OpenAPI::toJsonValue(m_owner_desc));
    }
    if (m_pctile_cancer_us_isSet) {
        obj.insert(QString("PctileCancerUs"), ::OpenAPI::toJsonValue(m_pctile_cancer_us));
    }
    if (m_pctile_dpm_us_isSet) {
        obj.insert(QString("PctileDpmUs"), ::OpenAPI::toJsonValue(m_pctile_dpm_us));
    }
    if (m_pctile_o3_us_isSet) {
        obj.insert(QString("PctileO3Us"), ::OpenAPI::toJsonValue(m_pctile_o3_us));
    }
    if (m_pctile_pctpre1960_us_isSet) {
        obj.insert(QString("PctilePctpre1960Us"), ::OpenAPI::toJsonValue(m_pctile_pctpre1960_us));
    }
    if (m_pctile_pm_us_isSet) {
        obj.insert(QString("PctilePmUs"), ::OpenAPI::toJsonValue(m_pctile_pm_us));
    }
    if (m_pctile_proximity_npdesus_isSet) {
        obj.insert(QString("PctileProximityNPDESUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npdesus));
    }
    if (m_pctile_proximity_npl_us_isSet) {
        obj.insert(QString("PctileProximityNplUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_npl_us));
    }
    if (m_pctile_proximity_rmp_us_isSet) {
        obj.insert(QString("PctileProximityRmpUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_rmp_us));
    }
    if (m_pctile_proximity_tsdf_us_isSet) {
        obj.insert(QString("PctileProximityTsdfUs"), ::OpenAPI::toJsonValue(m_pctile_proximity_tsdf_us));
    }
    if (m_pctile_resp_us_isSet) {
        obj.insert(QString("PctileRespUs"), ::OpenAPI::toJsonValue(m_pctile_resp_us));
    }
    if (m_pctile_traffic_score_us_isSet) {
        obj.insert(QString("PctileTrafficScoreUs"), ::OpenAPI::toJsonValue(m_pctile_traffic_score_us));
    }
    if (m_rcra3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("RCRA3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_rcra3yr_compl_qtrs_history));
    }
    if (m_rcra_case_ids_isSet) {
        obj.insert(QString("RCRACaseIDs"), ::OpenAPI::toJsonValue(m_rcra_case_ids));
    }
    if (m_rcra_city_isSet) {
        obj.insert(QString("RCRACity"), ::OpenAPI::toJsonValue(m_rcra_city));
    }
    if (m_rcra_compl_status_isSet) {
        obj.insert(QString("RCRAComplStatus"), ::OpenAPI::toJsonValue(m_rcra_compl_status));
    }
    if (m_rcra_county_isSet) {
        obj.insert(QString("RCRACounty"), ::OpenAPI::toJsonValue(m_rcra_county));
    }
    if (m_rcra_days_last_inspection_isSet) {
        obj.insert(QString("RCRADaysLastInspection"), ::OpenAPI::toJsonValue(m_rcra_days_last_inspection));
    }
    if (m_rcraepa_region_isSet) {
        obj.insert(QString("RCRAEPARegion"), ::OpenAPI::toJsonValue(m_rcraepa_region));
    }
    if (m_rcrafips_code_isSet) {
        obj.insert(QString("RCRAFIPSCode"), ::OpenAPI::toJsonValue(m_rcrafips_code));
    }
    if (m_rcra_fea_cnt_isSet) {
        obj.insert(QString("RCRAFeaCnt"), ::OpenAPI::toJsonValue(m_rcra_fea_cnt));
    }
    if (m_rcraids_isSet) {
        obj.insert(QString("RCRAIDs"), ::OpenAPI::toJsonValue(m_rcraids));
    }
    if (m_rcra_iea_cnt_isSet) {
        obj.insert(QString("RCRAIeaCnt"), ::OpenAPI::toJsonValue(m_rcra_iea_cnt));
    }
    if (m_rcra_imp_water_flg_isSet) {
        obj.insert(QString("RCRAImpWaterFlg"), ::OpenAPI::toJsonValue(m_rcra_imp_water_flg));
    }
    if (m_rcra_indian_cntry_flg_isSet) {
        obj.insert(QString("RCRAIndianCntryFlg"), ::OpenAPI::toJsonValue(m_rcra_indian_cntry_flg));
    }
    if (m_rcra_insp_cnt_isSet) {
        obj.insert(QString("RCRAInspCnt"), ::OpenAPI::toJsonValue(m_rcra_insp_cnt));
    }
    if (m_rcra_land_type_code_isSet) {
        obj.insert(QString("RCRALandTypeCode"), ::OpenAPI::toJsonValue(m_rcra_land_type_code));
    }
    if (m_rcra_last_fea_date_isSet) {
        obj.insert(QString("RCRALastFeaDate"), ::OpenAPI::toJsonValue(m_rcra_last_fea_date));
    }
    if (m_rcra_last_fea_date_epa_isSet) {
        obj.insert(QString("RCRALastFeaDateEPA"), ::OpenAPI::toJsonValue(m_rcra_last_fea_date_epa));
    }
    if (m_rcra_last_fea_date_state_isSet) {
        obj.insert(QString("RCRALastFeaDateState"), ::OpenAPI::toJsonValue(m_rcra_last_fea_date_state));
    }
    if (m_rcra_last_iea_date_isSet) {
        obj.insert(QString("RCRALastIeaDate"), ::OpenAPI::toJsonValue(m_rcra_last_iea_date));
    }
    if (m_rcra_last_iea_date_epa_isSet) {
        obj.insert(QString("RCRALastIeaDateEPA"), ::OpenAPI::toJsonValue(m_rcra_last_iea_date_epa));
    }
    if (m_rcra_last_iea_date_state_isSet) {
        obj.insert(QString("RCRALastIeaDateState"), ::OpenAPI::toJsonValue(m_rcra_last_iea_date_state));
    }
    if (m_rcra_last_insp_date_epa_isSet) {
        obj.insert(QString("RCRALastInspDateEPA"), ::OpenAPI::toJsonValue(m_rcra_last_insp_date_epa));
    }
    if (m_rcra_last_insp_date_state_isSet) {
        obj.insert(QString("RCRALastInspDateState"), ::OpenAPI::toJsonValue(m_rcra_last_insp_date_state));
    }
    if (m_rcra_last_inspection_date_isSet) {
        obj.insert(QString("RCRALastInspectionDate"), ::OpenAPI::toJsonValue(m_rcra_last_inspection_date));
    }
    if (m_rcra_last_penalty_date_isSet) {
        obj.insert(QString("RCRALastPenaltyDate"), ::OpenAPI::toJsonValue(m_rcra_last_penalty_date));
    }
    if (m_rcra_map_icon_isSet) {
        obj.insert(QString("RCRAMapIcon"), ::OpenAPI::toJsonValue(m_rcra_map_icon));
    }
    if (m_rcranaics_isSet) {
        obj.insert(QString("RCRANAICS"), ::OpenAPI::toJsonValue(m_rcranaics));
    }
    if (m_rcra_name_isSet) {
        obj.insert(QString("RCRAName"), ::OpenAPI::toJsonValue(m_rcra_name));
    }
    if (m_rcra_oldest_open_vio_date_isSet) {
        obj.insert(QString("RCRAOldestOpenVioDate"), ::OpenAPI::toJsonValue(m_rcra_oldest_open_vio_date));
    }
    if (m_rcra_penalties_isSet) {
        obj.insert(QString("RCRAPenalties"), ::OpenAPI::toJsonValue(m_rcra_penalties));
    }
    if (m_rcra_qtrs_with_nc_isSet) {
        obj.insert(QString("RCRAQtrsWithNC"), ::OpenAPI::toJsonValue(m_rcra_qtrs_with_nc));
    }
    if (m_rcra_qtrs_with_snc_isSet) {
        obj.insert(QString("RCRAQtrsWithSNC"), ::OpenAPI::toJsonValue(m_rcra_qtrs_with_snc));
    }
    if (m_rcrasnc_isSet) {
        obj.insert(QString("RCRASNC"), ::OpenAPI::toJsonValue(m_rcrasnc));
    }
    if (m_rcra_state_isSet) {
        obj.insert(QString("RCRAState"), ::OpenAPI::toJsonValue(m_rcra_state));
    }
    if (m_rcra_state_district_isSet) {
        obj.insert(QString("RCRAStateDistrict"), ::OpenAPI::toJsonValue(m_rcra_state_district));
    }
    if (m_rcra_status_isSet) {
        obj.insert(QString("RCRAStatus"), ::OpenAPI::toJsonValue(m_rcra_status));
    }
    if (m_rcra_street_isSet) {
        obj.insert(QString("RCRAStreet"), ::OpenAPI::toJsonValue(m_rcra_street));
    }
    if (m_rcratr_ibal_land_code_isSet) {
        obj.insert(QString("RCRATRIbalLandCode"), ::OpenAPI::toJsonValue(m_rcratr_ibal_land_code));
    }
    if (m_rcra_universe_isSet) {
        obj.insert(QString("RCRAUniverse"), ::OpenAPI::toJsonValue(m_rcra_universe));
    }
    if (m_rcra_violation_types_isSet) {
        obj.insert(QString("RCRAViolationTypes"), ::OpenAPI::toJsonValue(m_rcra_violation_types));
    }
    if (m_rcra_zip_isSet) {
        obj.insert(QString("RCRAZip"), ::OpenAPI::toJsonValue(m_rcra_zip));
    }
    if (m_rcr_ainfo_land_type_code_isSet) {
        obj.insert(QString("RCRAinfoLandTypeCode"), ::OpenAPI::toJsonValue(m_rcr_ainfo_land_type_code));
    }
    if (m_rcr_ainfo_land_type_desc_isSet) {
        obj.insert(QString("RCRAinfoLandTypeDesc"), ::OpenAPI::toJsonValue(m_rcr_ainfo_land_type_desc));
    }
    if (m_reference_point_isSet) {
        obj.insert(QString("ReferencePoint"), ::OpenAPI::toJsonValue(m_reference_point));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_rmp_ids_isSet) {
        obj.insert(QString("RmpIDs"), ::OpenAPI::toJsonValue(m_rmp_ids));
    }
    if (m_sdwaids_isSet) {
        obj.insert(QString("SDWAIDs"), ::OpenAPI::toJsonValue(m_sdwaids));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sems_ids_isSet) {
        obj.insert(QString("SemsIDs"), ::OpenAPI::toJsonValue(m_sems_ids));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_statute_isSet) {
        obj.insert(QString("Statute"), ::OpenAPI::toJsonValue(m_statute));
    }
    if (m_triids_isSet) {
        obj.insert(QString("TRIIDs"), ::OpenAPI::toJsonValue(m_triids));
    }
    if (m_tr_ibal_flag_isSet) {
        obj.insert(QString("TRIbalFlag"), ::OpenAPI::toJsonValue(m_tr_ibal_flag));
    }
    if (m_tsdf_isSet) {
        obj.insert(QString("Tsdf"), ::OpenAPI::toJsonValue(m_tsdf));
    }
    if (m_viol_flag_isSet) {
        obj.insert(QString("ViolFlag"), ::OpenAPI::toJsonValue(m_viol_flag));
    }
    if (m_web_docs_isSet) {
        obj.insert(QString("WebDocs"), ::OpenAPI::toJsonValue(m_web_docs));
    }
    return obj;
}

QString OAIRcra01::getAirids() const {
    return m_airids;
}
void OAIRcra01::setAirids(const QString &airids) {
    m_airids = airids;
    m_airids_isSet = true;
}

bool OAIRcra01::is_airids_Set() const{
    return m_airids_isSet;
}

bool OAIRcra01::is_airids_Valid() const{
    return m_airids_isValid;
}

QString OAIRcra01::getActiveLower48() const {
    return m_active_lower48;
}
void OAIRcra01::setActiveLower48(const QString &active_lower48) {
    m_active_lower48 = active_lower48;
    m_active_lower48_isSet = true;
}

bool OAIRcra01::is_active_lower48_Set() const{
    return m_active_lower48_isSet;
}

bool OAIRcra01::is_active_lower48_Valid() const{
    return m_active_lower48_isValid;
}

QString OAIRcra01::getCwaids() const {
    return m_cwaids;
}
void OAIRcra01::setCwaids(const QString &cwaids) {
    m_cwaids = cwaids;
    m_cwaids_isSet = true;
}

bool OAIRcra01::is_cwaids_Set() const{
    return m_cwaids_isSet;
}

bool OAIRcra01::is_cwaids_Valid() const{
    return m_cwaids_isValid;
}

QString OAIRcra01::getCalculatedAccuracyMeters() const {
    return m_calculated_accuracy_meters;
}
void OAIRcra01::setCalculatedAccuracyMeters(const QString &calculated_accuracy_meters) {
    m_calculated_accuracy_meters = calculated_accuracy_meters;
    m_calculated_accuracy_meters_isSet = true;
}

bool OAIRcra01::is_calculated_accuracy_meters_Set() const{
    return m_calculated_accuracy_meters_isSet;
}

bool OAIRcra01::is_calculated_accuracy_meters_Valid() const{
    return m_calculated_accuracy_meters_isValid;
}

QString OAIRcra01::getCensusBlockGroup() const {
    return m_census_block_group;
}
void OAIRcra01::setCensusBlockGroup(const QString &census_block_group) {
    m_census_block_group = census_block_group;
    m_census_block_group_isSet = true;
}

bool OAIRcra01::is_census_block_group_Set() const{
    return m_census_block_group_isSet;
}

bool OAIRcra01::is_census_block_group_Valid() const{
    return m_census_block_group_isValid;
}

QString OAIRcra01::getChemNamesRelLand() const {
    return m_chem_names_rel_land;
}
void OAIRcra01::setChemNamesRelLand(const QString &chem_names_rel_land) {
    m_chem_names_rel_land = chem_names_rel_land;
    m_chem_names_rel_land_isSet = true;
}

bool OAIRcra01::is_chem_names_rel_land_Set() const{
    return m_chem_names_rel_land_isSet;
}

bool OAIRcra01::is_chem_names_rel_land_Valid() const{
    return m_chem_names_rel_land_isValid;
}

QString OAIRcra01::getChesapeakeBayFlag() const {
    return m_chesapeake_bay_flag;
}
void OAIRcra01::setChesapeakeBayFlag(const QString &chesapeake_bay_flag) {
    m_chesapeake_bay_flag = chesapeake_bay_flag;
    m_chesapeake_bay_flag_isSet = true;
}

bool OAIRcra01::is_chesapeake_bay_flag_Set() const{
    return m_chesapeake_bay_flag_isSet;
}

bool OAIRcra01::is_chesapeake_bay_flag_Valid() const{
    return m_chesapeake_bay_flag_isValid;
}

QString OAIRcra01::getCleanupActionFlag() const {
    return m_cleanup_action_flag;
}
void OAIRcra01::setCleanupActionFlag(const QString &cleanup_action_flag) {
    m_cleanup_action_flag = cleanup_action_flag;
    m_cleanup_action_flag_isSet = true;
}

bool OAIRcra01::is_cleanup_action_flag_Set() const{
    return m_cleanup_action_flag_isSet;
}

bool OAIRcra01::is_cleanup_action_flag_Valid() const{
    return m_cleanup_action_flag_isValid;
}

QString OAIRcra01::getCollectionMethod() const {
    return m_collection_method;
}
void OAIRcra01::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAIRcra01::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAIRcra01::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

QString OAIRcra01::getCurrSvFlag() const {
    return m_curr_sv_flag;
}
void OAIRcra01::setCurrSvFlag(const QString &curr_sv_flag) {
    m_curr_sv_flag = curr_sv_flag;
    m_curr_sv_flag_isSet = true;
}

bool OAIRcra01::is_curr_sv_flag_Set() const{
    return m_curr_sv_flag_isSet;
}

bool OAIRcra01::is_curr_sv_flag_Valid() const{
    return m_curr_sv_flag_isValid;
}

QString OAIRcra01::getCurrVioFlag() const {
    return m_curr_vio_flag;
}
void OAIRcra01::setCurrVioFlag(const QString &curr_vio_flag) {
    m_curr_vio_flag = curr_vio_flag;
    m_curr_vio_flag_isSet = true;
}

bool OAIRcra01::is_curr_vio_flag_Set() const{
    return m_curr_vio_flag_isSet;
}

bool OAIRcra01::is_curr_vio_flag_Valid() const{
    return m_curr_vio_flag_isValid;
}

QString OAIRcra01::getCurrentVioCnt() const {
    return m_current_vio_cnt;
}
void OAIRcra01::setCurrentVioCnt(const QString &current_vio_cnt) {
    m_current_vio_cnt = current_vio_cnt;
    m_current_vio_cnt_isSet = true;
}

bool OAIRcra01::is_current_vio_cnt_Set() const{
    return m_current_vio_cnt_isSet;
}

bool OAIRcra01::is_current_vio_cnt_Valid() const{
    return m_current_vio_cnt_isValid;
}

QString OAIRcra01::getDateLastRecordReview() const {
    return m_date_last_record_review;
}
void OAIRcra01::setDateLastRecordReview(const QString &date_last_record_review) {
    m_date_last_record_review = date_last_record_review;
    m_date_last_record_review_isSet = true;
}

bool OAIRcra01::is_date_last_record_review_Set() const{
    return m_date_last_record_review_isSet;
}

bool OAIRcra01::is_date_last_record_review_Valid() const{
    return m_date_last_record_review_isValid;
}

QString OAIRcra01::getEpaSystem() const {
    return m_epa_system;
}
void OAIRcra01::setEpaSystem(const QString &epa_system) {
    m_epa_system = epa_system;
    m_epa_system_isSet = true;
}

bool OAIRcra01::is_epa_system_Set() const{
    return m_epa_system_isSet;
}

bool OAIRcra01::is_epa_system_Valid() const{
    return m_epa_system_isValid;
}

QString OAIRcra01::getEa5yrFlag() const {
    return m_ea5yr_flag;
}
void OAIRcra01::setEa5yrFlag(const QString &ea5yr_flag) {
    m_ea5yr_flag = ea5yr_flag;
    m_ea5yr_flag_isSet = true;
}

bool OAIRcra01::is_ea5yr_flag_Set() const{
    return m_ea5yr_flag_isSet;
}

bool OAIRcra01::is_ea5yr_flag_Valid() const{
    return m_ea5yr_flag_isValid;
}

QString OAIRcra01::getEjscreenFlag() const {
    return m_ejscreen_flag;
}
void OAIRcra01::setEjscreenFlag(const QString &ejscreen_flag) {
    m_ejscreen_flag = ejscreen_flag;
    m_ejscreen_flag_isSet = true;
}

bool OAIRcra01::is_ejscreen_flag_Set() const{
    return m_ejscreen_flag_isSet;
}

bool OAIRcra01::is_ejscreen_flag_Valid() const{
    return m_ejscreen_flag_isValid;
}

QString OAIRcra01::getEjscreenFlagUs() const {
    return m_ejscreen_flag_us;
}
void OAIRcra01::setEjscreenFlagUs(const QString &ejscreen_flag_us) {
    m_ejscreen_flag_us = ejscreen_flag_us;
    m_ejscreen_flag_us_isSet = true;
}

bool OAIRcra01::is_ejscreen_flag_us_Set() const{
    return m_ejscreen_flag_us_isSet;
}

bool OAIRcra01::is_ejscreen_flag_us_Valid() const{
    return m_ejscreen_flag_us_isValid;
}

QString OAIRcra01::getFacCountyName() const {
    return m_fac_county_name;
}
void OAIRcra01::setFacCountyName(const QString &fac_county_name) {
    m_fac_county_name = fac_county_name;
    m_fac_county_name_isSet = true;
}

bool OAIRcra01::is_fac_county_name_Set() const{
    return m_fac_county_name_isSet;
}

bool OAIRcra01::is_fac_county_name_Valid() const{
    return m_fac_county_name_isValid;
}

QString OAIRcra01::getFacDerivedHuc() const {
    return m_fac_derived_huc;
}
void OAIRcra01::setFacDerivedHuc(const QString &fac_derived_huc) {
    m_fac_derived_huc = fac_derived_huc;
    m_fac_derived_huc_isSet = true;
}

bool OAIRcra01::is_fac_derived_huc_Set() const{
    return m_fac_derived_huc_isSet;
}

bool OAIRcra01::is_fac_derived_huc_Valid() const{
    return m_fac_derived_huc_isValid;
}

QString OAIRcra01::getFacDerivedTrIbes() const {
    return m_fac_derived_tr_ibes;
}
void OAIRcra01::setFacDerivedTrIbes(const QString &fac_derived_tr_ibes) {
    m_fac_derived_tr_ibes = fac_derived_tr_ibes;
    m_fac_derived_tr_ibes_isSet = true;
}

bool OAIRcra01::is_fac_derived_tr_ibes_Set() const{
    return m_fac_derived_tr_ibes_isSet;
}

bool OAIRcra01::is_fac_derived_tr_ibes_Valid() const{
    return m_fac_derived_tr_ibes_isValid;
}

QString OAIRcra01::getFacDerivedWbd() const {
    return m_fac_derived_wbd;
}
void OAIRcra01::setFacDerivedWbd(const QString &fac_derived_wbd) {
    m_fac_derived_wbd = fac_derived_wbd;
    m_fac_derived_wbd_isSet = true;
}

bool OAIRcra01::is_fac_derived_wbd_Set() const{
    return m_fac_derived_wbd_isSet;
}

bool OAIRcra01::is_fac_derived_wbd_Valid() const{
    return m_fac_derived_wbd_isValid;
}

QString OAIRcra01::getFacDerivedWbdName() const {
    return m_fac_derived_wbd_name;
}
void OAIRcra01::setFacDerivedWbdName(const QString &fac_derived_wbd_name) {
    m_fac_derived_wbd_name = fac_derived_wbd_name;
    m_fac_derived_wbd_name_isSet = true;
}

bool OAIRcra01::is_fac_derived_wbd_name_Set() const{
    return m_fac_derived_wbd_name_isSet;
}

bool OAIRcra01::is_fac_derived_wbd_name_Valid() const{
    return m_fac_derived_wbd_name_isValid;
}

QString OAIRcra01::getFacFipsCode() const {
    return m_fac_fips_code;
}
void OAIRcra01::setFacFipsCode(const QString &fac_fips_code) {
    m_fac_fips_code = fac_fips_code;
    m_fac_fips_code_isSet = true;
}

bool OAIRcra01::is_fac_fips_code_Set() const{
    return m_fac_fips_code_isSet;
}

bool OAIRcra01::is_fac_fips_code_Valid() const{
    return m_fac_fips_code_isValid;
}

QString OAIRcra01::getFacFederalAgencyCode() const {
    return m_fac_federal_agency_code;
}
void OAIRcra01::setFacFederalAgencyCode(const QString &fac_federal_agency_code) {
    m_fac_federal_agency_code = fac_federal_agency_code;
    m_fac_federal_agency_code_isSet = true;
}

bool OAIRcra01::is_fac_federal_agency_code_Set() const{
    return m_fac_federal_agency_code_isSet;
}

bool OAIRcra01::is_fac_federal_agency_code_Valid() const{
    return m_fac_federal_agency_code_isValid;
}

QString OAIRcra01::getFacFederalAgencyName() const {
    return m_fac_federal_agency_name;
}
void OAIRcra01::setFacFederalAgencyName(const QString &fac_federal_agency_name) {
    m_fac_federal_agency_name = fac_federal_agency_name;
    m_fac_federal_agency_name_isSet = true;
}

bool OAIRcra01::is_fac_federal_agency_name_Set() const{
    return m_fac_federal_agency_name_isSet;
}

bool OAIRcra01::is_fac_federal_agency_name_Valid() const{
    return m_fac_federal_agency_name_isValid;
}

QString OAIRcra01::getFacIndianCntryFlg() const {
    return m_fac_indian_cntry_flg;
}
void OAIRcra01::setFacIndianCntryFlg(const QString &fac_indian_cntry_flg) {
    m_fac_indian_cntry_flg = fac_indian_cntry_flg;
    m_fac_indian_cntry_flg_isSet = true;
}

bool OAIRcra01::is_fac_indian_cntry_flg_Set() const{
    return m_fac_indian_cntry_flg_isSet;
}

bool OAIRcra01::is_fac_indian_cntry_flg_Valid() const{
    return m_fac_indian_cntry_flg_isValid;
}

QString OAIRcra01::getFacIndianSpatialFlg() const {
    return m_fac_indian_spatial_flg;
}
void OAIRcra01::setFacIndianSpatialFlg(const QString &fac_indian_spatial_flg) {
    m_fac_indian_spatial_flg = fac_indian_spatial_flg;
    m_fac_indian_spatial_flg_isSet = true;
}

bool OAIRcra01::is_fac_indian_spatial_flg_Set() const{
    return m_fac_indian_spatial_flg_isSet;
}

bool OAIRcra01::is_fac_indian_spatial_flg_Valid() const{
    return m_fac_indian_spatial_flg_isValid;
}

QString OAIRcra01::getFacLat() const {
    return m_fac_lat;
}
void OAIRcra01::setFacLat(const QString &fac_lat) {
    m_fac_lat = fac_lat;
    m_fac_lat_isSet = true;
}

bool OAIRcra01::is_fac_lat_Set() const{
    return m_fac_lat_isSet;
}

bool OAIRcra01::is_fac_lat_Valid() const{
    return m_fac_lat_isValid;
}

QString OAIRcra01::getFacLong() const {
    return m_fac_long;
}
void OAIRcra01::setFacLong(const QString &fac_long) {
    m_fac_long = fac_long;
    m_fac_long_isSet = true;
}

bool OAIRcra01::is_fac_long_Set() const{
    return m_fac_long_isSet;
}

bool OAIRcra01::is_fac_long_Valid() const{
    return m_fac_long_isValid;
}

QString OAIRcra01::getFacMapFlg() const {
    return m_fac_map_flg;
}
void OAIRcra01::setFacMapFlg(const QString &fac_map_flg) {
    m_fac_map_flg = fac_map_flg;
    m_fac_map_flg_isSet = true;
}

bool OAIRcra01::is_fac_map_flg_Set() const{
    return m_fac_map_flg_isSet;
}

bool OAIRcra01::is_fac_map_flg_Valid() const{
    return m_fac_map_flg_isValid;
}

QString OAIRcra01::getFacMapIcon() const {
    return m_fac_map_icon;
}
void OAIRcra01::setFacMapIcon(const QString &fac_map_icon) {
    m_fac_map_icon = fac_map_icon;
    m_fac_map_icon_isSet = true;
}

bool OAIRcra01::is_fac_map_icon_Set() const{
    return m_fac_map_icon_isSet;
}

bool OAIRcra01::is_fac_map_icon_Valid() const{
    return m_fac_map_icon_isValid;
}

QString OAIRcra01::getFacPercentMinority() const {
    return m_fac_percent_minority;
}
void OAIRcra01::setFacPercentMinority(const QString &fac_percent_minority) {
    m_fac_percent_minority = fac_percent_minority;
    m_fac_percent_minority_isSet = true;
}

bool OAIRcra01::is_fac_percent_minority_Set() const{
    return m_fac_percent_minority_isSet;
}

bool OAIRcra01::is_fac_percent_minority_Valid() const{
    return m_fac_percent_minority_isValid;
}

QString OAIRcra01::getFacPopulationDensity() const {
    return m_fac_population_density;
}
void OAIRcra01::setFacPopulationDensity(const QString &fac_population_density) {
    m_fac_population_density = fac_population_density;
    m_fac_population_density_isSet = true;
}

bool OAIRcra01::is_fac_population_density_Set() const{
    return m_fac_population_density_isSet;
}

bool OAIRcra01::is_fac_population_density_Valid() const{
    return m_fac_population_density_isValid;
}

QString OAIRcra01::getFacSicCodes() const {
    return m_fac_sic_codes;
}
void OAIRcra01::setFacSicCodes(const QString &fac_sic_codes) {
    m_fac_sic_codes = fac_sic_codes;
    m_fac_sic_codes_isSet = true;
}

bool OAIRcra01::is_fac_sic_codes_Set() const{
    return m_fac_sic_codes_isSet;
}

bool OAIRcra01::is_fac_sic_codes_Valid() const{
    return m_fac_sic_codes_isValid;
}

QString OAIRcra01::getFacStdCountyName() const {
    return m_fac_std_county_name;
}
void OAIRcra01::setFacStdCountyName(const QString &fac_std_county_name) {
    m_fac_std_county_name = fac_std_county_name;
    m_fac_std_county_name_isSet = true;
}

bool OAIRcra01::is_fac_std_county_name_Set() const{
    return m_fac_std_county_name_isSet;
}

bool OAIRcra01::is_fac_std_county_name_Valid() const{
    return m_fac_std_county_name_isValid;
}

QString OAIRcra01::getFacTriLandReleases() const {
    return m_fac_tri_land_releases;
}
void OAIRcra01::setFacTriLandReleases(const QString &fac_tri_land_releases) {
    m_fac_tri_land_releases = fac_tri_land_releases;
    m_fac_tri_land_releases_isSet = true;
}

bool OAIRcra01::is_fac_tri_land_releases_Set() const{
    return m_fac_tri_land_releases_isSet;
}

bool OAIRcra01::is_fac_tri_land_releases_Valid() const{
    return m_fac_tri_land_releases_isValid;
}

QString OAIRcra01::getFacTriOffSiteTransfers() const {
    return m_fac_tri_off_site_transfers;
}
void OAIRcra01::setFacTriOffSiteTransfers(const QString &fac_tri_off_site_transfers) {
    m_fac_tri_off_site_transfers = fac_tri_off_site_transfers;
    m_fac_tri_off_site_transfers_isSet = true;
}

bool OAIRcra01::is_fac_tri_off_site_transfers_Set() const{
    return m_fac_tri_off_site_transfers_isSet;
}

bool OAIRcra01::is_fac_tri_off_site_transfers_Valid() const{
    return m_fac_tri_off_site_transfers_isValid;
}

QString OAIRcra01::getFacTrionSiteReleases() const {
    return m_fac_trion_site_releases;
}
void OAIRcra01::setFacTrionSiteReleases(const QString &fac_trion_site_releases) {
    m_fac_trion_site_releases = fac_trion_site_releases;
    m_fac_trion_site_releases_isSet = true;
}

bool OAIRcra01::is_fac_trion_site_releases_Set() const{
    return m_fac_trion_site_releases_isSet;
}

bool OAIRcra01::is_fac_trion_site_releases_Valid() const{
    return m_fac_trion_site_releases_isValid;
}

QString OAIRcra01::getFacTriReporter() const {
    return m_fac_tri_reporter;
}
void OAIRcra01::setFacTriReporter(const QString &fac_tri_reporter) {
    m_fac_tri_reporter = fac_tri_reporter;
    m_fac_tri_reporter_isSet = true;
}

bool OAIRcra01::is_fac_tri_reporter_Set() const{
    return m_fac_tri_reporter_isSet;
}

bool OAIRcra01::is_fac_tri_reporter_Valid() const{
    return m_fac_tri_reporter_isValid;
}

QString OAIRcra01::getFacUsMexBorderFlg() const {
    return m_fac_us_mex_border_flg;
}
void OAIRcra01::setFacUsMexBorderFlg(const QString &fac_us_mex_border_flg) {
    m_fac_us_mex_border_flg = fac_us_mex_border_flg;
    m_fac_us_mex_border_flg_isSet = true;
}

bool OAIRcra01::is_fac_us_mex_border_flg_Set() const{
    return m_fac_us_mex_border_flg_isSet;
}

bool OAIRcra01::is_fac_us_mex_border_flg_Valid() const{
    return m_fac_us_mex_border_flg_isValid;
}

QString OAIRcra01::getInfea5yrFlag() const {
    return m_infea5yr_flag;
}
void OAIRcra01::setInfea5yrFlag(const QString &infea5yr_flag) {
    m_infea5yr_flag = infea5yr_flag;
    m_infea5yr_flag_isSet = true;
}

bool OAIRcra01::is_infea5yr_flag_Set() const{
    return m_infea5yr_flag_isSet;
}

bool OAIRcra01::is_infea5yr_flag_Valid() const{
    return m_infea5yr_flag_isValid;
}

QString OAIRcra01::getInsp5yrFlag() const {
    return m_insp5yr_flag;
}
void OAIRcra01::setInsp5yrFlag(const QString &insp5yr_flag) {
    m_insp5yr_flag = insp5yr_flag;
    m_insp5yr_flag_isSet = true;
}

bool OAIRcra01::is_insp5yr_flag_Set() const{
    return m_insp5yr_flag_isSet;
}

bool OAIRcra01::is_insp5yr_flag_Valid() const{
    return m_insp5yr_flag_isValid;
}

QString OAIRcra01::getLastViolationDate() const {
    return m_last_violation_date;
}
void OAIRcra01::setLastViolationDate(const QString &last_violation_date) {
    m_last_violation_date = last_violation_date;
    m_last_violation_date_isSet = true;
}

bool OAIRcra01::is_last_violation_date_Set() const{
    return m_last_violation_date_isSet;
}

bool OAIRcra01::is_last_violation_date_Valid() const{
    return m_last_violation_date_isValid;
}

QString OAIRcra01::getLower48() const {
    return m_lower48;
}
void OAIRcra01::setLower48(const QString &lower48) {
    m_lower48 = lower48;
    m_lower48_isSet = true;
}

bool OAIRcra01::is_lower48_Set() const{
    return m_lower48_isSet;
}

bool OAIRcra01::is_lower48_Valid() const{
    return m_lower48_isValid;
}

QString OAIRcra01::getMap() const {
    return m_map;
}
void OAIRcra01::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIRcra01::is_map_Set() const{
    return m_map_isSet;
}

bool OAIRcra01::is_map_Valid() const{
    return m_map_isValid;
}

QString OAIRcra01::getMaxPctileUs() const {
    return m_max_pctile_us;
}
void OAIRcra01::setMaxPctileUs(const QString &max_pctile_us) {
    m_max_pctile_us = max_pctile_us;
    m_max_pctile_us_isSet = true;
}

bool OAIRcra01::is_max_pctile_us_Set() const{
    return m_max_pctile_us_isSet;
}

bool OAIRcra01::is_max_pctile_us_Valid() const{
    return m_max_pctile_us_isValid;
}

QString OAIRcra01::getMaxScore() const {
    return m_max_score;
}
void OAIRcra01::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAIRcra01::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAIRcra01::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAIRcra01::getOperatorCode() const {
    return m_operator_code;
}
void OAIRcra01::setOperatorCode(const QString &operator_code) {
    m_operator_code = operator_code;
    m_operator_code_isSet = true;
}

bool OAIRcra01::is_operator_code_Set() const{
    return m_operator_code_isSet;
}

bool OAIRcra01::is_operator_code_Valid() const{
    return m_operator_code_isValid;
}

QString OAIRcra01::getOperatorDesc() const {
    return m_operator_desc;
}
void OAIRcra01::setOperatorDesc(const QString &operator_desc) {
    m_operator_desc = operator_desc;
    m_operator_desc_isSet = true;
}

bool OAIRcra01::is_operator_desc_Set() const{
    return m_operator_desc_isSet;
}

bool OAIRcra01::is_operator_desc_Valid() const{
    return m_operator_desc_isValid;
}

QString OAIRcra01::getOver80CountUs() const {
    return m_over80_count_us;
}
void OAIRcra01::setOver80CountUs(const QString &over80_count_us) {
    m_over80_count_us = over80_count_us;
    m_over80_count_us_isSet = true;
}

bool OAIRcra01::is_over80_count_us_Set() const{
    return m_over80_count_us_isSet;
}

bool OAIRcra01::is_over80_count_us_Valid() const{
    return m_over80_count_us_isValid;
}

QString OAIRcra01::getOwnerCode() const {
    return m_owner_code;
}
void OAIRcra01::setOwnerCode(const QString &owner_code) {
    m_owner_code = owner_code;
    m_owner_code_isSet = true;
}

bool OAIRcra01::is_owner_code_Set() const{
    return m_owner_code_isSet;
}

bool OAIRcra01::is_owner_code_Valid() const{
    return m_owner_code_isValid;
}

QString OAIRcra01::getOwnerDesc() const {
    return m_owner_desc;
}
void OAIRcra01::setOwnerDesc(const QString &owner_desc) {
    m_owner_desc = owner_desc;
    m_owner_desc_isSet = true;
}

bool OAIRcra01::is_owner_desc_Set() const{
    return m_owner_desc_isSet;
}

bool OAIRcra01::is_owner_desc_Valid() const{
    return m_owner_desc_isValid;
}

QString OAIRcra01::getPctileCancerUs() const {
    return m_pctile_cancer_us;
}
void OAIRcra01::setPctileCancerUs(const QString &pctile_cancer_us) {
    m_pctile_cancer_us = pctile_cancer_us;
    m_pctile_cancer_us_isSet = true;
}

bool OAIRcra01::is_pctile_cancer_us_Set() const{
    return m_pctile_cancer_us_isSet;
}

bool OAIRcra01::is_pctile_cancer_us_Valid() const{
    return m_pctile_cancer_us_isValid;
}

QString OAIRcra01::getPctileDpmUs() const {
    return m_pctile_dpm_us;
}
void OAIRcra01::setPctileDpmUs(const QString &pctile_dpm_us) {
    m_pctile_dpm_us = pctile_dpm_us;
    m_pctile_dpm_us_isSet = true;
}

bool OAIRcra01::is_pctile_dpm_us_Set() const{
    return m_pctile_dpm_us_isSet;
}

bool OAIRcra01::is_pctile_dpm_us_Valid() const{
    return m_pctile_dpm_us_isValid;
}

QString OAIRcra01::getPctileO3Us() const {
    return m_pctile_o3_us;
}
void OAIRcra01::setPctileO3Us(const QString &pctile_o3_us) {
    m_pctile_o3_us = pctile_o3_us;
    m_pctile_o3_us_isSet = true;
}

bool OAIRcra01::is_pctile_o3_us_Set() const{
    return m_pctile_o3_us_isSet;
}

bool OAIRcra01::is_pctile_o3_us_Valid() const{
    return m_pctile_o3_us_isValid;
}

QString OAIRcra01::getPctilePctpre1960Us() const {
    return m_pctile_pctpre1960_us;
}
void OAIRcra01::setPctilePctpre1960Us(const QString &pctile_pctpre1960_us) {
    m_pctile_pctpre1960_us = pctile_pctpre1960_us;
    m_pctile_pctpre1960_us_isSet = true;
}

bool OAIRcra01::is_pctile_pctpre1960_us_Set() const{
    return m_pctile_pctpre1960_us_isSet;
}

bool OAIRcra01::is_pctile_pctpre1960_us_Valid() const{
    return m_pctile_pctpre1960_us_isValid;
}

QString OAIRcra01::getPctilePmUs() const {
    return m_pctile_pm_us;
}
void OAIRcra01::setPctilePmUs(const QString &pctile_pm_us) {
    m_pctile_pm_us = pctile_pm_us;
    m_pctile_pm_us_isSet = true;
}

bool OAIRcra01::is_pctile_pm_us_Set() const{
    return m_pctile_pm_us_isSet;
}

bool OAIRcra01::is_pctile_pm_us_Valid() const{
    return m_pctile_pm_us_isValid;
}

QString OAIRcra01::getPctileProximityNpdesus() const {
    return m_pctile_proximity_npdesus;
}
void OAIRcra01::setPctileProximityNpdesus(const QString &pctile_proximity_npdesus) {
    m_pctile_proximity_npdesus = pctile_proximity_npdesus;
    m_pctile_proximity_npdesus_isSet = true;
}

bool OAIRcra01::is_pctile_proximity_npdesus_Set() const{
    return m_pctile_proximity_npdesus_isSet;
}

bool OAIRcra01::is_pctile_proximity_npdesus_Valid() const{
    return m_pctile_proximity_npdesus_isValid;
}

QString OAIRcra01::getPctileProximityNplUs() const {
    return m_pctile_proximity_npl_us;
}
void OAIRcra01::setPctileProximityNplUs(const QString &pctile_proximity_npl_us) {
    m_pctile_proximity_npl_us = pctile_proximity_npl_us;
    m_pctile_proximity_npl_us_isSet = true;
}

bool OAIRcra01::is_pctile_proximity_npl_us_Set() const{
    return m_pctile_proximity_npl_us_isSet;
}

bool OAIRcra01::is_pctile_proximity_npl_us_Valid() const{
    return m_pctile_proximity_npl_us_isValid;
}

QString OAIRcra01::getPctileProximityRmpUs() const {
    return m_pctile_proximity_rmp_us;
}
void OAIRcra01::setPctileProximityRmpUs(const QString &pctile_proximity_rmp_us) {
    m_pctile_proximity_rmp_us = pctile_proximity_rmp_us;
    m_pctile_proximity_rmp_us_isSet = true;
}

bool OAIRcra01::is_pctile_proximity_rmp_us_Set() const{
    return m_pctile_proximity_rmp_us_isSet;
}

bool OAIRcra01::is_pctile_proximity_rmp_us_Valid() const{
    return m_pctile_proximity_rmp_us_isValid;
}

QString OAIRcra01::getPctileProximityTsdfUs() const {
    return m_pctile_proximity_tsdf_us;
}
void OAIRcra01::setPctileProximityTsdfUs(const QString &pctile_proximity_tsdf_us) {
    m_pctile_proximity_tsdf_us = pctile_proximity_tsdf_us;
    m_pctile_proximity_tsdf_us_isSet = true;
}

bool OAIRcra01::is_pctile_proximity_tsdf_us_Set() const{
    return m_pctile_proximity_tsdf_us_isSet;
}

bool OAIRcra01::is_pctile_proximity_tsdf_us_Valid() const{
    return m_pctile_proximity_tsdf_us_isValid;
}

QString OAIRcra01::getPctileRespUs() const {
    return m_pctile_resp_us;
}
void OAIRcra01::setPctileRespUs(const QString &pctile_resp_us) {
    m_pctile_resp_us = pctile_resp_us;
    m_pctile_resp_us_isSet = true;
}

bool OAIRcra01::is_pctile_resp_us_Set() const{
    return m_pctile_resp_us_isSet;
}

bool OAIRcra01::is_pctile_resp_us_Valid() const{
    return m_pctile_resp_us_isValid;
}

QString OAIRcra01::getPctileTrafficScoreUs() const {
    return m_pctile_traffic_score_us;
}
void OAIRcra01::setPctileTrafficScoreUs(const QString &pctile_traffic_score_us) {
    m_pctile_traffic_score_us = pctile_traffic_score_us;
    m_pctile_traffic_score_us_isSet = true;
}

bool OAIRcra01::is_pctile_traffic_score_us_Set() const{
    return m_pctile_traffic_score_us_isSet;
}

bool OAIRcra01::is_pctile_traffic_score_us_Valid() const{
    return m_pctile_traffic_score_us_isValid;
}

QString OAIRcra01::getRcra3yrComplQtrsHistory() const {
    return m_rcra3yr_compl_qtrs_history;
}
void OAIRcra01::setRcra3yrComplQtrsHistory(const QString &rcra3yr_compl_qtrs_history) {
    m_rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history;
    m_rcra3yr_compl_qtrs_history_isSet = true;
}

bool OAIRcra01::is_rcra3yr_compl_qtrs_history_Set() const{
    return m_rcra3yr_compl_qtrs_history_isSet;
}

bool OAIRcra01::is_rcra3yr_compl_qtrs_history_Valid() const{
    return m_rcra3yr_compl_qtrs_history_isValid;
}

QString OAIRcra01::getRcraCaseIds() const {
    return m_rcra_case_ids;
}
void OAIRcra01::setRcraCaseIds(const QString &rcra_case_ids) {
    m_rcra_case_ids = rcra_case_ids;
    m_rcra_case_ids_isSet = true;
}

bool OAIRcra01::is_rcra_case_ids_Set() const{
    return m_rcra_case_ids_isSet;
}

bool OAIRcra01::is_rcra_case_ids_Valid() const{
    return m_rcra_case_ids_isValid;
}

QString OAIRcra01::getRcraCity() const {
    return m_rcra_city;
}
void OAIRcra01::setRcraCity(const QString &rcra_city) {
    m_rcra_city = rcra_city;
    m_rcra_city_isSet = true;
}

bool OAIRcra01::is_rcra_city_Set() const{
    return m_rcra_city_isSet;
}

bool OAIRcra01::is_rcra_city_Valid() const{
    return m_rcra_city_isValid;
}

QString OAIRcra01::getRcraComplStatus() const {
    return m_rcra_compl_status;
}
void OAIRcra01::setRcraComplStatus(const QString &rcra_compl_status) {
    m_rcra_compl_status = rcra_compl_status;
    m_rcra_compl_status_isSet = true;
}

bool OAIRcra01::is_rcra_compl_status_Set() const{
    return m_rcra_compl_status_isSet;
}

bool OAIRcra01::is_rcra_compl_status_Valid() const{
    return m_rcra_compl_status_isValid;
}

QString OAIRcra01::getRcraCounty() const {
    return m_rcra_county;
}
void OAIRcra01::setRcraCounty(const QString &rcra_county) {
    m_rcra_county = rcra_county;
    m_rcra_county_isSet = true;
}

bool OAIRcra01::is_rcra_county_Set() const{
    return m_rcra_county_isSet;
}

bool OAIRcra01::is_rcra_county_Valid() const{
    return m_rcra_county_isValid;
}

QString OAIRcra01::getRcraDaysLastInspection() const {
    return m_rcra_days_last_inspection;
}
void OAIRcra01::setRcraDaysLastInspection(const QString &rcra_days_last_inspection) {
    m_rcra_days_last_inspection = rcra_days_last_inspection;
    m_rcra_days_last_inspection_isSet = true;
}

bool OAIRcra01::is_rcra_days_last_inspection_Set() const{
    return m_rcra_days_last_inspection_isSet;
}

bool OAIRcra01::is_rcra_days_last_inspection_Valid() const{
    return m_rcra_days_last_inspection_isValid;
}

QString OAIRcra01::getRcraepaRegion() const {
    return m_rcraepa_region;
}
void OAIRcra01::setRcraepaRegion(const QString &rcraepa_region) {
    m_rcraepa_region = rcraepa_region;
    m_rcraepa_region_isSet = true;
}

bool OAIRcra01::is_rcraepa_region_Set() const{
    return m_rcraepa_region_isSet;
}

bool OAIRcra01::is_rcraepa_region_Valid() const{
    return m_rcraepa_region_isValid;
}

QString OAIRcra01::getRcrafipsCode() const {
    return m_rcrafips_code;
}
void OAIRcra01::setRcrafipsCode(const QString &rcrafips_code) {
    m_rcrafips_code = rcrafips_code;
    m_rcrafips_code_isSet = true;
}

bool OAIRcra01::is_rcrafips_code_Set() const{
    return m_rcrafips_code_isSet;
}

bool OAIRcra01::is_rcrafips_code_Valid() const{
    return m_rcrafips_code_isValid;
}

QString OAIRcra01::getRcraFeaCnt() const {
    return m_rcra_fea_cnt;
}
void OAIRcra01::setRcraFeaCnt(const QString &rcra_fea_cnt) {
    m_rcra_fea_cnt = rcra_fea_cnt;
    m_rcra_fea_cnt_isSet = true;
}

bool OAIRcra01::is_rcra_fea_cnt_Set() const{
    return m_rcra_fea_cnt_isSet;
}

bool OAIRcra01::is_rcra_fea_cnt_Valid() const{
    return m_rcra_fea_cnt_isValid;
}

QString OAIRcra01::getRcraids() const {
    return m_rcraids;
}
void OAIRcra01::setRcraids(const QString &rcraids) {
    m_rcraids = rcraids;
    m_rcraids_isSet = true;
}

bool OAIRcra01::is_rcraids_Set() const{
    return m_rcraids_isSet;
}

bool OAIRcra01::is_rcraids_Valid() const{
    return m_rcraids_isValid;
}

QString OAIRcra01::getRcraIeaCnt() const {
    return m_rcra_iea_cnt;
}
void OAIRcra01::setRcraIeaCnt(const QString &rcra_iea_cnt) {
    m_rcra_iea_cnt = rcra_iea_cnt;
    m_rcra_iea_cnt_isSet = true;
}

bool OAIRcra01::is_rcra_iea_cnt_Set() const{
    return m_rcra_iea_cnt_isSet;
}

bool OAIRcra01::is_rcra_iea_cnt_Valid() const{
    return m_rcra_iea_cnt_isValid;
}

QString OAIRcra01::getRcraImpWaterFlg() const {
    return m_rcra_imp_water_flg;
}
void OAIRcra01::setRcraImpWaterFlg(const QString &rcra_imp_water_flg) {
    m_rcra_imp_water_flg = rcra_imp_water_flg;
    m_rcra_imp_water_flg_isSet = true;
}

bool OAIRcra01::is_rcra_imp_water_flg_Set() const{
    return m_rcra_imp_water_flg_isSet;
}

bool OAIRcra01::is_rcra_imp_water_flg_Valid() const{
    return m_rcra_imp_water_flg_isValid;
}

QString OAIRcra01::getRcraIndianCntryFlg() const {
    return m_rcra_indian_cntry_flg;
}
void OAIRcra01::setRcraIndianCntryFlg(const QString &rcra_indian_cntry_flg) {
    m_rcra_indian_cntry_flg = rcra_indian_cntry_flg;
    m_rcra_indian_cntry_flg_isSet = true;
}

bool OAIRcra01::is_rcra_indian_cntry_flg_Set() const{
    return m_rcra_indian_cntry_flg_isSet;
}

bool OAIRcra01::is_rcra_indian_cntry_flg_Valid() const{
    return m_rcra_indian_cntry_flg_isValid;
}

QString OAIRcra01::getRcraInspCnt() const {
    return m_rcra_insp_cnt;
}
void OAIRcra01::setRcraInspCnt(const QString &rcra_insp_cnt) {
    m_rcra_insp_cnt = rcra_insp_cnt;
    m_rcra_insp_cnt_isSet = true;
}

bool OAIRcra01::is_rcra_insp_cnt_Set() const{
    return m_rcra_insp_cnt_isSet;
}

bool OAIRcra01::is_rcra_insp_cnt_Valid() const{
    return m_rcra_insp_cnt_isValid;
}

QString OAIRcra01::getRcraLandTypeCode() const {
    return m_rcra_land_type_code;
}
void OAIRcra01::setRcraLandTypeCode(const QString &rcra_land_type_code) {
    m_rcra_land_type_code = rcra_land_type_code;
    m_rcra_land_type_code_isSet = true;
}

bool OAIRcra01::is_rcra_land_type_code_Set() const{
    return m_rcra_land_type_code_isSet;
}

bool OAIRcra01::is_rcra_land_type_code_Valid() const{
    return m_rcra_land_type_code_isValid;
}

QString OAIRcra01::getRcraLastFeaDate() const {
    return m_rcra_last_fea_date;
}
void OAIRcra01::setRcraLastFeaDate(const QString &rcra_last_fea_date) {
    m_rcra_last_fea_date = rcra_last_fea_date;
    m_rcra_last_fea_date_isSet = true;
}

bool OAIRcra01::is_rcra_last_fea_date_Set() const{
    return m_rcra_last_fea_date_isSet;
}

bool OAIRcra01::is_rcra_last_fea_date_Valid() const{
    return m_rcra_last_fea_date_isValid;
}

QString OAIRcra01::getRcraLastFeaDateEpa() const {
    return m_rcra_last_fea_date_epa;
}
void OAIRcra01::setRcraLastFeaDateEpa(const QString &rcra_last_fea_date_epa) {
    m_rcra_last_fea_date_epa = rcra_last_fea_date_epa;
    m_rcra_last_fea_date_epa_isSet = true;
}

bool OAIRcra01::is_rcra_last_fea_date_epa_Set() const{
    return m_rcra_last_fea_date_epa_isSet;
}

bool OAIRcra01::is_rcra_last_fea_date_epa_Valid() const{
    return m_rcra_last_fea_date_epa_isValid;
}

QString OAIRcra01::getRcraLastFeaDateState() const {
    return m_rcra_last_fea_date_state;
}
void OAIRcra01::setRcraLastFeaDateState(const QString &rcra_last_fea_date_state) {
    m_rcra_last_fea_date_state = rcra_last_fea_date_state;
    m_rcra_last_fea_date_state_isSet = true;
}

bool OAIRcra01::is_rcra_last_fea_date_state_Set() const{
    return m_rcra_last_fea_date_state_isSet;
}

bool OAIRcra01::is_rcra_last_fea_date_state_Valid() const{
    return m_rcra_last_fea_date_state_isValid;
}

QString OAIRcra01::getRcraLastIeaDate() const {
    return m_rcra_last_iea_date;
}
void OAIRcra01::setRcraLastIeaDate(const QString &rcra_last_iea_date) {
    m_rcra_last_iea_date = rcra_last_iea_date;
    m_rcra_last_iea_date_isSet = true;
}

bool OAIRcra01::is_rcra_last_iea_date_Set() const{
    return m_rcra_last_iea_date_isSet;
}

bool OAIRcra01::is_rcra_last_iea_date_Valid() const{
    return m_rcra_last_iea_date_isValid;
}

QString OAIRcra01::getRcraLastIeaDateEpa() const {
    return m_rcra_last_iea_date_epa;
}
void OAIRcra01::setRcraLastIeaDateEpa(const QString &rcra_last_iea_date_epa) {
    m_rcra_last_iea_date_epa = rcra_last_iea_date_epa;
    m_rcra_last_iea_date_epa_isSet = true;
}

bool OAIRcra01::is_rcra_last_iea_date_epa_Set() const{
    return m_rcra_last_iea_date_epa_isSet;
}

bool OAIRcra01::is_rcra_last_iea_date_epa_Valid() const{
    return m_rcra_last_iea_date_epa_isValid;
}

QString OAIRcra01::getRcraLastIeaDateState() const {
    return m_rcra_last_iea_date_state;
}
void OAIRcra01::setRcraLastIeaDateState(const QString &rcra_last_iea_date_state) {
    m_rcra_last_iea_date_state = rcra_last_iea_date_state;
    m_rcra_last_iea_date_state_isSet = true;
}

bool OAIRcra01::is_rcra_last_iea_date_state_Set() const{
    return m_rcra_last_iea_date_state_isSet;
}

bool OAIRcra01::is_rcra_last_iea_date_state_Valid() const{
    return m_rcra_last_iea_date_state_isValid;
}

QString OAIRcra01::getRcraLastInspDateEpa() const {
    return m_rcra_last_insp_date_epa;
}
void OAIRcra01::setRcraLastInspDateEpa(const QString &rcra_last_insp_date_epa) {
    m_rcra_last_insp_date_epa = rcra_last_insp_date_epa;
    m_rcra_last_insp_date_epa_isSet = true;
}

bool OAIRcra01::is_rcra_last_insp_date_epa_Set() const{
    return m_rcra_last_insp_date_epa_isSet;
}

bool OAIRcra01::is_rcra_last_insp_date_epa_Valid() const{
    return m_rcra_last_insp_date_epa_isValid;
}

QString OAIRcra01::getRcraLastInspDateState() const {
    return m_rcra_last_insp_date_state;
}
void OAIRcra01::setRcraLastInspDateState(const QString &rcra_last_insp_date_state) {
    m_rcra_last_insp_date_state = rcra_last_insp_date_state;
    m_rcra_last_insp_date_state_isSet = true;
}

bool OAIRcra01::is_rcra_last_insp_date_state_Set() const{
    return m_rcra_last_insp_date_state_isSet;
}

bool OAIRcra01::is_rcra_last_insp_date_state_Valid() const{
    return m_rcra_last_insp_date_state_isValid;
}

QString OAIRcra01::getRcraLastInspectionDate() const {
    return m_rcra_last_inspection_date;
}
void OAIRcra01::setRcraLastInspectionDate(const QString &rcra_last_inspection_date) {
    m_rcra_last_inspection_date = rcra_last_inspection_date;
    m_rcra_last_inspection_date_isSet = true;
}

bool OAIRcra01::is_rcra_last_inspection_date_Set() const{
    return m_rcra_last_inspection_date_isSet;
}

bool OAIRcra01::is_rcra_last_inspection_date_Valid() const{
    return m_rcra_last_inspection_date_isValid;
}

QString OAIRcra01::getRcraLastPenaltyDate() const {
    return m_rcra_last_penalty_date;
}
void OAIRcra01::setRcraLastPenaltyDate(const QString &rcra_last_penalty_date) {
    m_rcra_last_penalty_date = rcra_last_penalty_date;
    m_rcra_last_penalty_date_isSet = true;
}

bool OAIRcra01::is_rcra_last_penalty_date_Set() const{
    return m_rcra_last_penalty_date_isSet;
}

bool OAIRcra01::is_rcra_last_penalty_date_Valid() const{
    return m_rcra_last_penalty_date_isValid;
}

QString OAIRcra01::getRcraMapIcon() const {
    return m_rcra_map_icon;
}
void OAIRcra01::setRcraMapIcon(const QString &rcra_map_icon) {
    m_rcra_map_icon = rcra_map_icon;
    m_rcra_map_icon_isSet = true;
}

bool OAIRcra01::is_rcra_map_icon_Set() const{
    return m_rcra_map_icon_isSet;
}

bool OAIRcra01::is_rcra_map_icon_Valid() const{
    return m_rcra_map_icon_isValid;
}

QString OAIRcra01::getRcranaics() const {
    return m_rcranaics;
}
void OAIRcra01::setRcranaics(const QString &rcranaics) {
    m_rcranaics = rcranaics;
    m_rcranaics_isSet = true;
}

bool OAIRcra01::is_rcranaics_Set() const{
    return m_rcranaics_isSet;
}

bool OAIRcra01::is_rcranaics_Valid() const{
    return m_rcranaics_isValid;
}

QString OAIRcra01::getRcraName() const {
    return m_rcra_name;
}
void OAIRcra01::setRcraName(const QString &rcra_name) {
    m_rcra_name = rcra_name;
    m_rcra_name_isSet = true;
}

bool OAIRcra01::is_rcra_name_Set() const{
    return m_rcra_name_isSet;
}

bool OAIRcra01::is_rcra_name_Valid() const{
    return m_rcra_name_isValid;
}

QString OAIRcra01::getRcraOldestOpenVioDate() const {
    return m_rcra_oldest_open_vio_date;
}
void OAIRcra01::setRcraOldestOpenVioDate(const QString &rcra_oldest_open_vio_date) {
    m_rcra_oldest_open_vio_date = rcra_oldest_open_vio_date;
    m_rcra_oldest_open_vio_date_isSet = true;
}

bool OAIRcra01::is_rcra_oldest_open_vio_date_Set() const{
    return m_rcra_oldest_open_vio_date_isSet;
}

bool OAIRcra01::is_rcra_oldest_open_vio_date_Valid() const{
    return m_rcra_oldest_open_vio_date_isValid;
}

QString OAIRcra01::getRcraPenalties() const {
    return m_rcra_penalties;
}
void OAIRcra01::setRcraPenalties(const QString &rcra_penalties) {
    m_rcra_penalties = rcra_penalties;
    m_rcra_penalties_isSet = true;
}

bool OAIRcra01::is_rcra_penalties_Set() const{
    return m_rcra_penalties_isSet;
}

bool OAIRcra01::is_rcra_penalties_Valid() const{
    return m_rcra_penalties_isValid;
}

QString OAIRcra01::getRcraQtrsWithNc() const {
    return m_rcra_qtrs_with_nc;
}
void OAIRcra01::setRcraQtrsWithNc(const QString &rcra_qtrs_with_nc) {
    m_rcra_qtrs_with_nc = rcra_qtrs_with_nc;
    m_rcra_qtrs_with_nc_isSet = true;
}

bool OAIRcra01::is_rcra_qtrs_with_nc_Set() const{
    return m_rcra_qtrs_with_nc_isSet;
}

bool OAIRcra01::is_rcra_qtrs_with_nc_Valid() const{
    return m_rcra_qtrs_with_nc_isValid;
}

QString OAIRcra01::getRcraQtrsWithSnc() const {
    return m_rcra_qtrs_with_snc;
}
void OAIRcra01::setRcraQtrsWithSnc(const QString &rcra_qtrs_with_snc) {
    m_rcra_qtrs_with_snc = rcra_qtrs_with_snc;
    m_rcra_qtrs_with_snc_isSet = true;
}

bool OAIRcra01::is_rcra_qtrs_with_snc_Set() const{
    return m_rcra_qtrs_with_snc_isSet;
}

bool OAIRcra01::is_rcra_qtrs_with_snc_Valid() const{
    return m_rcra_qtrs_with_snc_isValid;
}

QString OAIRcra01::getRcrasnc() const {
    return m_rcrasnc;
}
void OAIRcra01::setRcrasnc(const QString &rcrasnc) {
    m_rcrasnc = rcrasnc;
    m_rcrasnc_isSet = true;
}

bool OAIRcra01::is_rcrasnc_Set() const{
    return m_rcrasnc_isSet;
}

bool OAIRcra01::is_rcrasnc_Valid() const{
    return m_rcrasnc_isValid;
}

QString OAIRcra01::getRcraState() const {
    return m_rcra_state;
}
void OAIRcra01::setRcraState(const QString &rcra_state) {
    m_rcra_state = rcra_state;
    m_rcra_state_isSet = true;
}

bool OAIRcra01::is_rcra_state_Set() const{
    return m_rcra_state_isSet;
}

bool OAIRcra01::is_rcra_state_Valid() const{
    return m_rcra_state_isValid;
}

QString OAIRcra01::getRcraStateDistrict() const {
    return m_rcra_state_district;
}
void OAIRcra01::setRcraStateDistrict(const QString &rcra_state_district) {
    m_rcra_state_district = rcra_state_district;
    m_rcra_state_district_isSet = true;
}

bool OAIRcra01::is_rcra_state_district_Set() const{
    return m_rcra_state_district_isSet;
}

bool OAIRcra01::is_rcra_state_district_Valid() const{
    return m_rcra_state_district_isValid;
}

QString OAIRcra01::getRcraStatus() const {
    return m_rcra_status;
}
void OAIRcra01::setRcraStatus(const QString &rcra_status) {
    m_rcra_status = rcra_status;
    m_rcra_status_isSet = true;
}

bool OAIRcra01::is_rcra_status_Set() const{
    return m_rcra_status_isSet;
}

bool OAIRcra01::is_rcra_status_Valid() const{
    return m_rcra_status_isValid;
}

QString OAIRcra01::getRcraStreet() const {
    return m_rcra_street;
}
void OAIRcra01::setRcraStreet(const QString &rcra_street) {
    m_rcra_street = rcra_street;
    m_rcra_street_isSet = true;
}

bool OAIRcra01::is_rcra_street_Set() const{
    return m_rcra_street_isSet;
}

bool OAIRcra01::is_rcra_street_Valid() const{
    return m_rcra_street_isValid;
}

QString OAIRcra01::getRcratrIbalLandCode() const {
    return m_rcratr_ibal_land_code;
}
void OAIRcra01::setRcratrIbalLandCode(const QString &rcratr_ibal_land_code) {
    m_rcratr_ibal_land_code = rcratr_ibal_land_code;
    m_rcratr_ibal_land_code_isSet = true;
}

bool OAIRcra01::is_rcratr_ibal_land_code_Set() const{
    return m_rcratr_ibal_land_code_isSet;
}

bool OAIRcra01::is_rcratr_ibal_land_code_Valid() const{
    return m_rcratr_ibal_land_code_isValid;
}

QString OAIRcra01::getRcraUniverse() const {
    return m_rcra_universe;
}
void OAIRcra01::setRcraUniverse(const QString &rcra_universe) {
    m_rcra_universe = rcra_universe;
    m_rcra_universe_isSet = true;
}

bool OAIRcra01::is_rcra_universe_Set() const{
    return m_rcra_universe_isSet;
}

bool OAIRcra01::is_rcra_universe_Valid() const{
    return m_rcra_universe_isValid;
}

QString OAIRcra01::getRcraViolationTypes() const {
    return m_rcra_violation_types;
}
void OAIRcra01::setRcraViolationTypes(const QString &rcra_violation_types) {
    m_rcra_violation_types = rcra_violation_types;
    m_rcra_violation_types_isSet = true;
}

bool OAIRcra01::is_rcra_violation_types_Set() const{
    return m_rcra_violation_types_isSet;
}

bool OAIRcra01::is_rcra_violation_types_Valid() const{
    return m_rcra_violation_types_isValid;
}

QString OAIRcra01::getRcraZip() const {
    return m_rcra_zip;
}
void OAIRcra01::setRcraZip(const QString &rcra_zip) {
    m_rcra_zip = rcra_zip;
    m_rcra_zip_isSet = true;
}

bool OAIRcra01::is_rcra_zip_Set() const{
    return m_rcra_zip_isSet;
}

bool OAIRcra01::is_rcra_zip_Valid() const{
    return m_rcra_zip_isValid;
}

QString OAIRcra01::getRcrAinfoLandTypeCode() const {
    return m_rcr_ainfo_land_type_code;
}
void OAIRcra01::setRcrAinfoLandTypeCode(const QString &rcr_ainfo_land_type_code) {
    m_rcr_ainfo_land_type_code = rcr_ainfo_land_type_code;
    m_rcr_ainfo_land_type_code_isSet = true;
}

bool OAIRcra01::is_rcr_ainfo_land_type_code_Set() const{
    return m_rcr_ainfo_land_type_code_isSet;
}

bool OAIRcra01::is_rcr_ainfo_land_type_code_Valid() const{
    return m_rcr_ainfo_land_type_code_isValid;
}

QString OAIRcra01::getRcrAinfoLandTypeDesc() const {
    return m_rcr_ainfo_land_type_desc;
}
void OAIRcra01::setRcrAinfoLandTypeDesc(const QString &rcr_ainfo_land_type_desc) {
    m_rcr_ainfo_land_type_desc = rcr_ainfo_land_type_desc;
    m_rcr_ainfo_land_type_desc_isSet = true;
}

bool OAIRcra01::is_rcr_ainfo_land_type_desc_Set() const{
    return m_rcr_ainfo_land_type_desc_isSet;
}

bool OAIRcra01::is_rcr_ainfo_land_type_desc_Valid() const{
    return m_rcr_ainfo_land_type_desc_isValid;
}

QString OAIRcra01::getReferencePoint() const {
    return m_reference_point;
}
void OAIRcra01::setReferencePoint(const QString &reference_point) {
    m_reference_point = reference_point;
    m_reference_point_isSet = true;
}

bool OAIRcra01::is_reference_point_Set() const{
    return m_reference_point_isSet;
}

bool OAIRcra01::is_reference_point_Valid() const{
    return m_reference_point_isValid;
}

QString OAIRcra01::getRegistryId() const {
    return m_registry_id;
}
void OAIRcra01::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIRcra01::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIRcra01::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIRcra01::getRmpIds() const {
    return m_rmp_ids;
}
void OAIRcra01::setRmpIds(const QString &rmp_ids) {
    m_rmp_ids = rmp_ids;
    m_rmp_ids_isSet = true;
}

bool OAIRcra01::is_rmp_ids_Set() const{
    return m_rmp_ids_isSet;
}

bool OAIRcra01::is_rmp_ids_Valid() const{
    return m_rmp_ids_isValid;
}

QString OAIRcra01::getSdwaids() const {
    return m_sdwaids;
}
void OAIRcra01::setSdwaids(const QString &sdwaids) {
    m_sdwaids = sdwaids;
    m_sdwaids_isSet = true;
}

bool OAIRcra01::is_sdwaids_Set() const{
    return m_sdwaids_isSet;
}

bool OAIRcra01::is_sdwaids_Valid() const{
    return m_sdwaids_isValid;
}

QString OAIRcra01::getScore() const {
    return m_score;
}
void OAIRcra01::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRcra01::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRcra01::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIRcra01::getSemsIds() const {
    return m_sems_ids;
}
void OAIRcra01::setSemsIds(const QString &sems_ids) {
    m_sems_ids = sems_ids;
    m_sems_ids_isSet = true;
}

bool OAIRcra01::is_sems_ids_Set() const{
    return m_sems_ids_isSet;
}

bool OAIRcra01::is_sems_ids_Valid() const{
    return m_sems_ids_isValid;
}

QString OAIRcra01::getSourceId() const {
    return m_source_id;
}
void OAIRcra01::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIRcra01::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIRcra01::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIRcra01::getStatute() const {
    return m_statute;
}
void OAIRcra01::setStatute(const QString &statute) {
    m_statute = statute;
    m_statute_isSet = true;
}

bool OAIRcra01::is_statute_Set() const{
    return m_statute_isSet;
}

bool OAIRcra01::is_statute_Valid() const{
    return m_statute_isValid;
}

QString OAIRcra01::getTriids() const {
    return m_triids;
}
void OAIRcra01::setTriids(const QString &triids) {
    m_triids = triids;
    m_triids_isSet = true;
}

bool OAIRcra01::is_triids_Set() const{
    return m_triids_isSet;
}

bool OAIRcra01::is_triids_Valid() const{
    return m_triids_isValid;
}

QString OAIRcra01::getTrIbalFlag() const {
    return m_tr_ibal_flag;
}
void OAIRcra01::setTrIbalFlag(const QString &tr_ibal_flag) {
    m_tr_ibal_flag = tr_ibal_flag;
    m_tr_ibal_flag_isSet = true;
}

bool OAIRcra01::is_tr_ibal_flag_Set() const{
    return m_tr_ibal_flag_isSet;
}

bool OAIRcra01::is_tr_ibal_flag_Valid() const{
    return m_tr_ibal_flag_isValid;
}

QString OAIRcra01::getTsdf() const {
    return m_tsdf;
}
void OAIRcra01::setTsdf(const QString &tsdf) {
    m_tsdf = tsdf;
    m_tsdf_isSet = true;
}

bool OAIRcra01::is_tsdf_Set() const{
    return m_tsdf_isSet;
}

bool OAIRcra01::is_tsdf_Valid() const{
    return m_tsdf_isValid;
}

QString OAIRcra01::getViolFlag() const {
    return m_viol_flag;
}
void OAIRcra01::setViolFlag(const QString &viol_flag) {
    m_viol_flag = viol_flag;
    m_viol_flag_isSet = true;
}

bool OAIRcra01::is_viol_flag_Set() const{
    return m_viol_flag_isSet;
}

bool OAIRcra01::is_viol_flag_Valid() const{
    return m_viol_flag_isValid;
}

QString OAIRcra01::getWebDocs() const {
    return m_web_docs;
}
void OAIRcra01::setWebDocs(const QString &web_docs) {
    m_web_docs = web_docs;
    m_web_docs_isSet = true;
}

bool OAIRcra01::is_web_docs_Set() const{
    return m_web_docs_isSet;
}

bool OAIRcra01::is_web_docs_Valid() const{
    return m_web_docs_isValid;
}

bool OAIRcra01::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_accuracy_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_census_block_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chem_names_rel_land_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chesapeake_bay_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleanup_action_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_sv_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_vio_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_record_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ejscreen_flag_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_huc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_tr_ibes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_derived_wbd_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_federal_agency_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_indian_spatial_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_percent_minority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_population_density_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_sic_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_std_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_land_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_off_site_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_trion_site_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_tri_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fac_us_mex_border_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infea5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_violation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pctile_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over80_count_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_cancer_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_dpm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_o3_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pctpre1960_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_pm_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npdesus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_npl_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_rmp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_proximity_tsdf_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_resp_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pctile_traffic_score_us_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_case_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_compl_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_days_last_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcraepa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcrafips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_fea_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcraids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_iea_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_imp_water_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_indian_cntry_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_insp_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_land_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_fea_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_fea_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_fea_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_iea_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_iea_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_iea_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_insp_date_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_insp_date_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_inspection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_last_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcranaics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_oldest_open_vio_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_qtrs_with_nc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_qtrs_with_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcrasnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_state_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcratr_ibal_land_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_universe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_violation_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcr_ainfo_land_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcr_ainfo_land_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmp_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwaids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sems_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_ibal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsdf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viol_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_docs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRcra01::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_airids_isValid && m_active_lower48_isValid && m_cwaids_isValid && m_calculated_accuracy_meters_isValid && m_census_block_group_isValid && m_chem_names_rel_land_isValid && m_chesapeake_bay_flag_isValid && m_cleanup_action_flag_isValid && m_collection_method_isValid && m_curr_sv_flag_isValid && m_curr_vio_flag_isValid && m_current_vio_cnt_isValid && m_date_last_record_review_isValid && m_epa_system_isValid && m_ea5yr_flag_isValid && m_ejscreen_flag_isValid && m_ejscreen_flag_us_isValid && m_fac_county_name_isValid && m_fac_derived_huc_isValid && m_fac_derived_tr_ibes_isValid && m_fac_derived_wbd_isValid && m_fac_derived_wbd_name_isValid && m_fac_fips_code_isValid && m_fac_federal_agency_code_isValid && m_fac_federal_agency_name_isValid && m_fac_indian_cntry_flg_isValid && m_fac_indian_spatial_flg_isValid && m_fac_lat_isValid && m_fac_long_isValid && m_fac_map_flg_isValid && m_fac_map_icon_isValid && m_fac_percent_minority_isValid && m_fac_population_density_isValid && m_fac_sic_codes_isValid && m_fac_std_county_name_isValid && m_fac_tri_land_releases_isValid && m_fac_tri_off_site_transfers_isValid && m_fac_trion_site_releases_isValid && m_fac_tri_reporter_isValid && m_fac_us_mex_border_flg_isValid && m_infea5yr_flag_isValid && m_insp5yr_flag_isValid && m_last_violation_date_isValid && m_lower48_isValid && m_map_isValid && m_max_pctile_us_isValid && m_max_score_isValid && m_operator_code_isValid && m_operator_desc_isValid && m_over80_count_us_isValid && m_owner_code_isValid && m_owner_desc_isValid && m_pctile_cancer_us_isValid && m_pctile_dpm_us_isValid && m_pctile_o3_us_isValid && m_pctile_pctpre1960_us_isValid && m_pctile_pm_us_isValid && m_pctile_proximity_npdesus_isValid && m_pctile_proximity_npl_us_isValid && m_pctile_proximity_rmp_us_isValid && m_pctile_proximity_tsdf_us_isValid && m_pctile_resp_us_isValid && m_pctile_traffic_score_us_isValid && m_rcra3yr_compl_qtrs_history_isValid && m_rcra_case_ids_isValid && m_rcra_city_isValid && m_rcra_compl_status_isValid && m_rcra_county_isValid && m_rcra_days_last_inspection_isValid && m_rcraepa_region_isValid && m_rcrafips_code_isValid && m_rcra_fea_cnt_isValid && m_rcraids_isValid && m_rcra_iea_cnt_isValid && m_rcra_imp_water_flg_isValid && m_rcra_indian_cntry_flg_isValid && m_rcra_insp_cnt_isValid && m_rcra_land_type_code_isValid && m_rcra_last_fea_date_isValid && m_rcra_last_fea_date_epa_isValid && m_rcra_last_fea_date_state_isValid && m_rcra_last_iea_date_isValid && m_rcra_last_iea_date_epa_isValid && m_rcra_last_iea_date_state_isValid && m_rcra_last_insp_date_epa_isValid && m_rcra_last_insp_date_state_isValid && m_rcra_last_inspection_date_isValid && m_rcra_last_penalty_date_isValid && m_rcra_map_icon_isValid && m_rcranaics_isValid && m_rcra_name_isValid && m_rcra_oldest_open_vio_date_isValid && m_rcra_penalties_isValid && m_rcra_qtrs_with_nc_isValid && m_rcra_qtrs_with_snc_isValid && m_rcrasnc_isValid && m_rcra_state_isValid && m_rcra_state_district_isValid && m_rcra_status_isValid && m_rcra_street_isValid && m_rcratr_ibal_land_code_isValid && m_rcra_universe_isValid && m_rcra_violation_types_isValid && m_rcra_zip_isValid && m_rcr_ainfo_land_type_code_isValid && m_rcr_ainfo_land_type_desc_isValid && m_reference_point_isValid && m_registry_id_isValid && m_rmp_ids_isValid && m_sdwaids_isValid && m_score_isValid && m_sems_ids_isValid && m_source_id_isValid && m_statute_isValid && m_triids_isValid && m_tr_ibal_flag_isValid && m_tsdf_isValid && m_viol_flag_isValid && m_web_docs_isValid && true;
}

} // namespace OpenAPI
