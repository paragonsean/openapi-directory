/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Resource Conservation and Recovery Act 
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    RCRA Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on hazardous waste handlers/facilities regulated under the Resource Conservation and Recovery Act (RCRA).   The returned results reflect data drawn from EPA's RCRAInfo database. \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.   The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRcra04.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRcra04::OAIRcra04(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRcra04::OAIRcra04() {
    this->initializeModel();
}

OAIRcra04::~OAIRcra04() {}

void OAIRcra04::initializeModel() {

    m_bad_system_ids_isSet = false;
    m_bad_system_ids_isValid = false;

    m_cv_rows_isSet = false;
    m_cv_rows_isValid = false;

    m_fea_rows_isSet = false;
    m_fea_rows_isValid = false;

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_insp_rows_isSet = false;
    m_insp_rows_isValid = false;

    m_indian_country_rows_isSet = false;
    m_indian_country_rows_isValid = false;

    m_inf_fea_rows_isSet = false;
    m_inf_fea_rows_isValid = false;

    m_map_output_isSet = false;
    m_map_output_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_no_isSet = false;
    m_page_no_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_rows_isSet = false;
    m_query_rows_isValid = false;

    m_sv_rows_isSet = false;
    m_sv_rows_isValid = false;

    m_total_penalties_isSet = false;
    m_total_penalties_isValid = false;

    m_v3_rows_isSet = false;
    m_v3_rows_isValid = false;
}

void OAIRcra04::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRcra04::fromJsonObject(QJsonObject json) {

    m_bad_system_ids_isValid = ::OpenAPI::fromJsonValue(m_bad_system_ids, json[QString("BadSystemIDs")]);
    m_bad_system_ids_isSet = !json[QString("BadSystemIDs")].isNull() && m_bad_system_ids_isValid;

    m_cv_rows_isValid = ::OpenAPI::fromJsonValue(m_cv_rows, json[QString("CVRows")]);
    m_cv_rows_isSet = !json[QString("CVRows")].isNull() && m_cv_rows_isValid;

    m_fea_rows_isValid = ::OpenAPI::fromJsonValue(m_fea_rows, json[QString("FEARows")]);
    m_fea_rows_isSet = !json[QString("FEARows")].isNull() && m_fea_rows_isValid;

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("Facilities")]);
    m_facilities_isSet = !json[QString("Facilities")].isNull() && m_facilities_isValid;

    m_insp_rows_isValid = ::OpenAPI::fromJsonValue(m_insp_rows, json[QString("INSPRows")]);
    m_insp_rows_isSet = !json[QString("INSPRows")].isNull() && m_insp_rows_isValid;

    m_indian_country_rows_isValid = ::OpenAPI::fromJsonValue(m_indian_country_rows, json[QString("IndianCountryRows")]);
    m_indian_country_rows_isSet = !json[QString("IndianCountryRows")].isNull() && m_indian_country_rows_isValid;

    m_inf_fea_rows_isValid = ::OpenAPI::fromJsonValue(m_inf_fea_rows, json[QString("InfFEARows")]);
    m_inf_fea_rows_isSet = !json[QString("InfFEARows")].isNull() && m_inf_fea_rows_isValid;

    m_map_output_isValid = ::OpenAPI::fromJsonValue(m_map_output, json[QString("MapOutput")]);
    m_map_output_isSet = !json[QString("MapOutput")].isNull() && m_map_output_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_page_no_isValid = ::OpenAPI::fromJsonValue(m_page_no, json[QString("PageNo")]);
    m_page_no_isSet = !json[QString("PageNo")].isNull() && m_page_no_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryID")]);
    m_query_id_isSet = !json[QString("QueryID")].isNull() && m_query_id_isValid;

    m_query_rows_isValid = ::OpenAPI::fromJsonValue(m_query_rows, json[QString("QueryRows")]);
    m_query_rows_isSet = !json[QString("QueryRows")].isNull() && m_query_rows_isValid;

    m_sv_rows_isValid = ::OpenAPI::fromJsonValue(m_sv_rows, json[QString("SVRows")]);
    m_sv_rows_isSet = !json[QString("SVRows")].isNull() && m_sv_rows_isValid;

    m_total_penalties_isValid = ::OpenAPI::fromJsonValue(m_total_penalties, json[QString("TotalPenalties")]);
    m_total_penalties_isSet = !json[QString("TotalPenalties")].isNull() && m_total_penalties_isValid;

    m_v3_rows_isValid = ::OpenAPI::fromJsonValue(m_v3_rows, json[QString("V3Rows")]);
    m_v3_rows_isSet = !json[QString("V3Rows")].isNull() && m_v3_rows_isValid;
}

QString OAIRcra04::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRcra04::asJsonObject() const {
    QJsonObject obj;
    if (m_bad_system_ids_isSet) {
        obj.insert(QString("BadSystemIDs"), ::OpenAPI::toJsonValue(m_bad_system_ids));
    }
    if (m_cv_rows_isSet) {
        obj.insert(QString("CVRows"), ::OpenAPI::toJsonValue(m_cv_rows));
    }
    if (m_fea_rows_isSet) {
        obj.insert(QString("FEARows"), ::OpenAPI::toJsonValue(m_fea_rows));
    }
    if (m_facilities.size() > 0) {
        obj.insert(QString("Facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_insp_rows_isSet) {
        obj.insert(QString("INSPRows"), ::OpenAPI::toJsonValue(m_insp_rows));
    }
    if (m_indian_country_rows_isSet) {
        obj.insert(QString("IndianCountryRows"), ::OpenAPI::toJsonValue(m_indian_country_rows));
    }
    if (m_inf_fea_rows_isSet) {
        obj.insert(QString("InfFEARows"), ::OpenAPI::toJsonValue(m_inf_fea_rows));
    }
    if (m_map_output.isSet()) {
        obj.insert(QString("MapOutput"), ::OpenAPI::toJsonValue(m_map_output));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_no_isSet) {
        obj.insert(QString("PageNo"), ::OpenAPI::toJsonValue(m_page_no));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("QueryID"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_rows_isSet) {
        obj.insert(QString("QueryRows"), ::OpenAPI::toJsonValue(m_query_rows));
    }
    if (m_sv_rows_isSet) {
        obj.insert(QString("SVRows"), ::OpenAPI::toJsonValue(m_sv_rows));
    }
    if (m_total_penalties_isSet) {
        obj.insert(QString("TotalPenalties"), ::OpenAPI::toJsonValue(m_total_penalties));
    }
    if (m_v3_rows_isSet) {
        obj.insert(QString("V3Rows"), ::OpenAPI::toJsonValue(m_v3_rows));
    }
    return obj;
}

QString OAIRcra04::getBadSystemIds() const {
    return m_bad_system_ids;
}
void OAIRcra04::setBadSystemIds(const QString &bad_system_ids) {
    m_bad_system_ids = bad_system_ids;
    m_bad_system_ids_isSet = true;
}

bool OAIRcra04::is_bad_system_ids_Set() const{
    return m_bad_system_ids_isSet;
}

bool OAIRcra04::is_bad_system_ids_Valid() const{
    return m_bad_system_ids_isValid;
}

QString OAIRcra04::getCvRows() const {
    return m_cv_rows;
}
void OAIRcra04::setCvRows(const QString &cv_rows) {
    m_cv_rows = cv_rows;
    m_cv_rows_isSet = true;
}

bool OAIRcra04::is_cv_rows_Set() const{
    return m_cv_rows_isSet;
}

bool OAIRcra04::is_cv_rows_Valid() const{
    return m_cv_rows_isValid;
}

QString OAIRcra04::getFeaRows() const {
    return m_fea_rows;
}
void OAIRcra04::setFeaRows(const QString &fea_rows) {
    m_fea_rows = fea_rows;
    m_fea_rows_isSet = true;
}

bool OAIRcra04::is_fea_rows_Set() const{
    return m_fea_rows_isSet;
}

bool OAIRcra04::is_fea_rows_Valid() const{
    return m_fea_rows_isValid;
}

QList<OAIRcra01> OAIRcra04::getFacilities() const {
    return m_facilities;
}
void OAIRcra04::setFacilities(const QList<OAIRcra01> &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIRcra04::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIRcra04::is_facilities_Valid() const{
    return m_facilities_isValid;
}

QString OAIRcra04::getInspRows() const {
    return m_insp_rows;
}
void OAIRcra04::setInspRows(const QString &insp_rows) {
    m_insp_rows = insp_rows;
    m_insp_rows_isSet = true;
}

bool OAIRcra04::is_insp_rows_Set() const{
    return m_insp_rows_isSet;
}

bool OAIRcra04::is_insp_rows_Valid() const{
    return m_insp_rows_isValid;
}

QString OAIRcra04::getIndianCountryRows() const {
    return m_indian_country_rows;
}
void OAIRcra04::setIndianCountryRows(const QString &indian_country_rows) {
    m_indian_country_rows = indian_country_rows;
    m_indian_country_rows_isSet = true;
}

bool OAIRcra04::is_indian_country_rows_Set() const{
    return m_indian_country_rows_isSet;
}

bool OAIRcra04::is_indian_country_rows_Valid() const{
    return m_indian_country_rows_isValid;
}

QString OAIRcra04::getInfFeaRows() const {
    return m_inf_fea_rows;
}
void OAIRcra04::setInfFeaRows(const QString &inf_fea_rows) {
    m_inf_fea_rows = inf_fea_rows;
    m_inf_fea_rows_isSet = true;
}

bool OAIRcra04::is_inf_fea_rows_Set() const{
    return m_inf_fea_rows_isSet;
}

bool OAIRcra04::is_inf_fea_rows_Valid() const{
    return m_inf_fea_rows_isValid;
}

OAIRcra03 OAIRcra04::getMapOutput() const {
    return m_map_output;
}
void OAIRcra04::setMapOutput(const OAIRcra03 &map_output) {
    m_map_output = map_output;
    m_map_output_isSet = true;
}

bool OAIRcra04::is_map_output_Set() const{
    return m_map_output_isSet;
}

bool OAIRcra04::is_map_output_Valid() const{
    return m_map_output_isValid;
}

QString OAIRcra04::getMessage() const {
    return m_message;
}
void OAIRcra04::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRcra04::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRcra04::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRcra04::getPageNo() const {
    return m_page_no;
}
void OAIRcra04::setPageNo(const QString &page_no) {
    m_page_no = page_no;
    m_page_no_isSet = true;
}

bool OAIRcra04::is_page_no_Set() const{
    return m_page_no_isSet;
}

bool OAIRcra04::is_page_no_Valid() const{
    return m_page_no_isValid;
}

QString OAIRcra04::getQueryId() const {
    return m_query_id;
}
void OAIRcra04::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIRcra04::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIRcra04::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIRcra04::getQueryRows() const {
    return m_query_rows;
}
void OAIRcra04::setQueryRows(const QString &query_rows) {
    m_query_rows = query_rows;
    m_query_rows_isSet = true;
}

bool OAIRcra04::is_query_rows_Set() const{
    return m_query_rows_isSet;
}

bool OAIRcra04::is_query_rows_Valid() const{
    return m_query_rows_isValid;
}

QString OAIRcra04::getSvRows() const {
    return m_sv_rows;
}
void OAIRcra04::setSvRows(const QString &sv_rows) {
    m_sv_rows = sv_rows;
    m_sv_rows_isSet = true;
}

bool OAIRcra04::is_sv_rows_Set() const{
    return m_sv_rows_isSet;
}

bool OAIRcra04::is_sv_rows_Valid() const{
    return m_sv_rows_isValid;
}

QString OAIRcra04::getTotalPenalties() const {
    return m_total_penalties;
}
void OAIRcra04::setTotalPenalties(const QString &total_penalties) {
    m_total_penalties = total_penalties;
    m_total_penalties_isSet = true;
}

bool OAIRcra04::is_total_penalties_Set() const{
    return m_total_penalties_isSet;
}

bool OAIRcra04::is_total_penalties_Valid() const{
    return m_total_penalties_isValid;
}

QString OAIRcra04::getV3Rows() const {
    return m_v3_rows;
}
void OAIRcra04::setV3Rows(const QString &v3_rows) {
    m_v3_rows = v3_rows;
    m_v3_rows_isSet = true;
}

bool OAIRcra04::is_v3_rows_Set() const{
    return m_v3_rows_isSet;
}

bool OAIRcra04::is_v3_rows_Valid() const{
    return m_v3_rows_isValid;
}

bool OAIRcra04::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bad_system_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cv_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fea_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indian_country_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inf_fea_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sv_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRcra04::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bad_system_ids_isValid && m_cv_rows_isValid && m_fea_rows_isValid && m_insp_rows_isValid && m_indian_country_rows_isValid && m_inf_fea_rows_isValid && m_message_isValid && m_page_no_isValid && m_query_id_isValid && m_query_rows_isValid && m_sv_rows_isValid && m_total_penalties_isValid && m_v3_rows_isValid && true;
}

} // namespace OpenAPI
