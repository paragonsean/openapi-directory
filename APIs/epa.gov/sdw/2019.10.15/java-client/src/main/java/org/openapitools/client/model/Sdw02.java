/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Sdw04;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:17.587402-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sdw02 {
  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAGE_NO = "PageNo";
  @SerializedName(SERIALIZED_NAME_PAGE_NO)
  private String pageNo;

  public static final String SERIALIZED_NAME_QUERY_I_D = "QueryID";
  @SerializedName(SERIALIZED_NAME_QUERY_I_D)
  private String queryID;

  public static final String SERIALIZED_NAME_QUERY_ROWS = "QueryRows";
  @SerializedName(SERIALIZED_NAME_QUERY_ROWS)
  private String queryRows;

  public static final String SERIALIZED_NAME_WATER_SYSTEMS = "WaterSystems";
  @SerializedName(SERIALIZED_NAME_WATER_SYSTEMS)
  private List<Sdw04> waterSystems = new ArrayList<>();

  public Sdw02() {
  }

  public Sdw02 message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Field to record messages (typically performance-related) about packet processing
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Sdw02 pageNo(String pageNo) {
    this.pageNo = pageNo;
    return this;
  }

  /**
   * The number of pages of results returned
   * @return pageNo
   */
  @javax.annotation.Nonnull
  public String getPageNo() {
    return pageNo;
  }

  public void setPageNo(String pageNo) {
    this.pageNo = pageNo;
  }


  public Sdw02 queryID(String queryID) {
    this.queryID = queryID;
    return this;
  }

  /**
   * Sequential number assigned to entire search result
   * @return queryID
   */
  @javax.annotation.Nonnull
  public String getQueryID() {
    return queryID;
  }

  public void setQueryID(String queryID) {
    this.queryID = queryID;
  }


  public Sdw02 queryRows(String queryRows) {
    this.queryRows = queryRows;
    return this;
  }

  /**
   * Number of query results returned
   * @return queryRows
   */
  @javax.annotation.Nonnull
  public String getQueryRows() {
    return queryRows;
  }

  public void setQueryRows(String queryRows) {
    this.queryRows = queryRows;
  }


  public Sdw02 waterSystems(List<Sdw04> waterSystems) {
    this.waterSystems = waterSystems;
    return this;
  }

  public Sdw02 addWaterSystemsItem(Sdw04 waterSystemsItem) {
    if (this.waterSystems == null) {
      this.waterSystems = new ArrayList<>();
    }
    this.waterSystems.add(waterSystemsItem);
    return this;
  }

  /**
   * Get waterSystems
   * @return waterSystems
   */
  @javax.annotation.Nullable
  public List<Sdw04> getWaterSystems() {
    return waterSystems;
  }

  public void setWaterSystems(List<Sdw04> waterSystems) {
    this.waterSystems = waterSystems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sdw02 sdw02 = (Sdw02) o;
    return Objects.equals(this.message, sdw02.message) &&
        Objects.equals(this.pageNo, sdw02.pageNo) &&
        Objects.equals(this.queryID, sdw02.queryID) &&
        Objects.equals(this.queryRows, sdw02.queryRows) &&
        Objects.equals(this.waterSystems, sdw02.waterSystems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, pageNo, queryID, queryRows, waterSystems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sdw02 {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pageNo: ").append(toIndentedString(pageNo)).append("\n");
    sb.append("    queryID: ").append(toIndentedString(queryID)).append("\n");
    sb.append("    queryRows: ").append(toIndentedString(queryRows)).append("\n");
    sb.append("    waterSystems: ").append(toIndentedString(waterSystems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Message");
    openapiFields.add("PageNo");
    openapiFields.add("QueryID");
    openapiFields.add("QueryRows");
    openapiFields.add("WaterSystems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("PageNo");
    openapiRequiredFields.add("QueryID");
    openapiRequiredFields.add("QueryRows");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sdw02
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sdw02.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sdw02 is not found in the empty JSON string", Sdw02.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sdw02.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sdw02` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sdw02.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if (!jsonObj.get("PageNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PageNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PageNo").toString()));
      }
      if (!jsonObj.get("QueryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryID").toString()));
      }
      if (!jsonObj.get("QueryRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryRows").toString()));
      }
      if (jsonObj.get("WaterSystems") != null && !jsonObj.get("WaterSystems").isJsonNull()) {
        JsonArray jsonArraywaterSystems = jsonObj.getAsJsonArray("WaterSystems");
        if (jsonArraywaterSystems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("WaterSystems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `WaterSystems` to be an array in the JSON string but got `%s`", jsonObj.get("WaterSystems").toString()));
          }

          // validate the optional field `WaterSystems` (array)
          for (int i = 0; i < jsonArraywaterSystems.size(); i++) {
            Sdw04.validateJsonElement(jsonArraywaterSystems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sdw02.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sdw02' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sdw02> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sdw02.class));

       return (TypeAdapter<T>) new TypeAdapter<Sdw02>() {
           @Override
           public void write(JsonWriter out, Sdw02 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sdw02 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sdw02 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sdw02
   * @throws IOException if the JSON string is invalid with respect to Sdw02
   */
  public static Sdw02 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sdw02.class);
  }

  /**
   * Convert an instance of Sdw02 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

