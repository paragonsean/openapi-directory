/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Significant Quarters in Noncompliance Limiter.  Enter one of the following codes to limit results to facilities having given quarters of noncompliance. - Z &#x3D; Zero quarters in noncompliance. - GE1 &#x3D; One or more quarters in noncompliance. - GT1 &#x3D; More than one quarters in noncompliance. - GE2 &#x3D; Two or more quarters in noncompliance. - GT2 &#x3D; More than two quarters in noncompliance. - GE4 &#x3D; Four or more quarters in noncompliance. - GT4 &#x3D; More than four quarters in noncompliance. - GE8 &#x3D; Eight or more quarters in noncompliance. - GT8 &#x3D; More than eight quarters in noncompliance. - GE12 &#x3D; Twelve or more quarters in noncompliance. - GT12 &#x3D; Twelve or more quarters in noncompliance. - 12 &#x3D; Exactly twelve quarters in noncompliance. Note the seemingly incongruous of GT12 is deliberate.
 */
@JsonAdapter(FormDataFPQis.Adapter.class)
public enum FormDataFPQis {
  
  Z("Z"),
  
  GE1("GE1"),
  
  GT1("GT1"),
  
  GE2("GE2"),
  
  GT2("GT2"),
  
  GE4("GE4"),
  
  GT4("GT4"),
  
  GE8("GE8"),
  
  GT8("GT8"),
  
  GE12("GE12"),
  
  GT12("GT12"),
  
  _12("12");

  private String value;

  FormDataFPQis(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FormDataFPQis fromValue(String value) {
    for (FormDataFPQis b : FormDataFPQis.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FormDataFPQis> {
    @Override
    public void write(final JsonWriter jsonWriter, final FormDataFPQis enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FormDataFPQis read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FormDataFPQis.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FormDataFPQis.fromValue(value);
  }
}

