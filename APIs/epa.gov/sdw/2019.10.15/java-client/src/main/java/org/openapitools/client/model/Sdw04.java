/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Safe Drinking Water Search Results Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:17.587402-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sdw04 {
  public static final String SERIALIZED_NAME_CITIES_SERVED = "CitiesServed";
  @SerializedName(SERIALIZED_NAME_CITIES_SERVED)
  private String citiesServed;

  public static final String SERIALIZED_NAME_COUNTIES_SERVED = "CountiesServed";
  @SerializedName(SERIALIZED_NAME_COUNTIES_SERVED)
  private String countiesServed;

  public static final String SERIALIZED_NAME_CU_ALE = "CuAle";
  @SerializedName(SERIALIZED_NAME_CU_ALE)
  private String cuAle;

  public static final String SERIALIZED_NAME_CU_VIOL = "CuViol";
  @SerializedName(SERIALIZED_NAME_CU_VIOL)
  private String cuViol;

  public static final String SERIALIZED_NAME_CURR_VIO_FLAG = "CurrVioFlag";
  @SerializedName(SERIALIZED_NAME_CURR_VIO_FLAG)
  private String currVioFlag;

  public static final String SERIALIZED_NAME_DATE_LAST_SANSURVEY = "DateLastSansurvey";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_SANSURVEY)
  private String dateLastSansurvey;

  public static final String SERIALIZED_NAME_DFR_URL = "DfrUrl";
  @SerializedName(SERIALIZED_NAME_DFR_URL)
  private String dfrUrl;

  public static final String SERIALIZED_NAME_EP_A_REGION = "EPARegion";
  @SerializedName(SERIALIZED_NAME_EP_A_REGION)
  private String epARegion;

  public static final String SERIALIZED_NAME_FI_P_S_CODES = "FIPSCodes";
  @SerializedName(SERIALIZED_NAME_FI_P_S_CODES)
  private String fiPSCodes;

  public static final String SERIALIZED_NAME_FEA_FLAG = "FeaFlag";
  @SerializedName(SERIALIZED_NAME_FEA_FLAG)
  private String feaFlag;

  public static final String SERIALIZED_NAME_FEAS = "Feas";
  @SerializedName(SERIALIZED_NAME_FEAS)
  private String feas;

  public static final String SERIALIZED_NAME_GW_SW_CODE = "GwSwCode";
  @SerializedName(SERIALIZED_NAME_GW_SW_CODE)
  private String gwSwCode;

  public static final String SERIALIZED_NAME_HEALTH_FLAG = "HealthFlag";
  @SerializedName(SERIALIZED_NAME_HEALTH_FLAG)
  private String healthFlag;

  public static final String SERIALIZED_NAME_IEA_FLAG = "IeaFlag";
  @SerializedName(SERIALIZED_NAME_IEA_FLAG)
  private String ieaFlag;

  public static final String SERIALIZED_NAME_IFEA = "Ifea";
  @SerializedName(SERIALIZED_NAME_IFEA)
  private String ifea;

  public static final String SERIALIZED_NAME_INDIAN_COUNTRY = "IndianCountry";
  @SerializedName(SERIALIZED_NAME_INDIAN_COUNTRY)
  private String indianCountry;

  public static final String SERIALIZED_NAME_INSP5YR_FLAG = "Insp5yrFlag";
  @SerializedName(SERIALIZED_NAME_INSP5YR_FLAG)
  private String insp5yrFlag;

  public static final String SERIALIZED_NAME_LEAD_AND_COPPER_VIOL = "LeadAndCopperViol";
  @SerializedName(SERIALIZED_NAME_LEAD_AND_COPPER_VIOL)
  private String leadAndCopperViol;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private String maxScore;

  public static final String SERIALIZED_NAME_MR_FLAG = "MrFlag";
  @SerializedName(SERIALIZED_NAME_MR_FLAG)
  private String mrFlag;

  public static final String SERIALIZED_NAME_NEW_VIO_FLG = "NewVioFlg";
  @SerializedName(SERIALIZED_NAME_NEW_VIO_FLG)
  private String newVioFlg;

  public static final String SERIALIZED_NAME_OTHER_FLAG = "OtherFlag";
  @SerializedName(SERIALIZED_NAME_OTHER_FLAG)
  private String otherFlag;

  public static final String SERIALIZED_NAME_OWNER_DESC = "OwnerDesc";
  @SerializedName(SERIALIZED_NAME_OWNER_DESC)
  private String ownerDesc;

  public static final String SERIALIZED_NAME_OWNER_TYPE_CODE = "OwnerTypeCode";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE_CODE)
  private String ownerTypeCode;

  public static final String SERIALIZED_NAME_PW_S_ACTIVITY_CODE = "PWSActivityCode";
  @SerializedName(SERIALIZED_NAME_PW_S_ACTIVITY_CODE)
  private String pwSActivityCode;

  public static final String SERIALIZED_NAME_PW_S_ACTIVITY_DESC = "PWSActivityDesc";
  @SerializedName(SERIALIZED_NAME_PW_S_ACTIVITY_DESC)
  private String pwSActivityDesc;

  public static final String SERIALIZED_NAME_PW_S_ID = "PWSId";
  @SerializedName(SERIALIZED_NAME_PW_S_ID)
  private String pwSId;

  public static final String SERIALIZED_NAME_PW_S_NAME = "PWSName";
  @SerializedName(SERIALIZED_NAME_PW_S_NAME)
  private String pwSName;

  public static final String SERIALIZED_NAME_PW_S_TYPE_CODE = "PWSTypeCode";
  @SerializedName(SERIALIZED_NAME_PW_S_TYPE_CODE)
  private String pwSTypeCode;

  public static final String SERIALIZED_NAME_PW_S_TYPE_DESC = "PWSTypeDesc";
  @SerializedName(SERIALIZED_NAME_PW_S_TYPE_DESC)
  private String pwSTypeDesc;

  public static final String SERIALIZED_NAME_PB_ALE = "PbAle";
  @SerializedName(SERIALIZED_NAME_PB_ALE)
  private String pbAle;

  public static final String SERIALIZED_NAME_PB_VIOL = "PbViol";
  @SerializedName(SERIALIZED_NAME_PB_VIOL)
  private String pbViol;

  public static final String SERIALIZED_NAME_PN_FLAG = "PnFlag";
  @SerializedName(SERIALIZED_NAME_PN_FLAG)
  private String pnFlag;

  public static final String SERIALIZED_NAME_POPULATION_SERVED_COUNT = "PopulationServedCount";
  @SerializedName(SERIALIZED_NAME_POPULATION_SERVED_COUNT)
  private String populationServedCount;

  public static final String SERIALIZED_NAME_PRIMARY_SOURCE_CODE = "PrimarySourceCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SOURCE_CODE)
  private String primarySourceCode;

  public static final String SERIALIZED_NAME_PRIMARY_SOURCE_DESC = "PrimarySourceDesc";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SOURCE_DESC)
  private String primarySourceDesc;

  public static final String SERIALIZED_NAME_QTRS_WITH_S_N_C = "QtrsWithSNC";
  @SerializedName(SERIALIZED_NAME_QTRS_WITH_S_N_C)
  private String qtrsWithSNC;

  public static final String SERIALIZED_NAME_QTRS_WITH_VIO = "QtrsWithVio";
  @SerializedName(SERIALIZED_NAME_QTRS_WITH_VIO)
  private String qtrsWithVio;

  public static final String SERIALIZED_NAME_RC350_VIOL = "Rc350Viol";
  @SerializedName(SERIALIZED_NAME_RC350_VIOL)
  private String rc350Viol;

  public static final String SERIALIZED_NAME_REGISTRY_I_D = "RegistryID";
  @SerializedName(SERIALIZED_NAME_REGISTRY_I_D)
  private String registryID;

  public static final String SERIALIZED_NAME_RULES_VIO = "RulesVio";
  @SerializedName(SERIALIZED_NAME_RULES_VIO)
  private String rulesVio;

  public static final String SERIALIZED_NAME_RULES_VIO3YR = "RulesVio3yr";
  @SerializedName(SERIALIZED_NAME_RULES_VIO3YR)
  private String rulesVio3yr;

  public static final String SERIALIZED_NAME_SD_W_A3YR_COMPL_QTRS_HISTORY = "SDWA3yrComplQtrsHistory";
  @SerializedName(SERIALIZED_NAME_SD_W_A3YR_COMPL_QTRS_HISTORY)
  private String sdWA3yrComplQtrsHistory;

  public static final String SERIALIZED_NAME_SD_W_A_CONTAMINANTS = "SDWAContaminants";
  @SerializedName(SERIALIZED_NAME_SD_W_A_CONTAMINANTS)
  private String sdWAContaminants;

  public static final String SERIALIZED_NAME_SD_W_A_CONTAMINANTS_IN_CUR_VIOL = "SDWAContaminantsInCurViol";
  @SerializedName(SERIALIZED_NAME_SD_W_A_CONTAMINANTS_IN_CUR_VIOL)
  private String sdWAContaminantsInCurViol;

  public static final String SERIALIZED_NAME_SD_W_A_CONTAMINANTS_IN_VIOL3YR = "SDWAContaminantsInViol3yr";
  @SerializedName(SERIALIZED_NAME_SD_W_A_CONTAMINANTS_IN_VIOL3YR)
  private String sdWAContaminantsInViol3yr;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_FEA = "SDWDateLastFea";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_FEA)
  private String sdWDateLastFea;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_FEA_E_P_A = "SDWDateLastFeaEPA";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_FEA_E_P_A)
  private String sdWDateLastFeaEPA;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_FEA_ST = "SDWDateLastFeaSt";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_FEA_ST)
  private String sdWDateLastFeaSt;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_IEA = "SDWDateLastIea";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_IEA)
  private String sdWDateLastIea;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_IEA_E_P_A = "SDWDateLastIeaEPA";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_IEA_E_P_A)
  private String sdWDateLastIeaEPA;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_IEA_ST = "SDWDateLastIeaSt";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_IEA_ST)
  private String sdWDateLastIeaSt;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_VISIT = "SDWDateLastVisit";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_VISIT)
  private String sdWDateLastVisit;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_E_P_A = "SDWDateLastVisitEPA";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_E_P_A)
  private String sdWDateLastVisitEPA;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_LOCAL = "SDWDateLastVisitLocal";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_LOCAL)
  private String sdWDateLastVisitLocal;

  public static final String SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_STATE = "SDWDateLastVisitState";
  @SerializedName(SERIALIZED_NAME_SD_W_DATE_LAST_VISIT_STATE)
  private String sdWDateLastVisitState;

  public static final String SERIALIZED_NAME_S_N_C = "SNC";
  @SerializedName(SERIALIZED_NAME_S_N_C)
  private String SNC;

  public static final String SERIALIZED_NAME_SN_C_FLAG = "SNCFlag";
  @SerializedName(SERIALIZED_NAME_SN_C_FLAG)
  private String snCFlag;

  public static final String SERIALIZED_NAME_SANSURVEY5YR = "Sansurvey5yr";
  @SerializedName(SERIALIZED_NAME_SANSURVEY5YR)
  private String sansurvey5yr;

  public static final String SERIALIZED_NAME_SERIOUS_VIOLATOR = "SeriousViolator";
  @SerializedName(SERIALIZED_NAME_SERIOUS_VIOLATOR)
  private String seriousViolator;

  public static final String SERIALIZED_NAME_SERVICE_AREA_TYPE_CODE = "ServiceAreaTypeCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_AREA_TYPE_CODE)
  private String serviceAreaTypeCode;

  public static final String SERIALIZED_NAME_SERVICE_AREA_TYPE_DESC = "ServiceAreaTypeDesc";
  @SerializedName(SERIALIZED_NAME_SERVICE_AREA_TYPE_DESC)
  private String serviceAreaTypeDesc;

  public static final String SERIALIZED_NAME_SIGNIFICANT_DEFICIENCY_COUNT = "SignificantDeficiencyCount";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANT_DEFICIENCY_COUNT)
  private String significantDeficiencyCount;

  public static final String SERIALIZED_NAME_SIGNIFICANT_DEFICIENCY_COUNT_ILS = "SignificantDeficiencyCountIls";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANT_DEFICIENCY_COUNT_ILS)
  private String significantDeficiencyCountIls;

  public static final String SERIALIZED_NAME_SITE_VISITS5YR_ALL = "SiteVisits5yrAll";
  @SerializedName(SERIALIZED_NAME_SITE_VISITS5YR_ALL)
  private String siteVisits5yrAll;

  public static final String SERIALIZED_NAME_SITE_VISITS5YR_INSPECTIONS = "SiteVisits5yrInspections";
  @SerializedName(SERIALIZED_NAME_SITE_VISITS5YR_INSPECTIONS)
  private String siteVisits5yrInspections;

  public static final String SERIALIZED_NAME_SITE_VISITS5YR_OTHER = "SiteVisits5yrOther";
  @SerializedName(SERIALIZED_NAME_SITE_VISITS5YR_OTHER)
  private String siteVisits5yrOther;

  public static final String SERIALIZED_NAME_STATE_CODE = "StateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_TR_IBAL_FLAG = "TRIbalFlag";
  @SerializedName(SERIALIZED_NAME_TR_IBAL_FLAG)
  private String trIbalFlag;

  public static final String SERIALIZED_NAME_VIO_FLAG = "VioFlag";
  @SerializedName(SERIALIZED_NAME_VIO_FLAG)
  private String vioFlag;

  public static final String SERIALIZED_NAME_VIOFEANOT = "Viofeanot";
  @SerializedName(SERIALIZED_NAME_VIOFEANOT)
  private String viofeanot;

  public static final String SERIALIZED_NAME_VIOLATION_CATEGORIES = "ViolationCategories";
  @SerializedName(SERIALIZED_NAME_VIOLATION_CATEGORIES)
  private String violationCategories;

  public static final String SERIALIZED_NAME_VIOPACCR = "Viopaccr";
  @SerializedName(SERIALIZED_NAME_VIOPACCR)
  private String viopaccr;

  public static final String SERIALIZED_NAME_VIOREMAIN = "Vioremain";
  @SerializedName(SERIALIZED_NAME_VIOREMAIN)
  private String vioremain;

  public static final String SERIALIZED_NAME_VIORTCFEA = "Viortcfea";
  @SerializedName(SERIALIZED_NAME_VIORTCFEA)
  private String viortcfea;

  public static final String SERIALIZED_NAME_VIORTCNOFEA = "Viortcnofea";
  @SerializedName(SERIALIZED_NAME_VIORTCNOFEA)
  private String viortcnofea;

  public static final String SERIALIZED_NAME_ZIP_CODES_SERVED = "ZipCodesServed";
  @SerializedName(SERIALIZED_NAME_ZIP_CODES_SERVED)
  private String zipCodesServed;

  public Sdw04() {
  }

  public Sdw04 citiesServed(String citiesServed) {
    this.citiesServed = citiesServed;
    return this;
  }

  /**
   * County
   * @return citiesServed
   */
  @javax.annotation.Nonnull
  public String getCitiesServed() {
    return citiesServed;
  }

  public void setCitiesServed(String citiesServed) {
    this.citiesServed = citiesServed;
  }


  public Sdw04 countiesServed(String countiesServed) {
    this.countiesServed = countiesServed;
    return this;
  }

  /**
   * City
   * @return countiesServed
   */
  @javax.annotation.Nonnull
  public String getCountiesServed() {
    return countiesServed;
  }

  public void setCountiesServed(String countiesServed) {
    this.countiesServed = countiesServed;
  }


  public Sdw04 cuAle(String cuAle) {
    this.cuAle = cuAle;
    return this;
  }

  /**
   * The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.
   * @return cuAle
   */
  @javax.annotation.Nonnull
  public String getCuAle() {
    return cuAle;
  }

  public void setCuAle(String cuAle) {
    this.cuAle = cuAle;
  }


  public Sdw04 cuViol(String cuViol) {
    this.cuViol = cuViol;
    return this;
  }

  /**
   * The number of copper violations in the last five years.
   * @return cuViol
   */
  @javax.annotation.Nonnull
  public String getCuViol() {
    return cuViol;
  }

  public void setCuViol(String cuViol) {
    this.cuViol = cuViol;
  }


  public Sdw04 currVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
    return this;
  }

  /**
   * Indicates if the facility has a current violation. 1 &#x3D; Yes
   * @return currVioFlag
   */
  @javax.annotation.Nonnull
  public String getCurrVioFlag() {
    return currVioFlag;
  }

  public void setCurrVioFlag(String currVioFlag) {
    this.currVioFlag = currVioFlag;
  }


  public Sdw04 dateLastSansurvey(String dateLastSansurvey) {
    this.dateLastSansurvey = dateLastSansurvey;
    return this;
  }

  /**
   * Get dateLastSansurvey
   * @return dateLastSansurvey
   */
  @javax.annotation.Nonnull
  public String getDateLastSansurvey() {
    return dateLastSansurvey;
  }

  public void setDateLastSansurvey(String dateLastSansurvey) {
    this.dateLastSansurvey = dateLastSansurvey;
  }


  public Sdw04 dfrUrl(String dfrUrl) {
    this.dfrUrl = dfrUrl;
    return this;
  }

  /**
   * The URL to the facility&#39;s Detailed Facility Report.
   * @return dfrUrl
   */
  @javax.annotation.Nonnull
  public String getDfrUrl() {
    return dfrUrl;
  }

  public void setDfrUrl(String dfrUrl) {
    this.dfrUrl = dfrUrl;
  }


  public Sdw04 epARegion(String epARegion) {
    this.epARegion = epARegion;
    return this;
  }

  /**
   * The EPA region in which the facility is located
   * @return epARegion
   */
  @javax.annotation.Nonnull
  public String getEpARegion() {
    return epARegion;
  }

  public void setEpARegion(String epARegion) {
    this.epARegion = epARegion;
  }


  public Sdw04 fiPSCodes(String fiPSCodes) {
    this.fiPSCodes = fiPSCodes;
    return this;
  }

  /**
   * Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county
   * @return fiPSCodes
   */
  @javax.annotation.Nonnull
  public String getFiPSCodes() {
    return fiPSCodes;
  }

  public void setFiPSCodes(String fiPSCodes) {
    this.fiPSCodes = fiPSCodes;
  }


  public Sdw04 feaFlag(String feaFlag) {
    this.feaFlag = feaFlag;
    return this;
  }

  /**
   * Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance
   * @return feaFlag
   */
  @javax.annotation.Nonnull
  public String getFeaFlag() {
    return feaFlag;
  }

  public void setFeaFlag(String feaFlag) {
    this.feaFlag = feaFlag;
  }


  public Sdw04 feas(String feas) {
    this.feas = feas;
    return this;
  }

  /**
   * Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance.
   * @return feas
   */
  @javax.annotation.Nonnull
  public String getFeas() {
    return feas;
  }

  public void setFeas(String feas) {
    this.feas = feas;
  }


  public Sdw04 gwSwCode(String gwSwCode) {
    this.gwSwCode = gwSwCode;
    return this;
  }

  /**
   * Returns \&quot;GW\&quot; if the system�source water type is ground water. Returns \&quot;SW\&quot; if the system source water type is surface water.
   * @return gwSwCode
   */
  @javax.annotation.Nonnull
  public String getGwSwCode() {
    return gwSwCode;
  }

  public void setGwSwCode(String gwSwCode) {
    this.gwSwCode = gwSwCode;
  }


  public Sdw04 healthFlag(String healthFlag) {
    this.healthFlag = healthFlag;
    return this;
  }

  /**
   * Indicates whether system has violations of health-based drinking water standards
   * @return healthFlag
   */
  @javax.annotation.Nonnull
  public String getHealthFlag() {
    return healthFlag;
  }

  public void setHealthFlag(String healthFlag) {
    this.healthFlag = healthFlag;
  }


  public Sdw04 ieaFlag(String ieaFlag) {
    this.ieaFlag = ieaFlag;
    return this;
  }

  /**
   * Returns 0 if the system does not have informal enforcement actions in the past five years. Returns 1 if the system does have informal enforcement actions in the past five years.
   * @return ieaFlag
   */
  @javax.annotation.Nonnull
  public String getIeaFlag() {
    return ieaFlag;
  }

  public void setIeaFlag(String ieaFlag) {
    this.ieaFlag = ieaFlag;
  }


  public Sdw04 ifea(String ifea) {
    this.ifea = ifea;
    return this;
  }

  /**
   * Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance.
   * @return ifea
   */
  @javax.annotation.Nonnull
  public String getIfea() {
    return ifea;
  }

  public void setIfea(String ifea) {
    this.ifea = ifea;
  }


  public Sdw04 indianCountry(String indianCountry) {
    this.indianCountry = indianCountry;
    return this;
  }

  /**
   * Indicates whether the facility is located in Indian Country
   * @return indianCountry
   */
  @javax.annotation.Nonnull
  public String getIndianCountry() {
    return indianCountry;
  }

  public void setIndianCountry(String indianCountry) {
    this.indianCountry = indianCountry;
  }


  public Sdw04 insp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
    return this;
  }

  /**
   * Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
   * @return insp5yrFlag
   */
  @javax.annotation.Nonnull
  public String getInsp5yrFlag() {
    return insp5yrFlag;
  }

  public void setInsp5yrFlag(String insp5yrFlag) {
    this.insp5yrFlag = insp5yrFlag;
  }


  public Sdw04 leadAndCopperViol(String leadAndCopperViol) {
    this.leadAndCopperViol = leadAndCopperViol;
    return this;
  }

  /**
   * The number of lead and copper violations.
   * @return leadAndCopperViol
   */
  @javax.annotation.Nonnull
  public String getLeadAndCopperViol() {
    return leadAndCopperViol;
  }

  public void setLeadAndCopperViol(String leadAndCopperViol) {
    this.leadAndCopperViol = leadAndCopperViol;
  }


  public Sdw04 maxScore(String maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * A sorting score for internal use.
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public String getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(String maxScore) {
    this.maxScore = maxScore;
  }


  public Sdw04 mrFlag(String mrFlag) {
    this.mrFlag = mrFlag;
    return this;
  }

  /**
   * Indicates whether system has monitoring and reporting violations
   * @return mrFlag
   */
  @javax.annotation.Nonnull
  public String getMrFlag() {
    return mrFlag;
  }

  public void setMrFlag(String mrFlag) {
    this.mrFlag = mrFlag;
  }


  public Sdw04 newVioFlg(String newVioFlg) {
    this.newVioFlg = newVioFlg;
    return this;
  }

  /**
   * Violations that have been reported to SDWA since end of the last official quarter. These violations are considered draft and do not reflect the official compliance status for the facility.
   * @return newVioFlg
   */
  @javax.annotation.Nonnull
  public String getNewVioFlg() {
    return newVioFlg;
  }

  public void setNewVioFlg(String newVioFlg) {
    this.newVioFlg = newVioFlg;
  }


  public Sdw04 otherFlag(String otherFlag) {
    this.otherFlag = otherFlag;
    return this;
  }

  /**
   * Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records
   * @return otherFlag
   */
  @javax.annotation.Nonnull
  public String getOtherFlag() {
    return otherFlag;
  }

  public void setOtherFlag(String otherFlag) {
    this.otherFlag = otherFlag;
  }


  public Sdw04 ownerDesc(String ownerDesc) {
    this.ownerDesc = ownerDesc;
    return this;
  }

  /**
   * Description of Owner code
   * @return ownerDesc
   */
  @javax.annotation.Nonnull
  public String getOwnerDesc() {
    return ownerDesc;
  }

  public void setOwnerDesc(String ownerDesc) {
    this.ownerDesc = ownerDesc;
  }


  public Sdw04 ownerTypeCode(String ownerTypeCode) {
    this.ownerTypeCode = ownerTypeCode;
    return this;
  }

  /**
   * Owner/Operator: - P &#x3D; Private - F &#x3D; Federal Government - S &#x3D; State Government - L &#x3D; Local Government
   * @return ownerTypeCode
   */
  @javax.annotation.Nonnull
  public String getOwnerTypeCode() {
    return ownerTypeCode;
  }

  public void setOwnerTypeCode(String ownerTypeCode) {
    this.ownerTypeCode = ownerTypeCode;
  }


  public Sdw04 pwSActivityCode(String pwSActivityCode) {
    this.pwSActivityCode = pwSActivityCode;
    return this;
  }

  /**
   * Indicates whether systems have an active or inactive designation.
   * @return pwSActivityCode
   */
  @javax.annotation.Nonnull
  public String getPwSActivityCode() {
    return pwSActivityCode;
  }

  public void setPwSActivityCode(String pwSActivityCode) {
    this.pwSActivityCode = pwSActivityCode;
  }


  public Sdw04 pwSActivityDesc(String pwSActivityDesc) {
    this.pwSActivityDesc = pwSActivityDesc;
    return this;
  }

  /**
   * Description of activity status code (ACT), e.g., active, inactive.
   * @return pwSActivityDesc
   */
  @javax.annotation.Nonnull
  public String getPwSActivityDesc() {
    return pwSActivityDesc;
  }

  public void setPwSActivityDesc(String pwSActivityDesc) {
    this.pwSActivityDesc = pwSActivityDesc;
  }


  public Sdw04 pwSId(String pwSId) {
    this.pwSId = pwSId;
    return this;
  }

  /**
   * Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits
   * @return pwSId
   */
  @javax.annotation.Nonnull
  public String getPwSId() {
    return pwSId;
  }

  public void setPwSId(String pwSId) {
    this.pwSId = pwSId;
  }


  public Sdw04 pwSName(String pwSName) {
    this.pwSName = pwSName;
    return this;
  }

  /**
   * Name of the system regulated under the Safe Drinking Water Act (SDWA)
   * @return pwSName
   */
  @javax.annotation.Nonnull
  public String getPwSName() {
    return pwSName;
  }

  public void setPwSName(String pwSName) {
    this.pwSName = pwSName;
  }


  public Sdw04 pwSTypeCode(String pwSTypeCode) {
    this.pwSTypeCode = pwSTypeCode;
    return this;
  }

  /**
   * Type of public water system: - CWS   &#x3D; Community water system - NCWS  &#x3D; Non-community water system - NTCWS &#x3D; Non-transient non-community water system - TNCWS &#x3D; Transient non-community water system
   * @return pwSTypeCode
   */
  @javax.annotation.Nonnull
  public String getPwSTypeCode() {
    return pwSTypeCode;
  }

  public void setPwSTypeCode(String pwSTypeCode) {
    this.pwSTypeCode = pwSTypeCode;
  }


  public Sdw04 pwSTypeDesc(String pwSTypeDesc) {
    this.pwSTypeDesc = pwSTypeDesc;
    return this;
  }

  /**
   * The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a
   * @return pwSTypeDesc
   */
  @javax.annotation.Nonnull
  public String getPwSTypeDesc() {
    return pwSTypeDesc;
  }

  public void setPwSTypeDesc(String pwSTypeDesc) {
    this.pwSTypeDesc = pwSTypeDesc;
  }


  public Sdw04 pbAle(String pbAle) {
    this.pbAle = pbAle;
    return this;
  }

  /**
   * The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.
   * @return pbAle
   */
  @javax.annotation.Nonnull
  public String getPbAle() {
    return pbAle;
  }

  public void setPbAle(String pbAle) {
    this.pbAle = pbAle;
  }


  public Sdw04 pbViol(String pbViol) {
    this.pbViol = pbViol;
    return this;
  }

  /**
   * The number of lead violations in the last five years.
   * @return pbViol
   */
  @javax.annotation.Nonnull
  public String getPbViol() {
    return pbViol;
  }

  public void setPbViol(String pbViol) {
    this.pbViol = pbViol;
  }


  public Sdw04 pnFlag(String pnFlag) {
    this.pnFlag = pnFlag;
    return this;
  }

  /**
   * Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)
   * @return pnFlag
   */
  @javax.annotation.Nonnull
  public String getPnFlag() {
    return pnFlag;
  }

  public void setPnFlag(String pnFlag) {
    this.pnFlag = pnFlag;
  }


  public Sdw04 populationServedCount(String populationServedCount) {
    this.populationServedCount = populationServedCount;
    return this;
  }

  /**
   * Estimated average daily population served by a system
   * @return populationServedCount
   */
  @javax.annotation.Nonnull
  public String getPopulationServedCount() {
    return populationServedCount;
  }

  public void setPopulationServedCount(String populationServedCount) {
    this.populationServedCount = populationServedCount;
  }


  public Sdw04 primarySourceCode(String primarySourceCode) {
    this.primarySourceCode = primarySourceCode;
    return this;
  }

  /**
   * The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth&#39;s surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth&#39;s surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
   * @return primarySourceCode
   */
  @javax.annotation.Nonnull
  public String getPrimarySourceCode() {
    return primarySourceCode;
  }

  public void setPrimarySourceCode(String primarySourceCode) {
    this.primarySourceCode = primarySourceCode;
  }


  public Sdw04 primarySourceDesc(String primarySourceDesc) {
    this.primarySourceDesc = primarySourceDesc;
    return this;
  }

  /**
   * The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth&#39;s surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth&#39;s surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
   * @return primarySourceDesc
   */
  @javax.annotation.Nonnull
  public String getPrimarySourceDesc() {
    return primarySourceDesc;
  }

  public void setPrimarySourceDesc(String primarySourceDesc) {
    this.primarySourceDesc = primarySourceDesc;
  }


  public Sdw04 qtrsWithSNC(String qtrsWithSNC) {
    this.qtrsWithSNC = qtrsWithSNC;
    return this;
  }

  /**
   * The number of quarters the system was designated by EPA as a serious violator over the past 3 years (12 most recent quarters).
   * @return qtrsWithSNC
   */
  @javax.annotation.Nonnull
  public String getQtrsWithSNC() {
    return qtrsWithSNC;
  }

  public void setQtrsWithSNC(String qtrsWithSNC) {
    this.qtrsWithSNC = qtrsWithSNC;
  }


  public Sdw04 qtrsWithVio(String qtrsWithVio) {
    this.qtrsWithVio = qtrsWithVio;
    return this;
  }

  /**
   * The number of quarters the system was in violation over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
   * @return qtrsWithVio
   */
  @javax.annotation.Nonnull
  public String getQtrsWithVio() {
    return qtrsWithVio;
  }

  public void setQtrsWithVio(String qtrsWithVio) {
    this.qtrsWithVio = qtrsWithVio;
  }


  public Sdw04 rc350Viol(String rc350Viol) {
    this.rc350Viol = rc350Viol;
    return this;
  }

  /**
   * The count of open health-based lead violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules. This count includes new violations that have been reported since the end of the last official quarter.
   * @return rc350Viol
   */
  @javax.annotation.Nonnull
  public String getRc350Viol() {
    return rc350Viol;
  }

  public void setRc350Viol(String rc350Viol) {
    this.rc350Viol = rc350Viol;
  }


  public Sdw04 registryID(String registryID) {
    this.registryID = registryID;
    return this;
  }

  /**
   * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
   * @return registryID
   */
  @javax.annotation.Nonnull
  public String getRegistryID() {
    return registryID;
  }

  public void setRegistryID(String registryID) {
    this.registryID = registryID;
  }


  public Sdw04 rulesVio(String rulesVio) {
    this.rulesVio = rulesVio;
    return this;
  }

  /**
   * The count of rules the system is violating as of the latest official quarter of data in the source system, SDWIS, which may lag by 3-6 months. This includes violations in the most recent official quarter and new violations reported after the end of the last official quarter.
   * @return rulesVio
   */
  @javax.annotation.Nonnull
  public String getRulesVio() {
    return rulesVio;
  }

  public void setRulesVio(String rulesVio) {
    this.rulesVio = rulesVio;
  }


  public Sdw04 rulesVio3yr(String rulesVio3yr) {
    this.rulesVio3yr = rulesVio3yr;
    return this;
  }

  /**
   * The count of rules the system was in violation of over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
   * @return rulesVio3yr
   */
  @javax.annotation.Nonnull
  public String getRulesVio3yr() {
    return rulesVio3yr;
  }

  public void setRulesVio3yr(String rulesVio3yr) {
    this.rulesVio3yr = rulesVio3yr;
  }


  public Sdw04 sdWA3yrComplQtrsHistory(String sdWA3yrComplQtrsHistory) {
    this.sdWA3yrComplQtrsHistory = sdWA3yrComplQtrsHistory;
    return this;
  }

  /**
   * The system&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
   * @return sdWA3yrComplQtrsHistory
   */
  @javax.annotation.Nonnull
  public String getSdWA3yrComplQtrsHistory() {
    return sdWA3yrComplQtrsHistory;
  }

  public void setSdWA3yrComplQtrsHistory(String sdWA3yrComplQtrsHistory) {
    this.sdWA3yrComplQtrsHistory = sdWA3yrComplQtrsHistory;
  }


  public Sdw04 sdWAContaminants(String sdWAContaminants) {
    this.sdWAContaminants = sdWAContaminants;
    return this;
  }

  /**
   * All unresolved violation contaminants or violation contaminants that have been resolved in the last 5 years.
   * @return sdWAContaminants
   */
  @javax.annotation.Nonnull
  public String getSdWAContaminants() {
    return sdWAContaminants;
  }

  public void setSdWAContaminants(String sdWAContaminants) {
    this.sdWAContaminants = sdWAContaminants;
  }


  public Sdw04 sdWAContaminantsInCurViol(String sdWAContaminantsInCurViol) {
    this.sdWAContaminantsInCurViol = sdWAContaminantsInCurViol;
    return this;
  }

  /**
   * The contaminant name and code (in SDWIS) in violation of a SDWA regulation. This includes violations in the most recent official quarter and new violations that have been reported since the end of the last official quarter.
   * @return sdWAContaminantsInCurViol
   */
  @javax.annotation.Nonnull
  public String getSdWAContaminantsInCurViol() {
    return sdWAContaminantsInCurViol;
  }

  public void setSdWAContaminantsInCurViol(String sdWAContaminantsInCurViol) {
    this.sdWAContaminantsInCurViol = sdWAContaminantsInCurViol;
  }


  public Sdw04 sdWAContaminantsInViol3yr(String sdWAContaminantsInViol3yr) {
    this.sdWAContaminantsInViol3yr = sdWAContaminantsInViol3yr;
    return this;
  }

  /**
   * The contaminant name and code in violation of a SDWA regulation in the past three years
   * @return sdWAContaminantsInViol3yr
   */
  @javax.annotation.Nonnull
  public String getSdWAContaminantsInViol3yr() {
    return sdWAContaminantsInViol3yr;
  }

  public void setSdWAContaminantsInViol3yr(String sdWAContaminantsInViol3yr) {
    this.sdWAContaminantsInViol3yr = sdWAContaminantsInViol3yr;
  }


  public Sdw04 sdWDateLastFea(String sdWDateLastFea) {
    this.sdWDateLastFea = sdWDateLastFea;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS within the last five years.
   * @return sdWDateLastFea
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastFea() {
    return sdWDateLastFea;
  }

  public void setSdWDateLastFea(String sdWDateLastFea) {
    this.sdWDateLastFea = sdWDateLastFea;
  }


  public Sdw04 sdWDateLastFeaEPA(String sdWDateLastFeaEPA) {
    this.sdWDateLastFeaEPA = sdWDateLastFeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by EPA within the last five years.
   * @return sdWDateLastFeaEPA
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastFeaEPA() {
    return sdWDateLastFeaEPA;
  }

  public void setSdWDateLastFeaEPA(String sdWDateLastFeaEPA) {
    this.sdWDateLastFeaEPA = sdWDateLastFeaEPA;
  }


  public Sdw04 sdWDateLastFeaSt(String sdWDateLastFeaSt) {
    this.sdWDateLastFeaSt = sdWDateLastFeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by a state environmental agency within the last five years.
   * @return sdWDateLastFeaSt
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastFeaSt() {
    return sdWDateLastFeaSt;
  }

  public void setSdWDateLastFeaSt(String sdWDateLastFeaSt) {
    this.sdWDateLastFeaSt = sdWDateLastFeaSt;
  }


  public Sdw04 sdWDateLastIea(String sdWDateLastIea) {
    this.sdWDateLastIea = sdWDateLastIea;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS within the last five years.
   * @return sdWDateLastIea
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastIea() {
    return sdWDateLastIea;
  }

  public void setSdWDateLastIea(String sdWDateLastIea) {
    this.sdWDateLastIea = sdWDateLastIea;
  }


  public Sdw04 sdWDateLastIeaEPA(String sdWDateLastIeaEPA) {
    this.sdWDateLastIeaEPA = sdWDateLastIeaEPA;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by EPA within the last five years.
   * @return sdWDateLastIeaEPA
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastIeaEPA() {
    return sdWDateLastIeaEPA;
  }

  public void setSdWDateLastIeaEPA(String sdWDateLastIeaEPA) {
    this.sdWDateLastIeaEPA = sdWDateLastIeaEPA;
  }


  public Sdw04 sdWDateLastIeaSt(String sdWDateLastIeaSt) {
    this.sdWDateLastIeaSt = sdWDateLastIeaSt;
    return this;
  }

  /**
   * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by a state environmental agency within the last five years.
   * @return sdWDateLastIeaSt
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastIeaSt() {
    return sdWDateLastIeaSt;
  }

  public void setSdWDateLastIeaSt(String sdWDateLastIeaSt) {
    this.sdWDateLastIeaSt = sdWDateLastIeaSt;
  }


  public Sdw04 sdWDateLastVisit(String sdWDateLastVisit) {
    this.sdWDateLastVisit = sdWDateLastVisit;
    return this;
  }

  /**
   * The date of the last system visit.
   * @return sdWDateLastVisit
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastVisit() {
    return sdWDateLastVisit;
  }

  public void setSdWDateLastVisit(String sdWDateLastVisit) {
    this.sdWDateLastVisit = sdWDateLastVisit;
  }


  public Sdw04 sdWDateLastVisitEPA(String sdWDateLastVisitEPA) {
    this.sdWDateLastVisitEPA = sdWDateLastVisitEPA;
    return this;
  }

  /**
   * The date of the last system visit by EPA.
   * @return sdWDateLastVisitEPA
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastVisitEPA() {
    return sdWDateLastVisitEPA;
  }

  public void setSdWDateLastVisitEPA(String sdWDateLastVisitEPA) {
    this.sdWDateLastVisitEPA = sdWDateLastVisitEPA;
  }


  public Sdw04 sdWDateLastVisitLocal(String sdWDateLastVisitLocal) {
    this.sdWDateLastVisitLocal = sdWDateLastVisitLocal;
    return this;
  }

  /**
   * The date of the last system visit by a local agency.
   * @return sdWDateLastVisitLocal
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastVisitLocal() {
    return sdWDateLastVisitLocal;
  }

  public void setSdWDateLastVisitLocal(String sdWDateLastVisitLocal) {
    this.sdWDateLastVisitLocal = sdWDateLastVisitLocal;
  }


  public Sdw04 sdWDateLastVisitState(String sdWDateLastVisitState) {
    this.sdWDateLastVisitState = sdWDateLastVisitState;
    return this;
  }

  /**
   * The date of the last system visit by a state agency.
   * @return sdWDateLastVisitState
   */
  @javax.annotation.Nonnull
  public String getSdWDateLastVisitState() {
    return sdWDateLastVisitState;
  }

  public void setSdWDateLastVisitState(String sdWDateLastVisitState) {
    this.sdWDateLastVisitState = sdWDateLastVisitState;
  }


  public Sdw04 SNC(String SNC) {
    this.SNC = SNC;
    return this;
  }

  /**
   * Indicates the system&#39;s compliance status: No Violation,�In Violation, Signficant Noncompliance, or Unknown.
   * @return SNC
   */
  @javax.annotation.Nonnull
  public String getSNC() {
    return SNC;
  }

  public void setSNC(String SNC) {
    this.SNC = SNC;
  }


  public Sdw04 snCFlag(String snCFlag) {
    this.snCFlag = snCFlag;
    return this;
  }

  /**
   * Returns 1 if the system is in significant noncompliance (SNC); returns 0 if not.
   * @return snCFlag
   */
  @javax.annotation.Nonnull
  public String getSnCFlag() {
    return snCFlag;
  }

  public void setSnCFlag(String snCFlag) {
    this.snCFlag = snCFlag;
  }


  public Sdw04 sansurvey5yr(String sansurvey5yr) {
    this.sansurvey5yr = sansurvey5yr;
    return this;
  }

  /**
   * The number of sanitary surveys completed within the past five years. A sanitary survey is an on-site review of a system&#39;s water source, facilities, equipment, operation, and maintenance, intended to point out sanitary deficiencies and assess the system&#39;s capability to supply safe drinking water.
   * @return sansurvey5yr
   */
  @javax.annotation.Nonnull
  public String getSansurvey5yr() {
    return sansurvey5yr;
  }

  public void setSansurvey5yr(String sansurvey5yr) {
    this.sansurvey5yr = sansurvey5yr;
  }


  public Sdw04 seriousViolator(String seriousViolator) {
    this.seriousViolator = seriousViolator;
    return this;
  }

  /**
   * Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)
   * @return seriousViolator
   */
  @javax.annotation.Nonnull
  public String getSeriousViolator() {
    return seriousViolator;
  }

  public void setSeriousViolator(String seriousViolator) {
    this.seriousViolator = seriousViolator;
  }


  public Sdw04 serviceAreaTypeCode(String serviceAreaTypeCode) {
    this.serviceAreaTypeCode = serviceAreaTypeCode;
    return this;
  }

  /**
   * Get serviceAreaTypeCode
   * @return serviceAreaTypeCode
   */
  @javax.annotation.Nonnull
  public String getServiceAreaTypeCode() {
    return serviceAreaTypeCode;
  }

  public void setServiceAreaTypeCode(String serviceAreaTypeCode) {
    this.serviceAreaTypeCode = serviceAreaTypeCode;
  }


  public Sdw04 serviceAreaTypeDesc(String serviceAreaTypeDesc) {
    this.serviceAreaTypeDesc = serviceAreaTypeDesc;
    return this;
  }

  /**
   * Get serviceAreaTypeDesc
   * @return serviceAreaTypeDesc
   */
  @javax.annotation.Nonnull
  public String getServiceAreaTypeDesc() {
    return serviceAreaTypeDesc;
  }

  public void setServiceAreaTypeDesc(String serviceAreaTypeDesc) {
    this.serviceAreaTypeDesc = serviceAreaTypeDesc;
  }


  public Sdw04 significantDeficiencyCount(String significantDeficiencyCount) {
    this.significantDeficiencyCount = significantDeficiencyCount;
    return this;
  }

  /**
   * The number of significant deficiencies found from a sanitary survey within the past five years.
   * @return significantDeficiencyCount
   */
  @javax.annotation.Nonnull
  public String getSignificantDeficiencyCount() {
    return significantDeficiencyCount;
  }

  public void setSignificantDeficiencyCount(String significantDeficiencyCount) {
    this.significantDeficiencyCount = significantDeficiencyCount;
  }


  public Sdw04 significantDeficiencyCountIls(String significantDeficiencyCountIls) {
    this.significantDeficiencyCountIls = significantDeficiencyCountIls;
    return this;
  }

  /**
   * Get significantDeficiencyCountIls
   * @return significantDeficiencyCountIls
   */
  @javax.annotation.Nonnull
  public String getSignificantDeficiencyCountIls() {
    return significantDeficiencyCountIls;
  }

  public void setSignificantDeficiencyCountIls(String significantDeficiencyCountIls) {
    this.significantDeficiencyCountIls = significantDeficiencyCountIls;
  }


  public Sdw04 siteVisits5yrAll(String siteVisits5yrAll) {
    this.siteVisits5yrAll = siteVisits5yrAll;
    return this;
  }

  /**
   * Get siteVisits5yrAll
   * @return siteVisits5yrAll
   */
  @javax.annotation.Nonnull
  public String getSiteVisits5yrAll() {
    return siteVisits5yrAll;
  }

  public void setSiteVisits5yrAll(String siteVisits5yrAll) {
    this.siteVisits5yrAll = siteVisits5yrAll;
  }


  public Sdw04 siteVisits5yrInspections(String siteVisits5yrInspections) {
    this.siteVisits5yrInspections = siteVisits5yrInspections;
    return this;
  }

  /**
   * Get siteVisits5yrInspections
   * @return siteVisits5yrInspections
   */
  @javax.annotation.Nonnull
  public String getSiteVisits5yrInspections() {
    return siteVisits5yrInspections;
  }

  public void setSiteVisits5yrInspections(String siteVisits5yrInspections) {
    this.siteVisits5yrInspections = siteVisits5yrInspections;
  }


  public Sdw04 siteVisits5yrOther(String siteVisits5yrOther) {
    this.siteVisits5yrOther = siteVisits5yrOther;
    return this;
  }

  /**
   * Get siteVisits5yrOther
   * @return siteVisits5yrOther
   */
  @javax.annotation.Nonnull
  public String getSiteVisits5yrOther() {
    return siteVisits5yrOther;
  }

  public void setSiteVisits5yrOther(String siteVisits5yrOther) {
    this.siteVisits5yrOther = siteVisits5yrOther;
  }


  public Sdw04 stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * The state in which the system is located.
   * @return stateCode
   */
  @javax.annotation.Nonnull
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public Sdw04 trIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
    return this;
  }

  /**
   * A flag indicating that the facility is within a tribal area.
   * @return trIbalFlag
   */
  @javax.annotation.Nonnull
  public String getTrIbalFlag() {
    return trIbalFlag;
  }

  public void setTrIbalFlag(String trIbalFlag) {
    this.trIbalFlag = trIbalFlag;
  }


  public Sdw04 vioFlag(String vioFlag) {
    this.vioFlag = vioFlag;
    return this;
  }

  /**
   * Indicates whether the system has been in violation in the past five years (1 if yes, 0 if no).
   * @return vioFlag
   */
  @javax.annotation.Nonnull
  public String getVioFlag() {
    return vioFlag;
  }

  public void setVioFlag(String vioFlag) {
    this.vioFlag = vioFlag;
  }


  public Sdw04 viofeanot(String viofeanot) {
    this.viofeanot = viofeanot;
    return this;
  }

  /**
   * Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh
   * @return viofeanot
   */
  @javax.annotation.Nonnull
  public String getViofeanot() {
    return viofeanot;
  }

  public void setViofeanot(String viofeanot) {
    this.viofeanot = viofeanot;
  }


  public Sdw04 violationCategories(String violationCategories) {
    this.violationCategories = violationCategories;
    return this;
  }

  /**
   * Get violationCategories
   * @return violationCategories
   */
  @javax.annotation.Nonnull
  public String getViolationCategories() {
    return violationCategories;
  }

  public void setViolationCategories(String violationCategories) {
    this.violationCategories = violationCategories;
  }


  public Sdw04 viopaccr(String viopaccr) {
    this.viopaccr = viopaccr;
    return this;
  }

  /**
   * Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh
   * @return viopaccr
   */
  @javax.annotation.Nonnull
  public String getViopaccr() {
    return viopaccr;
  }

  public void setViopaccr(String viopaccr) {
    this.viopaccr = viopaccr;
  }


  public Sdw04 vioremain(String vioremain) {
    this.vioremain = vioremain;
    return this;
  }

  /**
   * Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance
   * @return vioremain
   */
  @javax.annotation.Nonnull
  public String getVioremain() {
    return vioremain;
  }

  public void setVioremain(String vioremain) {
    this.vioremain = vioremain;
  }


  public Sdw04 viortcfea(String viortcfea) {
    this.viortcfea = viortcfea;
    return this;
  }

  /**
   * Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh
   * @return viortcfea
   */
  @javax.annotation.Nonnull
  public String getViortcfea() {
    return viortcfea;
  }

  public void setViortcfea(String viortcfea) {
    this.viortcfea = viortcfea;
  }


  public Sdw04 viortcnofea(String viortcnofea) {
    this.viortcnofea = viortcnofea;
    return this;
  }

  /**
   * Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh
   * @return viortcnofea
   */
  @javax.annotation.Nonnull
  public String getViortcnofea() {
    return viortcnofea;
  }

  public void setViortcnofea(String viortcnofea) {
    this.viortcnofea = viortcnofea;
  }


  public Sdw04 zipCodesServed(String zipCodesServed) {
    this.zipCodesServed = zipCodesServed;
    return this;
  }

  /**
   * ZIP code
   * @return zipCodesServed
   */
  @javax.annotation.Nonnull
  public String getZipCodesServed() {
    return zipCodesServed;
  }

  public void setZipCodesServed(String zipCodesServed) {
    this.zipCodesServed = zipCodesServed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sdw04 sdw04 = (Sdw04) o;
    return Objects.equals(this.citiesServed, sdw04.citiesServed) &&
        Objects.equals(this.countiesServed, sdw04.countiesServed) &&
        Objects.equals(this.cuAle, sdw04.cuAle) &&
        Objects.equals(this.cuViol, sdw04.cuViol) &&
        Objects.equals(this.currVioFlag, sdw04.currVioFlag) &&
        Objects.equals(this.dateLastSansurvey, sdw04.dateLastSansurvey) &&
        Objects.equals(this.dfrUrl, sdw04.dfrUrl) &&
        Objects.equals(this.epARegion, sdw04.epARegion) &&
        Objects.equals(this.fiPSCodes, sdw04.fiPSCodes) &&
        Objects.equals(this.feaFlag, sdw04.feaFlag) &&
        Objects.equals(this.feas, sdw04.feas) &&
        Objects.equals(this.gwSwCode, sdw04.gwSwCode) &&
        Objects.equals(this.healthFlag, sdw04.healthFlag) &&
        Objects.equals(this.ieaFlag, sdw04.ieaFlag) &&
        Objects.equals(this.ifea, sdw04.ifea) &&
        Objects.equals(this.indianCountry, sdw04.indianCountry) &&
        Objects.equals(this.insp5yrFlag, sdw04.insp5yrFlag) &&
        Objects.equals(this.leadAndCopperViol, sdw04.leadAndCopperViol) &&
        Objects.equals(this.maxScore, sdw04.maxScore) &&
        Objects.equals(this.mrFlag, sdw04.mrFlag) &&
        Objects.equals(this.newVioFlg, sdw04.newVioFlg) &&
        Objects.equals(this.otherFlag, sdw04.otherFlag) &&
        Objects.equals(this.ownerDesc, sdw04.ownerDesc) &&
        Objects.equals(this.ownerTypeCode, sdw04.ownerTypeCode) &&
        Objects.equals(this.pwSActivityCode, sdw04.pwSActivityCode) &&
        Objects.equals(this.pwSActivityDesc, sdw04.pwSActivityDesc) &&
        Objects.equals(this.pwSId, sdw04.pwSId) &&
        Objects.equals(this.pwSName, sdw04.pwSName) &&
        Objects.equals(this.pwSTypeCode, sdw04.pwSTypeCode) &&
        Objects.equals(this.pwSTypeDesc, sdw04.pwSTypeDesc) &&
        Objects.equals(this.pbAle, sdw04.pbAle) &&
        Objects.equals(this.pbViol, sdw04.pbViol) &&
        Objects.equals(this.pnFlag, sdw04.pnFlag) &&
        Objects.equals(this.populationServedCount, sdw04.populationServedCount) &&
        Objects.equals(this.primarySourceCode, sdw04.primarySourceCode) &&
        Objects.equals(this.primarySourceDesc, sdw04.primarySourceDesc) &&
        Objects.equals(this.qtrsWithSNC, sdw04.qtrsWithSNC) &&
        Objects.equals(this.qtrsWithVio, sdw04.qtrsWithVio) &&
        Objects.equals(this.rc350Viol, sdw04.rc350Viol) &&
        Objects.equals(this.registryID, sdw04.registryID) &&
        Objects.equals(this.rulesVio, sdw04.rulesVio) &&
        Objects.equals(this.rulesVio3yr, sdw04.rulesVio3yr) &&
        Objects.equals(this.sdWA3yrComplQtrsHistory, sdw04.sdWA3yrComplQtrsHistory) &&
        Objects.equals(this.sdWAContaminants, sdw04.sdWAContaminants) &&
        Objects.equals(this.sdWAContaminantsInCurViol, sdw04.sdWAContaminantsInCurViol) &&
        Objects.equals(this.sdWAContaminantsInViol3yr, sdw04.sdWAContaminantsInViol3yr) &&
        Objects.equals(this.sdWDateLastFea, sdw04.sdWDateLastFea) &&
        Objects.equals(this.sdWDateLastFeaEPA, sdw04.sdWDateLastFeaEPA) &&
        Objects.equals(this.sdWDateLastFeaSt, sdw04.sdWDateLastFeaSt) &&
        Objects.equals(this.sdWDateLastIea, sdw04.sdWDateLastIea) &&
        Objects.equals(this.sdWDateLastIeaEPA, sdw04.sdWDateLastIeaEPA) &&
        Objects.equals(this.sdWDateLastIeaSt, sdw04.sdWDateLastIeaSt) &&
        Objects.equals(this.sdWDateLastVisit, sdw04.sdWDateLastVisit) &&
        Objects.equals(this.sdWDateLastVisitEPA, sdw04.sdWDateLastVisitEPA) &&
        Objects.equals(this.sdWDateLastVisitLocal, sdw04.sdWDateLastVisitLocal) &&
        Objects.equals(this.sdWDateLastVisitState, sdw04.sdWDateLastVisitState) &&
        Objects.equals(this.SNC, sdw04.SNC) &&
        Objects.equals(this.snCFlag, sdw04.snCFlag) &&
        Objects.equals(this.sansurvey5yr, sdw04.sansurvey5yr) &&
        Objects.equals(this.seriousViolator, sdw04.seriousViolator) &&
        Objects.equals(this.serviceAreaTypeCode, sdw04.serviceAreaTypeCode) &&
        Objects.equals(this.serviceAreaTypeDesc, sdw04.serviceAreaTypeDesc) &&
        Objects.equals(this.significantDeficiencyCount, sdw04.significantDeficiencyCount) &&
        Objects.equals(this.significantDeficiencyCountIls, sdw04.significantDeficiencyCountIls) &&
        Objects.equals(this.siteVisits5yrAll, sdw04.siteVisits5yrAll) &&
        Objects.equals(this.siteVisits5yrInspections, sdw04.siteVisits5yrInspections) &&
        Objects.equals(this.siteVisits5yrOther, sdw04.siteVisits5yrOther) &&
        Objects.equals(this.stateCode, sdw04.stateCode) &&
        Objects.equals(this.trIbalFlag, sdw04.trIbalFlag) &&
        Objects.equals(this.vioFlag, sdw04.vioFlag) &&
        Objects.equals(this.viofeanot, sdw04.viofeanot) &&
        Objects.equals(this.violationCategories, sdw04.violationCategories) &&
        Objects.equals(this.viopaccr, sdw04.viopaccr) &&
        Objects.equals(this.vioremain, sdw04.vioremain) &&
        Objects.equals(this.viortcfea, sdw04.viortcfea) &&
        Objects.equals(this.viortcnofea, sdw04.viortcnofea) &&
        Objects.equals(this.zipCodesServed, sdw04.zipCodesServed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citiesServed, countiesServed, cuAle, cuViol, currVioFlag, dateLastSansurvey, dfrUrl, epARegion, fiPSCodes, feaFlag, feas, gwSwCode, healthFlag, ieaFlag, ifea, indianCountry, insp5yrFlag, leadAndCopperViol, maxScore, mrFlag, newVioFlg, otherFlag, ownerDesc, ownerTypeCode, pwSActivityCode, pwSActivityDesc, pwSId, pwSName, pwSTypeCode, pwSTypeDesc, pbAle, pbViol, pnFlag, populationServedCount, primarySourceCode, primarySourceDesc, qtrsWithSNC, qtrsWithVio, rc350Viol, registryID, rulesVio, rulesVio3yr, sdWA3yrComplQtrsHistory, sdWAContaminants, sdWAContaminantsInCurViol, sdWAContaminantsInViol3yr, sdWDateLastFea, sdWDateLastFeaEPA, sdWDateLastFeaSt, sdWDateLastIea, sdWDateLastIeaEPA, sdWDateLastIeaSt, sdWDateLastVisit, sdWDateLastVisitEPA, sdWDateLastVisitLocal, sdWDateLastVisitState, SNC, snCFlag, sansurvey5yr, seriousViolator, serviceAreaTypeCode, serviceAreaTypeDesc, significantDeficiencyCount, significantDeficiencyCountIls, siteVisits5yrAll, siteVisits5yrInspections, siteVisits5yrOther, stateCode, trIbalFlag, vioFlag, viofeanot, violationCategories, viopaccr, vioremain, viortcfea, viortcnofea, zipCodesServed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sdw04 {\n");
    sb.append("    citiesServed: ").append(toIndentedString(citiesServed)).append("\n");
    sb.append("    countiesServed: ").append(toIndentedString(countiesServed)).append("\n");
    sb.append("    cuAle: ").append(toIndentedString(cuAle)).append("\n");
    sb.append("    cuViol: ").append(toIndentedString(cuViol)).append("\n");
    sb.append("    currVioFlag: ").append(toIndentedString(currVioFlag)).append("\n");
    sb.append("    dateLastSansurvey: ").append(toIndentedString(dateLastSansurvey)).append("\n");
    sb.append("    dfrUrl: ").append(toIndentedString(dfrUrl)).append("\n");
    sb.append("    epARegion: ").append(toIndentedString(epARegion)).append("\n");
    sb.append("    fiPSCodes: ").append(toIndentedString(fiPSCodes)).append("\n");
    sb.append("    feaFlag: ").append(toIndentedString(feaFlag)).append("\n");
    sb.append("    feas: ").append(toIndentedString(feas)).append("\n");
    sb.append("    gwSwCode: ").append(toIndentedString(gwSwCode)).append("\n");
    sb.append("    healthFlag: ").append(toIndentedString(healthFlag)).append("\n");
    sb.append("    ieaFlag: ").append(toIndentedString(ieaFlag)).append("\n");
    sb.append("    ifea: ").append(toIndentedString(ifea)).append("\n");
    sb.append("    indianCountry: ").append(toIndentedString(indianCountry)).append("\n");
    sb.append("    insp5yrFlag: ").append(toIndentedString(insp5yrFlag)).append("\n");
    sb.append("    leadAndCopperViol: ").append(toIndentedString(leadAndCopperViol)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    mrFlag: ").append(toIndentedString(mrFlag)).append("\n");
    sb.append("    newVioFlg: ").append(toIndentedString(newVioFlg)).append("\n");
    sb.append("    otherFlag: ").append(toIndentedString(otherFlag)).append("\n");
    sb.append("    ownerDesc: ").append(toIndentedString(ownerDesc)).append("\n");
    sb.append("    ownerTypeCode: ").append(toIndentedString(ownerTypeCode)).append("\n");
    sb.append("    pwSActivityCode: ").append(toIndentedString(pwSActivityCode)).append("\n");
    sb.append("    pwSActivityDesc: ").append(toIndentedString(pwSActivityDesc)).append("\n");
    sb.append("    pwSId: ").append(toIndentedString(pwSId)).append("\n");
    sb.append("    pwSName: ").append(toIndentedString(pwSName)).append("\n");
    sb.append("    pwSTypeCode: ").append(toIndentedString(pwSTypeCode)).append("\n");
    sb.append("    pwSTypeDesc: ").append(toIndentedString(pwSTypeDesc)).append("\n");
    sb.append("    pbAle: ").append(toIndentedString(pbAle)).append("\n");
    sb.append("    pbViol: ").append(toIndentedString(pbViol)).append("\n");
    sb.append("    pnFlag: ").append(toIndentedString(pnFlag)).append("\n");
    sb.append("    populationServedCount: ").append(toIndentedString(populationServedCount)).append("\n");
    sb.append("    primarySourceCode: ").append(toIndentedString(primarySourceCode)).append("\n");
    sb.append("    primarySourceDesc: ").append(toIndentedString(primarySourceDesc)).append("\n");
    sb.append("    qtrsWithSNC: ").append(toIndentedString(qtrsWithSNC)).append("\n");
    sb.append("    qtrsWithVio: ").append(toIndentedString(qtrsWithVio)).append("\n");
    sb.append("    rc350Viol: ").append(toIndentedString(rc350Viol)).append("\n");
    sb.append("    registryID: ").append(toIndentedString(registryID)).append("\n");
    sb.append("    rulesVio: ").append(toIndentedString(rulesVio)).append("\n");
    sb.append("    rulesVio3yr: ").append(toIndentedString(rulesVio3yr)).append("\n");
    sb.append("    sdWA3yrComplQtrsHistory: ").append(toIndentedString(sdWA3yrComplQtrsHistory)).append("\n");
    sb.append("    sdWAContaminants: ").append(toIndentedString(sdWAContaminants)).append("\n");
    sb.append("    sdWAContaminantsInCurViol: ").append(toIndentedString(sdWAContaminantsInCurViol)).append("\n");
    sb.append("    sdWAContaminantsInViol3yr: ").append(toIndentedString(sdWAContaminantsInViol3yr)).append("\n");
    sb.append("    sdWDateLastFea: ").append(toIndentedString(sdWDateLastFea)).append("\n");
    sb.append("    sdWDateLastFeaEPA: ").append(toIndentedString(sdWDateLastFeaEPA)).append("\n");
    sb.append("    sdWDateLastFeaSt: ").append(toIndentedString(sdWDateLastFeaSt)).append("\n");
    sb.append("    sdWDateLastIea: ").append(toIndentedString(sdWDateLastIea)).append("\n");
    sb.append("    sdWDateLastIeaEPA: ").append(toIndentedString(sdWDateLastIeaEPA)).append("\n");
    sb.append("    sdWDateLastIeaSt: ").append(toIndentedString(sdWDateLastIeaSt)).append("\n");
    sb.append("    sdWDateLastVisit: ").append(toIndentedString(sdWDateLastVisit)).append("\n");
    sb.append("    sdWDateLastVisitEPA: ").append(toIndentedString(sdWDateLastVisitEPA)).append("\n");
    sb.append("    sdWDateLastVisitLocal: ").append(toIndentedString(sdWDateLastVisitLocal)).append("\n");
    sb.append("    sdWDateLastVisitState: ").append(toIndentedString(sdWDateLastVisitState)).append("\n");
    sb.append("    SNC: ").append(toIndentedString(SNC)).append("\n");
    sb.append("    snCFlag: ").append(toIndentedString(snCFlag)).append("\n");
    sb.append("    sansurvey5yr: ").append(toIndentedString(sansurvey5yr)).append("\n");
    sb.append("    seriousViolator: ").append(toIndentedString(seriousViolator)).append("\n");
    sb.append("    serviceAreaTypeCode: ").append(toIndentedString(serviceAreaTypeCode)).append("\n");
    sb.append("    serviceAreaTypeDesc: ").append(toIndentedString(serviceAreaTypeDesc)).append("\n");
    sb.append("    significantDeficiencyCount: ").append(toIndentedString(significantDeficiencyCount)).append("\n");
    sb.append("    significantDeficiencyCountIls: ").append(toIndentedString(significantDeficiencyCountIls)).append("\n");
    sb.append("    siteVisits5yrAll: ").append(toIndentedString(siteVisits5yrAll)).append("\n");
    sb.append("    siteVisits5yrInspections: ").append(toIndentedString(siteVisits5yrInspections)).append("\n");
    sb.append("    siteVisits5yrOther: ").append(toIndentedString(siteVisits5yrOther)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    trIbalFlag: ").append(toIndentedString(trIbalFlag)).append("\n");
    sb.append("    vioFlag: ").append(toIndentedString(vioFlag)).append("\n");
    sb.append("    viofeanot: ").append(toIndentedString(viofeanot)).append("\n");
    sb.append("    violationCategories: ").append(toIndentedString(violationCategories)).append("\n");
    sb.append("    viopaccr: ").append(toIndentedString(viopaccr)).append("\n");
    sb.append("    vioremain: ").append(toIndentedString(vioremain)).append("\n");
    sb.append("    viortcfea: ").append(toIndentedString(viortcfea)).append("\n");
    sb.append("    viortcnofea: ").append(toIndentedString(viortcnofea)).append("\n");
    sb.append("    zipCodesServed: ").append(toIndentedString(zipCodesServed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CitiesServed");
    openapiFields.add("CountiesServed");
    openapiFields.add("CuAle");
    openapiFields.add("CuViol");
    openapiFields.add("CurrVioFlag");
    openapiFields.add("DateLastSansurvey");
    openapiFields.add("DfrUrl");
    openapiFields.add("EPARegion");
    openapiFields.add("FIPSCodes");
    openapiFields.add("FeaFlag");
    openapiFields.add("Feas");
    openapiFields.add("GwSwCode");
    openapiFields.add("HealthFlag");
    openapiFields.add("IeaFlag");
    openapiFields.add("Ifea");
    openapiFields.add("IndianCountry");
    openapiFields.add("Insp5yrFlag");
    openapiFields.add("LeadAndCopperViol");
    openapiFields.add("MaxScore");
    openapiFields.add("MrFlag");
    openapiFields.add("NewVioFlg");
    openapiFields.add("OtherFlag");
    openapiFields.add("OwnerDesc");
    openapiFields.add("OwnerTypeCode");
    openapiFields.add("PWSActivityCode");
    openapiFields.add("PWSActivityDesc");
    openapiFields.add("PWSId");
    openapiFields.add("PWSName");
    openapiFields.add("PWSTypeCode");
    openapiFields.add("PWSTypeDesc");
    openapiFields.add("PbAle");
    openapiFields.add("PbViol");
    openapiFields.add("PnFlag");
    openapiFields.add("PopulationServedCount");
    openapiFields.add("PrimarySourceCode");
    openapiFields.add("PrimarySourceDesc");
    openapiFields.add("QtrsWithSNC");
    openapiFields.add("QtrsWithVio");
    openapiFields.add("Rc350Viol");
    openapiFields.add("RegistryID");
    openapiFields.add("RulesVio");
    openapiFields.add("RulesVio3yr");
    openapiFields.add("SDWA3yrComplQtrsHistory");
    openapiFields.add("SDWAContaminants");
    openapiFields.add("SDWAContaminantsInCurViol");
    openapiFields.add("SDWAContaminantsInViol3yr");
    openapiFields.add("SDWDateLastFea");
    openapiFields.add("SDWDateLastFeaEPA");
    openapiFields.add("SDWDateLastFeaSt");
    openapiFields.add("SDWDateLastIea");
    openapiFields.add("SDWDateLastIeaEPA");
    openapiFields.add("SDWDateLastIeaSt");
    openapiFields.add("SDWDateLastVisit");
    openapiFields.add("SDWDateLastVisitEPA");
    openapiFields.add("SDWDateLastVisitLocal");
    openapiFields.add("SDWDateLastVisitState");
    openapiFields.add("SNC");
    openapiFields.add("SNCFlag");
    openapiFields.add("Sansurvey5yr");
    openapiFields.add("SeriousViolator");
    openapiFields.add("ServiceAreaTypeCode");
    openapiFields.add("ServiceAreaTypeDesc");
    openapiFields.add("SignificantDeficiencyCount");
    openapiFields.add("SignificantDeficiencyCountIls");
    openapiFields.add("SiteVisits5yrAll");
    openapiFields.add("SiteVisits5yrInspections");
    openapiFields.add("SiteVisits5yrOther");
    openapiFields.add("StateCode");
    openapiFields.add("TRIbalFlag");
    openapiFields.add("VioFlag");
    openapiFields.add("Viofeanot");
    openapiFields.add("ViolationCategories");
    openapiFields.add("Viopaccr");
    openapiFields.add("Vioremain");
    openapiFields.add("Viortcfea");
    openapiFields.add("Viortcnofea");
    openapiFields.add("ZipCodesServed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CitiesServed");
    openapiRequiredFields.add("CountiesServed");
    openapiRequiredFields.add("CuAle");
    openapiRequiredFields.add("CuViol");
    openapiRequiredFields.add("CurrVioFlag");
    openapiRequiredFields.add("DateLastSansurvey");
    openapiRequiredFields.add("DfrUrl");
    openapiRequiredFields.add("EPARegion");
    openapiRequiredFields.add("FIPSCodes");
    openapiRequiredFields.add("FeaFlag");
    openapiRequiredFields.add("Feas");
    openapiRequiredFields.add("GwSwCode");
    openapiRequiredFields.add("HealthFlag");
    openapiRequiredFields.add("IeaFlag");
    openapiRequiredFields.add("Ifea");
    openapiRequiredFields.add("IndianCountry");
    openapiRequiredFields.add("Insp5yrFlag");
    openapiRequiredFields.add("LeadAndCopperViol");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("MrFlag");
    openapiRequiredFields.add("NewVioFlg");
    openapiRequiredFields.add("OtherFlag");
    openapiRequiredFields.add("OwnerDesc");
    openapiRequiredFields.add("OwnerTypeCode");
    openapiRequiredFields.add("PWSActivityCode");
    openapiRequiredFields.add("PWSActivityDesc");
    openapiRequiredFields.add("PWSId");
    openapiRequiredFields.add("PWSName");
    openapiRequiredFields.add("PWSTypeCode");
    openapiRequiredFields.add("PWSTypeDesc");
    openapiRequiredFields.add("PbAle");
    openapiRequiredFields.add("PbViol");
    openapiRequiredFields.add("PnFlag");
    openapiRequiredFields.add("PopulationServedCount");
    openapiRequiredFields.add("PrimarySourceCode");
    openapiRequiredFields.add("PrimarySourceDesc");
    openapiRequiredFields.add("QtrsWithSNC");
    openapiRequiredFields.add("QtrsWithVio");
    openapiRequiredFields.add("Rc350Viol");
    openapiRequiredFields.add("RegistryID");
    openapiRequiredFields.add("RulesVio");
    openapiRequiredFields.add("RulesVio3yr");
    openapiRequiredFields.add("SDWA3yrComplQtrsHistory");
    openapiRequiredFields.add("SDWAContaminants");
    openapiRequiredFields.add("SDWAContaminantsInCurViol");
    openapiRequiredFields.add("SDWAContaminantsInViol3yr");
    openapiRequiredFields.add("SDWDateLastFea");
    openapiRequiredFields.add("SDWDateLastFeaEPA");
    openapiRequiredFields.add("SDWDateLastFeaSt");
    openapiRequiredFields.add("SDWDateLastIea");
    openapiRequiredFields.add("SDWDateLastIeaEPA");
    openapiRequiredFields.add("SDWDateLastIeaSt");
    openapiRequiredFields.add("SDWDateLastVisit");
    openapiRequiredFields.add("SDWDateLastVisitEPA");
    openapiRequiredFields.add("SDWDateLastVisitLocal");
    openapiRequiredFields.add("SDWDateLastVisitState");
    openapiRequiredFields.add("SNC");
    openapiRequiredFields.add("SNCFlag");
    openapiRequiredFields.add("Sansurvey5yr");
    openapiRequiredFields.add("SeriousViolator");
    openapiRequiredFields.add("ServiceAreaTypeCode");
    openapiRequiredFields.add("ServiceAreaTypeDesc");
    openapiRequiredFields.add("SignificantDeficiencyCount");
    openapiRequiredFields.add("SignificantDeficiencyCountIls");
    openapiRequiredFields.add("SiteVisits5yrAll");
    openapiRequiredFields.add("SiteVisits5yrInspections");
    openapiRequiredFields.add("SiteVisits5yrOther");
    openapiRequiredFields.add("StateCode");
    openapiRequiredFields.add("TRIbalFlag");
    openapiRequiredFields.add("VioFlag");
    openapiRequiredFields.add("Viofeanot");
    openapiRequiredFields.add("ViolationCategories");
    openapiRequiredFields.add("Viopaccr");
    openapiRequiredFields.add("Vioremain");
    openapiRequiredFields.add("Viortcfea");
    openapiRequiredFields.add("Viortcnofea");
    openapiRequiredFields.add("ZipCodesServed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sdw04
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sdw04.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sdw04 is not found in the empty JSON string", Sdw04.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sdw04.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sdw04` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sdw04.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CitiesServed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CitiesServed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CitiesServed").toString()));
      }
      if (!jsonObj.get("CountiesServed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountiesServed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountiesServed").toString()));
      }
      if (!jsonObj.get("CuAle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuAle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuAle").toString()));
      }
      if (!jsonObj.get("CuViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CuViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CuViol").toString()));
      }
      if (!jsonObj.get("CurrVioFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrVioFlag").toString()));
      }
      if (!jsonObj.get("DateLastSansurvey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateLastSansurvey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateLastSansurvey").toString()));
      }
      if (!jsonObj.get("DfrUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DfrUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DfrUrl").toString()));
      }
      if (!jsonObj.get("EPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPARegion").toString()));
      }
      if (!jsonObj.get("FIPSCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FIPSCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FIPSCodes").toString()));
      }
      if (!jsonObj.get("FeaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeaFlag").toString()));
      }
      if (!jsonObj.get("Feas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Feas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Feas").toString()));
      }
      if (!jsonObj.get("GwSwCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GwSwCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GwSwCode").toString()));
      }
      if (!jsonObj.get("HealthFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthFlag").toString()));
      }
      if (!jsonObj.get("IeaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IeaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IeaFlag").toString()));
      }
      if (!jsonObj.get("Ifea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ifea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ifea").toString()));
      }
      if (!jsonObj.get("IndianCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndianCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndianCountry").toString()));
      }
      if (!jsonObj.get("Insp5yrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Insp5yrFlag").toString()));
      }
      if (!jsonObj.get("LeadAndCopperViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeadAndCopperViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeadAndCopperViol").toString()));
      }
      if (!jsonObj.get("MaxScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxScore").toString()));
      }
      if (!jsonObj.get("MrFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MrFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MrFlag").toString()));
      }
      if (!jsonObj.get("NewVioFlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewVioFlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewVioFlg").toString()));
      }
      if (!jsonObj.get("OtherFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OtherFlag").toString()));
      }
      if (!jsonObj.get("OwnerDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerDesc").toString()));
      }
      if (!jsonObj.get("OwnerTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerTypeCode").toString()));
      }
      if (!jsonObj.get("PWSActivityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSActivityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSActivityCode").toString()));
      }
      if (!jsonObj.get("PWSActivityDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSActivityDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSActivityDesc").toString()));
      }
      if (!jsonObj.get("PWSId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSId").toString()));
      }
      if (!jsonObj.get("PWSName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSName").toString()));
      }
      if (!jsonObj.get("PWSTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSTypeCode").toString()));
      }
      if (!jsonObj.get("PWSTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PWSTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PWSTypeDesc").toString()));
      }
      if (!jsonObj.get("PbAle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbAle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbAle").toString()));
      }
      if (!jsonObj.get("PbViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PbViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PbViol").toString()));
      }
      if (!jsonObj.get("PnFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PnFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PnFlag").toString()));
      }
      if (!jsonObj.get("PopulationServedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PopulationServedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PopulationServedCount").toString()));
      }
      if (!jsonObj.get("PrimarySourceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimarySourceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimarySourceCode").toString()));
      }
      if (!jsonObj.get("PrimarySourceDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimarySourceDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimarySourceDesc").toString()));
      }
      if (!jsonObj.get("QtrsWithSNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QtrsWithSNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QtrsWithSNC").toString()));
      }
      if (!jsonObj.get("QtrsWithVio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QtrsWithVio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QtrsWithVio").toString()));
      }
      if (!jsonObj.get("Rc350Viol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rc350Viol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rc350Viol").toString()));
      }
      if (!jsonObj.get("RegistryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryID").toString()));
      }
      if (!jsonObj.get("RulesVio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RulesVio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RulesVio").toString()));
      }
      if (!jsonObj.get("RulesVio3yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RulesVio3yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RulesVio3yr").toString()));
      }
      if (!jsonObj.get("SDWA3yrComplQtrsHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWA3yrComplQtrsHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWA3yrComplQtrsHistory").toString()));
      }
      if (!jsonObj.get("SDWAContaminants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAContaminants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAContaminants").toString()));
      }
      if (!jsonObj.get("SDWAContaminantsInCurViol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAContaminantsInCurViol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAContaminantsInCurViol").toString()));
      }
      if (!jsonObj.get("SDWAContaminantsInViol3yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWAContaminantsInViol3yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWAContaminantsInViol3yr").toString()));
      }
      if (!jsonObj.get("SDWDateLastFea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastFea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastFea").toString()));
      }
      if (!jsonObj.get("SDWDateLastFeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastFeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastFeaEPA").toString()));
      }
      if (!jsonObj.get("SDWDateLastFeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastFeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastFeaSt").toString()));
      }
      if (!jsonObj.get("SDWDateLastIea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastIea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastIea").toString()));
      }
      if (!jsonObj.get("SDWDateLastIeaEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastIeaEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastIeaEPA").toString()));
      }
      if (!jsonObj.get("SDWDateLastIeaSt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastIeaSt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastIeaSt").toString()));
      }
      if (!jsonObj.get("SDWDateLastVisit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastVisit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastVisit").toString()));
      }
      if (!jsonObj.get("SDWDateLastVisitEPA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastVisitEPA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastVisitEPA").toString()));
      }
      if (!jsonObj.get("SDWDateLastVisitLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastVisitLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastVisitLocal").toString()));
      }
      if (!jsonObj.get("SDWDateLastVisitState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWDateLastVisitState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWDateLastVisitState").toString()));
      }
      if (!jsonObj.get("SNC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SNC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SNC").toString()));
      }
      if (!jsonObj.get("SNCFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SNCFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SNCFlag").toString()));
      }
      if (!jsonObj.get("Sansurvey5yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sansurvey5yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sansurvey5yr").toString()));
      }
      if (!jsonObj.get("SeriousViolator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeriousViolator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeriousViolator").toString()));
      }
      if (!jsonObj.get("ServiceAreaTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceAreaTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceAreaTypeCode").toString()));
      }
      if (!jsonObj.get("ServiceAreaTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceAreaTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceAreaTypeDesc").toString()));
      }
      if (!jsonObj.get("SignificantDeficiencyCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SignificantDeficiencyCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SignificantDeficiencyCount").toString()));
      }
      if (!jsonObj.get("SignificantDeficiencyCountIls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SignificantDeficiencyCountIls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SignificantDeficiencyCountIls").toString()));
      }
      if (!jsonObj.get("SiteVisits5yrAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SiteVisits5yrAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SiteVisits5yrAll").toString()));
      }
      if (!jsonObj.get("SiteVisits5yrInspections").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SiteVisits5yrInspections` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SiteVisits5yrInspections").toString()));
      }
      if (!jsonObj.get("SiteVisits5yrOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SiteVisits5yrOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SiteVisits5yrOther").toString()));
      }
      if (!jsonObj.get("StateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateCode").toString()));
      }
      if (!jsonObj.get("TRIbalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRIbalFlag").toString()));
      }
      if (!jsonObj.get("VioFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VioFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VioFlag").toString()));
      }
      if (!jsonObj.get("Viofeanot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Viofeanot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Viofeanot").toString()));
      }
      if (!jsonObj.get("ViolationCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViolationCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViolationCategories").toString()));
      }
      if (!jsonObj.get("Viopaccr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Viopaccr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Viopaccr").toString()));
      }
      if (!jsonObj.get("Vioremain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Vioremain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Vioremain").toString()));
      }
      if (!jsonObj.get("Viortcfea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Viortcfea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Viortcfea").toString()));
      }
      if (!jsonObj.get("Viortcnofea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Viortcnofea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Viortcnofea").toString()));
      }
      if (!jsonObj.get("ZipCodesServed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ZipCodesServed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ZipCodesServed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sdw04.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sdw04' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sdw04> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sdw04.class));

       return (TypeAdapter<T>) new TypeAdapter<Sdw04>() {
           @Override
           public void write(JsonWriter out, Sdw04 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sdw04 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sdw04 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sdw04
   * @throws IOException if the JSON string is invalid with respect to Sdw04
   */
  public static Sdw04 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sdw04.class);
  }

  /**
   * Convert an instance of Sdw04 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

