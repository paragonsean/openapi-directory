# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sdw04(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cities_served: str=None, counties_served: str=None, cu_ale: str=None, cu_viol: str=None, curr_vio_flag: str=None, date_last_sansurvey: str=None, dfr_url: str=None, epa_region: str=None, fips_codes: str=None, fea_flag: str=None, feas: str=None, gw_sw_code: str=None, health_flag: str=None, iea_flag: str=None, ifea: str=None, indian_country: str=None, insp5yr_flag: str=None, lead_and_copper_viol: str=None, max_score: str=None, mr_flag: str=None, new_vio_flg: str=None, other_flag: str=None, owner_desc: str=None, owner_type_code: str=None, pws_activity_code: str=None, pws_activity_desc: str=None, pwsid: str=None, pws_name: str=None, pws_type_code: str=None, pws_type_desc: str=None, pb_ale: str=None, pb_viol: str=None, pn_flag: str=None, population_served_count: str=None, primary_source_code: str=None, primary_source_desc: str=None, qtrs_with_snc: str=None, qtrs_with_vio: str=None, rc350_viol: str=None, registry_id: str=None, rules_vio: str=None, rules_vio3yr: str=None, sdwa3yr_compl_qtrs_history: str=None, sdwa_contaminants: str=None, sdwa_contaminants_in_cur_viol: str=None, sdwa_contaminants_in_viol3yr: str=None, sdw_date_last_fea: str=None, sdw_date_last_fea_epa: str=None, sdw_date_last_fea_st: str=None, sdw_date_last_iea: str=None, sdw_date_last_iea_epa: str=None, sdw_date_last_iea_st: str=None, sdw_date_last_visit: str=None, sdw_date_last_visit_epa: str=None, sdw_date_last_visit_local: str=None, sdw_date_last_visit_state: str=None, snc: str=None, snc_flag: str=None, sansurvey5yr: str=None, serious_violator: str=None, service_area_type_code: str=None, service_area_type_desc: str=None, significant_deficiency_count: str=None, significant_deficiency_count_ils: str=None, site_visits5yr_all: str=None, site_visits5yr_inspections: str=None, site_visits5yr_other: str=None, state_code: str=None, tr_ibal_flag: str=None, vio_flag: str=None, viofeanot: str=None, violation_categories: str=None, viopaccr: str=None, vioremain: str=None, viortcfea: str=None, viortcnofea: str=None, zip_codes_served: str=None):
        """Sdw04 - a model defined in OpenAPI

        :param cities_served: The cities_served of this Sdw04.
        :param counties_served: The counties_served of this Sdw04.
        :param cu_ale: The cu_ale of this Sdw04.
        :param cu_viol: The cu_viol of this Sdw04.
        :param curr_vio_flag: The curr_vio_flag of this Sdw04.
        :param date_last_sansurvey: The date_last_sansurvey of this Sdw04.
        :param dfr_url: The dfr_url of this Sdw04.
        :param epa_region: The epa_region of this Sdw04.
        :param fips_codes: The fips_codes of this Sdw04.
        :param fea_flag: The fea_flag of this Sdw04.
        :param feas: The feas of this Sdw04.
        :param gw_sw_code: The gw_sw_code of this Sdw04.
        :param health_flag: The health_flag of this Sdw04.
        :param iea_flag: The iea_flag of this Sdw04.
        :param ifea: The ifea of this Sdw04.
        :param indian_country: The indian_country of this Sdw04.
        :param insp5yr_flag: The insp5yr_flag of this Sdw04.
        :param lead_and_copper_viol: The lead_and_copper_viol of this Sdw04.
        :param max_score: The max_score of this Sdw04.
        :param mr_flag: The mr_flag of this Sdw04.
        :param new_vio_flg: The new_vio_flg of this Sdw04.
        :param other_flag: The other_flag of this Sdw04.
        :param owner_desc: The owner_desc of this Sdw04.
        :param owner_type_code: The owner_type_code of this Sdw04.
        :param pws_activity_code: The pws_activity_code of this Sdw04.
        :param pws_activity_desc: The pws_activity_desc of this Sdw04.
        :param pwsid: The pwsid of this Sdw04.
        :param pws_name: The pws_name of this Sdw04.
        :param pws_type_code: The pws_type_code of this Sdw04.
        :param pws_type_desc: The pws_type_desc of this Sdw04.
        :param pb_ale: The pb_ale of this Sdw04.
        :param pb_viol: The pb_viol of this Sdw04.
        :param pn_flag: The pn_flag of this Sdw04.
        :param population_served_count: The population_served_count of this Sdw04.
        :param primary_source_code: The primary_source_code of this Sdw04.
        :param primary_source_desc: The primary_source_desc of this Sdw04.
        :param qtrs_with_snc: The qtrs_with_snc of this Sdw04.
        :param qtrs_with_vio: The qtrs_with_vio of this Sdw04.
        :param rc350_viol: The rc350_viol of this Sdw04.
        :param registry_id: The registry_id of this Sdw04.
        :param rules_vio: The rules_vio of this Sdw04.
        :param rules_vio3yr: The rules_vio3yr of this Sdw04.
        :param sdwa3yr_compl_qtrs_history: The sdwa3yr_compl_qtrs_history of this Sdw04.
        :param sdwa_contaminants: The sdwa_contaminants of this Sdw04.
        :param sdwa_contaminants_in_cur_viol: The sdwa_contaminants_in_cur_viol of this Sdw04.
        :param sdwa_contaminants_in_viol3yr: The sdwa_contaminants_in_viol3yr of this Sdw04.
        :param sdw_date_last_fea: The sdw_date_last_fea of this Sdw04.
        :param sdw_date_last_fea_epa: The sdw_date_last_fea_epa of this Sdw04.
        :param sdw_date_last_fea_st: The sdw_date_last_fea_st of this Sdw04.
        :param sdw_date_last_iea: The sdw_date_last_iea of this Sdw04.
        :param sdw_date_last_iea_epa: The sdw_date_last_iea_epa of this Sdw04.
        :param sdw_date_last_iea_st: The sdw_date_last_iea_st of this Sdw04.
        :param sdw_date_last_visit: The sdw_date_last_visit of this Sdw04.
        :param sdw_date_last_visit_epa: The sdw_date_last_visit_epa of this Sdw04.
        :param sdw_date_last_visit_local: The sdw_date_last_visit_local of this Sdw04.
        :param sdw_date_last_visit_state: The sdw_date_last_visit_state of this Sdw04.
        :param snc: The snc of this Sdw04.
        :param snc_flag: The snc_flag of this Sdw04.
        :param sansurvey5yr: The sansurvey5yr of this Sdw04.
        :param serious_violator: The serious_violator of this Sdw04.
        :param service_area_type_code: The service_area_type_code of this Sdw04.
        :param service_area_type_desc: The service_area_type_desc of this Sdw04.
        :param significant_deficiency_count: The significant_deficiency_count of this Sdw04.
        :param significant_deficiency_count_ils: The significant_deficiency_count_ils of this Sdw04.
        :param site_visits5yr_all: The site_visits5yr_all of this Sdw04.
        :param site_visits5yr_inspections: The site_visits5yr_inspections of this Sdw04.
        :param site_visits5yr_other: The site_visits5yr_other of this Sdw04.
        :param state_code: The state_code of this Sdw04.
        :param tr_ibal_flag: The tr_ibal_flag of this Sdw04.
        :param vio_flag: The vio_flag of this Sdw04.
        :param viofeanot: The viofeanot of this Sdw04.
        :param violation_categories: The violation_categories of this Sdw04.
        :param viopaccr: The viopaccr of this Sdw04.
        :param vioremain: The vioremain of this Sdw04.
        :param viortcfea: The viortcfea of this Sdw04.
        :param viortcnofea: The viortcnofea of this Sdw04.
        :param zip_codes_served: The zip_codes_served of this Sdw04.
        """
        self.openapi_types = {
            'cities_served': str,
            'counties_served': str,
            'cu_ale': str,
            'cu_viol': str,
            'curr_vio_flag': str,
            'date_last_sansurvey': str,
            'dfr_url': str,
            'epa_region': str,
            'fips_codes': str,
            'fea_flag': str,
            'feas': str,
            'gw_sw_code': str,
            'health_flag': str,
            'iea_flag': str,
            'ifea': str,
            'indian_country': str,
            'insp5yr_flag': str,
            'lead_and_copper_viol': str,
            'max_score': str,
            'mr_flag': str,
            'new_vio_flg': str,
            'other_flag': str,
            'owner_desc': str,
            'owner_type_code': str,
            'pws_activity_code': str,
            'pws_activity_desc': str,
            'pwsid': str,
            'pws_name': str,
            'pws_type_code': str,
            'pws_type_desc': str,
            'pb_ale': str,
            'pb_viol': str,
            'pn_flag': str,
            'population_served_count': str,
            'primary_source_code': str,
            'primary_source_desc': str,
            'qtrs_with_snc': str,
            'qtrs_with_vio': str,
            'rc350_viol': str,
            'registry_id': str,
            'rules_vio': str,
            'rules_vio3yr': str,
            'sdwa3yr_compl_qtrs_history': str,
            'sdwa_contaminants': str,
            'sdwa_contaminants_in_cur_viol': str,
            'sdwa_contaminants_in_viol3yr': str,
            'sdw_date_last_fea': str,
            'sdw_date_last_fea_epa': str,
            'sdw_date_last_fea_st': str,
            'sdw_date_last_iea': str,
            'sdw_date_last_iea_epa': str,
            'sdw_date_last_iea_st': str,
            'sdw_date_last_visit': str,
            'sdw_date_last_visit_epa': str,
            'sdw_date_last_visit_local': str,
            'sdw_date_last_visit_state': str,
            'snc': str,
            'snc_flag': str,
            'sansurvey5yr': str,
            'serious_violator': str,
            'service_area_type_code': str,
            'service_area_type_desc': str,
            'significant_deficiency_count': str,
            'significant_deficiency_count_ils': str,
            'site_visits5yr_all': str,
            'site_visits5yr_inspections': str,
            'site_visits5yr_other': str,
            'state_code': str,
            'tr_ibal_flag': str,
            'vio_flag': str,
            'viofeanot': str,
            'violation_categories': str,
            'viopaccr': str,
            'vioremain': str,
            'viortcfea': str,
            'viortcnofea': str,
            'zip_codes_served': str
        }

        self.attribute_map = {
            'cities_served': 'CitiesServed',
            'counties_served': 'CountiesServed',
            'cu_ale': 'CuAle',
            'cu_viol': 'CuViol',
            'curr_vio_flag': 'CurrVioFlag',
            'date_last_sansurvey': 'DateLastSansurvey',
            'dfr_url': 'DfrUrl',
            'epa_region': 'EPARegion',
            'fips_codes': 'FIPSCodes',
            'fea_flag': 'FeaFlag',
            'feas': 'Feas',
            'gw_sw_code': 'GwSwCode',
            'health_flag': 'HealthFlag',
            'iea_flag': 'IeaFlag',
            'ifea': 'Ifea',
            'indian_country': 'IndianCountry',
            'insp5yr_flag': 'Insp5yrFlag',
            'lead_and_copper_viol': 'LeadAndCopperViol',
            'max_score': 'MaxScore',
            'mr_flag': 'MrFlag',
            'new_vio_flg': 'NewVioFlg',
            'other_flag': 'OtherFlag',
            'owner_desc': 'OwnerDesc',
            'owner_type_code': 'OwnerTypeCode',
            'pws_activity_code': 'PWSActivityCode',
            'pws_activity_desc': 'PWSActivityDesc',
            'pwsid': 'PWSId',
            'pws_name': 'PWSName',
            'pws_type_code': 'PWSTypeCode',
            'pws_type_desc': 'PWSTypeDesc',
            'pb_ale': 'PbAle',
            'pb_viol': 'PbViol',
            'pn_flag': 'PnFlag',
            'population_served_count': 'PopulationServedCount',
            'primary_source_code': 'PrimarySourceCode',
            'primary_source_desc': 'PrimarySourceDesc',
            'qtrs_with_snc': 'QtrsWithSNC',
            'qtrs_with_vio': 'QtrsWithVio',
            'rc350_viol': 'Rc350Viol',
            'registry_id': 'RegistryID',
            'rules_vio': 'RulesVio',
            'rules_vio3yr': 'RulesVio3yr',
            'sdwa3yr_compl_qtrs_history': 'SDWA3yrComplQtrsHistory',
            'sdwa_contaminants': 'SDWAContaminants',
            'sdwa_contaminants_in_cur_viol': 'SDWAContaminantsInCurViol',
            'sdwa_contaminants_in_viol3yr': 'SDWAContaminantsInViol3yr',
            'sdw_date_last_fea': 'SDWDateLastFea',
            'sdw_date_last_fea_epa': 'SDWDateLastFeaEPA',
            'sdw_date_last_fea_st': 'SDWDateLastFeaSt',
            'sdw_date_last_iea': 'SDWDateLastIea',
            'sdw_date_last_iea_epa': 'SDWDateLastIeaEPA',
            'sdw_date_last_iea_st': 'SDWDateLastIeaSt',
            'sdw_date_last_visit': 'SDWDateLastVisit',
            'sdw_date_last_visit_epa': 'SDWDateLastVisitEPA',
            'sdw_date_last_visit_local': 'SDWDateLastVisitLocal',
            'sdw_date_last_visit_state': 'SDWDateLastVisitState',
            'snc': 'SNC',
            'snc_flag': 'SNCFlag',
            'sansurvey5yr': 'Sansurvey5yr',
            'serious_violator': 'SeriousViolator',
            'service_area_type_code': 'ServiceAreaTypeCode',
            'service_area_type_desc': 'ServiceAreaTypeDesc',
            'significant_deficiency_count': 'SignificantDeficiencyCount',
            'significant_deficiency_count_ils': 'SignificantDeficiencyCountIls',
            'site_visits5yr_all': 'SiteVisits5yrAll',
            'site_visits5yr_inspections': 'SiteVisits5yrInspections',
            'site_visits5yr_other': 'SiteVisits5yrOther',
            'state_code': 'StateCode',
            'tr_ibal_flag': 'TRIbalFlag',
            'vio_flag': 'VioFlag',
            'viofeanot': 'Viofeanot',
            'violation_categories': 'ViolationCategories',
            'viopaccr': 'Viopaccr',
            'vioremain': 'Vioremain',
            'viortcfea': 'Viortcfea',
            'viortcnofea': 'Viortcnofea',
            'zip_codes_served': 'ZipCodesServed'
        }

        self._cities_served = cities_served
        self._counties_served = counties_served
        self._cu_ale = cu_ale
        self._cu_viol = cu_viol
        self._curr_vio_flag = curr_vio_flag
        self._date_last_sansurvey = date_last_sansurvey
        self._dfr_url = dfr_url
        self._epa_region = epa_region
        self._fips_codes = fips_codes
        self._fea_flag = fea_flag
        self._feas = feas
        self._gw_sw_code = gw_sw_code
        self._health_flag = health_flag
        self._iea_flag = iea_flag
        self._ifea = ifea
        self._indian_country = indian_country
        self._insp5yr_flag = insp5yr_flag
        self._lead_and_copper_viol = lead_and_copper_viol
        self._max_score = max_score
        self._mr_flag = mr_flag
        self._new_vio_flg = new_vio_flg
        self._other_flag = other_flag
        self._owner_desc = owner_desc
        self._owner_type_code = owner_type_code
        self._pws_activity_code = pws_activity_code
        self._pws_activity_desc = pws_activity_desc
        self._pwsid = pwsid
        self._pws_name = pws_name
        self._pws_type_code = pws_type_code
        self._pws_type_desc = pws_type_desc
        self._pb_ale = pb_ale
        self._pb_viol = pb_viol
        self._pn_flag = pn_flag
        self._population_served_count = population_served_count
        self._primary_source_code = primary_source_code
        self._primary_source_desc = primary_source_desc
        self._qtrs_with_snc = qtrs_with_snc
        self._qtrs_with_vio = qtrs_with_vio
        self._rc350_viol = rc350_viol
        self._registry_id = registry_id
        self._rules_vio = rules_vio
        self._rules_vio3yr = rules_vio3yr
        self._sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history
        self._sdwa_contaminants = sdwa_contaminants
        self._sdwa_contaminants_in_cur_viol = sdwa_contaminants_in_cur_viol
        self._sdwa_contaminants_in_viol3yr = sdwa_contaminants_in_viol3yr
        self._sdw_date_last_fea = sdw_date_last_fea
        self._sdw_date_last_fea_epa = sdw_date_last_fea_epa
        self._sdw_date_last_fea_st = sdw_date_last_fea_st
        self._sdw_date_last_iea = sdw_date_last_iea
        self._sdw_date_last_iea_epa = sdw_date_last_iea_epa
        self._sdw_date_last_iea_st = sdw_date_last_iea_st
        self._sdw_date_last_visit = sdw_date_last_visit
        self._sdw_date_last_visit_epa = sdw_date_last_visit_epa
        self._sdw_date_last_visit_local = sdw_date_last_visit_local
        self._sdw_date_last_visit_state = sdw_date_last_visit_state
        self._snc = snc
        self._snc_flag = snc_flag
        self._sansurvey5yr = sansurvey5yr
        self._serious_violator = serious_violator
        self._service_area_type_code = service_area_type_code
        self._service_area_type_desc = service_area_type_desc
        self._significant_deficiency_count = significant_deficiency_count
        self._significant_deficiency_count_ils = significant_deficiency_count_ils
        self._site_visits5yr_all = site_visits5yr_all
        self._site_visits5yr_inspections = site_visits5yr_inspections
        self._site_visits5yr_other = site_visits5yr_other
        self._state_code = state_code
        self._tr_ibal_flag = tr_ibal_flag
        self._vio_flag = vio_flag
        self._viofeanot = viofeanot
        self._violation_categories = violation_categories
        self._viopaccr = viopaccr
        self._vioremain = vioremain
        self._viortcfea = viortcfea
        self._viortcnofea = viortcnofea
        self._zip_codes_served = zip_codes_served

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sdw04':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sdw04 of this Sdw04.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cities_served(self):
        """Gets the cities_served of this Sdw04.

        County

        :return: The cities_served of this Sdw04.
        :rtype: str
        """
        return self._cities_served

    @cities_served.setter
    def cities_served(self, cities_served):
        """Sets the cities_served of this Sdw04.

        County

        :param cities_served: The cities_served of this Sdw04.
        :type cities_served: str
        """
        if cities_served is None:
            raise ValueError("Invalid value for `cities_served`, must not be `None`")

        self._cities_served = cities_served

    @property
    def counties_served(self):
        """Gets the counties_served of this Sdw04.

        City

        :return: The counties_served of this Sdw04.
        :rtype: str
        """
        return self._counties_served

    @counties_served.setter
    def counties_served(self, counties_served):
        """Sets the counties_served of this Sdw04.

        City

        :param counties_served: The counties_served of this Sdw04.
        :type counties_served: str
        """
        if counties_served is None:
            raise ValueError("Invalid value for `counties_served`, must not be `None`")

        self._counties_served = counties_served

    @property
    def cu_ale(self):
        """Gets the cu_ale of this Sdw04.

        The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.

        :return: The cu_ale of this Sdw04.
        :rtype: str
        """
        return self._cu_ale

    @cu_ale.setter
    def cu_ale(self, cu_ale):
        """Sets the cu_ale of this Sdw04.

        The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.

        :param cu_ale: The cu_ale of this Sdw04.
        :type cu_ale: str
        """
        if cu_ale is None:
            raise ValueError("Invalid value for `cu_ale`, must not be `None`")

        self._cu_ale = cu_ale

    @property
    def cu_viol(self):
        """Gets the cu_viol of this Sdw04.

        The number of copper violations in the last five years.

        :return: The cu_viol of this Sdw04.
        :rtype: str
        """
        return self._cu_viol

    @cu_viol.setter
    def cu_viol(self, cu_viol):
        """Sets the cu_viol of this Sdw04.

        The number of copper violations in the last five years.

        :param cu_viol: The cu_viol of this Sdw04.
        :type cu_viol: str
        """
        if cu_viol is None:
            raise ValueError("Invalid value for `cu_viol`, must not be `None`")

        self._cu_viol = cu_viol

    @property
    def curr_vio_flag(self):
        """Gets the curr_vio_flag of this Sdw04.

        Indicates if the facility has a current violation. 1 = Yes

        :return: The curr_vio_flag of this Sdw04.
        :rtype: str
        """
        return self._curr_vio_flag

    @curr_vio_flag.setter
    def curr_vio_flag(self, curr_vio_flag):
        """Sets the curr_vio_flag of this Sdw04.

        Indicates if the facility has a current violation. 1 = Yes

        :param curr_vio_flag: The curr_vio_flag of this Sdw04.
        :type curr_vio_flag: str
        """
        if curr_vio_flag is None:
            raise ValueError("Invalid value for `curr_vio_flag`, must not be `None`")

        self._curr_vio_flag = curr_vio_flag

    @property
    def date_last_sansurvey(self):
        """Gets the date_last_sansurvey of this Sdw04.


        :return: The date_last_sansurvey of this Sdw04.
        :rtype: str
        """
        return self._date_last_sansurvey

    @date_last_sansurvey.setter
    def date_last_sansurvey(self, date_last_sansurvey):
        """Sets the date_last_sansurvey of this Sdw04.


        :param date_last_sansurvey: The date_last_sansurvey of this Sdw04.
        :type date_last_sansurvey: str
        """
        if date_last_sansurvey is None:
            raise ValueError("Invalid value for `date_last_sansurvey`, must not be `None`")

        self._date_last_sansurvey = date_last_sansurvey

    @property
    def dfr_url(self):
        """Gets the dfr_url of this Sdw04.

        The URL to the facility's Detailed Facility Report.

        :return: The dfr_url of this Sdw04.
        :rtype: str
        """
        return self._dfr_url

    @dfr_url.setter
    def dfr_url(self, dfr_url):
        """Sets the dfr_url of this Sdw04.

        The URL to the facility's Detailed Facility Report.

        :param dfr_url: The dfr_url of this Sdw04.
        :type dfr_url: str
        """
        if dfr_url is None:
            raise ValueError("Invalid value for `dfr_url`, must not be `None`")

        self._dfr_url = dfr_url

    @property
    def epa_region(self):
        """Gets the epa_region of this Sdw04.

        The EPA region in which the facility is located

        :return: The epa_region of this Sdw04.
        :rtype: str
        """
        return self._epa_region

    @epa_region.setter
    def epa_region(self, epa_region):
        """Sets the epa_region of this Sdw04.

        The EPA region in which the facility is located

        :param epa_region: The epa_region of this Sdw04.
        :type epa_region: str
        """
        if epa_region is None:
            raise ValueError("Invalid value for `epa_region`, must not be `None`")

        self._epa_region = epa_region

    @property
    def fips_codes(self):
        """Gets the fips_codes of this Sdw04.

        Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county

        :return: The fips_codes of this Sdw04.
        :rtype: str
        """
        return self._fips_codes

    @fips_codes.setter
    def fips_codes(self, fips_codes):
        """Sets the fips_codes of this Sdw04.

        Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county

        :param fips_codes: The fips_codes of this Sdw04.
        :type fips_codes: str
        """
        if fips_codes is None:
            raise ValueError("Invalid value for `fips_codes`, must not be `None`")

        self._fips_codes = fips_codes

    @property
    def fea_flag(self):
        """Gets the fea_flag of this Sdw04.

        Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance

        :return: The fea_flag of this Sdw04.
        :rtype: str
        """
        return self._fea_flag

    @fea_flag.setter
    def fea_flag(self, fea_flag):
        """Sets the fea_flag of this Sdw04.

        Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance

        :param fea_flag: The fea_flag of this Sdw04.
        :type fea_flag: str
        """
        if fea_flag is None:
            raise ValueError("Invalid value for `fea_flag`, must not be `None`")

        self._fea_flag = fea_flag

    @property
    def feas(self):
        """Gets the feas of this Sdw04.

        Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance.

        :return: The feas of this Sdw04.
        :rtype: str
        """
        return self._feas

    @feas.setter
    def feas(self, feas):
        """Sets the feas of this Sdw04.

        Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance.

        :param feas: The feas of this Sdw04.
        :type feas: str
        """
        if feas is None:
            raise ValueError("Invalid value for `feas`, must not be `None`")

        self._feas = feas

    @property
    def gw_sw_code(self):
        """Gets the gw_sw_code of this Sdw04.

        Returns \"GW\" if the system�source water type is ground water. Returns \"SW\" if the system source water type is surface water.

        :return: The gw_sw_code of this Sdw04.
        :rtype: str
        """
        return self._gw_sw_code

    @gw_sw_code.setter
    def gw_sw_code(self, gw_sw_code):
        """Sets the gw_sw_code of this Sdw04.

        Returns \"GW\" if the system�source water type is ground water. Returns \"SW\" if the system source water type is surface water.

        :param gw_sw_code: The gw_sw_code of this Sdw04.
        :type gw_sw_code: str
        """
        if gw_sw_code is None:
            raise ValueError("Invalid value for `gw_sw_code`, must not be `None`")

        self._gw_sw_code = gw_sw_code

    @property
    def health_flag(self):
        """Gets the health_flag of this Sdw04.

        Indicates whether system has violations of health-based drinking water standards

        :return: The health_flag of this Sdw04.
        :rtype: str
        """
        return self._health_flag

    @health_flag.setter
    def health_flag(self, health_flag):
        """Sets the health_flag of this Sdw04.

        Indicates whether system has violations of health-based drinking water standards

        :param health_flag: The health_flag of this Sdw04.
        :type health_flag: str
        """
        if health_flag is None:
            raise ValueError("Invalid value for `health_flag`, must not be `None`")

        self._health_flag = health_flag

    @property
    def iea_flag(self):
        """Gets the iea_flag of this Sdw04.

        Returns 0 if the system does not have informal enforcement actions in the past five years. Returns 1 if the system does have informal enforcement actions in the past five years.

        :return: The iea_flag of this Sdw04.
        :rtype: str
        """
        return self._iea_flag

    @iea_flag.setter
    def iea_flag(self, iea_flag):
        """Sets the iea_flag of this Sdw04.

        Returns 0 if the system does not have informal enforcement actions in the past five years. Returns 1 if the system does have informal enforcement actions in the past five years.

        :param iea_flag: The iea_flag of this Sdw04.
        :type iea_flag: str
        """
        if iea_flag is None:
            raise ValueError("Invalid value for `iea_flag`, must not be `None`")

        self._iea_flag = iea_flag

    @property
    def ifea(self):
        """Gets the ifea of this Sdw04.

        Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance.

        :return: The ifea of this Sdw04.
        :rtype: str
        """
        return self._ifea

    @ifea.setter
    def ifea(self, ifea):
        """Sets the ifea of this Sdw04.

        Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance.

        :param ifea: The ifea of this Sdw04.
        :type ifea: str
        """
        if ifea is None:
            raise ValueError("Invalid value for `ifea`, must not be `None`")

        self._ifea = ifea

    @property
    def indian_country(self):
        """Gets the indian_country of this Sdw04.

        Indicates whether the facility is located in Indian Country

        :return: The indian_country of this Sdw04.
        :rtype: str
        """
        return self._indian_country

    @indian_country.setter
    def indian_country(self, indian_country):
        """Sets the indian_country of this Sdw04.

        Indicates whether the facility is located in Indian Country

        :param indian_country: The indian_country of this Sdw04.
        :type indian_country: str
        """
        if indian_country is None:
            raise ValueError("Invalid value for `indian_country`, must not be `None`")

        self._indian_country = indian_country

    @property
    def insp5yr_flag(self):
        """Gets the insp5yr_flag of this Sdw04.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :return: The insp5yr_flag of this Sdw04.
        :rtype: str
        """
        return self._insp5yr_flag

    @insp5yr_flag.setter
    def insp5yr_flag(self, insp5yr_flag):
        """Sets the insp5yr_flag of this Sdw04.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :param insp5yr_flag: The insp5yr_flag of this Sdw04.
        :type insp5yr_flag: str
        """
        if insp5yr_flag is None:
            raise ValueError("Invalid value for `insp5yr_flag`, must not be `None`")

        self._insp5yr_flag = insp5yr_flag

    @property
    def lead_and_copper_viol(self):
        """Gets the lead_and_copper_viol of this Sdw04.

        The number of lead and copper violations.

        :return: The lead_and_copper_viol of this Sdw04.
        :rtype: str
        """
        return self._lead_and_copper_viol

    @lead_and_copper_viol.setter
    def lead_and_copper_viol(self, lead_and_copper_viol):
        """Sets the lead_and_copper_viol of this Sdw04.

        The number of lead and copper violations.

        :param lead_and_copper_viol: The lead_and_copper_viol of this Sdw04.
        :type lead_and_copper_viol: str
        """
        if lead_and_copper_viol is None:
            raise ValueError("Invalid value for `lead_and_copper_viol`, must not be `None`")

        self._lead_and_copper_viol = lead_and_copper_viol

    @property
    def max_score(self):
        """Gets the max_score of this Sdw04.

        A sorting score for internal use.

        :return: The max_score of this Sdw04.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Sdw04.

        A sorting score for internal use.

        :param max_score: The max_score of this Sdw04.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def mr_flag(self):
        """Gets the mr_flag of this Sdw04.

        Indicates whether system has monitoring and reporting violations

        :return: The mr_flag of this Sdw04.
        :rtype: str
        """
        return self._mr_flag

    @mr_flag.setter
    def mr_flag(self, mr_flag):
        """Sets the mr_flag of this Sdw04.

        Indicates whether system has monitoring and reporting violations

        :param mr_flag: The mr_flag of this Sdw04.
        :type mr_flag: str
        """
        if mr_flag is None:
            raise ValueError("Invalid value for `mr_flag`, must not be `None`")

        self._mr_flag = mr_flag

    @property
    def new_vio_flg(self):
        """Gets the new_vio_flg of this Sdw04.

        Violations that have been reported to SDWA since end of the last official quarter. These violations are considered draft and do not reflect the official compliance status for the facility.

        :return: The new_vio_flg of this Sdw04.
        :rtype: str
        """
        return self._new_vio_flg

    @new_vio_flg.setter
    def new_vio_flg(self, new_vio_flg):
        """Sets the new_vio_flg of this Sdw04.

        Violations that have been reported to SDWA since end of the last official quarter. These violations are considered draft and do not reflect the official compliance status for the facility.

        :param new_vio_flg: The new_vio_flg of this Sdw04.
        :type new_vio_flg: str
        """
        if new_vio_flg is None:
            raise ValueError("Invalid value for `new_vio_flg`, must not be `None`")

        self._new_vio_flg = new_vio_flg

    @property
    def other_flag(self):
        """Gets the other_flag of this Sdw04.

        Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records

        :return: The other_flag of this Sdw04.
        :rtype: str
        """
        return self._other_flag

    @other_flag.setter
    def other_flag(self, other_flag):
        """Sets the other_flag of this Sdw04.

        Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records

        :param other_flag: The other_flag of this Sdw04.
        :type other_flag: str
        """
        if other_flag is None:
            raise ValueError("Invalid value for `other_flag`, must not be `None`")

        self._other_flag = other_flag

    @property
    def owner_desc(self):
        """Gets the owner_desc of this Sdw04.

        Description of Owner code

        :return: The owner_desc of this Sdw04.
        :rtype: str
        """
        return self._owner_desc

    @owner_desc.setter
    def owner_desc(self, owner_desc):
        """Sets the owner_desc of this Sdw04.

        Description of Owner code

        :param owner_desc: The owner_desc of this Sdw04.
        :type owner_desc: str
        """
        if owner_desc is None:
            raise ValueError("Invalid value for `owner_desc`, must not be `None`")

        self._owner_desc = owner_desc

    @property
    def owner_type_code(self):
        """Gets the owner_type_code of this Sdw04.

        Owner/Operator: - P = Private - F = Federal Government - S = State Government - L = Local Government

        :return: The owner_type_code of this Sdw04.
        :rtype: str
        """
        return self._owner_type_code

    @owner_type_code.setter
    def owner_type_code(self, owner_type_code):
        """Sets the owner_type_code of this Sdw04.

        Owner/Operator: - P = Private - F = Federal Government - S = State Government - L = Local Government

        :param owner_type_code: The owner_type_code of this Sdw04.
        :type owner_type_code: str
        """
        if owner_type_code is None:
            raise ValueError("Invalid value for `owner_type_code`, must not be `None`")

        self._owner_type_code = owner_type_code

    @property
    def pws_activity_code(self):
        """Gets the pws_activity_code of this Sdw04.

        Indicates whether systems have an active or inactive designation.

        :return: The pws_activity_code of this Sdw04.
        :rtype: str
        """
        return self._pws_activity_code

    @pws_activity_code.setter
    def pws_activity_code(self, pws_activity_code):
        """Sets the pws_activity_code of this Sdw04.

        Indicates whether systems have an active or inactive designation.

        :param pws_activity_code: The pws_activity_code of this Sdw04.
        :type pws_activity_code: str
        """
        if pws_activity_code is None:
            raise ValueError("Invalid value for `pws_activity_code`, must not be `None`")

        self._pws_activity_code = pws_activity_code

    @property
    def pws_activity_desc(self):
        """Gets the pws_activity_desc of this Sdw04.

        Description of activity status code (ACT), e.g., active, inactive.

        :return: The pws_activity_desc of this Sdw04.
        :rtype: str
        """
        return self._pws_activity_desc

    @pws_activity_desc.setter
    def pws_activity_desc(self, pws_activity_desc):
        """Sets the pws_activity_desc of this Sdw04.

        Description of activity status code (ACT), e.g., active, inactive.

        :param pws_activity_desc: The pws_activity_desc of this Sdw04.
        :type pws_activity_desc: str
        """
        if pws_activity_desc is None:
            raise ValueError("Invalid value for `pws_activity_desc`, must not be `None`")

        self._pws_activity_desc = pws_activity_desc

    @property
    def pwsid(self):
        """Gets the pwsid of this Sdw04.

        Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits

        :return: The pwsid of this Sdw04.
        :rtype: str
        """
        return self._pwsid

    @pwsid.setter
    def pwsid(self, pwsid):
        """Sets the pwsid of this Sdw04.

        Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits

        :param pwsid: The pwsid of this Sdw04.
        :type pwsid: str
        """
        if pwsid is None:
            raise ValueError("Invalid value for `pwsid`, must not be `None`")

        self._pwsid = pwsid

    @property
    def pws_name(self):
        """Gets the pws_name of this Sdw04.

        Name of the system regulated under the Safe Drinking Water Act (SDWA)

        :return: The pws_name of this Sdw04.
        :rtype: str
        """
        return self._pws_name

    @pws_name.setter
    def pws_name(self, pws_name):
        """Sets the pws_name of this Sdw04.

        Name of the system regulated under the Safe Drinking Water Act (SDWA)

        :param pws_name: The pws_name of this Sdw04.
        :type pws_name: str
        """
        if pws_name is None:
            raise ValueError("Invalid value for `pws_name`, must not be `None`")

        self._pws_name = pws_name

    @property
    def pws_type_code(self):
        """Gets the pws_type_code of this Sdw04.

        Type of public water system: - CWS   = Community water system - NCWS  = Non-community water system - NTCWS = Non-transient non-community water system - TNCWS = Transient non-community water system

        :return: The pws_type_code of this Sdw04.
        :rtype: str
        """
        return self._pws_type_code

    @pws_type_code.setter
    def pws_type_code(self, pws_type_code):
        """Sets the pws_type_code of this Sdw04.

        Type of public water system: - CWS   = Community water system - NCWS  = Non-community water system - NTCWS = Non-transient non-community water system - TNCWS = Transient non-community water system

        :param pws_type_code: The pws_type_code of this Sdw04.
        :type pws_type_code: str
        """
        if pws_type_code is None:
            raise ValueError("Invalid value for `pws_type_code`, must not be `None`")

        self._pws_type_code = pws_type_code

    @property
    def pws_type_desc(self):
        """Gets the pws_type_desc of this Sdw04.

        The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a

        :return: The pws_type_desc of this Sdw04.
        :rtype: str
        """
        return self._pws_type_desc

    @pws_type_desc.setter
    def pws_type_desc(self, pws_type_desc):
        """Sets the pws_type_desc of this Sdw04.

        The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a

        :param pws_type_desc: The pws_type_desc of this Sdw04.
        :type pws_type_desc: str
        """
        if pws_type_desc is None:
            raise ValueError("Invalid value for `pws_type_desc`, must not be `None`")

        self._pws_type_desc = pws_type_desc

    @property
    def pb_ale(self):
        """Gets the pb_ale of this Sdw04.

        The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.

        :return: The pb_ale of this Sdw04.
        :rtype: str
        """
        return self._pb_ale

    @pb_ale.setter
    def pb_ale(self, pb_ale):
        """Sets the pb_ale of this Sdw04.

        The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.

        :param pb_ale: The pb_ale of this Sdw04.
        :type pb_ale: str
        """
        if pb_ale is None:
            raise ValueError("Invalid value for `pb_ale`, must not be `None`")

        self._pb_ale = pb_ale

    @property
    def pb_viol(self):
        """Gets the pb_viol of this Sdw04.

        The number of lead violations in the last five years.

        :return: The pb_viol of this Sdw04.
        :rtype: str
        """
        return self._pb_viol

    @pb_viol.setter
    def pb_viol(self, pb_viol):
        """Sets the pb_viol of this Sdw04.

        The number of lead violations in the last five years.

        :param pb_viol: The pb_viol of this Sdw04.
        :type pb_viol: str
        """
        if pb_viol is None:
            raise ValueError("Invalid value for `pb_viol`, must not be `None`")

        self._pb_viol = pb_viol

    @property
    def pn_flag(self):
        """Gets the pn_flag of this Sdw04.

        Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)

        :return: The pn_flag of this Sdw04.
        :rtype: str
        """
        return self._pn_flag

    @pn_flag.setter
    def pn_flag(self, pn_flag):
        """Sets the pn_flag of this Sdw04.

        Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)

        :param pn_flag: The pn_flag of this Sdw04.
        :type pn_flag: str
        """
        if pn_flag is None:
            raise ValueError("Invalid value for `pn_flag`, must not be `None`")

        self._pn_flag = pn_flag

    @property
    def population_served_count(self):
        """Gets the population_served_count of this Sdw04.

        Estimated average daily population served by a system

        :return: The population_served_count of this Sdw04.
        :rtype: str
        """
        return self._population_served_count

    @population_served_count.setter
    def population_served_count(self, population_served_count):
        """Sets the population_served_count of this Sdw04.

        Estimated average daily population served by a system

        :param population_served_count: The population_served_count of this Sdw04.
        :type population_served_count: str
        """
        if population_served_count is None:
            raise ValueError("Invalid value for `population_served_count`, must not be `None`")

        self._population_served_count = population_served_count

    @property
    def primary_source_code(self):
        """Gets the primary_source_code of this Sdw04.

        The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.

        :return: The primary_source_code of this Sdw04.
        :rtype: str
        """
        return self._primary_source_code

    @primary_source_code.setter
    def primary_source_code(self, primary_source_code):
        """Sets the primary_source_code of this Sdw04.

        The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.

        :param primary_source_code: The primary_source_code of this Sdw04.
        :type primary_source_code: str
        """
        if primary_source_code is None:
            raise ValueError("Invalid value for `primary_source_code`, must not be `None`")

        self._primary_source_code = primary_source_code

    @property
    def primary_source_desc(self):
        """Gets the primary_source_desc of this Sdw04.

        The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.

        :return: The primary_source_desc of this Sdw04.
        :rtype: str
        """
        return self._primary_source_desc

    @primary_source_desc.setter
    def primary_source_desc(self, primary_source_desc):
        """Sets the primary_source_desc of this Sdw04.

        The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.

        :param primary_source_desc: The primary_source_desc of this Sdw04.
        :type primary_source_desc: str
        """
        if primary_source_desc is None:
            raise ValueError("Invalid value for `primary_source_desc`, must not be `None`")

        self._primary_source_desc = primary_source_desc

    @property
    def qtrs_with_snc(self):
        """Gets the qtrs_with_snc of this Sdw04.

        The number of quarters the system was designated by EPA as a serious violator over the past 3 years (12 most recent quarters).

        :return: The qtrs_with_snc of this Sdw04.
        :rtype: str
        """
        return self._qtrs_with_snc

    @qtrs_with_snc.setter
    def qtrs_with_snc(self, qtrs_with_snc):
        """Sets the qtrs_with_snc of this Sdw04.

        The number of quarters the system was designated by EPA as a serious violator over the past 3 years (12 most recent quarters).

        :param qtrs_with_snc: The qtrs_with_snc of this Sdw04.
        :type qtrs_with_snc: str
        """
        if qtrs_with_snc is None:
            raise ValueError("Invalid value for `qtrs_with_snc`, must not be `None`")

        self._qtrs_with_snc = qtrs_with_snc

    @property
    def qtrs_with_vio(self):
        """Gets the qtrs_with_vio of this Sdw04.

        The number of quarters the system was in violation over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.

        :return: The qtrs_with_vio of this Sdw04.
        :rtype: str
        """
        return self._qtrs_with_vio

    @qtrs_with_vio.setter
    def qtrs_with_vio(self, qtrs_with_vio):
        """Sets the qtrs_with_vio of this Sdw04.

        The number of quarters the system was in violation over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.

        :param qtrs_with_vio: The qtrs_with_vio of this Sdw04.
        :type qtrs_with_vio: str
        """
        if qtrs_with_vio is None:
            raise ValueError("Invalid value for `qtrs_with_vio`, must not be `None`")

        self._qtrs_with_vio = qtrs_with_vio

    @property
    def rc350_viol(self):
        """Gets the rc350_viol of this Sdw04.

        The count of open health-based lead violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules. This count includes new violations that have been reported since the end of the last official quarter.

        :return: The rc350_viol of this Sdw04.
        :rtype: str
        """
        return self._rc350_viol

    @rc350_viol.setter
    def rc350_viol(self, rc350_viol):
        """Sets the rc350_viol of this Sdw04.

        The count of open health-based lead violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules. This count includes new violations that have been reported since the end of the last official quarter.

        :param rc350_viol: The rc350_viol of this Sdw04.
        :type rc350_viol: str
        """
        if rc350_viol is None:
            raise ValueError("Invalid value for `rc350_viol`, must not be `None`")

        self._rc350_viol = rc350_viol

    @property
    def registry_id(self):
        """Gets the registry_id of this Sdw04.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Sdw04.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Sdw04.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Sdw04.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def rules_vio(self):
        """Gets the rules_vio of this Sdw04.

        The count of rules the system is violating as of the latest official quarter of data in the source system, SDWIS, which may lag by 3-6 months. This includes violations in the most recent official quarter and new violations reported after the end of the last official quarter.

        :return: The rules_vio of this Sdw04.
        :rtype: str
        """
        return self._rules_vio

    @rules_vio.setter
    def rules_vio(self, rules_vio):
        """Sets the rules_vio of this Sdw04.

        The count of rules the system is violating as of the latest official quarter of data in the source system, SDWIS, which may lag by 3-6 months. This includes violations in the most recent official quarter and new violations reported after the end of the last official quarter.

        :param rules_vio: The rules_vio of this Sdw04.
        :type rules_vio: str
        """
        if rules_vio is None:
            raise ValueError("Invalid value for `rules_vio`, must not be `None`")

        self._rules_vio = rules_vio

    @property
    def rules_vio3yr(self):
        """Gets the rules_vio3yr of this Sdw04.

        The count of rules the system was in violation of over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.

        :return: The rules_vio3yr of this Sdw04.
        :rtype: str
        """
        return self._rules_vio3yr

    @rules_vio3yr.setter
    def rules_vio3yr(self, rules_vio3yr):
        """Sets the rules_vio3yr of this Sdw04.

        The count of rules the system was in violation of over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.

        :param rules_vio3yr: The rules_vio3yr of this Sdw04.
        :type rules_vio3yr: str
        """
        if rules_vio3yr is None:
            raise ValueError("Invalid value for `rules_vio3yr`, must not be `None`")

        self._rules_vio3yr = rules_vio3yr

    @property
    def sdwa3yr_compl_qtrs_history(self):
        """Gets the sdwa3yr_compl_qtrs_history of this Sdw04.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined

        :return: The sdwa3yr_compl_qtrs_history of this Sdw04.
        :rtype: str
        """
        return self._sdwa3yr_compl_qtrs_history

    @sdwa3yr_compl_qtrs_history.setter
    def sdwa3yr_compl_qtrs_history(self, sdwa3yr_compl_qtrs_history):
        """Sets the sdwa3yr_compl_qtrs_history of this Sdw04.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined

        :param sdwa3yr_compl_qtrs_history: The sdwa3yr_compl_qtrs_history of this Sdw04.
        :type sdwa3yr_compl_qtrs_history: str
        """
        if sdwa3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `sdwa3yr_compl_qtrs_history`, must not be `None`")

        self._sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history

    @property
    def sdwa_contaminants(self):
        """Gets the sdwa_contaminants of this Sdw04.

        All unresolved violation contaminants or violation contaminants that have been resolved in the last 5 years.

        :return: The sdwa_contaminants of this Sdw04.
        :rtype: str
        """
        return self._sdwa_contaminants

    @sdwa_contaminants.setter
    def sdwa_contaminants(self, sdwa_contaminants):
        """Sets the sdwa_contaminants of this Sdw04.

        All unresolved violation contaminants or violation contaminants that have been resolved in the last 5 years.

        :param sdwa_contaminants: The sdwa_contaminants of this Sdw04.
        :type sdwa_contaminants: str
        """
        if sdwa_contaminants is None:
            raise ValueError("Invalid value for `sdwa_contaminants`, must not be `None`")

        self._sdwa_contaminants = sdwa_contaminants

    @property
    def sdwa_contaminants_in_cur_viol(self):
        """Gets the sdwa_contaminants_in_cur_viol of this Sdw04.

        The contaminant name and code (in SDWIS) in violation of a SDWA regulation. This includes violations in the most recent official quarter and new violations that have been reported since the end of the last official quarter.

        :return: The sdwa_contaminants_in_cur_viol of this Sdw04.
        :rtype: str
        """
        return self._sdwa_contaminants_in_cur_viol

    @sdwa_contaminants_in_cur_viol.setter
    def sdwa_contaminants_in_cur_viol(self, sdwa_contaminants_in_cur_viol):
        """Sets the sdwa_contaminants_in_cur_viol of this Sdw04.

        The contaminant name and code (in SDWIS) in violation of a SDWA regulation. This includes violations in the most recent official quarter and new violations that have been reported since the end of the last official quarter.

        :param sdwa_contaminants_in_cur_viol: The sdwa_contaminants_in_cur_viol of this Sdw04.
        :type sdwa_contaminants_in_cur_viol: str
        """
        if sdwa_contaminants_in_cur_viol is None:
            raise ValueError("Invalid value for `sdwa_contaminants_in_cur_viol`, must not be `None`")

        self._sdwa_contaminants_in_cur_viol = sdwa_contaminants_in_cur_viol

    @property
    def sdwa_contaminants_in_viol3yr(self):
        """Gets the sdwa_contaminants_in_viol3yr of this Sdw04.

        The contaminant name and code in violation of a SDWA regulation in the past three years

        :return: The sdwa_contaminants_in_viol3yr of this Sdw04.
        :rtype: str
        """
        return self._sdwa_contaminants_in_viol3yr

    @sdwa_contaminants_in_viol3yr.setter
    def sdwa_contaminants_in_viol3yr(self, sdwa_contaminants_in_viol3yr):
        """Sets the sdwa_contaminants_in_viol3yr of this Sdw04.

        The contaminant name and code in violation of a SDWA regulation in the past three years

        :param sdwa_contaminants_in_viol3yr: The sdwa_contaminants_in_viol3yr of this Sdw04.
        :type sdwa_contaminants_in_viol3yr: str
        """
        if sdwa_contaminants_in_viol3yr is None:
            raise ValueError("Invalid value for `sdwa_contaminants_in_viol3yr`, must not be `None`")

        self._sdwa_contaminants_in_viol3yr = sdwa_contaminants_in_viol3yr

    @property
    def sdw_date_last_fea(self):
        """Gets the sdw_date_last_fea of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS within the last five years.

        :return: The sdw_date_last_fea of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_fea

    @sdw_date_last_fea.setter
    def sdw_date_last_fea(self, sdw_date_last_fea):
        """Sets the sdw_date_last_fea of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS within the last five years.

        :param sdw_date_last_fea: The sdw_date_last_fea of this Sdw04.
        :type sdw_date_last_fea: str
        """
        if sdw_date_last_fea is None:
            raise ValueError("Invalid value for `sdw_date_last_fea`, must not be `None`")

        self._sdw_date_last_fea = sdw_date_last_fea

    @property
    def sdw_date_last_fea_epa(self):
        """Gets the sdw_date_last_fea_epa of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by EPA within the last five years.

        :return: The sdw_date_last_fea_epa of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_fea_epa

    @sdw_date_last_fea_epa.setter
    def sdw_date_last_fea_epa(self, sdw_date_last_fea_epa):
        """Sets the sdw_date_last_fea_epa of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by EPA within the last five years.

        :param sdw_date_last_fea_epa: The sdw_date_last_fea_epa of this Sdw04.
        :type sdw_date_last_fea_epa: str
        """
        if sdw_date_last_fea_epa is None:
            raise ValueError("Invalid value for `sdw_date_last_fea_epa`, must not be `None`")

        self._sdw_date_last_fea_epa = sdw_date_last_fea_epa

    @property
    def sdw_date_last_fea_st(self):
        """Gets the sdw_date_last_fea_st of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by a state environmental agency within the last five years.

        :return: The sdw_date_last_fea_st of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_fea_st

    @sdw_date_last_fea_st.setter
    def sdw_date_last_fea_st(self, sdw_date_last_fea_st):
        """Sets the sdw_date_last_fea_st of this Sdw04.

        Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by a state environmental agency within the last five years.

        :param sdw_date_last_fea_st: The sdw_date_last_fea_st of this Sdw04.
        :type sdw_date_last_fea_st: str
        """
        if sdw_date_last_fea_st is None:
            raise ValueError("Invalid value for `sdw_date_last_fea_st`, must not be `None`")

        self._sdw_date_last_fea_st = sdw_date_last_fea_st

    @property
    def sdw_date_last_iea(self):
        """Gets the sdw_date_last_iea of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS within the last five years.

        :return: The sdw_date_last_iea of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_iea

    @sdw_date_last_iea.setter
    def sdw_date_last_iea(self, sdw_date_last_iea):
        """Sets the sdw_date_last_iea of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS within the last five years.

        :param sdw_date_last_iea: The sdw_date_last_iea of this Sdw04.
        :type sdw_date_last_iea: str
        """
        if sdw_date_last_iea is None:
            raise ValueError("Invalid value for `sdw_date_last_iea`, must not be `None`")

        self._sdw_date_last_iea = sdw_date_last_iea

    @property
    def sdw_date_last_iea_epa(self):
        """Gets the sdw_date_last_iea_epa of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by EPA within the last five years.

        :return: The sdw_date_last_iea_epa of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_iea_epa

    @sdw_date_last_iea_epa.setter
    def sdw_date_last_iea_epa(self, sdw_date_last_iea_epa):
        """Sets the sdw_date_last_iea_epa of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by EPA within the last five years.

        :param sdw_date_last_iea_epa: The sdw_date_last_iea_epa of this Sdw04.
        :type sdw_date_last_iea_epa: str
        """
        if sdw_date_last_iea_epa is None:
            raise ValueError("Invalid value for `sdw_date_last_iea_epa`, must not be `None`")

        self._sdw_date_last_iea_epa = sdw_date_last_iea_epa

    @property
    def sdw_date_last_iea_st(self):
        """Gets the sdw_date_last_iea_st of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by a state environmental agency within the last five years.

        :return: The sdw_date_last_iea_st of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_iea_st

    @sdw_date_last_iea_st.setter
    def sdw_date_last_iea_st(self, sdw_date_last_iea_st):
        """Sets the sdw_date_last_iea_st of this Sdw04.

        Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by a state environmental agency within the last five years.

        :param sdw_date_last_iea_st: The sdw_date_last_iea_st of this Sdw04.
        :type sdw_date_last_iea_st: str
        """
        if sdw_date_last_iea_st is None:
            raise ValueError("Invalid value for `sdw_date_last_iea_st`, must not be `None`")

        self._sdw_date_last_iea_st = sdw_date_last_iea_st

    @property
    def sdw_date_last_visit(self):
        """Gets the sdw_date_last_visit of this Sdw04.

        The date of the last system visit.

        :return: The sdw_date_last_visit of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_visit

    @sdw_date_last_visit.setter
    def sdw_date_last_visit(self, sdw_date_last_visit):
        """Sets the sdw_date_last_visit of this Sdw04.

        The date of the last system visit.

        :param sdw_date_last_visit: The sdw_date_last_visit of this Sdw04.
        :type sdw_date_last_visit: str
        """
        if sdw_date_last_visit is None:
            raise ValueError("Invalid value for `sdw_date_last_visit`, must not be `None`")

        self._sdw_date_last_visit = sdw_date_last_visit

    @property
    def sdw_date_last_visit_epa(self):
        """Gets the sdw_date_last_visit_epa of this Sdw04.

        The date of the last system visit by EPA.

        :return: The sdw_date_last_visit_epa of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_visit_epa

    @sdw_date_last_visit_epa.setter
    def sdw_date_last_visit_epa(self, sdw_date_last_visit_epa):
        """Sets the sdw_date_last_visit_epa of this Sdw04.

        The date of the last system visit by EPA.

        :param sdw_date_last_visit_epa: The sdw_date_last_visit_epa of this Sdw04.
        :type sdw_date_last_visit_epa: str
        """
        if sdw_date_last_visit_epa is None:
            raise ValueError("Invalid value for `sdw_date_last_visit_epa`, must not be `None`")

        self._sdw_date_last_visit_epa = sdw_date_last_visit_epa

    @property
    def sdw_date_last_visit_local(self):
        """Gets the sdw_date_last_visit_local of this Sdw04.

        The date of the last system visit by a local agency.

        :return: The sdw_date_last_visit_local of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_visit_local

    @sdw_date_last_visit_local.setter
    def sdw_date_last_visit_local(self, sdw_date_last_visit_local):
        """Sets the sdw_date_last_visit_local of this Sdw04.

        The date of the last system visit by a local agency.

        :param sdw_date_last_visit_local: The sdw_date_last_visit_local of this Sdw04.
        :type sdw_date_last_visit_local: str
        """
        if sdw_date_last_visit_local is None:
            raise ValueError("Invalid value for `sdw_date_last_visit_local`, must not be `None`")

        self._sdw_date_last_visit_local = sdw_date_last_visit_local

    @property
    def sdw_date_last_visit_state(self):
        """Gets the sdw_date_last_visit_state of this Sdw04.

        The date of the last system visit by a state agency.

        :return: The sdw_date_last_visit_state of this Sdw04.
        :rtype: str
        """
        return self._sdw_date_last_visit_state

    @sdw_date_last_visit_state.setter
    def sdw_date_last_visit_state(self, sdw_date_last_visit_state):
        """Sets the sdw_date_last_visit_state of this Sdw04.

        The date of the last system visit by a state agency.

        :param sdw_date_last_visit_state: The sdw_date_last_visit_state of this Sdw04.
        :type sdw_date_last_visit_state: str
        """
        if sdw_date_last_visit_state is None:
            raise ValueError("Invalid value for `sdw_date_last_visit_state`, must not be `None`")

        self._sdw_date_last_visit_state = sdw_date_last_visit_state

    @property
    def snc(self):
        """Gets the snc of this Sdw04.

        Indicates the system's compliance status: No Violation,�In Violation, Signficant Noncompliance, or Unknown.

        :return: The snc of this Sdw04.
        :rtype: str
        """
        return self._snc

    @snc.setter
    def snc(self, snc):
        """Sets the snc of this Sdw04.

        Indicates the system's compliance status: No Violation,�In Violation, Signficant Noncompliance, or Unknown.

        :param snc: The snc of this Sdw04.
        :type snc: str
        """
        if snc is None:
            raise ValueError("Invalid value for `snc`, must not be `None`")

        self._snc = snc

    @property
    def snc_flag(self):
        """Gets the snc_flag of this Sdw04.

        Returns 1 if the system is in significant noncompliance (SNC); returns 0 if not.

        :return: The snc_flag of this Sdw04.
        :rtype: str
        """
        return self._snc_flag

    @snc_flag.setter
    def snc_flag(self, snc_flag):
        """Sets the snc_flag of this Sdw04.

        Returns 1 if the system is in significant noncompliance (SNC); returns 0 if not.

        :param snc_flag: The snc_flag of this Sdw04.
        :type snc_flag: str
        """
        if snc_flag is None:
            raise ValueError("Invalid value for `snc_flag`, must not be `None`")

        self._snc_flag = snc_flag

    @property
    def sansurvey5yr(self):
        """Gets the sansurvey5yr of this Sdw04.

        The number of sanitary surveys completed within the past five years. A sanitary survey is an on-site review of a system's water source, facilities, equipment, operation, and maintenance, intended to point out sanitary deficiencies and assess the system's capability to supply safe drinking water.

        :return: The sansurvey5yr of this Sdw04.
        :rtype: str
        """
        return self._sansurvey5yr

    @sansurvey5yr.setter
    def sansurvey5yr(self, sansurvey5yr):
        """Sets the sansurvey5yr of this Sdw04.

        The number of sanitary surveys completed within the past five years. A sanitary survey is an on-site review of a system's water source, facilities, equipment, operation, and maintenance, intended to point out sanitary deficiencies and assess the system's capability to supply safe drinking water.

        :param sansurvey5yr: The sansurvey5yr of this Sdw04.
        :type sansurvey5yr: str
        """
        if sansurvey5yr is None:
            raise ValueError("Invalid value for `sansurvey5yr`, must not be `None`")

        self._sansurvey5yr = sansurvey5yr

    @property
    def serious_violator(self):
        """Gets the serious_violator of this Sdw04.

        Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)

        :return: The serious_violator of this Sdw04.
        :rtype: str
        """
        return self._serious_violator

    @serious_violator.setter
    def serious_violator(self, serious_violator):
        """Sets the serious_violator of this Sdw04.

        Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)

        :param serious_violator: The serious_violator of this Sdw04.
        :type serious_violator: str
        """
        if serious_violator is None:
            raise ValueError("Invalid value for `serious_violator`, must not be `None`")

        self._serious_violator = serious_violator

    @property
    def service_area_type_code(self):
        """Gets the service_area_type_code of this Sdw04.


        :return: The service_area_type_code of this Sdw04.
        :rtype: str
        """
        return self._service_area_type_code

    @service_area_type_code.setter
    def service_area_type_code(self, service_area_type_code):
        """Sets the service_area_type_code of this Sdw04.


        :param service_area_type_code: The service_area_type_code of this Sdw04.
        :type service_area_type_code: str
        """
        if service_area_type_code is None:
            raise ValueError("Invalid value for `service_area_type_code`, must not be `None`")

        self._service_area_type_code = service_area_type_code

    @property
    def service_area_type_desc(self):
        """Gets the service_area_type_desc of this Sdw04.


        :return: The service_area_type_desc of this Sdw04.
        :rtype: str
        """
        return self._service_area_type_desc

    @service_area_type_desc.setter
    def service_area_type_desc(self, service_area_type_desc):
        """Sets the service_area_type_desc of this Sdw04.


        :param service_area_type_desc: The service_area_type_desc of this Sdw04.
        :type service_area_type_desc: str
        """
        if service_area_type_desc is None:
            raise ValueError("Invalid value for `service_area_type_desc`, must not be `None`")

        self._service_area_type_desc = service_area_type_desc

    @property
    def significant_deficiency_count(self):
        """Gets the significant_deficiency_count of this Sdw04.

        The number of significant deficiencies found from a sanitary survey within the past five years.

        :return: The significant_deficiency_count of this Sdw04.
        :rtype: str
        """
        return self._significant_deficiency_count

    @significant_deficiency_count.setter
    def significant_deficiency_count(self, significant_deficiency_count):
        """Sets the significant_deficiency_count of this Sdw04.

        The number of significant deficiencies found from a sanitary survey within the past five years.

        :param significant_deficiency_count: The significant_deficiency_count of this Sdw04.
        :type significant_deficiency_count: str
        """
        if significant_deficiency_count is None:
            raise ValueError("Invalid value for `significant_deficiency_count`, must not be `None`")

        self._significant_deficiency_count = significant_deficiency_count

    @property
    def significant_deficiency_count_ils(self):
        """Gets the significant_deficiency_count_ils of this Sdw04.


        :return: The significant_deficiency_count_ils of this Sdw04.
        :rtype: str
        """
        return self._significant_deficiency_count_ils

    @significant_deficiency_count_ils.setter
    def significant_deficiency_count_ils(self, significant_deficiency_count_ils):
        """Sets the significant_deficiency_count_ils of this Sdw04.


        :param significant_deficiency_count_ils: The significant_deficiency_count_ils of this Sdw04.
        :type significant_deficiency_count_ils: str
        """
        if significant_deficiency_count_ils is None:
            raise ValueError("Invalid value for `significant_deficiency_count_ils`, must not be `None`")

        self._significant_deficiency_count_ils = significant_deficiency_count_ils

    @property
    def site_visits5yr_all(self):
        """Gets the site_visits5yr_all of this Sdw04.


        :return: The site_visits5yr_all of this Sdw04.
        :rtype: str
        """
        return self._site_visits5yr_all

    @site_visits5yr_all.setter
    def site_visits5yr_all(self, site_visits5yr_all):
        """Sets the site_visits5yr_all of this Sdw04.


        :param site_visits5yr_all: The site_visits5yr_all of this Sdw04.
        :type site_visits5yr_all: str
        """
        if site_visits5yr_all is None:
            raise ValueError("Invalid value for `site_visits5yr_all`, must not be `None`")

        self._site_visits5yr_all = site_visits5yr_all

    @property
    def site_visits5yr_inspections(self):
        """Gets the site_visits5yr_inspections of this Sdw04.


        :return: The site_visits5yr_inspections of this Sdw04.
        :rtype: str
        """
        return self._site_visits5yr_inspections

    @site_visits5yr_inspections.setter
    def site_visits5yr_inspections(self, site_visits5yr_inspections):
        """Sets the site_visits5yr_inspections of this Sdw04.


        :param site_visits5yr_inspections: The site_visits5yr_inspections of this Sdw04.
        :type site_visits5yr_inspections: str
        """
        if site_visits5yr_inspections is None:
            raise ValueError("Invalid value for `site_visits5yr_inspections`, must not be `None`")

        self._site_visits5yr_inspections = site_visits5yr_inspections

    @property
    def site_visits5yr_other(self):
        """Gets the site_visits5yr_other of this Sdw04.


        :return: The site_visits5yr_other of this Sdw04.
        :rtype: str
        """
        return self._site_visits5yr_other

    @site_visits5yr_other.setter
    def site_visits5yr_other(self, site_visits5yr_other):
        """Sets the site_visits5yr_other of this Sdw04.


        :param site_visits5yr_other: The site_visits5yr_other of this Sdw04.
        :type site_visits5yr_other: str
        """
        if site_visits5yr_other is None:
            raise ValueError("Invalid value for `site_visits5yr_other`, must not be `None`")

        self._site_visits5yr_other = site_visits5yr_other

    @property
    def state_code(self):
        """Gets the state_code of this Sdw04.

        The state in which the system is located.

        :return: The state_code of this Sdw04.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Sdw04.

        The state in which the system is located.

        :param state_code: The state_code of this Sdw04.
        :type state_code: str
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")

        self._state_code = state_code

    @property
    def tr_ibal_flag(self):
        """Gets the tr_ibal_flag of this Sdw04.

        A flag indicating that the facility is within a tribal area.

        :return: The tr_ibal_flag of this Sdw04.
        :rtype: str
        """
        return self._tr_ibal_flag

    @tr_ibal_flag.setter
    def tr_ibal_flag(self, tr_ibal_flag):
        """Sets the tr_ibal_flag of this Sdw04.

        A flag indicating that the facility is within a tribal area.

        :param tr_ibal_flag: The tr_ibal_flag of this Sdw04.
        :type tr_ibal_flag: str
        """
        if tr_ibal_flag is None:
            raise ValueError("Invalid value for `tr_ibal_flag`, must not be `None`")

        self._tr_ibal_flag = tr_ibal_flag

    @property
    def vio_flag(self):
        """Gets the vio_flag of this Sdw04.

        Indicates whether the system has been in violation in the past five years (1 if yes, 0 if no).

        :return: The vio_flag of this Sdw04.
        :rtype: str
        """
        return self._vio_flag

    @vio_flag.setter
    def vio_flag(self, vio_flag):
        """Sets the vio_flag of this Sdw04.

        Indicates whether the system has been in violation in the past five years (1 if yes, 0 if no).

        :param vio_flag: The vio_flag of this Sdw04.
        :type vio_flag: str
        """
        if vio_flag is None:
            raise ValueError("Invalid value for `vio_flag`, must not be `None`")

        self._vio_flag = vio_flag

    @property
    def viofeanot(self):
        """Gets the viofeanot of this Sdw04.

        Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh

        :return: The viofeanot of this Sdw04.
        :rtype: str
        """
        return self._viofeanot

    @viofeanot.setter
    def viofeanot(self, viofeanot):
        """Sets the viofeanot of this Sdw04.

        Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh

        :param viofeanot: The viofeanot of this Sdw04.
        :type viofeanot: str
        """
        if viofeanot is None:
            raise ValueError("Invalid value for `viofeanot`, must not be `None`")

        self._viofeanot = viofeanot

    @property
    def violation_categories(self):
        """Gets the violation_categories of this Sdw04.


        :return: The violation_categories of this Sdw04.
        :rtype: str
        """
        return self._violation_categories

    @violation_categories.setter
    def violation_categories(self, violation_categories):
        """Sets the violation_categories of this Sdw04.


        :param violation_categories: The violation_categories of this Sdw04.
        :type violation_categories: str
        """
        if violation_categories is None:
            raise ValueError("Invalid value for `violation_categories`, must not be `None`")

        self._violation_categories = violation_categories

    @property
    def viopaccr(self):
        """Gets the viopaccr of this Sdw04.

        Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh

        :return: The viopaccr of this Sdw04.
        :rtype: str
        """
        return self._viopaccr

    @viopaccr.setter
    def viopaccr(self, viopaccr):
        """Sets the viopaccr of this Sdw04.

        Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh

        :param viopaccr: The viopaccr of this Sdw04.
        :type viopaccr: str
        """
        if viopaccr is None:
            raise ValueError("Invalid value for `viopaccr`, must not be `None`")

        self._viopaccr = viopaccr

    @property
    def vioremain(self):
        """Gets the vioremain of this Sdw04.

        Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance

        :return: The vioremain of this Sdw04.
        :rtype: str
        """
        return self._vioremain

    @vioremain.setter
    def vioremain(self, vioremain):
        """Sets the vioremain of this Sdw04.

        Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance

        :param vioremain: The vioremain of this Sdw04.
        :type vioremain: str
        """
        if vioremain is None:
            raise ValueError("Invalid value for `vioremain`, must not be `None`")

        self._vioremain = vioremain

    @property
    def viortcfea(self):
        """Gets the viortcfea of this Sdw04.

        Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh

        :return: The viortcfea of this Sdw04.
        :rtype: str
        """
        return self._viortcfea

    @viortcfea.setter
    def viortcfea(self, viortcfea):
        """Sets the viortcfea of this Sdw04.

        Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh

        :param viortcfea: The viortcfea of this Sdw04.
        :type viortcfea: str
        """
        if viortcfea is None:
            raise ValueError("Invalid value for `viortcfea`, must not be `None`")

        self._viortcfea = viortcfea

    @property
    def viortcnofea(self):
        """Gets the viortcnofea of this Sdw04.

        Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh

        :return: The viortcnofea of this Sdw04.
        :rtype: str
        """
        return self._viortcnofea

    @viortcnofea.setter
    def viortcnofea(self, viortcnofea):
        """Sets the viortcnofea of this Sdw04.

        Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh

        :param viortcnofea: The viortcnofea of this Sdw04.
        :type viortcnofea: str
        """
        if viortcnofea is None:
            raise ValueError("Invalid value for `viortcnofea`, must not be `None`")

        self._viortcnofea = viortcnofea

    @property
    def zip_codes_served(self):
        """Gets the zip_codes_served of this Sdw04.

        ZIP code

        :return: The zip_codes_served of this Sdw04.
        :rtype: str
        """
        return self._zip_codes_served

    @zip_codes_served.setter
    def zip_codes_served(self, zip_codes_served):
        """Sets the zip_codes_served of this Sdw04.

        ZIP code

        :param zip_codes_served: The zip_codes_served of this Sdw04.
        :type zip_codes_served: str
        """
        if zip_codes_served is None:
            raise ValueError("Invalid value for `zip_codes_served`, must not be `None`")

        self._zip_codes_served = zip_codes_served
