/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISafeDrinkingWaterApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISafeDrinkingWaterApi::OAISafeDrinkingWaterApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISafeDrinkingWaterApi::~OAISafeDrinkingWaterApi() {
}

void OAISafeDrinkingWaterApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://echodata.epa.gov/echo"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("sdwRestServicesGetDownloadGet", defaultConf);
    _serverIndices.insert("sdwRestServicesGetDownloadGet", 0);
    _serverConfigs.insert("sdwRestServicesGetDownloadPost", defaultConf);
    _serverIndices.insert("sdwRestServicesGetDownloadPost", 0);
    _serverConfigs.insert("sdwRestServicesGetQidGet", defaultConf);
    _serverIndices.insert("sdwRestServicesGetQidGet", 0);
    _serverConfigs.insert("sdwRestServicesGetQidPost", defaultConf);
    _serverIndices.insert("sdwRestServicesGetQidPost", 0);
    _serverConfigs.insert("sdwRestServicesGetSystemsGet", defaultConf);
    _serverIndices.insert("sdwRestServicesGetSystemsGet", 0);
    _serverConfigs.insert("sdwRestServicesGetSystemsPost", defaultConf);
    _serverIndices.insert("sdwRestServicesGetSystemsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISafeDrinkingWaterApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISafeDrinkingWaterApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISafeDrinkingWaterApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISafeDrinkingWaterApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISafeDrinkingWaterApi::setUsername(const QString &username) {
    _username = username;
}

void OAISafeDrinkingWaterApi::setPassword(const QString &password) {
    _password = password;
}


void OAISafeDrinkingWaterApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISafeDrinkingWaterApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISafeDrinkingWaterApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISafeDrinkingWaterApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISafeDrinkingWaterApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISafeDrinkingWaterApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISafeDrinkingWaterApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISafeDrinkingWaterApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISafeDrinkingWaterApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISafeDrinkingWaterApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISafeDrinkingWaterApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISafeDrinkingWaterApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISafeDrinkingWaterApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetDownloadGet"][_serverIndices.value("sdwRestServicesGetDownloadGet")].URL()+"/sdw_rest_services.get_download");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadGetCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetDownloadGetSignal(output);
        Q_EMIT sdwRestServicesGetDownloadGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetDownloadGetSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetDownloadGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetDownloadGetSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetDownloadGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetDownloadPost"][_serverIndices.value("sdwRestServicesGetDownloadPost")].URL()+"/sdw_rest_services.get_download");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadPostCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetDownloadPostSignal(output);
        Q_EMIT sdwRestServicesGetDownloadPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetDownloadPostSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetDownloadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetDownloadPostSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetDownloadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetQidGet"][_serverIndices.value("sdwRestServicesGetQidGet")].URL()+"/sdw_rest_services.get_qid");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (pageno.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageno", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageno")).append(querySuffix).append(QUrl::toPercentEncoding(pageno.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetQidGetCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_sdw_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetQidGetSignal(output);
        Q_EMIT sdwRestServicesGetQidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetQidGetSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetQidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetQidGetSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetQidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetQidPost"][_serverIndices.value("sdwRestServicesGetQidPost")].URL()+"/sdw_rest_services.get_qid");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (pageno.hasValue())
    {
        input.add_var("pageno", ::OpenAPI::toStringValue(pageno.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetQidPostCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_sdw_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetQidPostSignal(output);
        Q_EMIT sdwRestServicesGetQidPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetQidPostSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetQidPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetQidPostSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetQidPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_trb, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_systyp, const ::OpenAPI::OptionalParam<QString> &p_swtyp, const ::OpenAPI::OptionalParam<QString> &p_popsv, const ::OpenAPI::OptionalParam<QString> &p_cntysv, const ::OpenAPI::OptionalParam<QString> &p_cs, const ::OpenAPI::OptionalParam<QString> &p_mr, const ::OpenAPI::OptionalParam<QString> &p_health, const ::OpenAPI::OptionalParam<QString> &p_other, const ::OpenAPI::OptionalParam<QString> &p_pn, const ::OpenAPI::OptionalParam<QString> &p_sv, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_pbale, const ::OpenAPI::OptionalParam<QString> &p_cuale, const ::OpenAPI::OptionalParam<QString> &p_rc350v, const ::OpenAPI::OptionalParam<QString> &p_pbv, const ::OpenAPI::OptionalParam<QString> &p_cuv, const ::OpenAPI::OptionalParam<QString> &p_lcrv, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qis, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_ss5yr, const ::OpenAPI::OptionalParam<QString> &p_sdc, const ::OpenAPI::OptionalParam<QString> &p_sdc_ils, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<QString> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_cms_flag, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetSystemsGet"][_serverIndices.value("sdwRestServicesGetSystemsGet")].URL()+"/sdw_rest_services.get_systems");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_fn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fn")).append(querySuffix).append(QUrl::toPercentEncoding(p_fn.stringValue()));
    }
    if (p_ct.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ct", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ct")).append(querySuffix).append(QUrl::toPercentEncoding(p_ct.stringValue()));
    }
    if (p_co.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_co", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_co")).append(querySuffix).append(QUrl::toPercentEncoding(p_co.stringValue()));
    }
    if (p_fips.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fips", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fips")).append(querySuffix).append(QUrl::toPercentEncoding(p_fips.stringValue()));
    }
    if (p_st.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_st", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_st")).append(querySuffix).append(QUrl::toPercentEncoding(p_st.stringValue()));
    }
    if (p_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_zip.stringValue()));
    }
    if (p_reg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_reg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_reg")).append(querySuffix).append(QUrl::toPercentEncoding(p_reg.stringValue()));
    }
    if (p_trb.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_trb", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_trb")).append(querySuffix).append(QUrl::toPercentEncoding(p_trb.stringValue()));
    }
    if (p_act.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_act", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_act")).append(querySuffix).append(QUrl::toPercentEncoding(p_act.stringValue()));
    }
    if (p_qiv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qiv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qiv")).append(querySuffix).append(QUrl::toPercentEncoding(p_qiv.stringValue()));
    }
    if (p_ico.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ico", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ico")).append(querySuffix).append(QUrl::toPercentEncoding(p_ico.stringValue()));
    }
    if (p_pid.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pid")).append(querySuffix).append(QUrl::toPercentEncoding(p_pid.stringValue()));
    }
    if (p_owop.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_owop", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_owop")).append(querySuffix).append(QUrl::toPercentEncoding(p_owop.stringValue()));
    }
    if (p_systyp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_systyp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_systyp")).append(querySuffix).append(QUrl::toPercentEncoding(p_systyp.stringValue()));
    }
    if (p_swtyp.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_swtyp", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_swtyp")).append(querySuffix).append(QUrl::toPercentEncoding(p_swtyp.stringValue()));
    }
    if (p_popsv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_popsv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_popsv")).append(querySuffix).append(QUrl::toPercentEncoding(p_popsv.stringValue()));
    }
    if (p_cntysv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cntysv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cntysv")).append(querySuffix).append(QUrl::toPercentEncoding(p_cntysv.stringValue()));
    }
    if (p_cs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cs")).append(querySuffix).append(QUrl::toPercentEncoding(p_cs.stringValue()));
    }
    if (p_mr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_mr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_mr")).append(querySuffix).append(QUrl::toPercentEncoding(p_mr.stringValue()));
    }
    if (p_health.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_health", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_health")).append(querySuffix).append(QUrl::toPercentEncoding(p_health.stringValue()));
    }
    if (p_other.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_other", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_other")).append(querySuffix).append(QUrl::toPercentEncoding(p_other.stringValue()));
    }
    if (p_pn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pn", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pn")).append(querySuffix).append(QUrl::toPercentEncoding(p_pn.stringValue()));
    }
    if (p_sv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sv")).append(querySuffix).append(QUrl::toPercentEncoding(p_sv.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_sfs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sfs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sfs")).append(querySuffix).append(QUrl::toPercentEncoding(p_sfs.stringValue()));
    }
    if (p_pswpol.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswpol", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswpol")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswpol.stringValue()));
    }
    if (p_pswvio.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pswvio", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pswvio")).append(querySuffix).append(QUrl::toPercentEncoding(p_pswvio.stringValue()));
    }
    if (p_pbale.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pbale", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pbale")).append(querySuffix).append(QUrl::toPercentEncoding(p_pbale.stringValue()));
    }
    if (p_cuale.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cuale", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cuale")).append(querySuffix).append(QUrl::toPercentEncoding(p_cuale.stringValue()));
    }
    if (p_rc350v.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_rc350v", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_rc350v")).append(querySuffix).append(QUrl::toPercentEncoding(p_rc350v.stringValue()));
    }
    if (p_pbv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pbv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pbv")).append(querySuffix).append(QUrl::toPercentEncoding(p_pbv.stringValue()));
    }
    if (p_cuv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cuv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cuv")).append(querySuffix).append(QUrl::toPercentEncoding(p_cuv.stringValue()));
    }
    if (p_lcrv.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lcrv", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lcrv")).append(querySuffix).append(QUrl::toPercentEncoding(p_lcrv.stringValue()));
    }
    if (p_fea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fea")).append(querySuffix).append(QUrl::toPercentEncoding(p_fea.stringValue()));
    }
    if (p_feay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feay")).append(querySuffix).append(QUrl::toPercentEncoding(p_feay.stringValue()));
    }
    if (p_feaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_feaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_feaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_feaa.stringValue()));
    }
    if (p_iea.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_iea", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_iea")).append(querySuffix).append(QUrl::toPercentEncoding(p_iea.stringValue()));
    }
    if (p_ieay.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieay", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieay")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieay.stringValue()));
    }
    if (p_ieaa.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ieaa", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ieaa")).append(querySuffix).append(QUrl::toPercentEncoding(p_ieaa.stringValue()));
    }
    if (p_qis.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qis", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qis")).append(querySuffix).append(QUrl::toPercentEncoding(p_qis.stringValue()));
    }
    if (p_pfead1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead1")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead1.stringValue()));
    }
    if (p_pfead2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfead2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfead2")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfead2.stringValue()));
    }
    if (p_pfeat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pfeat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pfeat")).append(querySuffix).append(QUrl::toPercentEncoding(p_pfeat.stringValue()));
    }
    if (p_ss5yr.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ss5yr", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ss5yr")).append(querySuffix).append(QUrl::toPercentEncoding(p_ss5yr.stringValue()));
    }
    if (p_sdc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sdc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sdc")).append(querySuffix).append(QUrl::toPercentEncoding(p_sdc.stringValue()));
    }
    if (p_sdc_ils.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sdc_ils", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sdc_ils")).append(querySuffix).append(QUrl::toPercentEncoding(p_sdc_ils.stringValue()));
    }
    if (p_ysl.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysl", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysl")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysl.stringValue()));
    }
    if (p_ysly.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysly", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysly")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysly.stringValue()));
    }
    if (p_ysla.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ysla", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ysla")).append(querySuffix).append(QUrl::toPercentEncoding(p_ysla.stringValue()));
    }
    if (p_idt1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt1")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt1.stringValue()));
    }
    if (p_idt2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_idt2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_idt2")).append(querySuffix).append(QUrl::toPercentEncoding(p_idt2.stringValue()));
    }
    if (p_cms_flag.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cms_flag", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cms_flag")).append(querySuffix).append(QUrl::toPercentEncoding(p_cms_flag.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsGetCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_sdw_rest_services_get_systems_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetSystemsGetSignal(output);
        Q_EMIT sdwRestServicesGetSystemsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetSystemsGetSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetSystemsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetSystemsGetSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetSystemsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_fn, const ::OpenAPI::OptionalParam<QString> &p_ct, const ::OpenAPI::OptionalParam<QString> &p_co, const ::OpenAPI::OptionalParam<QString> &p_fips, const ::OpenAPI::OptionalParam<QString> &p_st, const ::OpenAPI::OptionalParam<QString> &p_zip, const ::OpenAPI::OptionalParam<QString> &p_reg, const ::OpenAPI::OptionalParam<QString> &p_trb, const ::OpenAPI::OptionalParam<QString> &p_act, const ::OpenAPI::OptionalParam<QString> &p_qiv, const ::OpenAPI::OptionalParam<QString> &p_ico, const ::OpenAPI::OptionalParam<QString> &p_pid, const ::OpenAPI::OptionalParam<QString> &p_owop, const ::OpenAPI::OptionalParam<QString> &p_systyp, const ::OpenAPI::OptionalParam<QString> &p_swtyp, const ::OpenAPI::OptionalParam<QString> &p_popsv, const ::OpenAPI::OptionalParam<QString> &p_cntysv, const ::OpenAPI::OptionalParam<QString> &p_cs, const ::OpenAPI::OptionalParam<QString> &p_mr, const ::OpenAPI::OptionalParam<QString> &p_health, const ::OpenAPI::OptionalParam<QString> &p_other, const ::OpenAPI::OptionalParam<QString> &p_pn, const ::OpenAPI::OptionalParam<QString> &p_sv, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_sfs, const ::OpenAPI::OptionalParam<QString> &p_pswpol, const ::OpenAPI::OptionalParam<QString> &p_pswvio, const ::OpenAPI::OptionalParam<QString> &p_pbale, const ::OpenAPI::OptionalParam<QString> &p_cuale, const ::OpenAPI::OptionalParam<QString> &p_rc350v, const ::OpenAPI::OptionalParam<QString> &p_pbv, const ::OpenAPI::OptionalParam<QString> &p_cuv, const ::OpenAPI::OptionalParam<QString> &p_lcrv, const ::OpenAPI::OptionalParam<QString> &p_fea, const ::OpenAPI::OptionalParam<double> &p_feay, const ::OpenAPI::OptionalParam<QString> &p_feaa, const ::OpenAPI::OptionalParam<QString> &p_iea, const ::OpenAPI::OptionalParam<double> &p_ieay, const ::OpenAPI::OptionalParam<QString> &p_ieaa, const ::OpenAPI::OptionalParam<QString> &p_qis, const ::OpenAPI::OptionalParam<QString> &p_pfead1, const ::OpenAPI::OptionalParam<QString> &p_pfead2, const ::OpenAPI::OptionalParam<QString> &p_pfeat, const ::OpenAPI::OptionalParam<QString> &p_ss5yr, const ::OpenAPI::OptionalParam<QString> &p_sdc, const ::OpenAPI::OptionalParam<QString> &p_sdc_ils, const ::OpenAPI::OptionalParam<QString> &p_ysl, const ::OpenAPI::OptionalParam<QString> &p_ysly, const ::OpenAPI::OptionalParam<QString> &p_ysla, const ::OpenAPI::OptionalParam<QString> &p_idt1, const ::OpenAPI::OptionalParam<QString> &p_idt2, const ::OpenAPI::OptionalParam<QString> &p_cms_flag, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["sdwRestServicesGetSystemsPost"][_serverIndices.value("sdwRestServicesGetSystemsPost")].URL()+"/sdw_rest_services.get_systems");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_fn.hasValue())
    {
        input.add_var("p_fn", ::OpenAPI::toStringValue(p_fn.value()));
    }
    if (p_ct.hasValue())
    {
        input.add_var("p_ct", ::OpenAPI::toStringValue(p_ct.value()));
    }
    if (p_co.hasValue())
    {
        input.add_var("p_co", ::OpenAPI::toStringValue(p_co.value()));
    }
    if (p_fips.hasValue())
    {
        input.add_var("p_fips", ::OpenAPI::toStringValue(p_fips.value()));
    }
    if (p_st.hasValue())
    {
        input.add_var("p_st", ::OpenAPI::toStringValue(p_st.value()));
    }
    if (p_zip.hasValue())
    {
        input.add_var("p_zip", ::OpenAPI::toStringValue(p_zip.value()));
    }
    if (p_reg.hasValue())
    {
        input.add_var("p_reg", ::OpenAPI::toStringValue(p_reg.value()));
    }
    if (p_trb.hasValue())
    {
        input.add_var("p_trb", ::OpenAPI::toStringValue(p_trb.value()));
    }
    if (p_act.hasValue())
    {
        input.add_var("p_act", ::OpenAPI::toStringValue(p_act.value()));
    }
    if (p_qiv.hasValue())
    {
        input.add_var("p_qiv", ::OpenAPI::toStringValue(p_qiv.value()));
    }
    if (p_ico.hasValue())
    {
        input.add_var("p_ico", ::OpenAPI::toStringValue(p_ico.value()));
    }
    if (p_pid.hasValue())
    {
        input.add_var("p_pid", ::OpenAPI::toStringValue(p_pid.value()));
    }
    if (p_owop.hasValue())
    {
        input.add_var("p_owop", ::OpenAPI::toStringValue(p_owop.value()));
    }
    if (p_systyp.hasValue())
    {
        input.add_var("p_systyp", ::OpenAPI::toStringValue(p_systyp.value()));
    }
    if (p_swtyp.hasValue())
    {
        input.add_var("p_swtyp", ::OpenAPI::toStringValue(p_swtyp.value()));
    }
    if (p_popsv.hasValue())
    {
        input.add_var("p_popsv", ::OpenAPI::toStringValue(p_popsv.value()));
    }
    if (p_cntysv.hasValue())
    {
        input.add_var("p_cntysv", ::OpenAPI::toStringValue(p_cntysv.value()));
    }
    if (p_cs.hasValue())
    {
        input.add_var("p_cs", ::OpenAPI::toStringValue(p_cs.value()));
    }
    if (p_mr.hasValue())
    {
        input.add_var("p_mr", ::OpenAPI::toStringValue(p_mr.value()));
    }
    if (p_health.hasValue())
    {
        input.add_var("p_health", ::OpenAPI::toStringValue(p_health.value()));
    }
    if (p_other.hasValue())
    {
        input.add_var("p_other", ::OpenAPI::toStringValue(p_other.value()));
    }
    if (p_pn.hasValue())
    {
        input.add_var("p_pn", ::OpenAPI::toStringValue(p_pn.value()));
    }
    if (p_sv.hasValue())
    {
        input.add_var("p_sv", ::OpenAPI::toStringValue(p_sv.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_sfs.hasValue())
    {
        input.add_var("p_sfs", ::OpenAPI::toStringValue(p_sfs.value()));
    }
    if (p_pswpol.hasValue())
    {
        input.add_var("p_pswpol", ::OpenAPI::toStringValue(p_pswpol.value()));
    }
    if (p_pswvio.hasValue())
    {
        input.add_var("p_pswvio", ::OpenAPI::toStringValue(p_pswvio.value()));
    }
    if (p_pbale.hasValue())
    {
        input.add_var("p_pbale", ::OpenAPI::toStringValue(p_pbale.value()));
    }
    if (p_cuale.hasValue())
    {
        input.add_var("p_cuale", ::OpenAPI::toStringValue(p_cuale.value()));
    }
    if (p_rc350v.hasValue())
    {
        input.add_var("p_rc350v", ::OpenAPI::toStringValue(p_rc350v.value()));
    }
    if (p_pbv.hasValue())
    {
        input.add_var("p_pbv", ::OpenAPI::toStringValue(p_pbv.value()));
    }
    if (p_cuv.hasValue())
    {
        input.add_var("p_cuv", ::OpenAPI::toStringValue(p_cuv.value()));
    }
    if (p_lcrv.hasValue())
    {
        input.add_var("p_lcrv", ::OpenAPI::toStringValue(p_lcrv.value()));
    }
    if (p_fea.hasValue())
    {
        input.add_var("p_fea", ::OpenAPI::toStringValue(p_fea.value()));
    }
    if (p_feay.hasValue())
    {
        input.add_var("p_feay", ::OpenAPI::toStringValue(p_feay.value()));
    }
    if (p_feaa.hasValue())
    {
        input.add_var("p_feaa", ::OpenAPI::toStringValue(p_feaa.value()));
    }
    if (p_iea.hasValue())
    {
        input.add_var("p_iea", ::OpenAPI::toStringValue(p_iea.value()));
    }
    if (p_ieay.hasValue())
    {
        input.add_var("p_ieay", ::OpenAPI::toStringValue(p_ieay.value()));
    }
    if (p_ieaa.hasValue())
    {
        input.add_var("p_ieaa", ::OpenAPI::toStringValue(p_ieaa.value()));
    }
    if (p_qis.hasValue())
    {
        input.add_var("p_qis", ::OpenAPI::toStringValue(p_qis.value()));
    }
    if (p_pfead1.hasValue())
    {
        input.add_var("p_pfead1", ::OpenAPI::toStringValue(p_pfead1.value()));
    }
    if (p_pfead2.hasValue())
    {
        input.add_var("p_pfead2", ::OpenAPI::toStringValue(p_pfead2.value()));
    }
    if (p_pfeat.hasValue())
    {
        input.add_var("p_pfeat", ::OpenAPI::toStringValue(p_pfeat.value()));
    }
    if (p_ss5yr.hasValue())
    {
        input.add_var("p_ss5yr", ::OpenAPI::toStringValue(p_ss5yr.value()));
    }
    if (p_sdc.hasValue())
    {
        input.add_var("p_sdc", ::OpenAPI::toStringValue(p_sdc.value()));
    }
    if (p_sdc_ils.hasValue())
    {
        input.add_var("p_sdc_ils", ::OpenAPI::toStringValue(p_sdc_ils.value()));
    }
    if (p_ysl.hasValue())
    {
        input.add_var("p_ysl", ::OpenAPI::toStringValue(p_ysl.value()));
    }
    if (p_ysly.hasValue())
    {
        input.add_var("p_ysly", ::OpenAPI::toStringValue(p_ysly.value()));
    }
    if (p_ysla.hasValue())
    {
        input.add_var("p_ysla", ::OpenAPI::toStringValue(p_ysla.value()));
    }
    if (p_idt1.hasValue())
    {
        input.add_var("p_idt1", ::OpenAPI::toStringValue(p_idt1.value()));
    }
    if (p_idt2.hasValue())
    {
        input.add_var("p_idt2", ::OpenAPI::toStringValue(p_idt2.value()));
    }
    if (p_cms_flag.hasValue())
    {
        input.add_var("p_cms_flag", ::OpenAPI::toStringValue(p_cms_flag.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsPostCallback);
    connect(this, &OAISafeDrinkingWaterApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISafeDrinkingWaterApi::sdwRestServicesGetSystemsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_sdw_rest_services_get_systems_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sdwRestServicesGetSystemsPostSignal(output);
        Q_EMIT sdwRestServicesGetSystemsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sdwRestServicesGetSystemsPostSignalE(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetSystemsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sdwRestServicesGetSystemsPostSignalError(output, error_type, error_str);
        Q_EMIT sdwRestServicesGetSystemsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISafeDrinkingWaterApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
