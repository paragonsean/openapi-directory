/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISafeDrinkingWaterApi_H
#define OAI_OAISafeDrinkingWaterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_sdw_rest_services_get_qid_get_200_response.h"
#include "OAI_sdw_rest_services_get_systems_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISafeDrinkingWaterApi : public QObject {
    Q_OBJECT

public:
    OAISafeDrinkingWaterApi(const int timeOut = 0);
    ~OAISafeDrinkingWaterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_trb QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_systyp QString [optional]
    * @param[in]  p_swtyp QString [optional]
    * @param[in]  p_popsv QString [optional]
    * @param[in]  p_cntysv QString [optional]
    * @param[in]  p_cs QString [optional]
    * @param[in]  p_mr QString [optional]
    * @param[in]  p_health QString [optional]
    * @param[in]  p_other QString [optional]
    * @param[in]  p_pn QString [optional]
    * @param[in]  p_sv QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_pbale QString [optional]
    * @param[in]  p_cuale QString [optional]
    * @param[in]  p_rc350v QString [optional]
    * @param[in]  p_pbv QString [optional]
    * @param[in]  p_cuv QString [optional]
    * @param[in]  p_lcrv QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qis QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_ss5yr QString [optional]
    * @param[in]  p_sdc QString [optional]
    * @param[in]  p_sdc_ils QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly QString [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_cms_flag QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetSystemsGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_systyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swtyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_popsv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cntysv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_health = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_other = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pbale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cuale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rc350v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pbv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cuv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcrv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ss5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sdc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sdc_ils = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysly = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cms_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_fn QString [optional]
    * @param[in]  p_ct QString [optional]
    * @param[in]  p_co QString [optional]
    * @param[in]  p_fips QString [optional]
    * @param[in]  p_st QString [optional]
    * @param[in]  p_zip QString [optional]
    * @param[in]  p_reg QString [optional]
    * @param[in]  p_trb QString [optional]
    * @param[in]  p_act QString [optional]
    * @param[in]  p_qiv QString [optional]
    * @param[in]  p_ico QString [optional]
    * @param[in]  p_pid QString [optional]
    * @param[in]  p_owop QString [optional]
    * @param[in]  p_systyp QString [optional]
    * @param[in]  p_swtyp QString [optional]
    * @param[in]  p_popsv QString [optional]
    * @param[in]  p_cntysv QString [optional]
    * @param[in]  p_cs QString [optional]
    * @param[in]  p_mr QString [optional]
    * @param[in]  p_health QString [optional]
    * @param[in]  p_other QString [optional]
    * @param[in]  p_pn QString [optional]
    * @param[in]  p_sv QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_sfs QString [optional]
    * @param[in]  p_pswpol QString [optional]
    * @param[in]  p_pswvio QString [optional]
    * @param[in]  p_pbale QString [optional]
    * @param[in]  p_cuale QString [optional]
    * @param[in]  p_rc350v QString [optional]
    * @param[in]  p_pbv QString [optional]
    * @param[in]  p_cuv QString [optional]
    * @param[in]  p_lcrv QString [optional]
    * @param[in]  p_fea QString [optional]
    * @param[in]  p_feay double [optional]
    * @param[in]  p_feaa QString [optional]
    * @param[in]  p_iea QString [optional]
    * @param[in]  p_ieay double [optional]
    * @param[in]  p_ieaa QString [optional]
    * @param[in]  p_qis QString [optional]
    * @param[in]  p_pfead1 QString [optional]
    * @param[in]  p_pfead2 QString [optional]
    * @param[in]  p_pfeat QString [optional]
    * @param[in]  p_ss5yr QString [optional]
    * @param[in]  p_sdc QString [optional]
    * @param[in]  p_sdc_ils QString [optional]
    * @param[in]  p_ysl QString [optional]
    * @param[in]  p_ysly QString [optional]
    * @param[in]  p_ysla QString [optional]
    * @param[in]  p_idt1 QString [optional]
    * @param[in]  p_idt2 QString [optional]
    * @param[in]  p_cms_flag QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void sdwRestServicesGetSystemsPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_co = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_st = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_reg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_trb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_act = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qiv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ico = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_owop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_systyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_swtyp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_popsv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cntysv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_mr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_health = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_other = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswpol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pswvio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pbale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cuale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rc350v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pbv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cuv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lcrv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_feay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_feaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_iea = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_ieay = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ieaa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfead2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_pfeat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ss5yr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sdc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sdc_ils = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysly = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ysla = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_idt2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cms_flag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sdwRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void sdwRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void sdwRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void sdwRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);
    void sdwRestServicesGetSystemsGetCallback(OAIHttpRequestWorker *worker);
    void sdwRestServicesGetSystemsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sdwRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void sdwRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void sdwRestServicesGetQidGetSignal(OAI_sdw_rest_services_get_qid_get_200_response summary);
    void sdwRestServicesGetQidPostSignal(OAI_sdw_rest_services_get_qid_get_200_response summary);
    void sdwRestServicesGetSystemsGetSignal(OAI_sdw_rest_services_get_systems_get_200_response summary);
    void sdwRestServicesGetSystemsPostSignal(OAI_sdw_rest_services_get_systems_get_200_response summary);


    void sdwRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void sdwRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void sdwRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_sdw_rest_services_get_qid_get_200_response summary);
    void sdwRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_sdw_rest_services_get_qid_get_200_response summary);
    void sdwRestServicesGetSystemsGetSignalFull(OAIHttpRequestWorker *worker, OAI_sdw_rest_services_get_systems_get_200_response summary);
    void sdwRestServicesGetSystemsPostSignalFull(OAIHttpRequestWorker *worker, OAI_sdw_rest_services_get_systems_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetDownloadGetSignalError() instead")
    void sdwRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetDownloadPostSignalError() instead")
    void sdwRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetQidGetSignalError() instead")
    void sdwRestServicesGetQidGetSignalE(OAI_sdw_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetQidGetSignalError(OAI_sdw_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetQidPostSignalError() instead")
    void sdwRestServicesGetQidPostSignalE(OAI_sdw_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetQidPostSignalError(OAI_sdw_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetSystemsGetSignalError() instead")
    void sdwRestServicesGetSystemsGetSignalE(OAI_sdw_rest_services_get_systems_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetSystemsGetSignalError(OAI_sdw_rest_services_get_systems_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetSystemsPostSignalError() instead")
    void sdwRestServicesGetSystemsPostSignalE(OAI_sdw_rest_services_get_systems_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetSystemsPostSignalError(OAI_sdw_rest_services_get_systems_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetDownloadGetSignalErrorFull() instead")
    void sdwRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetDownloadPostSignalErrorFull() instead")
    void sdwRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetQidGetSignalErrorFull() instead")
    void sdwRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetQidPostSignalErrorFull() instead")
    void sdwRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetSystemsGetSignalErrorFull() instead")
    void sdwRestServicesGetSystemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetSystemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sdwRestServicesGetSystemsPostSignalErrorFull() instead")
    void sdwRestServicesGetSystemsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sdwRestServicesGetSystemsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
