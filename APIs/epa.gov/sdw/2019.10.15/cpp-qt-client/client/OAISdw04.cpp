/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdw04.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdw04::OAISdw04(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdw04::OAISdw04() {
    this->initializeModel();
}

OAISdw04::~OAISdw04() {}

void OAISdw04::initializeModel() {

    m_cities_served_isSet = false;
    m_cities_served_isValid = false;

    m_counties_served_isSet = false;
    m_counties_served_isValid = false;

    m_cu_ale_isSet = false;
    m_cu_ale_isValid = false;

    m_cu_viol_isSet = false;
    m_cu_viol_isValid = false;

    m_curr_vio_flag_isSet = false;
    m_curr_vio_flag_isValid = false;

    m_date_last_sansurvey_isSet = false;
    m_date_last_sansurvey_isValid = false;

    m_dfr_url_isSet = false;
    m_dfr_url_isValid = false;

    m_epa_region_isSet = false;
    m_epa_region_isValid = false;

    m_fips_codes_isSet = false;
    m_fips_codes_isValid = false;

    m_fea_flag_isSet = false;
    m_fea_flag_isValid = false;

    m_feas_isSet = false;
    m_feas_isValid = false;

    m_gw_sw_code_isSet = false;
    m_gw_sw_code_isValid = false;

    m_health_flag_isSet = false;
    m_health_flag_isValid = false;

    m_iea_flag_isSet = false;
    m_iea_flag_isValid = false;

    m_ifea_isSet = false;
    m_ifea_isValid = false;

    m_indian_country_isSet = false;
    m_indian_country_isValid = false;

    m_insp5yr_flag_isSet = false;
    m_insp5yr_flag_isValid = false;

    m_lead_and_copper_viol_isSet = false;
    m_lead_and_copper_viol_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_mr_flag_isSet = false;
    m_mr_flag_isValid = false;

    m_new_vio_flg_isSet = false;
    m_new_vio_flg_isValid = false;

    m_other_flag_isSet = false;
    m_other_flag_isValid = false;

    m_owner_desc_isSet = false;
    m_owner_desc_isValid = false;

    m_owner_type_code_isSet = false;
    m_owner_type_code_isValid = false;

    m_pws_activity_code_isSet = false;
    m_pws_activity_code_isValid = false;

    m_pws_activity_desc_isSet = false;
    m_pws_activity_desc_isValid = false;

    m_pwsid_isSet = false;
    m_pwsid_isValid = false;

    m_pws_name_isSet = false;
    m_pws_name_isValid = false;

    m_pws_type_code_isSet = false;
    m_pws_type_code_isValid = false;

    m_pws_type_desc_isSet = false;
    m_pws_type_desc_isValid = false;

    m_pb_ale_isSet = false;
    m_pb_ale_isValid = false;

    m_pb_viol_isSet = false;
    m_pb_viol_isValid = false;

    m_pn_flag_isSet = false;
    m_pn_flag_isValid = false;

    m_population_served_count_isSet = false;
    m_population_served_count_isValid = false;

    m_primary_source_code_isSet = false;
    m_primary_source_code_isValid = false;

    m_primary_source_desc_isSet = false;
    m_primary_source_desc_isValid = false;

    m_qtrs_with_snc_isSet = false;
    m_qtrs_with_snc_isValid = false;

    m_qtrs_with_vio_isSet = false;
    m_qtrs_with_vio_isValid = false;

    m_rc350_viol_isSet = false;
    m_rc350_viol_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_rules_vio_isSet = false;
    m_rules_vio_isValid = false;

    m_rules_vio3yr_isSet = false;
    m_rules_vio3yr_isValid = false;

    m_sdwa3yr_compl_qtrs_history_isSet = false;
    m_sdwa3yr_compl_qtrs_history_isValid = false;

    m_sdwa_contaminants_isSet = false;
    m_sdwa_contaminants_isValid = false;

    m_sdwa_contaminants_in_cur_viol_isSet = false;
    m_sdwa_contaminants_in_cur_viol_isValid = false;

    m_sdwa_contaminants_in_viol3yr_isSet = false;
    m_sdwa_contaminants_in_viol3yr_isValid = false;

    m_sdw_date_last_fea_isSet = false;
    m_sdw_date_last_fea_isValid = false;

    m_sdw_date_last_fea_epa_isSet = false;
    m_sdw_date_last_fea_epa_isValid = false;

    m_sdw_date_last_fea_st_isSet = false;
    m_sdw_date_last_fea_st_isValid = false;

    m_sdw_date_last_iea_isSet = false;
    m_sdw_date_last_iea_isValid = false;

    m_sdw_date_last_iea_epa_isSet = false;
    m_sdw_date_last_iea_epa_isValid = false;

    m_sdw_date_last_iea_st_isSet = false;
    m_sdw_date_last_iea_st_isValid = false;

    m_sdw_date_last_visit_isSet = false;
    m_sdw_date_last_visit_isValid = false;

    m_sdw_date_last_visit_epa_isSet = false;
    m_sdw_date_last_visit_epa_isValid = false;

    m_sdw_date_last_visit_local_isSet = false;
    m_sdw_date_last_visit_local_isValid = false;

    m_sdw_date_last_visit_state_isSet = false;
    m_sdw_date_last_visit_state_isValid = false;

    m_snc_isSet = false;
    m_snc_isValid = false;

    m_snc_flag_isSet = false;
    m_snc_flag_isValid = false;

    m_sansurvey5yr_isSet = false;
    m_sansurvey5yr_isValid = false;

    m_serious_violator_isSet = false;
    m_serious_violator_isValid = false;

    m_service_area_type_code_isSet = false;
    m_service_area_type_code_isValid = false;

    m_service_area_type_desc_isSet = false;
    m_service_area_type_desc_isValid = false;

    m_significant_deficiency_count_isSet = false;
    m_significant_deficiency_count_isValid = false;

    m_significant_deficiency_count_ils_isSet = false;
    m_significant_deficiency_count_ils_isValid = false;

    m_site_visits5yr_all_isSet = false;
    m_site_visits5yr_all_isValid = false;

    m_site_visits5yr_inspections_isSet = false;
    m_site_visits5yr_inspections_isValid = false;

    m_site_visits5yr_other_isSet = false;
    m_site_visits5yr_other_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_tr_ibal_flag_isSet = false;
    m_tr_ibal_flag_isValid = false;

    m_vio_flag_isSet = false;
    m_vio_flag_isValid = false;

    m_viofeanot_isSet = false;
    m_viofeanot_isValid = false;

    m_violation_categories_isSet = false;
    m_violation_categories_isValid = false;

    m_viopaccr_isSet = false;
    m_viopaccr_isValid = false;

    m_vioremain_isSet = false;
    m_vioremain_isValid = false;

    m_viortcfea_isSet = false;
    m_viortcfea_isValid = false;

    m_viortcnofea_isSet = false;
    m_viortcnofea_isValid = false;

    m_zip_codes_served_isSet = false;
    m_zip_codes_served_isValid = false;
}

void OAISdw04::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdw04::fromJsonObject(QJsonObject json) {

    m_cities_served_isValid = ::OpenAPI::fromJsonValue(m_cities_served, json[QString("CitiesServed")]);
    m_cities_served_isSet = !json[QString("CitiesServed")].isNull() && m_cities_served_isValid;

    m_counties_served_isValid = ::OpenAPI::fromJsonValue(m_counties_served, json[QString("CountiesServed")]);
    m_counties_served_isSet = !json[QString("CountiesServed")].isNull() && m_counties_served_isValid;

    m_cu_ale_isValid = ::OpenAPI::fromJsonValue(m_cu_ale, json[QString("CuAle")]);
    m_cu_ale_isSet = !json[QString("CuAle")].isNull() && m_cu_ale_isValid;

    m_cu_viol_isValid = ::OpenAPI::fromJsonValue(m_cu_viol, json[QString("CuViol")]);
    m_cu_viol_isSet = !json[QString("CuViol")].isNull() && m_cu_viol_isValid;

    m_curr_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_curr_vio_flag, json[QString("CurrVioFlag")]);
    m_curr_vio_flag_isSet = !json[QString("CurrVioFlag")].isNull() && m_curr_vio_flag_isValid;

    m_date_last_sansurvey_isValid = ::OpenAPI::fromJsonValue(m_date_last_sansurvey, json[QString("DateLastSansurvey")]);
    m_date_last_sansurvey_isSet = !json[QString("DateLastSansurvey")].isNull() && m_date_last_sansurvey_isValid;

    m_dfr_url_isValid = ::OpenAPI::fromJsonValue(m_dfr_url, json[QString("DfrUrl")]);
    m_dfr_url_isSet = !json[QString("DfrUrl")].isNull() && m_dfr_url_isValid;

    m_epa_region_isValid = ::OpenAPI::fromJsonValue(m_epa_region, json[QString("EPARegion")]);
    m_epa_region_isSet = !json[QString("EPARegion")].isNull() && m_epa_region_isValid;

    m_fips_codes_isValid = ::OpenAPI::fromJsonValue(m_fips_codes, json[QString("FIPSCodes")]);
    m_fips_codes_isSet = !json[QString("FIPSCodes")].isNull() && m_fips_codes_isValid;

    m_fea_flag_isValid = ::OpenAPI::fromJsonValue(m_fea_flag, json[QString("FeaFlag")]);
    m_fea_flag_isSet = !json[QString("FeaFlag")].isNull() && m_fea_flag_isValid;

    m_feas_isValid = ::OpenAPI::fromJsonValue(m_feas, json[QString("Feas")]);
    m_feas_isSet = !json[QString("Feas")].isNull() && m_feas_isValid;

    m_gw_sw_code_isValid = ::OpenAPI::fromJsonValue(m_gw_sw_code, json[QString("GwSwCode")]);
    m_gw_sw_code_isSet = !json[QString("GwSwCode")].isNull() && m_gw_sw_code_isValid;

    m_health_flag_isValid = ::OpenAPI::fromJsonValue(m_health_flag, json[QString("HealthFlag")]);
    m_health_flag_isSet = !json[QString("HealthFlag")].isNull() && m_health_flag_isValid;

    m_iea_flag_isValid = ::OpenAPI::fromJsonValue(m_iea_flag, json[QString("IeaFlag")]);
    m_iea_flag_isSet = !json[QString("IeaFlag")].isNull() && m_iea_flag_isValid;

    m_ifea_isValid = ::OpenAPI::fromJsonValue(m_ifea, json[QString("Ifea")]);
    m_ifea_isSet = !json[QString("Ifea")].isNull() && m_ifea_isValid;

    m_indian_country_isValid = ::OpenAPI::fromJsonValue(m_indian_country, json[QString("IndianCountry")]);
    m_indian_country_isSet = !json[QString("IndianCountry")].isNull() && m_indian_country_isValid;

    m_insp5yr_flag_isValid = ::OpenAPI::fromJsonValue(m_insp5yr_flag, json[QString("Insp5yrFlag")]);
    m_insp5yr_flag_isSet = !json[QString("Insp5yrFlag")].isNull() && m_insp5yr_flag_isValid;

    m_lead_and_copper_viol_isValid = ::OpenAPI::fromJsonValue(m_lead_and_copper_viol, json[QString("LeadAndCopperViol")]);
    m_lead_and_copper_viol_isSet = !json[QString("LeadAndCopperViol")].isNull() && m_lead_and_copper_viol_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_mr_flag_isValid = ::OpenAPI::fromJsonValue(m_mr_flag, json[QString("MrFlag")]);
    m_mr_flag_isSet = !json[QString("MrFlag")].isNull() && m_mr_flag_isValid;

    m_new_vio_flg_isValid = ::OpenAPI::fromJsonValue(m_new_vio_flg, json[QString("NewVioFlg")]);
    m_new_vio_flg_isSet = !json[QString("NewVioFlg")].isNull() && m_new_vio_flg_isValid;

    m_other_flag_isValid = ::OpenAPI::fromJsonValue(m_other_flag, json[QString("OtherFlag")]);
    m_other_flag_isSet = !json[QString("OtherFlag")].isNull() && m_other_flag_isValid;

    m_owner_desc_isValid = ::OpenAPI::fromJsonValue(m_owner_desc, json[QString("OwnerDesc")]);
    m_owner_desc_isSet = !json[QString("OwnerDesc")].isNull() && m_owner_desc_isValid;

    m_owner_type_code_isValid = ::OpenAPI::fromJsonValue(m_owner_type_code, json[QString("OwnerTypeCode")]);
    m_owner_type_code_isSet = !json[QString("OwnerTypeCode")].isNull() && m_owner_type_code_isValid;

    m_pws_activity_code_isValid = ::OpenAPI::fromJsonValue(m_pws_activity_code, json[QString("PWSActivityCode")]);
    m_pws_activity_code_isSet = !json[QString("PWSActivityCode")].isNull() && m_pws_activity_code_isValid;

    m_pws_activity_desc_isValid = ::OpenAPI::fromJsonValue(m_pws_activity_desc, json[QString("PWSActivityDesc")]);
    m_pws_activity_desc_isSet = !json[QString("PWSActivityDesc")].isNull() && m_pws_activity_desc_isValid;

    m_pwsid_isValid = ::OpenAPI::fromJsonValue(m_pwsid, json[QString("PWSId")]);
    m_pwsid_isSet = !json[QString("PWSId")].isNull() && m_pwsid_isValid;

    m_pws_name_isValid = ::OpenAPI::fromJsonValue(m_pws_name, json[QString("PWSName")]);
    m_pws_name_isSet = !json[QString("PWSName")].isNull() && m_pws_name_isValid;

    m_pws_type_code_isValid = ::OpenAPI::fromJsonValue(m_pws_type_code, json[QString("PWSTypeCode")]);
    m_pws_type_code_isSet = !json[QString("PWSTypeCode")].isNull() && m_pws_type_code_isValid;

    m_pws_type_desc_isValid = ::OpenAPI::fromJsonValue(m_pws_type_desc, json[QString("PWSTypeDesc")]);
    m_pws_type_desc_isSet = !json[QString("PWSTypeDesc")].isNull() && m_pws_type_desc_isValid;

    m_pb_ale_isValid = ::OpenAPI::fromJsonValue(m_pb_ale, json[QString("PbAle")]);
    m_pb_ale_isSet = !json[QString("PbAle")].isNull() && m_pb_ale_isValid;

    m_pb_viol_isValid = ::OpenAPI::fromJsonValue(m_pb_viol, json[QString("PbViol")]);
    m_pb_viol_isSet = !json[QString("PbViol")].isNull() && m_pb_viol_isValid;

    m_pn_flag_isValid = ::OpenAPI::fromJsonValue(m_pn_flag, json[QString("PnFlag")]);
    m_pn_flag_isSet = !json[QString("PnFlag")].isNull() && m_pn_flag_isValid;

    m_population_served_count_isValid = ::OpenAPI::fromJsonValue(m_population_served_count, json[QString("PopulationServedCount")]);
    m_population_served_count_isSet = !json[QString("PopulationServedCount")].isNull() && m_population_served_count_isValid;

    m_primary_source_code_isValid = ::OpenAPI::fromJsonValue(m_primary_source_code, json[QString("PrimarySourceCode")]);
    m_primary_source_code_isSet = !json[QString("PrimarySourceCode")].isNull() && m_primary_source_code_isValid;

    m_primary_source_desc_isValid = ::OpenAPI::fromJsonValue(m_primary_source_desc, json[QString("PrimarySourceDesc")]);
    m_primary_source_desc_isSet = !json[QString("PrimarySourceDesc")].isNull() && m_primary_source_desc_isValid;

    m_qtrs_with_snc_isValid = ::OpenAPI::fromJsonValue(m_qtrs_with_snc, json[QString("QtrsWithSNC")]);
    m_qtrs_with_snc_isSet = !json[QString("QtrsWithSNC")].isNull() && m_qtrs_with_snc_isValid;

    m_qtrs_with_vio_isValid = ::OpenAPI::fromJsonValue(m_qtrs_with_vio, json[QString("QtrsWithVio")]);
    m_qtrs_with_vio_isSet = !json[QString("QtrsWithVio")].isNull() && m_qtrs_with_vio_isValid;

    m_rc350_viol_isValid = ::OpenAPI::fromJsonValue(m_rc350_viol, json[QString("Rc350Viol")]);
    m_rc350_viol_isSet = !json[QString("Rc350Viol")].isNull() && m_rc350_viol_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryID")]);
    m_registry_id_isSet = !json[QString("RegistryID")].isNull() && m_registry_id_isValid;

    m_rules_vio_isValid = ::OpenAPI::fromJsonValue(m_rules_vio, json[QString("RulesVio")]);
    m_rules_vio_isSet = !json[QString("RulesVio")].isNull() && m_rules_vio_isValid;

    m_rules_vio3yr_isValid = ::OpenAPI::fromJsonValue(m_rules_vio3yr, json[QString("RulesVio3yr")]);
    m_rules_vio3yr_isSet = !json[QString("RulesVio3yr")].isNull() && m_rules_vio3yr_isValid;

    m_sdwa3yr_compl_qtrs_history_isValid = ::OpenAPI::fromJsonValue(m_sdwa3yr_compl_qtrs_history, json[QString("SDWA3yrComplQtrsHistory")]);
    m_sdwa3yr_compl_qtrs_history_isSet = !json[QString("SDWA3yrComplQtrsHistory")].isNull() && m_sdwa3yr_compl_qtrs_history_isValid;

    m_sdwa_contaminants_isValid = ::OpenAPI::fromJsonValue(m_sdwa_contaminants, json[QString("SDWAContaminants")]);
    m_sdwa_contaminants_isSet = !json[QString("SDWAContaminants")].isNull() && m_sdwa_contaminants_isValid;

    m_sdwa_contaminants_in_cur_viol_isValid = ::OpenAPI::fromJsonValue(m_sdwa_contaminants_in_cur_viol, json[QString("SDWAContaminantsInCurViol")]);
    m_sdwa_contaminants_in_cur_viol_isSet = !json[QString("SDWAContaminantsInCurViol")].isNull() && m_sdwa_contaminants_in_cur_viol_isValid;

    m_sdwa_contaminants_in_viol3yr_isValid = ::OpenAPI::fromJsonValue(m_sdwa_contaminants_in_viol3yr, json[QString("SDWAContaminantsInViol3yr")]);
    m_sdwa_contaminants_in_viol3yr_isSet = !json[QString("SDWAContaminantsInViol3yr")].isNull() && m_sdwa_contaminants_in_viol3yr_isValid;

    m_sdw_date_last_fea_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_fea, json[QString("SDWDateLastFea")]);
    m_sdw_date_last_fea_isSet = !json[QString("SDWDateLastFea")].isNull() && m_sdw_date_last_fea_isValid;

    m_sdw_date_last_fea_epa_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_fea_epa, json[QString("SDWDateLastFeaEPA")]);
    m_sdw_date_last_fea_epa_isSet = !json[QString("SDWDateLastFeaEPA")].isNull() && m_sdw_date_last_fea_epa_isValid;

    m_sdw_date_last_fea_st_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_fea_st, json[QString("SDWDateLastFeaSt")]);
    m_sdw_date_last_fea_st_isSet = !json[QString("SDWDateLastFeaSt")].isNull() && m_sdw_date_last_fea_st_isValid;

    m_sdw_date_last_iea_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_iea, json[QString("SDWDateLastIea")]);
    m_sdw_date_last_iea_isSet = !json[QString("SDWDateLastIea")].isNull() && m_sdw_date_last_iea_isValid;

    m_sdw_date_last_iea_epa_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_iea_epa, json[QString("SDWDateLastIeaEPA")]);
    m_sdw_date_last_iea_epa_isSet = !json[QString("SDWDateLastIeaEPA")].isNull() && m_sdw_date_last_iea_epa_isValid;

    m_sdw_date_last_iea_st_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_iea_st, json[QString("SDWDateLastIeaSt")]);
    m_sdw_date_last_iea_st_isSet = !json[QString("SDWDateLastIeaSt")].isNull() && m_sdw_date_last_iea_st_isValid;

    m_sdw_date_last_visit_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_visit, json[QString("SDWDateLastVisit")]);
    m_sdw_date_last_visit_isSet = !json[QString("SDWDateLastVisit")].isNull() && m_sdw_date_last_visit_isValid;

    m_sdw_date_last_visit_epa_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_visit_epa, json[QString("SDWDateLastVisitEPA")]);
    m_sdw_date_last_visit_epa_isSet = !json[QString("SDWDateLastVisitEPA")].isNull() && m_sdw_date_last_visit_epa_isValid;

    m_sdw_date_last_visit_local_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_visit_local, json[QString("SDWDateLastVisitLocal")]);
    m_sdw_date_last_visit_local_isSet = !json[QString("SDWDateLastVisitLocal")].isNull() && m_sdw_date_last_visit_local_isValid;

    m_sdw_date_last_visit_state_isValid = ::OpenAPI::fromJsonValue(m_sdw_date_last_visit_state, json[QString("SDWDateLastVisitState")]);
    m_sdw_date_last_visit_state_isSet = !json[QString("SDWDateLastVisitState")].isNull() && m_sdw_date_last_visit_state_isValid;

    m_snc_isValid = ::OpenAPI::fromJsonValue(m_snc, json[QString("SNC")]);
    m_snc_isSet = !json[QString("SNC")].isNull() && m_snc_isValid;

    m_snc_flag_isValid = ::OpenAPI::fromJsonValue(m_snc_flag, json[QString("SNCFlag")]);
    m_snc_flag_isSet = !json[QString("SNCFlag")].isNull() && m_snc_flag_isValid;

    m_sansurvey5yr_isValid = ::OpenAPI::fromJsonValue(m_sansurvey5yr, json[QString("Sansurvey5yr")]);
    m_sansurvey5yr_isSet = !json[QString("Sansurvey5yr")].isNull() && m_sansurvey5yr_isValid;

    m_serious_violator_isValid = ::OpenAPI::fromJsonValue(m_serious_violator, json[QString("SeriousViolator")]);
    m_serious_violator_isSet = !json[QString("SeriousViolator")].isNull() && m_serious_violator_isValid;

    m_service_area_type_code_isValid = ::OpenAPI::fromJsonValue(m_service_area_type_code, json[QString("ServiceAreaTypeCode")]);
    m_service_area_type_code_isSet = !json[QString("ServiceAreaTypeCode")].isNull() && m_service_area_type_code_isValid;

    m_service_area_type_desc_isValid = ::OpenAPI::fromJsonValue(m_service_area_type_desc, json[QString("ServiceAreaTypeDesc")]);
    m_service_area_type_desc_isSet = !json[QString("ServiceAreaTypeDesc")].isNull() && m_service_area_type_desc_isValid;

    m_significant_deficiency_count_isValid = ::OpenAPI::fromJsonValue(m_significant_deficiency_count, json[QString("SignificantDeficiencyCount")]);
    m_significant_deficiency_count_isSet = !json[QString("SignificantDeficiencyCount")].isNull() && m_significant_deficiency_count_isValid;

    m_significant_deficiency_count_ils_isValid = ::OpenAPI::fromJsonValue(m_significant_deficiency_count_ils, json[QString("SignificantDeficiencyCountIls")]);
    m_significant_deficiency_count_ils_isSet = !json[QString("SignificantDeficiencyCountIls")].isNull() && m_significant_deficiency_count_ils_isValid;

    m_site_visits5yr_all_isValid = ::OpenAPI::fromJsonValue(m_site_visits5yr_all, json[QString("SiteVisits5yrAll")]);
    m_site_visits5yr_all_isSet = !json[QString("SiteVisits5yrAll")].isNull() && m_site_visits5yr_all_isValid;

    m_site_visits5yr_inspections_isValid = ::OpenAPI::fromJsonValue(m_site_visits5yr_inspections, json[QString("SiteVisits5yrInspections")]);
    m_site_visits5yr_inspections_isSet = !json[QString("SiteVisits5yrInspections")].isNull() && m_site_visits5yr_inspections_isValid;

    m_site_visits5yr_other_isValid = ::OpenAPI::fromJsonValue(m_site_visits5yr_other, json[QString("SiteVisits5yrOther")]);
    m_site_visits5yr_other_isSet = !json[QString("SiteVisits5yrOther")].isNull() && m_site_visits5yr_other_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("StateCode")]);
    m_state_code_isSet = !json[QString("StateCode")].isNull() && m_state_code_isValid;

    m_tr_ibal_flag_isValid = ::OpenAPI::fromJsonValue(m_tr_ibal_flag, json[QString("TRIbalFlag")]);
    m_tr_ibal_flag_isSet = !json[QString("TRIbalFlag")].isNull() && m_tr_ibal_flag_isValid;

    m_vio_flag_isValid = ::OpenAPI::fromJsonValue(m_vio_flag, json[QString("VioFlag")]);
    m_vio_flag_isSet = !json[QString("VioFlag")].isNull() && m_vio_flag_isValid;

    m_viofeanot_isValid = ::OpenAPI::fromJsonValue(m_viofeanot, json[QString("Viofeanot")]);
    m_viofeanot_isSet = !json[QString("Viofeanot")].isNull() && m_viofeanot_isValid;

    m_violation_categories_isValid = ::OpenAPI::fromJsonValue(m_violation_categories, json[QString("ViolationCategories")]);
    m_violation_categories_isSet = !json[QString("ViolationCategories")].isNull() && m_violation_categories_isValid;

    m_viopaccr_isValid = ::OpenAPI::fromJsonValue(m_viopaccr, json[QString("Viopaccr")]);
    m_viopaccr_isSet = !json[QString("Viopaccr")].isNull() && m_viopaccr_isValid;

    m_vioremain_isValid = ::OpenAPI::fromJsonValue(m_vioremain, json[QString("Vioremain")]);
    m_vioremain_isSet = !json[QString("Vioremain")].isNull() && m_vioremain_isValid;

    m_viortcfea_isValid = ::OpenAPI::fromJsonValue(m_viortcfea, json[QString("Viortcfea")]);
    m_viortcfea_isSet = !json[QString("Viortcfea")].isNull() && m_viortcfea_isValid;

    m_viortcnofea_isValid = ::OpenAPI::fromJsonValue(m_viortcnofea, json[QString("Viortcnofea")]);
    m_viortcnofea_isSet = !json[QString("Viortcnofea")].isNull() && m_viortcnofea_isValid;

    m_zip_codes_served_isValid = ::OpenAPI::fromJsonValue(m_zip_codes_served, json[QString("ZipCodesServed")]);
    m_zip_codes_served_isSet = !json[QString("ZipCodesServed")].isNull() && m_zip_codes_served_isValid;
}

QString OAISdw04::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdw04::asJsonObject() const {
    QJsonObject obj;
    if (m_cities_served_isSet) {
        obj.insert(QString("CitiesServed"), ::OpenAPI::toJsonValue(m_cities_served));
    }
    if (m_counties_served_isSet) {
        obj.insert(QString("CountiesServed"), ::OpenAPI::toJsonValue(m_counties_served));
    }
    if (m_cu_ale_isSet) {
        obj.insert(QString("CuAle"), ::OpenAPI::toJsonValue(m_cu_ale));
    }
    if (m_cu_viol_isSet) {
        obj.insert(QString("CuViol"), ::OpenAPI::toJsonValue(m_cu_viol));
    }
    if (m_curr_vio_flag_isSet) {
        obj.insert(QString("CurrVioFlag"), ::OpenAPI::toJsonValue(m_curr_vio_flag));
    }
    if (m_date_last_sansurvey_isSet) {
        obj.insert(QString("DateLastSansurvey"), ::OpenAPI::toJsonValue(m_date_last_sansurvey));
    }
    if (m_dfr_url_isSet) {
        obj.insert(QString("DfrUrl"), ::OpenAPI::toJsonValue(m_dfr_url));
    }
    if (m_epa_region_isSet) {
        obj.insert(QString("EPARegion"), ::OpenAPI::toJsonValue(m_epa_region));
    }
    if (m_fips_codes_isSet) {
        obj.insert(QString("FIPSCodes"), ::OpenAPI::toJsonValue(m_fips_codes));
    }
    if (m_fea_flag_isSet) {
        obj.insert(QString("FeaFlag"), ::OpenAPI::toJsonValue(m_fea_flag));
    }
    if (m_feas_isSet) {
        obj.insert(QString("Feas"), ::OpenAPI::toJsonValue(m_feas));
    }
    if (m_gw_sw_code_isSet) {
        obj.insert(QString("GwSwCode"), ::OpenAPI::toJsonValue(m_gw_sw_code));
    }
    if (m_health_flag_isSet) {
        obj.insert(QString("HealthFlag"), ::OpenAPI::toJsonValue(m_health_flag));
    }
    if (m_iea_flag_isSet) {
        obj.insert(QString("IeaFlag"), ::OpenAPI::toJsonValue(m_iea_flag));
    }
    if (m_ifea_isSet) {
        obj.insert(QString("Ifea"), ::OpenAPI::toJsonValue(m_ifea));
    }
    if (m_indian_country_isSet) {
        obj.insert(QString("IndianCountry"), ::OpenAPI::toJsonValue(m_indian_country));
    }
    if (m_insp5yr_flag_isSet) {
        obj.insert(QString("Insp5yrFlag"), ::OpenAPI::toJsonValue(m_insp5yr_flag));
    }
    if (m_lead_and_copper_viol_isSet) {
        obj.insert(QString("LeadAndCopperViol"), ::OpenAPI::toJsonValue(m_lead_and_copper_viol));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_mr_flag_isSet) {
        obj.insert(QString("MrFlag"), ::OpenAPI::toJsonValue(m_mr_flag));
    }
    if (m_new_vio_flg_isSet) {
        obj.insert(QString("NewVioFlg"), ::OpenAPI::toJsonValue(m_new_vio_flg));
    }
    if (m_other_flag_isSet) {
        obj.insert(QString("OtherFlag"), ::OpenAPI::toJsonValue(m_other_flag));
    }
    if (m_owner_desc_isSet) {
        obj.insert(QString("OwnerDesc"), ::OpenAPI::toJsonValue(m_owner_desc));
    }
    if (m_owner_type_code_isSet) {
        obj.insert(QString("OwnerTypeCode"), ::OpenAPI::toJsonValue(m_owner_type_code));
    }
    if (m_pws_activity_code_isSet) {
        obj.insert(QString("PWSActivityCode"), ::OpenAPI::toJsonValue(m_pws_activity_code));
    }
    if (m_pws_activity_desc_isSet) {
        obj.insert(QString("PWSActivityDesc"), ::OpenAPI::toJsonValue(m_pws_activity_desc));
    }
    if (m_pwsid_isSet) {
        obj.insert(QString("PWSId"), ::OpenAPI::toJsonValue(m_pwsid));
    }
    if (m_pws_name_isSet) {
        obj.insert(QString("PWSName"), ::OpenAPI::toJsonValue(m_pws_name));
    }
    if (m_pws_type_code_isSet) {
        obj.insert(QString("PWSTypeCode"), ::OpenAPI::toJsonValue(m_pws_type_code));
    }
    if (m_pws_type_desc_isSet) {
        obj.insert(QString("PWSTypeDesc"), ::OpenAPI::toJsonValue(m_pws_type_desc));
    }
    if (m_pb_ale_isSet) {
        obj.insert(QString("PbAle"), ::OpenAPI::toJsonValue(m_pb_ale));
    }
    if (m_pb_viol_isSet) {
        obj.insert(QString("PbViol"), ::OpenAPI::toJsonValue(m_pb_viol));
    }
    if (m_pn_flag_isSet) {
        obj.insert(QString("PnFlag"), ::OpenAPI::toJsonValue(m_pn_flag));
    }
    if (m_population_served_count_isSet) {
        obj.insert(QString("PopulationServedCount"), ::OpenAPI::toJsonValue(m_population_served_count));
    }
    if (m_primary_source_code_isSet) {
        obj.insert(QString("PrimarySourceCode"), ::OpenAPI::toJsonValue(m_primary_source_code));
    }
    if (m_primary_source_desc_isSet) {
        obj.insert(QString("PrimarySourceDesc"), ::OpenAPI::toJsonValue(m_primary_source_desc));
    }
    if (m_qtrs_with_snc_isSet) {
        obj.insert(QString("QtrsWithSNC"), ::OpenAPI::toJsonValue(m_qtrs_with_snc));
    }
    if (m_qtrs_with_vio_isSet) {
        obj.insert(QString("QtrsWithVio"), ::OpenAPI::toJsonValue(m_qtrs_with_vio));
    }
    if (m_rc350_viol_isSet) {
        obj.insert(QString("Rc350Viol"), ::OpenAPI::toJsonValue(m_rc350_viol));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("RegistryID"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_rules_vio_isSet) {
        obj.insert(QString("RulesVio"), ::OpenAPI::toJsonValue(m_rules_vio));
    }
    if (m_rules_vio3yr_isSet) {
        obj.insert(QString("RulesVio3yr"), ::OpenAPI::toJsonValue(m_rules_vio3yr));
    }
    if (m_sdwa3yr_compl_qtrs_history_isSet) {
        obj.insert(QString("SDWA3yrComplQtrsHistory"), ::OpenAPI::toJsonValue(m_sdwa3yr_compl_qtrs_history));
    }
    if (m_sdwa_contaminants_isSet) {
        obj.insert(QString("SDWAContaminants"), ::OpenAPI::toJsonValue(m_sdwa_contaminants));
    }
    if (m_sdwa_contaminants_in_cur_viol_isSet) {
        obj.insert(QString("SDWAContaminantsInCurViol"), ::OpenAPI::toJsonValue(m_sdwa_contaminants_in_cur_viol));
    }
    if (m_sdwa_contaminants_in_viol3yr_isSet) {
        obj.insert(QString("SDWAContaminantsInViol3yr"), ::OpenAPI::toJsonValue(m_sdwa_contaminants_in_viol3yr));
    }
    if (m_sdw_date_last_fea_isSet) {
        obj.insert(QString("SDWDateLastFea"), ::OpenAPI::toJsonValue(m_sdw_date_last_fea));
    }
    if (m_sdw_date_last_fea_epa_isSet) {
        obj.insert(QString("SDWDateLastFeaEPA"), ::OpenAPI::toJsonValue(m_sdw_date_last_fea_epa));
    }
    if (m_sdw_date_last_fea_st_isSet) {
        obj.insert(QString("SDWDateLastFeaSt"), ::OpenAPI::toJsonValue(m_sdw_date_last_fea_st));
    }
    if (m_sdw_date_last_iea_isSet) {
        obj.insert(QString("SDWDateLastIea"), ::OpenAPI::toJsonValue(m_sdw_date_last_iea));
    }
    if (m_sdw_date_last_iea_epa_isSet) {
        obj.insert(QString("SDWDateLastIeaEPA"), ::OpenAPI::toJsonValue(m_sdw_date_last_iea_epa));
    }
    if (m_sdw_date_last_iea_st_isSet) {
        obj.insert(QString("SDWDateLastIeaSt"), ::OpenAPI::toJsonValue(m_sdw_date_last_iea_st));
    }
    if (m_sdw_date_last_visit_isSet) {
        obj.insert(QString("SDWDateLastVisit"), ::OpenAPI::toJsonValue(m_sdw_date_last_visit));
    }
    if (m_sdw_date_last_visit_epa_isSet) {
        obj.insert(QString("SDWDateLastVisitEPA"), ::OpenAPI::toJsonValue(m_sdw_date_last_visit_epa));
    }
    if (m_sdw_date_last_visit_local_isSet) {
        obj.insert(QString("SDWDateLastVisitLocal"), ::OpenAPI::toJsonValue(m_sdw_date_last_visit_local));
    }
    if (m_sdw_date_last_visit_state_isSet) {
        obj.insert(QString("SDWDateLastVisitState"), ::OpenAPI::toJsonValue(m_sdw_date_last_visit_state));
    }
    if (m_snc_isSet) {
        obj.insert(QString("SNC"), ::OpenAPI::toJsonValue(m_snc));
    }
    if (m_snc_flag_isSet) {
        obj.insert(QString("SNCFlag"), ::OpenAPI::toJsonValue(m_snc_flag));
    }
    if (m_sansurvey5yr_isSet) {
        obj.insert(QString("Sansurvey5yr"), ::OpenAPI::toJsonValue(m_sansurvey5yr));
    }
    if (m_serious_violator_isSet) {
        obj.insert(QString("SeriousViolator"), ::OpenAPI::toJsonValue(m_serious_violator));
    }
    if (m_service_area_type_code_isSet) {
        obj.insert(QString("ServiceAreaTypeCode"), ::OpenAPI::toJsonValue(m_service_area_type_code));
    }
    if (m_service_area_type_desc_isSet) {
        obj.insert(QString("ServiceAreaTypeDesc"), ::OpenAPI::toJsonValue(m_service_area_type_desc));
    }
    if (m_significant_deficiency_count_isSet) {
        obj.insert(QString("SignificantDeficiencyCount"), ::OpenAPI::toJsonValue(m_significant_deficiency_count));
    }
    if (m_significant_deficiency_count_ils_isSet) {
        obj.insert(QString("SignificantDeficiencyCountIls"), ::OpenAPI::toJsonValue(m_significant_deficiency_count_ils));
    }
    if (m_site_visits5yr_all_isSet) {
        obj.insert(QString("SiteVisits5yrAll"), ::OpenAPI::toJsonValue(m_site_visits5yr_all));
    }
    if (m_site_visits5yr_inspections_isSet) {
        obj.insert(QString("SiteVisits5yrInspections"), ::OpenAPI::toJsonValue(m_site_visits5yr_inspections));
    }
    if (m_site_visits5yr_other_isSet) {
        obj.insert(QString("SiteVisits5yrOther"), ::OpenAPI::toJsonValue(m_site_visits5yr_other));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("StateCode"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_tr_ibal_flag_isSet) {
        obj.insert(QString("TRIbalFlag"), ::OpenAPI::toJsonValue(m_tr_ibal_flag));
    }
    if (m_vio_flag_isSet) {
        obj.insert(QString("VioFlag"), ::OpenAPI::toJsonValue(m_vio_flag));
    }
    if (m_viofeanot_isSet) {
        obj.insert(QString("Viofeanot"), ::OpenAPI::toJsonValue(m_viofeanot));
    }
    if (m_violation_categories_isSet) {
        obj.insert(QString("ViolationCategories"), ::OpenAPI::toJsonValue(m_violation_categories));
    }
    if (m_viopaccr_isSet) {
        obj.insert(QString("Viopaccr"), ::OpenAPI::toJsonValue(m_viopaccr));
    }
    if (m_vioremain_isSet) {
        obj.insert(QString("Vioremain"), ::OpenAPI::toJsonValue(m_vioremain));
    }
    if (m_viortcfea_isSet) {
        obj.insert(QString("Viortcfea"), ::OpenAPI::toJsonValue(m_viortcfea));
    }
    if (m_viortcnofea_isSet) {
        obj.insert(QString("Viortcnofea"), ::OpenAPI::toJsonValue(m_viortcnofea));
    }
    if (m_zip_codes_served_isSet) {
        obj.insert(QString("ZipCodesServed"), ::OpenAPI::toJsonValue(m_zip_codes_served));
    }
    return obj;
}

QString OAISdw04::getCitiesServed() const {
    return m_cities_served;
}
void OAISdw04::setCitiesServed(const QString &cities_served) {
    m_cities_served = cities_served;
    m_cities_served_isSet = true;
}

bool OAISdw04::is_cities_served_Set() const{
    return m_cities_served_isSet;
}

bool OAISdw04::is_cities_served_Valid() const{
    return m_cities_served_isValid;
}

QString OAISdw04::getCountiesServed() const {
    return m_counties_served;
}
void OAISdw04::setCountiesServed(const QString &counties_served) {
    m_counties_served = counties_served;
    m_counties_served_isSet = true;
}

bool OAISdw04::is_counties_served_Set() const{
    return m_counties_served_isSet;
}

bool OAISdw04::is_counties_served_Valid() const{
    return m_counties_served_isValid;
}

QString OAISdw04::getCuAle() const {
    return m_cu_ale;
}
void OAISdw04::setCuAle(const QString &cu_ale) {
    m_cu_ale = cu_ale;
    m_cu_ale_isSet = true;
}

bool OAISdw04::is_cu_ale_Set() const{
    return m_cu_ale_isSet;
}

bool OAISdw04::is_cu_ale_Valid() const{
    return m_cu_ale_isValid;
}

QString OAISdw04::getCuViol() const {
    return m_cu_viol;
}
void OAISdw04::setCuViol(const QString &cu_viol) {
    m_cu_viol = cu_viol;
    m_cu_viol_isSet = true;
}

bool OAISdw04::is_cu_viol_Set() const{
    return m_cu_viol_isSet;
}

bool OAISdw04::is_cu_viol_Valid() const{
    return m_cu_viol_isValid;
}

QString OAISdw04::getCurrVioFlag() const {
    return m_curr_vio_flag;
}
void OAISdw04::setCurrVioFlag(const QString &curr_vio_flag) {
    m_curr_vio_flag = curr_vio_flag;
    m_curr_vio_flag_isSet = true;
}

bool OAISdw04::is_curr_vio_flag_Set() const{
    return m_curr_vio_flag_isSet;
}

bool OAISdw04::is_curr_vio_flag_Valid() const{
    return m_curr_vio_flag_isValid;
}

QString OAISdw04::getDateLastSansurvey() const {
    return m_date_last_sansurvey;
}
void OAISdw04::setDateLastSansurvey(const QString &date_last_sansurvey) {
    m_date_last_sansurvey = date_last_sansurvey;
    m_date_last_sansurvey_isSet = true;
}

bool OAISdw04::is_date_last_sansurvey_Set() const{
    return m_date_last_sansurvey_isSet;
}

bool OAISdw04::is_date_last_sansurvey_Valid() const{
    return m_date_last_sansurvey_isValid;
}

QString OAISdw04::getDfrUrl() const {
    return m_dfr_url;
}
void OAISdw04::setDfrUrl(const QString &dfr_url) {
    m_dfr_url = dfr_url;
    m_dfr_url_isSet = true;
}

bool OAISdw04::is_dfr_url_Set() const{
    return m_dfr_url_isSet;
}

bool OAISdw04::is_dfr_url_Valid() const{
    return m_dfr_url_isValid;
}

QString OAISdw04::getEpaRegion() const {
    return m_epa_region;
}
void OAISdw04::setEpaRegion(const QString &epa_region) {
    m_epa_region = epa_region;
    m_epa_region_isSet = true;
}

bool OAISdw04::is_epa_region_Set() const{
    return m_epa_region_isSet;
}

bool OAISdw04::is_epa_region_Valid() const{
    return m_epa_region_isValid;
}

QString OAISdw04::getFipsCodes() const {
    return m_fips_codes;
}
void OAISdw04::setFipsCodes(const QString &fips_codes) {
    m_fips_codes = fips_codes;
    m_fips_codes_isSet = true;
}

bool OAISdw04::is_fips_codes_Set() const{
    return m_fips_codes_isSet;
}

bool OAISdw04::is_fips_codes_Valid() const{
    return m_fips_codes_isValid;
}

QString OAISdw04::getFeaFlag() const {
    return m_fea_flag;
}
void OAISdw04::setFeaFlag(const QString &fea_flag) {
    m_fea_flag = fea_flag;
    m_fea_flag_isSet = true;
}

bool OAISdw04::is_fea_flag_Set() const{
    return m_fea_flag_isSet;
}

bool OAISdw04::is_fea_flag_Valid() const{
    return m_fea_flag_isValid;
}

QString OAISdw04::getFeas() const {
    return m_feas;
}
void OAISdw04::setFeas(const QString &feas) {
    m_feas = feas;
    m_feas_isSet = true;
}

bool OAISdw04::is_feas_Set() const{
    return m_feas_isSet;
}

bool OAISdw04::is_feas_Valid() const{
    return m_feas_isValid;
}

QString OAISdw04::getGwSwCode() const {
    return m_gw_sw_code;
}
void OAISdw04::setGwSwCode(const QString &gw_sw_code) {
    m_gw_sw_code = gw_sw_code;
    m_gw_sw_code_isSet = true;
}

bool OAISdw04::is_gw_sw_code_Set() const{
    return m_gw_sw_code_isSet;
}

bool OAISdw04::is_gw_sw_code_Valid() const{
    return m_gw_sw_code_isValid;
}

QString OAISdw04::getHealthFlag() const {
    return m_health_flag;
}
void OAISdw04::setHealthFlag(const QString &health_flag) {
    m_health_flag = health_flag;
    m_health_flag_isSet = true;
}

bool OAISdw04::is_health_flag_Set() const{
    return m_health_flag_isSet;
}

bool OAISdw04::is_health_flag_Valid() const{
    return m_health_flag_isValid;
}

QString OAISdw04::getIeaFlag() const {
    return m_iea_flag;
}
void OAISdw04::setIeaFlag(const QString &iea_flag) {
    m_iea_flag = iea_flag;
    m_iea_flag_isSet = true;
}

bool OAISdw04::is_iea_flag_Set() const{
    return m_iea_flag_isSet;
}

bool OAISdw04::is_iea_flag_Valid() const{
    return m_iea_flag_isValid;
}

QString OAISdw04::getIfea() const {
    return m_ifea;
}
void OAISdw04::setIfea(const QString &ifea) {
    m_ifea = ifea;
    m_ifea_isSet = true;
}

bool OAISdw04::is_ifea_Set() const{
    return m_ifea_isSet;
}

bool OAISdw04::is_ifea_Valid() const{
    return m_ifea_isValid;
}

QString OAISdw04::getIndianCountry() const {
    return m_indian_country;
}
void OAISdw04::setIndianCountry(const QString &indian_country) {
    m_indian_country = indian_country;
    m_indian_country_isSet = true;
}

bool OAISdw04::is_indian_country_Set() const{
    return m_indian_country_isSet;
}

bool OAISdw04::is_indian_country_Valid() const{
    return m_indian_country_isValid;
}

QString OAISdw04::getInsp5yrFlag() const {
    return m_insp5yr_flag;
}
void OAISdw04::setInsp5yrFlag(const QString &insp5yr_flag) {
    m_insp5yr_flag = insp5yr_flag;
    m_insp5yr_flag_isSet = true;
}

bool OAISdw04::is_insp5yr_flag_Set() const{
    return m_insp5yr_flag_isSet;
}

bool OAISdw04::is_insp5yr_flag_Valid() const{
    return m_insp5yr_flag_isValid;
}

QString OAISdw04::getLeadAndCopperViol() const {
    return m_lead_and_copper_viol;
}
void OAISdw04::setLeadAndCopperViol(const QString &lead_and_copper_viol) {
    m_lead_and_copper_viol = lead_and_copper_viol;
    m_lead_and_copper_viol_isSet = true;
}

bool OAISdw04::is_lead_and_copper_viol_Set() const{
    return m_lead_and_copper_viol_isSet;
}

bool OAISdw04::is_lead_and_copper_viol_Valid() const{
    return m_lead_and_copper_viol_isValid;
}

QString OAISdw04::getMaxScore() const {
    return m_max_score;
}
void OAISdw04::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAISdw04::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAISdw04::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAISdw04::getMrFlag() const {
    return m_mr_flag;
}
void OAISdw04::setMrFlag(const QString &mr_flag) {
    m_mr_flag = mr_flag;
    m_mr_flag_isSet = true;
}

bool OAISdw04::is_mr_flag_Set() const{
    return m_mr_flag_isSet;
}

bool OAISdw04::is_mr_flag_Valid() const{
    return m_mr_flag_isValid;
}

QString OAISdw04::getNewVioFlg() const {
    return m_new_vio_flg;
}
void OAISdw04::setNewVioFlg(const QString &new_vio_flg) {
    m_new_vio_flg = new_vio_flg;
    m_new_vio_flg_isSet = true;
}

bool OAISdw04::is_new_vio_flg_Set() const{
    return m_new_vio_flg_isSet;
}

bool OAISdw04::is_new_vio_flg_Valid() const{
    return m_new_vio_flg_isValid;
}

QString OAISdw04::getOtherFlag() const {
    return m_other_flag;
}
void OAISdw04::setOtherFlag(const QString &other_flag) {
    m_other_flag = other_flag;
    m_other_flag_isSet = true;
}

bool OAISdw04::is_other_flag_Set() const{
    return m_other_flag_isSet;
}

bool OAISdw04::is_other_flag_Valid() const{
    return m_other_flag_isValid;
}

QString OAISdw04::getOwnerDesc() const {
    return m_owner_desc;
}
void OAISdw04::setOwnerDesc(const QString &owner_desc) {
    m_owner_desc = owner_desc;
    m_owner_desc_isSet = true;
}

bool OAISdw04::is_owner_desc_Set() const{
    return m_owner_desc_isSet;
}

bool OAISdw04::is_owner_desc_Valid() const{
    return m_owner_desc_isValid;
}

QString OAISdw04::getOwnerTypeCode() const {
    return m_owner_type_code;
}
void OAISdw04::setOwnerTypeCode(const QString &owner_type_code) {
    m_owner_type_code = owner_type_code;
    m_owner_type_code_isSet = true;
}

bool OAISdw04::is_owner_type_code_Set() const{
    return m_owner_type_code_isSet;
}

bool OAISdw04::is_owner_type_code_Valid() const{
    return m_owner_type_code_isValid;
}

QString OAISdw04::getPwsActivityCode() const {
    return m_pws_activity_code;
}
void OAISdw04::setPwsActivityCode(const QString &pws_activity_code) {
    m_pws_activity_code = pws_activity_code;
    m_pws_activity_code_isSet = true;
}

bool OAISdw04::is_pws_activity_code_Set() const{
    return m_pws_activity_code_isSet;
}

bool OAISdw04::is_pws_activity_code_Valid() const{
    return m_pws_activity_code_isValid;
}

QString OAISdw04::getPwsActivityDesc() const {
    return m_pws_activity_desc;
}
void OAISdw04::setPwsActivityDesc(const QString &pws_activity_desc) {
    m_pws_activity_desc = pws_activity_desc;
    m_pws_activity_desc_isSet = true;
}

bool OAISdw04::is_pws_activity_desc_Set() const{
    return m_pws_activity_desc_isSet;
}

bool OAISdw04::is_pws_activity_desc_Valid() const{
    return m_pws_activity_desc_isValid;
}

QString OAISdw04::getPwsid() const {
    return m_pwsid;
}
void OAISdw04::setPwsid(const QString &pwsid) {
    m_pwsid = pwsid;
    m_pwsid_isSet = true;
}

bool OAISdw04::is_pwsid_Set() const{
    return m_pwsid_isSet;
}

bool OAISdw04::is_pwsid_Valid() const{
    return m_pwsid_isValid;
}

QString OAISdw04::getPwsName() const {
    return m_pws_name;
}
void OAISdw04::setPwsName(const QString &pws_name) {
    m_pws_name = pws_name;
    m_pws_name_isSet = true;
}

bool OAISdw04::is_pws_name_Set() const{
    return m_pws_name_isSet;
}

bool OAISdw04::is_pws_name_Valid() const{
    return m_pws_name_isValid;
}

QString OAISdw04::getPwsTypeCode() const {
    return m_pws_type_code;
}
void OAISdw04::setPwsTypeCode(const QString &pws_type_code) {
    m_pws_type_code = pws_type_code;
    m_pws_type_code_isSet = true;
}

bool OAISdw04::is_pws_type_code_Set() const{
    return m_pws_type_code_isSet;
}

bool OAISdw04::is_pws_type_code_Valid() const{
    return m_pws_type_code_isValid;
}

QString OAISdw04::getPwsTypeDesc() const {
    return m_pws_type_desc;
}
void OAISdw04::setPwsTypeDesc(const QString &pws_type_desc) {
    m_pws_type_desc = pws_type_desc;
    m_pws_type_desc_isSet = true;
}

bool OAISdw04::is_pws_type_desc_Set() const{
    return m_pws_type_desc_isSet;
}

bool OAISdw04::is_pws_type_desc_Valid() const{
    return m_pws_type_desc_isValid;
}

QString OAISdw04::getPbAle() const {
    return m_pb_ale;
}
void OAISdw04::setPbAle(const QString &pb_ale) {
    m_pb_ale = pb_ale;
    m_pb_ale_isSet = true;
}

bool OAISdw04::is_pb_ale_Set() const{
    return m_pb_ale_isSet;
}

bool OAISdw04::is_pb_ale_Valid() const{
    return m_pb_ale_isValid;
}

QString OAISdw04::getPbViol() const {
    return m_pb_viol;
}
void OAISdw04::setPbViol(const QString &pb_viol) {
    m_pb_viol = pb_viol;
    m_pb_viol_isSet = true;
}

bool OAISdw04::is_pb_viol_Set() const{
    return m_pb_viol_isSet;
}

bool OAISdw04::is_pb_viol_Valid() const{
    return m_pb_viol_isValid;
}

QString OAISdw04::getPnFlag() const {
    return m_pn_flag;
}
void OAISdw04::setPnFlag(const QString &pn_flag) {
    m_pn_flag = pn_flag;
    m_pn_flag_isSet = true;
}

bool OAISdw04::is_pn_flag_Set() const{
    return m_pn_flag_isSet;
}

bool OAISdw04::is_pn_flag_Valid() const{
    return m_pn_flag_isValid;
}

QString OAISdw04::getPopulationServedCount() const {
    return m_population_served_count;
}
void OAISdw04::setPopulationServedCount(const QString &population_served_count) {
    m_population_served_count = population_served_count;
    m_population_served_count_isSet = true;
}

bool OAISdw04::is_population_served_count_Set() const{
    return m_population_served_count_isSet;
}

bool OAISdw04::is_population_served_count_Valid() const{
    return m_population_served_count_isValid;
}

QString OAISdw04::getPrimarySourceCode() const {
    return m_primary_source_code;
}
void OAISdw04::setPrimarySourceCode(const QString &primary_source_code) {
    m_primary_source_code = primary_source_code;
    m_primary_source_code_isSet = true;
}

bool OAISdw04::is_primary_source_code_Set() const{
    return m_primary_source_code_isSet;
}

bool OAISdw04::is_primary_source_code_Valid() const{
    return m_primary_source_code_isValid;
}

QString OAISdw04::getPrimarySourceDesc() const {
    return m_primary_source_desc;
}
void OAISdw04::setPrimarySourceDesc(const QString &primary_source_desc) {
    m_primary_source_desc = primary_source_desc;
    m_primary_source_desc_isSet = true;
}

bool OAISdw04::is_primary_source_desc_Set() const{
    return m_primary_source_desc_isSet;
}

bool OAISdw04::is_primary_source_desc_Valid() const{
    return m_primary_source_desc_isValid;
}

QString OAISdw04::getQtrsWithSnc() const {
    return m_qtrs_with_snc;
}
void OAISdw04::setQtrsWithSnc(const QString &qtrs_with_snc) {
    m_qtrs_with_snc = qtrs_with_snc;
    m_qtrs_with_snc_isSet = true;
}

bool OAISdw04::is_qtrs_with_snc_Set() const{
    return m_qtrs_with_snc_isSet;
}

bool OAISdw04::is_qtrs_with_snc_Valid() const{
    return m_qtrs_with_snc_isValid;
}

QString OAISdw04::getQtrsWithVio() const {
    return m_qtrs_with_vio;
}
void OAISdw04::setQtrsWithVio(const QString &qtrs_with_vio) {
    m_qtrs_with_vio = qtrs_with_vio;
    m_qtrs_with_vio_isSet = true;
}

bool OAISdw04::is_qtrs_with_vio_Set() const{
    return m_qtrs_with_vio_isSet;
}

bool OAISdw04::is_qtrs_with_vio_Valid() const{
    return m_qtrs_with_vio_isValid;
}

QString OAISdw04::getRc350Viol() const {
    return m_rc350_viol;
}
void OAISdw04::setRc350Viol(const QString &rc350_viol) {
    m_rc350_viol = rc350_viol;
    m_rc350_viol_isSet = true;
}

bool OAISdw04::is_rc350_viol_Set() const{
    return m_rc350_viol_isSet;
}

bool OAISdw04::is_rc350_viol_Valid() const{
    return m_rc350_viol_isValid;
}

QString OAISdw04::getRegistryId() const {
    return m_registry_id;
}
void OAISdw04::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAISdw04::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAISdw04::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAISdw04::getRulesVio() const {
    return m_rules_vio;
}
void OAISdw04::setRulesVio(const QString &rules_vio) {
    m_rules_vio = rules_vio;
    m_rules_vio_isSet = true;
}

bool OAISdw04::is_rules_vio_Set() const{
    return m_rules_vio_isSet;
}

bool OAISdw04::is_rules_vio_Valid() const{
    return m_rules_vio_isValid;
}

QString OAISdw04::getRulesVio3yr() const {
    return m_rules_vio3yr;
}
void OAISdw04::setRulesVio3yr(const QString &rules_vio3yr) {
    m_rules_vio3yr = rules_vio3yr;
    m_rules_vio3yr_isSet = true;
}

bool OAISdw04::is_rules_vio3yr_Set() const{
    return m_rules_vio3yr_isSet;
}

bool OAISdw04::is_rules_vio3yr_Valid() const{
    return m_rules_vio3yr_isValid;
}

QString OAISdw04::getSdwa3yrComplQtrsHistory() const {
    return m_sdwa3yr_compl_qtrs_history;
}
void OAISdw04::setSdwa3yrComplQtrsHistory(const QString &sdwa3yr_compl_qtrs_history) {
    m_sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history;
    m_sdwa3yr_compl_qtrs_history_isSet = true;
}

bool OAISdw04::is_sdwa3yr_compl_qtrs_history_Set() const{
    return m_sdwa3yr_compl_qtrs_history_isSet;
}

bool OAISdw04::is_sdwa3yr_compl_qtrs_history_Valid() const{
    return m_sdwa3yr_compl_qtrs_history_isValid;
}

QString OAISdw04::getSdwaContaminants() const {
    return m_sdwa_contaminants;
}
void OAISdw04::setSdwaContaminants(const QString &sdwa_contaminants) {
    m_sdwa_contaminants = sdwa_contaminants;
    m_sdwa_contaminants_isSet = true;
}

bool OAISdw04::is_sdwa_contaminants_Set() const{
    return m_sdwa_contaminants_isSet;
}

bool OAISdw04::is_sdwa_contaminants_Valid() const{
    return m_sdwa_contaminants_isValid;
}

QString OAISdw04::getSdwaContaminantsInCurViol() const {
    return m_sdwa_contaminants_in_cur_viol;
}
void OAISdw04::setSdwaContaminantsInCurViol(const QString &sdwa_contaminants_in_cur_viol) {
    m_sdwa_contaminants_in_cur_viol = sdwa_contaminants_in_cur_viol;
    m_sdwa_contaminants_in_cur_viol_isSet = true;
}

bool OAISdw04::is_sdwa_contaminants_in_cur_viol_Set() const{
    return m_sdwa_contaminants_in_cur_viol_isSet;
}

bool OAISdw04::is_sdwa_contaminants_in_cur_viol_Valid() const{
    return m_sdwa_contaminants_in_cur_viol_isValid;
}

QString OAISdw04::getSdwaContaminantsInViol3yr() const {
    return m_sdwa_contaminants_in_viol3yr;
}
void OAISdw04::setSdwaContaminantsInViol3yr(const QString &sdwa_contaminants_in_viol3yr) {
    m_sdwa_contaminants_in_viol3yr = sdwa_contaminants_in_viol3yr;
    m_sdwa_contaminants_in_viol3yr_isSet = true;
}

bool OAISdw04::is_sdwa_contaminants_in_viol3yr_Set() const{
    return m_sdwa_contaminants_in_viol3yr_isSet;
}

bool OAISdw04::is_sdwa_contaminants_in_viol3yr_Valid() const{
    return m_sdwa_contaminants_in_viol3yr_isValid;
}

QString OAISdw04::getSdwDateLastFea() const {
    return m_sdw_date_last_fea;
}
void OAISdw04::setSdwDateLastFea(const QString &sdw_date_last_fea) {
    m_sdw_date_last_fea = sdw_date_last_fea;
    m_sdw_date_last_fea_isSet = true;
}

bool OAISdw04::is_sdw_date_last_fea_Set() const{
    return m_sdw_date_last_fea_isSet;
}

bool OAISdw04::is_sdw_date_last_fea_Valid() const{
    return m_sdw_date_last_fea_isValid;
}

QString OAISdw04::getSdwDateLastFeaEpa() const {
    return m_sdw_date_last_fea_epa;
}
void OAISdw04::setSdwDateLastFeaEpa(const QString &sdw_date_last_fea_epa) {
    m_sdw_date_last_fea_epa = sdw_date_last_fea_epa;
    m_sdw_date_last_fea_epa_isSet = true;
}

bool OAISdw04::is_sdw_date_last_fea_epa_Set() const{
    return m_sdw_date_last_fea_epa_isSet;
}

bool OAISdw04::is_sdw_date_last_fea_epa_Valid() const{
    return m_sdw_date_last_fea_epa_isValid;
}

QString OAISdw04::getSdwDateLastFeaSt() const {
    return m_sdw_date_last_fea_st;
}
void OAISdw04::setSdwDateLastFeaSt(const QString &sdw_date_last_fea_st) {
    m_sdw_date_last_fea_st = sdw_date_last_fea_st;
    m_sdw_date_last_fea_st_isSet = true;
}

bool OAISdw04::is_sdw_date_last_fea_st_Set() const{
    return m_sdw_date_last_fea_st_isSet;
}

bool OAISdw04::is_sdw_date_last_fea_st_Valid() const{
    return m_sdw_date_last_fea_st_isValid;
}

QString OAISdw04::getSdwDateLastIea() const {
    return m_sdw_date_last_iea;
}
void OAISdw04::setSdwDateLastIea(const QString &sdw_date_last_iea) {
    m_sdw_date_last_iea = sdw_date_last_iea;
    m_sdw_date_last_iea_isSet = true;
}

bool OAISdw04::is_sdw_date_last_iea_Set() const{
    return m_sdw_date_last_iea_isSet;
}

bool OAISdw04::is_sdw_date_last_iea_Valid() const{
    return m_sdw_date_last_iea_isValid;
}

QString OAISdw04::getSdwDateLastIeaEpa() const {
    return m_sdw_date_last_iea_epa;
}
void OAISdw04::setSdwDateLastIeaEpa(const QString &sdw_date_last_iea_epa) {
    m_sdw_date_last_iea_epa = sdw_date_last_iea_epa;
    m_sdw_date_last_iea_epa_isSet = true;
}

bool OAISdw04::is_sdw_date_last_iea_epa_Set() const{
    return m_sdw_date_last_iea_epa_isSet;
}

bool OAISdw04::is_sdw_date_last_iea_epa_Valid() const{
    return m_sdw_date_last_iea_epa_isValid;
}

QString OAISdw04::getSdwDateLastIeaSt() const {
    return m_sdw_date_last_iea_st;
}
void OAISdw04::setSdwDateLastIeaSt(const QString &sdw_date_last_iea_st) {
    m_sdw_date_last_iea_st = sdw_date_last_iea_st;
    m_sdw_date_last_iea_st_isSet = true;
}

bool OAISdw04::is_sdw_date_last_iea_st_Set() const{
    return m_sdw_date_last_iea_st_isSet;
}

bool OAISdw04::is_sdw_date_last_iea_st_Valid() const{
    return m_sdw_date_last_iea_st_isValid;
}

QString OAISdw04::getSdwDateLastVisit() const {
    return m_sdw_date_last_visit;
}
void OAISdw04::setSdwDateLastVisit(const QString &sdw_date_last_visit) {
    m_sdw_date_last_visit = sdw_date_last_visit;
    m_sdw_date_last_visit_isSet = true;
}

bool OAISdw04::is_sdw_date_last_visit_Set() const{
    return m_sdw_date_last_visit_isSet;
}

bool OAISdw04::is_sdw_date_last_visit_Valid() const{
    return m_sdw_date_last_visit_isValid;
}

QString OAISdw04::getSdwDateLastVisitEpa() const {
    return m_sdw_date_last_visit_epa;
}
void OAISdw04::setSdwDateLastVisitEpa(const QString &sdw_date_last_visit_epa) {
    m_sdw_date_last_visit_epa = sdw_date_last_visit_epa;
    m_sdw_date_last_visit_epa_isSet = true;
}

bool OAISdw04::is_sdw_date_last_visit_epa_Set() const{
    return m_sdw_date_last_visit_epa_isSet;
}

bool OAISdw04::is_sdw_date_last_visit_epa_Valid() const{
    return m_sdw_date_last_visit_epa_isValid;
}

QString OAISdw04::getSdwDateLastVisitLocal() const {
    return m_sdw_date_last_visit_local;
}
void OAISdw04::setSdwDateLastVisitLocal(const QString &sdw_date_last_visit_local) {
    m_sdw_date_last_visit_local = sdw_date_last_visit_local;
    m_sdw_date_last_visit_local_isSet = true;
}

bool OAISdw04::is_sdw_date_last_visit_local_Set() const{
    return m_sdw_date_last_visit_local_isSet;
}

bool OAISdw04::is_sdw_date_last_visit_local_Valid() const{
    return m_sdw_date_last_visit_local_isValid;
}

QString OAISdw04::getSdwDateLastVisitState() const {
    return m_sdw_date_last_visit_state;
}
void OAISdw04::setSdwDateLastVisitState(const QString &sdw_date_last_visit_state) {
    m_sdw_date_last_visit_state = sdw_date_last_visit_state;
    m_sdw_date_last_visit_state_isSet = true;
}

bool OAISdw04::is_sdw_date_last_visit_state_Set() const{
    return m_sdw_date_last_visit_state_isSet;
}

bool OAISdw04::is_sdw_date_last_visit_state_Valid() const{
    return m_sdw_date_last_visit_state_isValid;
}

QString OAISdw04::getSnc() const {
    return m_snc;
}
void OAISdw04::setSnc(const QString &snc) {
    m_snc = snc;
    m_snc_isSet = true;
}

bool OAISdw04::is_snc_Set() const{
    return m_snc_isSet;
}

bool OAISdw04::is_snc_Valid() const{
    return m_snc_isValid;
}

QString OAISdw04::getSncFlag() const {
    return m_snc_flag;
}
void OAISdw04::setSncFlag(const QString &snc_flag) {
    m_snc_flag = snc_flag;
    m_snc_flag_isSet = true;
}

bool OAISdw04::is_snc_flag_Set() const{
    return m_snc_flag_isSet;
}

bool OAISdw04::is_snc_flag_Valid() const{
    return m_snc_flag_isValid;
}

QString OAISdw04::getSansurvey5yr() const {
    return m_sansurvey5yr;
}
void OAISdw04::setSansurvey5yr(const QString &sansurvey5yr) {
    m_sansurvey5yr = sansurvey5yr;
    m_sansurvey5yr_isSet = true;
}

bool OAISdw04::is_sansurvey5yr_Set() const{
    return m_sansurvey5yr_isSet;
}

bool OAISdw04::is_sansurvey5yr_Valid() const{
    return m_sansurvey5yr_isValid;
}

QString OAISdw04::getSeriousViolator() const {
    return m_serious_violator;
}
void OAISdw04::setSeriousViolator(const QString &serious_violator) {
    m_serious_violator = serious_violator;
    m_serious_violator_isSet = true;
}

bool OAISdw04::is_serious_violator_Set() const{
    return m_serious_violator_isSet;
}

bool OAISdw04::is_serious_violator_Valid() const{
    return m_serious_violator_isValid;
}

QString OAISdw04::getServiceAreaTypeCode() const {
    return m_service_area_type_code;
}
void OAISdw04::setServiceAreaTypeCode(const QString &service_area_type_code) {
    m_service_area_type_code = service_area_type_code;
    m_service_area_type_code_isSet = true;
}

bool OAISdw04::is_service_area_type_code_Set() const{
    return m_service_area_type_code_isSet;
}

bool OAISdw04::is_service_area_type_code_Valid() const{
    return m_service_area_type_code_isValid;
}

QString OAISdw04::getServiceAreaTypeDesc() const {
    return m_service_area_type_desc;
}
void OAISdw04::setServiceAreaTypeDesc(const QString &service_area_type_desc) {
    m_service_area_type_desc = service_area_type_desc;
    m_service_area_type_desc_isSet = true;
}

bool OAISdw04::is_service_area_type_desc_Set() const{
    return m_service_area_type_desc_isSet;
}

bool OAISdw04::is_service_area_type_desc_Valid() const{
    return m_service_area_type_desc_isValid;
}

QString OAISdw04::getSignificantDeficiencyCount() const {
    return m_significant_deficiency_count;
}
void OAISdw04::setSignificantDeficiencyCount(const QString &significant_deficiency_count) {
    m_significant_deficiency_count = significant_deficiency_count;
    m_significant_deficiency_count_isSet = true;
}

bool OAISdw04::is_significant_deficiency_count_Set() const{
    return m_significant_deficiency_count_isSet;
}

bool OAISdw04::is_significant_deficiency_count_Valid() const{
    return m_significant_deficiency_count_isValid;
}

QString OAISdw04::getSignificantDeficiencyCountIls() const {
    return m_significant_deficiency_count_ils;
}
void OAISdw04::setSignificantDeficiencyCountIls(const QString &significant_deficiency_count_ils) {
    m_significant_deficiency_count_ils = significant_deficiency_count_ils;
    m_significant_deficiency_count_ils_isSet = true;
}

bool OAISdw04::is_significant_deficiency_count_ils_Set() const{
    return m_significant_deficiency_count_ils_isSet;
}

bool OAISdw04::is_significant_deficiency_count_ils_Valid() const{
    return m_significant_deficiency_count_ils_isValid;
}

QString OAISdw04::getSiteVisits5yrAll() const {
    return m_site_visits5yr_all;
}
void OAISdw04::setSiteVisits5yrAll(const QString &site_visits5yr_all) {
    m_site_visits5yr_all = site_visits5yr_all;
    m_site_visits5yr_all_isSet = true;
}

bool OAISdw04::is_site_visits5yr_all_Set() const{
    return m_site_visits5yr_all_isSet;
}

bool OAISdw04::is_site_visits5yr_all_Valid() const{
    return m_site_visits5yr_all_isValid;
}

QString OAISdw04::getSiteVisits5yrInspections() const {
    return m_site_visits5yr_inspections;
}
void OAISdw04::setSiteVisits5yrInspections(const QString &site_visits5yr_inspections) {
    m_site_visits5yr_inspections = site_visits5yr_inspections;
    m_site_visits5yr_inspections_isSet = true;
}

bool OAISdw04::is_site_visits5yr_inspections_Set() const{
    return m_site_visits5yr_inspections_isSet;
}

bool OAISdw04::is_site_visits5yr_inspections_Valid() const{
    return m_site_visits5yr_inspections_isValid;
}

QString OAISdw04::getSiteVisits5yrOther() const {
    return m_site_visits5yr_other;
}
void OAISdw04::setSiteVisits5yrOther(const QString &site_visits5yr_other) {
    m_site_visits5yr_other = site_visits5yr_other;
    m_site_visits5yr_other_isSet = true;
}

bool OAISdw04::is_site_visits5yr_other_Set() const{
    return m_site_visits5yr_other_isSet;
}

bool OAISdw04::is_site_visits5yr_other_Valid() const{
    return m_site_visits5yr_other_isValid;
}

QString OAISdw04::getStateCode() const {
    return m_state_code;
}
void OAISdw04::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAISdw04::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAISdw04::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAISdw04::getTrIbalFlag() const {
    return m_tr_ibal_flag;
}
void OAISdw04::setTrIbalFlag(const QString &tr_ibal_flag) {
    m_tr_ibal_flag = tr_ibal_flag;
    m_tr_ibal_flag_isSet = true;
}

bool OAISdw04::is_tr_ibal_flag_Set() const{
    return m_tr_ibal_flag_isSet;
}

bool OAISdw04::is_tr_ibal_flag_Valid() const{
    return m_tr_ibal_flag_isValid;
}

QString OAISdw04::getVioFlag() const {
    return m_vio_flag;
}
void OAISdw04::setVioFlag(const QString &vio_flag) {
    m_vio_flag = vio_flag;
    m_vio_flag_isSet = true;
}

bool OAISdw04::is_vio_flag_Set() const{
    return m_vio_flag_isSet;
}

bool OAISdw04::is_vio_flag_Valid() const{
    return m_vio_flag_isValid;
}

QString OAISdw04::getViofeanot() const {
    return m_viofeanot;
}
void OAISdw04::setViofeanot(const QString &viofeanot) {
    m_viofeanot = viofeanot;
    m_viofeanot_isSet = true;
}

bool OAISdw04::is_viofeanot_Set() const{
    return m_viofeanot_isSet;
}

bool OAISdw04::is_viofeanot_Valid() const{
    return m_viofeanot_isValid;
}

QString OAISdw04::getViolationCategories() const {
    return m_violation_categories;
}
void OAISdw04::setViolationCategories(const QString &violation_categories) {
    m_violation_categories = violation_categories;
    m_violation_categories_isSet = true;
}

bool OAISdw04::is_violation_categories_Set() const{
    return m_violation_categories_isSet;
}

bool OAISdw04::is_violation_categories_Valid() const{
    return m_violation_categories_isValid;
}

QString OAISdw04::getViopaccr() const {
    return m_viopaccr;
}
void OAISdw04::setViopaccr(const QString &viopaccr) {
    m_viopaccr = viopaccr;
    m_viopaccr_isSet = true;
}

bool OAISdw04::is_viopaccr_Set() const{
    return m_viopaccr_isSet;
}

bool OAISdw04::is_viopaccr_Valid() const{
    return m_viopaccr_isValid;
}

QString OAISdw04::getVioremain() const {
    return m_vioremain;
}
void OAISdw04::setVioremain(const QString &vioremain) {
    m_vioremain = vioremain;
    m_vioremain_isSet = true;
}

bool OAISdw04::is_vioremain_Set() const{
    return m_vioremain_isSet;
}

bool OAISdw04::is_vioremain_Valid() const{
    return m_vioremain_isValid;
}

QString OAISdw04::getViortcfea() const {
    return m_viortcfea;
}
void OAISdw04::setViortcfea(const QString &viortcfea) {
    m_viortcfea = viortcfea;
    m_viortcfea_isSet = true;
}

bool OAISdw04::is_viortcfea_Set() const{
    return m_viortcfea_isSet;
}

bool OAISdw04::is_viortcfea_Valid() const{
    return m_viortcfea_isValid;
}

QString OAISdw04::getViortcnofea() const {
    return m_viortcnofea;
}
void OAISdw04::setViortcnofea(const QString &viortcnofea) {
    m_viortcnofea = viortcnofea;
    m_viortcnofea_isSet = true;
}

bool OAISdw04::is_viortcnofea_Set() const{
    return m_viortcnofea_isSet;
}

bool OAISdw04::is_viortcnofea_Valid() const{
    return m_viortcnofea_isValid;
}

QString OAISdw04::getZipCodesServed() const {
    return m_zip_codes_served;
}
void OAISdw04::setZipCodesServed(const QString &zip_codes_served) {
    m_zip_codes_served = zip_codes_served;
    m_zip_codes_served_isSet = true;
}

bool OAISdw04::is_zip_codes_served_Set() const{
    return m_zip_codes_served_isSet;
}

bool OAISdw04::is_zip_codes_served_Valid() const{
    return m_zip_codes_served_isValid;
}

bool OAISdw04::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cities_served_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counties_served_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_ale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cu_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_sansurvey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfr_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fips_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fea_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_sw_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iea_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ifea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indian_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp5yr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_and_copper_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mr_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_vio_flg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pws_activity_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pws_activity_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pwsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pws_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pws_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pws_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_ale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pb_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pn_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_served_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_source_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_source_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtrs_with_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qtrs_with_vio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rc350_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_vio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_vio3yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa3yr_compl_qtrs_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_contaminants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_contaminants_in_cur_viol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_contaminants_in_viol3yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_fea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_fea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_fea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_iea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_iea_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_iea_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_visit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_visit_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_visit_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_date_last_visit_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snc_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sansurvey5yr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serious_violator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_area_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_area_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_significant_deficiency_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_significant_deficiency_count_ils_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_visits5yr_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_visits5yr_inspections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_visits5yr_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_ibal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vio_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viofeanot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viopaccr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vioremain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viortcfea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viortcnofea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_codes_served_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdw04::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cities_served_isValid && m_counties_served_isValid && m_cu_ale_isValid && m_cu_viol_isValid && m_curr_vio_flag_isValid && m_date_last_sansurvey_isValid && m_dfr_url_isValid && m_epa_region_isValid && m_fips_codes_isValid && m_fea_flag_isValid && m_feas_isValid && m_gw_sw_code_isValid && m_health_flag_isValid && m_iea_flag_isValid && m_ifea_isValid && m_indian_country_isValid && m_insp5yr_flag_isValid && m_lead_and_copper_viol_isValid && m_max_score_isValid && m_mr_flag_isValid && m_new_vio_flg_isValid && m_other_flag_isValid && m_owner_desc_isValid && m_owner_type_code_isValid && m_pws_activity_code_isValid && m_pws_activity_desc_isValid && m_pwsid_isValid && m_pws_name_isValid && m_pws_type_code_isValid && m_pws_type_desc_isValid && m_pb_ale_isValid && m_pb_viol_isValid && m_pn_flag_isValid && m_population_served_count_isValid && m_primary_source_code_isValid && m_primary_source_desc_isValid && m_qtrs_with_snc_isValid && m_qtrs_with_vio_isValid && m_rc350_viol_isValid && m_registry_id_isValid && m_rules_vio_isValid && m_rules_vio3yr_isValid && m_sdwa3yr_compl_qtrs_history_isValid && m_sdwa_contaminants_isValid && m_sdwa_contaminants_in_cur_viol_isValid && m_sdwa_contaminants_in_viol3yr_isValid && m_sdw_date_last_fea_isValid && m_sdw_date_last_fea_epa_isValid && m_sdw_date_last_fea_st_isValid && m_sdw_date_last_iea_isValid && m_sdw_date_last_iea_epa_isValid && m_sdw_date_last_iea_st_isValid && m_sdw_date_last_visit_isValid && m_sdw_date_last_visit_epa_isValid && m_sdw_date_last_visit_local_isValid && m_sdw_date_last_visit_state_isValid && m_snc_isValid && m_snc_flag_isValid && m_sansurvey5yr_isValid && m_serious_violator_isValid && m_service_area_type_code_isValid && m_service_area_type_desc_isValid && m_significant_deficiency_count_isValid && m_significant_deficiency_count_ils_isValid && m_site_visits5yr_all_isValid && m_site_visits5yr_inspections_isValid && m_site_visits5yr_other_isValid && m_state_code_isValid && m_tr_ibal_flag_isValid && m_vio_flag_isValid && m_viofeanot_isValid && m_violation_categories_isValid && m_viopaccr_isValid && m_vioremain_isValid && m_viortcfea_isValid && m_viortcnofea_isValid && m_zip_codes_served_isValid && true;
}

} // namespace OpenAPI
