/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdw03.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdw03::OAISdw03(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdw03::OAISdw03() {
    this->initializeModel();
}

OAISdw03::~OAISdw03() {}

void OAISdw03::initializeModel() {

    m_bad_system_ids_isSet = false;
    m_bad_system_ids_isValid = false;

    m_cv_rows_isSet = false;
    m_cv_rows_isValid = false;

    m_fea_rows_isSet = false;
    m_fea_rows_isValid = false;

    m_insp_rows_isSet = false;
    m_insp_rows_isValid = false;

    m_indian_country_rows_isSet = false;
    m_indian_country_rows_isValid = false;

    m_inf_fea_rows_isSet = false;
    m_inf_fea_rows_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_no_isSet = false;
    m_page_no_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_rows_isSet = false;
    m_query_rows_isValid = false;

    m_sv_rows_isSet = false;
    m_sv_rows_isValid = false;

    m_v3_rows_isSet = false;
    m_v3_rows_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_water_systems_isSet = false;
    m_water_systems_isValid = false;
}

void OAISdw03::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdw03::fromJsonObject(QJsonObject json) {

    m_bad_system_ids_isValid = ::OpenAPI::fromJsonValue(m_bad_system_ids, json[QString("BadSystemIDs")]);
    m_bad_system_ids_isSet = !json[QString("BadSystemIDs")].isNull() && m_bad_system_ids_isValid;

    m_cv_rows_isValid = ::OpenAPI::fromJsonValue(m_cv_rows, json[QString("CVRows")]);
    m_cv_rows_isSet = !json[QString("CVRows")].isNull() && m_cv_rows_isValid;

    m_fea_rows_isValid = ::OpenAPI::fromJsonValue(m_fea_rows, json[QString("FEARows")]);
    m_fea_rows_isSet = !json[QString("FEARows")].isNull() && m_fea_rows_isValid;

    m_insp_rows_isValid = ::OpenAPI::fromJsonValue(m_insp_rows, json[QString("INSPRows")]);
    m_insp_rows_isSet = !json[QString("INSPRows")].isNull() && m_insp_rows_isValid;

    m_indian_country_rows_isValid = ::OpenAPI::fromJsonValue(m_indian_country_rows, json[QString("IndianCountryRows")]);
    m_indian_country_rows_isSet = !json[QString("IndianCountryRows")].isNull() && m_indian_country_rows_isValid;

    m_inf_fea_rows_isValid = ::OpenAPI::fromJsonValue(m_inf_fea_rows, json[QString("InfFEARows")]);
    m_inf_fea_rows_isSet = !json[QString("InfFEARows")].isNull() && m_inf_fea_rows_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_page_no_isValid = ::OpenAPI::fromJsonValue(m_page_no, json[QString("PageNo")]);
    m_page_no_isSet = !json[QString("PageNo")].isNull() && m_page_no_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryID")]);
    m_query_id_isSet = !json[QString("QueryID")].isNull() && m_query_id_isValid;

    m_query_rows_isValid = ::OpenAPI::fromJsonValue(m_query_rows, json[QString("QueryRows")]);
    m_query_rows_isSet = !json[QString("QueryRows")].isNull() && m_query_rows_isValid;

    m_sv_rows_isValid = ::OpenAPI::fromJsonValue(m_sv_rows, json[QString("SVRows")]);
    m_sv_rows_isSet = !json[QString("SVRows")].isNull() && m_sv_rows_isValid;

    m_v3_rows_isValid = ::OpenAPI::fromJsonValue(m_v3_rows, json[QString("V3Rows")]);
    m_v3_rows_isSet = !json[QString("V3Rows")].isNull() && m_v3_rows_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_water_systems_isValid = ::OpenAPI::fromJsonValue(m_water_systems, json[QString("WaterSystems")]);
    m_water_systems_isSet = !json[QString("WaterSystems")].isNull() && m_water_systems_isValid;
}

QString OAISdw03::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdw03::asJsonObject() const {
    QJsonObject obj;
    if (m_bad_system_ids_isSet) {
        obj.insert(QString("BadSystemIDs"), ::OpenAPI::toJsonValue(m_bad_system_ids));
    }
    if (m_cv_rows_isSet) {
        obj.insert(QString("CVRows"), ::OpenAPI::toJsonValue(m_cv_rows));
    }
    if (m_fea_rows_isSet) {
        obj.insert(QString("FEARows"), ::OpenAPI::toJsonValue(m_fea_rows));
    }
    if (m_insp_rows_isSet) {
        obj.insert(QString("INSPRows"), ::OpenAPI::toJsonValue(m_insp_rows));
    }
    if (m_indian_country_rows_isSet) {
        obj.insert(QString("IndianCountryRows"), ::OpenAPI::toJsonValue(m_indian_country_rows));
    }
    if (m_inf_fea_rows_isSet) {
        obj.insert(QString("InfFEARows"), ::OpenAPI::toJsonValue(m_inf_fea_rows));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_no_isSet) {
        obj.insert(QString("PageNo"), ::OpenAPI::toJsonValue(m_page_no));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("QueryID"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_rows_isSet) {
        obj.insert(QString("QueryRows"), ::OpenAPI::toJsonValue(m_query_rows));
    }
    if (m_sv_rows_isSet) {
        obj.insert(QString("SVRows"), ::OpenAPI::toJsonValue(m_sv_rows));
    }
    if (m_v3_rows_isSet) {
        obj.insert(QString("V3Rows"), ::OpenAPI::toJsonValue(m_v3_rows));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_water_systems.size() > 0) {
        obj.insert(QString("WaterSystems"), ::OpenAPI::toJsonValue(m_water_systems));
    }
    return obj;
}

QString OAISdw03::getBadSystemIds() const {
    return m_bad_system_ids;
}
void OAISdw03::setBadSystemIds(const QString &bad_system_ids) {
    m_bad_system_ids = bad_system_ids;
    m_bad_system_ids_isSet = true;
}

bool OAISdw03::is_bad_system_ids_Set() const{
    return m_bad_system_ids_isSet;
}

bool OAISdw03::is_bad_system_ids_Valid() const{
    return m_bad_system_ids_isValid;
}

QString OAISdw03::getCvRows() const {
    return m_cv_rows;
}
void OAISdw03::setCvRows(const QString &cv_rows) {
    m_cv_rows = cv_rows;
    m_cv_rows_isSet = true;
}

bool OAISdw03::is_cv_rows_Set() const{
    return m_cv_rows_isSet;
}

bool OAISdw03::is_cv_rows_Valid() const{
    return m_cv_rows_isValid;
}

QString OAISdw03::getFeaRows() const {
    return m_fea_rows;
}
void OAISdw03::setFeaRows(const QString &fea_rows) {
    m_fea_rows = fea_rows;
    m_fea_rows_isSet = true;
}

bool OAISdw03::is_fea_rows_Set() const{
    return m_fea_rows_isSet;
}

bool OAISdw03::is_fea_rows_Valid() const{
    return m_fea_rows_isValid;
}

QString OAISdw03::getInspRows() const {
    return m_insp_rows;
}
void OAISdw03::setInspRows(const QString &insp_rows) {
    m_insp_rows = insp_rows;
    m_insp_rows_isSet = true;
}

bool OAISdw03::is_insp_rows_Set() const{
    return m_insp_rows_isSet;
}

bool OAISdw03::is_insp_rows_Valid() const{
    return m_insp_rows_isValid;
}

QString OAISdw03::getIndianCountryRows() const {
    return m_indian_country_rows;
}
void OAISdw03::setIndianCountryRows(const QString &indian_country_rows) {
    m_indian_country_rows = indian_country_rows;
    m_indian_country_rows_isSet = true;
}

bool OAISdw03::is_indian_country_rows_Set() const{
    return m_indian_country_rows_isSet;
}

bool OAISdw03::is_indian_country_rows_Valid() const{
    return m_indian_country_rows_isValid;
}

QString OAISdw03::getInfFeaRows() const {
    return m_inf_fea_rows;
}
void OAISdw03::setInfFeaRows(const QString &inf_fea_rows) {
    m_inf_fea_rows = inf_fea_rows;
    m_inf_fea_rows_isSet = true;
}

bool OAISdw03::is_inf_fea_rows_Set() const{
    return m_inf_fea_rows_isSet;
}

bool OAISdw03::is_inf_fea_rows_Valid() const{
    return m_inf_fea_rows_isValid;
}

QString OAISdw03::getMessage() const {
    return m_message;
}
void OAISdw03::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISdw03::is_message_Set() const{
    return m_message_isSet;
}

bool OAISdw03::is_message_Valid() const{
    return m_message_isValid;
}

QString OAISdw03::getPageNo() const {
    return m_page_no;
}
void OAISdw03::setPageNo(const QString &page_no) {
    m_page_no = page_no;
    m_page_no_isSet = true;
}

bool OAISdw03::is_page_no_Set() const{
    return m_page_no_isSet;
}

bool OAISdw03::is_page_no_Valid() const{
    return m_page_no_isValid;
}

QString OAISdw03::getQueryId() const {
    return m_query_id;
}
void OAISdw03::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAISdw03::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAISdw03::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAISdw03::getQueryRows() const {
    return m_query_rows;
}
void OAISdw03::setQueryRows(const QString &query_rows) {
    m_query_rows = query_rows;
    m_query_rows_isSet = true;
}

bool OAISdw03::is_query_rows_Set() const{
    return m_query_rows_isSet;
}

bool OAISdw03::is_query_rows_Valid() const{
    return m_query_rows_isValid;
}

QString OAISdw03::getSvRows() const {
    return m_sv_rows;
}
void OAISdw03::setSvRows(const QString &sv_rows) {
    m_sv_rows = sv_rows;
    m_sv_rows_isSet = true;
}

bool OAISdw03::is_sv_rows_Set() const{
    return m_sv_rows_isSet;
}

bool OAISdw03::is_sv_rows_Valid() const{
    return m_sv_rows_isValid;
}

QString OAISdw03::getV3Rows() const {
    return m_v3_rows;
}
void OAISdw03::setV3Rows(const QString &v3_rows) {
    m_v3_rows = v3_rows;
    m_v3_rows_isSet = true;
}

bool OAISdw03::is_v3_rows_Set() const{
    return m_v3_rows_isSet;
}

bool OAISdw03::is_v3_rows_Valid() const{
    return m_v3_rows_isValid;
}

QString OAISdw03::getVersion() const {
    return m_version;
}
void OAISdw03::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISdw03::is_version_Set() const{
    return m_version_isSet;
}

bool OAISdw03::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAISdw04> OAISdw03::getWaterSystems() const {
    return m_water_systems;
}
void OAISdw03::setWaterSystems(const QList<OAISdw04> &water_systems) {
    m_water_systems = water_systems;
    m_water_systems_isSet = true;
}

bool OAISdw03::is_water_systems_Set() const{
    return m_water_systems_isSet;
}

bool OAISdw03::is_water_systems_Valid() const{
    return m_water_systems_isValid;
}

bool OAISdw03::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bad_system_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cv_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fea_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insp_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indian_country_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inf_fea_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sv_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v3_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdw03::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bad_system_ids_isValid && m_cv_rows_isValid && m_fea_rows_isValid && m_insp_rows_isValid && m_indian_country_rows_isValid && m_inf_fea_rows_isValid && m_message_isValid && m_page_no_isValid && m_query_id_isValid && m_query_rows_isValid && m_sv_rows_isValid && m_v3_rows_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
