/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta3::OAIMeta3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta3::OAIMeta3() {
    this->initializeModel();
}

OAIMeta3::~OAIMeta3() {}

void OAIMeta3::initializeModel() {

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_data_length_isSet = false;
    m_data_length_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_object_name_isSet = false;
    m_object_name_isValid = false;
}

void OAIMeta3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta3::fromJsonObject(QJsonObject json) {

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("ColumnID")]);
    m_column_id_isSet = !json[QString("ColumnID")].isNull() && m_column_id_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_data_length_isValid = ::OpenAPI::fromJsonValue(m_data_length, json[QString("DataLength")]);
    m_data_length_isSet = !json[QString("DataLength")].isNull() && m_data_length_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_object_name_isValid = ::OpenAPI::fromJsonValue(m_object_name, json[QString("ObjectName")]);
    m_object_name_isSet = !json[QString("ObjectName")].isNull() && m_object_name_isValid;
}

QString OAIMeta3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta3::asJsonObject() const {
    QJsonObject obj;
    if (m_column_id_isSet) {
        obj.insert(QString("ColumnID"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_data_length_isSet) {
        obj.insert(QString("DataLength"), ::OpenAPI::toJsonValue(m_data_length));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_object_name_isSet) {
        obj.insert(QString("ObjectName"), ::OpenAPI::toJsonValue(m_object_name));
    }
    return obj;
}

QString OAIMeta3::getColumnId() const {
    return m_column_id;
}
void OAIMeta3::setColumnId(const QString &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAIMeta3::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAIMeta3::is_column_id_Valid() const{
    return m_column_id_isValid;
}

QString OAIMeta3::getColumnName() const {
    return m_column_name;
}
void OAIMeta3::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIMeta3::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIMeta3::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIMeta3::getDataLength() const {
    return m_data_length;
}
void OAIMeta3::setDataLength(const QString &data_length) {
    m_data_length = data_length;
    m_data_length_isSet = true;
}

bool OAIMeta3::is_data_length_Set() const{
    return m_data_length_isSet;
}

bool OAIMeta3::is_data_length_Valid() const{
    return m_data_length_isValid;
}

QString OAIMeta3::getDataType() const {
    return m_data_type;
}
void OAIMeta3::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIMeta3::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIMeta3::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIMeta3::getDescription() const {
    return m_description;
}
void OAIMeta3::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMeta3::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMeta3::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMeta3::getObjectName() const {
    return m_object_name;
}
void OAIMeta3::setObjectName(const QString &object_name) {
    m_object_name = object_name;
    m_object_name_isSet = true;
}

bool OAIMeta3::is_object_name_Set() const{
    return m_object_name_isSet;
}

bool OAIMeta3::is_object_name_Valid() const{
    return m_object_name_isValid;
}

bool OAIMeta3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_id_isValid && m_column_name_isValid && m_data_length_isValid && m_data_type_isValid && m_description_isValid && m_object_name_isValid && true;
}

} // namespace OpenAPI
