/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Sdw04 from './Sdw04';

/**
 * The Sdw02 model module.
 * @module model/Sdw02
 * @version 2019.10.15
 */
class Sdw02 {
    /**
     * Constructs a new <code>Sdw02</code>.
     * Results Object
     * @alias module:model/Sdw02
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     * @param pageNo {String} The number of pages of results returned
     * @param queryID {String} Sequential number assigned to entire search result
     * @param queryRows {String} Number of query results returned
     */
    constructor(message, pageNo, queryID, queryRows) { 
        
        Sdw02.initialize(this, message, pageNo, queryID, queryRows);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, pageNo, queryID, queryRows) { 
        obj['Message'] = message;
        obj['PageNo'] = pageNo;
        obj['QueryID'] = queryID;
        obj['QueryRows'] = queryRows;
    }

    /**
     * Constructs a <code>Sdw02</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sdw02} obj Optional instance to populate.
     * @return {module:model/Sdw02} The populated <code>Sdw02</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sdw02();

            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('PageNo')) {
                obj['PageNo'] = ApiClient.convertToType(data['PageNo'], 'String');
            }
            if (data.hasOwnProperty('QueryID')) {
                obj['QueryID'] = ApiClient.convertToType(data['QueryID'], 'String');
            }
            if (data.hasOwnProperty('QueryRows')) {
                obj['QueryRows'] = ApiClient.convertToType(data['QueryRows'], 'String');
            }
            if (data.hasOwnProperty('WaterSystems')) {
                obj['WaterSystems'] = ApiClient.convertToType(data['WaterSystems'], [Sdw04]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sdw02</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sdw02</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sdw02.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // ensure the json data is a string
        if (data['PageNo'] && !(typeof data['PageNo'] === 'string' || data['PageNo'] instanceof String)) {
            throw new Error("Expected the field `PageNo` to be a primitive type in the JSON string but got " + data['PageNo']);
        }
        // ensure the json data is a string
        if (data['QueryID'] && !(typeof data['QueryID'] === 'string' || data['QueryID'] instanceof String)) {
            throw new Error("Expected the field `QueryID` to be a primitive type in the JSON string but got " + data['QueryID']);
        }
        // ensure the json data is a string
        if (data['QueryRows'] && !(typeof data['QueryRows'] === 'string' || data['QueryRows'] instanceof String)) {
            throw new Error("Expected the field `QueryRows` to be a primitive type in the JSON string but got " + data['QueryRows']);
        }
        if (data['WaterSystems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['WaterSystems'])) {
                throw new Error("Expected the field `WaterSystems` to be an array in the JSON data but got " + data['WaterSystems']);
            }
            // validate the optional field `WaterSystems` (array)
            for (const item of data['WaterSystems']) {
                Sdw04.validateJSON(item);
            };
        }

        return true;
    }


}

Sdw02.RequiredProperties = ["Message", "PageNo", "QueryID", "QueryRows"];

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Sdw02.prototype['Message'] = undefined;

/**
 * The number of pages of results returned
 * @member {String} PageNo
 */
Sdw02.prototype['PageNo'] = undefined;

/**
 * Sequential number assigned to entire search result
 * @member {String} QueryID
 */
Sdw02.prototype['QueryID'] = undefined;

/**
 * Number of query results returned
 * @member {String} QueryRows
 */
Sdw02.prototype['QueryRows'] = undefined;

/**
 * @member {Array.<module:model/Sdw04>} WaterSystems
 */
Sdw02.prototype['WaterSystems'] = undefined;






export default Sdw02;

