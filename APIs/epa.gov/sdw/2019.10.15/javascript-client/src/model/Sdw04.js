/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Safe Drinking Water Act
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    SDW Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on public water systems regulated under the Safe Drinking Water Act (SDWA).  The returned results reflect data drawn from EPA's Federal Safe Drinking Water Information System (SDWIS) database. \\ The get_systems, get_qid, and get_download end points are meant to be used together. \\ The recommended use scenario for get_systems, get_qid, and get_downoad is: \\  <b>1)</b>  Use get_systems to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of water system results.  <b>3)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of water system information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Sdw04 model module.
 * @module model/Sdw04
 * @version 2019.10.15
 */
class Sdw04 {
    /**
     * Constructs a new <code>Sdw04</code>.
     * Safe Drinking Water Search Results Object
     * @alias module:model/Sdw04
     * @param citiesServed {String} County
     * @param countiesServed {String} City
     * @param cuAle {String} The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.
     * @param cuViol {String} The number of copper violations in the last five years.
     * @param currVioFlag {String} Indicates if the facility has a current violation. 1 = Yes
     * @param dateLastSansurvey {String} 
     * @param dfrUrl {String} The URL to the facility's Detailed Facility Report.
     * @param ePARegion {String} The EPA region in which the facility is located
     * @param fIPSCodes {String} Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county
     * @param feaFlag {String} Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance
     * @param feas {String} Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance.
     * @param gwSwCode {String} Returns \"GW\" if the systemï¿½source water type is ground water. Returns \"SW\" if the system source water type is surface water.
     * @param healthFlag {String} Indicates whether system has violations of health-based drinking water standards
     * @param ieaFlag {String} Returns 0 if the system does not have informal enforcement actions in the past five years. Returns 1 if the system does have informal enforcement actions in the past five years.
     * @param ifea {String} Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance.
     * @param indianCountry {String} Indicates whether the facility is located in Indian Country
     * @param insp5yrFlag {String} Indicates if the facility has an inspection within the last 5 years. 1 = Yes
     * @param leadAndCopperViol {String} The number of lead and copper violations.
     * @param maxScore {String} A sorting score for internal use.
     * @param mrFlag {String} Indicates whether system has monitoring and reporting violations
     * @param newVioFlg {String} Violations that have been reported to SDWA since end of the last official quarter. These violations are considered draft and do not reflect the official compliance status for the facility.
     * @param otherFlag {String} Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records
     * @param ownerDesc {String} Description of Owner code
     * @param ownerTypeCode {String} Owner/Operator: - P = Private - F = Federal Government - S = State Government - L = Local Government
     * @param pWSActivityCode {String} Indicates whether systems have an active or inactive designation.
     * @param pWSActivityDesc {String} Description of activity status code (ACT), e.g., active, inactive.
     * @param pWSId {String} Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits
     * @param pWSName {String} Name of the system regulated under the Safe Drinking Water Act (SDWA)
     * @param pWSTypeCode {String} Type of public water system: - CWS   = Community water system - NCWS  = Non-community water system - NTCWS = Non-transient non-community water system - TNCWS = Transient non-community water system
     * @param pWSTypeDesc {String} The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a
     * @param pbAle {String} The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.
     * @param pbViol {String} The number of lead violations in the last five years.
     * @param pnFlag {String} Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)
     * @param populationServedCount {String} Estimated average daily population served by a system
     * @param primarySourceCode {String} The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
     * @param primarySourceDesc {String} The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
     * @param qtrsWithSNC {String} The number of quarters the system was designated by EPA as a serious violator over the past 3 years (12 most recent quarters).
     * @param qtrsWithVio {String} The number of quarters the system was in violation over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
     * @param rc350Viol {String} The count of open health-based lead violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules. This count includes new violations that have been reported since the end of the last official quarter.
     * @param registryID {String} An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
     * @param rulesVio {String} The count of rules the system is violating as of the latest official quarter of data in the source system, SDWIS, which may lag by 3-6 months. This includes violations in the most recent official quarter and new violations reported after the end of the last official quarter.
     * @param rulesVio3yr {String} The count of rules the system was in violation of over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
     * @param sDWA3yrComplQtrsHistory {String} The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
     * @param sDWAContaminants {String} All unresolved violation contaminants or violation contaminants that have been resolved in the last 5 years.
     * @param sDWAContaminantsInCurViol {String} The contaminant name and code (in SDWIS) in violation of a SDWA regulation. This includes violations in the most recent official quarter and new violations that have been reported since the end of the last official quarter.
     * @param sDWAContaminantsInViol3yr {String} The contaminant name and code in violation of a SDWA regulation in the past three years
     * @param sDWDateLastFea {String} Indicates the effective date of the most recent listed formal enforcement action taken against the PWS within the last five years.
     * @param sDWDateLastFeaEPA {String} Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by EPA within the last five years.
     * @param sDWDateLastFeaSt {String} Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by a state environmental agency within the last five years.
     * @param sDWDateLastIea {String} Indicates the effective date of the most recent listed informal enforcement action taken against the PWS within the last five years.
     * @param sDWDateLastIeaEPA {String} Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by EPA within the last five years.
     * @param sDWDateLastIeaSt {String} Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by a state environmental agency within the last five years.
     * @param sDWDateLastVisit {String} The date of the last system visit.
     * @param sDWDateLastVisitEPA {String} The date of the last system visit by EPA.
     * @param sDWDateLastVisitLocal {String} The date of the last system visit by a local agency.
     * @param sDWDateLastVisitState {String} The date of the last system visit by a state agency.
     * @param SNC {String} Indicates the system's compliance status: No Violation,ï¿½In Violation, Signficant Noncompliance, or Unknown.
     * @param sNCFlag {String} Returns 1 if the system is in significant noncompliance (SNC); returns 0 if not.
     * @param sansurvey5yr {String} The number of sanitary surveys completed within the past five years. A sanitary survey is an on-site review of a system's water source, facilities, equipment, operation, and maintenance, intended to point out sanitary deficiencies and assess the system's capability to supply safe drinking water.
     * @param seriousViolator {String} Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)
     * @param serviceAreaTypeCode {String} 
     * @param serviceAreaTypeDesc {String} 
     * @param significantDeficiencyCount {String} The number of significant deficiencies found from a sanitary survey within the past five years.
     * @param significantDeficiencyCountIls {String} 
     * @param siteVisits5yrAll {String} 
     * @param siteVisits5yrInspections {String} 
     * @param siteVisits5yrOther {String} 
     * @param stateCode {String} The state in which the system is located.
     * @param tRIbalFlag {String} A flag indicating that the facility is within a tribal area.
     * @param vioFlag {String} Indicates whether the system has been in violation in the past five years (1 if yes, 0 if no).
     * @param viofeanot {String} Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh
     * @param violationCategories {String} 
     * @param viopaccr {String} Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh
     * @param vioremain {String} Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance
     * @param viortcfea {String} Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh
     * @param viortcnofea {String} Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh
     * @param zipCodesServed {String} ZIP code
     */
    constructor(citiesServed, countiesServed, cuAle, cuViol, currVioFlag, dateLastSansurvey, dfrUrl, ePARegion, fIPSCodes, feaFlag, feas, gwSwCode, healthFlag, ieaFlag, ifea, indianCountry, insp5yrFlag, leadAndCopperViol, maxScore, mrFlag, newVioFlg, otherFlag, ownerDesc, ownerTypeCode, pWSActivityCode, pWSActivityDesc, pWSId, pWSName, pWSTypeCode, pWSTypeDesc, pbAle, pbViol, pnFlag, populationServedCount, primarySourceCode, primarySourceDesc, qtrsWithSNC, qtrsWithVio, rc350Viol, registryID, rulesVio, rulesVio3yr, sDWA3yrComplQtrsHistory, sDWAContaminants, sDWAContaminantsInCurViol, sDWAContaminantsInViol3yr, sDWDateLastFea, sDWDateLastFeaEPA, sDWDateLastFeaSt, sDWDateLastIea, sDWDateLastIeaEPA, sDWDateLastIeaSt, sDWDateLastVisit, sDWDateLastVisitEPA, sDWDateLastVisitLocal, sDWDateLastVisitState, SNC, sNCFlag, sansurvey5yr, seriousViolator, serviceAreaTypeCode, serviceAreaTypeDesc, significantDeficiencyCount, significantDeficiencyCountIls, siteVisits5yrAll, siteVisits5yrInspections, siteVisits5yrOther, stateCode, tRIbalFlag, vioFlag, viofeanot, violationCategories, viopaccr, vioremain, viortcfea, viortcnofea, zipCodesServed) { 
        
        Sdw04.initialize(this, citiesServed, countiesServed, cuAle, cuViol, currVioFlag, dateLastSansurvey, dfrUrl, ePARegion, fIPSCodes, feaFlag, feas, gwSwCode, healthFlag, ieaFlag, ifea, indianCountry, insp5yrFlag, leadAndCopperViol, maxScore, mrFlag, newVioFlg, otherFlag, ownerDesc, ownerTypeCode, pWSActivityCode, pWSActivityDesc, pWSId, pWSName, pWSTypeCode, pWSTypeDesc, pbAle, pbViol, pnFlag, populationServedCount, primarySourceCode, primarySourceDesc, qtrsWithSNC, qtrsWithVio, rc350Viol, registryID, rulesVio, rulesVio3yr, sDWA3yrComplQtrsHistory, sDWAContaminants, sDWAContaminantsInCurViol, sDWAContaminantsInViol3yr, sDWDateLastFea, sDWDateLastFeaEPA, sDWDateLastFeaSt, sDWDateLastIea, sDWDateLastIeaEPA, sDWDateLastIeaSt, sDWDateLastVisit, sDWDateLastVisitEPA, sDWDateLastVisitLocal, sDWDateLastVisitState, SNC, sNCFlag, sansurvey5yr, seriousViolator, serviceAreaTypeCode, serviceAreaTypeDesc, significantDeficiencyCount, significantDeficiencyCountIls, siteVisits5yrAll, siteVisits5yrInspections, siteVisits5yrOther, stateCode, tRIbalFlag, vioFlag, viofeanot, violationCategories, viopaccr, vioremain, viortcfea, viortcnofea, zipCodesServed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, citiesServed, countiesServed, cuAle, cuViol, currVioFlag, dateLastSansurvey, dfrUrl, ePARegion, fIPSCodes, feaFlag, feas, gwSwCode, healthFlag, ieaFlag, ifea, indianCountry, insp5yrFlag, leadAndCopperViol, maxScore, mrFlag, newVioFlg, otherFlag, ownerDesc, ownerTypeCode, pWSActivityCode, pWSActivityDesc, pWSId, pWSName, pWSTypeCode, pWSTypeDesc, pbAle, pbViol, pnFlag, populationServedCount, primarySourceCode, primarySourceDesc, qtrsWithSNC, qtrsWithVio, rc350Viol, registryID, rulesVio, rulesVio3yr, sDWA3yrComplQtrsHistory, sDWAContaminants, sDWAContaminantsInCurViol, sDWAContaminantsInViol3yr, sDWDateLastFea, sDWDateLastFeaEPA, sDWDateLastFeaSt, sDWDateLastIea, sDWDateLastIeaEPA, sDWDateLastIeaSt, sDWDateLastVisit, sDWDateLastVisitEPA, sDWDateLastVisitLocal, sDWDateLastVisitState, SNC, sNCFlag, sansurvey5yr, seriousViolator, serviceAreaTypeCode, serviceAreaTypeDesc, significantDeficiencyCount, significantDeficiencyCountIls, siteVisits5yrAll, siteVisits5yrInspections, siteVisits5yrOther, stateCode, tRIbalFlag, vioFlag, viofeanot, violationCategories, viopaccr, vioremain, viortcfea, viortcnofea, zipCodesServed) { 
        obj['CitiesServed'] = citiesServed;
        obj['CountiesServed'] = countiesServed;
        obj['CuAle'] = cuAle;
        obj['CuViol'] = cuViol;
        obj['CurrVioFlag'] = currVioFlag;
        obj['DateLastSansurvey'] = dateLastSansurvey;
        obj['DfrUrl'] = dfrUrl;
        obj['EPARegion'] = ePARegion;
        obj['FIPSCodes'] = fIPSCodes;
        obj['FeaFlag'] = feaFlag;
        obj['Feas'] = feas;
        obj['GwSwCode'] = gwSwCode;
        obj['HealthFlag'] = healthFlag;
        obj['IeaFlag'] = ieaFlag;
        obj['Ifea'] = ifea;
        obj['IndianCountry'] = indianCountry;
        obj['Insp5yrFlag'] = insp5yrFlag;
        obj['LeadAndCopperViol'] = leadAndCopperViol;
        obj['MaxScore'] = maxScore;
        obj['MrFlag'] = mrFlag;
        obj['NewVioFlg'] = newVioFlg;
        obj['OtherFlag'] = otherFlag;
        obj['OwnerDesc'] = ownerDesc;
        obj['OwnerTypeCode'] = ownerTypeCode;
        obj['PWSActivityCode'] = pWSActivityCode;
        obj['PWSActivityDesc'] = pWSActivityDesc;
        obj['PWSId'] = pWSId;
        obj['PWSName'] = pWSName;
        obj['PWSTypeCode'] = pWSTypeCode;
        obj['PWSTypeDesc'] = pWSTypeDesc;
        obj['PbAle'] = pbAle;
        obj['PbViol'] = pbViol;
        obj['PnFlag'] = pnFlag;
        obj['PopulationServedCount'] = populationServedCount;
        obj['PrimarySourceCode'] = primarySourceCode;
        obj['PrimarySourceDesc'] = primarySourceDesc;
        obj['QtrsWithSNC'] = qtrsWithSNC;
        obj['QtrsWithVio'] = qtrsWithVio;
        obj['Rc350Viol'] = rc350Viol;
        obj['RegistryID'] = registryID;
        obj['RulesVio'] = rulesVio;
        obj['RulesVio3yr'] = rulesVio3yr;
        obj['SDWA3yrComplQtrsHistory'] = sDWA3yrComplQtrsHistory;
        obj['SDWAContaminants'] = sDWAContaminants;
        obj['SDWAContaminantsInCurViol'] = sDWAContaminantsInCurViol;
        obj['SDWAContaminantsInViol3yr'] = sDWAContaminantsInViol3yr;
        obj['SDWDateLastFea'] = sDWDateLastFea;
        obj['SDWDateLastFeaEPA'] = sDWDateLastFeaEPA;
        obj['SDWDateLastFeaSt'] = sDWDateLastFeaSt;
        obj['SDWDateLastIea'] = sDWDateLastIea;
        obj['SDWDateLastIeaEPA'] = sDWDateLastIeaEPA;
        obj['SDWDateLastIeaSt'] = sDWDateLastIeaSt;
        obj['SDWDateLastVisit'] = sDWDateLastVisit;
        obj['SDWDateLastVisitEPA'] = sDWDateLastVisitEPA;
        obj['SDWDateLastVisitLocal'] = sDWDateLastVisitLocal;
        obj['SDWDateLastVisitState'] = sDWDateLastVisitState;
        obj['SNC'] = SNC;
        obj['SNCFlag'] = sNCFlag;
        obj['Sansurvey5yr'] = sansurvey5yr;
        obj['SeriousViolator'] = seriousViolator;
        obj['ServiceAreaTypeCode'] = serviceAreaTypeCode;
        obj['ServiceAreaTypeDesc'] = serviceAreaTypeDesc;
        obj['SignificantDeficiencyCount'] = significantDeficiencyCount;
        obj['SignificantDeficiencyCountIls'] = significantDeficiencyCountIls;
        obj['SiteVisits5yrAll'] = siteVisits5yrAll;
        obj['SiteVisits5yrInspections'] = siteVisits5yrInspections;
        obj['SiteVisits5yrOther'] = siteVisits5yrOther;
        obj['StateCode'] = stateCode;
        obj['TRIbalFlag'] = tRIbalFlag;
        obj['VioFlag'] = vioFlag;
        obj['Viofeanot'] = viofeanot;
        obj['ViolationCategories'] = violationCategories;
        obj['Viopaccr'] = viopaccr;
        obj['Vioremain'] = vioremain;
        obj['Viortcfea'] = viortcfea;
        obj['Viortcnofea'] = viortcnofea;
        obj['ZipCodesServed'] = zipCodesServed;
    }

    /**
     * Constructs a <code>Sdw04</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sdw04} obj Optional instance to populate.
     * @return {module:model/Sdw04} The populated <code>Sdw04</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sdw04();

            if (data.hasOwnProperty('CitiesServed')) {
                obj['CitiesServed'] = ApiClient.convertToType(data['CitiesServed'], 'String');
            }
            if (data.hasOwnProperty('CountiesServed')) {
                obj['CountiesServed'] = ApiClient.convertToType(data['CountiesServed'], 'String');
            }
            if (data.hasOwnProperty('CuAle')) {
                obj['CuAle'] = ApiClient.convertToType(data['CuAle'], 'String');
            }
            if (data.hasOwnProperty('CuViol')) {
                obj['CuViol'] = ApiClient.convertToType(data['CuViol'], 'String');
            }
            if (data.hasOwnProperty('CurrVioFlag')) {
                obj['CurrVioFlag'] = ApiClient.convertToType(data['CurrVioFlag'], 'String');
            }
            if (data.hasOwnProperty('DateLastSansurvey')) {
                obj['DateLastSansurvey'] = ApiClient.convertToType(data['DateLastSansurvey'], 'String');
            }
            if (data.hasOwnProperty('DfrUrl')) {
                obj['DfrUrl'] = ApiClient.convertToType(data['DfrUrl'], 'String');
            }
            if (data.hasOwnProperty('EPARegion')) {
                obj['EPARegion'] = ApiClient.convertToType(data['EPARegion'], 'String');
            }
            if (data.hasOwnProperty('FIPSCodes')) {
                obj['FIPSCodes'] = ApiClient.convertToType(data['FIPSCodes'], 'String');
            }
            if (data.hasOwnProperty('FeaFlag')) {
                obj['FeaFlag'] = ApiClient.convertToType(data['FeaFlag'], 'String');
            }
            if (data.hasOwnProperty('Feas')) {
                obj['Feas'] = ApiClient.convertToType(data['Feas'], 'String');
            }
            if (data.hasOwnProperty('GwSwCode')) {
                obj['GwSwCode'] = ApiClient.convertToType(data['GwSwCode'], 'String');
            }
            if (data.hasOwnProperty('HealthFlag')) {
                obj['HealthFlag'] = ApiClient.convertToType(data['HealthFlag'], 'String');
            }
            if (data.hasOwnProperty('IeaFlag')) {
                obj['IeaFlag'] = ApiClient.convertToType(data['IeaFlag'], 'String');
            }
            if (data.hasOwnProperty('Ifea')) {
                obj['Ifea'] = ApiClient.convertToType(data['Ifea'], 'String');
            }
            if (data.hasOwnProperty('IndianCountry')) {
                obj['IndianCountry'] = ApiClient.convertToType(data['IndianCountry'], 'String');
            }
            if (data.hasOwnProperty('Insp5yrFlag')) {
                obj['Insp5yrFlag'] = ApiClient.convertToType(data['Insp5yrFlag'], 'String');
            }
            if (data.hasOwnProperty('LeadAndCopperViol')) {
                obj['LeadAndCopperViol'] = ApiClient.convertToType(data['LeadAndCopperViol'], 'String');
            }
            if (data.hasOwnProperty('MaxScore')) {
                obj['MaxScore'] = ApiClient.convertToType(data['MaxScore'], 'String');
            }
            if (data.hasOwnProperty('MrFlag')) {
                obj['MrFlag'] = ApiClient.convertToType(data['MrFlag'], 'String');
            }
            if (data.hasOwnProperty('NewVioFlg')) {
                obj['NewVioFlg'] = ApiClient.convertToType(data['NewVioFlg'], 'String');
            }
            if (data.hasOwnProperty('OtherFlag')) {
                obj['OtherFlag'] = ApiClient.convertToType(data['OtherFlag'], 'String');
            }
            if (data.hasOwnProperty('OwnerDesc')) {
                obj['OwnerDesc'] = ApiClient.convertToType(data['OwnerDesc'], 'String');
            }
            if (data.hasOwnProperty('OwnerTypeCode')) {
                obj['OwnerTypeCode'] = ApiClient.convertToType(data['OwnerTypeCode'], 'String');
            }
            if (data.hasOwnProperty('PWSActivityCode')) {
                obj['PWSActivityCode'] = ApiClient.convertToType(data['PWSActivityCode'], 'String');
            }
            if (data.hasOwnProperty('PWSActivityDesc')) {
                obj['PWSActivityDesc'] = ApiClient.convertToType(data['PWSActivityDesc'], 'String');
            }
            if (data.hasOwnProperty('PWSId')) {
                obj['PWSId'] = ApiClient.convertToType(data['PWSId'], 'String');
            }
            if (data.hasOwnProperty('PWSName')) {
                obj['PWSName'] = ApiClient.convertToType(data['PWSName'], 'String');
            }
            if (data.hasOwnProperty('PWSTypeCode')) {
                obj['PWSTypeCode'] = ApiClient.convertToType(data['PWSTypeCode'], 'String');
            }
            if (data.hasOwnProperty('PWSTypeDesc')) {
                obj['PWSTypeDesc'] = ApiClient.convertToType(data['PWSTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('PbAle')) {
                obj['PbAle'] = ApiClient.convertToType(data['PbAle'], 'String');
            }
            if (data.hasOwnProperty('PbViol')) {
                obj['PbViol'] = ApiClient.convertToType(data['PbViol'], 'String');
            }
            if (data.hasOwnProperty('PnFlag')) {
                obj['PnFlag'] = ApiClient.convertToType(data['PnFlag'], 'String');
            }
            if (data.hasOwnProperty('PopulationServedCount')) {
                obj['PopulationServedCount'] = ApiClient.convertToType(data['PopulationServedCount'], 'String');
            }
            if (data.hasOwnProperty('PrimarySourceCode')) {
                obj['PrimarySourceCode'] = ApiClient.convertToType(data['PrimarySourceCode'], 'String');
            }
            if (data.hasOwnProperty('PrimarySourceDesc')) {
                obj['PrimarySourceDesc'] = ApiClient.convertToType(data['PrimarySourceDesc'], 'String');
            }
            if (data.hasOwnProperty('QtrsWithSNC')) {
                obj['QtrsWithSNC'] = ApiClient.convertToType(data['QtrsWithSNC'], 'String');
            }
            if (data.hasOwnProperty('QtrsWithVio')) {
                obj['QtrsWithVio'] = ApiClient.convertToType(data['QtrsWithVio'], 'String');
            }
            if (data.hasOwnProperty('Rc350Viol')) {
                obj['Rc350Viol'] = ApiClient.convertToType(data['Rc350Viol'], 'String');
            }
            if (data.hasOwnProperty('RegistryID')) {
                obj['RegistryID'] = ApiClient.convertToType(data['RegistryID'], 'String');
            }
            if (data.hasOwnProperty('RulesVio')) {
                obj['RulesVio'] = ApiClient.convertToType(data['RulesVio'], 'String');
            }
            if (data.hasOwnProperty('RulesVio3yr')) {
                obj['RulesVio3yr'] = ApiClient.convertToType(data['RulesVio3yr'], 'String');
            }
            if (data.hasOwnProperty('SDWA3yrComplQtrsHistory')) {
                obj['SDWA3yrComplQtrsHistory'] = ApiClient.convertToType(data['SDWA3yrComplQtrsHistory'], 'String');
            }
            if (data.hasOwnProperty('SDWAContaminants')) {
                obj['SDWAContaminants'] = ApiClient.convertToType(data['SDWAContaminants'], 'String');
            }
            if (data.hasOwnProperty('SDWAContaminantsInCurViol')) {
                obj['SDWAContaminantsInCurViol'] = ApiClient.convertToType(data['SDWAContaminantsInCurViol'], 'String');
            }
            if (data.hasOwnProperty('SDWAContaminantsInViol3yr')) {
                obj['SDWAContaminantsInViol3yr'] = ApiClient.convertToType(data['SDWAContaminantsInViol3yr'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastFea')) {
                obj['SDWDateLastFea'] = ApiClient.convertToType(data['SDWDateLastFea'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastFeaEPA')) {
                obj['SDWDateLastFeaEPA'] = ApiClient.convertToType(data['SDWDateLastFeaEPA'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastFeaSt')) {
                obj['SDWDateLastFeaSt'] = ApiClient.convertToType(data['SDWDateLastFeaSt'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastIea')) {
                obj['SDWDateLastIea'] = ApiClient.convertToType(data['SDWDateLastIea'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastIeaEPA')) {
                obj['SDWDateLastIeaEPA'] = ApiClient.convertToType(data['SDWDateLastIeaEPA'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastIeaSt')) {
                obj['SDWDateLastIeaSt'] = ApiClient.convertToType(data['SDWDateLastIeaSt'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastVisit')) {
                obj['SDWDateLastVisit'] = ApiClient.convertToType(data['SDWDateLastVisit'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastVisitEPA')) {
                obj['SDWDateLastVisitEPA'] = ApiClient.convertToType(data['SDWDateLastVisitEPA'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastVisitLocal')) {
                obj['SDWDateLastVisitLocal'] = ApiClient.convertToType(data['SDWDateLastVisitLocal'], 'String');
            }
            if (data.hasOwnProperty('SDWDateLastVisitState')) {
                obj['SDWDateLastVisitState'] = ApiClient.convertToType(data['SDWDateLastVisitState'], 'String');
            }
            if (data.hasOwnProperty('SNC')) {
                obj['SNC'] = ApiClient.convertToType(data['SNC'], 'String');
            }
            if (data.hasOwnProperty('SNCFlag')) {
                obj['SNCFlag'] = ApiClient.convertToType(data['SNCFlag'], 'String');
            }
            if (data.hasOwnProperty('Sansurvey5yr')) {
                obj['Sansurvey5yr'] = ApiClient.convertToType(data['Sansurvey5yr'], 'String');
            }
            if (data.hasOwnProperty('SeriousViolator')) {
                obj['SeriousViolator'] = ApiClient.convertToType(data['SeriousViolator'], 'String');
            }
            if (data.hasOwnProperty('ServiceAreaTypeCode')) {
                obj['ServiceAreaTypeCode'] = ApiClient.convertToType(data['ServiceAreaTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ServiceAreaTypeDesc')) {
                obj['ServiceAreaTypeDesc'] = ApiClient.convertToType(data['ServiceAreaTypeDesc'], 'String');
            }
            if (data.hasOwnProperty('SignificantDeficiencyCount')) {
                obj['SignificantDeficiencyCount'] = ApiClient.convertToType(data['SignificantDeficiencyCount'], 'String');
            }
            if (data.hasOwnProperty('SignificantDeficiencyCountIls')) {
                obj['SignificantDeficiencyCountIls'] = ApiClient.convertToType(data['SignificantDeficiencyCountIls'], 'String');
            }
            if (data.hasOwnProperty('SiteVisits5yrAll')) {
                obj['SiteVisits5yrAll'] = ApiClient.convertToType(data['SiteVisits5yrAll'], 'String');
            }
            if (data.hasOwnProperty('SiteVisits5yrInspections')) {
                obj['SiteVisits5yrInspections'] = ApiClient.convertToType(data['SiteVisits5yrInspections'], 'String');
            }
            if (data.hasOwnProperty('SiteVisits5yrOther')) {
                obj['SiteVisits5yrOther'] = ApiClient.convertToType(data['SiteVisits5yrOther'], 'String');
            }
            if (data.hasOwnProperty('StateCode')) {
                obj['StateCode'] = ApiClient.convertToType(data['StateCode'], 'String');
            }
            if (data.hasOwnProperty('TRIbalFlag')) {
                obj['TRIbalFlag'] = ApiClient.convertToType(data['TRIbalFlag'], 'String');
            }
            if (data.hasOwnProperty('VioFlag')) {
                obj['VioFlag'] = ApiClient.convertToType(data['VioFlag'], 'String');
            }
            if (data.hasOwnProperty('Viofeanot')) {
                obj['Viofeanot'] = ApiClient.convertToType(data['Viofeanot'], 'String');
            }
            if (data.hasOwnProperty('ViolationCategories')) {
                obj['ViolationCategories'] = ApiClient.convertToType(data['ViolationCategories'], 'String');
            }
            if (data.hasOwnProperty('Viopaccr')) {
                obj['Viopaccr'] = ApiClient.convertToType(data['Viopaccr'], 'String');
            }
            if (data.hasOwnProperty('Vioremain')) {
                obj['Vioremain'] = ApiClient.convertToType(data['Vioremain'], 'String');
            }
            if (data.hasOwnProperty('Viortcfea')) {
                obj['Viortcfea'] = ApiClient.convertToType(data['Viortcfea'], 'String');
            }
            if (data.hasOwnProperty('Viortcnofea')) {
                obj['Viortcnofea'] = ApiClient.convertToType(data['Viortcnofea'], 'String');
            }
            if (data.hasOwnProperty('ZipCodesServed')) {
                obj['ZipCodesServed'] = ApiClient.convertToType(data['ZipCodesServed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sdw04</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sdw04</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sdw04.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CitiesServed'] && !(typeof data['CitiesServed'] === 'string' || data['CitiesServed'] instanceof String)) {
            throw new Error("Expected the field `CitiesServed` to be a primitive type in the JSON string but got " + data['CitiesServed']);
        }
        // ensure the json data is a string
        if (data['CountiesServed'] && !(typeof data['CountiesServed'] === 'string' || data['CountiesServed'] instanceof String)) {
            throw new Error("Expected the field `CountiesServed` to be a primitive type in the JSON string but got " + data['CountiesServed']);
        }
        // ensure the json data is a string
        if (data['CuAle'] && !(typeof data['CuAle'] === 'string' || data['CuAle'] instanceof String)) {
            throw new Error("Expected the field `CuAle` to be a primitive type in the JSON string but got " + data['CuAle']);
        }
        // ensure the json data is a string
        if (data['CuViol'] && !(typeof data['CuViol'] === 'string' || data['CuViol'] instanceof String)) {
            throw new Error("Expected the field `CuViol` to be a primitive type in the JSON string but got " + data['CuViol']);
        }
        // ensure the json data is a string
        if (data['CurrVioFlag'] && !(typeof data['CurrVioFlag'] === 'string' || data['CurrVioFlag'] instanceof String)) {
            throw new Error("Expected the field `CurrVioFlag` to be a primitive type in the JSON string but got " + data['CurrVioFlag']);
        }
        // ensure the json data is a string
        if (data['DateLastSansurvey'] && !(typeof data['DateLastSansurvey'] === 'string' || data['DateLastSansurvey'] instanceof String)) {
            throw new Error("Expected the field `DateLastSansurvey` to be a primitive type in the JSON string but got " + data['DateLastSansurvey']);
        }
        // ensure the json data is a string
        if (data['DfrUrl'] && !(typeof data['DfrUrl'] === 'string' || data['DfrUrl'] instanceof String)) {
            throw new Error("Expected the field `DfrUrl` to be a primitive type in the JSON string but got " + data['DfrUrl']);
        }
        // ensure the json data is a string
        if (data['EPARegion'] && !(typeof data['EPARegion'] === 'string' || data['EPARegion'] instanceof String)) {
            throw new Error("Expected the field `EPARegion` to be a primitive type in the JSON string but got " + data['EPARegion']);
        }
        // ensure the json data is a string
        if (data['FIPSCodes'] && !(typeof data['FIPSCodes'] === 'string' || data['FIPSCodes'] instanceof String)) {
            throw new Error("Expected the field `FIPSCodes` to be a primitive type in the JSON string but got " + data['FIPSCodes']);
        }
        // ensure the json data is a string
        if (data['FeaFlag'] && !(typeof data['FeaFlag'] === 'string' || data['FeaFlag'] instanceof String)) {
            throw new Error("Expected the field `FeaFlag` to be a primitive type in the JSON string but got " + data['FeaFlag']);
        }
        // ensure the json data is a string
        if (data['Feas'] && !(typeof data['Feas'] === 'string' || data['Feas'] instanceof String)) {
            throw new Error("Expected the field `Feas` to be a primitive type in the JSON string but got " + data['Feas']);
        }
        // ensure the json data is a string
        if (data['GwSwCode'] && !(typeof data['GwSwCode'] === 'string' || data['GwSwCode'] instanceof String)) {
            throw new Error("Expected the field `GwSwCode` to be a primitive type in the JSON string but got " + data['GwSwCode']);
        }
        // ensure the json data is a string
        if (data['HealthFlag'] && !(typeof data['HealthFlag'] === 'string' || data['HealthFlag'] instanceof String)) {
            throw new Error("Expected the field `HealthFlag` to be a primitive type in the JSON string but got " + data['HealthFlag']);
        }
        // ensure the json data is a string
        if (data['IeaFlag'] && !(typeof data['IeaFlag'] === 'string' || data['IeaFlag'] instanceof String)) {
            throw new Error("Expected the field `IeaFlag` to be a primitive type in the JSON string but got " + data['IeaFlag']);
        }
        // ensure the json data is a string
        if (data['Ifea'] && !(typeof data['Ifea'] === 'string' || data['Ifea'] instanceof String)) {
            throw new Error("Expected the field `Ifea` to be a primitive type in the JSON string but got " + data['Ifea']);
        }
        // ensure the json data is a string
        if (data['IndianCountry'] && !(typeof data['IndianCountry'] === 'string' || data['IndianCountry'] instanceof String)) {
            throw new Error("Expected the field `IndianCountry` to be a primitive type in the JSON string but got " + data['IndianCountry']);
        }
        // ensure the json data is a string
        if (data['Insp5yrFlag'] && !(typeof data['Insp5yrFlag'] === 'string' || data['Insp5yrFlag'] instanceof String)) {
            throw new Error("Expected the field `Insp5yrFlag` to be a primitive type in the JSON string but got " + data['Insp5yrFlag']);
        }
        // ensure the json data is a string
        if (data['LeadAndCopperViol'] && !(typeof data['LeadAndCopperViol'] === 'string' || data['LeadAndCopperViol'] instanceof String)) {
            throw new Error("Expected the field `LeadAndCopperViol` to be a primitive type in the JSON string but got " + data['LeadAndCopperViol']);
        }
        // ensure the json data is a string
        if (data['MaxScore'] && !(typeof data['MaxScore'] === 'string' || data['MaxScore'] instanceof String)) {
            throw new Error("Expected the field `MaxScore` to be a primitive type in the JSON string but got " + data['MaxScore']);
        }
        // ensure the json data is a string
        if (data['MrFlag'] && !(typeof data['MrFlag'] === 'string' || data['MrFlag'] instanceof String)) {
            throw new Error("Expected the field `MrFlag` to be a primitive type in the JSON string but got " + data['MrFlag']);
        }
        // ensure the json data is a string
        if (data['NewVioFlg'] && !(typeof data['NewVioFlg'] === 'string' || data['NewVioFlg'] instanceof String)) {
            throw new Error("Expected the field `NewVioFlg` to be a primitive type in the JSON string but got " + data['NewVioFlg']);
        }
        // ensure the json data is a string
        if (data['OtherFlag'] && !(typeof data['OtherFlag'] === 'string' || data['OtherFlag'] instanceof String)) {
            throw new Error("Expected the field `OtherFlag` to be a primitive type in the JSON string but got " + data['OtherFlag']);
        }
        // ensure the json data is a string
        if (data['OwnerDesc'] && !(typeof data['OwnerDesc'] === 'string' || data['OwnerDesc'] instanceof String)) {
            throw new Error("Expected the field `OwnerDesc` to be a primitive type in the JSON string but got " + data['OwnerDesc']);
        }
        // ensure the json data is a string
        if (data['OwnerTypeCode'] && !(typeof data['OwnerTypeCode'] === 'string' || data['OwnerTypeCode'] instanceof String)) {
            throw new Error("Expected the field `OwnerTypeCode` to be a primitive type in the JSON string but got " + data['OwnerTypeCode']);
        }
        // ensure the json data is a string
        if (data['PWSActivityCode'] && !(typeof data['PWSActivityCode'] === 'string' || data['PWSActivityCode'] instanceof String)) {
            throw new Error("Expected the field `PWSActivityCode` to be a primitive type in the JSON string but got " + data['PWSActivityCode']);
        }
        // ensure the json data is a string
        if (data['PWSActivityDesc'] && !(typeof data['PWSActivityDesc'] === 'string' || data['PWSActivityDesc'] instanceof String)) {
            throw new Error("Expected the field `PWSActivityDesc` to be a primitive type in the JSON string but got " + data['PWSActivityDesc']);
        }
        // ensure the json data is a string
        if (data['PWSId'] && !(typeof data['PWSId'] === 'string' || data['PWSId'] instanceof String)) {
            throw new Error("Expected the field `PWSId` to be a primitive type in the JSON string but got " + data['PWSId']);
        }
        // ensure the json data is a string
        if (data['PWSName'] && !(typeof data['PWSName'] === 'string' || data['PWSName'] instanceof String)) {
            throw new Error("Expected the field `PWSName` to be a primitive type in the JSON string but got " + data['PWSName']);
        }
        // ensure the json data is a string
        if (data['PWSTypeCode'] && !(typeof data['PWSTypeCode'] === 'string' || data['PWSTypeCode'] instanceof String)) {
            throw new Error("Expected the field `PWSTypeCode` to be a primitive type in the JSON string but got " + data['PWSTypeCode']);
        }
        // ensure the json data is a string
        if (data['PWSTypeDesc'] && !(typeof data['PWSTypeDesc'] === 'string' || data['PWSTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `PWSTypeDesc` to be a primitive type in the JSON string but got " + data['PWSTypeDesc']);
        }
        // ensure the json data is a string
        if (data['PbAle'] && !(typeof data['PbAle'] === 'string' || data['PbAle'] instanceof String)) {
            throw new Error("Expected the field `PbAle` to be a primitive type in the JSON string but got " + data['PbAle']);
        }
        // ensure the json data is a string
        if (data['PbViol'] && !(typeof data['PbViol'] === 'string' || data['PbViol'] instanceof String)) {
            throw new Error("Expected the field `PbViol` to be a primitive type in the JSON string but got " + data['PbViol']);
        }
        // ensure the json data is a string
        if (data['PnFlag'] && !(typeof data['PnFlag'] === 'string' || data['PnFlag'] instanceof String)) {
            throw new Error("Expected the field `PnFlag` to be a primitive type in the JSON string but got " + data['PnFlag']);
        }
        // ensure the json data is a string
        if (data['PopulationServedCount'] && !(typeof data['PopulationServedCount'] === 'string' || data['PopulationServedCount'] instanceof String)) {
            throw new Error("Expected the field `PopulationServedCount` to be a primitive type in the JSON string but got " + data['PopulationServedCount']);
        }
        // ensure the json data is a string
        if (data['PrimarySourceCode'] && !(typeof data['PrimarySourceCode'] === 'string' || data['PrimarySourceCode'] instanceof String)) {
            throw new Error("Expected the field `PrimarySourceCode` to be a primitive type in the JSON string but got " + data['PrimarySourceCode']);
        }
        // ensure the json data is a string
        if (data['PrimarySourceDesc'] && !(typeof data['PrimarySourceDesc'] === 'string' || data['PrimarySourceDesc'] instanceof String)) {
            throw new Error("Expected the field `PrimarySourceDesc` to be a primitive type in the JSON string but got " + data['PrimarySourceDesc']);
        }
        // ensure the json data is a string
        if (data['QtrsWithSNC'] && !(typeof data['QtrsWithSNC'] === 'string' || data['QtrsWithSNC'] instanceof String)) {
            throw new Error("Expected the field `QtrsWithSNC` to be a primitive type in the JSON string but got " + data['QtrsWithSNC']);
        }
        // ensure the json data is a string
        if (data['QtrsWithVio'] && !(typeof data['QtrsWithVio'] === 'string' || data['QtrsWithVio'] instanceof String)) {
            throw new Error("Expected the field `QtrsWithVio` to be a primitive type in the JSON string but got " + data['QtrsWithVio']);
        }
        // ensure the json data is a string
        if (data['Rc350Viol'] && !(typeof data['Rc350Viol'] === 'string' || data['Rc350Viol'] instanceof String)) {
            throw new Error("Expected the field `Rc350Viol` to be a primitive type in the JSON string but got " + data['Rc350Viol']);
        }
        // ensure the json data is a string
        if (data['RegistryID'] && !(typeof data['RegistryID'] === 'string' || data['RegistryID'] instanceof String)) {
            throw new Error("Expected the field `RegistryID` to be a primitive type in the JSON string but got " + data['RegistryID']);
        }
        // ensure the json data is a string
        if (data['RulesVio'] && !(typeof data['RulesVio'] === 'string' || data['RulesVio'] instanceof String)) {
            throw new Error("Expected the field `RulesVio` to be a primitive type in the JSON string but got " + data['RulesVio']);
        }
        // ensure the json data is a string
        if (data['RulesVio3yr'] && !(typeof data['RulesVio3yr'] === 'string' || data['RulesVio3yr'] instanceof String)) {
            throw new Error("Expected the field `RulesVio3yr` to be a primitive type in the JSON string but got " + data['RulesVio3yr']);
        }
        // ensure the json data is a string
        if (data['SDWA3yrComplQtrsHistory'] && !(typeof data['SDWA3yrComplQtrsHistory'] === 'string' || data['SDWA3yrComplQtrsHistory'] instanceof String)) {
            throw new Error("Expected the field `SDWA3yrComplQtrsHistory` to be a primitive type in the JSON string but got " + data['SDWA3yrComplQtrsHistory']);
        }
        // ensure the json data is a string
        if (data['SDWAContaminants'] && !(typeof data['SDWAContaminants'] === 'string' || data['SDWAContaminants'] instanceof String)) {
            throw new Error("Expected the field `SDWAContaminants` to be a primitive type in the JSON string but got " + data['SDWAContaminants']);
        }
        // ensure the json data is a string
        if (data['SDWAContaminantsInCurViol'] && !(typeof data['SDWAContaminantsInCurViol'] === 'string' || data['SDWAContaminantsInCurViol'] instanceof String)) {
            throw new Error("Expected the field `SDWAContaminantsInCurViol` to be a primitive type in the JSON string but got " + data['SDWAContaminantsInCurViol']);
        }
        // ensure the json data is a string
        if (data['SDWAContaminantsInViol3yr'] && !(typeof data['SDWAContaminantsInViol3yr'] === 'string' || data['SDWAContaminantsInViol3yr'] instanceof String)) {
            throw new Error("Expected the field `SDWAContaminantsInViol3yr` to be a primitive type in the JSON string but got " + data['SDWAContaminantsInViol3yr']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastFea'] && !(typeof data['SDWDateLastFea'] === 'string' || data['SDWDateLastFea'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastFea` to be a primitive type in the JSON string but got " + data['SDWDateLastFea']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastFeaEPA'] && !(typeof data['SDWDateLastFeaEPA'] === 'string' || data['SDWDateLastFeaEPA'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastFeaEPA` to be a primitive type in the JSON string but got " + data['SDWDateLastFeaEPA']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastFeaSt'] && !(typeof data['SDWDateLastFeaSt'] === 'string' || data['SDWDateLastFeaSt'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastFeaSt` to be a primitive type in the JSON string but got " + data['SDWDateLastFeaSt']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastIea'] && !(typeof data['SDWDateLastIea'] === 'string' || data['SDWDateLastIea'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastIea` to be a primitive type in the JSON string but got " + data['SDWDateLastIea']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastIeaEPA'] && !(typeof data['SDWDateLastIeaEPA'] === 'string' || data['SDWDateLastIeaEPA'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastIeaEPA` to be a primitive type in the JSON string but got " + data['SDWDateLastIeaEPA']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastIeaSt'] && !(typeof data['SDWDateLastIeaSt'] === 'string' || data['SDWDateLastIeaSt'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastIeaSt` to be a primitive type in the JSON string but got " + data['SDWDateLastIeaSt']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastVisit'] && !(typeof data['SDWDateLastVisit'] === 'string' || data['SDWDateLastVisit'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastVisit` to be a primitive type in the JSON string but got " + data['SDWDateLastVisit']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastVisitEPA'] && !(typeof data['SDWDateLastVisitEPA'] === 'string' || data['SDWDateLastVisitEPA'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastVisitEPA` to be a primitive type in the JSON string but got " + data['SDWDateLastVisitEPA']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastVisitLocal'] && !(typeof data['SDWDateLastVisitLocal'] === 'string' || data['SDWDateLastVisitLocal'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastVisitLocal` to be a primitive type in the JSON string but got " + data['SDWDateLastVisitLocal']);
        }
        // ensure the json data is a string
        if (data['SDWDateLastVisitState'] && !(typeof data['SDWDateLastVisitState'] === 'string' || data['SDWDateLastVisitState'] instanceof String)) {
            throw new Error("Expected the field `SDWDateLastVisitState` to be a primitive type in the JSON string but got " + data['SDWDateLastVisitState']);
        }
        // ensure the json data is a string
        if (data['SNC'] && !(typeof data['SNC'] === 'string' || data['SNC'] instanceof String)) {
            throw new Error("Expected the field `SNC` to be a primitive type in the JSON string but got " + data['SNC']);
        }
        // ensure the json data is a string
        if (data['SNCFlag'] && !(typeof data['SNCFlag'] === 'string' || data['SNCFlag'] instanceof String)) {
            throw new Error("Expected the field `SNCFlag` to be a primitive type in the JSON string but got " + data['SNCFlag']);
        }
        // ensure the json data is a string
        if (data['Sansurvey5yr'] && !(typeof data['Sansurvey5yr'] === 'string' || data['Sansurvey5yr'] instanceof String)) {
            throw new Error("Expected the field `Sansurvey5yr` to be a primitive type in the JSON string but got " + data['Sansurvey5yr']);
        }
        // ensure the json data is a string
        if (data['SeriousViolator'] && !(typeof data['SeriousViolator'] === 'string' || data['SeriousViolator'] instanceof String)) {
            throw new Error("Expected the field `SeriousViolator` to be a primitive type in the JSON string but got " + data['SeriousViolator']);
        }
        // ensure the json data is a string
        if (data['ServiceAreaTypeCode'] && !(typeof data['ServiceAreaTypeCode'] === 'string' || data['ServiceAreaTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ServiceAreaTypeCode` to be a primitive type in the JSON string but got " + data['ServiceAreaTypeCode']);
        }
        // ensure the json data is a string
        if (data['ServiceAreaTypeDesc'] && !(typeof data['ServiceAreaTypeDesc'] === 'string' || data['ServiceAreaTypeDesc'] instanceof String)) {
            throw new Error("Expected the field `ServiceAreaTypeDesc` to be a primitive type in the JSON string but got " + data['ServiceAreaTypeDesc']);
        }
        // ensure the json data is a string
        if (data['SignificantDeficiencyCount'] && !(typeof data['SignificantDeficiencyCount'] === 'string' || data['SignificantDeficiencyCount'] instanceof String)) {
            throw new Error("Expected the field `SignificantDeficiencyCount` to be a primitive type in the JSON string but got " + data['SignificantDeficiencyCount']);
        }
        // ensure the json data is a string
        if (data['SignificantDeficiencyCountIls'] && !(typeof data['SignificantDeficiencyCountIls'] === 'string' || data['SignificantDeficiencyCountIls'] instanceof String)) {
            throw new Error("Expected the field `SignificantDeficiencyCountIls` to be a primitive type in the JSON string but got " + data['SignificantDeficiencyCountIls']);
        }
        // ensure the json data is a string
        if (data['SiteVisits5yrAll'] && !(typeof data['SiteVisits5yrAll'] === 'string' || data['SiteVisits5yrAll'] instanceof String)) {
            throw new Error("Expected the field `SiteVisits5yrAll` to be a primitive type in the JSON string but got " + data['SiteVisits5yrAll']);
        }
        // ensure the json data is a string
        if (data['SiteVisits5yrInspections'] && !(typeof data['SiteVisits5yrInspections'] === 'string' || data['SiteVisits5yrInspections'] instanceof String)) {
            throw new Error("Expected the field `SiteVisits5yrInspections` to be a primitive type in the JSON string but got " + data['SiteVisits5yrInspections']);
        }
        // ensure the json data is a string
        if (data['SiteVisits5yrOther'] && !(typeof data['SiteVisits5yrOther'] === 'string' || data['SiteVisits5yrOther'] instanceof String)) {
            throw new Error("Expected the field `SiteVisits5yrOther` to be a primitive type in the JSON string but got " + data['SiteVisits5yrOther']);
        }
        // ensure the json data is a string
        if (data['StateCode'] && !(typeof data['StateCode'] === 'string' || data['StateCode'] instanceof String)) {
            throw new Error("Expected the field `StateCode` to be a primitive type in the JSON string but got " + data['StateCode']);
        }
        // ensure the json data is a string
        if (data['TRIbalFlag'] && !(typeof data['TRIbalFlag'] === 'string' || data['TRIbalFlag'] instanceof String)) {
            throw new Error("Expected the field `TRIbalFlag` to be a primitive type in the JSON string but got " + data['TRIbalFlag']);
        }
        // ensure the json data is a string
        if (data['VioFlag'] && !(typeof data['VioFlag'] === 'string' || data['VioFlag'] instanceof String)) {
            throw new Error("Expected the field `VioFlag` to be a primitive type in the JSON string but got " + data['VioFlag']);
        }
        // ensure the json data is a string
        if (data['Viofeanot'] && !(typeof data['Viofeanot'] === 'string' || data['Viofeanot'] instanceof String)) {
            throw new Error("Expected the field `Viofeanot` to be a primitive type in the JSON string but got " + data['Viofeanot']);
        }
        // ensure the json data is a string
        if (data['ViolationCategories'] && !(typeof data['ViolationCategories'] === 'string' || data['ViolationCategories'] instanceof String)) {
            throw new Error("Expected the field `ViolationCategories` to be a primitive type in the JSON string but got " + data['ViolationCategories']);
        }
        // ensure the json data is a string
        if (data['Viopaccr'] && !(typeof data['Viopaccr'] === 'string' || data['Viopaccr'] instanceof String)) {
            throw new Error("Expected the field `Viopaccr` to be a primitive type in the JSON string but got " + data['Viopaccr']);
        }
        // ensure the json data is a string
        if (data['Vioremain'] && !(typeof data['Vioremain'] === 'string' || data['Vioremain'] instanceof String)) {
            throw new Error("Expected the field `Vioremain` to be a primitive type in the JSON string but got " + data['Vioremain']);
        }
        // ensure the json data is a string
        if (data['Viortcfea'] && !(typeof data['Viortcfea'] === 'string' || data['Viortcfea'] instanceof String)) {
            throw new Error("Expected the field `Viortcfea` to be a primitive type in the JSON string but got " + data['Viortcfea']);
        }
        // ensure the json data is a string
        if (data['Viortcnofea'] && !(typeof data['Viortcnofea'] === 'string' || data['Viortcnofea'] instanceof String)) {
            throw new Error("Expected the field `Viortcnofea` to be a primitive type in the JSON string but got " + data['Viortcnofea']);
        }
        // ensure the json data is a string
        if (data['ZipCodesServed'] && !(typeof data['ZipCodesServed'] === 'string' || data['ZipCodesServed'] instanceof String)) {
            throw new Error("Expected the field `ZipCodesServed` to be a primitive type in the JSON string but got " + data['ZipCodesServed']);
        }

        return true;
    }


}

Sdw04.RequiredProperties = ["CitiesServed", "CountiesServed", "CuAle", "CuViol", "CurrVioFlag", "DateLastSansurvey", "DfrUrl", "EPARegion", "FIPSCodes", "FeaFlag", "Feas", "GwSwCode", "HealthFlag", "IeaFlag", "Ifea", "IndianCountry", "Insp5yrFlag", "LeadAndCopperViol", "MaxScore", "MrFlag", "NewVioFlg", "OtherFlag", "OwnerDesc", "OwnerTypeCode", "PWSActivityCode", "PWSActivityDesc", "PWSId", "PWSName", "PWSTypeCode", "PWSTypeDesc", "PbAle", "PbViol", "PnFlag", "PopulationServedCount", "PrimarySourceCode", "PrimarySourceDesc", "QtrsWithSNC", "QtrsWithVio", "Rc350Viol", "RegistryID", "RulesVio", "RulesVio3yr", "SDWA3yrComplQtrsHistory", "SDWAContaminants", "SDWAContaminantsInCurViol", "SDWAContaminantsInViol3yr", "SDWDateLastFea", "SDWDateLastFeaEPA", "SDWDateLastFeaSt", "SDWDateLastIea", "SDWDateLastIeaEPA", "SDWDateLastIeaSt", "SDWDateLastVisit", "SDWDateLastVisitEPA", "SDWDateLastVisitLocal", "SDWDateLastVisitState", "SNC", "SNCFlag", "Sansurvey5yr", "SeriousViolator", "ServiceAreaTypeCode", "ServiceAreaTypeDesc", "SignificantDeficiencyCount", "SignificantDeficiencyCountIls", "SiteVisits5yrAll", "SiteVisits5yrInspections", "SiteVisits5yrOther", "StateCode", "TRIbalFlag", "VioFlag", "Viofeanot", "ViolationCategories", "Viopaccr", "Vioremain", "Viortcfea", "Viortcnofea", "ZipCodesServed"];

/**
 * County
 * @member {String} CitiesServed
 */
Sdw04.prototype['CitiesServed'] = undefined;

/**
 * City
 * @member {String} CountiesServed
 */
Sdw04.prototype['CountiesServed'] = undefined;

/**
 * The count of occurrences when 90th percentile sample concentrations of copper exceeded the copper action level of 1.3 mg/L in the past five years.
 * @member {String} CuAle
 */
Sdw04.prototype['CuAle'] = undefined;

/**
 * The number of copper violations in the last five years.
 * @member {String} CuViol
 */
Sdw04.prototype['CuViol'] = undefined;

/**
 * Indicates if the facility has a current violation. 1 = Yes
 * @member {String} CurrVioFlag
 */
Sdw04.prototype['CurrVioFlag'] = undefined;

/**
 * @member {String} DateLastSansurvey
 */
Sdw04.prototype['DateLastSansurvey'] = undefined;

/**
 * The URL to the facility's Detailed Facility Report.
 * @member {String} DfrUrl
 */
Sdw04.prototype['DfrUrl'] = undefined;

/**
 * The EPA region in which the facility is located
 * @member {String} EPARegion
 */
Sdw04.prototype['EPARegion'] = undefined;

/**
 * Five-character Federal Information Processing Standards (FIPS) value: 2-character state || 3-character county
 * @member {String} FIPSCodes
 */
Sdw04.prototype['FIPSCodes'] = undefined;

/**
 * Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance
 * @member {String} FeaFlag
 */
Sdw04.prototype['FeaFlag'] = undefined;

/**
 * Number of formal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Formal enforcement actions compel a PWS to take specific actions by specific dates to return to compliance.
 * @member {String} Feas
 */
Sdw04.prototype['Feas'] = undefined;

/**
 * Returns \"GW\" if the systemï¿½source water type is ground water. Returns \"SW\" if the system source water type is surface water.
 * @member {String} GwSwCode
 */
Sdw04.prototype['GwSwCode'] = undefined;

/**
 * Indicates whether system has violations of health-based drinking water standards
 * @member {String} HealthFlag
 */
Sdw04.prototype['HealthFlag'] = undefined;

/**
 * Returns 0 if the system does not have informal enforcement actions in the past five years. Returns 1 if the system does have informal enforcement actions in the past five years.
 * @member {String} IeaFlag
 */
Sdw04.prototype['IeaFlag'] = undefined;

/**
 * Number of informal enforcement responses during the past 5 years (20 most recent quarters) as of the last quarterly refresh.  Informal enforcement actions do not specify actions and deadlines for returning to compliance.
 * @member {String} Ifea
 */
Sdw04.prototype['Ifea'] = undefined;

/**
 * Indicates whether the facility is located in Indian Country
 * @member {String} IndianCountry
 */
Sdw04.prototype['IndianCountry'] = undefined;

/**
 * Indicates if the facility has an inspection within the last 5 years. 1 = Yes
 * @member {String} Insp5yrFlag
 */
Sdw04.prototype['Insp5yrFlag'] = undefined;

/**
 * The number of lead and copper violations.
 * @member {String} LeadAndCopperViol
 */
Sdw04.prototype['LeadAndCopperViol'] = undefined;

/**
 * A sorting score for internal use.
 * @member {String} MaxScore
 */
Sdw04.prototype['MaxScore'] = undefined;

/**
 * Indicates whether system has monitoring and reporting violations
 * @member {String} MrFlag
 */
Sdw04.prototype['MrFlag'] = undefined;

/**
 * Violations that have been reported to SDWA since end of the last official quarter. These violations are considered draft and do not reflect the official compliance status for the facility.
 * @member {String} NewVioFlg
 */
Sdw04.prototype['NewVioFlg'] = undefined;

/**
 * Indicates whether system has other violations, such as failing to issue annual consumer confidence reports or maintain required records
 * @member {String} OtherFlag
 */
Sdw04.prototype['OtherFlag'] = undefined;

/**
 * Description of Owner code
 * @member {String} OwnerDesc
 */
Sdw04.prototype['OwnerDesc'] = undefined;

/**
 * Owner/Operator: - P = Private - F = Federal Government - S = State Government - L = Local Government
 * @member {String} OwnerTypeCode
 */
Sdw04.prototype['OwnerTypeCode'] = undefined;

/**
 * Indicates whether systems have an active or inactive designation.
 * @member {String} PWSActivityCode
 */
Sdw04.prototype['PWSActivityCode'] = undefined;

/**
 * Description of activity status code (ACT), e.g., active, inactive.
 * @member {String} PWSActivityDesc
 */
Sdw04.prototype['PWSActivityDesc'] = undefined;

/**
 * Unique identifying code for a public water system, consisting of a two-letter state or region code, followed by seven digits
 * @member {String} PWSId
 */
Sdw04.prototype['PWSId'] = undefined;

/**
 * Name of the system regulated under the Safe Drinking Water Act (SDWA)
 * @member {String} PWSName
 */
Sdw04.prototype['PWSName'] = undefined;

/**
 * Type of public water system: - CWS   = Community water system - NCWS  = Non-community water system - NTCWS = Non-transient non-community water system - TNCWS = Transient non-community water system
 * @member {String} PWSTypeCode
 */
Sdw04.prototype['PWSTypeCode'] = undefined;

/**
 * The type of public water system (PWS) and description of corresponding SystemType code. A public water system is a system for the provision to the public of piped water for human consumption, which has at least 15 service connections or regularly serves a
 * @member {String} PWSTypeDesc
 */
Sdw04.prototype['PWSTypeDesc'] = undefined;

/**
 * The count of occurrences when 90th percentile sample concentrations of lead exceeded the lead action level of 0.015 mg/L in the past five years.
 * @member {String} PbAle
 */
Sdw04.prototype['PbAle'] = undefined;

/**
 * The number of lead violations in the last five years.
 * @member {String} PbViol
 */
Sdw04.prototype['PbViol'] = undefined;

/**
 * Indicates whether system has Public Notice Violations (failure to immediately alert consumers of serious problem with drinking water)
 * @member {String} PnFlag
 */
Sdw04.prototype['PnFlag'] = undefined;

/**
 * Estimated average daily population served by a system
 * @member {String} PopulationServedCount
 */
Sdw04.prototype['PopulationServedCount'] = undefined;

/**
 * The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
 * @member {String} PrimarySourceCode
 */
Sdw04.prototype['PrimarySourceCode'] = undefined;

/**
 * The source water type: Surface water (SW) - Water pumped and treated from sources open to the atmosphere, such as rivers, lakes, and reservoirs. Ground water (GW) - Water pumped and treated from aquifers (natural reservoirs below the earth's surface). Ground water under direct influence of surface water (GU) - Any water pumped from natural reservoirs below the earth's surface that has been determined to be under the direct influence of surface water. Purchased (Surface, Ground, Ground UDI Surface) Water - Water purchased from a wholesaler who pumps and treats water.
 * @member {String} PrimarySourceDesc
 */
Sdw04.prototype['PrimarySourceDesc'] = undefined;

/**
 * The number of quarters the system was designated by EPA as a serious violator over the past 3 years (12 most recent quarters).
 * @member {String} QtrsWithSNC
 */
Sdw04.prototype['QtrsWithSNC'] = undefined;

/**
 * The number of quarters the system was in violation over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
 * @member {String} QtrsWithVio
 */
Sdw04.prototype['QtrsWithVio'] = undefined;

/**
 * The count of open health-based lead violations in the past five years. These include violations of maximum contaminant levels (MCLs), maximum residual disinfectant levels (MRDLs), or treatment technique (TT) rules. This count includes new violations that have been reported since the end of the last official quarter.
 * @member {String} Rc350Viol
 */
Sdw04.prototype['Rc350Viol'] = undefined;

/**
 * An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
 * @member {String} RegistryID
 */
Sdw04.prototype['RegistryID'] = undefined;

/**
 * The count of rules the system is violating as of the latest official quarter of data in the source system, SDWIS, which may lag by 3-6 months. This includes violations in the most recent official quarter and new violations reported after the end of the last official quarter.
 * @member {String} RulesVio
 */
Sdw04.prototype['RulesVio'] = undefined;

/**
 * The count of rules the system was in violation of over the past three years. This includes the 12 most recent official quarters and new violations reported after the end of the last official quarter.
 * @member {String} RulesVio3yr
 */
Sdw04.prototype['RulesVio3yr'] = undefined;

/**
 * The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined
 * @member {String} SDWA3yrComplQtrsHistory
 */
Sdw04.prototype['SDWA3yrComplQtrsHistory'] = undefined;

/**
 * All unresolved violation contaminants or violation contaminants that have been resolved in the last 5 years.
 * @member {String} SDWAContaminants
 */
Sdw04.prototype['SDWAContaminants'] = undefined;

/**
 * The contaminant name and code (in SDWIS) in violation of a SDWA regulation. This includes violations in the most recent official quarter and new violations that have been reported since the end of the last official quarter.
 * @member {String} SDWAContaminantsInCurViol
 */
Sdw04.prototype['SDWAContaminantsInCurViol'] = undefined;

/**
 * The contaminant name and code in violation of a SDWA regulation in the past three years
 * @member {String} SDWAContaminantsInViol3yr
 */
Sdw04.prototype['SDWAContaminantsInViol3yr'] = undefined;

/**
 * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS within the last five years.
 * @member {String} SDWDateLastFea
 */
Sdw04.prototype['SDWDateLastFea'] = undefined;

/**
 * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by EPA within the last five years.
 * @member {String} SDWDateLastFeaEPA
 */
Sdw04.prototype['SDWDateLastFeaEPA'] = undefined;

/**
 * Indicates the effective date of the most recent listed formal enforcement action taken against the PWS by a state environmental agency within the last five years.
 * @member {String} SDWDateLastFeaSt
 */
Sdw04.prototype['SDWDateLastFeaSt'] = undefined;

/**
 * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS within the last five years.
 * @member {String} SDWDateLastIea
 */
Sdw04.prototype['SDWDateLastIea'] = undefined;

/**
 * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by EPA within the last five years.
 * @member {String} SDWDateLastIeaEPA
 */
Sdw04.prototype['SDWDateLastIeaEPA'] = undefined;

/**
 * Indicates the effective date of the most recent listed informal enforcement action taken against the PWS by a state environmental agency within the last five years.
 * @member {String} SDWDateLastIeaSt
 */
Sdw04.prototype['SDWDateLastIeaSt'] = undefined;

/**
 * The date of the last system visit.
 * @member {String} SDWDateLastVisit
 */
Sdw04.prototype['SDWDateLastVisit'] = undefined;

/**
 * The date of the last system visit by EPA.
 * @member {String} SDWDateLastVisitEPA
 */
Sdw04.prototype['SDWDateLastVisitEPA'] = undefined;

/**
 * The date of the last system visit by a local agency.
 * @member {String} SDWDateLastVisitLocal
 */
Sdw04.prototype['SDWDateLastVisitLocal'] = undefined;

/**
 * The date of the last system visit by a state agency.
 * @member {String} SDWDateLastVisitState
 */
Sdw04.prototype['SDWDateLastVisitState'] = undefined;

/**
 * Indicates the system's compliance status: No Violation,ï¿½In Violation, Signficant Noncompliance, or Unknown.
 * @member {String} SNC
 */
Sdw04.prototype['SNC'] = undefined;

/**
 * Returns 1 if the system is in significant noncompliance (SNC); returns 0 if not.
 * @member {String} SNCFlag
 */
Sdw04.prototype['SNCFlag'] = undefined;

/**
 * The number of sanitary surveys completed within the past five years. A sanitary survey is an on-site review of a system's water source, facilities, equipment, operation, and maintenance, intended to point out sanitary deficiencies and assess the system's capability to supply safe drinking water.
 * @member {String} Sansurvey5yr
 */
Sdw04.prototype['Sansurvey5yr'] = undefined;

/**
 * Indicates whether system is a Serious Violator (has unresolved serious, multiple, and/or continuing violations that is designated as a priority candidate for formal enforcement)
 * @member {String} SeriousViolator
 */
Sdw04.prototype['SeriousViolator'] = undefined;

/**
 * @member {String} ServiceAreaTypeCode
 */
Sdw04.prototype['ServiceAreaTypeCode'] = undefined;

/**
 * @member {String} ServiceAreaTypeDesc
 */
Sdw04.prototype['ServiceAreaTypeDesc'] = undefined;

/**
 * The number of significant deficiencies found from a sanitary survey within the past five years.
 * @member {String} SignificantDeficiencyCount
 */
Sdw04.prototype['SignificantDeficiencyCount'] = undefined;

/**
 * @member {String} SignificantDeficiencyCountIls
 */
Sdw04.prototype['SignificantDeficiencyCountIls'] = undefined;

/**
 * @member {String} SiteVisits5yrAll
 */
Sdw04.prototype['SiteVisits5yrAll'] = undefined;

/**
 * @member {String} SiteVisits5yrInspections
 */
Sdw04.prototype['SiteVisits5yrInspections'] = undefined;

/**
 * @member {String} SiteVisits5yrOther
 */
Sdw04.prototype['SiteVisits5yrOther'] = undefined;

/**
 * The state in which the system is located.
 * @member {String} StateCode
 */
Sdw04.prototype['StateCode'] = undefined;

/**
 * A flag indicating that the facility is within a tribal area.
 * @member {String} TRIbalFlag
 */
Sdw04.prototype['TRIbalFlag'] = undefined;

/**
 * Indicates whether the system has been in violation in the past five years (1 if yes, 0 if no).
 * @member {String} VioFlag
 */
Sdw04.prototype['VioFlag'] = undefined;

/**
 * Sum of violation points accrued during past five years (20 most recent quarters) that are under formal enforcement but not yet returned to compliance, as of the last quarterly refresh
 * @member {String} Viofeanot
 */
Sdw04.prototype['Viofeanot'] = undefined;

/**
 * @member {String} ViolationCategories
 */
Sdw04.prototype['ViolationCategories'] = undefined;

/**
 * Sum of all violation points for violations reported during the past five years (20 most recent quarters), as of the last quarterly refresh
 * @member {String} Viopaccr
 */
Sdw04.prototype['Viopaccr'] = undefined;

/**
 * Sum of violation points that were not returned to compliance as of the last quarterly refresh.  Includes points that have received formal enforcement but have not returned to compliance
 * @member {String} Vioremain
 */
Sdw04.prototype['Vioremain'] = undefined;

/**
 * Sum of violation points during past 5 years (20 most recent quarters) that received formal enforcement and returned to compliance, as of the last quarterly refresh
 * @member {String} Viortcfea
 */
Sdw04.prototype['Viortcfea'] = undefined;

/**
 * Sum of violation points during past 5 years (20 most recent quarters) that did not receive formal enforcement but did return to compliance, as of the last quarterly refresh
 * @member {String} Viortcnofea
 */
Sdw04.prototype['Viortcnofea'] = undefined;

/**
 * ZIP code
 * @member {String} ZipCodesServed
 */
Sdw04.prototype['ZipCodesServed'] = undefined;






export default Sdw04;

