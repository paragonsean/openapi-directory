/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrs1_CaseInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrs1_CaseInformation::OAICrs1_CaseInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrs1_CaseInformation::OAICrs1_CaseInformation() {
    this->initializeModel();
}

OAICrs1_CaseInformation::~OAICrs1_CaseInformation() {}

void OAICrs1_CaseInformation::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_case_name_isSet = false;
    m_case_name_isValid = false;

    m_case_number_isSet = false;
    m_case_number_isValid = false;

    m_case_status_isSet = false;
    m_case_status_isValid = false;

    m_case_status_date_isSet = false;
    m_case_status_date_isValid = false;

    m_case_summary_isSet = false;
    m_case_summary_isValid = false;

    m_case_type_isSet = false;
    m_case_type_isValid = false;

    m_doj_docket_number_isSet = false;
    m_doj_docket_number_isValid = false;

    m_enforcement_outcome_isSet = false;
    m_enforcement_outcome_isValid = false;

    m_enforcement_type_isSet = false;
    m_enforcement_type_isValid = false;

    m_headquarters_division_isSet = false;
    m_headquarters_division_isValid = false;

    m_lead_isSet = false;
    m_lead_isValid = false;

    m_multi_media_case_isSet = false;
    m_multi_media_case_isValid = false;

    m_regional_docket_number_isSet = false;
    m_regional_docket_number_isValid = false;

    m_relief_sought_isSet = false;
    m_relief_sought_isValid = false;

    m_result_vol_disclosure_isSet = false;
    m_result_vol_disclosure_isValid = false;

    m_total_compliance_action_cost_isSet = false;
    m_total_compliance_action_cost_isValid = false;

    m_total_cost_recovery_isSet = false;
    m_total_cost_recovery_isValid = false;

    m_total_federal_penalty_isSet = false;
    m_total_federal_penalty_isValid = false;

    m_total_sep_cost_isSet = false;
    m_total_sep_cost_isValid = false;

    m_total_state_penalty_isSet = false;
    m_total_state_penalty_isValid = false;

    m_violations_isSet = false;
    m_violations_isValid = false;
}

void OAICrs1_CaseInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrs1_CaseInformation::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("Branch")]);
    m_branch_isSet = !json[QString("Branch")].isNull() && m_branch_isValid;

    m_case_name_isValid = ::OpenAPI::fromJsonValue(m_case_name, json[QString("CaseName")]);
    m_case_name_isSet = !json[QString("CaseName")].isNull() && m_case_name_isValid;

    m_case_number_isValid = ::OpenAPI::fromJsonValue(m_case_number, json[QString("CaseNumber")]);
    m_case_number_isSet = !json[QString("CaseNumber")].isNull() && m_case_number_isValid;

    m_case_status_isValid = ::OpenAPI::fromJsonValue(m_case_status, json[QString("CaseStatus")]);
    m_case_status_isSet = !json[QString("CaseStatus")].isNull() && m_case_status_isValid;

    m_case_status_date_isValid = ::OpenAPI::fromJsonValue(m_case_status_date, json[QString("CaseStatusDate")]);
    m_case_status_date_isSet = !json[QString("CaseStatusDate")].isNull() && m_case_status_date_isValid;

    m_case_summary_isValid = ::OpenAPI::fromJsonValue(m_case_summary, json[QString("CaseSummary")]);
    m_case_summary_isSet = !json[QString("CaseSummary")].isNull() && m_case_summary_isValid;

    m_case_type_isValid = ::OpenAPI::fromJsonValue(m_case_type, json[QString("CaseType")]);
    m_case_type_isSet = !json[QString("CaseType")].isNull() && m_case_type_isValid;

    m_doj_docket_number_isValid = ::OpenAPI::fromJsonValue(m_doj_docket_number, json[QString("DOJDocketNumber")]);
    m_doj_docket_number_isSet = !json[QString("DOJDocketNumber")].isNull() && m_doj_docket_number_isValid;

    m_enforcement_outcome_isValid = ::OpenAPI::fromJsonValue(m_enforcement_outcome, json[QString("EnforcementOutcome")]);
    m_enforcement_outcome_isSet = !json[QString("EnforcementOutcome")].isNull() && m_enforcement_outcome_isValid;

    m_enforcement_type_isValid = ::OpenAPI::fromJsonValue(m_enforcement_type, json[QString("EnforcementType")]);
    m_enforcement_type_isSet = !json[QString("EnforcementType")].isNull() && m_enforcement_type_isValid;

    m_headquarters_division_isValid = ::OpenAPI::fromJsonValue(m_headquarters_division, json[QString("HeadquartersDivision")]);
    m_headquarters_division_isSet = !json[QString("HeadquartersDivision")].isNull() && m_headquarters_division_isValid;

    m_lead_isValid = ::OpenAPI::fromJsonValue(m_lead, json[QString("Lead")]);
    m_lead_isSet = !json[QString("Lead")].isNull() && m_lead_isValid;

    m_multi_media_case_isValid = ::OpenAPI::fromJsonValue(m_multi_media_case, json[QString("MultiMediaCase")]);
    m_multi_media_case_isSet = !json[QString("MultiMediaCase")].isNull() && m_multi_media_case_isValid;

    m_regional_docket_number_isValid = ::OpenAPI::fromJsonValue(m_regional_docket_number, json[QString("RegionalDocketNumber")]);
    m_regional_docket_number_isSet = !json[QString("RegionalDocketNumber")].isNull() && m_regional_docket_number_isValid;

    m_relief_sought_isValid = ::OpenAPI::fromJsonValue(m_relief_sought, json[QString("ReliefSought")]);
    m_relief_sought_isSet = !json[QString("ReliefSought")].isNull() && m_relief_sought_isValid;

    m_result_vol_disclosure_isValid = ::OpenAPI::fromJsonValue(m_result_vol_disclosure, json[QString("ResultVolDisclosure")]);
    m_result_vol_disclosure_isSet = !json[QString("ResultVolDisclosure")].isNull() && m_result_vol_disclosure_isValid;

    m_total_compliance_action_cost_isValid = ::OpenAPI::fromJsonValue(m_total_compliance_action_cost, json[QString("TotalComplianceActionCost")]);
    m_total_compliance_action_cost_isSet = !json[QString("TotalComplianceActionCost")].isNull() && m_total_compliance_action_cost_isValid;

    m_total_cost_recovery_isValid = ::OpenAPI::fromJsonValue(m_total_cost_recovery, json[QString("TotalCostRecovery")]);
    m_total_cost_recovery_isSet = !json[QString("TotalCostRecovery")].isNull() && m_total_cost_recovery_isValid;

    m_total_federal_penalty_isValid = ::OpenAPI::fromJsonValue(m_total_federal_penalty, json[QString("TotalFederalPenalty")]);
    m_total_federal_penalty_isSet = !json[QString("TotalFederalPenalty")].isNull() && m_total_federal_penalty_isValid;

    m_total_sep_cost_isValid = ::OpenAPI::fromJsonValue(m_total_sep_cost, json[QString("TotalSEPCost")]);
    m_total_sep_cost_isSet = !json[QString("TotalSEPCost")].isNull() && m_total_sep_cost_isValid;

    m_total_state_penalty_isValid = ::OpenAPI::fromJsonValue(m_total_state_penalty, json[QString("TotalStatePenalty")]);
    m_total_state_penalty_isSet = !json[QString("TotalStatePenalty")].isNull() && m_total_state_penalty_isValid;

    m_violations_isValid = ::OpenAPI::fromJsonValue(m_violations, json[QString("Violations")]);
    m_violations_isSet = !json[QString("Violations")].isNull() && m_violations_isValid;
}

QString OAICrs1_CaseInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrs1_CaseInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("Branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_case_name_isSet) {
        obj.insert(QString("CaseName"), ::OpenAPI::toJsonValue(m_case_name));
    }
    if (m_case_number_isSet) {
        obj.insert(QString("CaseNumber"), ::OpenAPI::toJsonValue(m_case_number));
    }
    if (m_case_status_isSet) {
        obj.insert(QString("CaseStatus"), ::OpenAPI::toJsonValue(m_case_status));
    }
    if (m_case_status_date_isSet) {
        obj.insert(QString("CaseStatusDate"), ::OpenAPI::toJsonValue(m_case_status_date));
    }
    if (m_case_summary_isSet) {
        obj.insert(QString("CaseSummary"), ::OpenAPI::toJsonValue(m_case_summary));
    }
    if (m_case_type_isSet) {
        obj.insert(QString("CaseType"), ::OpenAPI::toJsonValue(m_case_type));
    }
    if (m_doj_docket_number_isSet) {
        obj.insert(QString("DOJDocketNumber"), ::OpenAPI::toJsonValue(m_doj_docket_number));
    }
    if (m_enforcement_outcome_isSet) {
        obj.insert(QString("EnforcementOutcome"), ::OpenAPI::toJsonValue(m_enforcement_outcome));
    }
    if (m_enforcement_type_isSet) {
        obj.insert(QString("EnforcementType"), ::OpenAPI::toJsonValue(m_enforcement_type));
    }
    if (m_headquarters_division_isSet) {
        obj.insert(QString("HeadquartersDivision"), ::OpenAPI::toJsonValue(m_headquarters_division));
    }
    if (m_lead_isSet) {
        obj.insert(QString("Lead"), ::OpenAPI::toJsonValue(m_lead));
    }
    if (m_multi_media_case_isSet) {
        obj.insert(QString("MultiMediaCase"), ::OpenAPI::toJsonValue(m_multi_media_case));
    }
    if (m_regional_docket_number_isSet) {
        obj.insert(QString("RegionalDocketNumber"), ::OpenAPI::toJsonValue(m_regional_docket_number));
    }
    if (m_relief_sought_isSet) {
        obj.insert(QString("ReliefSought"), ::OpenAPI::toJsonValue(m_relief_sought));
    }
    if (m_result_vol_disclosure_isSet) {
        obj.insert(QString("ResultVolDisclosure"), ::OpenAPI::toJsonValue(m_result_vol_disclosure));
    }
    if (m_total_compliance_action_cost_isSet) {
        obj.insert(QString("TotalComplianceActionCost"), ::OpenAPI::toJsonValue(m_total_compliance_action_cost));
    }
    if (m_total_cost_recovery_isSet) {
        obj.insert(QString("TotalCostRecovery"), ::OpenAPI::toJsonValue(m_total_cost_recovery));
    }
    if (m_total_federal_penalty_isSet) {
        obj.insert(QString("TotalFederalPenalty"), ::OpenAPI::toJsonValue(m_total_federal_penalty));
    }
    if (m_total_sep_cost_isSet) {
        obj.insert(QString("TotalSEPCost"), ::OpenAPI::toJsonValue(m_total_sep_cost));
    }
    if (m_total_state_penalty_isSet) {
        obj.insert(QString("TotalStatePenalty"), ::OpenAPI::toJsonValue(m_total_state_penalty));
    }
    if (m_violations_isSet) {
        obj.insert(QString("Violations"), ::OpenAPI::toJsonValue(m_violations));
    }
    return obj;
}

QString OAICrs1_CaseInformation::getBranch() const {
    return m_branch;
}
void OAICrs1_CaseInformation::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAICrs1_CaseInformation::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAICrs1_CaseInformation::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAICrs1_CaseInformation::getCaseName() const {
    return m_case_name;
}
void OAICrs1_CaseInformation::setCaseName(const QString &case_name) {
    m_case_name = case_name;
    m_case_name_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_name_Set() const{
    return m_case_name_isSet;
}

bool OAICrs1_CaseInformation::is_case_name_Valid() const{
    return m_case_name_isValid;
}

QString OAICrs1_CaseInformation::getCaseNumber() const {
    return m_case_number;
}
void OAICrs1_CaseInformation::setCaseNumber(const QString &case_number) {
    m_case_number = case_number;
    m_case_number_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_number_Set() const{
    return m_case_number_isSet;
}

bool OAICrs1_CaseInformation::is_case_number_Valid() const{
    return m_case_number_isValid;
}

QString OAICrs1_CaseInformation::getCaseStatus() const {
    return m_case_status;
}
void OAICrs1_CaseInformation::setCaseStatus(const QString &case_status) {
    m_case_status = case_status;
    m_case_status_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_status_Set() const{
    return m_case_status_isSet;
}

bool OAICrs1_CaseInformation::is_case_status_Valid() const{
    return m_case_status_isValid;
}

QString OAICrs1_CaseInformation::getCaseStatusDate() const {
    return m_case_status_date;
}
void OAICrs1_CaseInformation::setCaseStatusDate(const QString &case_status_date) {
    m_case_status_date = case_status_date;
    m_case_status_date_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_status_date_Set() const{
    return m_case_status_date_isSet;
}

bool OAICrs1_CaseInformation::is_case_status_date_Valid() const{
    return m_case_status_date_isValid;
}

QString OAICrs1_CaseInformation::getCaseSummary() const {
    return m_case_summary;
}
void OAICrs1_CaseInformation::setCaseSummary(const QString &case_summary) {
    m_case_summary = case_summary;
    m_case_summary_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_summary_Set() const{
    return m_case_summary_isSet;
}

bool OAICrs1_CaseInformation::is_case_summary_Valid() const{
    return m_case_summary_isValid;
}

QString OAICrs1_CaseInformation::getCaseType() const {
    return m_case_type;
}
void OAICrs1_CaseInformation::setCaseType(const QString &case_type) {
    m_case_type = case_type;
    m_case_type_isSet = true;
}

bool OAICrs1_CaseInformation::is_case_type_Set() const{
    return m_case_type_isSet;
}

bool OAICrs1_CaseInformation::is_case_type_Valid() const{
    return m_case_type_isValid;
}

QString OAICrs1_CaseInformation::getDojDocketNumber() const {
    return m_doj_docket_number;
}
void OAICrs1_CaseInformation::setDojDocketNumber(const QString &doj_docket_number) {
    m_doj_docket_number = doj_docket_number;
    m_doj_docket_number_isSet = true;
}

bool OAICrs1_CaseInformation::is_doj_docket_number_Set() const{
    return m_doj_docket_number_isSet;
}

bool OAICrs1_CaseInformation::is_doj_docket_number_Valid() const{
    return m_doj_docket_number_isValid;
}

QString OAICrs1_CaseInformation::getEnforcementOutcome() const {
    return m_enforcement_outcome;
}
void OAICrs1_CaseInformation::setEnforcementOutcome(const QString &enforcement_outcome) {
    m_enforcement_outcome = enforcement_outcome;
    m_enforcement_outcome_isSet = true;
}

bool OAICrs1_CaseInformation::is_enforcement_outcome_Set() const{
    return m_enforcement_outcome_isSet;
}

bool OAICrs1_CaseInformation::is_enforcement_outcome_Valid() const{
    return m_enforcement_outcome_isValid;
}

QString OAICrs1_CaseInformation::getEnforcementType() const {
    return m_enforcement_type;
}
void OAICrs1_CaseInformation::setEnforcementType(const QString &enforcement_type) {
    m_enforcement_type = enforcement_type;
    m_enforcement_type_isSet = true;
}

bool OAICrs1_CaseInformation::is_enforcement_type_Set() const{
    return m_enforcement_type_isSet;
}

bool OAICrs1_CaseInformation::is_enforcement_type_Valid() const{
    return m_enforcement_type_isValid;
}

QString OAICrs1_CaseInformation::getHeadquartersDivision() const {
    return m_headquarters_division;
}
void OAICrs1_CaseInformation::setHeadquartersDivision(const QString &headquarters_division) {
    m_headquarters_division = headquarters_division;
    m_headquarters_division_isSet = true;
}

bool OAICrs1_CaseInformation::is_headquarters_division_Set() const{
    return m_headquarters_division_isSet;
}

bool OAICrs1_CaseInformation::is_headquarters_division_Valid() const{
    return m_headquarters_division_isValid;
}

QString OAICrs1_CaseInformation::getLead() const {
    return m_lead;
}
void OAICrs1_CaseInformation::setLead(const QString &lead) {
    m_lead = lead;
    m_lead_isSet = true;
}

bool OAICrs1_CaseInformation::is_lead_Set() const{
    return m_lead_isSet;
}

bool OAICrs1_CaseInformation::is_lead_Valid() const{
    return m_lead_isValid;
}

QString OAICrs1_CaseInformation::getMultiMediaCase() const {
    return m_multi_media_case;
}
void OAICrs1_CaseInformation::setMultiMediaCase(const QString &multi_media_case) {
    m_multi_media_case = multi_media_case;
    m_multi_media_case_isSet = true;
}

bool OAICrs1_CaseInformation::is_multi_media_case_Set() const{
    return m_multi_media_case_isSet;
}

bool OAICrs1_CaseInformation::is_multi_media_case_Valid() const{
    return m_multi_media_case_isValid;
}

QString OAICrs1_CaseInformation::getRegionalDocketNumber() const {
    return m_regional_docket_number;
}
void OAICrs1_CaseInformation::setRegionalDocketNumber(const QString &regional_docket_number) {
    m_regional_docket_number = regional_docket_number;
    m_regional_docket_number_isSet = true;
}

bool OAICrs1_CaseInformation::is_regional_docket_number_Set() const{
    return m_regional_docket_number_isSet;
}

bool OAICrs1_CaseInformation::is_regional_docket_number_Valid() const{
    return m_regional_docket_number_isValid;
}

QString OAICrs1_CaseInformation::getReliefSought() const {
    return m_relief_sought;
}
void OAICrs1_CaseInformation::setReliefSought(const QString &relief_sought) {
    m_relief_sought = relief_sought;
    m_relief_sought_isSet = true;
}

bool OAICrs1_CaseInformation::is_relief_sought_Set() const{
    return m_relief_sought_isSet;
}

bool OAICrs1_CaseInformation::is_relief_sought_Valid() const{
    return m_relief_sought_isValid;
}

QString OAICrs1_CaseInformation::getResultVolDisclosure() const {
    return m_result_vol_disclosure;
}
void OAICrs1_CaseInformation::setResultVolDisclosure(const QString &result_vol_disclosure) {
    m_result_vol_disclosure = result_vol_disclosure;
    m_result_vol_disclosure_isSet = true;
}

bool OAICrs1_CaseInformation::is_result_vol_disclosure_Set() const{
    return m_result_vol_disclosure_isSet;
}

bool OAICrs1_CaseInformation::is_result_vol_disclosure_Valid() const{
    return m_result_vol_disclosure_isValid;
}

QString OAICrs1_CaseInformation::getTotalComplianceActionCost() const {
    return m_total_compliance_action_cost;
}
void OAICrs1_CaseInformation::setTotalComplianceActionCost(const QString &total_compliance_action_cost) {
    m_total_compliance_action_cost = total_compliance_action_cost;
    m_total_compliance_action_cost_isSet = true;
}

bool OAICrs1_CaseInformation::is_total_compliance_action_cost_Set() const{
    return m_total_compliance_action_cost_isSet;
}

bool OAICrs1_CaseInformation::is_total_compliance_action_cost_Valid() const{
    return m_total_compliance_action_cost_isValid;
}

QString OAICrs1_CaseInformation::getTotalCostRecovery() const {
    return m_total_cost_recovery;
}
void OAICrs1_CaseInformation::setTotalCostRecovery(const QString &total_cost_recovery) {
    m_total_cost_recovery = total_cost_recovery;
    m_total_cost_recovery_isSet = true;
}

bool OAICrs1_CaseInformation::is_total_cost_recovery_Set() const{
    return m_total_cost_recovery_isSet;
}

bool OAICrs1_CaseInformation::is_total_cost_recovery_Valid() const{
    return m_total_cost_recovery_isValid;
}

QString OAICrs1_CaseInformation::getTotalFederalPenalty() const {
    return m_total_federal_penalty;
}
void OAICrs1_CaseInformation::setTotalFederalPenalty(const QString &total_federal_penalty) {
    m_total_federal_penalty = total_federal_penalty;
    m_total_federal_penalty_isSet = true;
}

bool OAICrs1_CaseInformation::is_total_federal_penalty_Set() const{
    return m_total_federal_penalty_isSet;
}

bool OAICrs1_CaseInformation::is_total_federal_penalty_Valid() const{
    return m_total_federal_penalty_isValid;
}

QString OAICrs1_CaseInformation::getTotalSepCost() const {
    return m_total_sep_cost;
}
void OAICrs1_CaseInformation::setTotalSepCost(const QString &total_sep_cost) {
    m_total_sep_cost = total_sep_cost;
    m_total_sep_cost_isSet = true;
}

bool OAICrs1_CaseInformation::is_total_sep_cost_Set() const{
    return m_total_sep_cost_isSet;
}

bool OAICrs1_CaseInformation::is_total_sep_cost_Valid() const{
    return m_total_sep_cost_isValid;
}

QString OAICrs1_CaseInformation::getTotalStatePenalty() const {
    return m_total_state_penalty;
}
void OAICrs1_CaseInformation::setTotalStatePenalty(const QString &total_state_penalty) {
    m_total_state_penalty = total_state_penalty;
    m_total_state_penalty_isSet = true;
}

bool OAICrs1_CaseInformation::is_total_state_penalty_Set() const{
    return m_total_state_penalty_isSet;
}

bool OAICrs1_CaseInformation::is_total_state_penalty_Valid() const{
    return m_total_state_penalty_isValid;
}

QString OAICrs1_CaseInformation::getViolations() const {
    return m_violations;
}
void OAICrs1_CaseInformation::setViolations(const QString &violations) {
    m_violations = violations;
    m_violations_isSet = true;
}

bool OAICrs1_CaseInformation::is_violations_Set() const{
    return m_violations_isSet;
}

bool OAICrs1_CaseInformation::is_violations_Valid() const{
    return m_violations_isValid;
}

bool OAICrs1_CaseInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doj_docket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headquarters_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_media_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_docket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relief_sought_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_vol_disclosure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_compliance_action_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_recovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_federal_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sep_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_state_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrs1_CaseInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_branch_isValid && m_case_name_isValid && m_case_number_isValid && m_case_status_isValid && m_case_status_date_isValid && m_case_summary_isValid && m_case_type_isValid && m_doj_docket_number_isValid && m_enforcement_outcome_isValid && m_enforcement_type_isValid && m_headquarters_division_isValid && m_lead_isValid && m_multi_media_case_isValid && m_regional_docket_number_isValid && m_relief_sought_isValid && m_result_vol_disclosure_isValid && m_total_compliance_action_cost_isValid && m_total_cost_recovery_isValid && m_total_federal_penalty_isValid && m_total_sep_cost_isValid && m_total_state_penalty_isValid && m_violations_isValid && true;
}

} // namespace OpenAPI
