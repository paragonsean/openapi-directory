/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrs1_CaseInformation.h
 *
 * The basic information section contains information that identifies the action and some key descriptive variables, such as case status and case type.
 */

#ifndef OAICrs1_CaseInformation_H
#define OAICrs1_CaseInformation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICrs1_CaseInformation : public OAIObject {
public:
    OAICrs1_CaseInformation();
    OAICrs1_CaseInformation(QString json);
    ~OAICrs1_CaseInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    QString getCaseName() const;
    void setCaseName(const QString &case_name);
    bool is_case_name_Set() const;
    bool is_case_name_Valid() const;

    QString getCaseNumber() const;
    void setCaseNumber(const QString &case_number);
    bool is_case_number_Set() const;
    bool is_case_number_Valid() const;

    QString getCaseStatus() const;
    void setCaseStatus(const QString &case_status);
    bool is_case_status_Set() const;
    bool is_case_status_Valid() const;

    QString getCaseStatusDate() const;
    void setCaseStatusDate(const QString &case_status_date);
    bool is_case_status_date_Set() const;
    bool is_case_status_date_Valid() const;

    QString getCaseSummary() const;
    void setCaseSummary(const QString &case_summary);
    bool is_case_summary_Set() const;
    bool is_case_summary_Valid() const;

    QString getCaseType() const;
    void setCaseType(const QString &case_type);
    bool is_case_type_Set() const;
    bool is_case_type_Valid() const;

    QString getDojDocketNumber() const;
    void setDojDocketNumber(const QString &doj_docket_number);
    bool is_doj_docket_number_Set() const;
    bool is_doj_docket_number_Valid() const;

    QString getEnforcementOutcome() const;
    void setEnforcementOutcome(const QString &enforcement_outcome);
    bool is_enforcement_outcome_Set() const;
    bool is_enforcement_outcome_Valid() const;

    QString getEnforcementType() const;
    void setEnforcementType(const QString &enforcement_type);
    bool is_enforcement_type_Set() const;
    bool is_enforcement_type_Valid() const;

    QString getHeadquartersDivision() const;
    void setHeadquartersDivision(const QString &headquarters_division);
    bool is_headquarters_division_Set() const;
    bool is_headquarters_division_Valid() const;

    QString getLead() const;
    void setLead(const QString &lead);
    bool is_lead_Set() const;
    bool is_lead_Valid() const;

    QString getMultiMediaCase() const;
    void setMultiMediaCase(const QString &multi_media_case);
    bool is_multi_media_case_Set() const;
    bool is_multi_media_case_Valid() const;

    QString getRegionalDocketNumber() const;
    void setRegionalDocketNumber(const QString &regional_docket_number);
    bool is_regional_docket_number_Set() const;
    bool is_regional_docket_number_Valid() const;

    QString getReliefSought() const;
    void setReliefSought(const QString &relief_sought);
    bool is_relief_sought_Set() const;
    bool is_relief_sought_Valid() const;

    QString getResultVolDisclosure() const;
    void setResultVolDisclosure(const QString &result_vol_disclosure);
    bool is_result_vol_disclosure_Set() const;
    bool is_result_vol_disclosure_Valid() const;

    QString getTotalComplianceActionCost() const;
    void setTotalComplianceActionCost(const QString &total_compliance_action_cost);
    bool is_total_compliance_action_cost_Set() const;
    bool is_total_compliance_action_cost_Valid() const;

    QString getTotalCostRecovery() const;
    void setTotalCostRecovery(const QString &total_cost_recovery);
    bool is_total_cost_recovery_Set() const;
    bool is_total_cost_recovery_Valid() const;

    QString getTotalFederalPenalty() const;
    void setTotalFederalPenalty(const QString &total_federal_penalty);
    bool is_total_federal_penalty_Set() const;
    bool is_total_federal_penalty_Valid() const;

    QString getTotalSepCost() const;
    void setTotalSepCost(const QString &total_sep_cost);
    bool is_total_sep_cost_Set() const;
    bool is_total_sep_cost_Valid() const;

    QString getTotalStatePenalty() const;
    void setTotalStatePenalty(const QString &total_state_penalty);
    bool is_total_state_penalty_Set() const;
    bool is_total_state_penalty_Valid() const;

    QString getViolations() const;
    void setViolations(const QString &violations);
    bool is_violations_Set() const;
    bool is_violations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    QString m_case_name;
    bool m_case_name_isSet;
    bool m_case_name_isValid;

    QString m_case_number;
    bool m_case_number_isSet;
    bool m_case_number_isValid;

    QString m_case_status;
    bool m_case_status_isSet;
    bool m_case_status_isValid;

    QString m_case_status_date;
    bool m_case_status_date_isSet;
    bool m_case_status_date_isValid;

    QString m_case_summary;
    bool m_case_summary_isSet;
    bool m_case_summary_isValid;

    QString m_case_type;
    bool m_case_type_isSet;
    bool m_case_type_isValid;

    QString m_doj_docket_number;
    bool m_doj_docket_number_isSet;
    bool m_doj_docket_number_isValid;

    QString m_enforcement_outcome;
    bool m_enforcement_outcome_isSet;
    bool m_enforcement_outcome_isValid;

    QString m_enforcement_type;
    bool m_enforcement_type_isSet;
    bool m_enforcement_type_isValid;

    QString m_headquarters_division;
    bool m_headquarters_division_isSet;
    bool m_headquarters_division_isValid;

    QString m_lead;
    bool m_lead_isSet;
    bool m_lead_isValid;

    QString m_multi_media_case;
    bool m_multi_media_case_isSet;
    bool m_multi_media_case_isValid;

    QString m_regional_docket_number;
    bool m_regional_docket_number_isSet;
    bool m_regional_docket_number_isValid;

    QString m_relief_sought;
    bool m_relief_sought_isSet;
    bool m_relief_sought_isValid;

    QString m_result_vol_disclosure;
    bool m_result_vol_disclosure_isSet;
    bool m_result_vol_disclosure_isValid;

    QString m_total_compliance_action_cost;
    bool m_total_compliance_action_cost_isSet;
    bool m_total_compliance_action_cost_isValid;

    QString m_total_cost_recovery;
    bool m_total_cost_recovery_isSet;
    bool m_total_cost_recovery_isValid;

    QString m_total_federal_penalty;
    bool m_total_federal_penalty_isSet;
    bool m_total_federal_penalty_isValid;

    QString m_total_sep_cost;
    bool m_total_sep_cost_isSet;
    bool m_total_sep_cost_isValid;

    QString m_total_state_penalty;
    bool m_total_state_penalty_isSet;
    bool m_total_state_penalty_isValid;

    QString m_violations;
    bool m_violations_isSet;
    bool m_violations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrs1_CaseInformation)

#endif // OAICrs1_CaseInformation_H
