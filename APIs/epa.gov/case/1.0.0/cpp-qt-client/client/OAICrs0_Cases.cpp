/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrs0_Cases.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrs0_Cases::OAICrs0_Cases(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrs0_Cases::OAICrs0_Cases() {
    this->initializeModel();
}

OAICrs0_Cases::~OAICrs0_Cases() {}

void OAICrs0_Cases::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_caa_flag_isSet = false;
    m_caa_flag_isValid = false;

    m_case_category_code_isSet = false;
    m_case_category_code_isValid = false;

    m_case_category_desc_isSet = false;
    m_case_category_desc_isValid = false;

    m_case_name_isSet = false;
    m_case_name_isValid = false;

    m_case_number_isSet = false;
    m_case_number_isValid = false;

    m_case_status_code_isSet = false;
    m_case_status_code_isValid = false;

    m_case_status_desc_isSet = false;
    m_case_status_desc_isValid = false;

    m_cercla_flag_isSet = false;
    m_cercla_flag_isValid = false;

    m_civil_criminal_indicator_isSet = false;
    m_civil_criminal_indicator_isValid = false;

    m_cost_recovery_isSet = false;
    m_cost_recovery_isValid = false;

    m_court_docket_number_isSet = false;
    m_court_docket_number_isValid = false;

    m_cwa_flag_isSet = false;
    m_cwa_flag_isValid = false;

    m_doj_docket_nmbr_isSet = false;
    m_doj_docket_nmbr_isValid = false;

    m_date_closed_isSet = false;
    m_date_closed_isValid = false;

    m_date_filed_isSet = false;
    m_date_filed_isValid = false;

    m_date_lodged_isSet = false;
    m_date_lodged_isValid = false;

    m_enf_outcome_isSet = false;
    m_enf_outcome_isValid = false;

    m_epcra_flag_isSet = false;
    m_epcra_flag_isValid = false;

    m_fed_penalty_isSet = false;
    m_fed_penalty_isValid = false;

    m_federal_flag_isSet = false;
    m_federal_flag_isValid = false;

    m_fifra_flag_isSet = false;
    m_fifra_flag_isValid = false;

    m_lead_isSet = false;
    m_lead_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_primary_law_isSet = false;
    m_primary_law_isValid = false;

    m_primary_naics_code_isSet = false;
    m_primary_naics_code_isValid = false;

    m_primary_sic_code_isSet = false;
    m_primary_sic_code_isValid = false;

    m_primary_section_isSet = false;
    m_primary_section_isValid = false;

    m_prosecution_summary_id_isSet = false;
    m_prosecution_summary_id_isValid = false;

    m_rcra_flag_isSet = false;
    m_rcra_flag_isValid = false;

    m_sep_categories_isSet = false;
    m_sep_categories_isValid = false;

    m_sep_cost_isSet = false;
    m_sep_cost_isValid = false;

    m_sep_texts_isSet = false;
    m_sep_texts_isValid = false;

    m_sdwa_flag_isSet = false;
    m_sdwa_flag_isValid = false;

    m_settlement_cnt_isSet = false;
    m_settlement_cnt_isValid = false;

    m_settlement_date_isSet = false;
    m_settlement_date_isValid = false;

    m_state_loc_penalty_amt_isSet = false;
    m_state_loc_penalty_amt_isValid = false;

    m_total_comp_action_amt_isSet = false;
    m_total_comp_action_amt_isValid = false;

    m_tribal_land_flag_isSet = false;
    m_tribal_land_flag_isValid = false;

    m_tsca_flag_isSet = false;
    m_tsca_flag_isValid = false;
}

void OAICrs0_Cases::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrs0_Cases::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("ActivityId")]);
    m_activity_id_isSet = !json[QString("ActivityId")].isNull() && m_activity_id_isValid;

    m_caa_flag_isValid = ::OpenAPI::fromJsonValue(m_caa_flag, json[QString("CaaFlag")]);
    m_caa_flag_isSet = !json[QString("CaaFlag")].isNull() && m_caa_flag_isValid;

    m_case_category_code_isValid = ::OpenAPI::fromJsonValue(m_case_category_code, json[QString("CaseCategoryCode")]);
    m_case_category_code_isSet = !json[QString("CaseCategoryCode")].isNull() && m_case_category_code_isValid;

    m_case_category_desc_isValid = ::OpenAPI::fromJsonValue(m_case_category_desc, json[QString("CaseCategoryDesc")]);
    m_case_category_desc_isSet = !json[QString("CaseCategoryDesc")].isNull() && m_case_category_desc_isValid;

    m_case_name_isValid = ::OpenAPI::fromJsonValue(m_case_name, json[QString("CaseName")]);
    m_case_name_isSet = !json[QString("CaseName")].isNull() && m_case_name_isValid;

    m_case_number_isValid = ::OpenAPI::fromJsonValue(m_case_number, json[QString("CaseNumber")]);
    m_case_number_isSet = !json[QString("CaseNumber")].isNull() && m_case_number_isValid;

    m_case_status_code_isValid = ::OpenAPI::fromJsonValue(m_case_status_code, json[QString("CaseStatusCode")]);
    m_case_status_code_isSet = !json[QString("CaseStatusCode")].isNull() && m_case_status_code_isValid;

    m_case_status_desc_isValid = ::OpenAPI::fromJsonValue(m_case_status_desc, json[QString("CaseStatusDesc")]);
    m_case_status_desc_isSet = !json[QString("CaseStatusDesc")].isNull() && m_case_status_desc_isValid;

    m_cercla_flag_isValid = ::OpenAPI::fromJsonValue(m_cercla_flag, json[QString("CerclaFlag")]);
    m_cercla_flag_isSet = !json[QString("CerclaFlag")].isNull() && m_cercla_flag_isValid;

    m_civil_criminal_indicator_isValid = ::OpenAPI::fromJsonValue(m_civil_criminal_indicator, json[QString("CivilCriminalIndicator")]);
    m_civil_criminal_indicator_isSet = !json[QString("CivilCriminalIndicator")].isNull() && m_civil_criminal_indicator_isValid;

    m_cost_recovery_isValid = ::OpenAPI::fromJsonValue(m_cost_recovery, json[QString("CostRecovery")]);
    m_cost_recovery_isSet = !json[QString("CostRecovery")].isNull() && m_cost_recovery_isValid;

    m_court_docket_number_isValid = ::OpenAPI::fromJsonValue(m_court_docket_number, json[QString("CourtDocketNumber")]);
    m_court_docket_number_isSet = !json[QString("CourtDocketNumber")].isNull() && m_court_docket_number_isValid;

    m_cwa_flag_isValid = ::OpenAPI::fromJsonValue(m_cwa_flag, json[QString("CwaFlag")]);
    m_cwa_flag_isSet = !json[QString("CwaFlag")].isNull() && m_cwa_flag_isValid;

    m_doj_docket_nmbr_isValid = ::OpenAPI::fromJsonValue(m_doj_docket_nmbr, json[QString("DOJDocketNmbr")]);
    m_doj_docket_nmbr_isSet = !json[QString("DOJDocketNmbr")].isNull() && m_doj_docket_nmbr_isValid;

    m_date_closed_isValid = ::OpenAPI::fromJsonValue(m_date_closed, json[QString("DateClosed")]);
    m_date_closed_isSet = !json[QString("DateClosed")].isNull() && m_date_closed_isValid;

    m_date_filed_isValid = ::OpenAPI::fromJsonValue(m_date_filed, json[QString("DateFiled")]);
    m_date_filed_isSet = !json[QString("DateFiled")].isNull() && m_date_filed_isValid;

    m_date_lodged_isValid = ::OpenAPI::fromJsonValue(m_date_lodged, json[QString("DateLodged")]);
    m_date_lodged_isSet = !json[QString("DateLodged")].isNull() && m_date_lodged_isValid;

    m_enf_outcome_isValid = ::OpenAPI::fromJsonValue(m_enf_outcome, json[QString("EnfOutcome")]);
    m_enf_outcome_isSet = !json[QString("EnfOutcome")].isNull() && m_enf_outcome_isValid;

    m_epcra_flag_isValid = ::OpenAPI::fromJsonValue(m_epcra_flag, json[QString("EpcraFlag")]);
    m_epcra_flag_isSet = !json[QString("EpcraFlag")].isNull() && m_epcra_flag_isValid;

    m_fed_penalty_isValid = ::OpenAPI::fromJsonValue(m_fed_penalty, json[QString("FedPenalty")]);
    m_fed_penalty_isSet = !json[QString("FedPenalty")].isNull() && m_fed_penalty_isValid;

    m_federal_flag_isValid = ::OpenAPI::fromJsonValue(m_federal_flag, json[QString("FederalFlag")]);
    m_federal_flag_isSet = !json[QString("FederalFlag")].isNull() && m_federal_flag_isValid;

    m_fifra_flag_isValid = ::OpenAPI::fromJsonValue(m_fifra_flag, json[QString("FifraFlag")]);
    m_fifra_flag_isSet = !json[QString("FifraFlag")].isNull() && m_fifra_flag_isValid;

    m_lead_isValid = ::OpenAPI::fromJsonValue(m_lead, json[QString("Lead")]);
    m_lead_isSet = !json[QString("Lead")].isNull() && m_lead_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_primary_law_isValid = ::OpenAPI::fromJsonValue(m_primary_law, json[QString("PrimaryLaw")]);
    m_primary_law_isSet = !json[QString("PrimaryLaw")].isNull() && m_primary_law_isValid;

    m_primary_naics_code_isValid = ::OpenAPI::fromJsonValue(m_primary_naics_code, json[QString("PrimaryNAICSCode")]);
    m_primary_naics_code_isSet = !json[QString("PrimaryNAICSCode")].isNull() && m_primary_naics_code_isValid;

    m_primary_sic_code_isValid = ::OpenAPI::fromJsonValue(m_primary_sic_code, json[QString("PrimarySICCode")]);
    m_primary_sic_code_isSet = !json[QString("PrimarySICCode")].isNull() && m_primary_sic_code_isValid;

    m_primary_section_isValid = ::OpenAPI::fromJsonValue(m_primary_section, json[QString("PrimarySection")]);
    m_primary_section_isSet = !json[QString("PrimarySection")].isNull() && m_primary_section_isValid;

    m_prosecution_summary_id_isValid = ::OpenAPI::fromJsonValue(m_prosecution_summary_id, json[QString("ProsecutionSummaryId")]);
    m_prosecution_summary_id_isSet = !json[QString("ProsecutionSummaryId")].isNull() && m_prosecution_summary_id_isValid;

    m_rcra_flag_isValid = ::OpenAPI::fromJsonValue(m_rcra_flag, json[QString("RcraFlag")]);
    m_rcra_flag_isSet = !json[QString("RcraFlag")].isNull() && m_rcra_flag_isValid;

    m_sep_categories_isValid = ::OpenAPI::fromJsonValue(m_sep_categories, json[QString("SEPCategories")]);
    m_sep_categories_isSet = !json[QString("SEPCategories")].isNull() && m_sep_categories_isValid;

    m_sep_cost_isValid = ::OpenAPI::fromJsonValue(m_sep_cost, json[QString("SEPCost")]);
    m_sep_cost_isSet = !json[QString("SEPCost")].isNull() && m_sep_cost_isValid;

    m_sep_texts_isValid = ::OpenAPI::fromJsonValue(m_sep_texts, json[QString("SEPTexts")]);
    m_sep_texts_isSet = !json[QString("SEPTexts")].isNull() && m_sep_texts_isValid;

    m_sdwa_flag_isValid = ::OpenAPI::fromJsonValue(m_sdwa_flag, json[QString("SdwaFlag")]);
    m_sdwa_flag_isSet = !json[QString("SdwaFlag")].isNull() && m_sdwa_flag_isValid;

    m_settlement_cnt_isValid = ::OpenAPI::fromJsonValue(m_settlement_cnt, json[QString("SettlementCnt")]);
    m_settlement_cnt_isSet = !json[QString("SettlementCnt")].isNull() && m_settlement_cnt_isValid;

    m_settlement_date_isValid = ::OpenAPI::fromJsonValue(m_settlement_date, json[QString("SettlementDate")]);
    m_settlement_date_isSet = !json[QString("SettlementDate")].isNull() && m_settlement_date_isValid;

    m_state_loc_penalty_amt_isValid = ::OpenAPI::fromJsonValue(m_state_loc_penalty_amt, json[QString("StateLocPenaltyAmt")]);
    m_state_loc_penalty_amt_isSet = !json[QString("StateLocPenaltyAmt")].isNull() && m_state_loc_penalty_amt_isValid;

    m_total_comp_action_amt_isValid = ::OpenAPI::fromJsonValue(m_total_comp_action_amt, json[QString("TotalCompActionAmt")]);
    m_total_comp_action_amt_isSet = !json[QString("TotalCompActionAmt")].isNull() && m_total_comp_action_amt_isValid;

    m_tribal_land_flag_isValid = ::OpenAPI::fromJsonValue(m_tribal_land_flag, json[QString("TribalLandFlag")]);
    m_tribal_land_flag_isSet = !json[QString("TribalLandFlag")].isNull() && m_tribal_land_flag_isValid;

    m_tsca_flag_isValid = ::OpenAPI::fromJsonValue(m_tsca_flag, json[QString("TscaFlag")]);
    m_tsca_flag_isSet = !json[QString("TscaFlag")].isNull() && m_tsca_flag_isValid;
}

QString OAICrs0_Cases::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrs0_Cases::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("ActivityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_caa_flag_isSet) {
        obj.insert(QString("CaaFlag"), ::OpenAPI::toJsonValue(m_caa_flag));
    }
    if (m_case_category_code_isSet) {
        obj.insert(QString("CaseCategoryCode"), ::OpenAPI::toJsonValue(m_case_category_code));
    }
    if (m_case_category_desc_isSet) {
        obj.insert(QString("CaseCategoryDesc"), ::OpenAPI::toJsonValue(m_case_category_desc));
    }
    if (m_case_name_isSet) {
        obj.insert(QString("CaseName"), ::OpenAPI::toJsonValue(m_case_name));
    }
    if (m_case_number_isSet) {
        obj.insert(QString("CaseNumber"), ::OpenAPI::toJsonValue(m_case_number));
    }
    if (m_case_status_code_isSet) {
        obj.insert(QString("CaseStatusCode"), ::OpenAPI::toJsonValue(m_case_status_code));
    }
    if (m_case_status_desc_isSet) {
        obj.insert(QString("CaseStatusDesc"), ::OpenAPI::toJsonValue(m_case_status_desc));
    }
    if (m_cercla_flag_isSet) {
        obj.insert(QString("CerclaFlag"), ::OpenAPI::toJsonValue(m_cercla_flag));
    }
    if (m_civil_criminal_indicator_isSet) {
        obj.insert(QString("CivilCriminalIndicator"), ::OpenAPI::toJsonValue(m_civil_criminal_indicator));
    }
    if (m_cost_recovery_isSet) {
        obj.insert(QString("CostRecovery"), ::OpenAPI::toJsonValue(m_cost_recovery));
    }
    if (m_court_docket_number_isSet) {
        obj.insert(QString("CourtDocketNumber"), ::OpenAPI::toJsonValue(m_court_docket_number));
    }
    if (m_cwa_flag_isSet) {
        obj.insert(QString("CwaFlag"), ::OpenAPI::toJsonValue(m_cwa_flag));
    }
    if (m_doj_docket_nmbr_isSet) {
        obj.insert(QString("DOJDocketNmbr"), ::OpenAPI::toJsonValue(m_doj_docket_nmbr));
    }
    if (m_date_closed_isSet) {
        obj.insert(QString("DateClosed"), ::OpenAPI::toJsonValue(m_date_closed));
    }
    if (m_date_filed_isSet) {
        obj.insert(QString("DateFiled"), ::OpenAPI::toJsonValue(m_date_filed));
    }
    if (m_date_lodged_isSet) {
        obj.insert(QString("DateLodged"), ::OpenAPI::toJsonValue(m_date_lodged));
    }
    if (m_enf_outcome_isSet) {
        obj.insert(QString("EnfOutcome"), ::OpenAPI::toJsonValue(m_enf_outcome));
    }
    if (m_epcra_flag_isSet) {
        obj.insert(QString("EpcraFlag"), ::OpenAPI::toJsonValue(m_epcra_flag));
    }
    if (m_fed_penalty_isSet) {
        obj.insert(QString("FedPenalty"), ::OpenAPI::toJsonValue(m_fed_penalty));
    }
    if (m_federal_flag_isSet) {
        obj.insert(QString("FederalFlag"), ::OpenAPI::toJsonValue(m_federal_flag));
    }
    if (m_fifra_flag_isSet) {
        obj.insert(QString("FifraFlag"), ::OpenAPI::toJsonValue(m_fifra_flag));
    }
    if (m_lead_isSet) {
        obj.insert(QString("Lead"), ::OpenAPI::toJsonValue(m_lead));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_primary_law_isSet) {
        obj.insert(QString("PrimaryLaw"), ::OpenAPI::toJsonValue(m_primary_law));
    }
    if (m_primary_naics_code_isSet) {
        obj.insert(QString("PrimaryNAICSCode"), ::OpenAPI::toJsonValue(m_primary_naics_code));
    }
    if (m_primary_sic_code_isSet) {
        obj.insert(QString("PrimarySICCode"), ::OpenAPI::toJsonValue(m_primary_sic_code));
    }
    if (m_primary_section_isSet) {
        obj.insert(QString("PrimarySection"), ::OpenAPI::toJsonValue(m_primary_section));
    }
    if (m_prosecution_summary_id_isSet) {
        obj.insert(QString("ProsecutionSummaryId"), ::OpenAPI::toJsonValue(m_prosecution_summary_id));
    }
    if (m_rcra_flag_isSet) {
        obj.insert(QString("RcraFlag"), ::OpenAPI::toJsonValue(m_rcra_flag));
    }
    if (m_sep_categories_isSet) {
        obj.insert(QString("SEPCategories"), ::OpenAPI::toJsonValue(m_sep_categories));
    }
    if (m_sep_cost_isSet) {
        obj.insert(QString("SEPCost"), ::OpenAPI::toJsonValue(m_sep_cost));
    }
    if (m_sep_texts_isSet) {
        obj.insert(QString("SEPTexts"), ::OpenAPI::toJsonValue(m_sep_texts));
    }
    if (m_sdwa_flag_isSet) {
        obj.insert(QString("SdwaFlag"), ::OpenAPI::toJsonValue(m_sdwa_flag));
    }
    if (m_settlement_cnt_isSet) {
        obj.insert(QString("SettlementCnt"), ::OpenAPI::toJsonValue(m_settlement_cnt));
    }
    if (m_settlement_date_isSet) {
        obj.insert(QString("SettlementDate"), ::OpenAPI::toJsonValue(m_settlement_date));
    }
    if (m_state_loc_penalty_amt_isSet) {
        obj.insert(QString("StateLocPenaltyAmt"), ::OpenAPI::toJsonValue(m_state_loc_penalty_amt));
    }
    if (m_total_comp_action_amt_isSet) {
        obj.insert(QString("TotalCompActionAmt"), ::OpenAPI::toJsonValue(m_total_comp_action_amt));
    }
    if (m_tribal_land_flag_isSet) {
        obj.insert(QString("TribalLandFlag"), ::OpenAPI::toJsonValue(m_tribal_land_flag));
    }
    if (m_tsca_flag_isSet) {
        obj.insert(QString("TscaFlag"), ::OpenAPI::toJsonValue(m_tsca_flag));
    }
    return obj;
}

QString OAICrs0_Cases::getActivityId() const {
    return m_activity_id;
}
void OAICrs0_Cases::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAICrs0_Cases::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAICrs0_Cases::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAICrs0_Cases::getCaaFlag() const {
    return m_caa_flag;
}
void OAICrs0_Cases::setCaaFlag(const QString &caa_flag) {
    m_caa_flag = caa_flag;
    m_caa_flag_isSet = true;
}

bool OAICrs0_Cases::is_caa_flag_Set() const{
    return m_caa_flag_isSet;
}

bool OAICrs0_Cases::is_caa_flag_Valid() const{
    return m_caa_flag_isValid;
}

QString OAICrs0_Cases::getCaseCategoryCode() const {
    return m_case_category_code;
}
void OAICrs0_Cases::setCaseCategoryCode(const QString &case_category_code) {
    m_case_category_code = case_category_code;
    m_case_category_code_isSet = true;
}

bool OAICrs0_Cases::is_case_category_code_Set() const{
    return m_case_category_code_isSet;
}

bool OAICrs0_Cases::is_case_category_code_Valid() const{
    return m_case_category_code_isValid;
}

QString OAICrs0_Cases::getCaseCategoryDesc() const {
    return m_case_category_desc;
}
void OAICrs0_Cases::setCaseCategoryDesc(const QString &case_category_desc) {
    m_case_category_desc = case_category_desc;
    m_case_category_desc_isSet = true;
}

bool OAICrs0_Cases::is_case_category_desc_Set() const{
    return m_case_category_desc_isSet;
}

bool OAICrs0_Cases::is_case_category_desc_Valid() const{
    return m_case_category_desc_isValid;
}

QString OAICrs0_Cases::getCaseName() const {
    return m_case_name;
}
void OAICrs0_Cases::setCaseName(const QString &case_name) {
    m_case_name = case_name;
    m_case_name_isSet = true;
}

bool OAICrs0_Cases::is_case_name_Set() const{
    return m_case_name_isSet;
}

bool OAICrs0_Cases::is_case_name_Valid() const{
    return m_case_name_isValid;
}

QString OAICrs0_Cases::getCaseNumber() const {
    return m_case_number;
}
void OAICrs0_Cases::setCaseNumber(const QString &case_number) {
    m_case_number = case_number;
    m_case_number_isSet = true;
}

bool OAICrs0_Cases::is_case_number_Set() const{
    return m_case_number_isSet;
}

bool OAICrs0_Cases::is_case_number_Valid() const{
    return m_case_number_isValid;
}

QString OAICrs0_Cases::getCaseStatusCode() const {
    return m_case_status_code;
}
void OAICrs0_Cases::setCaseStatusCode(const QString &case_status_code) {
    m_case_status_code = case_status_code;
    m_case_status_code_isSet = true;
}

bool OAICrs0_Cases::is_case_status_code_Set() const{
    return m_case_status_code_isSet;
}

bool OAICrs0_Cases::is_case_status_code_Valid() const{
    return m_case_status_code_isValid;
}

QString OAICrs0_Cases::getCaseStatusDesc() const {
    return m_case_status_desc;
}
void OAICrs0_Cases::setCaseStatusDesc(const QString &case_status_desc) {
    m_case_status_desc = case_status_desc;
    m_case_status_desc_isSet = true;
}

bool OAICrs0_Cases::is_case_status_desc_Set() const{
    return m_case_status_desc_isSet;
}

bool OAICrs0_Cases::is_case_status_desc_Valid() const{
    return m_case_status_desc_isValid;
}

QString OAICrs0_Cases::getCerclaFlag() const {
    return m_cercla_flag;
}
void OAICrs0_Cases::setCerclaFlag(const QString &cercla_flag) {
    m_cercla_flag = cercla_flag;
    m_cercla_flag_isSet = true;
}

bool OAICrs0_Cases::is_cercla_flag_Set() const{
    return m_cercla_flag_isSet;
}

bool OAICrs0_Cases::is_cercla_flag_Valid() const{
    return m_cercla_flag_isValid;
}

QString OAICrs0_Cases::getCivilCriminalIndicator() const {
    return m_civil_criminal_indicator;
}
void OAICrs0_Cases::setCivilCriminalIndicator(const QString &civil_criminal_indicator) {
    m_civil_criminal_indicator = civil_criminal_indicator;
    m_civil_criminal_indicator_isSet = true;
}

bool OAICrs0_Cases::is_civil_criminal_indicator_Set() const{
    return m_civil_criminal_indicator_isSet;
}

bool OAICrs0_Cases::is_civil_criminal_indicator_Valid() const{
    return m_civil_criminal_indicator_isValid;
}

QString OAICrs0_Cases::getCostRecovery() const {
    return m_cost_recovery;
}
void OAICrs0_Cases::setCostRecovery(const QString &cost_recovery) {
    m_cost_recovery = cost_recovery;
    m_cost_recovery_isSet = true;
}

bool OAICrs0_Cases::is_cost_recovery_Set() const{
    return m_cost_recovery_isSet;
}

bool OAICrs0_Cases::is_cost_recovery_Valid() const{
    return m_cost_recovery_isValid;
}

QString OAICrs0_Cases::getCourtDocketNumber() const {
    return m_court_docket_number;
}
void OAICrs0_Cases::setCourtDocketNumber(const QString &court_docket_number) {
    m_court_docket_number = court_docket_number;
    m_court_docket_number_isSet = true;
}

bool OAICrs0_Cases::is_court_docket_number_Set() const{
    return m_court_docket_number_isSet;
}

bool OAICrs0_Cases::is_court_docket_number_Valid() const{
    return m_court_docket_number_isValid;
}

QString OAICrs0_Cases::getCwaFlag() const {
    return m_cwa_flag;
}
void OAICrs0_Cases::setCwaFlag(const QString &cwa_flag) {
    m_cwa_flag = cwa_flag;
    m_cwa_flag_isSet = true;
}

bool OAICrs0_Cases::is_cwa_flag_Set() const{
    return m_cwa_flag_isSet;
}

bool OAICrs0_Cases::is_cwa_flag_Valid() const{
    return m_cwa_flag_isValid;
}

QString OAICrs0_Cases::getDojDocketNmbr() const {
    return m_doj_docket_nmbr;
}
void OAICrs0_Cases::setDojDocketNmbr(const QString &doj_docket_nmbr) {
    m_doj_docket_nmbr = doj_docket_nmbr;
    m_doj_docket_nmbr_isSet = true;
}

bool OAICrs0_Cases::is_doj_docket_nmbr_Set() const{
    return m_doj_docket_nmbr_isSet;
}

bool OAICrs0_Cases::is_doj_docket_nmbr_Valid() const{
    return m_doj_docket_nmbr_isValid;
}

QString OAICrs0_Cases::getDateClosed() const {
    return m_date_closed;
}
void OAICrs0_Cases::setDateClosed(const QString &date_closed) {
    m_date_closed = date_closed;
    m_date_closed_isSet = true;
}

bool OAICrs0_Cases::is_date_closed_Set() const{
    return m_date_closed_isSet;
}

bool OAICrs0_Cases::is_date_closed_Valid() const{
    return m_date_closed_isValid;
}

QString OAICrs0_Cases::getDateFiled() const {
    return m_date_filed;
}
void OAICrs0_Cases::setDateFiled(const QString &date_filed) {
    m_date_filed = date_filed;
    m_date_filed_isSet = true;
}

bool OAICrs0_Cases::is_date_filed_Set() const{
    return m_date_filed_isSet;
}

bool OAICrs0_Cases::is_date_filed_Valid() const{
    return m_date_filed_isValid;
}

QString OAICrs0_Cases::getDateLodged() const {
    return m_date_lodged;
}
void OAICrs0_Cases::setDateLodged(const QString &date_lodged) {
    m_date_lodged = date_lodged;
    m_date_lodged_isSet = true;
}

bool OAICrs0_Cases::is_date_lodged_Set() const{
    return m_date_lodged_isSet;
}

bool OAICrs0_Cases::is_date_lodged_Valid() const{
    return m_date_lodged_isValid;
}

QString OAICrs0_Cases::getEnfOutcome() const {
    return m_enf_outcome;
}
void OAICrs0_Cases::setEnfOutcome(const QString &enf_outcome) {
    m_enf_outcome = enf_outcome;
    m_enf_outcome_isSet = true;
}

bool OAICrs0_Cases::is_enf_outcome_Set() const{
    return m_enf_outcome_isSet;
}

bool OAICrs0_Cases::is_enf_outcome_Valid() const{
    return m_enf_outcome_isValid;
}

QString OAICrs0_Cases::getEpcraFlag() const {
    return m_epcra_flag;
}
void OAICrs0_Cases::setEpcraFlag(const QString &epcra_flag) {
    m_epcra_flag = epcra_flag;
    m_epcra_flag_isSet = true;
}

bool OAICrs0_Cases::is_epcra_flag_Set() const{
    return m_epcra_flag_isSet;
}

bool OAICrs0_Cases::is_epcra_flag_Valid() const{
    return m_epcra_flag_isValid;
}

QString OAICrs0_Cases::getFedPenalty() const {
    return m_fed_penalty;
}
void OAICrs0_Cases::setFedPenalty(const QString &fed_penalty) {
    m_fed_penalty = fed_penalty;
    m_fed_penalty_isSet = true;
}

bool OAICrs0_Cases::is_fed_penalty_Set() const{
    return m_fed_penalty_isSet;
}

bool OAICrs0_Cases::is_fed_penalty_Valid() const{
    return m_fed_penalty_isValid;
}

QString OAICrs0_Cases::getFederalFlag() const {
    return m_federal_flag;
}
void OAICrs0_Cases::setFederalFlag(const QString &federal_flag) {
    m_federal_flag = federal_flag;
    m_federal_flag_isSet = true;
}

bool OAICrs0_Cases::is_federal_flag_Set() const{
    return m_federal_flag_isSet;
}

bool OAICrs0_Cases::is_federal_flag_Valid() const{
    return m_federal_flag_isValid;
}

QString OAICrs0_Cases::getFifraFlag() const {
    return m_fifra_flag;
}
void OAICrs0_Cases::setFifraFlag(const QString &fifra_flag) {
    m_fifra_flag = fifra_flag;
    m_fifra_flag_isSet = true;
}

bool OAICrs0_Cases::is_fifra_flag_Set() const{
    return m_fifra_flag_isSet;
}

bool OAICrs0_Cases::is_fifra_flag_Valid() const{
    return m_fifra_flag_isValid;
}

QString OAICrs0_Cases::getLead() const {
    return m_lead;
}
void OAICrs0_Cases::setLead(const QString &lead) {
    m_lead = lead;
    m_lead_isSet = true;
}

bool OAICrs0_Cases::is_lead_Set() const{
    return m_lead_isSet;
}

bool OAICrs0_Cases::is_lead_Valid() const{
    return m_lead_isValid;
}

QString OAICrs0_Cases::getMaxScore() const {
    return m_max_score;
}
void OAICrs0_Cases::setMaxScore(const QString &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAICrs0_Cases::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAICrs0_Cases::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAICrs0_Cases::getPrimaryLaw() const {
    return m_primary_law;
}
void OAICrs0_Cases::setPrimaryLaw(const QString &primary_law) {
    m_primary_law = primary_law;
    m_primary_law_isSet = true;
}

bool OAICrs0_Cases::is_primary_law_Set() const{
    return m_primary_law_isSet;
}

bool OAICrs0_Cases::is_primary_law_Valid() const{
    return m_primary_law_isValid;
}

QString OAICrs0_Cases::getPrimaryNaicsCode() const {
    return m_primary_naics_code;
}
void OAICrs0_Cases::setPrimaryNaicsCode(const QString &primary_naics_code) {
    m_primary_naics_code = primary_naics_code;
    m_primary_naics_code_isSet = true;
}

bool OAICrs0_Cases::is_primary_naics_code_Set() const{
    return m_primary_naics_code_isSet;
}

bool OAICrs0_Cases::is_primary_naics_code_Valid() const{
    return m_primary_naics_code_isValid;
}

QString OAICrs0_Cases::getPrimarySicCode() const {
    return m_primary_sic_code;
}
void OAICrs0_Cases::setPrimarySicCode(const QString &primary_sic_code) {
    m_primary_sic_code = primary_sic_code;
    m_primary_sic_code_isSet = true;
}

bool OAICrs0_Cases::is_primary_sic_code_Set() const{
    return m_primary_sic_code_isSet;
}

bool OAICrs0_Cases::is_primary_sic_code_Valid() const{
    return m_primary_sic_code_isValid;
}

QString OAICrs0_Cases::getPrimarySection() const {
    return m_primary_section;
}
void OAICrs0_Cases::setPrimarySection(const QString &primary_section) {
    m_primary_section = primary_section;
    m_primary_section_isSet = true;
}

bool OAICrs0_Cases::is_primary_section_Set() const{
    return m_primary_section_isSet;
}

bool OAICrs0_Cases::is_primary_section_Valid() const{
    return m_primary_section_isValid;
}

QString OAICrs0_Cases::getProsecutionSummaryId() const {
    return m_prosecution_summary_id;
}
void OAICrs0_Cases::setProsecutionSummaryId(const QString &prosecution_summary_id) {
    m_prosecution_summary_id = prosecution_summary_id;
    m_prosecution_summary_id_isSet = true;
}

bool OAICrs0_Cases::is_prosecution_summary_id_Set() const{
    return m_prosecution_summary_id_isSet;
}

bool OAICrs0_Cases::is_prosecution_summary_id_Valid() const{
    return m_prosecution_summary_id_isValid;
}

QString OAICrs0_Cases::getRcraFlag() const {
    return m_rcra_flag;
}
void OAICrs0_Cases::setRcraFlag(const QString &rcra_flag) {
    m_rcra_flag = rcra_flag;
    m_rcra_flag_isSet = true;
}

bool OAICrs0_Cases::is_rcra_flag_Set() const{
    return m_rcra_flag_isSet;
}

bool OAICrs0_Cases::is_rcra_flag_Valid() const{
    return m_rcra_flag_isValid;
}

QString OAICrs0_Cases::getSepCategories() const {
    return m_sep_categories;
}
void OAICrs0_Cases::setSepCategories(const QString &sep_categories) {
    m_sep_categories = sep_categories;
    m_sep_categories_isSet = true;
}

bool OAICrs0_Cases::is_sep_categories_Set() const{
    return m_sep_categories_isSet;
}

bool OAICrs0_Cases::is_sep_categories_Valid() const{
    return m_sep_categories_isValid;
}

QString OAICrs0_Cases::getSepCost() const {
    return m_sep_cost;
}
void OAICrs0_Cases::setSepCost(const QString &sep_cost) {
    m_sep_cost = sep_cost;
    m_sep_cost_isSet = true;
}

bool OAICrs0_Cases::is_sep_cost_Set() const{
    return m_sep_cost_isSet;
}

bool OAICrs0_Cases::is_sep_cost_Valid() const{
    return m_sep_cost_isValid;
}

QString OAICrs0_Cases::getSepTexts() const {
    return m_sep_texts;
}
void OAICrs0_Cases::setSepTexts(const QString &sep_texts) {
    m_sep_texts = sep_texts;
    m_sep_texts_isSet = true;
}

bool OAICrs0_Cases::is_sep_texts_Set() const{
    return m_sep_texts_isSet;
}

bool OAICrs0_Cases::is_sep_texts_Valid() const{
    return m_sep_texts_isValid;
}

QString OAICrs0_Cases::getSdwaFlag() const {
    return m_sdwa_flag;
}
void OAICrs0_Cases::setSdwaFlag(const QString &sdwa_flag) {
    m_sdwa_flag = sdwa_flag;
    m_sdwa_flag_isSet = true;
}

bool OAICrs0_Cases::is_sdwa_flag_Set() const{
    return m_sdwa_flag_isSet;
}

bool OAICrs0_Cases::is_sdwa_flag_Valid() const{
    return m_sdwa_flag_isValid;
}

QString OAICrs0_Cases::getSettlementCnt() const {
    return m_settlement_cnt;
}
void OAICrs0_Cases::setSettlementCnt(const QString &settlement_cnt) {
    m_settlement_cnt = settlement_cnt;
    m_settlement_cnt_isSet = true;
}

bool OAICrs0_Cases::is_settlement_cnt_Set() const{
    return m_settlement_cnt_isSet;
}

bool OAICrs0_Cases::is_settlement_cnt_Valid() const{
    return m_settlement_cnt_isValid;
}

QString OAICrs0_Cases::getSettlementDate() const {
    return m_settlement_date;
}
void OAICrs0_Cases::setSettlementDate(const QString &settlement_date) {
    m_settlement_date = settlement_date;
    m_settlement_date_isSet = true;
}

bool OAICrs0_Cases::is_settlement_date_Set() const{
    return m_settlement_date_isSet;
}

bool OAICrs0_Cases::is_settlement_date_Valid() const{
    return m_settlement_date_isValid;
}

QString OAICrs0_Cases::getStateLocPenaltyAmt() const {
    return m_state_loc_penalty_amt;
}
void OAICrs0_Cases::setStateLocPenaltyAmt(const QString &state_loc_penalty_amt) {
    m_state_loc_penalty_amt = state_loc_penalty_amt;
    m_state_loc_penalty_amt_isSet = true;
}

bool OAICrs0_Cases::is_state_loc_penalty_amt_Set() const{
    return m_state_loc_penalty_amt_isSet;
}

bool OAICrs0_Cases::is_state_loc_penalty_amt_Valid() const{
    return m_state_loc_penalty_amt_isValid;
}

QString OAICrs0_Cases::getTotalCompActionAmt() const {
    return m_total_comp_action_amt;
}
void OAICrs0_Cases::setTotalCompActionAmt(const QString &total_comp_action_amt) {
    m_total_comp_action_amt = total_comp_action_amt;
    m_total_comp_action_amt_isSet = true;
}

bool OAICrs0_Cases::is_total_comp_action_amt_Set() const{
    return m_total_comp_action_amt_isSet;
}

bool OAICrs0_Cases::is_total_comp_action_amt_Valid() const{
    return m_total_comp_action_amt_isValid;
}

QString OAICrs0_Cases::getTribalLandFlag() const {
    return m_tribal_land_flag;
}
void OAICrs0_Cases::setTribalLandFlag(const QString &tribal_land_flag) {
    m_tribal_land_flag = tribal_land_flag;
    m_tribal_land_flag_isSet = true;
}

bool OAICrs0_Cases::is_tribal_land_flag_Set() const{
    return m_tribal_land_flag_isSet;
}

bool OAICrs0_Cases::is_tribal_land_flag_Valid() const{
    return m_tribal_land_flag_isValid;
}

QString OAICrs0_Cases::getTscaFlag() const {
    return m_tsca_flag;
}
void OAICrs0_Cases::setTscaFlag(const QString &tsca_flag) {
    m_tsca_flag = tsca_flag;
    m_tsca_flag_isSet = true;
}

bool OAICrs0_Cases::is_tsca_flag_Set() const{
    return m_tsca_flag_isSet;
}

bool OAICrs0_Cases::is_tsca_flag_Valid() const{
    return m_tsca_flag_isValid;
}

bool OAICrs0_Cases::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_category_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_status_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cercla_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_civil_criminal_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_recovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_court_docket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doj_docket_nmbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_filed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_lodged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enf_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epcra_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifra_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_law_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_naics_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_sic_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prosecution_summary_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_texts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_loc_penalty_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comp_action_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tribal_land_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsca_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrs0_Cases::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_id_isValid && m_caa_flag_isValid && m_case_category_code_isValid && m_case_category_desc_isValid && m_case_name_isValid && m_case_number_isValid && m_case_status_code_isValid && m_case_status_desc_isValid && m_cercla_flag_isValid && m_civil_criminal_indicator_isValid && m_cost_recovery_isValid && m_court_docket_number_isValid && m_cwa_flag_isValid && m_doj_docket_nmbr_isValid && m_date_closed_isValid && m_date_filed_isValid && m_date_lodged_isValid && m_enf_outcome_isValid && m_epcra_flag_isValid && m_fed_penalty_isValid && m_federal_flag_isValid && m_fifra_flag_isValid && m_lead_isValid && m_max_score_isValid && m_primary_law_isValid && m_primary_naics_code_isValid && m_primary_sic_code_isValid && m_primary_section_isValid && m_prosecution_summary_id_isValid && m_rcra_flag_isValid && m_sep_categories_isValid && m_sep_cost_isValid && m_sep_texts_isValid && m_sdwa_flag_isValid && m_settlement_cnt_isValid && m_settlement_date_isValid && m_state_loc_penalty_amt_isValid && m_total_comp_action_amt_isValid && m_tribal_land_flag_isValid && m_tsca_flag_isValid && true;
}

} // namespace OpenAPI
