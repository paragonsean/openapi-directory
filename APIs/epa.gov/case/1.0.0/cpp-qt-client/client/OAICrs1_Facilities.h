/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrs1_Facilities.h
 *
 * This section provides detailed facility and address information on all of the facilities associated with the civil enforcement case.
 */

#ifndef OAICrs1_Facilities_H
#define OAICrs1_Facilities_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICrs1_Facilities : public OAIObject {
public:
    OAICrs1_Facilities();
    OAICrs1_Facilities(QString json);
    ~OAICrs1_Facilities() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFrsNumber() const;
    void setFrsNumber(const QString &frs_number);
    bool is_frs_number_Set() const;
    bool is_frs_number_Valid() const;

    QString getFacilityAddress() const;
    void setFacilityAddress(const QString &facility_address);
    bool is_facility_address_Set() const;
    bool is_facility_address_Valid() const;

    QString getFacilityCity() const;
    void setFacilityCity(const QString &facility_city);
    bool is_facility_city_Set() const;
    bool is_facility_city_Valid() const;

    QString getFacilityName() const;
    void setFacilityName(const QString &facility_name);
    bool is_facility_name_Set() const;
    bool is_facility_name_Valid() const;

    QString getFacilityState() const;
    void setFacilityState(const QString &facility_state);
    bool is_facility_state_Set() const;
    bool is_facility_state_Valid() const;

    QString getFacilityZip() const;
    void setFacilityZip(const QString &facility_zip);
    bool is_facility_zip_Set() const;
    bool is_facility_zip_Valid() const;

    QString getNaicsCodes() const;
    void setNaicsCodes(const QString &naics_codes);
    bool is_naics_codes_Set() const;
    bool is_naics_codes_Valid() const;

    QString getSicCodes() const;
    void setSicCodes(const QString &sic_codes);
    bool is_sic_codes_Set() const;
    bool is_sic_codes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_frs_number;
    bool m_frs_number_isSet;
    bool m_frs_number_isValid;

    QString m_facility_address;
    bool m_facility_address_isSet;
    bool m_facility_address_isValid;

    QString m_facility_city;
    bool m_facility_city_isSet;
    bool m_facility_city_isValid;

    QString m_facility_name;
    bool m_facility_name_isSet;
    bool m_facility_name_isValid;

    QString m_facility_state;
    bool m_facility_state_isSet;
    bool m_facility_state_isValid;

    QString m_facility_zip;
    bool m_facility_zip_isSet;
    bool m_facility_zip_isValid;

    QString m_naics_codes;
    bool m_naics_codes_isSet;
    bool m_naics_codes_isValid;

    QString m_sic_codes;
    bool m_sic_codes_isSet;
    bool m_sic_codes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrs1_Facilities)

#endif // OAICrs1_Facilities_H
