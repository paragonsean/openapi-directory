/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICaseEnforcementApi_H
#define OAI_OAICaseEnforcementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAI_case_rest_services_get_case_info_get_200_response.h"
#include "OAI_case_rest_services_get_case_report_get_200_response.h"
#include "OAI_case_rest_services_get_cases_from_facility_get_200_response.h"
#include "OAI_case_rest_services_get_cases_get_200_response.h"
#include "OAI_case_rest_services_get_crcase_report_get_200_response.h"
#include "OAI_case_rest_services_get_facilities_from_case_get_200_response.h"
#include "OAI_case_rest_services_get_map_get_200_response.h"
#include "OAI_case_rest_services_get_qid_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICaseEnforcementApi : public QObject {
    Q_OBJECT

public:
    OAICaseEnforcementApi(const int timeOut = 0);
    ~OAICaseEnforcementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_case_category QString [optional]
    * @param[in]  p_case_status QString [optional]
    * @param[in]  p_milestone QString [optional]
    * @param[in]  p_from_date QString [optional]
    * @param[in]  p_to_date QString [optional]
    * @param[in]  p_milestone_fy QString [optional]
    * @param[in]  p_name QString [optional]
    * @param[in]  p_name_type QString [optional]
    * @param[in]  p_case_number QString [optional]
    * @param[in]  p_docket_number QString [optional]
    * @param[in]  p_court_docket_number QString [optional]
    * @param[in]  p_activity_number QString [optional]
    * @param[in]  p_case_lead QString [optional]
    * @param[in]  p_case_sens_flg QString [optional]
    * @param[in]  p_region QString [optional]
    * @param[in]  p_state QString [optional]
    * @param[in]  p_district QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_sic_ao_naics QString [optional]
    * @param[in]  p_sic_primary_flg QString [optional]
    * @param[in]  p_sic_frs_flg QString [optional]
    * @param[in]  p_naics QString [optional]
    * @param[in]  p_naics_primary_flg QString [optional]
    * @param[in]  p_naics_frs_flg QString [optional]
    * @param[in]  p_enf_type QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_cp_citation QString [optional]
    * @param[in]  p_rank_order QString [optional]
    * @param[in]  p_enf_program QString [optional]
    * @param[in]  p_violation QString [optional]
    * @param[in]  p_priority_area QString [optional]
    * @param[in]  p_priority_area_desc QString [optional]
    * @param[in]  p_tribal QString [optional]
    * @param[in]  p_oeca_core QString [optional]
    * @param[in]  p_multimedia QString [optional]
    * @param[in]  p_fed_case QString [optional]
    * @param[in]  p_activity_contact QString [optional]
    * @param[in]  p_role QString [optional]
    * @param[in]  p_fed_penalty QString [optional]
    * @param[in]  p_total_fed_penalty QString [optional]
    * @param[in]  p_cost_recovery QString [optional]
    * @param[in]  p_total_cost_recovery QString [optional]
    * @param[in]  p_complying_actions QString [optional]
    * @param[in]  p_comp_act_val QString [optional]
    * @param[in]  p_total_comp_act_val QString [optional]
    * @param[in]  p_sep_cats QString [optional]
    * @param[in]  p_sep_val QString [optional]
    * @param[in]  p_total_sep_val QString [optional]
    * @param[in]  p_lodged_date QString [optional]
    * @param[in]  p_entered_date QString [optional]
    * @param[in]  p_facility_id QString [optional]
    * @param[in]  p_fac_city QString [optional]
    * @param[in]  p_fac_zip QString [optional]
    * @param[in]  p_fac_county QString [optional]
    * @param[in]  p_case_summary QString [optional]
    * @param[in]  p_case_summary_type QString [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_voluntary QString [optional]
    * @param[in]  p_fed_indicator QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_civil_criminal_indicator QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  mapset QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    * @param[in]  p_ocmap_fy QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_has_map QString [optional]
    */
    virtual void caseRestServicesGetCaseInfoGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_court_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_lead = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cp_citation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rank_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_program = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tribal = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oeca_core = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_multimedia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_case = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_complying_actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_cats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lodged_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_entered_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_voluntary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &mapset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_has_map = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_case_category QString [optional]
    * @param[in]  p_case_status QString [optional]
    * @param[in]  p_milestone QString [optional]
    * @param[in]  p_from_date QString [optional]
    * @param[in]  p_to_date QString [optional]
    * @param[in]  p_milestone_fy QString [optional]
    * @param[in]  p_name QString [optional]
    * @param[in]  p_name_type QString [optional]
    * @param[in]  p_case_number QString [optional]
    * @param[in]  p_docket_number QString [optional]
    * @param[in]  p_court_docket_number QString [optional]
    * @param[in]  p_activity_number QString [optional]
    * @param[in]  p_case_lead QString [optional]
    * @param[in]  p_case_sens_flg QString [optional]
    * @param[in]  p_region QString [optional]
    * @param[in]  p_state QString [optional]
    * @param[in]  p_district QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_sic_ao_naics QString [optional]
    * @param[in]  p_sic_primary_flg QString [optional]
    * @param[in]  p_sic_frs_flg QString [optional]
    * @param[in]  p_naics QString [optional]
    * @param[in]  p_naics_primary_flg QString [optional]
    * @param[in]  p_naics_frs_flg QString [optional]
    * @param[in]  p_enf_type QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_cp_citation QString [optional]
    * @param[in]  p_rank_order QString [optional]
    * @param[in]  p_enf_program QString [optional]
    * @param[in]  p_violation QString [optional]
    * @param[in]  p_priority_area QString [optional]
    * @param[in]  p_priority_area_desc QString [optional]
    * @param[in]  p_tribal QString [optional]
    * @param[in]  p_oeca_core QString [optional]
    * @param[in]  p_multimedia QString [optional]
    * @param[in]  p_fed_case QString [optional]
    * @param[in]  p_activity_contact QString [optional]
    * @param[in]  p_role QString [optional]
    * @param[in]  p_fed_penalty QString [optional]
    * @param[in]  p_total_fed_penalty QString [optional]
    * @param[in]  p_cost_recovery QString [optional]
    * @param[in]  p_total_cost_recovery QString [optional]
    * @param[in]  p_complying_actions QString [optional]
    * @param[in]  p_comp_act_val QString [optional]
    * @param[in]  p_total_comp_act_val QString [optional]
    * @param[in]  p_sep_cats QString [optional]
    * @param[in]  p_sep_val QString [optional]
    * @param[in]  p_total_sep_val QString [optional]
    * @param[in]  p_lodged_date QString [optional]
    * @param[in]  p_entered_date QString [optional]
    * @param[in]  p_facility_id QString [optional]
    * @param[in]  p_fac_city QString [optional]
    * @param[in]  p_fac_zip QString [optional]
    * @param[in]  p_fac_county QString [optional]
    * @param[in]  p_case_summary QString [optional]
    * @param[in]  p_case_summary_type QString [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_voluntary QString [optional]
    * @param[in]  p_fed_indicator QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_civil_criminal_indicator QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  mapset QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_pretty_print double [optional]
    * @param[in]  p_ocmap_fy QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_has_map QString [optional]
    */
    virtual void caseRestServicesGetCaseInfoPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_court_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_lead = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cp_citation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rank_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_program = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tribal = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oeca_core = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_multimedia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_case = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_complying_actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_cats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lodged_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_entered_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_voluntary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &mapset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_pretty_print = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_has_map = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetCaseReportGet(const ::OpenAPI::OptionalParam<QString> &p_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetCaseReportPost(const ::OpenAPI::OptionalParam<QString> &p_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetCasesFromFacilityGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetCasesFromFacilityPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_case_category QString [optional]
    * @param[in]  p_case_status QString [optional]
    * @param[in]  p_violation QString [optional]
    * @param[in]  p_milestone QString [optional]
    * @param[in]  p_from_date QString [optional]
    * @param[in]  p_to_date QString [optional]
    * @param[in]  p_milestone_fy QString [optional]
    * @param[in]  p_name QString [optional]
    * @param[in]  p_name_type QString [optional]
    * @param[in]  p_case_number QString [optional]
    * @param[in]  p_docket_number QString [optional]
    * @param[in]  p_court_docket_number QString [optional]
    * @param[in]  p_activity_number QString [optional]
    * @param[in]  p_case_lead QString [optional]
    * @param[in]  p_case_sens_flg QString [optional]
    * @param[in]  p_region QString [optional]
    * @param[in]  p_state QString [optional]
    * @param[in]  p_district QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_sic_ao_naics QString [optional]
    * @param[in]  p_sic_primary_flg QString [optional]
    * @param[in]  p_sic_frs_flg QString [optional]
    * @param[in]  p_naics QString [optional]
    * @param[in]  p_naics_primary_flg QString [optional]
    * @param[in]  p_naics_frs_flg QString [optional]
    * @param[in]  p_enf_type QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_cp_citation QString [optional]
    * @param[in]  p_rank_order QString [optional]
    * @param[in]  p_enf_program QString [optional]
    * @param[in]  p_priority_area QString [optional]
    * @param[in]  p_priority_area_desc QString [optional]
    * @param[in]  p_tribal QString [optional]
    * @param[in]  p_oeca_core QString [optional]
    * @param[in]  p_multimedia QString [optional]
    * @param[in]  p_fed_case QString [optional]
    * @param[in]  p_activity_contact QString [optional]
    * @param[in]  p_role QString [optional]
    * @param[in]  p_fed_penalty QString [optional]
    * @param[in]  p_total_fed_penalty QString [optional]
    * @param[in]  p_cost_recovery QString [optional]
    * @param[in]  p_total_cost_recovery QString [optional]
    * @param[in]  p_complying_actions QString [optional]
    * @param[in]  p_comp_act_val QString [optional]
    * @param[in]  p_total_comp_act_val QString [optional]
    * @param[in]  p_sep_cats QString [optional]
    * @param[in]  p_sep_val QString [optional]
    * @param[in]  p_total_sep_val QString [optional]
    * @param[in]  p_lodged_date QString [optional]
    * @param[in]  p_entered_date QString [optional]
    * @param[in]  p_facility_id QString [optional]
    * @param[in]  p_fac_city QString [optional]
    * @param[in]  p_fac_zip QString [optional]
    * @param[in]  p_fac_county QString [optional]
    * @param[in]  p_case_summary QString [optional]
    * @param[in]  p_case_summary_type QString [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_voluntary QString [optional]
    * @param[in]  p_fed_indicator QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_civil_criminal_indicator QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_ocmap_fy QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_has_map QString [optional]
    */
    virtual void caseRestServicesGetCasesGet(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_court_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_lead = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cp_citation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rank_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_program = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tribal = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oeca_core = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_multimedia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_case = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_complying_actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_cats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lodged_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_entered_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_voluntary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_has_map = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output QString [optional]
    * @param[in]  p_case_category QString [optional]
    * @param[in]  p_case_status QString [optional]
    * @param[in]  p_milestone QString [optional]
    * @param[in]  p_from_date QString [optional]
    * @param[in]  p_to_date QString [optional]
    * @param[in]  p_milestone_fy QString [optional]
    * @param[in]  p_name QString [optional]
    * @param[in]  p_name_type QString [optional]
    * @param[in]  p_case_number QString [optional]
    * @param[in]  p_docket_number QString [optional]
    * @param[in]  p_court_docket_number QString [optional]
    * @param[in]  p_activity_number QString [optional]
    * @param[in]  p_case_lead QString [optional]
    * @param[in]  p_case_sens_flg QString [optional]
    * @param[in]  p_region QString [optional]
    * @param[in]  p_state QString [optional]
    * @param[in]  p_district QString [optional]
    * @param[in]  p_sic QString [optional]
    * @param[in]  p_sic_ao_naics QString [optional]
    * @param[in]  p_sic_primary_flg QString [optional]
    * @param[in]  p_sic_frs_flg QString [optional]
    * @param[in]  p_naics QString [optional]
    * @param[in]  p_naics_primary_flg QString [optional]
    * @param[in]  p_naics_frs_flg QString [optional]
    * @param[in]  p_enf_type QString [optional]
    * @param[in]  p_law QString [optional]
    * @param[in]  p_section QString [optional]
    * @param[in]  p_cp_citation QString [optional]
    * @param[in]  p_rank_order QString [optional]
    * @param[in]  p_enf_program QString [optional]
    * @param[in]  p_violation QString [optional]
    * @param[in]  p_priority_area QString [optional]
    * @param[in]  p_priority_area_desc QString [optional]
    * @param[in]  p_tribal QString [optional]
    * @param[in]  p_oeca_core QString [optional]
    * @param[in]  p_multimedia QString [optional]
    * @param[in]  p_fed_case QString [optional]
    * @param[in]  p_activity_contact QString [optional]
    * @param[in]  p_role QString [optional]
    * @param[in]  p_fed_penalty QString [optional]
    * @param[in]  p_total_fed_penalty QString [optional]
    * @param[in]  p_cost_recovery QString [optional]
    * @param[in]  p_total_cost_recovery QString [optional]
    * @param[in]  p_complying_actions QString [optional]
    * @param[in]  p_comp_act_val QString [optional]
    * @param[in]  p_total_comp_act_val QString [optional]
    * @param[in]  p_sep_cats QString [optional]
    * @param[in]  p_sep_val QString [optional]
    * @param[in]  p_total_sep_val QString [optional]
    * @param[in]  p_lodged_date QString [optional]
    * @param[in]  p_entered_date QString [optional]
    * @param[in]  p_facility_id QString [optional]
    * @param[in]  p_fac_city QString [optional]
    * @param[in]  p_fac_zip QString [optional]
    * @param[in]  p_fac_county QString [optional]
    * @param[in]  p_case_summary QString [optional]
    * @param[in]  p_case_summary_type QString [optional]
    * @param[in]  p_usmex QString [optional]
    * @param[in]  p_c1lat double [optional]
    * @param[in]  p_c1lon double [optional]
    * @param[in]  p_c2lat double [optional]
    * @param[in]  p_c2lon double [optional]
    * @param[in]  p_voluntary QString [optional]
    * @param[in]  p_fed_indicator QString [optional]
    * @param[in]  p_fntype QString [optional]
    * @param[in]  p_civil_criminal_indicator QString [optional]
    * @param[in]  queryset double [optional]
    * @param[in]  responseset double [optional]
    * @param[in]  maplist QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  qcolumns QString [optional]
    * @param[in]  p_ocmap_fy QString [optional]
    * @param[in]  p_qs QString [optional]
    * @param[in]  p_has_map QString [optional]
    */
    virtual void caseRestServicesGetCasesPost(const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_milestone_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_name_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_court_docket_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_lead = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_law = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cp_citation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_rank_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_enf_program = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_violation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_tribal = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_oeca_core = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_multimedia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_case = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_activity_contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_complying_actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_cats = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_total_sep_val = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_lodged_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_entered_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fac_county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_case_summary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_usmex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &p_c1lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c1lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &p_c2lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &p_voluntary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fed_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_fntype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &queryset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &responseset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &maplist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_qs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p_has_map = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  mapset QString [optional]
    */
    virtual void caseRestServicesGetCrcaseReportGet(const ::OpenAPI::OptionalParam<QString> &p_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mapset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [optional]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetCrcaseReportPost(const ::OpenAPI::OptionalParam<QString> &p_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void caseRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void caseRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetFacilitiesFromCaseGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  p_id QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void caseRestServicesGetFacilitiesFromCasePost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    */
    virtual void caseRestServicesGetMapGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  tablelist QString [optional]
    * @param[in]  c1_lat double [optional]
    * @param[in]  c1_long double [optional]
    * @param[in]  c2_lat double [optional]
    * @param[in]  c2_long double [optional]
    * @param[in]  mapset QString [optional]
    */
    virtual void caseRestServicesGetMapPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tablelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &c1_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c1_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &c2_long = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &mapset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void caseRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qid QString [required]
    * @param[in]  output QString [optional]
    * @param[in]  pageno double [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  newsort double [optional]
    * @param[in]  descending QString [optional]
    * @param[in]  qcolumns QString [optional]
    */
    virtual void caseRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &pageno = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &newsort = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &descending = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qcolumns = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void caseRestServicesGetCaseInfoGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCaseInfoPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCaseReportGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCaseReportPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCasesFromFacilityGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCasesFromFacilityPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCasesGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCasesPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCrcaseReportGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetCrcaseReportPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetFacilitiesFromCaseGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetFacilitiesFromCasePostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker);
    void caseRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void caseRestServicesGetCaseInfoGetSignal(OAI_case_rest_services_get_case_info_get_200_response summary);
    void caseRestServicesGetCaseInfoPostSignal(OAI_case_rest_services_get_case_info_get_200_response summary);
    void caseRestServicesGetCaseReportGetSignal(OAI_case_rest_services_get_case_report_get_200_response summary);
    void caseRestServicesGetCaseReportPostSignal(OAI_case_rest_services_get_case_report_get_200_response summary);
    void caseRestServicesGetCasesFromFacilityGetSignal(OAI_case_rest_services_get_cases_from_facility_get_200_response summary);
    void caseRestServicesGetCasesFromFacilityPostSignal(OAI_case_rest_services_get_cases_from_facility_get_200_response summary);
    void caseRestServicesGetCasesGetSignal(OAI_case_rest_services_get_cases_get_200_response summary);
    void caseRestServicesGetCasesPostSignal(OAI_case_rest_services_get_cases_get_200_response summary);
    void caseRestServicesGetCrcaseReportGetSignal(OAI_case_rest_services_get_crcase_report_get_200_response summary);
    void caseRestServicesGetCrcaseReportPostSignal(OAI_case_rest_services_get_crcase_report_get_200_response summary);
    void caseRestServicesGetDownloadGetSignal(OAIHttpFileElement summary);
    void caseRestServicesGetDownloadPostSignal(OAIHttpFileElement summary);
    void caseRestServicesGetFacilitiesFromCaseGetSignal(OAI_case_rest_services_get_facilities_from_case_get_200_response summary);
    void caseRestServicesGetFacilitiesFromCasePostSignal(OAI_case_rest_services_get_facilities_from_case_get_200_response summary);
    void caseRestServicesGetMapGetSignal(OAI_case_rest_services_get_map_get_200_response summary);
    void caseRestServicesGetMapPostSignal(OAI_case_rest_services_get_map_get_200_response summary);
    void caseRestServicesGetQidGetSignal(OAI_case_rest_services_get_qid_get_200_response summary);
    void caseRestServicesGetQidPostSignal(OAI_case_rest_services_get_qid_get_200_response summary);


    void caseRestServicesGetCaseInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_case_info_get_200_response summary);
    void caseRestServicesGetCaseInfoPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_case_info_get_200_response summary);
    void caseRestServicesGetCaseReportGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_case_report_get_200_response summary);
    void caseRestServicesGetCaseReportPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_case_report_get_200_response summary);
    void caseRestServicesGetCasesFromFacilityGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_cases_from_facility_get_200_response summary);
    void caseRestServicesGetCasesFromFacilityPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_cases_from_facility_get_200_response summary);
    void caseRestServicesGetCasesGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_cases_get_200_response summary);
    void caseRestServicesGetCasesPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_cases_get_200_response summary);
    void caseRestServicesGetCrcaseReportGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_crcase_report_get_200_response summary);
    void caseRestServicesGetCrcaseReportPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_crcase_report_get_200_response summary);
    void caseRestServicesGetDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void caseRestServicesGetDownloadPostSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void caseRestServicesGetFacilitiesFromCaseGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_facilities_from_case_get_200_response summary);
    void caseRestServicesGetFacilitiesFromCasePostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_facilities_from_case_get_200_response summary);
    void caseRestServicesGetMapGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_map_get_200_response summary);
    void caseRestServicesGetMapPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_map_get_200_response summary);
    void caseRestServicesGetQidGetSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_qid_get_200_response summary);
    void caseRestServicesGetQidPostSignalFull(OAIHttpRequestWorker *worker, OAI_case_rest_services_get_qid_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseInfoGetSignalError() instead")
    void caseRestServicesGetCaseInfoGetSignalE(OAI_case_rest_services_get_case_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseInfoGetSignalError(OAI_case_rest_services_get_case_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseInfoPostSignalError() instead")
    void caseRestServicesGetCaseInfoPostSignalE(OAI_case_rest_services_get_case_info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseInfoPostSignalError(OAI_case_rest_services_get_case_info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseReportGetSignalError() instead")
    void caseRestServicesGetCaseReportGetSignalE(OAI_case_rest_services_get_case_report_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseReportGetSignalError(OAI_case_rest_services_get_case_report_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseReportPostSignalError() instead")
    void caseRestServicesGetCaseReportPostSignalE(OAI_case_rest_services_get_case_report_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseReportPostSignalError(OAI_case_rest_services_get_case_report_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesFromFacilityGetSignalError() instead")
    void caseRestServicesGetCasesFromFacilityGetSignalE(OAI_case_rest_services_get_cases_from_facility_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesFromFacilityGetSignalError(OAI_case_rest_services_get_cases_from_facility_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesFromFacilityPostSignalError() instead")
    void caseRestServicesGetCasesFromFacilityPostSignalE(OAI_case_rest_services_get_cases_from_facility_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesFromFacilityPostSignalError(OAI_case_rest_services_get_cases_from_facility_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesGetSignalError() instead")
    void caseRestServicesGetCasesGetSignalE(OAI_case_rest_services_get_cases_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesGetSignalError(OAI_case_rest_services_get_cases_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesPostSignalError() instead")
    void caseRestServicesGetCasesPostSignalE(OAI_case_rest_services_get_cases_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesPostSignalError(OAI_case_rest_services_get_cases_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCrcaseReportGetSignalError() instead")
    void caseRestServicesGetCrcaseReportGetSignalE(OAI_case_rest_services_get_crcase_report_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCrcaseReportGetSignalError(OAI_case_rest_services_get_crcase_report_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCrcaseReportPostSignalError() instead")
    void caseRestServicesGetCrcaseReportPostSignalE(OAI_case_rest_services_get_crcase_report_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCrcaseReportPostSignalError(OAI_case_rest_services_get_crcase_report_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetDownloadGetSignalError() instead")
    void caseRestServicesGetDownloadGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetDownloadGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetDownloadPostSignalError() instead")
    void caseRestServicesGetDownloadPostSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetDownloadPostSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetFacilitiesFromCaseGetSignalError() instead")
    void caseRestServicesGetFacilitiesFromCaseGetSignalE(OAI_case_rest_services_get_facilities_from_case_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetFacilitiesFromCaseGetSignalError(OAI_case_rest_services_get_facilities_from_case_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetFacilitiesFromCasePostSignalError() instead")
    void caseRestServicesGetFacilitiesFromCasePostSignalE(OAI_case_rest_services_get_facilities_from_case_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetFacilitiesFromCasePostSignalError(OAI_case_rest_services_get_facilities_from_case_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetMapGetSignalError() instead")
    void caseRestServicesGetMapGetSignalE(OAI_case_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetMapGetSignalError(OAI_case_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetMapPostSignalError() instead")
    void caseRestServicesGetMapPostSignalE(OAI_case_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetMapPostSignalError(OAI_case_rest_services_get_map_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetQidGetSignalError() instead")
    void caseRestServicesGetQidGetSignalE(OAI_case_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetQidGetSignalError(OAI_case_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetQidPostSignalError() instead")
    void caseRestServicesGetQidPostSignalE(OAI_case_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetQidPostSignalError(OAI_case_rest_services_get_qid_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseInfoGetSignalErrorFull() instead")
    void caseRestServicesGetCaseInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseInfoPostSignalErrorFull() instead")
    void caseRestServicesGetCaseInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseReportGetSignalErrorFull() instead")
    void caseRestServicesGetCaseReportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseReportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCaseReportPostSignalErrorFull() instead")
    void caseRestServicesGetCaseReportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCaseReportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesFromFacilityGetSignalErrorFull() instead")
    void caseRestServicesGetCasesFromFacilityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesFromFacilityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesFromFacilityPostSignalErrorFull() instead")
    void caseRestServicesGetCasesFromFacilityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesFromFacilityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesGetSignalErrorFull() instead")
    void caseRestServicesGetCasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCasesPostSignalErrorFull() instead")
    void caseRestServicesGetCasesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCasesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCrcaseReportGetSignalErrorFull() instead")
    void caseRestServicesGetCrcaseReportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCrcaseReportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetCrcaseReportPostSignalErrorFull() instead")
    void caseRestServicesGetCrcaseReportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetCrcaseReportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetDownloadGetSignalErrorFull() instead")
    void caseRestServicesGetDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetDownloadPostSignalErrorFull() instead")
    void caseRestServicesGetDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetFacilitiesFromCaseGetSignalErrorFull() instead")
    void caseRestServicesGetFacilitiesFromCaseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetFacilitiesFromCaseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetFacilitiesFromCasePostSignalErrorFull() instead")
    void caseRestServicesGetFacilitiesFromCasePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetFacilitiesFromCasePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetMapGetSignalErrorFull() instead")
    void caseRestServicesGetMapGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetMapGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetMapPostSignalErrorFull() instead")
    void caseRestServicesGetMapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetMapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetQidGetSignalErrorFull() instead")
    void caseRestServicesGetQidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetQidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use caseRestServicesGetQidPostSignalErrorFull() instead")
    void caseRestServicesGetQidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void caseRestServicesGetQidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
