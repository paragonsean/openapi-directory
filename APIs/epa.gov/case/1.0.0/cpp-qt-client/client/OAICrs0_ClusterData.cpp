/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrs0_ClusterData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrs0_ClusterData::OAICrs0_ClusterData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrs0_ClusterData::OAICrs0_ClusterData() {
    this->initializeModel();
}

OAICrs0_ClusterData::~OAICrs0_ClusterData() {}

void OAICrs0_ClusterData::initializeModel() {

    m_afr_rows_isSet = false;
    m_afr_rows_isValid = false;

    m_caa_rows_isSet = false;
    m_caa_rows_isValid = false;

    m_cercla_rows_isSet = false;
    m_cercla_rows_isValid = false;

    m_cwa_rows_isSet = false;
    m_cwa_rows_isValid = false;

    m_cluster_count_isSet = false;
    m_cluster_count_isValid = false;

    m_cluster_icon_isSet = false;
    m_cluster_icon_isValid = false;

    m_cluster_latitude_isSet = false;
    m_cluster_latitude_isValid = false;

    m_cluster_longitude_isSet = false;
    m_cluster_longitude_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_cluster_value_isSet = false;
    m_cluster_value_isValid = false;

    m_criminal_rows_isSet = false;
    m_criminal_rows_isValid = false;

    m_epcra_rows_isSet = false;
    m_epcra_rows_isValid = false;

    m_fifra_rows_isSet = false;
    m_fifra_rows_isValid = false;

    m_fed_pen_rows_isSet = false;
    m_fed_pen_rows_isValid = false;

    m_federal_rows_isSet = false;
    m_federal_rows_isValid = false;

    m_jdc_rows_isSet = false;
    m_jdc_rows_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_rcra_rows_isSet = false;
    m_rcra_rows_isValid = false;

    m_sdwa_rows_isSet = false;
    m_sdwa_rows_isValid = false;

    m_sep_rows_isSet = false;
    m_sep_rows_isValid = false;

    m_tsca_rows_isSet = false;
    m_tsca_rows_isValid = false;
}

void OAICrs0_ClusterData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrs0_ClusterData::fromJsonObject(QJsonObject json) {

    m_afr_rows_isValid = ::OpenAPI::fromJsonValue(m_afr_rows, json[QString("AFRRows")]);
    m_afr_rows_isSet = !json[QString("AFRRows")].isNull() && m_afr_rows_isValid;

    m_caa_rows_isValid = ::OpenAPI::fromJsonValue(m_caa_rows, json[QString("CAARows")]);
    m_caa_rows_isSet = !json[QString("CAARows")].isNull() && m_caa_rows_isValid;

    m_cercla_rows_isValid = ::OpenAPI::fromJsonValue(m_cercla_rows, json[QString("CERCLARows")]);
    m_cercla_rows_isSet = !json[QString("CERCLARows")].isNull() && m_cercla_rows_isValid;

    m_cwa_rows_isValid = ::OpenAPI::fromJsonValue(m_cwa_rows, json[QString("CWARows")]);
    m_cwa_rows_isSet = !json[QString("CWARows")].isNull() && m_cwa_rows_isValid;

    m_cluster_count_isValid = ::OpenAPI::fromJsonValue(m_cluster_count, json[QString("ClusterCount")]);
    m_cluster_count_isSet = !json[QString("ClusterCount")].isNull() && m_cluster_count_isValid;

    m_cluster_icon_isValid = ::OpenAPI::fromJsonValue(m_cluster_icon, json[QString("ClusterIcon")]);
    m_cluster_icon_isSet = !json[QString("ClusterIcon")].isNull() && m_cluster_icon_isValid;

    m_cluster_latitude_isValid = ::OpenAPI::fromJsonValue(m_cluster_latitude, json[QString("ClusterLatitude")]);
    m_cluster_latitude_isSet = !json[QString("ClusterLatitude")].isNull() && m_cluster_latitude_isValid;

    m_cluster_longitude_isValid = ::OpenAPI::fromJsonValue(m_cluster_longitude, json[QString("ClusterLongitude")]);
    m_cluster_longitude_isSet = !json[QString("ClusterLongitude")].isNull() && m_cluster_longitude_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_cluster_value_isValid = ::OpenAPI::fromJsonValue(m_cluster_value, json[QString("ClusterValue")]);
    m_cluster_value_isSet = !json[QString("ClusterValue")].isNull() && m_cluster_value_isValid;

    m_criminal_rows_isValid = ::OpenAPI::fromJsonValue(m_criminal_rows, json[QString("CriminalRows")]);
    m_criminal_rows_isSet = !json[QString("CriminalRows")].isNull() && m_criminal_rows_isValid;

    m_epcra_rows_isValid = ::OpenAPI::fromJsonValue(m_epcra_rows, json[QString("EPCRARows")]);
    m_epcra_rows_isSet = !json[QString("EPCRARows")].isNull() && m_epcra_rows_isValid;

    m_fifra_rows_isValid = ::OpenAPI::fromJsonValue(m_fifra_rows, json[QString("FIFRARows")]);
    m_fifra_rows_isSet = !json[QString("FIFRARows")].isNull() && m_fifra_rows_isValid;

    m_fed_pen_rows_isValid = ::OpenAPI::fromJsonValue(m_fed_pen_rows, json[QString("FedPenRows")]);
    m_fed_pen_rows_isSet = !json[QString("FedPenRows")].isNull() && m_fed_pen_rows_isValid;

    m_federal_rows_isValid = ::OpenAPI::fromJsonValue(m_federal_rows, json[QString("FederalRows")]);
    m_federal_rows_isSet = !json[QString("FederalRows")].isNull() && m_federal_rows_isValid;

    m_jdc_rows_isValid = ::OpenAPI::fromJsonValue(m_jdc_rows, json[QString("JDCRows")]);
    m_jdc_rows_isSet = !json[QString("JDCRows")].isNull() && m_jdc_rows_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("ObjectId")]);
    m_object_id_isSet = !json[QString("ObjectId")].isNull() && m_object_id_isValid;

    m_rcra_rows_isValid = ::OpenAPI::fromJsonValue(m_rcra_rows, json[QString("RCRARows")]);
    m_rcra_rows_isSet = !json[QString("RCRARows")].isNull() && m_rcra_rows_isValid;

    m_sdwa_rows_isValid = ::OpenAPI::fromJsonValue(m_sdwa_rows, json[QString("SDWARows")]);
    m_sdwa_rows_isSet = !json[QString("SDWARows")].isNull() && m_sdwa_rows_isValid;

    m_sep_rows_isValid = ::OpenAPI::fromJsonValue(m_sep_rows, json[QString("SEPRows")]);
    m_sep_rows_isSet = !json[QString("SEPRows")].isNull() && m_sep_rows_isValid;

    m_tsca_rows_isValid = ::OpenAPI::fromJsonValue(m_tsca_rows, json[QString("TSCARows")]);
    m_tsca_rows_isSet = !json[QString("TSCARows")].isNull() && m_tsca_rows_isValid;
}

QString OAICrs0_ClusterData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrs0_ClusterData::asJsonObject() const {
    QJsonObject obj;
    if (m_afr_rows_isSet) {
        obj.insert(QString("AFRRows"), ::OpenAPI::toJsonValue(m_afr_rows));
    }
    if (m_caa_rows_isSet) {
        obj.insert(QString("CAARows"), ::OpenAPI::toJsonValue(m_caa_rows));
    }
    if (m_cercla_rows_isSet) {
        obj.insert(QString("CERCLARows"), ::OpenAPI::toJsonValue(m_cercla_rows));
    }
    if (m_cwa_rows_isSet) {
        obj.insert(QString("CWARows"), ::OpenAPI::toJsonValue(m_cwa_rows));
    }
    if (m_cluster_count_isSet) {
        obj.insert(QString("ClusterCount"), ::OpenAPI::toJsonValue(m_cluster_count));
    }
    if (m_cluster_icon_isSet) {
        obj.insert(QString("ClusterIcon"), ::OpenAPI::toJsonValue(m_cluster_icon));
    }
    if (m_cluster_latitude_isSet) {
        obj.insert(QString("ClusterLatitude"), ::OpenAPI::toJsonValue(m_cluster_latitude));
    }
    if (m_cluster_longitude_isSet) {
        obj.insert(QString("ClusterLongitude"), ::OpenAPI::toJsonValue(m_cluster_longitude));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_cluster_value_isSet) {
        obj.insert(QString("ClusterValue"), ::OpenAPI::toJsonValue(m_cluster_value));
    }
    if (m_criminal_rows_isSet) {
        obj.insert(QString("CriminalRows"), ::OpenAPI::toJsonValue(m_criminal_rows));
    }
    if (m_epcra_rows_isSet) {
        obj.insert(QString("EPCRARows"), ::OpenAPI::toJsonValue(m_epcra_rows));
    }
    if (m_fifra_rows_isSet) {
        obj.insert(QString("FIFRARows"), ::OpenAPI::toJsonValue(m_fifra_rows));
    }
    if (m_fed_pen_rows_isSet) {
        obj.insert(QString("FedPenRows"), ::OpenAPI::toJsonValue(m_fed_pen_rows));
    }
    if (m_federal_rows_isSet) {
        obj.insert(QString("FederalRows"), ::OpenAPI::toJsonValue(m_federal_rows));
    }
    if (m_jdc_rows_isSet) {
        obj.insert(QString("JDCRows"), ::OpenAPI::toJsonValue(m_jdc_rows));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("ObjectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_rcra_rows_isSet) {
        obj.insert(QString("RCRARows"), ::OpenAPI::toJsonValue(m_rcra_rows));
    }
    if (m_sdwa_rows_isSet) {
        obj.insert(QString("SDWARows"), ::OpenAPI::toJsonValue(m_sdwa_rows));
    }
    if (m_sep_rows_isSet) {
        obj.insert(QString("SEPRows"), ::OpenAPI::toJsonValue(m_sep_rows));
    }
    if (m_tsca_rows_isSet) {
        obj.insert(QString("TSCARows"), ::OpenAPI::toJsonValue(m_tsca_rows));
    }
    return obj;
}

QString OAICrs0_ClusterData::getAfrRows() const {
    return m_afr_rows;
}
void OAICrs0_ClusterData::setAfrRows(const QString &afr_rows) {
    m_afr_rows = afr_rows;
    m_afr_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_afr_rows_Set() const{
    return m_afr_rows_isSet;
}

bool OAICrs0_ClusterData::is_afr_rows_Valid() const{
    return m_afr_rows_isValid;
}

QString OAICrs0_ClusterData::getCaaRows() const {
    return m_caa_rows;
}
void OAICrs0_ClusterData::setCaaRows(const QString &caa_rows) {
    m_caa_rows = caa_rows;
    m_caa_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_caa_rows_Set() const{
    return m_caa_rows_isSet;
}

bool OAICrs0_ClusterData::is_caa_rows_Valid() const{
    return m_caa_rows_isValid;
}

QString OAICrs0_ClusterData::getCerclaRows() const {
    return m_cercla_rows;
}
void OAICrs0_ClusterData::setCerclaRows(const QString &cercla_rows) {
    m_cercla_rows = cercla_rows;
    m_cercla_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_cercla_rows_Set() const{
    return m_cercla_rows_isSet;
}

bool OAICrs0_ClusterData::is_cercla_rows_Valid() const{
    return m_cercla_rows_isValid;
}

QString OAICrs0_ClusterData::getCwaRows() const {
    return m_cwa_rows;
}
void OAICrs0_ClusterData::setCwaRows(const QString &cwa_rows) {
    m_cwa_rows = cwa_rows;
    m_cwa_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_cwa_rows_Set() const{
    return m_cwa_rows_isSet;
}

bool OAICrs0_ClusterData::is_cwa_rows_Valid() const{
    return m_cwa_rows_isValid;
}

QString OAICrs0_ClusterData::getClusterCount() const {
    return m_cluster_count;
}
void OAICrs0_ClusterData::setClusterCount(const QString &cluster_count) {
    m_cluster_count = cluster_count;
    m_cluster_count_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_count_Set() const{
    return m_cluster_count_isSet;
}

bool OAICrs0_ClusterData::is_cluster_count_Valid() const{
    return m_cluster_count_isValid;
}

QString OAICrs0_ClusterData::getClusterIcon() const {
    return m_cluster_icon;
}
void OAICrs0_ClusterData::setClusterIcon(const QString &cluster_icon) {
    m_cluster_icon = cluster_icon;
    m_cluster_icon_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_icon_Set() const{
    return m_cluster_icon_isSet;
}

bool OAICrs0_ClusterData::is_cluster_icon_Valid() const{
    return m_cluster_icon_isValid;
}

QString OAICrs0_ClusterData::getClusterLatitude() const {
    return m_cluster_latitude;
}
void OAICrs0_ClusterData::setClusterLatitude(const QString &cluster_latitude) {
    m_cluster_latitude = cluster_latitude;
    m_cluster_latitude_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_latitude_Set() const{
    return m_cluster_latitude_isSet;
}

bool OAICrs0_ClusterData::is_cluster_latitude_Valid() const{
    return m_cluster_latitude_isValid;
}

QString OAICrs0_ClusterData::getClusterLongitude() const {
    return m_cluster_longitude;
}
void OAICrs0_ClusterData::setClusterLongitude(const QString &cluster_longitude) {
    m_cluster_longitude = cluster_longitude;
    m_cluster_longitude_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_longitude_Set() const{
    return m_cluster_longitude_isSet;
}

bool OAICrs0_ClusterData::is_cluster_longitude_Valid() const{
    return m_cluster_longitude_isValid;
}

QString OAICrs0_ClusterData::getClusterName() const {
    return m_cluster_name;
}
void OAICrs0_ClusterData::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICrs0_ClusterData::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAICrs0_ClusterData::getClusterType() const {
    return m_cluster_type;
}
void OAICrs0_ClusterData::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAICrs0_ClusterData::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAICrs0_ClusterData::getClusterValue() const {
    return m_cluster_value;
}
void OAICrs0_ClusterData::setClusterValue(const QString &cluster_value) {
    m_cluster_value = cluster_value;
    m_cluster_value_isSet = true;
}

bool OAICrs0_ClusterData::is_cluster_value_Set() const{
    return m_cluster_value_isSet;
}

bool OAICrs0_ClusterData::is_cluster_value_Valid() const{
    return m_cluster_value_isValid;
}

QString OAICrs0_ClusterData::getCriminalRows() const {
    return m_criminal_rows;
}
void OAICrs0_ClusterData::setCriminalRows(const QString &criminal_rows) {
    m_criminal_rows = criminal_rows;
    m_criminal_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_criminal_rows_Set() const{
    return m_criminal_rows_isSet;
}

bool OAICrs0_ClusterData::is_criminal_rows_Valid() const{
    return m_criminal_rows_isValid;
}

QString OAICrs0_ClusterData::getEpcraRows() const {
    return m_epcra_rows;
}
void OAICrs0_ClusterData::setEpcraRows(const QString &epcra_rows) {
    m_epcra_rows = epcra_rows;
    m_epcra_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_epcra_rows_Set() const{
    return m_epcra_rows_isSet;
}

bool OAICrs0_ClusterData::is_epcra_rows_Valid() const{
    return m_epcra_rows_isValid;
}

QString OAICrs0_ClusterData::getFifraRows() const {
    return m_fifra_rows;
}
void OAICrs0_ClusterData::setFifraRows(const QString &fifra_rows) {
    m_fifra_rows = fifra_rows;
    m_fifra_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_fifra_rows_Set() const{
    return m_fifra_rows_isSet;
}

bool OAICrs0_ClusterData::is_fifra_rows_Valid() const{
    return m_fifra_rows_isValid;
}

QString OAICrs0_ClusterData::getFedPenRows() const {
    return m_fed_pen_rows;
}
void OAICrs0_ClusterData::setFedPenRows(const QString &fed_pen_rows) {
    m_fed_pen_rows = fed_pen_rows;
    m_fed_pen_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_fed_pen_rows_Set() const{
    return m_fed_pen_rows_isSet;
}

bool OAICrs0_ClusterData::is_fed_pen_rows_Valid() const{
    return m_fed_pen_rows_isValid;
}

QString OAICrs0_ClusterData::getFederalRows() const {
    return m_federal_rows;
}
void OAICrs0_ClusterData::setFederalRows(const QString &federal_rows) {
    m_federal_rows = federal_rows;
    m_federal_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_federal_rows_Set() const{
    return m_federal_rows_isSet;
}

bool OAICrs0_ClusterData::is_federal_rows_Valid() const{
    return m_federal_rows_isValid;
}

QString OAICrs0_ClusterData::getJdcRows() const {
    return m_jdc_rows;
}
void OAICrs0_ClusterData::setJdcRows(const QString &jdc_rows) {
    m_jdc_rows = jdc_rows;
    m_jdc_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_jdc_rows_Set() const{
    return m_jdc_rows_isSet;
}

bool OAICrs0_ClusterData::is_jdc_rows_Valid() const{
    return m_jdc_rows_isValid;
}

QString OAICrs0_ClusterData::getObjectId() const {
    return m_object_id;
}
void OAICrs0_ClusterData::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICrs0_ClusterData::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICrs0_ClusterData::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAICrs0_ClusterData::getRcraRows() const {
    return m_rcra_rows;
}
void OAICrs0_ClusterData::setRcraRows(const QString &rcra_rows) {
    m_rcra_rows = rcra_rows;
    m_rcra_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_rcra_rows_Set() const{
    return m_rcra_rows_isSet;
}

bool OAICrs0_ClusterData::is_rcra_rows_Valid() const{
    return m_rcra_rows_isValid;
}

QString OAICrs0_ClusterData::getSdwaRows() const {
    return m_sdwa_rows;
}
void OAICrs0_ClusterData::setSdwaRows(const QString &sdwa_rows) {
    m_sdwa_rows = sdwa_rows;
    m_sdwa_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_sdwa_rows_Set() const{
    return m_sdwa_rows_isSet;
}

bool OAICrs0_ClusterData::is_sdwa_rows_Valid() const{
    return m_sdwa_rows_isValid;
}

QString OAICrs0_ClusterData::getSepRows() const {
    return m_sep_rows;
}
void OAICrs0_ClusterData::setSepRows(const QString &sep_rows) {
    m_sep_rows = sep_rows;
    m_sep_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_sep_rows_Set() const{
    return m_sep_rows_isSet;
}

bool OAICrs0_ClusterData::is_sep_rows_Valid() const{
    return m_sep_rows_isValid;
}

QString OAICrs0_ClusterData::getTscaRows() const {
    return m_tsca_rows;
}
void OAICrs0_ClusterData::setTscaRows(const QString &tsca_rows) {
    m_tsca_rows = tsca_rows;
    m_tsca_rows_isSet = true;
}

bool OAICrs0_ClusterData::is_tsca_rows_Set() const{
    return m_tsca_rows_isSet;
}

bool OAICrs0_ClusterData::is_tsca_rows_Valid() const{
    return m_tsca_rows_isValid;
}

bool OAICrs0_ClusterData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_afr_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caa_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cercla_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwa_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criminal_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epcra_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifra_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_pen_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jdc_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcra_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdwa_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tsca_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrs0_ClusterData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_afr_rows_isValid && m_caa_rows_isValid && m_cercla_rows_isValid && m_cwa_rows_isValid && m_cluster_count_isValid && m_cluster_icon_isValid && m_cluster_latitude_isValid && m_cluster_longitude_isValid && m_cluster_name_isValid && m_cluster_type_isValid && m_cluster_value_isValid && m_criminal_rows_isValid && m_epcra_rows_isValid && m_fifra_rows_isValid && m_fed_pen_rows_isValid && m_federal_rows_isValid && m_jdc_rows_isValid && m_object_id_isValid && m_rcra_rows_isValid && m_sdwa_rows_isValid && m_sep_rows_isValid && m_tsca_rows_isValid && true;
}

} // namespace OpenAPI
