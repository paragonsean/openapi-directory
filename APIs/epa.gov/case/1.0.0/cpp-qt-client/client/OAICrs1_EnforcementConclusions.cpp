/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrs1_EnforcementConclusions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrs1_EnforcementConclusions::OAICrs1_EnforcementConclusions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrs1_EnforcementConclusions::OAICrs1_EnforcementConclusions() {
    this->initializeModel();
}

OAICrs1_EnforcementConclusions::~OAICrs1_EnforcementConclusions() {}

void OAICrs1_EnforcementConclusions::initializeModel() {

    m_actual_termination_date_isSet = false;
    m_actual_termination_date_isValid = false;

    m_compliance_action_cost_isSet = false;
    m_compliance_action_cost_isValid = false;

    m_compliance_schedules_isSet = false;
    m_compliance_schedules_isValid = false;

    m_complying_actions_isSet = false;
    m_complying_actions_isValid = false;

    m_cost_recovery_isSet = false;
    m_cost_recovery_isValid = false;

    m_enforcement_action_closed_date_isSet = false;
    m_enforcement_action_closed_date_isValid = false;

    m_enforcement_conclusion_id_isSet = false;
    m_enforcement_conclusion_id_isValid = false;

    m_enforcement_conclusion_name_isSet = false;
    m_enforcement_conclusion_name_isValid = false;

    m_enforcement_conclusion_type_isSet = false;
    m_enforcement_conclusion_type_isValid = false;

    m_facilities_in_settlement_isSet = false;
    m_facilities_in_settlement_isValid = false;

    m_federal_penalty_isSet = false;
    m_federal_penalty_isValid = false;

    m_final_order_statuses_isSet = false;
    m_final_order_statuses_isValid = false;

    m_pollutant_reductions_isSet = false;
    m_pollutant_reductions_isValid = false;

    m_sep_cost_isSet = false;
    m_sep_cost_isValid = false;

    m_settlement_entered_date_isSet = false;
    m_settlement_entered_date_isValid = false;

    m_settlement_lodged_date_isSet = false;
    m_settlement_lodged_date_isValid = false;

    m_state_penalty_isSet = false;
    m_state_penalty_isValid = false;

    m_supplemental_environmental_projects_isSet = false;
    m_supplemental_environmental_projects_isValid = false;
}

void OAICrs1_EnforcementConclusions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrs1_EnforcementConclusions::fromJsonObject(QJsonObject json) {

    m_actual_termination_date_isValid = ::OpenAPI::fromJsonValue(m_actual_termination_date, json[QString("ActualTerminationDate")]);
    m_actual_termination_date_isSet = !json[QString("ActualTerminationDate")].isNull() && m_actual_termination_date_isValid;

    m_compliance_action_cost_isValid = ::OpenAPI::fromJsonValue(m_compliance_action_cost, json[QString("ComplianceActionCost")]);
    m_compliance_action_cost_isSet = !json[QString("ComplianceActionCost")].isNull() && m_compliance_action_cost_isValid;

    m_compliance_schedules_isValid = ::OpenAPI::fromJsonValue(m_compliance_schedules, json[QString("ComplianceSchedules")]);
    m_compliance_schedules_isSet = !json[QString("ComplianceSchedules")].isNull() && m_compliance_schedules_isValid;

    m_complying_actions_isValid = ::OpenAPI::fromJsonValue(m_complying_actions, json[QString("ComplyingActions")]);
    m_complying_actions_isSet = !json[QString("ComplyingActions")].isNull() && m_complying_actions_isValid;

    m_cost_recovery_isValid = ::OpenAPI::fromJsonValue(m_cost_recovery, json[QString("CostRecovery")]);
    m_cost_recovery_isSet = !json[QString("CostRecovery")].isNull() && m_cost_recovery_isValid;

    m_enforcement_action_closed_date_isValid = ::OpenAPI::fromJsonValue(m_enforcement_action_closed_date, json[QString("EnforcementActionClosedDate")]);
    m_enforcement_action_closed_date_isSet = !json[QString("EnforcementActionClosedDate")].isNull() && m_enforcement_action_closed_date_isValid;

    m_enforcement_conclusion_id_isValid = ::OpenAPI::fromJsonValue(m_enforcement_conclusion_id, json[QString("EnforcementConclusionId")]);
    m_enforcement_conclusion_id_isSet = !json[QString("EnforcementConclusionId")].isNull() && m_enforcement_conclusion_id_isValid;

    m_enforcement_conclusion_name_isValid = ::OpenAPI::fromJsonValue(m_enforcement_conclusion_name, json[QString("EnforcementConclusionName")]);
    m_enforcement_conclusion_name_isSet = !json[QString("EnforcementConclusionName")].isNull() && m_enforcement_conclusion_name_isValid;

    m_enforcement_conclusion_type_isValid = ::OpenAPI::fromJsonValue(m_enforcement_conclusion_type, json[QString("EnforcementConclusionType")]);
    m_enforcement_conclusion_type_isSet = !json[QString("EnforcementConclusionType")].isNull() && m_enforcement_conclusion_type_isValid;

    m_facilities_in_settlement_isValid = ::OpenAPI::fromJsonValue(m_facilities_in_settlement, json[QString("FacilitiesInSettlement")]);
    m_facilities_in_settlement_isSet = !json[QString("FacilitiesInSettlement")].isNull() && m_facilities_in_settlement_isValid;

    m_federal_penalty_isValid = ::OpenAPI::fromJsonValue(m_federal_penalty, json[QString("FederalPenalty")]);
    m_federal_penalty_isSet = !json[QString("FederalPenalty")].isNull() && m_federal_penalty_isValid;

    m_final_order_statuses_isValid = ::OpenAPI::fromJsonValue(m_final_order_statuses, json[QString("FinalOrderStatuses")]);
    m_final_order_statuses_isSet = !json[QString("FinalOrderStatuses")].isNull() && m_final_order_statuses_isValid;

    m_pollutant_reductions_isValid = ::OpenAPI::fromJsonValue(m_pollutant_reductions, json[QString("PollutantReductions")]);
    m_pollutant_reductions_isSet = !json[QString("PollutantReductions")].isNull() && m_pollutant_reductions_isValid;

    m_sep_cost_isValid = ::OpenAPI::fromJsonValue(m_sep_cost, json[QString("SEPCost")]);
    m_sep_cost_isSet = !json[QString("SEPCost")].isNull() && m_sep_cost_isValid;

    m_settlement_entered_date_isValid = ::OpenAPI::fromJsonValue(m_settlement_entered_date, json[QString("SettlementEnteredDate")]);
    m_settlement_entered_date_isSet = !json[QString("SettlementEnteredDate")].isNull() && m_settlement_entered_date_isValid;

    m_settlement_lodged_date_isValid = ::OpenAPI::fromJsonValue(m_settlement_lodged_date, json[QString("SettlementLodgedDate")]);
    m_settlement_lodged_date_isSet = !json[QString("SettlementLodgedDate")].isNull() && m_settlement_lodged_date_isValid;

    m_state_penalty_isValid = ::OpenAPI::fromJsonValue(m_state_penalty, json[QString("StatePenalty")]);
    m_state_penalty_isSet = !json[QString("StatePenalty")].isNull() && m_state_penalty_isValid;

    m_supplemental_environmental_projects_isValid = ::OpenAPI::fromJsonValue(m_supplemental_environmental_projects, json[QString("SupplementalEnvironmentalProjects")]);
    m_supplemental_environmental_projects_isSet = !json[QString("SupplementalEnvironmentalProjects")].isNull() && m_supplemental_environmental_projects_isValid;
}

QString OAICrs1_EnforcementConclusions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrs1_EnforcementConclusions::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_termination_date_isSet) {
        obj.insert(QString("ActualTerminationDate"), ::OpenAPI::toJsonValue(m_actual_termination_date));
    }
    if (m_compliance_action_cost_isSet) {
        obj.insert(QString("ComplianceActionCost"), ::OpenAPI::toJsonValue(m_compliance_action_cost));
    }
    if (m_compliance_schedules.size() > 0) {
        obj.insert(QString("ComplianceSchedules"), ::OpenAPI::toJsonValue(m_compliance_schedules));
    }
    if (m_complying_actions.size() > 0) {
        obj.insert(QString("ComplyingActions"), ::OpenAPI::toJsonValue(m_complying_actions));
    }
    if (m_cost_recovery_isSet) {
        obj.insert(QString("CostRecovery"), ::OpenAPI::toJsonValue(m_cost_recovery));
    }
    if (m_enforcement_action_closed_date_isSet) {
        obj.insert(QString("EnforcementActionClosedDate"), ::OpenAPI::toJsonValue(m_enforcement_action_closed_date));
    }
    if (m_enforcement_conclusion_id_isSet) {
        obj.insert(QString("EnforcementConclusionId"), ::OpenAPI::toJsonValue(m_enforcement_conclusion_id));
    }
    if (m_enforcement_conclusion_name_isSet) {
        obj.insert(QString("EnforcementConclusionName"), ::OpenAPI::toJsonValue(m_enforcement_conclusion_name));
    }
    if (m_enforcement_conclusion_type_isSet) {
        obj.insert(QString("EnforcementConclusionType"), ::OpenAPI::toJsonValue(m_enforcement_conclusion_type));
    }
    if (m_facilities_in_settlement_isSet) {
        obj.insert(QString("FacilitiesInSettlement"), ::OpenAPI::toJsonValue(m_facilities_in_settlement));
    }
    if (m_federal_penalty_isSet) {
        obj.insert(QString("FederalPenalty"), ::OpenAPI::toJsonValue(m_federal_penalty));
    }
    if (m_final_order_statuses.size() > 0) {
        obj.insert(QString("FinalOrderStatuses"), ::OpenAPI::toJsonValue(m_final_order_statuses));
    }
    if (m_pollutant_reductions.size() > 0) {
        obj.insert(QString("PollutantReductions"), ::OpenAPI::toJsonValue(m_pollutant_reductions));
    }
    if (m_sep_cost_isSet) {
        obj.insert(QString("SEPCost"), ::OpenAPI::toJsonValue(m_sep_cost));
    }
    if (m_settlement_entered_date_isSet) {
        obj.insert(QString("SettlementEnteredDate"), ::OpenAPI::toJsonValue(m_settlement_entered_date));
    }
    if (m_settlement_lodged_date_isSet) {
        obj.insert(QString("SettlementLodgedDate"), ::OpenAPI::toJsonValue(m_settlement_lodged_date));
    }
    if (m_state_penalty_isSet) {
        obj.insert(QString("StatePenalty"), ::OpenAPI::toJsonValue(m_state_penalty));
    }
    if (m_supplemental_environmental_projects.size() > 0) {
        obj.insert(QString("SupplementalEnvironmentalProjects"), ::OpenAPI::toJsonValue(m_supplemental_environmental_projects));
    }
    return obj;
}

QString OAICrs1_EnforcementConclusions::getActualTerminationDate() const {
    return m_actual_termination_date;
}
void OAICrs1_EnforcementConclusions::setActualTerminationDate(const QString &actual_termination_date) {
    m_actual_termination_date = actual_termination_date;
    m_actual_termination_date_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_actual_termination_date_Set() const{
    return m_actual_termination_date_isSet;
}

bool OAICrs1_EnforcementConclusions::is_actual_termination_date_Valid() const{
    return m_actual_termination_date_isValid;
}

QString OAICrs1_EnforcementConclusions::getComplianceActionCost() const {
    return m_compliance_action_cost;
}
void OAICrs1_EnforcementConclusions::setComplianceActionCost(const QString &compliance_action_cost) {
    m_compliance_action_cost = compliance_action_cost;
    m_compliance_action_cost_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_compliance_action_cost_Set() const{
    return m_compliance_action_cost_isSet;
}

bool OAICrs1_EnforcementConclusions::is_compliance_action_cost_Valid() const{
    return m_compliance_action_cost_isValid;
}

QList<OAICrs1_ComplianceSchedules> OAICrs1_EnforcementConclusions::getComplianceSchedules() const {
    return m_compliance_schedules;
}
void OAICrs1_EnforcementConclusions::setComplianceSchedules(const QList<OAICrs1_ComplianceSchedules> &compliance_schedules) {
    m_compliance_schedules = compliance_schedules;
    m_compliance_schedules_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_compliance_schedules_Set() const{
    return m_compliance_schedules_isSet;
}

bool OAICrs1_EnforcementConclusions::is_compliance_schedules_Valid() const{
    return m_compliance_schedules_isValid;
}

QList<OAICrs1_ComplyingActions> OAICrs1_EnforcementConclusions::getComplyingActions() const {
    return m_complying_actions;
}
void OAICrs1_EnforcementConclusions::setComplyingActions(const QList<OAICrs1_ComplyingActions> &complying_actions) {
    m_complying_actions = complying_actions;
    m_complying_actions_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_complying_actions_Set() const{
    return m_complying_actions_isSet;
}

bool OAICrs1_EnforcementConclusions::is_complying_actions_Valid() const{
    return m_complying_actions_isValid;
}

QString OAICrs1_EnforcementConclusions::getCostRecovery() const {
    return m_cost_recovery;
}
void OAICrs1_EnforcementConclusions::setCostRecovery(const QString &cost_recovery) {
    m_cost_recovery = cost_recovery;
    m_cost_recovery_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_cost_recovery_Set() const{
    return m_cost_recovery_isSet;
}

bool OAICrs1_EnforcementConclusions::is_cost_recovery_Valid() const{
    return m_cost_recovery_isValid;
}

QString OAICrs1_EnforcementConclusions::getEnforcementActionClosedDate() const {
    return m_enforcement_action_closed_date;
}
void OAICrs1_EnforcementConclusions::setEnforcementActionClosedDate(const QString &enforcement_action_closed_date) {
    m_enforcement_action_closed_date = enforcement_action_closed_date;
    m_enforcement_action_closed_date_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_action_closed_date_Set() const{
    return m_enforcement_action_closed_date_isSet;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_action_closed_date_Valid() const{
    return m_enforcement_action_closed_date_isValid;
}

QString OAICrs1_EnforcementConclusions::getEnforcementConclusionId() const {
    return m_enforcement_conclusion_id;
}
void OAICrs1_EnforcementConclusions::setEnforcementConclusionId(const QString &enforcement_conclusion_id) {
    m_enforcement_conclusion_id = enforcement_conclusion_id;
    m_enforcement_conclusion_id_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_id_Set() const{
    return m_enforcement_conclusion_id_isSet;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_id_Valid() const{
    return m_enforcement_conclusion_id_isValid;
}

QString OAICrs1_EnforcementConclusions::getEnforcementConclusionName() const {
    return m_enforcement_conclusion_name;
}
void OAICrs1_EnforcementConclusions::setEnforcementConclusionName(const QString &enforcement_conclusion_name) {
    m_enforcement_conclusion_name = enforcement_conclusion_name;
    m_enforcement_conclusion_name_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_name_Set() const{
    return m_enforcement_conclusion_name_isSet;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_name_Valid() const{
    return m_enforcement_conclusion_name_isValid;
}

QString OAICrs1_EnforcementConclusions::getEnforcementConclusionType() const {
    return m_enforcement_conclusion_type;
}
void OAICrs1_EnforcementConclusions::setEnforcementConclusionType(const QString &enforcement_conclusion_type) {
    m_enforcement_conclusion_type = enforcement_conclusion_type;
    m_enforcement_conclusion_type_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_type_Set() const{
    return m_enforcement_conclusion_type_isSet;
}

bool OAICrs1_EnforcementConclusions::is_enforcement_conclusion_type_Valid() const{
    return m_enforcement_conclusion_type_isValid;
}

QString OAICrs1_EnforcementConclusions::getFacilitiesInSettlement() const {
    return m_facilities_in_settlement;
}
void OAICrs1_EnforcementConclusions::setFacilitiesInSettlement(const QString &facilities_in_settlement) {
    m_facilities_in_settlement = facilities_in_settlement;
    m_facilities_in_settlement_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_facilities_in_settlement_Set() const{
    return m_facilities_in_settlement_isSet;
}

bool OAICrs1_EnforcementConclusions::is_facilities_in_settlement_Valid() const{
    return m_facilities_in_settlement_isValid;
}

QString OAICrs1_EnforcementConclusions::getFederalPenalty() const {
    return m_federal_penalty;
}
void OAICrs1_EnforcementConclusions::setFederalPenalty(const QString &federal_penalty) {
    m_federal_penalty = federal_penalty;
    m_federal_penalty_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_federal_penalty_Set() const{
    return m_federal_penalty_isSet;
}

bool OAICrs1_EnforcementConclusions::is_federal_penalty_Valid() const{
    return m_federal_penalty_isValid;
}

QList<OAICrs1_FinalOrderStatuses> OAICrs1_EnforcementConclusions::getFinalOrderStatuses() const {
    return m_final_order_statuses;
}
void OAICrs1_EnforcementConclusions::setFinalOrderStatuses(const QList<OAICrs1_FinalOrderStatuses> &final_order_statuses) {
    m_final_order_statuses = final_order_statuses;
    m_final_order_statuses_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_final_order_statuses_Set() const{
    return m_final_order_statuses_isSet;
}

bool OAICrs1_EnforcementConclusions::is_final_order_statuses_Valid() const{
    return m_final_order_statuses_isValid;
}

QList<OAICrs1_PollutantReductions> OAICrs1_EnforcementConclusions::getPollutantReductions() const {
    return m_pollutant_reductions;
}
void OAICrs1_EnforcementConclusions::setPollutantReductions(const QList<OAICrs1_PollutantReductions> &pollutant_reductions) {
    m_pollutant_reductions = pollutant_reductions;
    m_pollutant_reductions_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_pollutant_reductions_Set() const{
    return m_pollutant_reductions_isSet;
}

bool OAICrs1_EnforcementConclusions::is_pollutant_reductions_Valid() const{
    return m_pollutant_reductions_isValid;
}

QString OAICrs1_EnforcementConclusions::getSepCost() const {
    return m_sep_cost;
}
void OAICrs1_EnforcementConclusions::setSepCost(const QString &sep_cost) {
    m_sep_cost = sep_cost;
    m_sep_cost_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_sep_cost_Set() const{
    return m_sep_cost_isSet;
}

bool OAICrs1_EnforcementConclusions::is_sep_cost_Valid() const{
    return m_sep_cost_isValid;
}

QString OAICrs1_EnforcementConclusions::getSettlementEnteredDate() const {
    return m_settlement_entered_date;
}
void OAICrs1_EnforcementConclusions::setSettlementEnteredDate(const QString &settlement_entered_date) {
    m_settlement_entered_date = settlement_entered_date;
    m_settlement_entered_date_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_settlement_entered_date_Set() const{
    return m_settlement_entered_date_isSet;
}

bool OAICrs1_EnforcementConclusions::is_settlement_entered_date_Valid() const{
    return m_settlement_entered_date_isValid;
}

QString OAICrs1_EnforcementConclusions::getSettlementLodgedDate() const {
    return m_settlement_lodged_date;
}
void OAICrs1_EnforcementConclusions::setSettlementLodgedDate(const QString &settlement_lodged_date) {
    m_settlement_lodged_date = settlement_lodged_date;
    m_settlement_lodged_date_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_settlement_lodged_date_Set() const{
    return m_settlement_lodged_date_isSet;
}

bool OAICrs1_EnforcementConclusions::is_settlement_lodged_date_Valid() const{
    return m_settlement_lodged_date_isValid;
}

QString OAICrs1_EnforcementConclusions::getStatePenalty() const {
    return m_state_penalty;
}
void OAICrs1_EnforcementConclusions::setStatePenalty(const QString &state_penalty) {
    m_state_penalty = state_penalty;
    m_state_penalty_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_state_penalty_Set() const{
    return m_state_penalty_isSet;
}

bool OAICrs1_EnforcementConclusions::is_state_penalty_Valid() const{
    return m_state_penalty_isValid;
}

QList<OAICrs1_SupplementalEnvironmentalProjects> OAICrs1_EnforcementConclusions::getSupplementalEnvironmentalProjects() const {
    return m_supplemental_environmental_projects;
}
void OAICrs1_EnforcementConclusions::setSupplementalEnvironmentalProjects(const QList<OAICrs1_SupplementalEnvironmentalProjects> &supplemental_environmental_projects) {
    m_supplemental_environmental_projects = supplemental_environmental_projects;
    m_supplemental_environmental_projects_isSet = true;
}

bool OAICrs1_EnforcementConclusions::is_supplemental_environmental_projects_Set() const{
    return m_supplemental_environmental_projects_isSet;
}

bool OAICrs1_EnforcementConclusions::is_supplemental_environmental_projects_Valid() const{
    return m_supplemental_environmental_projects_isValid;
}

bool OAICrs1_EnforcementConclusions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_action_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_complying_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_recovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_action_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_conclusion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_conclusion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_conclusion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities_in_settlement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_order_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pollutant_reductions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sep_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_entered_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_lodged_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_environmental_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrs1_EnforcementConclusions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actual_termination_date_isValid && m_compliance_action_cost_isValid && m_compliance_schedules_isValid && m_complying_actions_isValid && m_cost_recovery_isValid && m_enforcement_action_closed_date_isValid && m_enforcement_conclusion_id_isValid && m_enforcement_conclusion_name_isValid && m_enforcement_conclusion_type_isValid && m_facilities_in_settlement_isValid && m_federal_penalty_isValid && m_final_order_statuses_isValid && m_pollutant_reductions_isValid && m_sep_cost_isValid && m_settlement_entered_date_isValid && m_settlement_lodged_date_isValid && m_state_penalty_isValid && m_supplemental_environmental_projects_isValid && true;
}

} // namespace OpenAPI
