/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaseEnforcementApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICaseEnforcementApi::OAICaseEnforcementApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICaseEnforcementApi::~OAICaseEnforcementApi() {
}

void OAICaseEnforcementApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://echodata.epa.gov/echo"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("caseRestServicesGetCaseInfoGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetCaseInfoGet", 0);
    _serverConfigs.insert("caseRestServicesGetCaseInfoPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetCaseInfoPost", 0);
    _serverConfigs.insert("caseRestServicesGetCaseReportGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetCaseReportGet", 0);
    _serverConfigs.insert("caseRestServicesGetCaseReportPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetCaseReportPost", 0);
    _serverConfigs.insert("caseRestServicesGetCasesFromFacilityGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetCasesFromFacilityGet", 0);
    _serverConfigs.insert("caseRestServicesGetCasesFromFacilityPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetCasesFromFacilityPost", 0);
    _serverConfigs.insert("caseRestServicesGetCasesGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetCasesGet", 0);
    _serverConfigs.insert("caseRestServicesGetCasesPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetCasesPost", 0);
    _serverConfigs.insert("caseRestServicesGetCrcaseReportGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetCrcaseReportGet", 0);
    _serverConfigs.insert("caseRestServicesGetCrcaseReportPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetCrcaseReportPost", 0);
    _serverConfigs.insert("caseRestServicesGetDownloadGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetDownloadGet", 0);
    _serverConfigs.insert("caseRestServicesGetDownloadPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetDownloadPost", 0);
    _serverConfigs.insert("caseRestServicesGetFacilitiesFromCaseGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetFacilitiesFromCaseGet", 0);
    _serverConfigs.insert("caseRestServicesGetFacilitiesFromCasePost", defaultConf);
    _serverIndices.insert("caseRestServicesGetFacilitiesFromCasePost", 0);
    _serverConfigs.insert("caseRestServicesGetMapGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetMapGet", 0);
    _serverConfigs.insert("caseRestServicesGetMapPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetMapPost", 0);
    _serverConfigs.insert("caseRestServicesGetQidGet", defaultConf);
    _serverIndices.insert("caseRestServicesGetQidGet", 0);
    _serverConfigs.insert("caseRestServicesGetQidPost", defaultConf);
    _serverIndices.insert("caseRestServicesGetQidPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICaseEnforcementApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICaseEnforcementApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICaseEnforcementApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICaseEnforcementApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICaseEnforcementApi::setUsername(const QString &username) {
    _username = username;
}

void OAICaseEnforcementApi::setPassword(const QString &password) {
    _password = password;
}


void OAICaseEnforcementApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICaseEnforcementApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICaseEnforcementApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICaseEnforcementApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICaseEnforcementApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICaseEnforcementApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICaseEnforcementApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICaseEnforcementApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICaseEnforcementApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICaseEnforcementApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICaseEnforcementApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICaseEnforcementApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICaseEnforcementApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCaseInfoGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_case_category, const ::OpenAPI::OptionalParam<QString> &p_case_status, const ::OpenAPI::OptionalParam<QString> &p_milestone, const ::OpenAPI::OptionalParam<QString> &p_from_date, const ::OpenAPI::OptionalParam<QString> &p_to_date, const ::OpenAPI::OptionalParam<QString> &p_milestone_fy, const ::OpenAPI::OptionalParam<QString> &p_name, const ::OpenAPI::OptionalParam<QString> &p_name_type, const ::OpenAPI::OptionalParam<QString> &p_case_number, const ::OpenAPI::OptionalParam<QString> &p_docket_number, const ::OpenAPI::OptionalParam<QString> &p_court_docket_number, const ::OpenAPI::OptionalParam<QString> &p_activity_number, const ::OpenAPI::OptionalParam<QString> &p_case_lead, const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg, const ::OpenAPI::OptionalParam<QString> &p_region, const ::OpenAPI::OptionalParam<QString> &p_state, const ::OpenAPI::OptionalParam<QString> &p_district, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics, const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_naics, const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_enf_type, const ::OpenAPI::OptionalParam<QString> &p_law, const ::OpenAPI::OptionalParam<QString> &p_section, const ::OpenAPI::OptionalParam<QString> &p_cp_citation, const ::OpenAPI::OptionalParam<QString> &p_rank_order, const ::OpenAPI::OptionalParam<QString> &p_enf_program, const ::OpenAPI::OptionalParam<QString> &p_violation, const ::OpenAPI::OptionalParam<QString> &p_priority_area, const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc, const ::OpenAPI::OptionalParam<QString> &p_tribal, const ::OpenAPI::OptionalParam<QString> &p_oeca_core, const ::OpenAPI::OptionalParam<QString> &p_multimedia, const ::OpenAPI::OptionalParam<QString> &p_fed_case, const ::OpenAPI::OptionalParam<QString> &p_activity_contact, const ::OpenAPI::OptionalParam<QString> &p_role, const ::OpenAPI::OptionalParam<QString> &p_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_complying_actions, const ::OpenAPI::OptionalParam<QString> &p_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_sep_cats, const ::OpenAPI::OptionalParam<QString> &p_sep_val, const ::OpenAPI::OptionalParam<QString> &p_total_sep_val, const ::OpenAPI::OptionalParam<QString> &p_lodged_date, const ::OpenAPI::OptionalParam<QString> &p_entered_date, const ::OpenAPI::OptionalParam<QString> &p_facility_id, const ::OpenAPI::OptionalParam<QString> &p_fac_city, const ::OpenAPI::OptionalParam<QString> &p_fac_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_county, const ::OpenAPI::OptionalParam<QString> &p_case_summary, const ::OpenAPI::OptionalParam<QString> &p_case_summary_type, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_voluntary, const ::OpenAPI::OptionalParam<QString> &p_fed_indicator, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &mapset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print, const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_has_map) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCaseInfoGet"][_serverIndices.value("caseRestServicesGetCaseInfoGet")].URL()+"/case_rest_services.get_case_info");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_case_category.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_category", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_category")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_category.stringValue()));
    }
    if (p_case_status.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_status", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_status")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_status.stringValue()));
    }
    if (p_milestone.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_milestone", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_milestone")).append(querySuffix).append(QUrl::toPercentEncoding(p_milestone.stringValue()));
    }
    if (p_from_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_from_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_from_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_from_date.stringValue()));
    }
    if (p_to_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_to_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_to_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_to_date.stringValue()));
    }
    if (p_milestone_fy.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_milestone_fy", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_milestone_fy")).append(querySuffix).append(QUrl::toPercentEncoding(p_milestone_fy.stringValue()));
    }
    if (p_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_name")).append(querySuffix).append(QUrl::toPercentEncoding(p_name.stringValue()));
    }
    if (p_name_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_name_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_name_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_name_type.stringValue()));
    }
    if (p_case_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_number.stringValue()));
    }
    if (p_docket_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_docket_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_docket_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_docket_number.stringValue()));
    }
    if (p_court_docket_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_court_docket_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_court_docket_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_court_docket_number.stringValue()));
    }
    if (p_activity_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_activity_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_activity_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_activity_number.stringValue()));
    }
    if (p_case_lead.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_lead", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_lead")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_lead.stringValue()));
    }
    if (p_case_sens_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_sens_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_sens_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_sens_flg.stringValue()));
    }
    if (p_region.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_region", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_region")).append(querySuffix).append(QUrl::toPercentEncoding(p_region.stringValue()));
    }
    if (p_state.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_state", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_state")).append(querySuffix).append(QUrl::toPercentEncoding(p_state.stringValue()));
    }
    if (p_district.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_district", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_district")).append(querySuffix).append(QUrl::toPercentEncoding(p_district.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_sic_ao_naics.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_ao_naics", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_ao_naics")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_ao_naics.stringValue()));
    }
    if (p_sic_primary_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_primary_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_primary_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_primary_flg.stringValue()));
    }
    if (p_sic_frs_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_frs_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_frs_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_frs_flg.stringValue()));
    }
    if (p_naics.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics.stringValue()));
    }
    if (p_naics_primary_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics_primary_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics_primary_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics_primary_flg.stringValue()));
    }
    if (p_naics_frs_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics_frs_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics_frs_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics_frs_flg.stringValue()));
    }
    if (p_enf_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_enf_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_enf_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_enf_type.stringValue()));
    }
    if (p_law.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_law", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_law")).append(querySuffix).append(QUrl::toPercentEncoding(p_law.stringValue()));
    }
    if (p_section.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_section", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_section")).append(querySuffix).append(QUrl::toPercentEncoding(p_section.stringValue()));
    }
    if (p_cp_citation.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cp_citation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cp_citation")).append(querySuffix).append(QUrl::toPercentEncoding(p_cp_citation.stringValue()));
    }
    if (p_rank_order.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_rank_order", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_rank_order")).append(querySuffix).append(QUrl::toPercentEncoding(p_rank_order.stringValue()));
    }
    if (p_enf_program.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_enf_program", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_enf_program")).append(querySuffix).append(QUrl::toPercentEncoding(p_enf_program.stringValue()));
    }
    if (p_violation.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_violation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_violation")).append(querySuffix).append(QUrl::toPercentEncoding(p_violation.stringValue()));
    }
    if (p_priority_area.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_priority_area", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_priority_area")).append(querySuffix).append(QUrl::toPercentEncoding(p_priority_area.stringValue()));
    }
    if (p_priority_area_desc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_priority_area_desc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_priority_area_desc")).append(querySuffix).append(QUrl::toPercentEncoding(p_priority_area_desc.stringValue()));
    }
    if (p_tribal.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribal", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribal")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribal.stringValue()));
    }
    if (p_oeca_core.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_oeca_core", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_oeca_core")).append(querySuffix).append(QUrl::toPercentEncoding(p_oeca_core.stringValue()));
    }
    if (p_multimedia.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_multimedia", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_multimedia")).append(querySuffix).append(QUrl::toPercentEncoding(p_multimedia.stringValue()));
    }
    if (p_fed_case.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_case", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_case")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_case.stringValue()));
    }
    if (p_activity_contact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_activity_contact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_activity_contact")).append(querySuffix).append(QUrl::toPercentEncoding(p_activity_contact.stringValue()));
    }
    if (p_role.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_role", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_role")).append(querySuffix).append(QUrl::toPercentEncoding(p_role.stringValue()));
    }
    if (p_fed_penalty.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_penalty", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_penalty")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_penalty.stringValue()));
    }
    if (p_total_fed_penalty.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_fed_penalty", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_fed_penalty")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_fed_penalty.stringValue()));
    }
    if (p_cost_recovery.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cost_recovery", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cost_recovery")).append(querySuffix).append(QUrl::toPercentEncoding(p_cost_recovery.stringValue()));
    }
    if (p_total_cost_recovery.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_cost_recovery", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_cost_recovery")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_cost_recovery.stringValue()));
    }
    if (p_complying_actions.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_complying_actions", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_complying_actions")).append(querySuffix).append(QUrl::toPercentEncoding(p_complying_actions.stringValue()));
    }
    if (p_comp_act_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_comp_act_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_comp_act_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_comp_act_val.stringValue()));
    }
    if (p_total_comp_act_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_comp_act_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_comp_act_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_comp_act_val.stringValue()));
    }
    if (p_sep_cats.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sep_cats", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sep_cats")).append(querySuffix).append(QUrl::toPercentEncoding(p_sep_cats.stringValue()));
    }
    if (p_sep_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sep_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sep_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_sep_val.stringValue()));
    }
    if (p_total_sep_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_sep_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_sep_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_sep_val.stringValue()));
    }
    if (p_lodged_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lodged_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lodged_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_lodged_date.stringValue()));
    }
    if (p_entered_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_entered_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_entered_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_entered_date.stringValue()));
    }
    if (p_facility_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_facility_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_facility_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_facility_id.stringValue()));
    }
    if (p_fac_city.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_city", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_city")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_city.stringValue()));
    }
    if (p_fac_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_zip.stringValue()));
    }
    if (p_fac_county.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_county", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_county")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_county.stringValue()));
    }
    if (p_case_summary.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_summary", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_summary")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_summary.stringValue()));
    }
    if (p_case_summary_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_summary_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_summary_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_summary_type.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_c1lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lat.stringValue()));
    }
    if (p_c1lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lon.stringValue()));
    }
    if (p_c2lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lat.stringValue()));
    }
    if (p_c2lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lon.stringValue()));
    }
    if (p_voluntary.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_voluntary", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_voluntary")).append(querySuffix).append(QUrl::toPercentEncoding(p_voluntary.stringValue()));
    }
    if (p_fed_indicator.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_indicator", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_indicator")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_indicator.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_civil_criminal_indicator.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_civil_criminal_indicator", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_civil_criminal_indicator")).append(querySuffix).append(QUrl::toPercentEncoding(p_civil_criminal_indicator.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (mapset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "mapset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("mapset")).append(querySuffix).append(QUrl::toPercentEncoding(mapset.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_pretty_print.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_pretty_print", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_pretty_print")).append(querySuffix).append(QUrl::toPercentEncoding(p_pretty_print.stringValue()));
    }
    if (p_ocmap_fy.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ocmap_fy", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ocmap_fy")).append(querySuffix).append(QUrl::toPercentEncoding(p_ocmap_fy.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_has_map.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_has_map", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_has_map")).append(querySuffix).append(QUrl::toPercentEncoding(p_has_map.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCaseInfoGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCaseInfoGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_case_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCaseInfoGetSignal(output);
        Q_EMIT caseRestServicesGetCaseInfoGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCaseInfoGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseInfoGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCaseInfoGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseInfoGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCaseInfoPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_case_category, const ::OpenAPI::OptionalParam<QString> &p_case_status, const ::OpenAPI::OptionalParam<QString> &p_milestone, const ::OpenAPI::OptionalParam<QString> &p_from_date, const ::OpenAPI::OptionalParam<QString> &p_to_date, const ::OpenAPI::OptionalParam<QString> &p_milestone_fy, const ::OpenAPI::OptionalParam<QString> &p_name, const ::OpenAPI::OptionalParam<QString> &p_name_type, const ::OpenAPI::OptionalParam<QString> &p_case_number, const ::OpenAPI::OptionalParam<QString> &p_docket_number, const ::OpenAPI::OptionalParam<QString> &p_court_docket_number, const ::OpenAPI::OptionalParam<QString> &p_activity_number, const ::OpenAPI::OptionalParam<QString> &p_case_lead, const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg, const ::OpenAPI::OptionalParam<QString> &p_region, const ::OpenAPI::OptionalParam<QString> &p_state, const ::OpenAPI::OptionalParam<QString> &p_district, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics, const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_naics, const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_enf_type, const ::OpenAPI::OptionalParam<QString> &p_law, const ::OpenAPI::OptionalParam<QString> &p_section, const ::OpenAPI::OptionalParam<QString> &p_cp_citation, const ::OpenAPI::OptionalParam<QString> &p_rank_order, const ::OpenAPI::OptionalParam<QString> &p_enf_program, const ::OpenAPI::OptionalParam<QString> &p_violation, const ::OpenAPI::OptionalParam<QString> &p_priority_area, const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc, const ::OpenAPI::OptionalParam<QString> &p_tribal, const ::OpenAPI::OptionalParam<QString> &p_oeca_core, const ::OpenAPI::OptionalParam<QString> &p_multimedia, const ::OpenAPI::OptionalParam<QString> &p_fed_case, const ::OpenAPI::OptionalParam<QString> &p_activity_contact, const ::OpenAPI::OptionalParam<QString> &p_role, const ::OpenAPI::OptionalParam<QString> &p_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_complying_actions, const ::OpenAPI::OptionalParam<QString> &p_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_sep_cats, const ::OpenAPI::OptionalParam<QString> &p_sep_val, const ::OpenAPI::OptionalParam<QString> &p_total_sep_val, const ::OpenAPI::OptionalParam<QString> &p_lodged_date, const ::OpenAPI::OptionalParam<QString> &p_entered_date, const ::OpenAPI::OptionalParam<QString> &p_facility_id, const ::OpenAPI::OptionalParam<QString> &p_fac_city, const ::OpenAPI::OptionalParam<QString> &p_fac_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_county, const ::OpenAPI::OptionalParam<QString> &p_case_summary, const ::OpenAPI::OptionalParam<QString> &p_case_summary_type, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_voluntary, const ::OpenAPI::OptionalParam<QString> &p_fed_indicator, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &mapset, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<double> &p_pretty_print, const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_has_map) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCaseInfoPost"][_serverIndices.value("caseRestServicesGetCaseInfoPost")].URL()+"/case_rest_services.get_case_info");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_case_category.hasValue())
    {
        input.add_var("p_case_category", ::OpenAPI::toStringValue(p_case_category.value()));
    }
    if (p_case_status.hasValue())
    {
        input.add_var("p_case_status", ::OpenAPI::toStringValue(p_case_status.value()));
    }
    if (p_milestone.hasValue())
    {
        input.add_var("p_milestone", ::OpenAPI::toStringValue(p_milestone.value()));
    }
    if (p_from_date.hasValue())
    {
        input.add_var("p_from_date", ::OpenAPI::toStringValue(p_from_date.value()));
    }
    if (p_to_date.hasValue())
    {
        input.add_var("p_to_date", ::OpenAPI::toStringValue(p_to_date.value()));
    }
    if (p_milestone_fy.hasValue())
    {
        input.add_var("p_milestone_fy", ::OpenAPI::toStringValue(p_milestone_fy.value()));
    }
    if (p_name.hasValue())
    {
        input.add_var("p_name", ::OpenAPI::toStringValue(p_name.value()));
    }
    if (p_name_type.hasValue())
    {
        input.add_var("p_name_type", ::OpenAPI::toStringValue(p_name_type.value()));
    }
    if (p_case_number.hasValue())
    {
        input.add_var("p_case_number", ::OpenAPI::toStringValue(p_case_number.value()));
    }
    if (p_docket_number.hasValue())
    {
        input.add_var("p_docket_number", ::OpenAPI::toStringValue(p_docket_number.value()));
    }
    if (p_court_docket_number.hasValue())
    {
        input.add_var("p_court_docket_number", ::OpenAPI::toStringValue(p_court_docket_number.value()));
    }
    if (p_activity_number.hasValue())
    {
        input.add_var("p_activity_number", ::OpenAPI::toStringValue(p_activity_number.value()));
    }
    if (p_case_lead.hasValue())
    {
        input.add_var("p_case_lead", ::OpenAPI::toStringValue(p_case_lead.value()));
    }
    if (p_case_sens_flg.hasValue())
    {
        input.add_var("p_case_sens_flg", ::OpenAPI::toStringValue(p_case_sens_flg.value()));
    }
    if (p_region.hasValue())
    {
        input.add_var("p_region", ::OpenAPI::toStringValue(p_region.value()));
    }
    if (p_state.hasValue())
    {
        input.add_var("p_state", ::OpenAPI::toStringValue(p_state.value()));
    }
    if (p_district.hasValue())
    {
        input.add_var("p_district", ::OpenAPI::toStringValue(p_district.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_sic_ao_naics.hasValue())
    {
        input.add_var("p_sic_ao_naics", ::OpenAPI::toStringValue(p_sic_ao_naics.value()));
    }
    if (p_sic_primary_flg.hasValue())
    {
        input.add_var("p_sic_primary_flg", ::OpenAPI::toStringValue(p_sic_primary_flg.value()));
    }
    if (p_sic_frs_flg.hasValue())
    {
        input.add_var("p_sic_frs_flg", ::OpenAPI::toStringValue(p_sic_frs_flg.value()));
    }
    if (p_naics.hasValue())
    {
        input.add_var("p_naics", ::OpenAPI::toStringValue(p_naics.value()));
    }
    if (p_naics_primary_flg.hasValue())
    {
        input.add_var("p_naics_primary_flg", ::OpenAPI::toStringValue(p_naics_primary_flg.value()));
    }
    if (p_naics_frs_flg.hasValue())
    {
        input.add_var("p_naics_frs_flg", ::OpenAPI::toStringValue(p_naics_frs_flg.value()));
    }
    if (p_enf_type.hasValue())
    {
        input.add_var("p_enf_type", ::OpenAPI::toStringValue(p_enf_type.value()));
    }
    if (p_law.hasValue())
    {
        input.add_var("p_law", ::OpenAPI::toStringValue(p_law.value()));
    }
    if (p_section.hasValue())
    {
        input.add_var("p_section", ::OpenAPI::toStringValue(p_section.value()));
    }
    if (p_cp_citation.hasValue())
    {
        input.add_var("p_cp_citation", ::OpenAPI::toStringValue(p_cp_citation.value()));
    }
    if (p_rank_order.hasValue())
    {
        input.add_var("p_rank_order", ::OpenAPI::toStringValue(p_rank_order.value()));
    }
    if (p_enf_program.hasValue())
    {
        input.add_var("p_enf_program", ::OpenAPI::toStringValue(p_enf_program.value()));
    }
    if (p_violation.hasValue())
    {
        input.add_var("p_violation", ::OpenAPI::toStringValue(p_violation.value()));
    }
    if (p_priority_area.hasValue())
    {
        input.add_var("p_priority_area", ::OpenAPI::toStringValue(p_priority_area.value()));
    }
    if (p_priority_area_desc.hasValue())
    {
        input.add_var("p_priority_area_desc", ::OpenAPI::toStringValue(p_priority_area_desc.value()));
    }
    if (p_tribal.hasValue())
    {
        input.add_var("p_tribal", ::OpenAPI::toStringValue(p_tribal.value()));
    }
    if (p_oeca_core.hasValue())
    {
        input.add_var("p_oeca_core", ::OpenAPI::toStringValue(p_oeca_core.value()));
    }
    if (p_multimedia.hasValue())
    {
        input.add_var("p_multimedia", ::OpenAPI::toStringValue(p_multimedia.value()));
    }
    if (p_fed_case.hasValue())
    {
        input.add_var("p_fed_case", ::OpenAPI::toStringValue(p_fed_case.value()));
    }
    if (p_activity_contact.hasValue())
    {
        input.add_var("p_activity_contact", ::OpenAPI::toStringValue(p_activity_contact.value()));
    }
    if (p_role.hasValue())
    {
        input.add_var("p_role", ::OpenAPI::toStringValue(p_role.value()));
    }
    if (p_fed_penalty.hasValue())
    {
        input.add_var("p_fed_penalty", ::OpenAPI::toStringValue(p_fed_penalty.value()));
    }
    if (p_total_fed_penalty.hasValue())
    {
        input.add_var("p_total_fed_penalty", ::OpenAPI::toStringValue(p_total_fed_penalty.value()));
    }
    if (p_cost_recovery.hasValue())
    {
        input.add_var("p_cost_recovery", ::OpenAPI::toStringValue(p_cost_recovery.value()));
    }
    if (p_total_cost_recovery.hasValue())
    {
        input.add_var("p_total_cost_recovery", ::OpenAPI::toStringValue(p_total_cost_recovery.value()));
    }
    if (p_complying_actions.hasValue())
    {
        input.add_var("p_complying_actions", ::OpenAPI::toStringValue(p_complying_actions.value()));
    }
    if (p_comp_act_val.hasValue())
    {
        input.add_var("p_comp_act_val", ::OpenAPI::toStringValue(p_comp_act_val.value()));
    }
    if (p_total_comp_act_val.hasValue())
    {
        input.add_var("p_total_comp_act_val", ::OpenAPI::toStringValue(p_total_comp_act_val.value()));
    }
    if (p_sep_cats.hasValue())
    {
        input.add_var("p_sep_cats", ::OpenAPI::toStringValue(p_sep_cats.value()));
    }
    if (p_sep_val.hasValue())
    {
        input.add_var("p_sep_val", ::OpenAPI::toStringValue(p_sep_val.value()));
    }
    if (p_total_sep_val.hasValue())
    {
        input.add_var("p_total_sep_val", ::OpenAPI::toStringValue(p_total_sep_val.value()));
    }
    if (p_lodged_date.hasValue())
    {
        input.add_var("p_lodged_date", ::OpenAPI::toStringValue(p_lodged_date.value()));
    }
    if (p_entered_date.hasValue())
    {
        input.add_var("p_entered_date", ::OpenAPI::toStringValue(p_entered_date.value()));
    }
    if (p_facility_id.hasValue())
    {
        input.add_var("p_facility_id", ::OpenAPI::toStringValue(p_facility_id.value()));
    }
    if (p_fac_city.hasValue())
    {
        input.add_var("p_fac_city", ::OpenAPI::toStringValue(p_fac_city.value()));
    }
    if (p_fac_zip.hasValue())
    {
        input.add_var("p_fac_zip", ::OpenAPI::toStringValue(p_fac_zip.value()));
    }
    if (p_fac_county.hasValue())
    {
        input.add_var("p_fac_county", ::OpenAPI::toStringValue(p_fac_county.value()));
    }
    if (p_case_summary.hasValue())
    {
        input.add_var("p_case_summary", ::OpenAPI::toStringValue(p_case_summary.value()));
    }
    if (p_case_summary_type.hasValue())
    {
        input.add_var("p_case_summary_type", ::OpenAPI::toStringValue(p_case_summary_type.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_c1lat.hasValue())
    {
        input.add_var("p_c1lat", ::OpenAPI::toStringValue(p_c1lat.value()));
    }
    if (p_c1lon.hasValue())
    {
        input.add_var("p_c1lon", ::OpenAPI::toStringValue(p_c1lon.value()));
    }
    if (p_c2lat.hasValue())
    {
        input.add_var("p_c2lat", ::OpenAPI::toStringValue(p_c2lat.value()));
    }
    if (p_c2lon.hasValue())
    {
        input.add_var("p_c2lon", ::OpenAPI::toStringValue(p_c2lon.value()));
    }
    if (p_voluntary.hasValue())
    {
        input.add_var("p_voluntary", ::OpenAPI::toStringValue(p_voluntary.value()));
    }
    if (p_fed_indicator.hasValue())
    {
        input.add_var("p_fed_indicator", ::OpenAPI::toStringValue(p_fed_indicator.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_civil_criminal_indicator.hasValue())
    {
        input.add_var("p_civil_criminal_indicator", ::OpenAPI::toStringValue(p_civil_criminal_indicator.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (mapset.hasValue())
    {
        input.add_var("mapset", ::OpenAPI::toStringValue(mapset.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_pretty_print.hasValue())
    {
        input.add_var("p_pretty_print", ::OpenAPI::toStringValue(p_pretty_print.value()));
    }
    if (p_ocmap_fy.hasValue())
    {
        input.add_var("p_ocmap_fy", ::OpenAPI::toStringValue(p_ocmap_fy.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_has_map.hasValue())
    {
        input.add_var("p_has_map", ::OpenAPI::toStringValue(p_has_map.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCaseInfoPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCaseInfoPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_case_info_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCaseInfoPostSignal(output);
        Q_EMIT caseRestServicesGetCaseInfoPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCaseInfoPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseInfoPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCaseInfoPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseInfoPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCaseReportGet(const ::OpenAPI::OptionalParam<QString> &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCaseReportGet"][_serverIndices.value("caseRestServicesGetCaseReportGet")].URL()+"/case_rest_services.get_case_report");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (p_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id.stringValue()));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCaseReportGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCaseReportGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_case_report_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCaseReportGetSignal(output);
        Q_EMIT caseRestServicesGetCaseReportGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCaseReportGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseReportGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCaseReportGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseReportGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCaseReportPost(const ::OpenAPI::OptionalParam<QString> &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCaseReportPost"][_serverIndices.value("caseRestServicesGetCaseReportPost")].URL()+"/case_rest_services.get_case_report");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (p_id.hasValue())
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id.value()));
    }
    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCaseReportPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCaseReportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_case_report_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCaseReportPostSignal(output);
        Q_EMIT caseRestServicesGetCaseReportPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCaseReportPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseReportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCaseReportPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCaseReportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCasesFromFacilityGet"][_serverIndices.value("caseRestServicesGetCasesFromFacilityGet")].URL()+"/case_rest_services.get_cases_from_facility");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_cases_from_facility_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignal(output);
        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesFromFacilityGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityPost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCasesFromFacilityPost"][_serverIndices.value("caseRestServicesGetCasesFromFacilityPost")].URL()+"/case_rest_services.get_cases_from_facility");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCasesFromFacilityPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_cases_from_facility_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignal(output);
        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesFromFacilityPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCasesGet(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_case_category, const ::OpenAPI::OptionalParam<QString> &p_case_status, const ::OpenAPI::OptionalParam<QString> &p_violation, const ::OpenAPI::OptionalParam<QString> &p_milestone, const ::OpenAPI::OptionalParam<QString> &p_from_date, const ::OpenAPI::OptionalParam<QString> &p_to_date, const ::OpenAPI::OptionalParam<QString> &p_milestone_fy, const ::OpenAPI::OptionalParam<QString> &p_name, const ::OpenAPI::OptionalParam<QString> &p_name_type, const ::OpenAPI::OptionalParam<QString> &p_case_number, const ::OpenAPI::OptionalParam<QString> &p_docket_number, const ::OpenAPI::OptionalParam<QString> &p_court_docket_number, const ::OpenAPI::OptionalParam<QString> &p_activity_number, const ::OpenAPI::OptionalParam<QString> &p_case_lead, const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg, const ::OpenAPI::OptionalParam<QString> &p_region, const ::OpenAPI::OptionalParam<QString> &p_state, const ::OpenAPI::OptionalParam<QString> &p_district, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics, const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_naics, const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_enf_type, const ::OpenAPI::OptionalParam<QString> &p_law, const ::OpenAPI::OptionalParam<QString> &p_section, const ::OpenAPI::OptionalParam<QString> &p_cp_citation, const ::OpenAPI::OptionalParam<QString> &p_rank_order, const ::OpenAPI::OptionalParam<QString> &p_enf_program, const ::OpenAPI::OptionalParam<QString> &p_priority_area, const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc, const ::OpenAPI::OptionalParam<QString> &p_tribal, const ::OpenAPI::OptionalParam<QString> &p_oeca_core, const ::OpenAPI::OptionalParam<QString> &p_multimedia, const ::OpenAPI::OptionalParam<QString> &p_fed_case, const ::OpenAPI::OptionalParam<QString> &p_activity_contact, const ::OpenAPI::OptionalParam<QString> &p_role, const ::OpenAPI::OptionalParam<QString> &p_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_complying_actions, const ::OpenAPI::OptionalParam<QString> &p_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_sep_cats, const ::OpenAPI::OptionalParam<QString> &p_sep_val, const ::OpenAPI::OptionalParam<QString> &p_total_sep_val, const ::OpenAPI::OptionalParam<QString> &p_lodged_date, const ::OpenAPI::OptionalParam<QString> &p_entered_date, const ::OpenAPI::OptionalParam<QString> &p_facility_id, const ::OpenAPI::OptionalParam<QString> &p_fac_city, const ::OpenAPI::OptionalParam<QString> &p_fac_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_county, const ::OpenAPI::OptionalParam<QString> &p_case_summary, const ::OpenAPI::OptionalParam<QString> &p_case_summary_type, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_voluntary, const ::OpenAPI::OptionalParam<QString> &p_fed_indicator, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_has_map) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCasesGet"][_serverIndices.value("caseRestServicesGetCasesGet")].URL()+"/case_rest_services.get_cases");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (p_case_category.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_category", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_category")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_category.stringValue()));
    }
    if (p_case_status.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_status", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_status")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_status.stringValue()));
    }
    if (p_violation.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_violation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_violation")).append(querySuffix).append(QUrl::toPercentEncoding(p_violation.stringValue()));
    }
    if (p_milestone.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_milestone", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_milestone")).append(querySuffix).append(QUrl::toPercentEncoding(p_milestone.stringValue()));
    }
    if (p_from_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_from_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_from_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_from_date.stringValue()));
    }
    if (p_to_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_to_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_to_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_to_date.stringValue()));
    }
    if (p_milestone_fy.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_milestone_fy", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_milestone_fy")).append(querySuffix).append(QUrl::toPercentEncoding(p_milestone_fy.stringValue()));
    }
    if (p_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_name")).append(querySuffix).append(QUrl::toPercentEncoding(p_name.stringValue()));
    }
    if (p_name_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_name_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_name_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_name_type.stringValue()));
    }
    if (p_case_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_number.stringValue()));
    }
    if (p_docket_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_docket_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_docket_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_docket_number.stringValue()));
    }
    if (p_court_docket_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_court_docket_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_court_docket_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_court_docket_number.stringValue()));
    }
    if (p_activity_number.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_activity_number", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_activity_number")).append(querySuffix).append(QUrl::toPercentEncoding(p_activity_number.stringValue()));
    }
    if (p_case_lead.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_lead", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_lead")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_lead.stringValue()));
    }
    if (p_case_sens_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_sens_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_sens_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_sens_flg.stringValue()));
    }
    if (p_region.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_region", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_region")).append(querySuffix).append(QUrl::toPercentEncoding(p_region.stringValue()));
    }
    if (p_state.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_state", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_state")).append(querySuffix).append(QUrl::toPercentEncoding(p_state.stringValue()));
    }
    if (p_district.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_district", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_district")).append(querySuffix).append(QUrl::toPercentEncoding(p_district.stringValue()));
    }
    if (p_sic.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic.stringValue()));
    }
    if (p_sic_ao_naics.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_ao_naics", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_ao_naics")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_ao_naics.stringValue()));
    }
    if (p_sic_primary_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_primary_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_primary_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_primary_flg.stringValue()));
    }
    if (p_sic_frs_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sic_frs_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sic_frs_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_sic_frs_flg.stringValue()));
    }
    if (p_naics.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics.stringValue()));
    }
    if (p_naics_primary_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics_primary_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics_primary_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics_primary_flg.stringValue()));
    }
    if (p_naics_frs_flg.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_naics_frs_flg", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_naics_frs_flg")).append(querySuffix).append(QUrl::toPercentEncoding(p_naics_frs_flg.stringValue()));
    }
    if (p_enf_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_enf_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_enf_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_enf_type.stringValue()));
    }
    if (p_law.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_law", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_law")).append(querySuffix).append(QUrl::toPercentEncoding(p_law.stringValue()));
    }
    if (p_section.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_section", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_section")).append(querySuffix).append(QUrl::toPercentEncoding(p_section.stringValue()));
    }
    if (p_cp_citation.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cp_citation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cp_citation")).append(querySuffix).append(QUrl::toPercentEncoding(p_cp_citation.stringValue()));
    }
    if (p_rank_order.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_rank_order", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_rank_order")).append(querySuffix).append(QUrl::toPercentEncoding(p_rank_order.stringValue()));
    }
    if (p_enf_program.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_enf_program", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_enf_program")).append(querySuffix).append(QUrl::toPercentEncoding(p_enf_program.stringValue()));
    }
    if (p_priority_area.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_priority_area", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_priority_area")).append(querySuffix).append(QUrl::toPercentEncoding(p_priority_area.stringValue()));
    }
    if (p_priority_area_desc.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_priority_area_desc", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_priority_area_desc")).append(querySuffix).append(QUrl::toPercentEncoding(p_priority_area_desc.stringValue()));
    }
    if (p_tribal.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_tribal", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_tribal")).append(querySuffix).append(QUrl::toPercentEncoding(p_tribal.stringValue()));
    }
    if (p_oeca_core.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_oeca_core", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_oeca_core")).append(querySuffix).append(QUrl::toPercentEncoding(p_oeca_core.stringValue()));
    }
    if (p_multimedia.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_multimedia", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_multimedia")).append(querySuffix).append(QUrl::toPercentEncoding(p_multimedia.stringValue()));
    }
    if (p_fed_case.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_case", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_case")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_case.stringValue()));
    }
    if (p_activity_contact.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_activity_contact", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_activity_contact")).append(querySuffix).append(QUrl::toPercentEncoding(p_activity_contact.stringValue()));
    }
    if (p_role.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_role", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_role")).append(querySuffix).append(QUrl::toPercentEncoding(p_role.stringValue()));
    }
    if (p_fed_penalty.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_penalty", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_penalty")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_penalty.stringValue()));
    }
    if (p_total_fed_penalty.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_fed_penalty", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_fed_penalty")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_fed_penalty.stringValue()));
    }
    if (p_cost_recovery.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_cost_recovery", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_cost_recovery")).append(querySuffix).append(QUrl::toPercentEncoding(p_cost_recovery.stringValue()));
    }
    if (p_total_cost_recovery.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_cost_recovery", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_cost_recovery")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_cost_recovery.stringValue()));
    }
    if (p_complying_actions.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_complying_actions", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_complying_actions")).append(querySuffix).append(QUrl::toPercentEncoding(p_complying_actions.stringValue()));
    }
    if (p_comp_act_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_comp_act_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_comp_act_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_comp_act_val.stringValue()));
    }
    if (p_total_comp_act_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_comp_act_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_comp_act_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_comp_act_val.stringValue()));
    }
    if (p_sep_cats.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sep_cats", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sep_cats")).append(querySuffix).append(QUrl::toPercentEncoding(p_sep_cats.stringValue()));
    }
    if (p_sep_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_sep_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_sep_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_sep_val.stringValue()));
    }
    if (p_total_sep_val.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_total_sep_val", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_total_sep_val")).append(querySuffix).append(QUrl::toPercentEncoding(p_total_sep_val.stringValue()));
    }
    if (p_lodged_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_lodged_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_lodged_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_lodged_date.stringValue()));
    }
    if (p_entered_date.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_entered_date", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_entered_date")).append(querySuffix).append(QUrl::toPercentEncoding(p_entered_date.stringValue()));
    }
    if (p_facility_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_facility_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_facility_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_facility_id.stringValue()));
    }
    if (p_fac_city.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_city", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_city")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_city.stringValue()));
    }
    if (p_fac_zip.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_zip", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_zip")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_zip.stringValue()));
    }
    if (p_fac_county.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fac_county", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fac_county")).append(querySuffix).append(QUrl::toPercentEncoding(p_fac_county.stringValue()));
    }
    if (p_case_summary.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_summary", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_summary")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_summary.stringValue()));
    }
    if (p_case_summary_type.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_case_summary_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_case_summary_type")).append(querySuffix).append(QUrl::toPercentEncoding(p_case_summary_type.stringValue()));
    }
    if (p_usmex.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_usmex", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_usmex")).append(querySuffix).append(QUrl::toPercentEncoding(p_usmex.stringValue()));
    }
    if (p_c1lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lat.stringValue()));
    }
    if (p_c1lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c1lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c1lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c1lon.stringValue()));
    }
    if (p_c2lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lat")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lat.stringValue()));
    }
    if (p_c2lon.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_c2lon", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_c2lon")).append(querySuffix).append(QUrl::toPercentEncoding(p_c2lon.stringValue()));
    }
    if (p_voluntary.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_voluntary", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_voluntary")).append(querySuffix).append(QUrl::toPercentEncoding(p_voluntary.stringValue()));
    }
    if (p_fed_indicator.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fed_indicator", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fed_indicator")).append(querySuffix).append(QUrl::toPercentEncoding(p_fed_indicator.stringValue()));
    }
    if (p_fntype.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_fntype", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_fntype")).append(querySuffix).append(QUrl::toPercentEncoding(p_fntype.stringValue()));
    }
    if (p_civil_criminal_indicator.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_civil_criminal_indicator", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_civil_criminal_indicator")).append(querySuffix).append(QUrl::toPercentEncoding(p_civil_criminal_indicator.stringValue()));
    }
    if (queryset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryset")).append(querySuffix).append(QUrl::toPercentEncoding(queryset.stringValue()));
    }
    if (responseset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "responseset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("responseset")).append(querySuffix).append(QUrl::toPercentEncoding(responseset.stringValue()));
    }
    if (maplist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maplist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maplist")).append(querySuffix).append(QUrl::toPercentEncoding(maplist.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    if (p_ocmap_fy.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_ocmap_fy", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_ocmap_fy")).append(querySuffix).append(QUrl::toPercentEncoding(p_ocmap_fy.stringValue()));
    }
    if (p_qs.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_qs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_qs")).append(querySuffix).append(QUrl::toPercentEncoding(p_qs.stringValue()));
    }
    if (p_has_map.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_has_map", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_has_map")).append(querySuffix).append(QUrl::toPercentEncoding(p_has_map.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCasesGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCasesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_cases_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCasesGetSignal(output);
        Q_EMIT caseRestServicesGetCasesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCasesGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCasesGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCasesPost(const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &p_case_category, const ::OpenAPI::OptionalParam<QString> &p_case_status, const ::OpenAPI::OptionalParam<QString> &p_milestone, const ::OpenAPI::OptionalParam<QString> &p_from_date, const ::OpenAPI::OptionalParam<QString> &p_to_date, const ::OpenAPI::OptionalParam<QString> &p_milestone_fy, const ::OpenAPI::OptionalParam<QString> &p_name, const ::OpenAPI::OptionalParam<QString> &p_name_type, const ::OpenAPI::OptionalParam<QString> &p_case_number, const ::OpenAPI::OptionalParam<QString> &p_docket_number, const ::OpenAPI::OptionalParam<QString> &p_court_docket_number, const ::OpenAPI::OptionalParam<QString> &p_activity_number, const ::OpenAPI::OptionalParam<QString> &p_case_lead, const ::OpenAPI::OptionalParam<QString> &p_case_sens_flg, const ::OpenAPI::OptionalParam<QString> &p_region, const ::OpenAPI::OptionalParam<QString> &p_state, const ::OpenAPI::OptionalParam<QString> &p_district, const ::OpenAPI::OptionalParam<QString> &p_sic, const ::OpenAPI::OptionalParam<QString> &p_sic_ao_naics, const ::OpenAPI::OptionalParam<QString> &p_sic_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_sic_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_naics, const ::OpenAPI::OptionalParam<QString> &p_naics_primary_flg, const ::OpenAPI::OptionalParam<QString> &p_naics_frs_flg, const ::OpenAPI::OptionalParam<QString> &p_enf_type, const ::OpenAPI::OptionalParam<QString> &p_law, const ::OpenAPI::OptionalParam<QString> &p_section, const ::OpenAPI::OptionalParam<QString> &p_cp_citation, const ::OpenAPI::OptionalParam<QString> &p_rank_order, const ::OpenAPI::OptionalParam<QString> &p_enf_program, const ::OpenAPI::OptionalParam<QString> &p_violation, const ::OpenAPI::OptionalParam<QString> &p_priority_area, const ::OpenAPI::OptionalParam<QString> &p_priority_area_desc, const ::OpenAPI::OptionalParam<QString> &p_tribal, const ::OpenAPI::OptionalParam<QString> &p_oeca_core, const ::OpenAPI::OptionalParam<QString> &p_multimedia, const ::OpenAPI::OptionalParam<QString> &p_fed_case, const ::OpenAPI::OptionalParam<QString> &p_activity_contact, const ::OpenAPI::OptionalParam<QString> &p_role, const ::OpenAPI::OptionalParam<QString> &p_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_total_fed_penalty, const ::OpenAPI::OptionalParam<QString> &p_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_total_cost_recovery, const ::OpenAPI::OptionalParam<QString> &p_complying_actions, const ::OpenAPI::OptionalParam<QString> &p_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_total_comp_act_val, const ::OpenAPI::OptionalParam<QString> &p_sep_cats, const ::OpenAPI::OptionalParam<QString> &p_sep_val, const ::OpenAPI::OptionalParam<QString> &p_total_sep_val, const ::OpenAPI::OptionalParam<QString> &p_lodged_date, const ::OpenAPI::OptionalParam<QString> &p_entered_date, const ::OpenAPI::OptionalParam<QString> &p_facility_id, const ::OpenAPI::OptionalParam<QString> &p_fac_city, const ::OpenAPI::OptionalParam<QString> &p_fac_zip, const ::OpenAPI::OptionalParam<QString> &p_fac_county, const ::OpenAPI::OptionalParam<QString> &p_case_summary, const ::OpenAPI::OptionalParam<QString> &p_case_summary_type, const ::OpenAPI::OptionalParam<QString> &p_usmex, const ::OpenAPI::OptionalParam<double> &p_c1lat, const ::OpenAPI::OptionalParam<double> &p_c1lon, const ::OpenAPI::OptionalParam<double> &p_c2lat, const ::OpenAPI::OptionalParam<double> &p_c2lon, const ::OpenAPI::OptionalParam<QString> &p_voluntary, const ::OpenAPI::OptionalParam<QString> &p_fed_indicator, const ::OpenAPI::OptionalParam<QString> &p_fntype, const ::OpenAPI::OptionalParam<QString> &p_civil_criminal_indicator, const ::OpenAPI::OptionalParam<double> &queryset, const ::OpenAPI::OptionalParam<double> &responseset, const ::OpenAPI::OptionalParam<QString> &maplist, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &qcolumns, const ::OpenAPI::OptionalParam<QString> &p_ocmap_fy, const ::OpenAPI::OptionalParam<QString> &p_qs, const ::OpenAPI::OptionalParam<QString> &p_has_map) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCasesPost"][_serverIndices.value("caseRestServicesGetCasesPost")].URL()+"/case_rest_services.get_cases");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (p_case_category.hasValue())
    {
        input.add_var("p_case_category", ::OpenAPI::toStringValue(p_case_category.value()));
    }
    if (p_case_status.hasValue())
    {
        input.add_var("p_case_status", ::OpenAPI::toStringValue(p_case_status.value()));
    }
    if (p_milestone.hasValue())
    {
        input.add_var("p_milestone", ::OpenAPI::toStringValue(p_milestone.value()));
    }
    if (p_from_date.hasValue())
    {
        input.add_var("p_from_date", ::OpenAPI::toStringValue(p_from_date.value()));
    }
    if (p_to_date.hasValue())
    {
        input.add_var("p_to_date", ::OpenAPI::toStringValue(p_to_date.value()));
    }
    if (p_milestone_fy.hasValue())
    {
        input.add_var("p_milestone_fy", ::OpenAPI::toStringValue(p_milestone_fy.value()));
    }
    if (p_name.hasValue())
    {
        input.add_var("p_name", ::OpenAPI::toStringValue(p_name.value()));
    }
    if (p_name_type.hasValue())
    {
        input.add_var("p_name_type", ::OpenAPI::toStringValue(p_name_type.value()));
    }
    if (p_case_number.hasValue())
    {
        input.add_var("p_case_number", ::OpenAPI::toStringValue(p_case_number.value()));
    }
    if (p_docket_number.hasValue())
    {
        input.add_var("p_docket_number", ::OpenAPI::toStringValue(p_docket_number.value()));
    }
    if (p_court_docket_number.hasValue())
    {
        input.add_var("p_court_docket_number", ::OpenAPI::toStringValue(p_court_docket_number.value()));
    }
    if (p_activity_number.hasValue())
    {
        input.add_var("p_activity_number", ::OpenAPI::toStringValue(p_activity_number.value()));
    }
    if (p_case_lead.hasValue())
    {
        input.add_var("p_case_lead", ::OpenAPI::toStringValue(p_case_lead.value()));
    }
    if (p_case_sens_flg.hasValue())
    {
        input.add_var("p_case_sens_flg", ::OpenAPI::toStringValue(p_case_sens_flg.value()));
    }
    if (p_region.hasValue())
    {
        input.add_var("p_region", ::OpenAPI::toStringValue(p_region.value()));
    }
    if (p_state.hasValue())
    {
        input.add_var("p_state", ::OpenAPI::toStringValue(p_state.value()));
    }
    if (p_district.hasValue())
    {
        input.add_var("p_district", ::OpenAPI::toStringValue(p_district.value()));
    }
    if (p_sic.hasValue())
    {
        input.add_var("p_sic", ::OpenAPI::toStringValue(p_sic.value()));
    }
    if (p_sic_ao_naics.hasValue())
    {
        input.add_var("p_sic_ao_naics", ::OpenAPI::toStringValue(p_sic_ao_naics.value()));
    }
    if (p_sic_primary_flg.hasValue())
    {
        input.add_var("p_sic_primary_flg", ::OpenAPI::toStringValue(p_sic_primary_flg.value()));
    }
    if (p_sic_frs_flg.hasValue())
    {
        input.add_var("p_sic_frs_flg", ::OpenAPI::toStringValue(p_sic_frs_flg.value()));
    }
    if (p_naics.hasValue())
    {
        input.add_var("p_naics", ::OpenAPI::toStringValue(p_naics.value()));
    }
    if (p_naics_primary_flg.hasValue())
    {
        input.add_var("p_naics_primary_flg", ::OpenAPI::toStringValue(p_naics_primary_flg.value()));
    }
    if (p_naics_frs_flg.hasValue())
    {
        input.add_var("p_naics_frs_flg", ::OpenAPI::toStringValue(p_naics_frs_flg.value()));
    }
    if (p_enf_type.hasValue())
    {
        input.add_var("p_enf_type", ::OpenAPI::toStringValue(p_enf_type.value()));
    }
    if (p_law.hasValue())
    {
        input.add_var("p_law", ::OpenAPI::toStringValue(p_law.value()));
    }
    if (p_section.hasValue())
    {
        input.add_var("p_section", ::OpenAPI::toStringValue(p_section.value()));
    }
    if (p_cp_citation.hasValue())
    {
        input.add_var("p_cp_citation", ::OpenAPI::toStringValue(p_cp_citation.value()));
    }
    if (p_rank_order.hasValue())
    {
        input.add_var("p_rank_order", ::OpenAPI::toStringValue(p_rank_order.value()));
    }
    if (p_enf_program.hasValue())
    {
        input.add_var("p_enf_program", ::OpenAPI::toStringValue(p_enf_program.value()));
    }
    if (p_violation.hasValue())
    {
        input.add_var("p_violation", ::OpenAPI::toStringValue(p_violation.value()));
    }
    if (p_priority_area.hasValue())
    {
        input.add_var("p_priority_area", ::OpenAPI::toStringValue(p_priority_area.value()));
    }
    if (p_priority_area_desc.hasValue())
    {
        input.add_var("p_priority_area_desc", ::OpenAPI::toStringValue(p_priority_area_desc.value()));
    }
    if (p_tribal.hasValue())
    {
        input.add_var("p_tribal", ::OpenAPI::toStringValue(p_tribal.value()));
    }
    if (p_oeca_core.hasValue())
    {
        input.add_var("p_oeca_core", ::OpenAPI::toStringValue(p_oeca_core.value()));
    }
    if (p_multimedia.hasValue())
    {
        input.add_var("p_multimedia", ::OpenAPI::toStringValue(p_multimedia.value()));
    }
    if (p_fed_case.hasValue())
    {
        input.add_var("p_fed_case", ::OpenAPI::toStringValue(p_fed_case.value()));
    }
    if (p_activity_contact.hasValue())
    {
        input.add_var("p_activity_contact", ::OpenAPI::toStringValue(p_activity_contact.value()));
    }
    if (p_role.hasValue())
    {
        input.add_var("p_role", ::OpenAPI::toStringValue(p_role.value()));
    }
    if (p_fed_penalty.hasValue())
    {
        input.add_var("p_fed_penalty", ::OpenAPI::toStringValue(p_fed_penalty.value()));
    }
    if (p_total_fed_penalty.hasValue())
    {
        input.add_var("p_total_fed_penalty", ::OpenAPI::toStringValue(p_total_fed_penalty.value()));
    }
    if (p_cost_recovery.hasValue())
    {
        input.add_var("p_cost_recovery", ::OpenAPI::toStringValue(p_cost_recovery.value()));
    }
    if (p_total_cost_recovery.hasValue())
    {
        input.add_var("p_total_cost_recovery", ::OpenAPI::toStringValue(p_total_cost_recovery.value()));
    }
    if (p_complying_actions.hasValue())
    {
        input.add_var("p_complying_actions", ::OpenAPI::toStringValue(p_complying_actions.value()));
    }
    if (p_comp_act_val.hasValue())
    {
        input.add_var("p_comp_act_val", ::OpenAPI::toStringValue(p_comp_act_val.value()));
    }
    if (p_total_comp_act_val.hasValue())
    {
        input.add_var("p_total_comp_act_val", ::OpenAPI::toStringValue(p_total_comp_act_val.value()));
    }
    if (p_sep_cats.hasValue())
    {
        input.add_var("p_sep_cats", ::OpenAPI::toStringValue(p_sep_cats.value()));
    }
    if (p_sep_val.hasValue())
    {
        input.add_var("p_sep_val", ::OpenAPI::toStringValue(p_sep_val.value()));
    }
    if (p_total_sep_val.hasValue())
    {
        input.add_var("p_total_sep_val", ::OpenAPI::toStringValue(p_total_sep_val.value()));
    }
    if (p_lodged_date.hasValue())
    {
        input.add_var("p_lodged_date", ::OpenAPI::toStringValue(p_lodged_date.value()));
    }
    if (p_entered_date.hasValue())
    {
        input.add_var("p_entered_date", ::OpenAPI::toStringValue(p_entered_date.value()));
    }
    if (p_facility_id.hasValue())
    {
        input.add_var("p_facility_id", ::OpenAPI::toStringValue(p_facility_id.value()));
    }
    if (p_fac_city.hasValue())
    {
        input.add_var("p_fac_city", ::OpenAPI::toStringValue(p_fac_city.value()));
    }
    if (p_fac_zip.hasValue())
    {
        input.add_var("p_fac_zip", ::OpenAPI::toStringValue(p_fac_zip.value()));
    }
    if (p_fac_county.hasValue())
    {
        input.add_var("p_fac_county", ::OpenAPI::toStringValue(p_fac_county.value()));
    }
    if (p_case_summary.hasValue())
    {
        input.add_var("p_case_summary", ::OpenAPI::toStringValue(p_case_summary.value()));
    }
    if (p_case_summary_type.hasValue())
    {
        input.add_var("p_case_summary_type", ::OpenAPI::toStringValue(p_case_summary_type.value()));
    }
    if (p_usmex.hasValue())
    {
        input.add_var("p_usmex", ::OpenAPI::toStringValue(p_usmex.value()));
    }
    if (p_c1lat.hasValue())
    {
        input.add_var("p_c1lat", ::OpenAPI::toStringValue(p_c1lat.value()));
    }
    if (p_c1lon.hasValue())
    {
        input.add_var("p_c1lon", ::OpenAPI::toStringValue(p_c1lon.value()));
    }
    if (p_c2lat.hasValue())
    {
        input.add_var("p_c2lat", ::OpenAPI::toStringValue(p_c2lat.value()));
    }
    if (p_c2lon.hasValue())
    {
        input.add_var("p_c2lon", ::OpenAPI::toStringValue(p_c2lon.value()));
    }
    if (p_voluntary.hasValue())
    {
        input.add_var("p_voluntary", ::OpenAPI::toStringValue(p_voluntary.value()));
    }
    if (p_fed_indicator.hasValue())
    {
        input.add_var("p_fed_indicator", ::OpenAPI::toStringValue(p_fed_indicator.value()));
    }
    if (p_fntype.hasValue())
    {
        input.add_var("p_fntype", ::OpenAPI::toStringValue(p_fntype.value()));
    }
    if (p_civil_criminal_indicator.hasValue())
    {
        input.add_var("p_civil_criminal_indicator", ::OpenAPI::toStringValue(p_civil_criminal_indicator.value()));
    }
    if (queryset.hasValue())
    {
        input.add_var("queryset", ::OpenAPI::toStringValue(queryset.value()));
    }
    if (responseset.hasValue())
    {
        input.add_var("responseset", ::OpenAPI::toStringValue(responseset.value()));
    }
    if (maplist.hasValue())
    {
        input.add_var("maplist", ::OpenAPI::toStringValue(maplist.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }
    if (p_ocmap_fy.hasValue())
    {
        input.add_var("p_ocmap_fy", ::OpenAPI::toStringValue(p_ocmap_fy.value()));
    }
    if (p_qs.hasValue())
    {
        input.add_var("p_qs", ::OpenAPI::toStringValue(p_qs.value()));
    }
    if (p_has_map.hasValue())
    {
        input.add_var("p_has_map", ::OpenAPI::toStringValue(p_has_map.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCasesPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCasesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_cases_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCasesPostSignal(output);
        Q_EMIT caseRestServicesGetCasesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCasesPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCasesPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCasesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCrcaseReportGet(const ::OpenAPI::OptionalParam<QString> &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &mapset) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCrcaseReportGet"][_serverIndices.value("caseRestServicesGetCrcaseReportGet")].URL()+"/case_rest_services.get_crcase_report");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (p_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id.stringValue()));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (mapset.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "mapset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("mapset")).append(querySuffix).append(QUrl::toPercentEncoding(mapset.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCrcaseReportGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCrcaseReportGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_crcase_report_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCrcaseReportGetSignal(output);
        Q_EMIT caseRestServicesGetCrcaseReportGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCrcaseReportGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCrcaseReportGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCrcaseReportGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCrcaseReportGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetCrcaseReportPost(const ::OpenAPI::OptionalParam<QString> &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetCrcaseReportPost"][_serverIndices.value("caseRestServicesGetCrcaseReportPost")].URL()+"/case_rest_services.get_crcase_report");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (p_id.hasValue())
    {
        input.add_var("p_id", ::OpenAPI::toStringValue(p_id.value()));
    }
    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetCrcaseReportPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetCrcaseReportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_crcase_report_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetCrcaseReportPostSignal(output);
        Q_EMIT caseRestServicesGetCrcaseReportPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetCrcaseReportPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCrcaseReportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetCrcaseReportPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetCrcaseReportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetDownloadGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetDownloadGet"][_serverIndices.value("caseRestServicesGetDownloadGet")].URL()+"/case_rest_services.get_download");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetDownloadGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetDownloadGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetDownloadGetSignal(output);
        Q_EMIT caseRestServicesGetDownloadGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetDownloadGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetDownloadGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetDownloadGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetDownloadGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetDownloadPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetDownloadPost"][_serverIndices.value("caseRestServicesGetDownloadPost")].URL()+"/case_rest_services.get_download");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetDownloadPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetDownloadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetDownloadPostSignal(output);
        Q_EMIT caseRestServicesGetDownloadPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetDownloadPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetDownloadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetDownloadPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetDownloadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCaseGet(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetFacilitiesFromCaseGet"][_serverIndices.value("caseRestServicesGetFacilitiesFromCaseGet")].URL()+"/case_rest_services.get_facilities_from_case");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCaseGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCaseGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_facilities_from_case_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignal(output);
        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetFacilitiesFromCaseGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCasePost(const QString &p_id, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetFacilitiesFromCasePost"][_serverIndices.value("caseRestServicesGetFacilitiesFromCasePost")].URL()+"/case_rest_services.get_facilities_from_case");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "p_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("p_id")).append(querySuffix).append(QUrl::toPercentEncoding(p_id));
    }
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCasePostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetFacilitiesFromCasePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_facilities_from_case_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignal(output);
        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetFacilitiesFromCasePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetMapGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetMapGet"][_serverIndices.value("caseRestServicesGetMapGet")].URL()+"/case_rest_services.get_map");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (tablelist.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tablelist", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tablelist")).append(querySuffix).append(QUrl::toPercentEncoding(tablelist.stringValue()));
    }
    if (c1_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c1_lat.stringValue()));
    }
    if (c1_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c1_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c1_long")).append(querySuffix).append(QUrl::toPercentEncoding(c1_long.stringValue()));
    }
    if (c2_lat.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_lat", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_lat")).append(querySuffix).append(QUrl::toPercentEncoding(c2_lat.stringValue()));
    }
    if (c2_long.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "c2_long", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("c2_long")).append(querySuffix).append(QUrl::toPercentEncoding(c2_long.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetMapGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetMapGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetMapGetSignal(output);
        Q_EMIT caseRestServicesGetMapGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetMapGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetMapGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetMapGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetMapGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetMapPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &tablelist, const ::OpenAPI::OptionalParam<double> &c1_lat, const ::OpenAPI::OptionalParam<double> &c1_long, const ::OpenAPI::OptionalParam<double> &c2_lat, const ::OpenAPI::OptionalParam<double> &c2_long, const ::OpenAPI::OptionalParam<QString> &mapset) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetMapPost"][_serverIndices.value("caseRestServicesGetMapPost")].URL()+"/case_rest_services.get_map");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (tablelist.hasValue())
    {
        input.add_var("tablelist", ::OpenAPI::toStringValue(tablelist.value()));
    }
    if (c1_lat.hasValue())
    {
        input.add_var("c1_lat", ::OpenAPI::toStringValue(c1_lat.value()));
    }
    if (c1_long.hasValue())
    {
        input.add_var("c1_long", ::OpenAPI::toStringValue(c1_long.value()));
    }
    if (c2_lat.hasValue())
    {
        input.add_var("c2_lat", ::OpenAPI::toStringValue(c2_lat.value()));
    }
    if (c2_long.hasValue())
    {
        input.add_var("c2_long", ::OpenAPI::toStringValue(c2_long.value()));
    }
    if (mapset.hasValue())
    {
        input.add_var("mapset", ::OpenAPI::toStringValue(mapset.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetMapPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetMapPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_map_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetMapPostSignal(output);
        Q_EMIT caseRestServicesGetMapPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetMapPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetMapPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetMapPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetMapPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetQidGet(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetQidGet"][_serverIndices.value("caseRestServicesGetQidGet")].URL()+"/case_rest_services.get_qid");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (output.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "output", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("output")).append(querySuffix).append(QUrl::toPercentEncoding(output.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qid", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qid")).append(querySuffix).append(QUrl::toPercentEncoding(qid));
    }
    if (pageno.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageno", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageno")).append(querySuffix).append(QUrl::toPercentEncoding(pageno.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (newsort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "newsort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("newsort")).append(querySuffix).append(QUrl::toPercentEncoding(newsort.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (qcolumns.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qcolumns", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qcolumns")).append(querySuffix).append(QUrl::toPercentEncoding(qcolumns.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetQidGetCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetQidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetQidGetSignal(output);
        Q_EMIT caseRestServicesGetQidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetQidGetSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetQidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetQidGetSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetQidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::caseRestServicesGetQidPost(const QString &qid, const ::OpenAPI::OptionalParam<QString> &output, const ::OpenAPI::OptionalParam<double> &pageno, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<double> &newsort, const ::OpenAPI::OptionalParam<QString> &descending, const ::OpenAPI::OptionalParam<QString> &qcolumns) {
    QString fullPath = QString(_serverConfigs["caseRestServicesGetQidPost"][_serverIndices.value("caseRestServicesGetQidPost")].URL()+"/case_rest_services.get_qid");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (output.hasValue())
    {
        input.add_var("output", ::OpenAPI::toStringValue(output.value()));
    }
    
    {
        input.add_var("qid", ::OpenAPI::toStringValue(qid));
    }
    if (pageno.hasValue())
    {
        input.add_var("pageno", ::OpenAPI::toStringValue(pageno.value()));
    }
    if (callback.hasValue())
    {
        input.add_var("callback", ::OpenAPI::toStringValue(callback.value()));
    }
    if (newsort.hasValue())
    {
        input.add_var("newsort", ::OpenAPI::toStringValue(newsort.value()));
    }
    if (descending.hasValue())
    {
        input.add_var("descending", ::OpenAPI::toStringValue(descending.value()));
    }
    if (qcolumns.hasValue())
    {
        input.add_var("qcolumns", ::OpenAPI::toStringValue(qcolumns.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICaseEnforcementApi::caseRestServicesGetQidPostCallback);
    connect(this, &OAICaseEnforcementApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICaseEnforcementApi::caseRestServicesGetQidPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_case_rest_services_get_qid_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT caseRestServicesGetQidPostSignal(output);
        Q_EMIT caseRestServicesGetQidPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT caseRestServicesGetQidPostSignalE(output, error_type, error_str);
        Q_EMIT caseRestServicesGetQidPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT caseRestServicesGetQidPostSignalError(output, error_type, error_str);
        Q_EMIT caseRestServicesGetQidPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICaseEnforcementApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
