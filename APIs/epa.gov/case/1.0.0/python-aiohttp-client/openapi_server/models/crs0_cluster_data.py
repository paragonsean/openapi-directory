# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs0ClusterData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, afr_rows: str=None, caa_rows: str=None, cercla_rows: str=None, cwa_rows: str=None, cluster_count: str=None, cluster_icon: str=None, cluster_latitude: str=None, cluster_longitude: str=None, cluster_name: str=None, cluster_type: str=None, cluster_value: str=None, criminal_rows: str=None, epcra_rows: str=None, fifra_rows: str=None, fed_pen_rows: str=None, federal_rows: str=None, jdc_rows: str=None, object_id: str=None, rcra_rows: str=None, sdwa_rows: str=None, sep_rows: str=None, tsca_rows: str=None):
        """Crs0ClusterData - a model defined in OpenAPI

        :param afr_rows: The afr_rows of this Crs0ClusterData.
        :param caa_rows: The caa_rows of this Crs0ClusterData.
        :param cercla_rows: The cercla_rows of this Crs0ClusterData.
        :param cwa_rows: The cwa_rows of this Crs0ClusterData.
        :param cluster_count: The cluster_count of this Crs0ClusterData.
        :param cluster_icon: The cluster_icon of this Crs0ClusterData.
        :param cluster_latitude: The cluster_latitude of this Crs0ClusterData.
        :param cluster_longitude: The cluster_longitude of this Crs0ClusterData.
        :param cluster_name: The cluster_name of this Crs0ClusterData.
        :param cluster_type: The cluster_type of this Crs0ClusterData.
        :param cluster_value: The cluster_value of this Crs0ClusterData.
        :param criminal_rows: The criminal_rows of this Crs0ClusterData.
        :param epcra_rows: The epcra_rows of this Crs0ClusterData.
        :param fifra_rows: The fifra_rows of this Crs0ClusterData.
        :param fed_pen_rows: The fed_pen_rows of this Crs0ClusterData.
        :param federal_rows: The federal_rows of this Crs0ClusterData.
        :param jdc_rows: The jdc_rows of this Crs0ClusterData.
        :param object_id: The object_id of this Crs0ClusterData.
        :param rcra_rows: The rcra_rows of this Crs0ClusterData.
        :param sdwa_rows: The sdwa_rows of this Crs0ClusterData.
        :param sep_rows: The sep_rows of this Crs0ClusterData.
        :param tsca_rows: The tsca_rows of this Crs0ClusterData.
        """
        self.openapi_types = {
            'afr_rows': str,
            'caa_rows': str,
            'cercla_rows': str,
            'cwa_rows': str,
            'cluster_count': str,
            'cluster_icon': str,
            'cluster_latitude': str,
            'cluster_longitude': str,
            'cluster_name': str,
            'cluster_type': str,
            'cluster_value': str,
            'criminal_rows': str,
            'epcra_rows': str,
            'fifra_rows': str,
            'fed_pen_rows': str,
            'federal_rows': str,
            'jdc_rows': str,
            'object_id': str,
            'rcra_rows': str,
            'sdwa_rows': str,
            'sep_rows': str,
            'tsca_rows': str
        }

        self.attribute_map = {
            'afr_rows': 'AFRRows',
            'caa_rows': 'CAARows',
            'cercla_rows': 'CERCLARows',
            'cwa_rows': 'CWARows',
            'cluster_count': 'ClusterCount',
            'cluster_icon': 'ClusterIcon',
            'cluster_latitude': 'ClusterLatitude',
            'cluster_longitude': 'ClusterLongitude',
            'cluster_name': 'ClusterName',
            'cluster_type': 'ClusterType',
            'cluster_value': 'ClusterValue',
            'criminal_rows': 'CriminalRows',
            'epcra_rows': 'EPCRARows',
            'fifra_rows': 'FIFRARows',
            'fed_pen_rows': 'FedPenRows',
            'federal_rows': 'FederalRows',
            'jdc_rows': 'JDCRows',
            'object_id': 'ObjectId',
            'rcra_rows': 'RCRARows',
            'sdwa_rows': 'SDWARows',
            'sep_rows': 'SEPRows',
            'tsca_rows': 'TSCARows'
        }

        self._afr_rows = afr_rows
        self._caa_rows = caa_rows
        self._cercla_rows = cercla_rows
        self._cwa_rows = cwa_rows
        self._cluster_count = cluster_count
        self._cluster_icon = cluster_icon
        self._cluster_latitude = cluster_latitude
        self._cluster_longitude = cluster_longitude
        self._cluster_name = cluster_name
        self._cluster_type = cluster_type
        self._cluster_value = cluster_value
        self._criminal_rows = criminal_rows
        self._epcra_rows = epcra_rows
        self._fifra_rows = fifra_rows
        self._fed_pen_rows = fed_pen_rows
        self._federal_rows = federal_rows
        self._jdc_rows = jdc_rows
        self._object_id = object_id
        self._rcra_rows = rcra_rows
        self._sdwa_rows = sdwa_rows
        self._sep_rows = sep_rows
        self._tsca_rows = tsca_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs0ClusterData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs0_ClusterData of this Crs0ClusterData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def afr_rows(self):
        """Gets the afr_rows of this Crs0ClusterData.

        Displays the number of Administrative Formal cases within the search results.

        :return: The afr_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._afr_rows

    @afr_rows.setter
    def afr_rows(self, afr_rows):
        """Sets the afr_rows of this Crs0ClusterData.

        Displays the number of Administrative Formal cases within the search results.

        :param afr_rows: The afr_rows of this Crs0ClusterData.
        :type afr_rows: str
        """
        if afr_rows is None:
            raise ValueError("Invalid value for `afr_rows`, must not be `None`")

        self._afr_rows = afr_rows

    @property
    def caa_rows(self):
        """Gets the caa_rows of this Crs0ClusterData.

        The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.

        :return: The caa_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._caa_rows

    @caa_rows.setter
    def caa_rows(self, caa_rows):
        """Sets the caa_rows of this Crs0ClusterData.

        The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.

        :param caa_rows: The caa_rows of this Crs0ClusterData.
        :type caa_rows: str
        """
        if caa_rows is None:
            raise ValueError("Invalid value for `caa_rows`, must not be `None`")

        self._caa_rows = caa_rows

    @property
    def cercla_rows(self):
        """Gets the cercla_rows of this Crs0ClusterData.

        The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).

        :return: The cercla_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._cercla_rows

    @cercla_rows.setter
    def cercla_rows(self, cercla_rows):
        """Sets the cercla_rows of this Crs0ClusterData.

        The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).

        :param cercla_rows: The cercla_rows of this Crs0ClusterData.
        :type cercla_rows: str
        """
        if cercla_rows is None:
            raise ValueError("Invalid value for `cercla_rows`, must not be `None`")

        self._cercla_rows = cercla_rows

    @property
    def cwa_rows(self):
        """Gets the cwa_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :return: The cwa_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._cwa_rows

    @cwa_rows.setter
    def cwa_rows(self, cwa_rows):
        """Sets the cwa_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :param cwa_rows: The cwa_rows of this Crs0ClusterData.
        :type cwa_rows: str
        """
        if cwa_rows is None:
            raise ValueError("Invalid value for `cwa_rows`, must not be `None`")

        self._cwa_rows = cwa_rows

    @property
    def cluster_count(self):
        """Gets the cluster_count of this Crs0ClusterData.

        The number of facilities or cases in the cluster.

        :return: The cluster_count of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """Sets the cluster_count of this Crs0ClusterData.

        The number of facilities or cases in the cluster.

        :param cluster_count: The cluster_count of this Crs0ClusterData.
        :type cluster_count: str
        """
        if cluster_count is None:
            raise ValueError("Invalid value for `cluster_count`, must not be `None`")

        self._cluster_count = cluster_count

    @property
    def cluster_icon(self):
        """Gets the cluster_icon of this Crs0ClusterData.

        The icon file used to reprsent the cluster.

        :return: The cluster_icon of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_icon

    @cluster_icon.setter
    def cluster_icon(self, cluster_icon):
        """Sets the cluster_icon of this Crs0ClusterData.

        The icon file used to reprsent the cluster.

        :param cluster_icon: The cluster_icon of this Crs0ClusterData.
        :type cluster_icon: str
        """
        if cluster_icon is None:
            raise ValueError("Invalid value for `cluster_icon`, must not be `None`")

        self._cluster_icon = cluster_icon

    @property
    def cluster_latitude(self):
        """Gets the cluster_latitude of this Crs0ClusterData.

        The latitude in decimal degrees expressed using the NAD83 horizontal datum.

        :return: The cluster_latitude of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_latitude

    @cluster_latitude.setter
    def cluster_latitude(self, cluster_latitude):
        """Sets the cluster_latitude of this Crs0ClusterData.

        The latitude in decimal degrees expressed using the NAD83 horizontal datum.

        :param cluster_latitude: The cluster_latitude of this Crs0ClusterData.
        :type cluster_latitude: str
        """
        if cluster_latitude is None:
            raise ValueError("Invalid value for `cluster_latitude`, must not be `None`")

        self._cluster_latitude = cluster_latitude

    @property
    def cluster_longitude(self):
        """Gets the cluster_longitude of this Crs0ClusterData.

        The longitude in decimal degrees expressed using the NAD83 horizontal datum.

        :return: The cluster_longitude of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_longitude

    @cluster_longitude.setter
    def cluster_longitude(self, cluster_longitude):
        """Sets the cluster_longitude of this Crs0ClusterData.

        The longitude in decimal degrees expressed using the NAD83 horizontal datum.

        :param cluster_longitude: The cluster_longitude of this Crs0ClusterData.
        :type cluster_longitude: str
        """
        if cluster_longitude is None:
            raise ValueError("Invalid value for `cluster_longitude`, must not be `None`")

        self._cluster_longitude = cluster_longitude

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Crs0ClusterData.

        THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314

        :return: The cluster_name of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Crs0ClusterData.

        THe name or the identifier of the geographic area used for clustering.  Examples:  Alaska, Fairfax County, 22314

        :param cluster_name: The cluster_name of this Crs0ClusterData.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def cluster_type(self):
        """Gets the cluster_type of this Crs0ClusterData.

        The representative geographic area used for clustering.  Examples:  State, County, Zip Code

        :return: The cluster_type of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this Crs0ClusterData.

        The representative geographic area used for clustering.  Examples:  State, County, Zip Code

        :param cluster_type: The cluster_type of this Crs0ClusterData.
        :type cluster_type: str
        """
        if cluster_type is None:
            raise ValueError("Invalid value for `cluster_type`, must not be `None`")

        self._cluster_type = cluster_type

    @property
    def cluster_value(self):
        """Gets the cluster_value of this Crs0ClusterData.

        The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011

        :return: The cluster_value of this Crs0ClusterData.
        :rtype: str
        """
        return self._cluster_value

    @cluster_value.setter
    def cluster_value(self, cluster_value):
        """Sets the cluster_value of this Crs0ClusterData.

        The value, internal to the database report object, that represents this cluster, like a state abbreviation, zip code, or county FIPS code.  Examples: AK, 22314, 50011

        :param cluster_value: The cluster_value of this Crs0ClusterData.
        :type cluster_value: str
        """
        if cluster_value is None:
            raise ValueError("Invalid value for `cluster_value`, must not be `None`")

        self._cluster_value = cluster_value

    @property
    def criminal_rows(self):
        """Gets the criminal_rows of this Crs0ClusterData.

        Displays the number of criminal enforcement cases within the search results.

        :return: The criminal_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._criminal_rows

    @criminal_rows.setter
    def criminal_rows(self, criminal_rows):
        """Sets the criminal_rows of this Crs0ClusterData.

        Displays the number of criminal enforcement cases within the search results.

        :param criminal_rows: The criminal_rows of this Crs0ClusterData.
        :type criminal_rows: str
        """
        if criminal_rows is None:
            raise ValueError("Invalid value for `criminal_rows`, must not be `None`")

        self._criminal_rows = criminal_rows

    @property
    def epcra_rows(self):
        """Gets the epcra_rows of this Crs0ClusterData.

        The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).

        :return: The epcra_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._epcra_rows

    @epcra_rows.setter
    def epcra_rows(self, epcra_rows):
        """Sets the epcra_rows of this Crs0ClusterData.

        The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).

        :param epcra_rows: The epcra_rows of this Crs0ClusterData.
        :type epcra_rows: str
        """
        if epcra_rows is None:
            raise ValueError("Invalid value for `epcra_rows`, must not be `None`")

        self._epcra_rows = epcra_rows

    @property
    def fifra_rows(self):
        """Gets the fifra_rows of this Crs0ClusterData.

        The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).

        :return: The fifra_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._fifra_rows

    @fifra_rows.setter
    def fifra_rows(self, fifra_rows):
        """Sets the fifra_rows of this Crs0ClusterData.

        The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).

        :param fifra_rows: The fifra_rows of this Crs0ClusterData.
        :type fifra_rows: str
        """
        if fifra_rows is None:
            raise ValueError("Invalid value for `fifra_rows`, must not be `None`")

        self._fifra_rows = fifra_rows

    @property
    def fed_pen_rows(self):
        """Gets the fed_pen_rows of this Crs0ClusterData.

        Displays the number of cases with federal penalty assessed greater than $0.

        :return: The fed_pen_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._fed_pen_rows

    @fed_pen_rows.setter
    def fed_pen_rows(self, fed_pen_rows):
        """Sets the fed_pen_rows of this Crs0ClusterData.

        Displays the number of cases with federal penalty assessed greater than $0.

        :param fed_pen_rows: The fed_pen_rows of this Crs0ClusterData.
        :type fed_pen_rows: str
        """
        if fed_pen_rows is None:
            raise ValueError("Invalid value for `fed_pen_rows`, must not be `None`")

        self._fed_pen_rows = fed_pen_rows

    @property
    def federal_rows(self):
        """Gets the federal_rows of this Crs0ClusterData.

        The number of facilities or cases within the result set that have a relationship to a Federal facility.

        :return: The federal_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._federal_rows

    @federal_rows.setter
    def federal_rows(self, federal_rows):
        """Sets the federal_rows of this Crs0ClusterData.

        The number of facilities or cases within the result set that have a relationship to a Federal facility.

        :param federal_rows: The federal_rows of this Crs0ClusterData.
        :type federal_rows: str
        """
        if federal_rows is None:
            raise ValueError("Invalid value for `federal_rows`, must not be `None`")

        self._federal_rows = federal_rows

    @property
    def jdc_rows(self):
        """Gets the jdc_rows of this Crs0ClusterData.

        Displays the number of Judicial cases within the search results.

        :return: The jdc_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._jdc_rows

    @jdc_rows.setter
    def jdc_rows(self, jdc_rows):
        """Sets the jdc_rows of this Crs0ClusterData.

        Displays the number of Judicial cases within the search results.

        :param jdc_rows: The jdc_rows of this Crs0ClusterData.
        :type jdc_rows: str
        """
        if jdc_rows is None:
            raise ValueError("Invalid value for `jdc_rows`, must not be `None`")

        self._jdc_rows = jdc_rows

    @property
    def object_id(self):
        """Gets the object_id of this Crs0ClusterData.

        Sequential number assigned to each facility or cluster returned.

        :return: The object_id of this Crs0ClusterData.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Crs0ClusterData.

        Sequential number assigned to each facility or cluster returned.

        :param object_id: The object_id of this Crs0ClusterData.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def rcra_rows(self):
        """Gets the rcra_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :return: The rcra_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._rcra_rows

    @rcra_rows.setter
    def rcra_rows(self, rcra_rows):
        """Sets the rcra_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :param rcra_rows: The rcra_rows of this Crs0ClusterData.
        :type rcra_rows: str
        """
        if rcra_rows is None:
            raise ValueError("Invalid value for `rcra_rows`, must not be `None`")

        self._rcra_rows = rcra_rows

    @property
    def sdwa_rows(self):
        """Gets the sdwa_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.

        :return: The sdwa_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._sdwa_rows

    @sdwa_rows.setter
    def sdwa_rows(self, sdwa_rows):
        """Sets the sdwa_rows of this Crs0ClusterData.

        The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.

        :param sdwa_rows: The sdwa_rows of this Crs0ClusterData.
        :type sdwa_rows: str
        """
        if sdwa_rows is None:
            raise ValueError("Invalid value for `sdwa_rows`, must not be `None`")

        self._sdwa_rows = sdwa_rows

    @property
    def sep_rows(self):
        """Gets the sep_rows of this Crs0ClusterData.

        Displays the number of cases with SEP amount greater than $0.

        :return: The sep_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._sep_rows

    @sep_rows.setter
    def sep_rows(self, sep_rows):
        """Sets the sep_rows of this Crs0ClusterData.

        Displays the number of cases with SEP amount greater than $0.

        :param sep_rows: The sep_rows of this Crs0ClusterData.
        :type sep_rows: str
        """
        if sep_rows is None:
            raise ValueError("Invalid value for `sep_rows`, must not be `None`")

        self._sep_rows = sep_rows

    @property
    def tsca_rows(self):
        """Gets the tsca_rows of this Crs0ClusterData.

        The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).

        :return: The tsca_rows of this Crs0ClusterData.
        :rtype: str
        """
        return self._tsca_rows

    @tsca_rows.setter
    def tsca_rows(self, tsca_rows):
        """Sets the tsca_rows of this Crs0ClusterData.

        The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).

        :param tsca_rows: The tsca_rows of this Crs0ClusterData.
        :type tsca_rows: str
        """
        if tsca_rows is None:
            raise ValueError("Invalid value for `tsca_rows`, must not be `None`")

        self._tsca_rows = tsca_rows
