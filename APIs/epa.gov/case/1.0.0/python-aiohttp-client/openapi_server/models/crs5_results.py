# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs0_cases import Crs0Cases
from openapi_server import util


class Crs5Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cases: List[Crs0Cases]=None, message: str=None, page_no: str=None, query_id: str=None, query_rows: str=None):
        """Crs5Results - a model defined in OpenAPI

        :param cases: The cases of this Crs5Results.
        :param message: The message of this Crs5Results.
        :param page_no: The page_no of this Crs5Results.
        :param query_id: The query_id of this Crs5Results.
        :param query_rows: The query_rows of this Crs5Results.
        """
        self.openapi_types = {
            'cases': List[Crs0Cases],
            'message': str,
            'page_no': str,
            'query_id': str,
            'query_rows': str
        }

        self.attribute_map = {
            'cases': 'Cases',
            'message': 'Message',
            'page_no': 'PageNo',
            'query_id': 'QueryID',
            'query_rows': 'QueryRows'
        }

        self._cases = cases
        self._message = message
        self._page_no = page_no
        self._query_id = query_id
        self._query_rows = query_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs5Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs5_Results of this Crs5Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cases(self):
        """Gets the cases of this Crs5Results.

        A summary of the violation(s), environmental problem(s), and a description of the cause of action.

        :return: The cases of this Crs5Results.
        :rtype: List[Crs0Cases]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Crs5Results.

        A summary of the violation(s), environmental problem(s), and a description of the cause of action.

        :param cases: The cases of this Crs5Results.
        :type cases: List[Crs0Cases]
        """
        if cases is None:
            raise ValueError("Invalid value for `cases`, must not be `None`")

        self._cases = cases

    @property
    def message(self):
        """Gets the message of this Crs5Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Crs5Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Crs5Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Crs5Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def page_no(self):
        """Gets the page_no of this Crs5Results.

        The number of pages of results returned

        :return: The page_no of this Crs5Results.
        :rtype: str
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """Sets the page_no of this Crs5Results.

        The number of pages of results returned

        :param page_no: The page_no of this Crs5Results.
        :type page_no: str
        """
        if page_no is None:
            raise ValueError("Invalid value for `page_no`, must not be `None`")

        self._page_no = page_no

    @property
    def query_id(self):
        """Gets the query_id of this Crs5Results.

        Sequential number assigned to entire search result

        :return: The query_id of this Crs5Results.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this Crs5Results.

        Sequential number assigned to entire search result

        :param query_id: The query_id of this Crs5Results.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")

        self._query_id = query_id

    @property
    def query_rows(self):
        """Gets the query_rows of this Crs5Results.

        Number of query results returned

        :return: The query_rows of this Crs5Results.
        :rtype: str
        """
        return self._query_rows

    @query_rows.setter
    def query_rows(self, query_rows):
        """Sets the query_rows of this Crs5Results.

        Number of query results returned

        :param query_rows: The query_rows of this Crs5Results.
        :type query_rows: str
        """
        if query_rows is None:
            raise ValueError("Invalid value for `query_rows`, must not be `None`")

        self._query_rows = query_rows
