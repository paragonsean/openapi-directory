# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1SupplementalEnvironmentalProjects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, sep_amount: str=None, sepid: str=None, sep_text: str=None):
        """Crs1SupplementalEnvironmentalProjects - a model defined in OpenAPI

        :param category: The category of this Crs1SupplementalEnvironmentalProjects.
        :param description: The description of this Crs1SupplementalEnvironmentalProjects.
        :param sep_amount: The sep_amount of this Crs1SupplementalEnvironmentalProjects.
        :param sepid: The sepid of this Crs1SupplementalEnvironmentalProjects.
        :param sep_text: The sep_text of this Crs1SupplementalEnvironmentalProjects.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'sep_amount': str,
            'sepid': str,
            'sep_text': str
        }

        self.attribute_map = {
            'category': 'Category',
            'description': 'Description',
            'sep_amount': 'SEPAmount',
            'sepid': 'SEPId',
            'sep_text': 'SEPText'
        }

        self._category = category
        self._description = description
        self._sep_amount = sep_amount
        self._sepid = sepid
        self._sep_text = sep_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1SupplementalEnvironmentalProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_SupplementalEnvironmentalProjects of this Crs1SupplementalEnvironmentalProjects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Crs1SupplementalEnvironmentalProjects.

        A code that uniquely identifies a category of Supplemental Environment Project (SEP) for a settlement (e.g., Assessments and Audits, Environmental Compliance Promotion, Emergency Planning and Preparedness, Environmental Restoration).

        :return: The category of this Crs1SupplementalEnvironmentalProjects.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Crs1SupplementalEnvironmentalProjects.

        A code that uniquely identifies a category of Supplemental Environment Project (SEP) for a settlement (e.g., Assessments and Audits, Environmental Compliance Promotion, Emergency Planning and Preparedness, Environmental Restoration).

        :param category: The category of this Crs1SupplementalEnvironmentalProjects.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def description(self):
        """Gets the description of this Crs1SupplementalEnvironmentalProjects.

        A description of the category of Supplemental Environment Project (SEP) for a settlement.

        :return: The description of this Crs1SupplementalEnvironmentalProjects.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Crs1SupplementalEnvironmentalProjects.

        A description of the category of Supplemental Environment Project (SEP) for a settlement.

        :param description: The description of this Crs1SupplementalEnvironmentalProjects.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def sep_amount(self):
        """Gets the sep_amount of this Crs1SupplementalEnvironmentalProjects.

        The cost applied to the type(s) of environmentally beneficial projects which a defendant/respondent agree to undertake in settlement of an enforcement action, but which the defendant/respondent is not otherwise legally required to perform.

        :return: The sep_amount of this Crs1SupplementalEnvironmentalProjects.
        :rtype: str
        """
        return self._sep_amount

    @sep_amount.setter
    def sep_amount(self, sep_amount):
        """Sets the sep_amount of this Crs1SupplementalEnvironmentalProjects.

        The cost applied to the type(s) of environmentally beneficial projects which a defendant/respondent agree to undertake in settlement of an enforcement action, but which the defendant/respondent is not otherwise legally required to perform.

        :param sep_amount: The sep_amount of this Crs1SupplementalEnvironmentalProjects.
        :type sep_amount: str
        """
        if sep_amount is None:
            raise ValueError("Invalid value for `sep_amount`, must not be `None`")

        self._sep_amount = sep_amount

    @property
    def sepid(self):
        """Gets the sepid of this Crs1SupplementalEnvironmentalProjects.

        The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.

        :return: The sepid of this Crs1SupplementalEnvironmentalProjects.
        :rtype: str
        """
        return self._sepid

    @sepid.setter
    def sepid(self, sepid):
        """Sets the sepid of this Crs1SupplementalEnvironmentalProjects.

        The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.

        :param sepid: The sepid of this Crs1SupplementalEnvironmentalProjects.
        :type sepid: str
        """
        if sepid is None:
            raise ValueError("Invalid value for `sepid`, must not be `None`")

        self._sepid = sepid

    @property
    def sep_text(self):
        """Gets the sep_text of this Crs1SupplementalEnvironmentalProjects.

        The free-form textual description used to further describe the SEP.

        :return: The sep_text of this Crs1SupplementalEnvironmentalProjects.
        :rtype: str
        """
        return self._sep_text

    @sep_text.setter
    def sep_text(self, sep_text):
        """Sets the sep_text of this Crs1SupplementalEnvironmentalProjects.

        The free-form textual description used to further describe the SEP.

        :param sep_text: The sep_text of this Crs1SupplementalEnvironmentalProjects.
        :type sep_text: str
        """
        if sep_text is None:
            raise ValueError("Invalid value for `sep_text`, must not be `None`")

        self._sep_text = sep_text
