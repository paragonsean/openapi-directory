# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs3CaseInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_identifier: str=None, case_summary: str=None, citations: str=None, fiscal_year: str=None, statutes: str=None):
        """Crs3CaseInformation - a model defined in OpenAPI

        :param case_identifier: The case_identifier of this Crs3CaseInformation.
        :param case_summary: The case_summary of this Crs3CaseInformation.
        :param citations: The citations of this Crs3CaseInformation.
        :param fiscal_year: The fiscal_year of this Crs3CaseInformation.
        :param statutes: The statutes of this Crs3CaseInformation.
        """
        self.openapi_types = {
            'case_identifier': str,
            'case_summary': str,
            'citations': str,
            'fiscal_year': str,
            'statutes': str
        }

        self.attribute_map = {
            'case_identifier': 'CaseIdentifier',
            'case_summary': 'CaseSummary',
            'citations': 'Citations',
            'fiscal_year': 'FiscalYear',
            'statutes': 'Statutes'
        }

        self._case_identifier = case_identifier
        self._case_summary = case_summary
        self._citations = citations
        self._fiscal_year = fiscal_year
        self._statutes = statutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs3CaseInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs3_CaseInformation of this Crs3CaseInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_identifier(self):
        """Gets the case_identifier of this Crs3CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated.

        :return: The case_identifier of this Crs3CaseInformation.
        :rtype: str
        """
        return self._case_identifier

    @case_identifier.setter
    def case_identifier(self, case_identifier):
        """Sets the case_identifier of this Crs3CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated.

        :param case_identifier: The case_identifier of this Crs3CaseInformation.
        :type case_identifier: str
        """
        if case_identifier is None:
            raise ValueError("Invalid value for `case_identifier`, must not be `None`")

        self._case_identifier = case_identifier

    @property
    def case_summary(self):
        """Gets the case_summary of this Crs3CaseInformation.

        The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.

        :return: The case_summary of this Crs3CaseInformation.
        :rtype: str
        """
        return self._case_summary

    @case_summary.setter
    def case_summary(self, case_summary):
        """Sets the case_summary of this Crs3CaseInformation.

        The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.

        :param case_summary: The case_summary of this Crs3CaseInformation.
        :type case_summary: str
        """
        if case_summary is None:
            raise ValueError("Invalid value for `case_summary`, must not be `None`")

        self._case_summary = case_summary

    @property
    def citations(self):
        """Gets the citations of this Crs3CaseInformation.

        The corresponding regulation in the Code of Federal Regulations (CFR) or U.S. Code (U.S.C.) associated with the enforcement action.

        :return: The citations of this Crs3CaseInformation.
        :rtype: str
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this Crs3CaseInformation.

        The corresponding regulation in the Code of Federal Regulations (CFR) or U.S. Code (U.S.C.) associated with the enforcement action.

        :param citations: The citations of this Crs3CaseInformation.
        :type citations: str
        """
        if citations is None:
            raise ValueError("Invalid value for `citations`, must not be `None`")

        self._citations = citations

    @property
    def fiscal_year(self):
        """Gets the fiscal_year of this Crs3CaseInformation.

        The fiscal year in which the activity occurred.

        :return: The fiscal_year of this Crs3CaseInformation.
        :rtype: str
        """
        return self._fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, fiscal_year):
        """Sets the fiscal_year of this Crs3CaseInformation.

        The fiscal year in which the activity occurred.

        :param fiscal_year: The fiscal_year of this Crs3CaseInformation.
        :type fiscal_year: str
        """
        if fiscal_year is None:
            raise ValueError("Invalid value for `fiscal_year`, must not be `None`")

        self._fiscal_year = fiscal_year

    @property
    def statutes(self):
        """Gets the statutes of this Crs3CaseInformation.

        A compilation of all Case Law Statutes applicable to the Case.

        :return: The statutes of this Crs3CaseInformation.
        :rtype: str
        """
        return self._statutes

    @statutes.setter
    def statutes(self, statutes):
        """Sets the statutes of this Crs3CaseInformation.

        A compilation of all Case Law Statutes applicable to the Case.

        :param statutes: The statutes of this Crs3CaseInformation.
        :type statutes: str
        """
        if statutes is None:
            raise ValueError("Invalid value for `statutes`, must not be `None`")

        self._statutes = statutes
