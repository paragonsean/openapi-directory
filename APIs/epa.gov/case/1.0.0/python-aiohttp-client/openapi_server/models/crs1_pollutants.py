# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1Pollutants(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chemical_abstract_number: str=None, pollutant_name: str=None):
        """Crs1Pollutants - a model defined in OpenAPI

        :param chemical_abstract_number: The chemical_abstract_number of this Crs1Pollutants.
        :param pollutant_name: The pollutant_name of this Crs1Pollutants.
        """
        self.openapi_types = {
            'chemical_abstract_number': str,
            'pollutant_name': str
        }

        self.attribute_map = {
            'chemical_abstract_number': 'ChemicalAbstractNumber',
            'pollutant_name': 'PollutantName'
        }

        self._chemical_abstract_number = chemical_abstract_number
        self._pollutant_name = pollutant_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1Pollutants':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_Pollutants of this Crs1Pollutants.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chemical_abstract_number(self):
        """Gets the chemical_abstract_number of this Crs1Pollutants.

        This is the unique number assigned to a chemical substance by the Chemical Abstracts Service.

        :return: The chemical_abstract_number of this Crs1Pollutants.
        :rtype: str
        """
        return self._chemical_abstract_number

    @chemical_abstract_number.setter
    def chemical_abstract_number(self, chemical_abstract_number):
        """Sets the chemical_abstract_number of this Crs1Pollutants.

        This is the unique number assigned to a chemical substance by the Chemical Abstracts Service.

        :param chemical_abstract_number: The chemical_abstract_number of this Crs1Pollutants.
        :type chemical_abstract_number: str
        """
        if chemical_abstract_number is None:
            raise ValueError("Invalid value for `chemical_abstract_number`, must not be `None`")

        self._chemical_abstract_number = chemical_abstract_number

    @property
    def pollutant_name(self):
        """Gets the pollutant_name of this Crs1Pollutants.

        The name designating the waste material substance or chemical involved at the facility that has a Quantitative Environmental Impact addressed in the SEP or Complying Actions.

        :return: The pollutant_name of this Crs1Pollutants.
        :rtype: str
        """
        return self._pollutant_name

    @pollutant_name.setter
    def pollutant_name(self, pollutant_name):
        """Sets the pollutant_name of this Crs1Pollutants.

        The name designating the waste material substance or chemical involved at the facility that has a Quantitative Environmental Impact addressed in the SEP or Complying Actions.

        :param pollutant_name: The pollutant_name of this Crs1Pollutants.
        :type pollutant_name: str
        """
        if pollutant_name is None:
            raise ValueError("Invalid value for `pollutant_name`, must not be `None`")

        self._pollutant_name = pollutant_name
