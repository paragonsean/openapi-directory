# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1ComplyingActions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complying_action_category: str=None, complying_action_description: str=None, complying_action_id: str=None, complying_action_type: str=None):
        """Crs1ComplyingActions - a model defined in OpenAPI

        :param complying_action_category: The complying_action_category of this Crs1ComplyingActions.
        :param complying_action_description: The complying_action_description of this Crs1ComplyingActions.
        :param complying_action_id: The complying_action_id of this Crs1ComplyingActions.
        :param complying_action_type: The complying_action_type of this Crs1ComplyingActions.
        """
        self.openapi_types = {
            'complying_action_category': str,
            'complying_action_description': str,
            'complying_action_id': str,
            'complying_action_type': str
        }

        self.attribute_map = {
            'complying_action_category': 'ComplyingActionCategory',
            'complying_action_description': 'ComplyingActionDescription',
            'complying_action_id': 'ComplyingActionId',
            'complying_action_type': 'ComplyingActionType'
        }

        self._complying_action_category = complying_action_category
        self._complying_action_description = complying_action_description
        self._complying_action_id = complying_action_id
        self._complying_action_type = complying_action_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1ComplyingActions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_ComplyingActions of this Crs1ComplyingActions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complying_action_category(self):
        """Gets the complying_action_category of this Crs1ComplyingActions.

        The category (i.e., Direct Environmental Reduction, Preventative, or Facility Management or Information Practice) to which a Complying Action belongs.

        :return: The complying_action_category of this Crs1ComplyingActions.
        :rtype: str
        """
        return self._complying_action_category

    @complying_action_category.setter
    def complying_action_category(self, complying_action_category):
        """Sets the complying_action_category of this Crs1ComplyingActions.

        The category (i.e., Direct Environmental Reduction, Preventative, or Facility Management or Information Practice) to which a Complying Action belongs.

        :param complying_action_category: The complying_action_category of this Crs1ComplyingActions.
        :type complying_action_category: str
        """
        if complying_action_category is None:
            raise ValueError("Invalid value for `complying_action_category`, must not be `None`")

        self._complying_action_category = complying_action_category

    @property
    def complying_action_description(self):
        """Gets the complying_action_description of this Crs1ComplyingActions.

        A text description of the type of the requirements obliging the defendant/respondent to take or refrain from certain actions.

        :return: The complying_action_description of this Crs1ComplyingActions.
        :rtype: str
        """
        return self._complying_action_description

    @complying_action_description.setter
    def complying_action_description(self, complying_action_description):
        """Sets the complying_action_description of this Crs1ComplyingActions.

        A text description of the type of the requirements obliging the defendant/respondent to take or refrain from certain actions.

        :param complying_action_description: The complying_action_description of this Crs1ComplyingActions.
        :type complying_action_description: str
        """
        if complying_action_description is None:
            raise ValueError("Invalid value for `complying_action_description`, must not be `None`")

        self._complying_action_description = complying_action_description

    @property
    def complying_action_id(self):
        """Gets the complying_action_id of this Crs1ComplyingActions.

        The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.

        :return: The complying_action_id of this Crs1ComplyingActions.
        :rtype: str
        """
        return self._complying_action_id

    @complying_action_id.setter
    def complying_action_id(self, complying_action_id):
        """Sets the complying_action_id of this Crs1ComplyingActions.

        The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.

        :param complying_action_id: The complying_action_id of this Crs1ComplyingActions.
        :type complying_action_id: str
        """
        if complying_action_id is None:
            raise ValueError("Invalid value for `complying_action_id`, must not be `None`")

        self._complying_action_id = complying_action_id

    @property
    def complying_action_type(self):
        """Gets the complying_action_type of this Crs1ComplyingActions.

        A code that uniquely identifies the requirements obliging the defendant/respondent to take or refrain from certain actions.

        :return: The complying_action_type of this Crs1ComplyingActions.
        :rtype: str
        """
        return self._complying_action_type

    @complying_action_type.setter
    def complying_action_type(self, complying_action_type):
        """Sets the complying_action_type of this Crs1ComplyingActions.

        A code that uniquely identifies the requirements obliging the defendant/respondent to take or refrain from certain actions.

        :param complying_action_type: The complying_action_type of this Crs1ComplyingActions.
        :type complying_action_type: str
        """
        if complying_action_type is None:
            raise ValueError("Invalid value for `complying_action_type`, must not be `None`")

        self._complying_action_type = complying_action_type
