# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1RelatedActivities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_date: str=None, description: str=None):
        """Crs1RelatedActivities - a model defined in OpenAPI

        :param actual_date: The actual_date of this Crs1RelatedActivities.
        :param description: The description of this Crs1RelatedActivities.
        """
        self.openapi_types = {
            'actual_date': str,
            'description': str
        }

        self.attribute_map = {
            'actual_date': 'ActualDate',
            'description': 'Description'
        }

        self._actual_date = actual_date
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1RelatedActivities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_RelatedActivities of this Crs1RelatedActivities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_date(self):
        """Gets the actual_date of this Crs1RelatedActivities.

        The actual date on which the event was completed/achieved.

        :return: The actual_date of this Crs1RelatedActivities.
        :rtype: str
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this Crs1RelatedActivities.

        The actual date on which the event was completed/achieved.

        :param actual_date: The actual_date of this Crs1RelatedActivities.
        :type actual_date: str
        """
        if actual_date is None:
            raise ValueError("Invalid value for `actual_date`, must not be `None`")

        self._actual_date = actual_date

    @property
    def description(self):
        """Gets the description of this Crs1RelatedActivities.

        A description of the category of Supplemental Environment Project (SEP) for a settlement.

        :return: The description of this Crs1RelatedActivities.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Crs1RelatedActivities.

        A description of the category of Supplemental Environment Project (SEP) for a settlement.

        :param description: The description of this Crs1RelatedActivities.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description
