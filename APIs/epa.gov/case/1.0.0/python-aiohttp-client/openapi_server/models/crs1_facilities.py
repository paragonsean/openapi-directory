# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1Facilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frs_number: str=None, facility_address: str=None, facility_city: str=None, facility_name: str=None, facility_state: str=None, facility_zip: str=None, naics_codes: str=None, sic_codes: str=None):
        """Crs1Facilities - a model defined in OpenAPI

        :param frs_number: The frs_number of this Crs1Facilities.
        :param facility_address: The facility_address of this Crs1Facilities.
        :param facility_city: The facility_city of this Crs1Facilities.
        :param facility_name: The facility_name of this Crs1Facilities.
        :param facility_state: The facility_state of this Crs1Facilities.
        :param facility_zip: The facility_zip of this Crs1Facilities.
        :param naics_codes: The naics_codes of this Crs1Facilities.
        :param sic_codes: The sic_codes of this Crs1Facilities.
        """
        self.openapi_types = {
            'frs_number': str,
            'facility_address': str,
            'facility_city': str,
            'facility_name': str,
            'facility_state': str,
            'facility_zip': str,
            'naics_codes': str,
            'sic_codes': str
        }

        self.attribute_map = {
            'frs_number': 'FRSNumber',
            'facility_address': 'FacilityAddress',
            'facility_city': 'FacilityCity',
            'facility_name': 'FacilityName',
            'facility_state': 'FacilityState',
            'facility_zip': 'FacilityZip',
            'naics_codes': 'NAICSCodes',
            'sic_codes': 'SICCodes'
        }

        self._frs_number = frs_number
        self._facility_address = facility_address
        self._facility_city = facility_city
        self._facility_name = facility_name
        self._facility_state = facility_state
        self._facility_zip = facility_zip
        self._naics_codes = naics_codes
        self._sic_codes = sic_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1Facilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_Facilities of this Crs1Facilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frs_number(self):
        """Gets the frs_number of this Crs1Facilities.

        The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.

        :return: The frs_number of this Crs1Facilities.
        :rtype: str
        """
        return self._frs_number

    @frs_number.setter
    def frs_number(self, frs_number):
        """Sets the frs_number of this Crs1Facilities.

        The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.

        :param frs_number: The frs_number of this Crs1Facilities.
        :type frs_number: str
        """
        if frs_number is None:
            raise ValueError("Invalid value for `frs_number`, must not be `None`")

        self._frs_number = frs_number

    @property
    def facility_address(self):
        """Gets the facility_address of this Crs1Facilities.

        The address that describes the physical (geographic) location of the front door or main entrance of a Facility site, including urban-style street address or rural address.

        :return: The facility_address of this Crs1Facilities.
        :rtype: str
        """
        return self._facility_address

    @facility_address.setter
    def facility_address(self, facility_address):
        """Sets the facility_address of this Crs1Facilities.

        The address that describes the physical (geographic) location of the front door or main entrance of a Facility site, including urban-style street address or rural address.

        :param facility_address: The facility_address of this Crs1Facilities.
        :type facility_address: str
        """
        if facility_address is None:
            raise ValueError("Invalid value for `facility_address`, must not be `None`")

        self._facility_address = facility_address

    @property
    def facility_city(self):
        """Gets the facility_city of this Crs1Facilities.

        The city in which the facility is located

        :return: The facility_city of this Crs1Facilities.
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this Crs1Facilities.

        The city in which the facility is located

        :param facility_city: The facility_city of this Crs1Facilities.
        :type facility_city: str
        """
        if facility_city is None:
            raise ValueError("Invalid value for `facility_city`, must not be `None`")

        self._facility_city = facility_city

    @property
    def facility_name(self):
        """Gets the facility_name of this Crs1Facilities.

        The name of the facility.

        :return: The facility_name of this Crs1Facilities.
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Crs1Facilities.

        The name of the facility.

        :param facility_name: The facility_name of this Crs1Facilities.
        :type facility_name: str
        """
        if facility_name is None:
            raise ValueError("Invalid value for `facility_name`, must not be `None`")

        self._facility_name = facility_name

    @property
    def facility_state(self):
        """Gets the facility_state of this Crs1Facilities.

        The state in which the facility is located

        :return: The facility_state of this Crs1Facilities.
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this Crs1Facilities.

        The state in which the facility is located

        :param facility_state: The facility_state of this Crs1Facilities.
        :type facility_state: str
        """
        if facility_state is None:
            raise ValueError("Invalid value for `facility_state`, must not be `None`")

        self._facility_state = facility_state

    @property
    def facility_zip(self):
        """Gets the facility_zip of this Crs1Facilities.

        The zip code of the area in which the facility is located

        :return: The facility_zip of this Crs1Facilities.
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this Crs1Facilities.

        The zip code of the area in which the facility is located

        :param facility_zip: The facility_zip of this Crs1Facilities.
        :type facility_zip: str
        """
        if facility_zip is None:
            raise ValueError("Invalid value for `facility_zip`, must not be `None`")

        self._facility_zip = facility_zip

    @property
    def naics_codes(self):
        """Gets the naics_codes of this Crs1Facilities.

        A 6-digit code to classify industrial establishments. For detailed information about NAICS, please refer to the U.S. Census Bureau�NAICS�webpage.

        :return: The naics_codes of this Crs1Facilities.
        :rtype: str
        """
        return self._naics_codes

    @naics_codes.setter
    def naics_codes(self, naics_codes):
        """Sets the naics_codes of this Crs1Facilities.

        A 6-digit code to classify industrial establishments. For detailed information about NAICS, please refer to the U.S. Census Bureau�NAICS�webpage.

        :param naics_codes: The naics_codes of this Crs1Facilities.
        :type naics_codes: str
        """
        if naics_codes is None:
            raise ValueError("Invalid value for `naics_codes`, must not be `None`")

        self._naics_codes = naics_codes

    @property
    def sic_codes(self):
        """Gets the sic_codes of this Crs1Facilities.

        The Standard Industrial Classification codes applicable to the facility

        :return: The sic_codes of this Crs1Facilities.
        :rtype: str
        """
        return self._sic_codes

    @sic_codes.setter
    def sic_codes(self, sic_codes):
        """Sets the sic_codes of this Crs1Facilities.

        The Standard Industrial Classification codes applicable to the facility

        :param sic_codes: The sic_codes of this Crs1Facilities.
        :type sic_codes: str
        """
        if sic_codes is None:
            raise ValueError("Invalid value for `sic_codes`, must not be `None`")

        self._sic_codes = sic_codes
