# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1ProgramLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frs_number: str=None, program: str=None, program_id: str=None):
        """Crs1ProgramLinks - a model defined in OpenAPI

        :param frs_number: The frs_number of this Crs1ProgramLinks.
        :param program: The program of this Crs1ProgramLinks.
        :param program_id: The program_id of this Crs1ProgramLinks.
        """
        self.openapi_types = {
            'frs_number': str,
            'program': str,
            'program_id': str
        }

        self.attribute_map = {
            'frs_number': 'FRSNumber',
            'program': 'Program',
            'program_id': 'ProgramID'
        }

        self._frs_number = frs_number
        self._program = program
        self._program_id = program_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1ProgramLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_ProgramLinks of this Crs1ProgramLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frs_number(self):
        """Gets the frs_number of this Crs1ProgramLinks.

        The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.

        :return: The frs_number of this Crs1ProgramLinks.
        :rtype: str
        """
        return self._frs_number

    @frs_number.setter
    def frs_number(self, frs_number):
        """Sets the frs_number of this Crs1ProgramLinks.

        The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.

        :param frs_number: The frs_number of this Crs1ProgramLinks.
        :type frs_number: str
        """
        if frs_number is None:
            raise ValueError("Invalid value for `frs_number`, must not be `None`")

        self._frs_number = frs_number

    @property
    def program(self):
        """Gets the program of this Crs1ProgramLinks.

        The source database for the EPA programs information.

        :return: The program of this Crs1ProgramLinks.
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this Crs1ProgramLinks.

        The source database for the EPA programs information.

        :param program: The program of this Crs1ProgramLinks.
        :type program: str
        """
        if program is None:
            raise ValueError("Invalid value for `program`, must not be `None`")

        self._program = program

    @property
    def program_id(self):
        """Gets the program_id of this Crs1ProgramLinks.

        Unique identifier for the EPA program.

        :return: The program_id of this Crs1ProgramLinks.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Crs1ProgramLinks.

        Unique identifier for the EPA program.

        :param program_id: The program_id of this Crs1ProgramLinks.
        :type program_id: str
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")

        self._program_id = program_id
