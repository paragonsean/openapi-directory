# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1Defendants(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, defendant_name: str=None, named_in_complaint: str=None, named_in_settlement: str=None):
        """Crs1Defendants - a model defined in OpenAPI

        :param defendant_name: The defendant_name of this Crs1Defendants.
        :param named_in_complaint: The named_in_complaint of this Crs1Defendants.
        :param named_in_settlement: The named_in_settlement of this Crs1Defendants.
        """
        self.openapi_types = {
            'defendant_name': str,
            'named_in_complaint': str,
            'named_in_settlement': str
        }

        self.attribute_map = {
            'defendant_name': 'DefendantName',
            'named_in_complaint': 'NamedInComplaint',
            'named_in_settlement': 'NamedInSettlement'
        }

        self._defendant_name = defendant_name
        self._named_in_complaint = named_in_complaint
        self._named_in_settlement = named_in_settlement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1Defendants':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_Defendants of this Crs1Defendants.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def defendant_name(self):
        """Gets the defendant_name of this Crs1Defendants.

        The name of the defendant, or respondent associated with the Enforcement Action.

        :return: The defendant_name of this Crs1Defendants.
        :rtype: str
        """
        return self._defendant_name

    @defendant_name.setter
    def defendant_name(self, defendant_name):
        """Sets the defendant_name of this Crs1Defendants.

        The name of the defendant, or respondent associated with the Enforcement Action.

        :param defendant_name: The defendant_name of this Crs1Defendants.
        :type defendant_name: str
        """
        if defendant_name is None:
            raise ValueError("Invalid value for `defendant_name`, must not be `None`")

        self._defendant_name = defendant_name

    @property
    def named_in_complaint(self):
        """Gets the named_in_complaint of this Crs1Defendants.

        A flag that indicates whether the Defendant or Respondent was named in the filed complaint.

        :return: The named_in_complaint of this Crs1Defendants.
        :rtype: str
        """
        return self._named_in_complaint

    @named_in_complaint.setter
    def named_in_complaint(self, named_in_complaint):
        """Sets the named_in_complaint of this Crs1Defendants.

        A flag that indicates whether the Defendant or Respondent was named in the filed complaint.

        :param named_in_complaint: The named_in_complaint of this Crs1Defendants.
        :type named_in_complaint: str
        """
        if named_in_complaint is None:
            raise ValueError("Invalid value for `named_in_complaint`, must not be `None`")

        self._named_in_complaint = named_in_complaint

    @property
    def named_in_settlement(self):
        """Gets the named_in_settlement of this Crs1Defendants.

        A flag that indicates whether the Defendant or Respondent was named in the Final Order.

        :return: The named_in_settlement of this Crs1Defendants.
        :rtype: str
        """
        return self._named_in_settlement

    @named_in_settlement.setter
    def named_in_settlement(self, named_in_settlement):
        """Sets the named_in_settlement of this Crs1Defendants.

        A flag that indicates whether the Defendant or Respondent was named in the Final Order.

        :param named_in_settlement: The named_in_settlement of this Crs1Defendants.
        :type named_in_settlement: str
        """
        if named_in_settlement is None:
            raise ValueError("Invalid value for `named_in_settlement`, must not be `None`")

        self._named_in_settlement = named_in_settlement
