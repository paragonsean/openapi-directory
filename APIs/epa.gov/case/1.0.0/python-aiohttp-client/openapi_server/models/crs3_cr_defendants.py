# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs3CRDefendants(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, defendant_type: str=None, district: str=None, docket_number: str=None, name: str=None, state: str=None):
        """Crs3CRDefendants - a model defined in OpenAPI

        :param defendant_type: The defendant_type of this Crs3CRDefendants.
        :param district: The district of this Crs3CRDefendants.
        :param docket_number: The docket_number of this Crs3CRDefendants.
        :param name: The name of this Crs3CRDefendants.
        :param state: The state of this Crs3CRDefendants.
        """
        self.openapi_types = {
            'defendant_type': str,
            'district': str,
            'docket_number': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'defendant_type': 'DefendantType',
            'district': 'District',
            'docket_number': 'DocketNumber',
            'name': 'Name',
            'state': 'State'
        }

        self._defendant_type = defendant_type
        self._district = district
        self._docket_number = docket_number
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs3CRDefendants':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs3_CRDefendants of this Crs3CRDefendants.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def defendant_type(self):
        """Gets the defendant_type of this Crs3CRDefendants.

        The role of each defendant in the criminal enforcement case, either Principal Defendant or Defendant. Multiple defendants (up to fourteen) may be associated with one case, but only one is designated as principal.

        :return: The defendant_type of this Crs3CRDefendants.
        :rtype: str
        """
        return self._defendant_type

    @defendant_type.setter
    def defendant_type(self, defendant_type):
        """Sets the defendant_type of this Crs3CRDefendants.

        The role of each defendant in the criminal enforcement case, either Principal Defendant or Defendant. Multiple defendants (up to fourteen) may be associated with one case, but only one is designated as principal.

        :param defendant_type: The defendant_type of this Crs3CRDefendants.
        :type defendant_type: str
        """
        if defendant_type is None:
            raise ValueError("Invalid value for `defendant_type`, must not be `None`")

        self._defendant_type = defendant_type

    @property
    def district(self):
        """Gets the district of this Crs3CRDefendants.

        The United States district courts are the trial courts of the federal court system.

        :return: The district of this Crs3CRDefendants.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Crs3CRDefendants.

        The United States district courts are the trial courts of the federal court system.

        :param district: The district of this Crs3CRDefendants.
        :type district: str
        """
        if district is None:
            raise ValueError("Invalid value for `district`, must not be `None`")

        self._district = district

    @property
    def docket_number(self):
        """Gets the docket_number of this Crs3CRDefendants.

        The number the Clerk of the Court assigned to the case that is filed or to a consent decree when it is lodged. For administrative cases, this number is assigned to the case by the Regional Hearing Clerk.

        :return: The docket_number of this Crs3CRDefendants.
        :rtype: str
        """
        return self._docket_number

    @docket_number.setter
    def docket_number(self, docket_number):
        """Sets the docket_number of this Crs3CRDefendants.

        The number the Clerk of the Court assigned to the case that is filed or to a consent decree when it is lodged. For administrative cases, this number is assigned to the case by the Regional Hearing Clerk.

        :param docket_number: The docket_number of this Crs3CRDefendants.
        :type docket_number: str
        """
        if docket_number is None:
            raise ValueError("Invalid value for `docket_number`, must not be `None`")

        self._docket_number = docket_number

    @property
    def name(self):
        """Gets the name of this Crs3CRDefendants.

        The name of the case assigned to the enforcement action by the lead attorney. Generally, the primary defendant's name is used as the case name. For civil CERCLA cases, the facility/site name may be used.

        :return: The name of this Crs3CRDefendants.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Crs3CRDefendants.

        The name of the case assigned to the enforcement action by the lead attorney. Generally, the primary defendant's name is used as the case name. For civil CERCLA cases, the facility/site name may be used.

        :param name: The name of this Crs3CRDefendants.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this Crs3CRDefendants.

        The two letter abbreviation that represents the state or state equivalent for the U.S.

        :return: The state of this Crs3CRDefendants.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Crs3CRDefendants.

        The two letter abbreviation that represents the state or state equivalent for the U.S.

        :param state: The state of this Crs3CRDefendants.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
