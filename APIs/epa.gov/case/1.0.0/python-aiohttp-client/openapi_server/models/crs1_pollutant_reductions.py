# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1PollutantReductions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_amount: str=None, complying_action_id: str=None, environmental_impact_id: str=None, media: str=None, pollutant: str=None, sepid: str=None, se_por_comp: str=None, units: str=None):
        """Crs1PollutantReductions - a model defined in OpenAPI

        :param annual_amount: The annual_amount of this Crs1PollutantReductions.
        :param complying_action_id: The complying_action_id of this Crs1PollutantReductions.
        :param environmental_impact_id: The environmental_impact_id of this Crs1PollutantReductions.
        :param media: The media of this Crs1PollutantReductions.
        :param pollutant: The pollutant of this Crs1PollutantReductions.
        :param sepid: The sepid of this Crs1PollutantReductions.
        :param se_por_comp: The se_por_comp of this Crs1PollutantReductions.
        :param units: The units of this Crs1PollutantReductions.
        """
        self.openapi_types = {
            'annual_amount': str,
            'complying_action_id': str,
            'environmental_impact_id': str,
            'media': str,
            'pollutant': str,
            'sepid': str,
            'se_por_comp': str,
            'units': str
        }

        self.attribute_map = {
            'annual_amount': 'AnnualAmount',
            'complying_action_id': 'ComplyingActionId',
            'environmental_impact_id': 'EnvironmentalImpactId',
            'media': 'Media',
            'pollutant': 'Pollutant',
            'sepid': 'SEPId',
            'se_por_comp': 'SEPorComp',
            'units': 'Units'
        }

        self._annual_amount = annual_amount
        self._complying_action_id = complying_action_id
        self._environmental_impact_id = environmental_impact_id
        self._media = media
        self._pollutant = pollutant
        self._sepid = sepid
        self._se_por_comp = se_por_comp
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1PollutantReductions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_PollutantReductions of this Crs1PollutantReductions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_amount(self):
        """Gets the annual_amount of this Crs1PollutantReductions.

        The amount of reduction or elimination of each pollutant or waste in pounds, kilograms, or liquid measure that resulted from the SEP or Complying Actions.

        :return: The annual_amount of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._annual_amount

    @annual_amount.setter
    def annual_amount(self, annual_amount):
        """Sets the annual_amount of this Crs1PollutantReductions.

        The amount of reduction or elimination of each pollutant or waste in pounds, kilograms, or liquid measure that resulted from the SEP or Complying Actions.

        :param annual_amount: The annual_amount of this Crs1PollutantReductions.
        :type annual_amount: str
        """
        if annual_amount is None:
            raise ValueError("Invalid value for `annual_amount`, must not be `None`")

        self._annual_amount = annual_amount

    @property
    def complying_action_id(self):
        """Gets the complying_action_id of this Crs1PollutantReductions.

        The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.

        :return: The complying_action_id of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._complying_action_id

    @complying_action_id.setter
    def complying_action_id(self, complying_action_id):
        """Sets the complying_action_id of this Crs1PollutantReductions.

        The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.

        :param complying_action_id: The complying_action_id of this Crs1PollutantReductions.
        :type complying_action_id: str
        """
        if complying_action_id is None:
            raise ValueError("Invalid value for `complying_action_id`, must not be `None`")

        self._complying_action_id = complying_action_id

    @property
    def environmental_impact_id(self):
        """Gets the environmental_impact_id of this Crs1PollutantReductions.

        The system-generated unique identifier of the Environmental Impact record.

        :return: The environmental_impact_id of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._environmental_impact_id

    @environmental_impact_id.setter
    def environmental_impact_id(self, environmental_impact_id):
        """Sets the environmental_impact_id of this Crs1PollutantReductions.

        The system-generated unique identifier of the Environmental Impact record.

        :param environmental_impact_id: The environmental_impact_id of this Crs1PollutantReductions.
        :type environmental_impact_id: str
        """
        if environmental_impact_id is None:
            raise ValueError("Invalid value for `environmental_impact_id`, must not be `None`")

        self._environmental_impact_id = environmental_impact_id

    @property
    def media(self):
        """Gets the media of this Crs1PollutantReductions.

        The name/description of the media where the pollutants or waste were emitted/discharged.

        :return: The media of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Crs1PollutantReductions.

        The name/description of the media where the pollutants or waste were emitted/discharged.

        :param media: The media of this Crs1PollutantReductions.
        :type media: str
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def pollutant(self):
        """Gets the pollutant of this Crs1PollutantReductions.

        The name that EPA has selected as its preferred name for a substance (also known as registry name). If the registry name is not available, use the systematic name instead.

        :return: The pollutant of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._pollutant

    @pollutant.setter
    def pollutant(self, pollutant):
        """Sets the pollutant of this Crs1PollutantReductions.

        The name that EPA has selected as its preferred name for a substance (also known as registry name). If the registry name is not available, use the systematic name instead.

        :param pollutant: The pollutant of this Crs1PollutantReductions.
        :type pollutant: str
        """
        if pollutant is None:
            raise ValueError("Invalid value for `pollutant`, must not be `None`")

        self._pollutant = pollutant

    @property
    def sepid(self):
        """Gets the sepid of this Crs1PollutantReductions.

        The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.

        :return: The sepid of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._sepid

    @sepid.setter
    def sepid(self, sepid):
        """Sets the sepid of this Crs1PollutantReductions.

        The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.

        :param sepid: The sepid of this Crs1PollutantReductions.
        :type sepid: str
        """
        if sepid is None:
            raise ValueError("Invalid value for `sepid`, must not be `None`")

        self._sepid = sepid

    @property
    def se_por_comp(self):
        """Gets the se_por_comp of this Crs1PollutantReductions.

        A flag that indicates whether the quantitative environmental impact pertains to a SEP or Complying Action.

        :return: The se_por_comp of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._se_por_comp

    @se_por_comp.setter
    def se_por_comp(self, se_por_comp):
        """Sets the se_por_comp of this Crs1PollutantReductions.

        A flag that indicates whether the quantitative environmental impact pertains to a SEP or Complying Action.

        :param se_por_comp: The se_por_comp of this Crs1PollutantReductions.
        :type se_por_comp: str
        """
        if se_por_comp is None:
            raise ValueError("Invalid value for `se_por_comp`, must not be `None`")

        self._se_por_comp = se_por_comp

    @property
    def units(self):
        """Gets the units of this Crs1PollutantReductions.

        A code that uniquely identifies the pollutant unit of measurement.

        :return: The units of this Crs1PollutantReductions.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Crs1PollutantReductions.

        A code that uniquely identifies the pollutant unit of measurement.

        :param units: The units of this Crs1PollutantReductions.
        :type units: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
