# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1LawsAndSections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, law: str=None, programs: str=None, sections: str=None):
        """Crs1LawsAndSections - a model defined in OpenAPI

        :param law: The law of this Crs1LawsAndSections.
        :param programs: The programs of this Crs1LawsAndSections.
        :param sections: The sections of this Crs1LawsAndSections.
        """
        self.openapi_types = {
            'law': str,
            'programs': str,
            'sections': str
        }

        self.attribute_map = {
            'law': 'Law',
            'programs': 'Programs',
            'sections': 'Sections'
        }

        self._law = law
        self._programs = programs
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1LawsAndSections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_LawsAndSections of this Crs1LawsAndSections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def law(self):
        """Gets the law of this Crs1LawsAndSections.

        Code for the primary and non-primary laws that were violated.

        :return: The law of this Crs1LawsAndSections.
        :rtype: str
        """
        return self._law

    @law.setter
    def law(self, law):
        """Sets the law of this Crs1LawsAndSections.

        Code for the primary and non-primary laws that were violated.

        :param law: The law of this Crs1LawsAndSections.
        :type law: str
        """
        if law is None:
            raise ValueError("Invalid value for `law`, must not be `None`")

        self._law = law

    @property
    def programs(self):
        """Gets the programs of this Crs1LawsAndSections.

        A description of the EPA program(s) under which an enforcement action has been taken, and which correspond to the cited statutes and sections.

        :return: The programs of this Crs1LawsAndSections.
        :rtype: str
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this Crs1LawsAndSections.

        A description of the EPA program(s) under which an enforcement action has been taken, and which correspond to the cited statutes and sections.

        :param programs: The programs of this Crs1LawsAndSections.
        :type programs: str
        """
        if programs is None:
            raise ValueError("Invalid value for `programs`, must not be `None`")

        self._programs = programs

    @property
    def sections(self):
        """Gets the sections of this Crs1LawsAndSections.

        A compilation of all Case Law Sections applicable for the Case.

        :return: The sections of this Crs1LawsAndSections.
        :rtype: str
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this Crs1LawsAndSections.

        A compilation of all Case Law Sections applicable for the Case.

        :param sections: The sections of this Crs1LawsAndSections.
        :type sections: str
        """
        if sections is None:
            raise ValueError("Invalid value for `sections`, must not be `None`")

        self._sections = sections
