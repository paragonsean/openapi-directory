# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1ComplianceSchedules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_date: str=None, event_amount: str=None, facility_frsid: str=None, schedule_comment_text: str=None, schedule_date: str=None, schedule_event_description: str=None, schedule_number: str=None):
        """Crs1ComplianceSchedules - a model defined in OpenAPI

        :param actual_date: The actual_date of this Crs1ComplianceSchedules.
        :param event_amount: The event_amount of this Crs1ComplianceSchedules.
        :param facility_frsid: The facility_frsid of this Crs1ComplianceSchedules.
        :param schedule_comment_text: The schedule_comment_text of this Crs1ComplianceSchedules.
        :param schedule_date: The schedule_date of this Crs1ComplianceSchedules.
        :param schedule_event_description: The schedule_event_description of this Crs1ComplianceSchedules.
        :param schedule_number: The schedule_number of this Crs1ComplianceSchedules.
        """
        self.openapi_types = {
            'actual_date': str,
            'event_amount': str,
            'facility_frsid': str,
            'schedule_comment_text': str,
            'schedule_date': str,
            'schedule_event_description': str,
            'schedule_number': str
        }

        self.attribute_map = {
            'actual_date': 'ActualDate',
            'event_amount': 'EventAmount',
            'facility_frsid': 'FacilityFRSID',
            'schedule_comment_text': 'ScheduleCommentText',
            'schedule_date': 'ScheduleDate',
            'schedule_event_description': 'ScheduleEventDescription',
            'schedule_number': 'ScheduleNumber'
        }

        self._actual_date = actual_date
        self._event_amount = event_amount
        self._facility_frsid = facility_frsid
        self._schedule_comment_text = schedule_comment_text
        self._schedule_date = schedule_date
        self._schedule_event_description = schedule_event_description
        self._schedule_number = schedule_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1ComplianceSchedules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_ComplianceSchedules of this Crs1ComplianceSchedules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_date(self):
        """Gets the actual_date of this Crs1ComplianceSchedules.

        The actual date on which the Compliance Schedule event was completed/achieved.

        :return: The actual_date of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this Crs1ComplianceSchedules.

        The actual date on which the Compliance Schedule event was completed/achieved.

        :param actual_date: The actual_date of this Crs1ComplianceSchedules.
        :type actual_date: str
        """
        if actual_date is None:
            raise ValueError("Invalid value for `actual_date`, must not be `None`")

        self._actual_date = actual_date

    @property
    def event_amount(self):
        """Gets the event_amount of this Crs1ComplianceSchedules.

        The dollar amount of a scheduled payment initiated through a penalty action or a cost recovery pursuant to a Final Order.

        :return: The event_amount of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._event_amount

    @event_amount.setter
    def event_amount(self, event_amount):
        """Sets the event_amount of this Crs1ComplianceSchedules.

        The dollar amount of a scheduled payment initiated through a penalty action or a cost recovery pursuant to a Final Order.

        :param event_amount: The event_amount of this Crs1ComplianceSchedules.
        :type event_amount: str
        """
        if event_amount is None:
            raise ValueError("Invalid value for `event_amount`, must not be `None`")

        self._event_amount = event_amount

    @property
    def facility_frsid(self):
        """Gets the facility_frsid of this Crs1ComplianceSchedules.

        The number assigned by the Facility Linkage Application that is used to associate facility records from multiple environmental database systems that are known or believed to represent the same facility.

        :return: The facility_frsid of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._facility_frsid

    @facility_frsid.setter
    def facility_frsid(self, facility_frsid):
        """Sets the facility_frsid of this Crs1ComplianceSchedules.

        The number assigned by the Facility Linkage Application that is used to associate facility records from multiple environmental database systems that are known or believed to represent the same facility.

        :param facility_frsid: The facility_frsid of this Crs1ComplianceSchedules.
        :type facility_frsid: str
        """
        if facility_frsid is None:
            raise ValueError("Invalid value for `facility_frsid`, must not be `None`")

        self._facility_frsid = facility_frsid

    @property
    def schedule_comment_text(self):
        """Gets the schedule_comment_text of this Crs1ComplianceSchedules.

        The free-text field used to store descriptive Compliance Schedule information.

        :return: The schedule_comment_text of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._schedule_comment_text

    @schedule_comment_text.setter
    def schedule_comment_text(self, schedule_comment_text):
        """Sets the schedule_comment_text of this Crs1ComplianceSchedules.

        The free-text field used to store descriptive Compliance Schedule information.

        :param schedule_comment_text: The schedule_comment_text of this Crs1ComplianceSchedules.
        :type schedule_comment_text: str
        """
        if schedule_comment_text is None:
            raise ValueError("Invalid value for `schedule_comment_text`, must not be `None`")

        self._schedule_comment_text = schedule_comment_text

    @property
    def schedule_date(self):
        """Gets the schedule_date of this Crs1ComplianceSchedules.

        The date the event is scheduled to be completed (i.e. the due date).

        :return: The schedule_date of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._schedule_date

    @schedule_date.setter
    def schedule_date(self, schedule_date):
        """Sets the schedule_date of this Crs1ComplianceSchedules.

        The date the event is scheduled to be completed (i.e. the due date).

        :param schedule_date: The schedule_date of this Crs1ComplianceSchedules.
        :type schedule_date: str
        """
        if schedule_date is None:
            raise ValueError("Invalid value for `schedule_date`, must not be `None`")

        self._schedule_date = schedule_date

    @property
    def schedule_event_description(self):
        """Gets the schedule_event_description of this Crs1ComplianceSchedules.

        The description of the particular event with which the permittee is scheduled to comply.

        :return: The schedule_event_description of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._schedule_event_description

    @schedule_event_description.setter
    def schedule_event_description(self, schedule_event_description):
        """Sets the schedule_event_description of this Crs1ComplianceSchedules.

        The description of the particular event with which the permittee is scheduled to comply.

        :param schedule_event_description: The schedule_event_description of this Crs1ComplianceSchedules.
        :type schedule_event_description: str
        """
        if schedule_event_description is None:
            raise ValueError("Invalid value for `schedule_event_description`, must not be `None`")

        self._schedule_event_description = schedule_event_description

    @property
    def schedule_number(self):
        """Gets the schedule_number of this Crs1ComplianceSchedules.

        A two-digit number which in combination with the Schedule Type and NPDES ID uniquely identifies a Compliance Schedule.

        :return: The schedule_number of this Crs1ComplianceSchedules.
        :rtype: str
        """
        return self._schedule_number

    @schedule_number.setter
    def schedule_number(self, schedule_number):
        """Sets the schedule_number of this Crs1ComplianceSchedules.

        A two-digit number which in combination with the Schedule Type and NPDES ID uniquely identifies a Compliance Schedule.

        :param schedule_number: The schedule_number of this Crs1ComplianceSchedules.
        :type schedule_number: str
        """
        if schedule_number is None:
            raise ValueError("Invalid value for `schedule_number`, must not be `None`")

        self._schedule_number = schedule_number
