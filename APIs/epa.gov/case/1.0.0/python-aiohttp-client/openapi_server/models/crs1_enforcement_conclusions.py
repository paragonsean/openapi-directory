# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs1_compliance_schedules import Crs1ComplianceSchedules
from openapi_server.models.crs1_complying_actions import Crs1ComplyingActions
from openapi_server.models.crs1_final_order_statuses import Crs1FinalOrderStatuses
from openapi_server.models.crs1_pollutant_reductions import Crs1PollutantReductions
from openapi_server.models.crs1_supplemental_environmental_projects import Crs1SupplementalEnvironmentalProjects
from openapi_server import util


class Crs1EnforcementConclusions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_termination_date: str=None, compliance_action_cost: str=None, compliance_schedules: List[Crs1ComplianceSchedules]=None, complying_actions: List[Crs1ComplyingActions]=None, cost_recovery: str=None, enforcement_action_closed_date: str=None, enforcement_conclusion_id: str=None, enforcement_conclusion_name: str=None, enforcement_conclusion_type: str=None, facilities_in_settlement: str=None, federal_penalty: str=None, final_order_statuses: List[Crs1FinalOrderStatuses]=None, pollutant_reductions: List[Crs1PollutantReductions]=None, sep_cost: str=None, settlement_entered_date: str=None, settlement_lodged_date: str=None, state_penalty: str=None, supplemental_environmental_projects: List[Crs1SupplementalEnvironmentalProjects]=None):
        """Crs1EnforcementConclusions - a model defined in OpenAPI

        :param actual_termination_date: The actual_termination_date of this Crs1EnforcementConclusions.
        :param compliance_action_cost: The compliance_action_cost of this Crs1EnforcementConclusions.
        :param compliance_schedules: The compliance_schedules of this Crs1EnforcementConclusions.
        :param complying_actions: The complying_actions of this Crs1EnforcementConclusions.
        :param cost_recovery: The cost_recovery of this Crs1EnforcementConclusions.
        :param enforcement_action_closed_date: The enforcement_action_closed_date of this Crs1EnforcementConclusions.
        :param enforcement_conclusion_id: The enforcement_conclusion_id of this Crs1EnforcementConclusions.
        :param enforcement_conclusion_name: The enforcement_conclusion_name of this Crs1EnforcementConclusions.
        :param enforcement_conclusion_type: The enforcement_conclusion_type of this Crs1EnforcementConclusions.
        :param facilities_in_settlement: The facilities_in_settlement of this Crs1EnforcementConclusions.
        :param federal_penalty: The federal_penalty of this Crs1EnforcementConclusions.
        :param final_order_statuses: The final_order_statuses of this Crs1EnforcementConclusions.
        :param pollutant_reductions: The pollutant_reductions of this Crs1EnforcementConclusions.
        :param sep_cost: The sep_cost of this Crs1EnforcementConclusions.
        :param settlement_entered_date: The settlement_entered_date of this Crs1EnforcementConclusions.
        :param settlement_lodged_date: The settlement_lodged_date of this Crs1EnforcementConclusions.
        :param state_penalty: The state_penalty of this Crs1EnforcementConclusions.
        :param supplemental_environmental_projects: The supplemental_environmental_projects of this Crs1EnforcementConclusions.
        """
        self.openapi_types = {
            'actual_termination_date': str,
            'compliance_action_cost': str,
            'compliance_schedules': List[Crs1ComplianceSchedules],
            'complying_actions': List[Crs1ComplyingActions],
            'cost_recovery': str,
            'enforcement_action_closed_date': str,
            'enforcement_conclusion_id': str,
            'enforcement_conclusion_name': str,
            'enforcement_conclusion_type': str,
            'facilities_in_settlement': str,
            'federal_penalty': str,
            'final_order_statuses': List[Crs1FinalOrderStatuses],
            'pollutant_reductions': List[Crs1PollutantReductions],
            'sep_cost': str,
            'settlement_entered_date': str,
            'settlement_lodged_date': str,
            'state_penalty': str,
            'supplemental_environmental_projects': List[Crs1SupplementalEnvironmentalProjects]
        }

        self.attribute_map = {
            'actual_termination_date': 'ActualTerminationDate',
            'compliance_action_cost': 'ComplianceActionCost',
            'compliance_schedules': 'ComplianceSchedules',
            'complying_actions': 'ComplyingActions',
            'cost_recovery': 'CostRecovery',
            'enforcement_action_closed_date': 'EnforcementActionClosedDate',
            'enforcement_conclusion_id': 'EnforcementConclusionId',
            'enforcement_conclusion_name': 'EnforcementConclusionName',
            'enforcement_conclusion_type': 'EnforcementConclusionType',
            'facilities_in_settlement': 'FacilitiesInSettlement',
            'federal_penalty': 'FederalPenalty',
            'final_order_statuses': 'FinalOrderStatuses',
            'pollutant_reductions': 'PollutantReductions',
            'sep_cost': 'SEPCost',
            'settlement_entered_date': 'SettlementEnteredDate',
            'settlement_lodged_date': 'SettlementLodgedDate',
            'state_penalty': 'StatePenalty',
            'supplemental_environmental_projects': 'SupplementalEnvironmentalProjects'
        }

        self._actual_termination_date = actual_termination_date
        self._compliance_action_cost = compliance_action_cost
        self._compliance_schedules = compliance_schedules
        self._complying_actions = complying_actions
        self._cost_recovery = cost_recovery
        self._enforcement_action_closed_date = enforcement_action_closed_date
        self._enforcement_conclusion_id = enforcement_conclusion_id
        self._enforcement_conclusion_name = enforcement_conclusion_name
        self._enforcement_conclusion_type = enforcement_conclusion_type
        self._facilities_in_settlement = facilities_in_settlement
        self._federal_penalty = federal_penalty
        self._final_order_statuses = final_order_statuses
        self._pollutant_reductions = pollutant_reductions
        self._sep_cost = sep_cost
        self._settlement_entered_date = settlement_entered_date
        self._settlement_lodged_date = settlement_lodged_date
        self._state_penalty = state_penalty
        self._supplemental_environmental_projects = supplemental_environmental_projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1EnforcementConclusions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_EnforcementConclusions of this Crs1EnforcementConclusions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_termination_date(self):
        """Gets the actual_termination_date of this Crs1EnforcementConclusions.

        The date on which the Final Order was terminated.

        :return: The actual_termination_date of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._actual_termination_date

    @actual_termination_date.setter
    def actual_termination_date(self, actual_termination_date):
        """Sets the actual_termination_date of this Crs1EnforcementConclusions.

        The date on which the Final Order was terminated.

        :param actual_termination_date: The actual_termination_date of this Crs1EnforcementConclusions.
        :type actual_termination_date: str
        """
        if actual_termination_date is None:
            raise ValueError("Invalid value for `actual_termination_date`, must not be `None`")

        self._actual_termination_date = actual_termination_date

    @property
    def compliance_action_cost(self):
        """Gets the compliance_action_cost of this Crs1EnforcementConclusions.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The compliance_action_cost of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._compliance_action_cost

    @compliance_action_cost.setter
    def compliance_action_cost(self, compliance_action_cost):
        """Sets the compliance_action_cost of this Crs1EnforcementConclusions.

        The total value of all SEPs for all settlements at the enforcement case.

        :param compliance_action_cost: The compliance_action_cost of this Crs1EnforcementConclusions.
        :type compliance_action_cost: str
        """
        if compliance_action_cost is None:
            raise ValueError("Invalid value for `compliance_action_cost`, must not be `None`")

        self._compliance_action_cost = compliance_action_cost

    @property
    def compliance_schedules(self):
        """Gets the compliance_schedules of this Crs1EnforcementConclusions.


        :return: The compliance_schedules of this Crs1EnforcementConclusions.
        :rtype: List[Crs1ComplianceSchedules]
        """
        return self._compliance_schedules

    @compliance_schedules.setter
    def compliance_schedules(self, compliance_schedules):
        """Sets the compliance_schedules of this Crs1EnforcementConclusions.


        :param compliance_schedules: The compliance_schedules of this Crs1EnforcementConclusions.
        :type compliance_schedules: List[Crs1ComplianceSchedules]
        """
        if compliance_schedules is None:
            raise ValueError("Invalid value for `compliance_schedules`, must not be `None`")

        self._compliance_schedules = compliance_schedules

    @property
    def complying_actions(self):
        """Gets the complying_actions of this Crs1EnforcementConclusions.


        :return: The complying_actions of this Crs1EnforcementConclusions.
        :rtype: List[Crs1ComplyingActions]
        """
        return self._complying_actions

    @complying_actions.setter
    def complying_actions(self, complying_actions):
        """Sets the complying_actions of this Crs1EnforcementConclusions.


        :param complying_actions: The complying_actions of this Crs1EnforcementConclusions.
        :type complying_actions: List[Crs1ComplyingActions]
        """
        if complying_actions is None:
            raise ValueError("Invalid value for `complying_actions`, must not be `None`")

        self._complying_actions = complying_actions

    @property
    def cost_recovery(self):
        """Gets the cost_recovery of this Crs1EnforcementConclusions.

        For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.

        :return: The cost_recovery of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._cost_recovery

    @cost_recovery.setter
    def cost_recovery(self, cost_recovery):
        """Sets the cost_recovery of this Crs1EnforcementConclusions.

        For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.

        :param cost_recovery: The cost_recovery of this Crs1EnforcementConclusions.
        :type cost_recovery: str
        """
        if cost_recovery is None:
            raise ValueError("Invalid value for `cost_recovery`, must not be `None`")

        self._cost_recovery = cost_recovery

    @property
    def enforcement_action_closed_date(self):
        """Gets the enforcement_action_closed_date of this Crs1EnforcementConclusions.

        The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.

        :return: The enforcement_action_closed_date of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._enforcement_action_closed_date

    @enforcement_action_closed_date.setter
    def enforcement_action_closed_date(self, enforcement_action_closed_date):
        """Sets the enforcement_action_closed_date of this Crs1EnforcementConclusions.

        The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.

        :param enforcement_action_closed_date: The enforcement_action_closed_date of this Crs1EnforcementConclusions.
        :type enforcement_action_closed_date: str
        """
        if enforcement_action_closed_date is None:
            raise ValueError("Invalid value for `enforcement_action_closed_date`, must not be `None`")

        self._enforcement_action_closed_date = enforcement_action_closed_date

    @property
    def enforcement_conclusion_id(self):
        """Gets the enforcement_conclusion_id of this Crs1EnforcementConclusions.

        The system-generated unique identifier of the Final Order to which the Compliance Action belongs.

        :return: The enforcement_conclusion_id of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._enforcement_conclusion_id

    @enforcement_conclusion_id.setter
    def enforcement_conclusion_id(self, enforcement_conclusion_id):
        """Sets the enforcement_conclusion_id of this Crs1EnforcementConclusions.

        The system-generated unique identifier of the Final Order to which the Compliance Action belongs.

        :param enforcement_conclusion_id: The enforcement_conclusion_id of this Crs1EnforcementConclusions.
        :type enforcement_conclusion_id: str
        """
        if enforcement_conclusion_id is None:
            raise ValueError("Invalid value for `enforcement_conclusion_id`, must not be `None`")

        self._enforcement_conclusion_id = enforcement_conclusion_id

    @property
    def enforcement_conclusion_name(self):
        """Gets the enforcement_conclusion_name of this Crs1EnforcementConclusions.

        The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.

        :return: The enforcement_conclusion_name of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._enforcement_conclusion_name

    @enforcement_conclusion_name.setter
    def enforcement_conclusion_name(self, enforcement_conclusion_name):
        """Sets the enforcement_conclusion_name of this Crs1EnforcementConclusions.

        The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.

        :param enforcement_conclusion_name: The enforcement_conclusion_name of this Crs1EnforcementConclusions.
        :type enforcement_conclusion_name: str
        """
        if enforcement_conclusion_name is None:
            raise ValueError("Invalid value for `enforcement_conclusion_name`, must not be `None`")

        self._enforcement_conclusion_name = enforcement_conclusion_name

    @property
    def enforcement_conclusion_type(self):
        """Gets the enforcement_conclusion_type of this Crs1EnforcementConclusions.

        A description of the enforcement instrument used by EPA to settle the case.

        :return: The enforcement_conclusion_type of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._enforcement_conclusion_type

    @enforcement_conclusion_type.setter
    def enforcement_conclusion_type(self, enforcement_conclusion_type):
        """Sets the enforcement_conclusion_type of this Crs1EnforcementConclusions.

        A description of the enforcement instrument used by EPA to settle the case.

        :param enforcement_conclusion_type: The enforcement_conclusion_type of this Crs1EnforcementConclusions.
        :type enforcement_conclusion_type: str
        """
        if enforcement_conclusion_type is None:
            raise ValueError("Invalid value for `enforcement_conclusion_type`, must not be `None`")

        self._enforcement_conclusion_type = enforcement_conclusion_type

    @property
    def facilities_in_settlement(self):
        """Gets the facilities_in_settlement of this Crs1EnforcementConclusions.

        The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.

        :return: The facilities_in_settlement of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._facilities_in_settlement

    @facilities_in_settlement.setter
    def facilities_in_settlement(self, facilities_in_settlement):
        """Sets the facilities_in_settlement of this Crs1EnforcementConclusions.

        The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.

        :param facilities_in_settlement: The facilities_in_settlement of this Crs1EnforcementConclusions.
        :type facilities_in_settlement: str
        """
        if facilities_in_settlement is None:
            raise ValueError("Invalid value for `facilities_in_settlement`, must not be `None`")

        self._facilities_in_settlement = facilities_in_settlement

    @property
    def federal_penalty(self):
        """Gets the federal_penalty of this Crs1EnforcementConclusions.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :return: The federal_penalty of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._federal_penalty

    @federal_penalty.setter
    def federal_penalty(self, federal_penalty):
        """Sets the federal_penalty of this Crs1EnforcementConclusions.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :param federal_penalty: The federal_penalty of this Crs1EnforcementConclusions.
        :type federal_penalty: str
        """
        if federal_penalty is None:
            raise ValueError("Invalid value for `federal_penalty`, must not be `None`")

        self._federal_penalty = federal_penalty

    @property
    def final_order_statuses(self):
        """Gets the final_order_statuses of this Crs1EnforcementConclusions.


        :return: The final_order_statuses of this Crs1EnforcementConclusions.
        :rtype: List[Crs1FinalOrderStatuses]
        """
        return self._final_order_statuses

    @final_order_statuses.setter
    def final_order_statuses(self, final_order_statuses):
        """Sets the final_order_statuses of this Crs1EnforcementConclusions.


        :param final_order_statuses: The final_order_statuses of this Crs1EnforcementConclusions.
        :type final_order_statuses: List[Crs1FinalOrderStatuses]
        """
        if final_order_statuses is None:
            raise ValueError("Invalid value for `final_order_statuses`, must not be `None`")

        self._final_order_statuses = final_order_statuses

    @property
    def pollutant_reductions(self):
        """Gets the pollutant_reductions of this Crs1EnforcementConclusions.


        :return: The pollutant_reductions of this Crs1EnforcementConclusions.
        :rtype: List[Crs1PollutantReductions]
        """
        return self._pollutant_reductions

    @pollutant_reductions.setter
    def pollutant_reductions(self, pollutant_reductions):
        """Sets the pollutant_reductions of this Crs1EnforcementConclusions.


        :param pollutant_reductions: The pollutant_reductions of this Crs1EnforcementConclusions.
        :type pollutant_reductions: List[Crs1PollutantReductions]
        """
        if pollutant_reductions is None:
            raise ValueError("Invalid value for `pollutant_reductions`, must not be `None`")

        self._pollutant_reductions = pollutant_reductions

    @property
    def sep_cost(self):
        """Gets the sep_cost of this Crs1EnforcementConclusions.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The sep_cost of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._sep_cost

    @sep_cost.setter
    def sep_cost(self, sep_cost):
        """Sets the sep_cost of this Crs1EnforcementConclusions.

        The total value of all SEPs for all settlements at the enforcement case.

        :param sep_cost: The sep_cost of this Crs1EnforcementConclusions.
        :type sep_cost: str
        """
        if sep_cost is None:
            raise ValueError("Invalid value for `sep_cost`, must not be `None`")

        self._sep_cost = sep_cost

    @property
    def settlement_entered_date(self):
        """Gets the settlement_entered_date of this Crs1EnforcementConclusions.

        The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.

        :return: The settlement_entered_date of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._settlement_entered_date

    @settlement_entered_date.setter
    def settlement_entered_date(self, settlement_entered_date):
        """Sets the settlement_entered_date of this Crs1EnforcementConclusions.

        The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.

        :param settlement_entered_date: The settlement_entered_date of this Crs1EnforcementConclusions.
        :type settlement_entered_date: str
        """
        if settlement_entered_date is None:
            raise ValueError("Invalid value for `settlement_entered_date`, must not be `None`")

        self._settlement_entered_date = settlement_entered_date

    @property
    def settlement_lodged_date(self):
        """Gets the settlement_lodged_date of this Crs1EnforcementConclusions.

        The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).

        :return: The settlement_lodged_date of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._settlement_lodged_date

    @settlement_lodged_date.setter
    def settlement_lodged_date(self, settlement_lodged_date):
        """Sets the settlement_lodged_date of this Crs1EnforcementConclusions.

        The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).

        :param settlement_lodged_date: The settlement_lodged_date of this Crs1EnforcementConclusions.
        :type settlement_lodged_date: str
        """
        if settlement_lodged_date is None:
            raise ValueError("Invalid value for `settlement_lodged_date`, must not be `None`")

        self._settlement_lodged_date = settlement_lodged_date

    @property
    def state_penalty(self):
        """Gets the state_penalty of this Crs1EnforcementConclusions.

        The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :return: The state_penalty of this Crs1EnforcementConclusions.
        :rtype: str
        """
        return self._state_penalty

    @state_penalty.setter
    def state_penalty(self, state_penalty):
        """Sets the state_penalty of this Crs1EnforcementConclusions.

        The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :param state_penalty: The state_penalty of this Crs1EnforcementConclusions.
        :type state_penalty: str
        """
        if state_penalty is None:
            raise ValueError("Invalid value for `state_penalty`, must not be `None`")

        self._state_penalty = state_penalty

    @property
    def supplemental_environmental_projects(self):
        """Gets the supplemental_environmental_projects of this Crs1EnforcementConclusions.


        :return: The supplemental_environmental_projects of this Crs1EnforcementConclusions.
        :rtype: List[Crs1SupplementalEnvironmentalProjects]
        """
        return self._supplemental_environmental_projects

    @supplemental_environmental_projects.setter
    def supplemental_environmental_projects(self, supplemental_environmental_projects):
        """Sets the supplemental_environmental_projects of this Crs1EnforcementConclusions.


        :param supplemental_environmental_projects: The supplemental_environmental_projects of this Crs1EnforcementConclusions.
        :type supplemental_environmental_projects: List[Crs1SupplementalEnvironmentalProjects]
        """
        if supplemental_environmental_projects is None:
            raise ValueError("Invalid value for `supplemental_environmental_projects`, must not be `None`")

        self._supplemental_environmental_projects = supplemental_environmental_projects
