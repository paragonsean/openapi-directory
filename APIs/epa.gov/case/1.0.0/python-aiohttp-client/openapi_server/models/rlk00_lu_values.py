# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rlk00LuValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value_code: str=None, value_description: str=None):
        """Rlk00LuValues - a model defined in OpenAPI

        :param value_code: The value_code of this Rlk00LuValues.
        :param value_description: The value_description of this Rlk00LuValues.
        """
        self.openapi_types = {
            'value_code': str,
            'value_description': str
        }

        self.attribute_map = {
            'value_code': 'ValueCode',
            'value_description': 'ValueDescription'
        }

        self._value_code = value_code
        self._value_description = value_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rlk00LuValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rlk00_LuValues of this Rlk00LuValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value_code(self):
        """Gets the value_code of this Rlk00LuValues.


        :return: The value_code of this Rlk00LuValues.
        :rtype: str
        """
        return self._value_code

    @value_code.setter
    def value_code(self, value_code):
        """Sets the value_code of this Rlk00LuValues.


        :param value_code: The value_code of this Rlk00LuValues.
        :type value_code: str
        """
        if value_code is None:
            raise ValueError("Invalid value for `value_code`, must not be `None`")

        self._value_code = value_code

    @property
    def value_description(self):
        """Gets the value_description of this Rlk00LuValues.


        :return: The value_description of this Rlk00LuValues.
        :rtype: str
        """
        return self._value_description

    @value_description.setter
    def value_description(self, value_description):
        """Sets the value_description of this Rlk00LuValues.


        :param value_description: The value_description of this Rlk00LuValues.
        :type value_description: str
        """
        if value_description is None:
            raise ValueError("Invalid value for `value_description`, must not be `None`")

        self._value_description = value_description
