# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1CaseInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, case_name: str=None, case_number: str=None, case_status: str=None, case_status_date: str=None, case_summary: str=None, case_type: str=None, doj_docket_number: str=None, enforcement_outcome: str=None, enforcement_type: str=None, headquarters_division: str=None, lead: str=None, multi_media_case: str=None, regional_docket_number: str=None, relief_sought: str=None, result_vol_disclosure: str=None, total_compliance_action_cost: str=None, total_cost_recovery: str=None, total_federal_penalty: str=None, total_sep_cost: str=None, total_state_penalty: str=None, violations: str=None):
        """Crs1CaseInformation - a model defined in OpenAPI

        :param branch: The branch of this Crs1CaseInformation.
        :param case_name: The case_name of this Crs1CaseInformation.
        :param case_number: The case_number of this Crs1CaseInformation.
        :param case_status: The case_status of this Crs1CaseInformation.
        :param case_status_date: The case_status_date of this Crs1CaseInformation.
        :param case_summary: The case_summary of this Crs1CaseInformation.
        :param case_type: The case_type of this Crs1CaseInformation.
        :param doj_docket_number: The doj_docket_number of this Crs1CaseInformation.
        :param enforcement_outcome: The enforcement_outcome of this Crs1CaseInformation.
        :param enforcement_type: The enforcement_type of this Crs1CaseInformation.
        :param headquarters_division: The headquarters_division of this Crs1CaseInformation.
        :param lead: The lead of this Crs1CaseInformation.
        :param multi_media_case: The multi_media_case of this Crs1CaseInformation.
        :param regional_docket_number: The regional_docket_number of this Crs1CaseInformation.
        :param relief_sought: The relief_sought of this Crs1CaseInformation.
        :param result_vol_disclosure: The result_vol_disclosure of this Crs1CaseInformation.
        :param total_compliance_action_cost: The total_compliance_action_cost of this Crs1CaseInformation.
        :param total_cost_recovery: The total_cost_recovery of this Crs1CaseInformation.
        :param total_federal_penalty: The total_federal_penalty of this Crs1CaseInformation.
        :param total_sep_cost: The total_sep_cost of this Crs1CaseInformation.
        :param total_state_penalty: The total_state_penalty of this Crs1CaseInformation.
        :param violations: The violations of this Crs1CaseInformation.
        """
        self.openapi_types = {
            'branch': str,
            'case_name': str,
            'case_number': str,
            'case_status': str,
            'case_status_date': str,
            'case_summary': str,
            'case_type': str,
            'doj_docket_number': str,
            'enforcement_outcome': str,
            'enforcement_type': str,
            'headquarters_division': str,
            'lead': str,
            'multi_media_case': str,
            'regional_docket_number': str,
            'relief_sought': str,
            'result_vol_disclosure': str,
            'total_compliance_action_cost': str,
            'total_cost_recovery': str,
            'total_federal_penalty': str,
            'total_sep_cost': str,
            'total_state_penalty': str,
            'violations': str
        }

        self.attribute_map = {
            'branch': 'Branch',
            'case_name': 'CaseName',
            'case_number': 'CaseNumber',
            'case_status': 'CaseStatus',
            'case_status_date': 'CaseStatusDate',
            'case_summary': 'CaseSummary',
            'case_type': 'CaseType',
            'doj_docket_number': 'DOJDocketNumber',
            'enforcement_outcome': 'EnforcementOutcome',
            'enforcement_type': 'EnforcementType',
            'headquarters_division': 'HeadquartersDivision',
            'lead': 'Lead',
            'multi_media_case': 'MultiMediaCase',
            'regional_docket_number': 'RegionalDocketNumber',
            'relief_sought': 'ReliefSought',
            'result_vol_disclosure': 'ResultVolDisclosure',
            'total_compliance_action_cost': 'TotalComplianceActionCost',
            'total_cost_recovery': 'TotalCostRecovery',
            'total_federal_penalty': 'TotalFederalPenalty',
            'total_sep_cost': 'TotalSEPCost',
            'total_state_penalty': 'TotalStatePenalty',
            'violations': 'Violations'
        }

        self._branch = branch
        self._case_name = case_name
        self._case_number = case_number
        self._case_status = case_status
        self._case_status_date = case_status_date
        self._case_summary = case_summary
        self._case_type = case_type
        self._doj_docket_number = doj_docket_number
        self._enforcement_outcome = enforcement_outcome
        self._enforcement_type = enforcement_type
        self._headquarters_division = headquarters_division
        self._lead = lead
        self._multi_media_case = multi_media_case
        self._regional_docket_number = regional_docket_number
        self._relief_sought = relief_sought
        self._result_vol_disclosure = result_vol_disclosure
        self._total_compliance_action_cost = total_compliance_action_cost
        self._total_cost_recovery = total_cost_recovery
        self._total_federal_penalty = total_federal_penalty
        self._total_sep_cost = total_sep_cost
        self._total_state_penalty = total_state_penalty
        self._violations = violations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1CaseInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_CaseInformation of this Crs1CaseInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this Crs1CaseInformation.

        The Branch or Unit of the Office of Regional Counsel assigned for the case.

        :return: The branch of this Crs1CaseInformation.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Crs1CaseInformation.

        The Branch or Unit of the Office of Regional Counsel assigned for the case.

        :param branch: The branch of this Crs1CaseInformation.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def case_name(self):
        """Gets the case_name of this Crs1CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :return: The case_name of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this Crs1CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :param case_name: The case_name of this Crs1CaseInformation.
        :type case_name: str
        """
        if case_name is None:
            raise ValueError("Invalid value for `case_name`, must not be `None`")

        self._case_name = case_name

    @property
    def case_number(self):
        """Gets the case_number of this Crs1CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :return: The case_number of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """Sets the case_number of this Crs1CaseInformation.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :param case_number: The case_number of this Crs1CaseInformation.
        :type case_number: str
        """
        if case_number is None:
            raise ValueError("Invalid value for `case_number`, must not be `None`")

        self._case_number = case_number

    @property
    def case_status(self):
        """Gets the case_status of this Crs1CaseInformation.

        The status of the compliance event or enforcement action.

        :return: The case_status of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_status

    @case_status.setter
    def case_status(self, case_status):
        """Sets the case_status of this Crs1CaseInformation.

        The status of the compliance event or enforcement action.

        :param case_status: The case_status of this Crs1CaseInformation.
        :type case_status: str
        """
        if case_status is None:
            raise ValueError("Invalid value for `case_status`, must not be `None`")

        self._case_status = case_status

    @property
    def case_status_date(self):
        """Gets the case_status_date of this Crs1CaseInformation.

        The date of the most recent milestone activity.

        :return: The case_status_date of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_status_date

    @case_status_date.setter
    def case_status_date(self, case_status_date):
        """Sets the case_status_date of this Crs1CaseInformation.

        The date of the most recent milestone activity.

        :param case_status_date: The case_status_date of this Crs1CaseInformation.
        :type case_status_date: str
        """
        if case_status_date is None:
            raise ValueError("Invalid value for `case_status_date`, must not be `None`")

        self._case_status_date = case_status_date

    @property
    def case_summary(self):
        """Gets the case_summary of this Crs1CaseInformation.

        The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.

        :return: The case_summary of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_summary

    @case_summary.setter
    def case_summary(self, case_summary):
        """Sets the case_summary of this Crs1CaseInformation.

        The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.

        :param case_summary: The case_summary of this Crs1CaseInformation.
        :type case_summary: str
        """
        if case_summary is None:
            raise ValueError("Invalid value for `case_summary`, must not be `None`")

        self._case_summary = case_summary

    @property
    def case_type(self):
        """Gets the case_type of this Crs1CaseInformation.

        The unique code that identifies a type of compliance event or enforcement action.

        :return: The case_type of this Crs1CaseInformation.
        :rtype: str
        """
        return self._case_type

    @case_type.setter
    def case_type(self, case_type):
        """Sets the case_type of this Crs1CaseInformation.

        The unique code that identifies a type of compliance event or enforcement action.

        :param case_type: The case_type of this Crs1CaseInformation.
        :type case_type: str
        """
        if case_type is None:
            raise ValueError("Invalid value for `case_type`, must not be `None`")

        self._case_type = case_type

    @property
    def doj_docket_number(self):
        """Gets the doj_docket_number of this Crs1CaseInformation.

        The docket number assigned by the Department of Justice to EPA's Enforcement Action.

        :return: The doj_docket_number of this Crs1CaseInformation.
        :rtype: str
        """
        return self._doj_docket_number

    @doj_docket_number.setter
    def doj_docket_number(self, doj_docket_number):
        """Sets the doj_docket_number of this Crs1CaseInformation.

        The docket number assigned by the Department of Justice to EPA's Enforcement Action.

        :param doj_docket_number: The doj_docket_number of this Crs1CaseInformation.
        :type doj_docket_number: str
        """
        if doj_docket_number is None:
            raise ValueError("Invalid value for `doj_docket_number`, must not be `None`")

        self._doj_docket_number = doj_docket_number

    @property
    def enforcement_outcome(self):
        """Gets the enforcement_outcome of this Crs1CaseInformation.

        A description of the mechanism by which the Enforcement Action is resolved.

        :return: The enforcement_outcome of this Crs1CaseInformation.
        :rtype: str
        """
        return self._enforcement_outcome

    @enforcement_outcome.setter
    def enforcement_outcome(self, enforcement_outcome):
        """Sets the enforcement_outcome of this Crs1CaseInformation.

        A description of the mechanism by which the Enforcement Action is resolved.

        :param enforcement_outcome: The enforcement_outcome of this Crs1CaseInformation.
        :type enforcement_outcome: str
        """
        if enforcement_outcome is None:
            raise ValueError("Invalid value for `enforcement_outcome`, must not be `None`")

        self._enforcement_outcome = enforcement_outcome

    @property
    def enforcement_type(self):
        """Gets the enforcement_type of this Crs1CaseInformation.

        A text description of the Enforcement Action type.

        :return: The enforcement_type of this Crs1CaseInformation.
        :rtype: str
        """
        return self._enforcement_type

    @enforcement_type.setter
    def enforcement_type(self, enforcement_type):
        """Sets the enforcement_type of this Crs1CaseInformation.

        A text description of the Enforcement Action type.

        :param enforcement_type: The enforcement_type of this Crs1CaseInformation.
        :type enforcement_type: str
        """
        if enforcement_type is None:
            raise ValueError("Invalid value for `enforcement_type`, must not be `None`")

        self._enforcement_type = enforcement_type

    @property
    def headquarters_division(self):
        """Gets the headquarters_division of this Crs1CaseInformation.

        The EPA Headquarters division that is tracking the case.

        :return: The headquarters_division of this Crs1CaseInformation.
        :rtype: str
        """
        return self._headquarters_division

    @headquarters_division.setter
    def headquarters_division(self, headquarters_division):
        """Sets the headquarters_division of this Crs1CaseInformation.

        The EPA Headquarters division that is tracking the case.

        :param headquarters_division: The headquarters_division of this Crs1CaseInformation.
        :type headquarters_division: str
        """
        if headquarters_division is None:
            raise ValueError("Invalid value for `headquarters_division`, must not be `None`")

        self._headquarters_division = headquarters_division

    @property
    def lead(self):
        """Gets the lead of this Crs1CaseInformation.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead of this Crs1CaseInformation.
        :rtype: str
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this Crs1CaseInformation.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead: The lead of this Crs1CaseInformation.
        :type lead: str
        """
        if lead is None:
            raise ValueError("Invalid value for `lead`, must not be `None`")

        self._lead = lead

    @property
    def multi_media_case(self):
        """Gets the multi_media_case of this Crs1CaseInformation.

        The flag indicating whether the activity was a multimedia action.

        :return: The multi_media_case of this Crs1CaseInformation.
        :rtype: str
        """
        return self._multi_media_case

    @multi_media_case.setter
    def multi_media_case(self, multi_media_case):
        """Sets the multi_media_case of this Crs1CaseInformation.

        The flag indicating whether the activity was a multimedia action.

        :param multi_media_case: The multi_media_case of this Crs1CaseInformation.
        :type multi_media_case: str
        """
        if multi_media_case is None:
            raise ValueError("Invalid value for `multi_media_case`, must not be `None`")

        self._multi_media_case = multi_media_case

    @property
    def regional_docket_number(self):
        """Gets the regional_docket_number of this Crs1CaseInformation.

        The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.

        :return: The regional_docket_number of this Crs1CaseInformation.
        :rtype: str
        """
        return self._regional_docket_number

    @regional_docket_number.setter
    def regional_docket_number(self, regional_docket_number):
        """Sets the regional_docket_number of this Crs1CaseInformation.

        The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.

        :param regional_docket_number: The regional_docket_number of this Crs1CaseInformation.
        :type regional_docket_number: str
        """
        if regional_docket_number is None:
            raise ValueError("Invalid value for `regional_docket_number`, must not be `None`")

        self._regional_docket_number = regional_docket_number

    @property
    def relief_sought(self):
        """Gets the relief_sought of this Crs1CaseInformation.

        The description for the type of relief requested in the complaint.

        :return: The relief_sought of this Crs1CaseInformation.
        :rtype: str
        """
        return self._relief_sought

    @relief_sought.setter
    def relief_sought(self, relief_sought):
        """Sets the relief_sought of this Crs1CaseInformation.

        The description for the type of relief requested in the complaint.

        :param relief_sought: The relief_sought of this Crs1CaseInformation.
        :type relief_sought: str
        """
        if relief_sought is None:
            raise ValueError("Invalid value for `relief_sought`, must not be `None`")

        self._relief_sought = relief_sought

    @property
    def result_vol_disclosure(self):
        """Gets the result_vol_disclosure of this Crs1CaseInformation.

        A flag that indicates the Enforcement Action was the result of a self disclosure.

        :return: The result_vol_disclosure of this Crs1CaseInformation.
        :rtype: str
        """
        return self._result_vol_disclosure

    @result_vol_disclosure.setter
    def result_vol_disclosure(self, result_vol_disclosure):
        """Sets the result_vol_disclosure of this Crs1CaseInformation.

        A flag that indicates the Enforcement Action was the result of a self disclosure.

        :param result_vol_disclosure: The result_vol_disclosure of this Crs1CaseInformation.
        :type result_vol_disclosure: str
        """
        if result_vol_disclosure is None:
            raise ValueError("Invalid value for `result_vol_disclosure`, must not be `None`")

        self._result_vol_disclosure = result_vol_disclosure

    @property
    def total_compliance_action_cost(self):
        """Gets the total_compliance_action_cost of this Crs1CaseInformation.

        The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.

        :return: The total_compliance_action_cost of this Crs1CaseInformation.
        :rtype: str
        """
        return self._total_compliance_action_cost

    @total_compliance_action_cost.setter
    def total_compliance_action_cost(self, total_compliance_action_cost):
        """Sets the total_compliance_action_cost of this Crs1CaseInformation.

        The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.

        :param total_compliance_action_cost: The total_compliance_action_cost of this Crs1CaseInformation.
        :type total_compliance_action_cost: str
        """
        if total_compliance_action_cost is None:
            raise ValueError("Invalid value for `total_compliance_action_cost`, must not be `None`")

        self._total_compliance_action_cost = total_compliance_action_cost

    @property
    def total_cost_recovery(self):
        """Gets the total_cost_recovery of this Crs1CaseInformation.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :return: The total_cost_recovery of this Crs1CaseInformation.
        :rtype: str
        """
        return self._total_cost_recovery

    @total_cost_recovery.setter
    def total_cost_recovery(self, total_cost_recovery):
        """Sets the total_cost_recovery of this Crs1CaseInformation.

        The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.

        :param total_cost_recovery: The total_cost_recovery of this Crs1CaseInformation.
        :type total_cost_recovery: str
        """
        if total_cost_recovery is None:
            raise ValueError("Invalid value for `total_cost_recovery`, must not be `None`")

        self._total_cost_recovery = total_cost_recovery

    @property
    def total_federal_penalty(self):
        """Gets the total_federal_penalty of this Crs1CaseInformation.

        For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)� as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.

        :return: The total_federal_penalty of this Crs1CaseInformation.
        :rtype: str
        """
        return self._total_federal_penalty

    @total_federal_penalty.setter
    def total_federal_penalty(self, total_federal_penalty):
        """Sets the total_federal_penalty of this Crs1CaseInformation.

        For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)� as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.

        :param total_federal_penalty: The total_federal_penalty of this Crs1CaseInformation.
        :type total_federal_penalty: str
        """
        if total_federal_penalty is None:
            raise ValueError("Invalid value for `total_federal_penalty`, must not be `None`")

        self._total_federal_penalty = total_federal_penalty

    @property
    def total_sep_cost(self):
        """Gets the total_sep_cost of this Crs1CaseInformation.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The total_sep_cost of this Crs1CaseInformation.
        :rtype: str
        """
        return self._total_sep_cost

    @total_sep_cost.setter
    def total_sep_cost(self, total_sep_cost):
        """Sets the total_sep_cost of this Crs1CaseInformation.

        The total value of all SEPs for all settlements at the enforcement case.

        :param total_sep_cost: The total_sep_cost of this Crs1CaseInformation.
        :type total_sep_cost: str
        """
        if total_sep_cost is None:
            raise ValueError("Invalid value for `total_sep_cost`, must not be `None`")

        self._total_sep_cost = total_sep_cost

    @property
    def total_state_penalty(self):
        """Gets the total_state_penalty of this Crs1CaseInformation.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :return: The total_state_penalty of this Crs1CaseInformation.
        :rtype: str
        """
        return self._total_state_penalty

    @total_state_penalty.setter
    def total_state_penalty(self, total_state_penalty):
        """Sets the total_state_penalty of this Crs1CaseInformation.

        The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.

        :param total_state_penalty: The total_state_penalty of this Crs1CaseInformation.
        :type total_state_penalty: str
        """
        if total_state_penalty is None:
            raise ValueError("Invalid value for `total_state_penalty`, must not be `None`")

        self._total_state_penalty = total_state_penalty

    @property
    def violations(self):
        """Gets the violations of this Crs1CaseInformation.

        A compilation of all Case Violation Descriptions related to the case.

        :return: The violations of this Crs1CaseInformation.
        :rtype: str
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this Crs1CaseInformation.

        A compilation of all Case Violation Descriptions related to the case.

        :param violations: The violations of this Crs1CaseInformation.
        :type violations: str
        """
        if violations is None:
            raise ValueError("Invalid value for `violations`, must not be `None`")

        self._violations = violations
