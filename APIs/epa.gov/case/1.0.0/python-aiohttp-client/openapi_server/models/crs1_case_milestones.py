# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1CaseMilestones(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_date: str=None, event: str=None):
        """Crs1CaseMilestones - a model defined in OpenAPI

        :param actual_date: The actual_date of this Crs1CaseMilestones.
        :param event: The event of this Crs1CaseMilestones.
        """
        self.openapi_types = {
            'actual_date': str,
            'event': str
        }

        self.attribute_map = {
            'actual_date': 'ActualDate',
            'event': 'Event'
        }

        self._actual_date = actual_date
        self._event = event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1CaseMilestones':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_CaseMilestones of this Crs1CaseMilestones.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_date(self):
        """Gets the actual_date of this Crs1CaseMilestones.

        The actual date on which the event was completed/achieved.

        :return: The actual_date of this Crs1CaseMilestones.
        :rtype: str
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this Crs1CaseMilestones.

        The actual date on which the event was completed/achieved.

        :param actual_date: The actual_date of this Crs1CaseMilestones.
        :type actual_date: str
        """
        if actual_date is None:
            raise ValueError("Invalid value for `actual_date`, must not be `None`")

        self._actual_date = actual_date

    @property
    def event(self):
        """Gets the event of this Crs1CaseMilestones.

        Identifies a major judicial or administrative enforcement action milestone.

        :return: The event of this Crs1CaseMilestones.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Crs1CaseMilestones.

        Identifies a major judicial or administrative enforcement action milestone.

        :param event: The event of this Crs1CaseMilestones.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event
