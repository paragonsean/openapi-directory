# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs0_cases import Crs0Cases
from openapi_server.models.crs0_cluster_output import Crs0ClusterOutput
from openapi_server.models.qp0 import Qp0
from openapi_server import util


class Crs0GetCaseInfoResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, afr_rows: str=None, cercla_rows: str=None, cwa_rows: str=None, cases: List[Crs0Cases]=None, cluster_output: Crs0ClusterOutput=None, cluster_records: str=None, criminal_rows: str=None, epcra_rows: str=None, fifra_rows: str=None, fed_pen_rows: str=None, federal_rows: str=None, jdc_rows: str=None, map_locations: str=None, message: str=None, query_parameters: List[Qp0]=None, query_rows: str=None, rcra_rows: str=None, sdwa_rows: str=None, sep_rows: str=None, tsca_rows: str=None):
        """Crs0GetCaseInfoResults - a model defined in OpenAPI

        :param afr_rows: The afr_rows of this Crs0GetCaseInfoResults.
        :param cercla_rows: The cercla_rows of this Crs0GetCaseInfoResults.
        :param cwa_rows: The cwa_rows of this Crs0GetCaseInfoResults.
        :param cases: The cases of this Crs0GetCaseInfoResults.
        :param cluster_output: The cluster_output of this Crs0GetCaseInfoResults.
        :param cluster_records: The cluster_records of this Crs0GetCaseInfoResults.
        :param criminal_rows: The criminal_rows of this Crs0GetCaseInfoResults.
        :param epcra_rows: The epcra_rows of this Crs0GetCaseInfoResults.
        :param fifra_rows: The fifra_rows of this Crs0GetCaseInfoResults.
        :param fed_pen_rows: The fed_pen_rows of this Crs0GetCaseInfoResults.
        :param federal_rows: The federal_rows of this Crs0GetCaseInfoResults.
        :param jdc_rows: The jdc_rows of this Crs0GetCaseInfoResults.
        :param map_locations: The map_locations of this Crs0GetCaseInfoResults.
        :param message: The message of this Crs0GetCaseInfoResults.
        :param query_parameters: The query_parameters of this Crs0GetCaseInfoResults.
        :param query_rows: The query_rows of this Crs0GetCaseInfoResults.
        :param rcra_rows: The rcra_rows of this Crs0GetCaseInfoResults.
        :param sdwa_rows: The sdwa_rows of this Crs0GetCaseInfoResults.
        :param sep_rows: The sep_rows of this Crs0GetCaseInfoResults.
        :param tsca_rows: The tsca_rows of this Crs0GetCaseInfoResults.
        """
        self.openapi_types = {
            'afr_rows': str,
            'cercla_rows': str,
            'cwa_rows': str,
            'cases': List[Crs0Cases],
            'cluster_output': Crs0ClusterOutput,
            'cluster_records': str,
            'criminal_rows': str,
            'epcra_rows': str,
            'fifra_rows': str,
            'fed_pen_rows': str,
            'federal_rows': str,
            'jdc_rows': str,
            'map_locations': str,
            'message': str,
            'query_parameters': List[Qp0],
            'query_rows': str,
            'rcra_rows': str,
            'sdwa_rows': str,
            'sep_rows': str,
            'tsca_rows': str
        }

        self.attribute_map = {
            'afr_rows': 'AFRRows',
            'cercla_rows': 'CERCLARows',
            'cwa_rows': 'CWARows',
            'cases': 'Cases',
            'cluster_output': 'ClusterOutput',
            'cluster_records': 'ClusterRecords',
            'criminal_rows': 'CriminalRows',
            'epcra_rows': 'EPCRARows',
            'fifra_rows': 'FIFRARows',
            'fed_pen_rows': 'FedPenRows',
            'federal_rows': 'FederalRows',
            'jdc_rows': 'JDCRows',
            'map_locations': 'MapLocations',
            'message': 'Message',
            'query_parameters': 'QueryParameters',
            'query_rows': 'QueryRows',
            'rcra_rows': 'RCRARows',
            'sdwa_rows': 'SDWARows',
            'sep_rows': 'SEPRows',
            'tsca_rows': 'TSCARows'
        }

        self._afr_rows = afr_rows
        self._cercla_rows = cercla_rows
        self._cwa_rows = cwa_rows
        self._cases = cases
        self._cluster_output = cluster_output
        self._cluster_records = cluster_records
        self._criminal_rows = criminal_rows
        self._epcra_rows = epcra_rows
        self._fifra_rows = fifra_rows
        self._fed_pen_rows = fed_pen_rows
        self._federal_rows = federal_rows
        self._jdc_rows = jdc_rows
        self._map_locations = map_locations
        self._message = message
        self._query_parameters = query_parameters
        self._query_rows = query_rows
        self._rcra_rows = rcra_rows
        self._sdwa_rows = sdwa_rows
        self._sep_rows = sep_rows
        self._tsca_rows = tsca_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs0GetCaseInfoResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs0_get_case_info.Results of this Crs0GetCaseInfoResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def afr_rows(self):
        """Gets the afr_rows of this Crs0GetCaseInfoResults.

        Displays the number of Administrative Formal cases within the search results.

        :return: The afr_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._afr_rows

    @afr_rows.setter
    def afr_rows(self, afr_rows):
        """Sets the afr_rows of this Crs0GetCaseInfoResults.

        Displays the number of Administrative Formal cases within the search results.

        :param afr_rows: The afr_rows of this Crs0GetCaseInfoResults.
        :type afr_rows: str
        """
        if afr_rows is None:
            raise ValueError("Invalid value for `afr_rows`, must not be `None`")

        self._afr_rows = afr_rows

    @property
    def cercla_rows(self):
        """Gets the cercla_rows of this Crs0GetCaseInfoResults.

        The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).

        :return: The cercla_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._cercla_rows

    @cercla_rows.setter
    def cercla_rows(self, cercla_rows):
        """Sets the cercla_rows of this Crs0GetCaseInfoResults.

        The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).

        :param cercla_rows: The cercla_rows of this Crs0GetCaseInfoResults.
        :type cercla_rows: str
        """
        if cercla_rows is None:
            raise ValueError("Invalid value for `cercla_rows`, must not be `None`")

        self._cercla_rows = cercla_rows

    @property
    def cwa_rows(self):
        """Gets the cwa_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :return: The cwa_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._cwa_rows

    @cwa_rows.setter
    def cwa_rows(self, cwa_rows):
        """Sets the cwa_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :param cwa_rows: The cwa_rows of this Crs0GetCaseInfoResults.
        :type cwa_rows: str
        """
        if cwa_rows is None:
            raise ValueError("Invalid value for `cwa_rows`, must not be `None`")

        self._cwa_rows = cwa_rows

    @property
    def cases(self):
        """Gets the cases of this Crs0GetCaseInfoResults.

        A summary of the violation(s), environmental problem(s), and a description of the cause of action.

        :return: The cases of this Crs0GetCaseInfoResults.
        :rtype: List[Crs0Cases]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Crs0GetCaseInfoResults.

        A summary of the violation(s), environmental problem(s), and a description of the cause of action.

        :param cases: The cases of this Crs0GetCaseInfoResults.
        :type cases: List[Crs0Cases]
        """

        self._cases = cases

    @property
    def cluster_output(self):
        """Gets the cluster_output of this Crs0GetCaseInfoResults.


        :return: The cluster_output of this Crs0GetCaseInfoResults.
        :rtype: Crs0ClusterOutput
        """
        return self._cluster_output

    @cluster_output.setter
    def cluster_output(self, cluster_output):
        """Sets the cluster_output of this Crs0GetCaseInfoResults.


        :param cluster_output: The cluster_output of this Crs0GetCaseInfoResults.
        :type cluster_output: Crs0ClusterOutput
        """

        self._cluster_output = cluster_output

    @property
    def cluster_records(self):
        """Gets the cluster_records of this Crs0GetCaseInfoResults.

        Number of clusters returned.

        :return: The cluster_records of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._cluster_records

    @cluster_records.setter
    def cluster_records(self, cluster_records):
        """Sets the cluster_records of this Crs0GetCaseInfoResults.

        Number of clusters returned.

        :param cluster_records: The cluster_records of this Crs0GetCaseInfoResults.
        :type cluster_records: str
        """

        self._cluster_records = cluster_records

    @property
    def criminal_rows(self):
        """Gets the criminal_rows of this Crs0GetCaseInfoResults.

        Displays the number of criminal enforcement cases within the search results.

        :return: The criminal_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._criminal_rows

    @criminal_rows.setter
    def criminal_rows(self, criminal_rows):
        """Sets the criminal_rows of this Crs0GetCaseInfoResults.

        Displays the number of criminal enforcement cases within the search results.

        :param criminal_rows: The criminal_rows of this Crs0GetCaseInfoResults.
        :type criminal_rows: str
        """
        if criminal_rows is None:
            raise ValueError("Invalid value for `criminal_rows`, must not be `None`")

        self._criminal_rows = criminal_rows

    @property
    def epcra_rows(self):
        """Gets the epcra_rows of this Crs0GetCaseInfoResults.

        The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).

        :return: The epcra_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._epcra_rows

    @epcra_rows.setter
    def epcra_rows(self, epcra_rows):
        """Sets the epcra_rows of this Crs0GetCaseInfoResults.

        The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).

        :param epcra_rows: The epcra_rows of this Crs0GetCaseInfoResults.
        :type epcra_rows: str
        """
        if epcra_rows is None:
            raise ValueError("Invalid value for `epcra_rows`, must not be `None`")

        self._epcra_rows = epcra_rows

    @property
    def fifra_rows(self):
        """Gets the fifra_rows of this Crs0GetCaseInfoResults.

        The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).

        :return: The fifra_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._fifra_rows

    @fifra_rows.setter
    def fifra_rows(self, fifra_rows):
        """Sets the fifra_rows of this Crs0GetCaseInfoResults.

        The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).

        :param fifra_rows: The fifra_rows of this Crs0GetCaseInfoResults.
        :type fifra_rows: str
        """
        if fifra_rows is None:
            raise ValueError("Invalid value for `fifra_rows`, must not be `None`")

        self._fifra_rows = fifra_rows

    @property
    def fed_pen_rows(self):
        """Gets the fed_pen_rows of this Crs0GetCaseInfoResults.

        Displays the number of cases with federal penalty assessed greater than $0.

        :return: The fed_pen_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._fed_pen_rows

    @fed_pen_rows.setter
    def fed_pen_rows(self, fed_pen_rows):
        """Sets the fed_pen_rows of this Crs0GetCaseInfoResults.

        Displays the number of cases with federal penalty assessed greater than $0.

        :param fed_pen_rows: The fed_pen_rows of this Crs0GetCaseInfoResults.
        :type fed_pen_rows: str
        """
        if fed_pen_rows is None:
            raise ValueError("Invalid value for `fed_pen_rows`, must not be `None`")

        self._fed_pen_rows = fed_pen_rows

    @property
    def federal_rows(self):
        """Gets the federal_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the result set that have a relationship to a Federal facility.

        :return: The federal_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._federal_rows

    @federal_rows.setter
    def federal_rows(self, federal_rows):
        """Sets the federal_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the result set that have a relationship to a Federal facility.

        :param federal_rows: The federal_rows of this Crs0GetCaseInfoResults.
        :type federal_rows: str
        """
        if federal_rows is None:
            raise ValueError("Invalid value for `federal_rows`, must not be `None`")

        self._federal_rows = federal_rows

    @property
    def jdc_rows(self):
        """Gets the jdc_rows of this Crs0GetCaseInfoResults.

        Displays the number of Judicial cases within the search results.

        :return: The jdc_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._jdc_rows

    @jdc_rows.setter
    def jdc_rows(self, jdc_rows):
        """Sets the jdc_rows of this Crs0GetCaseInfoResults.

        Displays the number of Judicial cases within the search results.

        :param jdc_rows: The jdc_rows of this Crs0GetCaseInfoResults.
        :type jdc_rows: str
        """
        if jdc_rows is None:
            raise ValueError("Invalid value for `jdc_rows`, must not be `None`")

        self._jdc_rows = jdc_rows

    @property
    def map_locations(self):
        """Gets the map_locations of this Crs0GetCaseInfoResults.

        Number of Faciliy Locations related to the Case Search Results

        :return: The map_locations of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._map_locations

    @map_locations.setter
    def map_locations(self, map_locations):
        """Sets the map_locations of this Crs0GetCaseInfoResults.

        Number of Faciliy Locations related to the Case Search Results

        :param map_locations: The map_locations of this Crs0GetCaseInfoResults.
        :type map_locations: str
        """
        if map_locations is None:
            raise ValueError("Invalid value for `map_locations`, must not be `None`")

        self._map_locations = map_locations

    @property
    def message(self):
        """Gets the message of this Crs0GetCaseInfoResults.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Crs0GetCaseInfoResults.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Crs0GetCaseInfoResults.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def query_parameters(self):
        """Gets the query_parameters of this Crs0GetCaseInfoResults.

        A list of submitted query parameters and their values.

        :return: The query_parameters of this Crs0GetCaseInfoResults.
        :rtype: List[Qp0]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this Crs0GetCaseInfoResults.

        A list of submitted query parameters and their values.

        :param query_parameters: The query_parameters of this Crs0GetCaseInfoResults.
        :type query_parameters: List[Qp0]
        """
        if query_parameters is None:
            raise ValueError("Invalid value for `query_parameters`, must not be `None`")

        self._query_parameters = query_parameters

    @property
    def query_rows(self):
        """Gets the query_rows of this Crs0GetCaseInfoResults.

        Number of query results returned

        :return: The query_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._query_rows

    @query_rows.setter
    def query_rows(self, query_rows):
        """Sets the query_rows of this Crs0GetCaseInfoResults.

        Number of query results returned

        :param query_rows: The query_rows of this Crs0GetCaseInfoResults.
        :type query_rows: str
        """
        if query_rows is None:
            raise ValueError("Invalid value for `query_rows`, must not be `None`")

        self._query_rows = query_rows

    @property
    def rcra_rows(self):
        """Gets the rcra_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :return: The rcra_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._rcra_rows

    @rcra_rows.setter
    def rcra_rows(self, rcra_rows):
        """Sets the rcra_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :param rcra_rows: The rcra_rows of this Crs0GetCaseInfoResults.
        :type rcra_rows: str
        """
        if rcra_rows is None:
            raise ValueError("Invalid value for `rcra_rows`, must not be `None`")

        self._rcra_rows = rcra_rows

    @property
    def sdwa_rows(self):
        """Gets the sdwa_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.

        :return: The sdwa_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._sdwa_rows

    @sdwa_rows.setter
    def sdwa_rows(self, sdwa_rows):
        """Sets the sdwa_rows of this Crs0GetCaseInfoResults.

        The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.

        :param sdwa_rows: The sdwa_rows of this Crs0GetCaseInfoResults.
        :type sdwa_rows: str
        """
        if sdwa_rows is None:
            raise ValueError("Invalid value for `sdwa_rows`, must not be `None`")

        self._sdwa_rows = sdwa_rows

    @property
    def sep_rows(self):
        """Gets the sep_rows of this Crs0GetCaseInfoResults.

        Displays the number of cases with SEP amount greater than $0.

        :return: The sep_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._sep_rows

    @sep_rows.setter
    def sep_rows(self, sep_rows):
        """Sets the sep_rows of this Crs0GetCaseInfoResults.

        Displays the number of cases with SEP amount greater than $0.

        :param sep_rows: The sep_rows of this Crs0GetCaseInfoResults.
        :type sep_rows: str
        """
        if sep_rows is None:
            raise ValueError("Invalid value for `sep_rows`, must not be `None`")

        self._sep_rows = sep_rows

    @property
    def tsca_rows(self):
        """Gets the tsca_rows of this Crs0GetCaseInfoResults.

        The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).

        :return: The tsca_rows of this Crs0GetCaseInfoResults.
        :rtype: str
        """
        return self._tsca_rows

    @tsca_rows.setter
    def tsca_rows(self, tsca_rows):
        """Sets the tsca_rows of this Crs0GetCaseInfoResults.

        The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).

        :param tsca_rows: The tsca_rows of this Crs0GetCaseInfoResults.
        :type tsca_rows: str
        """
        if tsca_rows is None:
            raise ValueError("Invalid value for `tsca_rows`, must not be `None`")

        self._tsca_rows = tsca_rows
