# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs1_caed_documents import Crs1CAEDDocuments
from openapi_server.models.crs1_case_information import Crs1CaseInformation
from openapi_server.models.crs1_case_milestones import Crs1CaseMilestones
from openapi_server.models.crs1_citations import Crs1Citations
from openapi_server.models.crs1_defendants import Crs1Defendants
from openapi_server.models.crs1_enforcement_conclusions import Crs1EnforcementConclusions
from openapi_server.models.crs1_facilities import Crs1Facilities
from openapi_server.models.crs1_laws_and_sections import Crs1LawsAndSections
from openapi_server.models.crs1_pollutants import Crs1Pollutants
from openapi_server.models.crs1_program_links import Crs1ProgramLinks
from openapi_server.models.crs1_related_activities import Crs1RelatedActivities
from openapi_server import util


class Crs1Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caed_documents: List[Crs1CAEDDocuments]=None, case_information: Crs1CaseInformation=None, case_milestones: List[Crs1CaseMilestones]=None, citations: List[Crs1Citations]=None, defendants: List[Crs1Defendants]=None, enforcement_conclusions: List[Crs1EnforcementConclusions]=None, facilities: List[Crs1Facilities]=None, laws_and_sections: List[Crs1LawsAndSections]=None, message: str=None, pollutants: List[Crs1Pollutants]=None, program_links: List[Crs1ProgramLinks]=None, related_activities: List[Crs1RelatedActivities]=None):
        """Crs1Results - a model defined in OpenAPI

        :param caed_documents: The caed_documents of this Crs1Results.
        :param case_information: The case_information of this Crs1Results.
        :param case_milestones: The case_milestones of this Crs1Results.
        :param citations: The citations of this Crs1Results.
        :param defendants: The defendants of this Crs1Results.
        :param enforcement_conclusions: The enforcement_conclusions of this Crs1Results.
        :param facilities: The facilities of this Crs1Results.
        :param laws_and_sections: The laws_and_sections of this Crs1Results.
        :param message: The message of this Crs1Results.
        :param pollutants: The pollutants of this Crs1Results.
        :param program_links: The program_links of this Crs1Results.
        :param related_activities: The related_activities of this Crs1Results.
        """
        self.openapi_types = {
            'caed_documents': List[Crs1CAEDDocuments],
            'case_information': Crs1CaseInformation,
            'case_milestones': List[Crs1CaseMilestones],
            'citations': List[Crs1Citations],
            'defendants': List[Crs1Defendants],
            'enforcement_conclusions': List[Crs1EnforcementConclusions],
            'facilities': List[Crs1Facilities],
            'laws_and_sections': List[Crs1LawsAndSections],
            'message': str,
            'pollutants': List[Crs1Pollutants],
            'program_links': List[Crs1ProgramLinks],
            'related_activities': List[Crs1RelatedActivities]
        }

        self.attribute_map = {
            'caed_documents': 'CAEDDocuments',
            'case_information': 'CaseInformation',
            'case_milestones': 'CaseMilestones',
            'citations': 'Citations',
            'defendants': 'Defendants',
            'enforcement_conclusions': 'EnforcementConclusions',
            'facilities': 'Facilities',
            'laws_and_sections': 'LawsAndSections',
            'message': 'Message',
            'pollutants': 'Pollutants',
            'program_links': 'ProgramLinks',
            'related_activities': 'RelatedActivities'
        }

        self._caed_documents = caed_documents
        self._case_information = case_information
        self._case_milestones = case_milestones
        self._citations = citations
        self._defendants = defendants
        self._enforcement_conclusions = enforcement_conclusions
        self._facilities = facilities
        self._laws_and_sections = laws_and_sections
        self._message = message
        self._pollutants = pollutants
        self._program_links = program_links
        self._related_activities = related_activities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_Results of this Crs1Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caed_documents(self):
        """Gets the caed_documents of this Crs1Results.


        :return: The caed_documents of this Crs1Results.
        :rtype: List[Crs1CAEDDocuments]
        """
        return self._caed_documents

    @caed_documents.setter
    def caed_documents(self, caed_documents):
        """Sets the caed_documents of this Crs1Results.


        :param caed_documents: The caed_documents of this Crs1Results.
        :type caed_documents: List[Crs1CAEDDocuments]
        """
        if caed_documents is None:
            raise ValueError("Invalid value for `caed_documents`, must not be `None`")

        self._caed_documents = caed_documents

    @property
    def case_information(self):
        """Gets the case_information of this Crs1Results.


        :return: The case_information of this Crs1Results.
        :rtype: Crs1CaseInformation
        """
        return self._case_information

    @case_information.setter
    def case_information(self, case_information):
        """Sets the case_information of this Crs1Results.


        :param case_information: The case_information of this Crs1Results.
        :type case_information: Crs1CaseInformation
        """
        if case_information is None:
            raise ValueError("Invalid value for `case_information`, must not be `None`")

        self._case_information = case_information

    @property
    def case_milestones(self):
        """Gets the case_milestones of this Crs1Results.


        :return: The case_milestones of this Crs1Results.
        :rtype: List[Crs1CaseMilestones]
        """
        return self._case_milestones

    @case_milestones.setter
    def case_milestones(self, case_milestones):
        """Sets the case_milestones of this Crs1Results.


        :param case_milestones: The case_milestones of this Crs1Results.
        :type case_milestones: List[Crs1CaseMilestones]
        """
        if case_milestones is None:
            raise ValueError("Invalid value for `case_milestones`, must not be `None`")

        self._case_milestones = case_milestones

    @property
    def citations(self):
        """Gets the citations of this Crs1Results.


        :return: The citations of this Crs1Results.
        :rtype: List[Crs1Citations]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this Crs1Results.


        :param citations: The citations of this Crs1Results.
        :type citations: List[Crs1Citations]
        """
        if citations is None:
            raise ValueError("Invalid value for `citations`, must not be `None`")

        self._citations = citations

    @property
    def defendants(self):
        """Gets the defendants of this Crs1Results.


        :return: The defendants of this Crs1Results.
        :rtype: List[Crs1Defendants]
        """
        return self._defendants

    @defendants.setter
    def defendants(self, defendants):
        """Sets the defendants of this Crs1Results.


        :param defendants: The defendants of this Crs1Results.
        :type defendants: List[Crs1Defendants]
        """
        if defendants is None:
            raise ValueError("Invalid value for `defendants`, must not be `None`")

        self._defendants = defendants

    @property
    def enforcement_conclusions(self):
        """Gets the enforcement_conclusions of this Crs1Results.


        :return: The enforcement_conclusions of this Crs1Results.
        :rtype: List[Crs1EnforcementConclusions]
        """
        return self._enforcement_conclusions

    @enforcement_conclusions.setter
    def enforcement_conclusions(self, enforcement_conclusions):
        """Sets the enforcement_conclusions of this Crs1Results.


        :param enforcement_conclusions: The enforcement_conclusions of this Crs1Results.
        :type enforcement_conclusions: List[Crs1EnforcementConclusions]
        """
        if enforcement_conclusions is None:
            raise ValueError("Invalid value for `enforcement_conclusions`, must not be `None`")

        self._enforcement_conclusions = enforcement_conclusions

    @property
    def facilities(self):
        """Gets the facilities of this Crs1Results.

        A complex array of facility information.

        :return: The facilities of this Crs1Results.
        :rtype: List[Crs1Facilities]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Crs1Results.

        A complex array of facility information.

        :param facilities: The facilities of this Crs1Results.
        :type facilities: List[Crs1Facilities]
        """
        if facilities is None:
            raise ValueError("Invalid value for `facilities`, must not be `None`")

        self._facilities = facilities

    @property
    def laws_and_sections(self):
        """Gets the laws_and_sections of this Crs1Results.


        :return: The laws_and_sections of this Crs1Results.
        :rtype: List[Crs1LawsAndSections]
        """
        return self._laws_and_sections

    @laws_and_sections.setter
    def laws_and_sections(self, laws_and_sections):
        """Sets the laws_and_sections of this Crs1Results.


        :param laws_and_sections: The laws_and_sections of this Crs1Results.
        :type laws_and_sections: List[Crs1LawsAndSections]
        """
        if laws_and_sections is None:
            raise ValueError("Invalid value for `laws_and_sections`, must not be `None`")

        self._laws_and_sections = laws_and_sections

    @property
    def message(self):
        """Gets the message of this Crs1Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Crs1Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Crs1Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Crs1Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def pollutants(self):
        """Gets the pollutants of this Crs1Results.


        :return: The pollutants of this Crs1Results.
        :rtype: List[Crs1Pollutants]
        """
        return self._pollutants

    @pollutants.setter
    def pollutants(self, pollutants):
        """Sets the pollutants of this Crs1Results.


        :param pollutants: The pollutants of this Crs1Results.
        :type pollutants: List[Crs1Pollutants]
        """
        if pollutants is None:
            raise ValueError("Invalid value for `pollutants`, must not be `None`")

        self._pollutants = pollutants

    @property
    def program_links(self):
        """Gets the program_links of this Crs1Results.


        :return: The program_links of this Crs1Results.
        :rtype: List[Crs1ProgramLinks]
        """
        return self._program_links

    @program_links.setter
    def program_links(self, program_links):
        """Sets the program_links of this Crs1Results.


        :param program_links: The program_links of this Crs1Results.
        :type program_links: List[Crs1ProgramLinks]
        """
        if program_links is None:
            raise ValueError("Invalid value for `program_links`, must not be `None`")

        self._program_links = program_links

    @property
    def related_activities(self):
        """Gets the related_activities of this Crs1Results.

        This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.

        :return: The related_activities of this Crs1Results.
        :rtype: List[Crs1RelatedActivities]
        """
        return self._related_activities

    @related_activities.setter
    def related_activities(self, related_activities):
        """Sets the related_activities of this Crs1Results.

        This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.

        :param related_activities: The related_activities of this Crs1Results.
        :type related_activities: List[Crs1RelatedActivities]
        """
        if related_activities is None:
            raise ValueError("Invalid value for `related_activities`, must not be `None`")

        self._related_activities = related_activities
