# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.met2 import Met2
from openapi_server import util


class Met1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, result_columns: List[Met2]=None):
        """Met1 - a model defined in OpenAPI

        :param message: The message of this Met1.
        :param result_columns: The result_columns of this Met1.
        """
        self.openapi_types = {
            'message': str,
            'result_columns': List[Met2]
        }

        self.attribute_map = {
            'message': 'Message',
            'result_columns': 'ResultColumns'
        }

        self._message = message
        self._result_columns = result_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Met1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The met1 of this Met1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Met1.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Met1.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Met1.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Met1.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def result_columns(self):
        """Gets the result_columns of this Met1.


        :return: The result_columns of this Met1.
        :rtype: List[Met2]
        """
        return self._result_columns

    @result_columns.setter
    def result_columns(self, result_columns):
        """Sets the result_columns of this Met1.


        :param result_columns: The result_columns of this Met1.
        :type result_columns: List[Met2]
        """

        self._result_columns = result_columns
