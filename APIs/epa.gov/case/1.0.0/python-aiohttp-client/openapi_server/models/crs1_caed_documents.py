# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs1CAEDDocuments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_number: str=None, document_link: str=None, epa_program: str=None, facility_name: str=None, publish_date: str=None):
        """Crs1CAEDDocuments - a model defined in OpenAPI

        :param case_number: The case_number of this Crs1CAEDDocuments.
        :param document_link: The document_link of this Crs1CAEDDocuments.
        :param epa_program: The epa_program of this Crs1CAEDDocuments.
        :param facility_name: The facility_name of this Crs1CAEDDocuments.
        :param publish_date: The publish_date of this Crs1CAEDDocuments.
        """
        self.openapi_types = {
            'case_number': str,
            'document_link': str,
            'epa_program': str,
            'facility_name': str,
            'publish_date': str
        }

        self.attribute_map = {
            'case_number': 'CaseNumber',
            'document_link': 'DocumentLink',
            'epa_program': 'EPAProgram',
            'facility_name': 'FacilityName',
            'publish_date': 'PublishDate'
        }

        self._case_number = case_number
        self._document_link = document_link
        self._epa_program = epa_program
        self._facility_name = facility_name
        self._publish_date = publish_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs1CAEDDocuments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs1_CAEDDocuments of this Crs1CAEDDocuments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_number(self):
        """Gets the case_number of this Crs1CAEDDocuments.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :return: The case_number of this Crs1CAEDDocuments.
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """Sets the case_number of this Crs1CAEDDocuments.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :param case_number: The case_number of this Crs1CAEDDocuments.
        :type case_number: str
        """
        if case_number is None:
            raise ValueError("Invalid value for `case_number`, must not be `None`")

        self._case_number = case_number

    @property
    def document_link(self):
        """Gets the document_link of this Crs1CAEDDocuments.

        URLS for documents that EPA has colleted that are related to this Case.

        :return: The document_link of this Crs1CAEDDocuments.
        :rtype: str
        """
        return self._document_link

    @document_link.setter
    def document_link(self, document_link):
        """Sets the document_link of this Crs1CAEDDocuments.

        URLS for documents that EPA has colleted that are related to this Case.

        :param document_link: The document_link of this Crs1CAEDDocuments.
        :type document_link: str
        """
        if document_link is None:
            raise ValueError("Invalid value for `document_link`, must not be `None`")

        self._document_link = document_link

    @property
    def epa_program(self):
        """Gets the epa_program of this Crs1CAEDDocuments.

        The EPA Program associated with the Document URL

        :return: The epa_program of this Crs1CAEDDocuments.
        :rtype: str
        """
        return self._epa_program

    @epa_program.setter
    def epa_program(self, epa_program):
        """Sets the epa_program of this Crs1CAEDDocuments.

        The EPA Program associated with the Document URL

        :param epa_program: The epa_program of this Crs1CAEDDocuments.
        :type epa_program: str
        """
        if epa_program is None:
            raise ValueError("Invalid value for `epa_program`, must not be `None`")

        self._epa_program = epa_program

    @property
    def facility_name(self):
        """Gets the facility_name of this Crs1CAEDDocuments.

        The name of the facility.

        :return: The facility_name of this Crs1CAEDDocuments.
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Crs1CAEDDocuments.

        The name of the facility.

        :param facility_name: The facility_name of this Crs1CAEDDocuments.
        :type facility_name: str
        """
        if facility_name is None:
            raise ValueError("Invalid value for `facility_name`, must not be `None`")

        self._facility_name = facility_name

    @property
    def publish_date(self):
        """Gets the publish_date of this Crs1CAEDDocuments.

        The date the document was published.

        :return: The publish_date of this Crs1CAEDDocuments.
        :rtype: str
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this Crs1CAEDDocuments.

        The date the document was published.

        :param publish_date: The publish_date of this Crs1CAEDDocuments.
        :type publish_date: str
        """
        if publish_date is None:
            raise ValueError("Invalid value for `publish_date`, must not be `None`")

        self._publish_date = publish_date
