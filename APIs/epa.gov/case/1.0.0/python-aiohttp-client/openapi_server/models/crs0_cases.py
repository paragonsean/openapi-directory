# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs0Cases(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, caa_flag: str=None, case_category_code: str=None, case_category_desc: str=None, case_name: str=None, case_number: str=None, case_status_code: str=None, case_status_desc: str=None, cercla_flag: str=None, civil_criminal_indicator: str=None, cost_recovery: str=None, court_docket_number: str=None, cwa_flag: str=None, doj_docket_nmbr: str=None, date_closed: str=None, date_filed: str=None, date_lodged: str=None, enf_outcome: str=None, epcra_flag: str=None, fed_penalty: str=None, federal_flag: str=None, fifra_flag: str=None, lead: str=None, max_score: str=None, primary_law: str=None, primary_naics_code: str=None, primary_sic_code: str=None, primary_section: str=None, prosecution_summary_id: str=None, rcra_flag: str=None, sep_categories: str=None, sep_cost: str=None, sep_texts: str=None, sdwa_flag: str=None, settlement_cnt: str=None, settlement_date: str=None, state_loc_penalty_amt: str=None, total_comp_action_amt: str=None, tribal_land_flag: str=None, tsca_flag: str=None):
        """Crs0Cases - a model defined in OpenAPI

        :param activity_id: The activity_id of this Crs0Cases.
        :param caa_flag: The caa_flag of this Crs0Cases.
        :param case_category_code: The case_category_code of this Crs0Cases.
        :param case_category_desc: The case_category_desc of this Crs0Cases.
        :param case_name: The case_name of this Crs0Cases.
        :param case_number: The case_number of this Crs0Cases.
        :param case_status_code: The case_status_code of this Crs0Cases.
        :param case_status_desc: The case_status_desc of this Crs0Cases.
        :param cercla_flag: The cercla_flag of this Crs0Cases.
        :param civil_criminal_indicator: The civil_criminal_indicator of this Crs0Cases.
        :param cost_recovery: The cost_recovery of this Crs0Cases.
        :param court_docket_number: The court_docket_number of this Crs0Cases.
        :param cwa_flag: The cwa_flag of this Crs0Cases.
        :param doj_docket_nmbr: The doj_docket_nmbr of this Crs0Cases.
        :param date_closed: The date_closed of this Crs0Cases.
        :param date_filed: The date_filed of this Crs0Cases.
        :param date_lodged: The date_lodged of this Crs0Cases.
        :param enf_outcome: The enf_outcome of this Crs0Cases.
        :param epcra_flag: The epcra_flag of this Crs0Cases.
        :param fed_penalty: The fed_penalty of this Crs0Cases.
        :param federal_flag: The federal_flag of this Crs0Cases.
        :param fifra_flag: The fifra_flag of this Crs0Cases.
        :param lead: The lead of this Crs0Cases.
        :param max_score: The max_score of this Crs0Cases.
        :param primary_law: The primary_law of this Crs0Cases.
        :param primary_naics_code: The primary_naics_code of this Crs0Cases.
        :param primary_sic_code: The primary_sic_code of this Crs0Cases.
        :param primary_section: The primary_section of this Crs0Cases.
        :param prosecution_summary_id: The prosecution_summary_id of this Crs0Cases.
        :param rcra_flag: The rcra_flag of this Crs0Cases.
        :param sep_categories: The sep_categories of this Crs0Cases.
        :param sep_cost: The sep_cost of this Crs0Cases.
        :param sep_texts: The sep_texts of this Crs0Cases.
        :param sdwa_flag: The sdwa_flag of this Crs0Cases.
        :param settlement_cnt: The settlement_cnt of this Crs0Cases.
        :param settlement_date: The settlement_date of this Crs0Cases.
        :param state_loc_penalty_amt: The state_loc_penalty_amt of this Crs0Cases.
        :param total_comp_action_amt: The total_comp_action_amt of this Crs0Cases.
        :param tribal_land_flag: The tribal_land_flag of this Crs0Cases.
        :param tsca_flag: The tsca_flag of this Crs0Cases.
        """
        self.openapi_types = {
            'activity_id': str,
            'caa_flag': str,
            'case_category_code': str,
            'case_category_desc': str,
            'case_name': str,
            'case_number': str,
            'case_status_code': str,
            'case_status_desc': str,
            'cercla_flag': str,
            'civil_criminal_indicator': str,
            'cost_recovery': str,
            'court_docket_number': str,
            'cwa_flag': str,
            'doj_docket_nmbr': str,
            'date_closed': str,
            'date_filed': str,
            'date_lodged': str,
            'enf_outcome': str,
            'epcra_flag': str,
            'fed_penalty': str,
            'federal_flag': str,
            'fifra_flag': str,
            'lead': str,
            'max_score': str,
            'primary_law': str,
            'primary_naics_code': str,
            'primary_sic_code': str,
            'primary_section': str,
            'prosecution_summary_id': str,
            'rcra_flag': str,
            'sep_categories': str,
            'sep_cost': str,
            'sep_texts': str,
            'sdwa_flag': str,
            'settlement_cnt': str,
            'settlement_date': str,
            'state_loc_penalty_amt': str,
            'total_comp_action_amt': str,
            'tribal_land_flag': str,
            'tsca_flag': str
        }

        self.attribute_map = {
            'activity_id': 'ActivityId',
            'caa_flag': 'CaaFlag',
            'case_category_code': 'CaseCategoryCode',
            'case_category_desc': 'CaseCategoryDesc',
            'case_name': 'CaseName',
            'case_number': 'CaseNumber',
            'case_status_code': 'CaseStatusCode',
            'case_status_desc': 'CaseStatusDesc',
            'cercla_flag': 'CerclaFlag',
            'civil_criminal_indicator': 'CivilCriminalIndicator',
            'cost_recovery': 'CostRecovery',
            'court_docket_number': 'CourtDocketNumber',
            'cwa_flag': 'CwaFlag',
            'doj_docket_nmbr': 'DOJDocketNmbr',
            'date_closed': 'DateClosed',
            'date_filed': 'DateFiled',
            'date_lodged': 'DateLodged',
            'enf_outcome': 'EnfOutcome',
            'epcra_flag': 'EpcraFlag',
            'fed_penalty': 'FedPenalty',
            'federal_flag': 'FederalFlag',
            'fifra_flag': 'FifraFlag',
            'lead': 'Lead',
            'max_score': 'MaxScore',
            'primary_law': 'PrimaryLaw',
            'primary_naics_code': 'PrimaryNAICSCode',
            'primary_sic_code': 'PrimarySICCode',
            'primary_section': 'PrimarySection',
            'prosecution_summary_id': 'ProsecutionSummaryId',
            'rcra_flag': 'RcraFlag',
            'sep_categories': 'SEPCategories',
            'sep_cost': 'SEPCost',
            'sep_texts': 'SEPTexts',
            'sdwa_flag': 'SdwaFlag',
            'settlement_cnt': 'SettlementCnt',
            'settlement_date': 'SettlementDate',
            'state_loc_penalty_amt': 'StateLocPenaltyAmt',
            'total_comp_action_amt': 'TotalCompActionAmt',
            'tribal_land_flag': 'TribalLandFlag',
            'tsca_flag': 'TscaFlag'
        }

        self._activity_id = activity_id
        self._caa_flag = caa_flag
        self._case_category_code = case_category_code
        self._case_category_desc = case_category_desc
        self._case_name = case_name
        self._case_number = case_number
        self._case_status_code = case_status_code
        self._case_status_desc = case_status_desc
        self._cercla_flag = cercla_flag
        self._civil_criminal_indicator = civil_criminal_indicator
        self._cost_recovery = cost_recovery
        self._court_docket_number = court_docket_number
        self._cwa_flag = cwa_flag
        self._doj_docket_nmbr = doj_docket_nmbr
        self._date_closed = date_closed
        self._date_filed = date_filed
        self._date_lodged = date_lodged
        self._enf_outcome = enf_outcome
        self._epcra_flag = epcra_flag
        self._fed_penalty = fed_penalty
        self._federal_flag = federal_flag
        self._fifra_flag = fifra_flag
        self._lead = lead
        self._max_score = max_score
        self._primary_law = primary_law
        self._primary_naics_code = primary_naics_code
        self._primary_sic_code = primary_sic_code
        self._primary_section = primary_section
        self._prosecution_summary_id = prosecution_summary_id
        self._rcra_flag = rcra_flag
        self._sep_categories = sep_categories
        self._sep_cost = sep_cost
        self._sep_texts = sep_texts
        self._sdwa_flag = sdwa_flag
        self._settlement_cnt = settlement_cnt
        self._settlement_date = settlement_date
        self._state_loc_penalty_amt = state_loc_penalty_amt
        self._total_comp_action_amt = total_comp_action_amt
        self._tribal_land_flag = tribal_land_flag
        self._tsca_flag = tsca_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs0Cases':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs0_Cases of this Crs0Cases.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this Crs0Cases.

        The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.

        :return: The activity_id of this Crs0Cases.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this Crs0Cases.

        The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.

        :param activity_id: The activity_id of this Crs0Cases.
        :type activity_id: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def caa_flag(self):
        """Gets the caa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Clean Air Act.

        :return: The caa_flag of this Crs0Cases.
        :rtype: str
        """
        return self._caa_flag

    @caa_flag.setter
    def caa_flag(self, caa_flag):
        """Sets the caa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Clean Air Act.

        :param caa_flag: The caa_flag of this Crs0Cases.
        :type caa_flag: str
        """
        if caa_flag is None:
            raise ValueError("Invalid value for `caa_flag`, must not be `None`")

        self._caa_flag = caa_flag

    @property
    def case_category_code(self):
        """Gets the case_category_code of this Crs0Cases.

        A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative – formal (AFR), and judicial activities (JDC).

        :return: The case_category_code of this Crs0Cases.
        :rtype: str
        """
        return self._case_category_code

    @case_category_code.setter
    def case_category_code(self, case_category_code):
        """Sets the case_category_code of this Crs0Cases.

        A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative – formal (AFR), and judicial activities (JDC).

        :param case_category_code: The case_category_code of this Crs0Cases.
        :type case_category_code: str
        """
        if case_category_code is None:
            raise ValueError("Invalid value for `case_category_code`, must not be `None`")

        self._case_category_code = case_category_code

    @property
    def case_category_desc(self):
        """Gets the case_category_desc of this Crs0Cases.

        Identifies the type of action based on the enforcement authority used.    Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of: - A notice of violation or a Superfund notice letter. -> An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.  Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State's Attorneys General for the states as well.  Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.

        :return: The case_category_desc of this Crs0Cases.
        :rtype: str
        """
        return self._case_category_desc

    @case_category_desc.setter
    def case_category_desc(self, case_category_desc):
        """Sets the case_category_desc of this Crs0Cases.

        Identifies the type of action based on the enforcement authority used.    Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of: - A notice of violation or a Superfund notice letter. -> An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.  Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State's Attorneys General for the states as well.  Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.

        :param case_category_desc: The case_category_desc of this Crs0Cases.
        :type case_category_desc: str
        """
        if case_category_desc is None:
            raise ValueError("Invalid value for `case_category_desc`, must not be `None`")

        self._case_category_desc = case_category_desc

    @property
    def case_name(self):
        """Gets the case_name of this Crs0Cases.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :return: The case_name of this Crs0Cases.
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this Crs0Cases.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.

        :param case_name: The case_name of this Crs0Cases.
        :type case_name: str
        """
        if case_name is None:
            raise ValueError("Invalid value for `case_name`, must not be `None`")

        self._case_name = case_name

    @property
    def case_number(self):
        """Gets the case_number of this Crs0Cases.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :return: The case_number of this Crs0Cases.
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """Sets the case_number of this Crs0Cases.

        A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.

        :param case_number: The case_number of this Crs0Cases.
        :type case_number: str
        """
        if case_number is None:
            raise ValueError("Invalid value for `case_number`, must not be `None`")

        self._case_number = case_number

    @property
    def case_status_code(self):
        """Gets the case_status_code of this Crs0Cases.

        Code identifying the current status of an activity.

        :return: The case_status_code of this Crs0Cases.
        :rtype: str
        """
        return self._case_status_code

    @case_status_code.setter
    def case_status_code(self, case_status_code):
        """Sets the case_status_code of this Crs0Cases.

        Code identifying the current status of an activity.

        :param case_status_code: The case_status_code of this Crs0Cases.
        :type case_status_code: str
        """
        if case_status_code is None:
            raise ValueError("Invalid value for `case_status_code`, must not be `None`")

        self._case_status_code = case_status_code

    @property
    def case_status_desc(self):
        """Gets the case_status_desc of this Crs0Cases.

        The description that identifies the current status of an activity.

        :return: The case_status_desc of this Crs0Cases.
        :rtype: str
        """
        return self._case_status_desc

    @case_status_desc.setter
    def case_status_desc(self, case_status_desc):
        """Sets the case_status_desc of this Crs0Cases.

        The description that identifies the current status of an activity.

        :param case_status_desc: The case_status_desc of this Crs0Cases.
        :type case_status_desc: str
        """
        if case_status_desc is None:
            raise ValueError("Invalid value for `case_status_desc`, must not be `None`")

        self._case_status_desc = case_status_desc

    @property
    def cercla_flag(self):
        """Gets the cercla_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Comprehensive Environmental Response, Compensation, and Liability Act.

        :return: The cercla_flag of this Crs0Cases.
        :rtype: str
        """
        return self._cercla_flag

    @cercla_flag.setter
    def cercla_flag(self, cercla_flag):
        """Sets the cercla_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Comprehensive Environmental Response, Compensation, and Liability Act.

        :param cercla_flag: The cercla_flag of this Crs0Cases.
        :type cercla_flag: str
        """
        if cercla_flag is None:
            raise ValueError("Invalid value for `cercla_flag`, must not be `None`")

        self._cercla_flag = cercla_flag

    @property
    def civil_criminal_indicator(self):
        """Gets the civil_criminal_indicator of this Crs0Cases.

        Civil vs. Criminal Indicator.

        :return: The civil_criminal_indicator of this Crs0Cases.
        :rtype: str
        """
        return self._civil_criminal_indicator

    @civil_criminal_indicator.setter
    def civil_criminal_indicator(self, civil_criminal_indicator):
        """Sets the civil_criminal_indicator of this Crs0Cases.

        Civil vs. Criminal Indicator.

        :param civil_criminal_indicator: The civil_criminal_indicator of this Crs0Cases.
        :type civil_criminal_indicator: str
        """
        if civil_criminal_indicator is None:
            raise ValueError("Invalid value for `civil_criminal_indicator`, must not be `None`")

        self._civil_criminal_indicator = civil_criminal_indicator

    @property
    def cost_recovery(self):
        """Gets the cost_recovery of this Crs0Cases.

        For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.

        :return: The cost_recovery of this Crs0Cases.
        :rtype: str
        """
        return self._cost_recovery

    @cost_recovery.setter
    def cost_recovery(self, cost_recovery):
        """Sets the cost_recovery of this Crs0Cases.

        For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.

        :param cost_recovery: The cost_recovery of this Crs0Cases.
        :type cost_recovery: str
        """
        if cost_recovery is None:
            raise ValueError("Invalid value for `cost_recovery`, must not be `None`")

        self._cost_recovery = cost_recovery

    @property
    def court_docket_number(self):
        """Gets the court_docket_number of this Crs0Cases.


        :return: The court_docket_number of this Crs0Cases.
        :rtype: str
        """
        return self._court_docket_number

    @court_docket_number.setter
    def court_docket_number(self, court_docket_number):
        """Sets the court_docket_number of this Crs0Cases.


        :param court_docket_number: The court_docket_number of this Crs0Cases.
        :type court_docket_number: str
        """
        if court_docket_number is None:
            raise ValueError("Invalid value for `court_docket_number`, must not be `None`")

        self._court_docket_number = court_docket_number

    @property
    def cwa_flag(self):
        """Gets the cwa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Clean Water Act.

        :return: The cwa_flag of this Crs0Cases.
        :rtype: str
        """
        return self._cwa_flag

    @cwa_flag.setter
    def cwa_flag(self, cwa_flag):
        """Sets the cwa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Clean Water Act.

        :param cwa_flag: The cwa_flag of this Crs0Cases.
        :type cwa_flag: str
        """
        if cwa_flag is None:
            raise ValueError("Invalid value for `cwa_flag`, must not be `None`")

        self._cwa_flag = cwa_flag

    @property
    def doj_docket_nmbr(self):
        """Gets the doj_docket_nmbr of this Crs0Cases.

        The docket number assigned by the Department of Justice to EPA's Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.

        :return: The doj_docket_nmbr of this Crs0Cases.
        :rtype: str
        """
        return self._doj_docket_nmbr

    @doj_docket_nmbr.setter
    def doj_docket_nmbr(self, doj_docket_nmbr):
        """Sets the doj_docket_nmbr of this Crs0Cases.

        The docket number assigned by the Department of Justice to EPA's Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.

        :param doj_docket_nmbr: The doj_docket_nmbr of this Crs0Cases.
        :type doj_docket_nmbr: str
        """
        if doj_docket_nmbr is None:
            raise ValueError("Invalid value for `doj_docket_nmbr`, must not be `None`")

        self._doj_docket_nmbr = doj_docket_nmbr

    @property
    def date_closed(self):
        """Gets the date_closed of this Crs0Cases.

        The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.

        :return: The date_closed of this Crs0Cases.
        :rtype: str
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed):
        """Sets the date_closed of this Crs0Cases.

        The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.

        :param date_closed: The date_closed of this Crs0Cases.
        :type date_closed: str
        """
        if date_closed is None:
            raise ValueError("Invalid value for `date_closed`, must not be `None`")

        self._date_closed = date_closed

    @property
    def date_filed(self):
        """Gets the date_filed of this Crs0Cases.

        The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.

        :return: The date_filed of this Crs0Cases.
        :rtype: str
        """
        return self._date_filed

    @date_filed.setter
    def date_filed(self, date_filed):
        """Sets the date_filed of this Crs0Cases.

        The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.

        :param date_filed: The date_filed of this Crs0Cases.
        :type date_filed: str
        """
        if date_filed is None:
            raise ValueError("Invalid value for `date_filed`, must not be `None`")

        self._date_filed = date_filed

    @property
    def date_lodged(self):
        """Gets the date_lodged of this Crs0Cases.

        The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.

        :return: The date_lodged of this Crs0Cases.
        :rtype: str
        """
        return self._date_lodged

    @date_lodged.setter
    def date_lodged(self, date_lodged):
        """Sets the date_lodged of this Crs0Cases.

        The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.

        :param date_lodged: The date_lodged of this Crs0Cases.
        :type date_lodged: str
        """
        if date_lodged is None:
            raise ValueError("Invalid value for `date_lodged`, must not be `None`")

        self._date_lodged = date_lodged

    @property
    def enf_outcome(self):
        """Gets the enf_outcome of this Crs0Cases.

        The result of the enforcement action.

        :return: The enf_outcome of this Crs0Cases.
        :rtype: str
        """
        return self._enf_outcome

    @enf_outcome.setter
    def enf_outcome(self, enf_outcome):
        """Sets the enf_outcome of this Crs0Cases.

        The result of the enforcement action.

        :param enf_outcome: The enf_outcome of this Crs0Cases.
        :type enf_outcome: str
        """
        if enf_outcome is None:
            raise ValueError("Invalid value for `enf_outcome`, must not be `None`")

        self._enf_outcome = enf_outcome

    @property
    def epcra_flag(self):
        """Gets the epcra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Emergency Planning and Community Right to Know Act.

        :return: The epcra_flag of this Crs0Cases.
        :rtype: str
        """
        return self._epcra_flag

    @epcra_flag.setter
    def epcra_flag(self, epcra_flag):
        """Sets the epcra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Emergency Planning and Community Right to Know Act.

        :param epcra_flag: The epcra_flag of this Crs0Cases.
        :type epcra_flag: str
        """
        if epcra_flag is None:
            raise ValueError("Invalid value for `epcra_flag`, must not be `None`")

        self._epcra_flag = epcra_flag

    @property
    def fed_penalty(self):
        """Gets the fed_penalty of this Crs0Cases.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :return: The fed_penalty of this Crs0Cases.
        :rtype: str
        """
        return self._fed_penalty

    @fed_penalty.setter
    def fed_penalty(self, fed_penalty):
        """Sets the fed_penalty of this Crs0Cases.

        For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.

        :param fed_penalty: The fed_penalty of this Crs0Cases.
        :type fed_penalty: str
        """
        if fed_penalty is None:
            raise ValueError("Invalid value for `fed_penalty`, must not be `None`")

        self._fed_penalty = fed_penalty

    @property
    def federal_flag(self):
        """Gets the federal_flag of this Crs0Cases.

        A flag indicating that the  case is related to a Federally Owned facility.

        :return: The federal_flag of this Crs0Cases.
        :rtype: str
        """
        return self._federal_flag

    @federal_flag.setter
    def federal_flag(self, federal_flag):
        """Sets the federal_flag of this Crs0Cases.

        A flag indicating that the  case is related to a Federally Owned facility.

        :param federal_flag: The federal_flag of this Crs0Cases.
        :type federal_flag: str
        """
        if federal_flag is None:
            raise ValueError("Invalid value for `federal_flag`, must not be `None`")

        self._federal_flag = federal_flag

    @property
    def fifra_flag(self):
        """Gets the fifra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Federal Insecticide, Fungicide, and Rodenticide Act.

        :return: The fifra_flag of this Crs0Cases.
        :rtype: str
        """
        return self._fifra_flag

    @fifra_flag.setter
    def fifra_flag(self, fifra_flag):
        """Sets the fifra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Federal Insecticide, Fungicide, and Rodenticide Act.

        :param fifra_flag: The fifra_flag of this Crs0Cases.
        :type fifra_flag: str
        """
        if fifra_flag is None:
            raise ValueError("Invalid value for `fifra_flag`, must not be `None`")

        self._fifra_flag = fifra_flag

    @property
    def lead(self):
        """Gets the lead of this Crs0Cases.

        The lead agency (e.g., EPA, State) conducting the inspection

        :return: The lead of this Crs0Cases.
        :rtype: str
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this Crs0Cases.

        The lead agency (e.g., EPA, State) conducting the inspection

        :param lead: The lead of this Crs0Cases.
        :type lead: str
        """
        if lead is None:
            raise ValueError("Invalid value for `lead`, must not be `None`")

        self._lead = lead

    @property
    def max_score(self):
        """Gets the max_score of this Crs0Cases.

        A sorting score for internal use.

        :return: The max_score of this Crs0Cases.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Crs0Cases.

        A sorting score for internal use.

        :param max_score: The max_score of this Crs0Cases.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def primary_law(self):
        """Gets the primary_law of this Crs0Cases.

        Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA's judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.

        :return: The primary_law of this Crs0Cases.
        :rtype: str
        """
        return self._primary_law

    @primary_law.setter
    def primary_law(self, primary_law):
        """Sets the primary_law of this Crs0Cases.

        Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA's judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.

        :param primary_law: The primary_law of this Crs0Cases.
        :type primary_law: str
        """
        if primary_law is None:
            raise ValueError("Invalid value for `primary_law`, must not be `None`")

        self._primary_law = primary_law

    @property
    def primary_naics_code(self):
        """Gets the primary_naics_code of this Crs0Cases.

        A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.

        :return: The primary_naics_code of this Crs0Cases.
        :rtype: str
        """
        return self._primary_naics_code

    @primary_naics_code.setter
    def primary_naics_code(self, primary_naics_code):
        """Sets the primary_naics_code of this Crs0Cases.

        A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.

        :param primary_naics_code: The primary_naics_code of this Crs0Cases.
        :type primary_naics_code: str
        """
        if primary_naics_code is None:
            raise ValueError("Invalid value for `primary_naics_code`, must not be `None`")

        self._primary_naics_code = primary_naics_code

    @property
    def primary_sic_code(self):
        """Gets the primary_sic_code of this Crs0Cases.

        The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility's specialty within the major sector.

        :return: The primary_sic_code of this Crs0Cases.
        :rtype: str
        """
        return self._primary_sic_code

    @primary_sic_code.setter
    def primary_sic_code(self, primary_sic_code):
        """Sets the primary_sic_code of this Crs0Cases.

        The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility's specialty within the major sector.

        :param primary_sic_code: The primary_sic_code of this Crs0Cases.
        :type primary_sic_code: str
        """
        if primary_sic_code is None:
            raise ValueError("Invalid value for `primary_sic_code`, must not be `None`")

        self._primary_sic_code = primary_sic_code

    @property
    def primary_section(self):
        """Gets the primary_section of this Crs0Cases.

        Identifies the primary section violated and cited in the enforcement action.

        :return: The primary_section of this Crs0Cases.
        :rtype: str
        """
        return self._primary_section

    @primary_section.setter
    def primary_section(self, primary_section):
        """Sets the primary_section of this Crs0Cases.

        Identifies the primary section violated and cited in the enforcement action.

        :param primary_section: The primary_section of this Crs0Cases.
        :type primary_section: str
        """
        if primary_section is None:
            raise ValueError("Invalid value for `primary_section`, must not be `None`")

        self._primary_section = primary_section

    @property
    def prosecution_summary_id(self):
        """Gets the prosecution_summary_id of this Crs0Cases.

        Prosecution Summary Identifier.

        :return: The prosecution_summary_id of this Crs0Cases.
        :rtype: str
        """
        return self._prosecution_summary_id

    @prosecution_summary_id.setter
    def prosecution_summary_id(self, prosecution_summary_id):
        """Sets the prosecution_summary_id of this Crs0Cases.

        Prosecution Summary Identifier.

        :param prosecution_summary_id: The prosecution_summary_id of this Crs0Cases.
        :type prosecution_summary_id: str
        """
        if prosecution_summary_id is None:
            raise ValueError("Invalid value for `prosecution_summary_id`, must not be `None`")

        self._prosecution_summary_id = prosecution_summary_id

    @property
    def rcra_flag(self):
        """Gets the rcra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Resource Conservation and Recovery Act.

        :return: The rcra_flag of this Crs0Cases.
        :rtype: str
        """
        return self._rcra_flag

    @rcra_flag.setter
    def rcra_flag(self, rcra_flag):
        """Sets the rcra_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Resource Conservation and Recovery Act.

        :param rcra_flag: The rcra_flag of this Crs0Cases.
        :type rcra_flag: str
        """
        if rcra_flag is None:
            raise ValueError("Invalid value for `rcra_flag`, must not be `None`")

        self._rcra_flag = rcra_flag

    @property
    def sep_categories(self):
        """Gets the sep_categories of this Crs0Cases.

        For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs: - Public Health - Pollution Prevention - Pollution Reduction - Environmental Restoration and Protection - Emergency Planning and Preparedness - Assessments and Audits - Environmental Compliance Promotion - Other Types of Projects Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.

        :return: The sep_categories of this Crs0Cases.
        :rtype: str
        """
        return self._sep_categories

    @sep_categories.setter
    def sep_categories(self, sep_categories):
        """Sets the sep_categories of this Crs0Cases.

        For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs: - Public Health - Pollution Prevention - Pollution Reduction - Environmental Restoration and Protection - Emergency Planning and Preparedness - Assessments and Audits - Environmental Compliance Promotion - Other Types of Projects Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.

        :param sep_categories: The sep_categories of this Crs0Cases.
        :type sep_categories: str
        """
        if sep_categories is None:
            raise ValueError("Invalid value for `sep_categories`, must not be `None`")

        self._sep_categories = sep_categories

    @property
    def sep_cost(self):
        """Gets the sep_cost of this Crs0Cases.

        The total value of all SEPs for all settlements at the enforcement case.

        :return: The sep_cost of this Crs0Cases.
        :rtype: str
        """
        return self._sep_cost

    @sep_cost.setter
    def sep_cost(self, sep_cost):
        """Sets the sep_cost of this Crs0Cases.

        The total value of all SEPs for all settlements at the enforcement case.

        :param sep_cost: The sep_cost of this Crs0Cases.
        :type sep_cost: str
        """
        if sep_cost is None:
            raise ValueError("Invalid value for `sep_cost`, must not be `None`")

        self._sep_cost = sep_cost

    @property
    def sep_texts(self):
        """Gets the sep_texts of this Crs0Cases.

        A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.

        :return: The sep_texts of this Crs0Cases.
        :rtype: str
        """
        return self._sep_texts

    @sep_texts.setter
    def sep_texts(self, sep_texts):
        """Sets the sep_texts of this Crs0Cases.

        A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.

        :param sep_texts: The sep_texts of this Crs0Cases.
        :type sep_texts: str
        """
        if sep_texts is None:
            raise ValueError("Invalid value for `sep_texts`, must not be `None`")

        self._sep_texts = sep_texts

    @property
    def sdwa_flag(self):
        """Gets the sdwa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Safe Drinking Water Act.

        :return: The sdwa_flag of this Crs0Cases.
        :rtype: str
        """
        return self._sdwa_flag

    @sdwa_flag.setter
    def sdwa_flag(self, sdwa_flag):
        """Sets the sdwa_flag of this Crs0Cases.

        A flag indicating that the Primary Law cited for the case was the Safe Drinking Water Act.

        :param sdwa_flag: The sdwa_flag of this Crs0Cases.
        :type sdwa_flag: str
        """
        if sdwa_flag is None:
            raise ValueError("Invalid value for `sdwa_flag`, must not be `None`")

        self._sdwa_flag = sdwa_flag

    @property
    def settlement_cnt(self):
        """Gets the settlement_cnt of this Crs0Cases.

        For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.

        :return: The settlement_cnt of this Crs0Cases.
        :rtype: str
        """
        return self._settlement_cnt

    @settlement_cnt.setter
    def settlement_cnt(self, settlement_cnt):
        """Sets the settlement_cnt of this Crs0Cases.

        For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.

        :param settlement_cnt: The settlement_cnt of this Crs0Cases.
        :type settlement_cnt: str
        """
        if settlement_cnt is None:
            raise ValueError("Invalid value for `settlement_cnt`, must not be `None`")

        self._settlement_cnt = settlement_cnt

    @property
    def settlement_date(self):
        """Gets the settlement_date of this Crs0Cases.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :return: The settlement_date of this Crs0Cases.
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this Crs0Cases.

        For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.

        :param settlement_date: The settlement_date of this Crs0Cases.
        :type settlement_date: str
        """
        if settlement_date is None:
            raise ValueError("Invalid value for `settlement_date`, must not be `None`")

        self._settlement_date = settlement_date

    @property
    def state_loc_penalty_amt(self):
        """Gets the state_loc_penalty_amt of this Crs0Cases.

        The total State or Local Penalty amount collected pursuant to a Final Order.

        :return: The state_loc_penalty_amt of this Crs0Cases.
        :rtype: str
        """
        return self._state_loc_penalty_amt

    @state_loc_penalty_amt.setter
    def state_loc_penalty_amt(self, state_loc_penalty_amt):
        """Sets the state_loc_penalty_amt of this Crs0Cases.

        The total State or Local Penalty amount collected pursuant to a Final Order.

        :param state_loc_penalty_amt: The state_loc_penalty_amt of this Crs0Cases.
        :type state_loc_penalty_amt: str
        """
        if state_loc_penalty_amt is None:
            raise ValueError("Invalid value for `state_loc_penalty_amt`, must not be `None`")

        self._state_loc_penalty_amt = state_loc_penalty_amt

    @property
    def total_comp_action_amt(self):
        """Gets the total_comp_action_amt of this Crs0Cases.

        For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.

        :return: The total_comp_action_amt of this Crs0Cases.
        :rtype: str
        """
        return self._total_comp_action_amt

    @total_comp_action_amt.setter
    def total_comp_action_amt(self, total_comp_action_amt):
        """Sets the total_comp_action_amt of this Crs0Cases.

        For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.

        :param total_comp_action_amt: The total_comp_action_amt of this Crs0Cases.
        :type total_comp_action_amt: str
        """
        if total_comp_action_amt is None:
            raise ValueError("Invalid value for `total_comp_action_amt`, must not be `None`")

        self._total_comp_action_amt = total_comp_action_amt

    @property
    def tribal_land_flag(self):
        """Gets the tribal_land_flag of this Crs0Cases.

        Flag indicating if the case is located on tribal land.

        :return: The tribal_land_flag of this Crs0Cases.
        :rtype: str
        """
        return self._tribal_land_flag

    @tribal_land_flag.setter
    def tribal_land_flag(self, tribal_land_flag):
        """Sets the tribal_land_flag of this Crs0Cases.

        Flag indicating if the case is located on tribal land.

        :param tribal_land_flag: The tribal_land_flag of this Crs0Cases.
        :type tribal_land_flag: str
        """
        if tribal_land_flag is None:
            raise ValueError("Invalid value for `tribal_land_flag`, must not be `None`")

        self._tribal_land_flag = tribal_land_flag

    @property
    def tsca_flag(self):
        """Gets the tsca_flag of this Crs0Cases.

        Flag indicating whether or not a facility has a TSCA ID

        :return: The tsca_flag of this Crs0Cases.
        :rtype: str
        """
        return self._tsca_flag

    @tsca_flag.setter
    def tsca_flag(self, tsca_flag):
        """Sets the tsca_flag of this Crs0Cases.

        Flag indicating whether or not a facility has a TSCA ID

        :param tsca_flag: The tsca_flag of this Crs0Cases.
        :type tsca_flag: str
        """
        if tsca_flag is None:
            raise ValueError("Invalid value for `tsca_flag`, must not be `None`")

        self._tsca_flag = tsca_flag
