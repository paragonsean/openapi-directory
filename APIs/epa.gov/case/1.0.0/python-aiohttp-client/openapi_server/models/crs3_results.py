# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs3_cr_defendants import Crs3CRDefendants
from openapi_server.models.crs3_cr_details import Crs3CRDetails
from openapi_server.models.crs3_case_information import Crs3CaseInformation
from openapi_server.models.crs3_locations import Crs3Locations
from openapi_server import util


class Crs3Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cr_case_information: Crs3CaseInformation=None, cr_defendants: List[Crs3CRDefendants]=None, cr_details: List[Crs3CRDetails]=None, locations: List[Crs3Locations]=None, message: str=None):
        """Crs3Results - a model defined in OpenAPI

        :param cr_case_information: The cr_case_information of this Crs3Results.
        :param cr_defendants: The cr_defendants of this Crs3Results.
        :param cr_details: The cr_details of this Crs3Results.
        :param locations: The locations of this Crs3Results.
        :param message: The message of this Crs3Results.
        """
        self.openapi_types = {
            'cr_case_information': Crs3CaseInformation,
            'cr_defendants': List[Crs3CRDefendants],
            'cr_details': List[Crs3CRDetails],
            'locations': List[Crs3Locations],
            'message': str
        }

        self.attribute_map = {
            'cr_case_information': 'CRCaseInformation',
            'cr_defendants': 'CRDefendants',
            'cr_details': 'CRDetails',
            'locations': 'Locations',
            'message': 'Message'
        }

        self._cr_case_information = cr_case_information
        self._cr_defendants = cr_defendants
        self._cr_details = cr_details
        self._locations = locations
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs3Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs3_Results of this Crs3Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cr_case_information(self):
        """Gets the cr_case_information of this Crs3Results.


        :return: The cr_case_information of this Crs3Results.
        :rtype: Crs3CaseInformation
        """
        return self._cr_case_information

    @cr_case_information.setter
    def cr_case_information(self, cr_case_information):
        """Sets the cr_case_information of this Crs3Results.


        :param cr_case_information: The cr_case_information of this Crs3Results.
        :type cr_case_information: Crs3CaseInformation
        """
        if cr_case_information is None:
            raise ValueError("Invalid value for `cr_case_information`, must not be `None`")

        self._cr_case_information = cr_case_information

    @property
    def cr_defendants(self):
        """Gets the cr_defendants of this Crs3Results.


        :return: The cr_defendants of this Crs3Results.
        :rtype: List[Crs3CRDefendants]
        """
        return self._cr_defendants

    @cr_defendants.setter
    def cr_defendants(self, cr_defendants):
        """Sets the cr_defendants of this Crs3Results.


        :param cr_defendants: The cr_defendants of this Crs3Results.
        :type cr_defendants: List[Crs3CRDefendants]
        """
        if cr_defendants is None:
            raise ValueError("Invalid value for `cr_defendants`, must not be `None`")

        self._cr_defendants = cr_defendants

    @property
    def cr_details(self):
        """Gets the cr_details of this Crs3Results.


        :return: The cr_details of this Crs3Results.
        :rtype: List[Crs3CRDetails]
        """
        return self._cr_details

    @cr_details.setter
    def cr_details(self, cr_details):
        """Sets the cr_details of this Crs3Results.


        :param cr_details: The cr_details of this Crs3Results.
        :type cr_details: List[Crs3CRDetails]
        """
        if cr_details is None:
            raise ValueError("Invalid value for `cr_details`, must not be `None`")

        self._cr_details = cr_details

    @property
    def locations(self):
        """Gets the locations of this Crs3Results.


        :return: The locations of this Crs3Results.
        :rtype: List[Crs3Locations]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Crs3Results.


        :param locations: The locations of this Crs3Results.
        :type locations: List[Crs3Locations]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def message(self):
        """Gets the message of this Crs3Results.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Crs3Results.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Crs3Results.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Crs3Results.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
