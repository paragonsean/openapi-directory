# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crs3Locations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, county: str=None, epa_region: str=None, latitude: float=None, longitude: float=None, state: str=None, zip: str=None):
        """Crs3Locations - a model defined in OpenAPI

        :param city: The city of this Crs3Locations.
        :param county: The county of this Crs3Locations.
        :param epa_region: The epa_region of this Crs3Locations.
        :param latitude: The latitude of this Crs3Locations.
        :param longitude: The longitude of this Crs3Locations.
        :param state: The state of this Crs3Locations.
        :param zip: The zip of this Crs3Locations.
        """
        self.openapi_types = {
            'city': str,
            'county': str,
            'epa_region': str,
            'latitude': float,
            'longitude': float,
            'state': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'City',
            'county': 'County',
            'epa_region': 'EPARegion',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'state': 'State',
            'zip': 'Zip'
        }

        self._city = city
        self._county = county
        self._epa_region = epa_region
        self._latitude = latitude
        self._longitude = longitude
        self._state = state
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crs3Locations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The crs3_Locations of this Crs3Locations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Crs3Locations.

        The name of the city, town, village or other locality, when identifiable, within whose boundaries (the majority of) the facility site is located. This is not always the same as the city used for USPS mail delivery.

        :return: The city of this Crs3Locations.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Crs3Locations.

        The name of the city, town, village or other locality, when identifiable, within whose boundaries (the majority of) the facility site is located. This is not always the same as the city used for USPS mail delivery.

        :param city: The city of this Crs3Locations.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def county(self):
        """Gets the county of this Crs3Locations.

        The name of the county, when identifiable, within whose boundaries (the majority of) the criminal activity was located. The county was derived in ECHO based on the latitude and longitude provided in the Summary of Criminal Prosecutions database.

        :return: The county of this Crs3Locations.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Crs3Locations.

        The name of the county, when identifiable, within whose boundaries (the majority of) the criminal activity was located. The county was derived in ECHO based on the latitude and longitude provided in the Summary of Criminal Prosecutions database.

        :param county: The county of this Crs3Locations.
        :type county: str
        """
        if county is None:
            raise ValueError("Invalid value for `county`, must not be `None`")

        self._county = county

    @property
    def epa_region(self):
        """Gets the epa_region of this Crs3Locations.

        The EPA region in which the facility is located

        :return: The epa_region of this Crs3Locations.
        :rtype: str
        """
        return self._epa_region

    @epa_region.setter
    def epa_region(self, epa_region):
        """Sets the epa_region of this Crs3Locations.

        The EPA region in which the facility is located

        :param epa_region: The epa_region of this Crs3Locations.
        :type epa_region: str
        """
        if epa_region is None:
            raise ValueError("Invalid value for `epa_region`, must not be `None`")

        self._epa_region = epa_region

    @property
    def latitude(self):
        """Gets the latitude of this Crs3Locations.

        The latitude of the facility or permit holder as maintained in each data system.

        :return: The latitude of this Crs3Locations.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Crs3Locations.

        The latitude of the facility or permit holder as maintained in each data system.

        :param latitude: The latitude of this Crs3Locations.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Crs3Locations.

        The longitude of the facility or permit holder as maintained in each data system

        :return: The longitude of this Crs3Locations.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Crs3Locations.

        The longitude of the facility or permit holder as maintained in each data system

        :param longitude: The longitude of this Crs3Locations.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def state(self):
        """Gets the state of this Crs3Locations.

        The two letter abbreviation that represents the state or state equivalent for the U.S.

        :return: The state of this Crs3Locations.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Crs3Locations.

        The two letter abbreviation that represents the state or state equivalent for the U.S.

        :param state: The state of this Crs3Locations.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this Crs3Locations.

        US postal ZIP code, as maintained by ICIS.

        :return: The zip of this Crs3Locations.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Crs3Locations.

        US postal ZIP code, as maintained by ICIS.

        :param zip: The zip of this Crs3Locations.
        :type zip: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")

        self._zip = zip
