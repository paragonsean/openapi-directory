/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section provides detailed facility and address information on all of the facilities associated with the civil enforcement case.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1Facilities {
  public static final String SERIALIZED_NAME_FR_S_NUMBER = "FRSNumber";
  @SerializedName(SERIALIZED_NAME_FR_S_NUMBER)
  private String frSNumber;

  public static final String SERIALIZED_NAME_FACILITY_ADDRESS = "FacilityAddress";
  @SerializedName(SERIALIZED_NAME_FACILITY_ADDRESS)
  private String facilityAddress;

  public static final String SERIALIZED_NAME_FACILITY_CITY = "FacilityCity";
  @SerializedName(SERIALIZED_NAME_FACILITY_CITY)
  private String facilityCity;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "FacilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  private String facilityName;

  public static final String SERIALIZED_NAME_FACILITY_STATE = "FacilityState";
  @SerializedName(SERIALIZED_NAME_FACILITY_STATE)
  private String facilityState;

  public static final String SERIALIZED_NAME_FACILITY_ZIP = "FacilityZip";
  @SerializedName(SERIALIZED_NAME_FACILITY_ZIP)
  private String facilityZip;

  public static final String SERIALIZED_NAME_NA_I_C_S_CODES = "NAICSCodes";
  @SerializedName(SERIALIZED_NAME_NA_I_C_S_CODES)
  private String naICSCodes;

  public static final String SERIALIZED_NAME_SI_C_CODES = "SICCodes";
  @SerializedName(SERIALIZED_NAME_SI_C_CODES)
  private String siCCodes;

  public Crs1Facilities() {
  }

  public Crs1Facilities frSNumber(String frSNumber) {
    this.frSNumber = frSNumber;
    return this;
  }

  /**
   * The identification number assigned to a facility in the�Facility Registry Service (FRS)�to uniquely identify a facility site.
   * @return frSNumber
   */
  @javax.annotation.Nonnull
  public String getFrSNumber() {
    return frSNumber;
  }

  public void setFrSNumber(String frSNumber) {
    this.frSNumber = frSNumber;
  }


  public Crs1Facilities facilityAddress(String facilityAddress) {
    this.facilityAddress = facilityAddress;
    return this;
  }

  /**
   * The address that describes the physical (geographic) location of the front door or main entrance of a Facility site, including urban-style street address or rural address.
   * @return facilityAddress
   */
  @javax.annotation.Nonnull
  public String getFacilityAddress() {
    return facilityAddress;
  }

  public void setFacilityAddress(String facilityAddress) {
    this.facilityAddress = facilityAddress;
  }


  public Crs1Facilities facilityCity(String facilityCity) {
    this.facilityCity = facilityCity;
    return this;
  }

  /**
   * The city in which the facility is located
   * @return facilityCity
   */
  @javax.annotation.Nonnull
  public String getFacilityCity() {
    return facilityCity;
  }

  public void setFacilityCity(String facilityCity) {
    this.facilityCity = facilityCity;
  }


  public Crs1Facilities facilityName(String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * The name of the facility.
   * @return facilityName
   */
  @javax.annotation.Nonnull
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(String facilityName) {
    this.facilityName = facilityName;
  }


  public Crs1Facilities facilityState(String facilityState) {
    this.facilityState = facilityState;
    return this;
  }

  /**
   * The state in which the facility is located
   * @return facilityState
   */
  @javax.annotation.Nonnull
  public String getFacilityState() {
    return facilityState;
  }

  public void setFacilityState(String facilityState) {
    this.facilityState = facilityState;
  }


  public Crs1Facilities facilityZip(String facilityZip) {
    this.facilityZip = facilityZip;
    return this;
  }

  /**
   * The zip code of the area in which the facility is located
   * @return facilityZip
   */
  @javax.annotation.Nonnull
  public String getFacilityZip() {
    return facilityZip;
  }

  public void setFacilityZip(String facilityZip) {
    this.facilityZip = facilityZip;
  }


  public Crs1Facilities naICSCodes(String naICSCodes) {
    this.naICSCodes = naICSCodes;
    return this;
  }

  /**
   * A 6-digit code to classify industrial establishments. For detailed information about NAICS, please refer to the U.S. Census Bureau�NAICS�webpage.
   * @return naICSCodes
   */
  @javax.annotation.Nonnull
  public String getNaICSCodes() {
    return naICSCodes;
  }

  public void setNaICSCodes(String naICSCodes) {
    this.naICSCodes = naICSCodes;
  }


  public Crs1Facilities siCCodes(String siCCodes) {
    this.siCCodes = siCCodes;
    return this;
  }

  /**
   * The Standard Industrial Classification codes applicable to the facility
   * @return siCCodes
   */
  @javax.annotation.Nonnull
  public String getSiCCodes() {
    return siCCodes;
  }

  public void setSiCCodes(String siCCodes) {
    this.siCCodes = siCCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1Facilities crs1Facilities = (Crs1Facilities) o;
    return Objects.equals(this.frSNumber, crs1Facilities.frSNumber) &&
        Objects.equals(this.facilityAddress, crs1Facilities.facilityAddress) &&
        Objects.equals(this.facilityCity, crs1Facilities.facilityCity) &&
        Objects.equals(this.facilityName, crs1Facilities.facilityName) &&
        Objects.equals(this.facilityState, crs1Facilities.facilityState) &&
        Objects.equals(this.facilityZip, crs1Facilities.facilityZip) &&
        Objects.equals(this.naICSCodes, crs1Facilities.naICSCodes) &&
        Objects.equals(this.siCCodes, crs1Facilities.siCCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frSNumber, facilityAddress, facilityCity, facilityName, facilityState, facilityZip, naICSCodes, siCCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1Facilities {\n");
    sb.append("    frSNumber: ").append(toIndentedString(frSNumber)).append("\n");
    sb.append("    facilityAddress: ").append(toIndentedString(facilityAddress)).append("\n");
    sb.append("    facilityCity: ").append(toIndentedString(facilityCity)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    facilityState: ").append(toIndentedString(facilityState)).append("\n");
    sb.append("    facilityZip: ").append(toIndentedString(facilityZip)).append("\n");
    sb.append("    naICSCodes: ").append(toIndentedString(naICSCodes)).append("\n");
    sb.append("    siCCodes: ").append(toIndentedString(siCCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FRSNumber");
    openapiFields.add("FacilityAddress");
    openapiFields.add("FacilityCity");
    openapiFields.add("FacilityName");
    openapiFields.add("FacilityState");
    openapiFields.add("FacilityZip");
    openapiFields.add("NAICSCodes");
    openapiFields.add("SICCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FRSNumber");
    openapiRequiredFields.add("FacilityAddress");
    openapiRequiredFields.add("FacilityCity");
    openapiRequiredFields.add("FacilityName");
    openapiRequiredFields.add("FacilityState");
    openapiRequiredFields.add("FacilityZip");
    openapiRequiredFields.add("NAICSCodes");
    openapiRequiredFields.add("SICCodes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1Facilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1Facilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1Facilities is not found in the empty JSON string", Crs1Facilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1Facilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1Facilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1Facilities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("FRSNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FRSNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FRSNumber").toString()));
      }
      if (!jsonObj.get("FacilityAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityAddress").toString()));
      }
      if (!jsonObj.get("FacilityCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityCity").toString()));
      }
      if (!jsonObj.get("FacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityName").toString()));
      }
      if (!jsonObj.get("FacilityState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityState").toString()));
      }
      if (!jsonObj.get("FacilityZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityZip").toString()));
      }
      if (!jsonObj.get("NAICSCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAICSCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAICSCodes").toString()));
      }
      if (!jsonObj.get("SICCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SICCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SICCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1Facilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1Facilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1Facilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1Facilities.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1Facilities>() {
           @Override
           public void write(JsonWriter out, Crs1Facilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1Facilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1Facilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1Facilities
   * @throws IOException if the JSON string is invalid with respect to Crs1Facilities
   */
  public static Crs1Facilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1Facilities.class);
  }

  /**
   * Convert an instance of Crs1Facilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

