/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section provides compliance schedule milestone activity information for a subset of EPA judicial consent decrees with compliance schedules.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1ComplianceSchedules {
  public static final String SERIALIZED_NAME_ACTUAL_DATE = "ActualDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DATE)
  private String actualDate;

  public static final String SERIALIZED_NAME_EVENT_AMOUNT = "EventAmount";
  @SerializedName(SERIALIZED_NAME_EVENT_AMOUNT)
  private String eventAmount;

  public static final String SERIALIZED_NAME_FACILITY_F_R_S_I_D = "FacilityFRSID";
  @SerializedName(SERIALIZED_NAME_FACILITY_F_R_S_I_D)
  private String facilityFRSID;

  public static final String SERIALIZED_NAME_SCHEDULE_COMMENT_TEXT = "ScheduleCommentText";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_COMMENT_TEXT)
  private String scheduleCommentText;

  public static final String SERIALIZED_NAME_SCHEDULE_DATE = "ScheduleDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_DATE)
  private String scheduleDate;

  public static final String SERIALIZED_NAME_SCHEDULE_EVENT_DESCRIPTION = "ScheduleEventDescription";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EVENT_DESCRIPTION)
  private String scheduleEventDescription;

  public static final String SERIALIZED_NAME_SCHEDULE_NUMBER = "ScheduleNumber";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_NUMBER)
  private String scheduleNumber;

  public Crs1ComplianceSchedules() {
  }

  public Crs1ComplianceSchedules actualDate(String actualDate) {
    this.actualDate = actualDate;
    return this;
  }

  /**
   * The actual date on which the Compliance Schedule event was completed/achieved.
   * @return actualDate
   */
  @javax.annotation.Nonnull
  public String getActualDate() {
    return actualDate;
  }

  public void setActualDate(String actualDate) {
    this.actualDate = actualDate;
  }


  public Crs1ComplianceSchedules eventAmount(String eventAmount) {
    this.eventAmount = eventAmount;
    return this;
  }

  /**
   * The dollar amount of a scheduled payment initiated through a penalty action or a cost recovery pursuant to a Final Order.
   * @return eventAmount
   */
  @javax.annotation.Nonnull
  public String getEventAmount() {
    return eventAmount;
  }

  public void setEventAmount(String eventAmount) {
    this.eventAmount = eventAmount;
  }


  public Crs1ComplianceSchedules facilityFRSID(String facilityFRSID) {
    this.facilityFRSID = facilityFRSID;
    return this;
  }

  /**
   * The number assigned by the Facility Linkage Application that is used to associate facility records from multiple environmental database systems that are known or believed to represent the same facility.
   * @return facilityFRSID
   */
  @javax.annotation.Nonnull
  public String getFacilityFRSID() {
    return facilityFRSID;
  }

  public void setFacilityFRSID(String facilityFRSID) {
    this.facilityFRSID = facilityFRSID;
  }


  public Crs1ComplianceSchedules scheduleCommentText(String scheduleCommentText) {
    this.scheduleCommentText = scheduleCommentText;
    return this;
  }

  /**
   * The free-text field used to store descriptive Compliance Schedule information.
   * @return scheduleCommentText
   */
  @javax.annotation.Nonnull
  public String getScheduleCommentText() {
    return scheduleCommentText;
  }

  public void setScheduleCommentText(String scheduleCommentText) {
    this.scheduleCommentText = scheduleCommentText;
  }


  public Crs1ComplianceSchedules scheduleDate(String scheduleDate) {
    this.scheduleDate = scheduleDate;
    return this;
  }

  /**
   * The date the event is scheduled to be completed (i.e. the due date).
   * @return scheduleDate
   */
  @javax.annotation.Nonnull
  public String getScheduleDate() {
    return scheduleDate;
  }

  public void setScheduleDate(String scheduleDate) {
    this.scheduleDate = scheduleDate;
  }


  public Crs1ComplianceSchedules scheduleEventDescription(String scheduleEventDescription) {
    this.scheduleEventDescription = scheduleEventDescription;
    return this;
  }

  /**
   * The description of the particular event with which the permittee is scheduled to comply.
   * @return scheduleEventDescription
   */
  @javax.annotation.Nonnull
  public String getScheduleEventDescription() {
    return scheduleEventDescription;
  }

  public void setScheduleEventDescription(String scheduleEventDescription) {
    this.scheduleEventDescription = scheduleEventDescription;
  }


  public Crs1ComplianceSchedules scheduleNumber(String scheduleNumber) {
    this.scheduleNumber = scheduleNumber;
    return this;
  }

  /**
   * A two-digit number which in combination with the Schedule Type and NPDES ID uniquely identifies a Compliance Schedule.
   * @return scheduleNumber
   */
  @javax.annotation.Nonnull
  public String getScheduleNumber() {
    return scheduleNumber;
  }

  public void setScheduleNumber(String scheduleNumber) {
    this.scheduleNumber = scheduleNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1ComplianceSchedules crs1ComplianceSchedules = (Crs1ComplianceSchedules) o;
    return Objects.equals(this.actualDate, crs1ComplianceSchedules.actualDate) &&
        Objects.equals(this.eventAmount, crs1ComplianceSchedules.eventAmount) &&
        Objects.equals(this.facilityFRSID, crs1ComplianceSchedules.facilityFRSID) &&
        Objects.equals(this.scheduleCommentText, crs1ComplianceSchedules.scheduleCommentText) &&
        Objects.equals(this.scheduleDate, crs1ComplianceSchedules.scheduleDate) &&
        Objects.equals(this.scheduleEventDescription, crs1ComplianceSchedules.scheduleEventDescription) &&
        Objects.equals(this.scheduleNumber, crs1ComplianceSchedules.scheduleNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualDate, eventAmount, facilityFRSID, scheduleCommentText, scheduleDate, scheduleEventDescription, scheduleNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1ComplianceSchedules {\n");
    sb.append("    actualDate: ").append(toIndentedString(actualDate)).append("\n");
    sb.append("    eventAmount: ").append(toIndentedString(eventAmount)).append("\n");
    sb.append("    facilityFRSID: ").append(toIndentedString(facilityFRSID)).append("\n");
    sb.append("    scheduleCommentText: ").append(toIndentedString(scheduleCommentText)).append("\n");
    sb.append("    scheduleDate: ").append(toIndentedString(scheduleDate)).append("\n");
    sb.append("    scheduleEventDescription: ").append(toIndentedString(scheduleEventDescription)).append("\n");
    sb.append("    scheduleNumber: ").append(toIndentedString(scheduleNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActualDate");
    openapiFields.add("EventAmount");
    openapiFields.add("FacilityFRSID");
    openapiFields.add("ScheduleCommentText");
    openapiFields.add("ScheduleDate");
    openapiFields.add("ScheduleEventDescription");
    openapiFields.add("ScheduleNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActualDate");
    openapiRequiredFields.add("EventAmount");
    openapiRequiredFields.add("FacilityFRSID");
    openapiRequiredFields.add("ScheduleCommentText");
    openapiRequiredFields.add("ScheduleDate");
    openapiRequiredFields.add("ScheduleEventDescription");
    openapiRequiredFields.add("ScheduleNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1ComplianceSchedules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1ComplianceSchedules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1ComplianceSchedules is not found in the empty JSON string", Crs1ComplianceSchedules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1ComplianceSchedules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1ComplianceSchedules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1ComplianceSchedules.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActualDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActualDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActualDate").toString()));
      }
      if (!jsonObj.get("EventAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventAmount").toString()));
      }
      if (!jsonObj.get("FacilityFRSID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilityFRSID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilityFRSID").toString()));
      }
      if (!jsonObj.get("ScheduleCommentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleCommentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleCommentText").toString()));
      }
      if (!jsonObj.get("ScheduleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleDate").toString()));
      }
      if (!jsonObj.get("ScheduleEventDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleEventDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleEventDescription").toString()));
      }
      if (!jsonObj.get("ScheduleNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1ComplianceSchedules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1ComplianceSchedules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1ComplianceSchedules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1ComplianceSchedules.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1ComplianceSchedules>() {
           @Override
           public void write(JsonWriter out, Crs1ComplianceSchedules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1ComplianceSchedules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1ComplianceSchedules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1ComplianceSchedules
   * @throws IOException if the JSON string is invalid with respect to Crs1ComplianceSchedules
   */
  public static Crs1ComplianceSchedules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1ComplianceSchedules.class);
  }

  /**
   * Convert an instance of Crs1ComplianceSchedules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

