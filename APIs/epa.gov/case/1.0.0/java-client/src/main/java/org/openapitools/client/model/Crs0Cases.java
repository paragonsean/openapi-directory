/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the violation(s), environmental problem(s), and a description of the cause of action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs0Cases {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "ActivityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  public static final String SERIALIZED_NAME_CAA_FLAG = "CaaFlag";
  @SerializedName(SERIALIZED_NAME_CAA_FLAG)
  private String caaFlag;

  public static final String SERIALIZED_NAME_CASE_CATEGORY_CODE = "CaseCategoryCode";
  @SerializedName(SERIALIZED_NAME_CASE_CATEGORY_CODE)
  private String caseCategoryCode;

  public static final String SERIALIZED_NAME_CASE_CATEGORY_DESC = "CaseCategoryDesc";
  @SerializedName(SERIALIZED_NAME_CASE_CATEGORY_DESC)
  private String caseCategoryDesc;

  public static final String SERIALIZED_NAME_CASE_NAME = "CaseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_NUMBER = "CaseNumber";
  @SerializedName(SERIALIZED_NAME_CASE_NUMBER)
  private String caseNumber;

  public static final String SERIALIZED_NAME_CASE_STATUS_CODE = "CaseStatusCode";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_CODE)
  private String caseStatusCode;

  public static final String SERIALIZED_NAME_CASE_STATUS_DESC = "CaseStatusDesc";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_DESC)
  private String caseStatusDesc;

  public static final String SERIALIZED_NAME_CERCLA_FLAG = "CerclaFlag";
  @SerializedName(SERIALIZED_NAME_CERCLA_FLAG)
  private String cerclaFlag;

  public static final String SERIALIZED_NAME_CIVIL_CRIMINAL_INDICATOR = "CivilCriminalIndicator";
  @SerializedName(SERIALIZED_NAME_CIVIL_CRIMINAL_INDICATOR)
  private String civilCriminalIndicator;

  public static final String SERIALIZED_NAME_COST_RECOVERY = "CostRecovery";
  @SerializedName(SERIALIZED_NAME_COST_RECOVERY)
  private String costRecovery;

  public static final String SERIALIZED_NAME_COURT_DOCKET_NUMBER = "CourtDocketNumber";
  @SerializedName(SERIALIZED_NAME_COURT_DOCKET_NUMBER)
  private String courtDocketNumber;

  public static final String SERIALIZED_NAME_CWA_FLAG = "CwaFlag";
  @SerializedName(SERIALIZED_NAME_CWA_FLAG)
  private String cwaFlag;

  public static final String SERIALIZED_NAME_DO_J_DOCKET_NMBR = "DOJDocketNmbr";
  @SerializedName(SERIALIZED_NAME_DO_J_DOCKET_NMBR)
  private String doJDocketNmbr;

  public static final String SERIALIZED_NAME_DATE_CLOSED = "DateClosed";
  @SerializedName(SERIALIZED_NAME_DATE_CLOSED)
  private String dateClosed;

  public static final String SERIALIZED_NAME_DATE_FILED = "DateFiled";
  @SerializedName(SERIALIZED_NAME_DATE_FILED)
  private String dateFiled;

  public static final String SERIALIZED_NAME_DATE_LODGED = "DateLodged";
  @SerializedName(SERIALIZED_NAME_DATE_LODGED)
  private String dateLodged;

  public static final String SERIALIZED_NAME_ENF_OUTCOME = "EnfOutcome";
  @SerializedName(SERIALIZED_NAME_ENF_OUTCOME)
  private String enfOutcome;

  public static final String SERIALIZED_NAME_EPCRA_FLAG = "EpcraFlag";
  @SerializedName(SERIALIZED_NAME_EPCRA_FLAG)
  private String epcraFlag;

  public static final String SERIALIZED_NAME_FED_PENALTY = "FedPenalty";
  @SerializedName(SERIALIZED_NAME_FED_PENALTY)
  private String fedPenalty;

  public static final String SERIALIZED_NAME_FEDERAL_FLAG = "FederalFlag";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FLAG)
  private String federalFlag;

  public static final String SERIALIZED_NAME_FIFRA_FLAG = "FifraFlag";
  @SerializedName(SERIALIZED_NAME_FIFRA_FLAG)
  private String fifraFlag;

  public static final String SERIALIZED_NAME_LEAD = "Lead";
  @SerializedName(SERIALIZED_NAME_LEAD)
  private String lead;

  public static final String SERIALIZED_NAME_MAX_SCORE = "MaxScore";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private String maxScore;

  public static final String SERIALIZED_NAME_PRIMARY_LAW = "PrimaryLaw";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LAW)
  private String primaryLaw;

  public static final String SERIALIZED_NAME_PRIMARY_N_A_I_C_S_CODE = "PrimaryNAICSCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_N_A_I_C_S_CODE)
  private String primaryNAICSCode;

  public static final String SERIALIZED_NAME_PRIMARY_S_I_C_CODE = "PrimarySICCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_S_I_C_CODE)
  private String primarySICCode;

  public static final String SERIALIZED_NAME_PRIMARY_SECTION = "PrimarySection";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SECTION)
  private String primarySection;

  public static final String SERIALIZED_NAME_PROSECUTION_SUMMARY_ID = "ProsecutionSummaryId";
  @SerializedName(SERIALIZED_NAME_PROSECUTION_SUMMARY_ID)
  private String prosecutionSummaryId;

  public static final String SERIALIZED_NAME_RCRA_FLAG = "RcraFlag";
  @SerializedName(SERIALIZED_NAME_RCRA_FLAG)
  private String rcraFlag;

  public static final String SERIALIZED_NAME_SE_P_CATEGORIES = "SEPCategories";
  @SerializedName(SERIALIZED_NAME_SE_P_CATEGORIES)
  private String sePCategories;

  public static final String SERIALIZED_NAME_SE_P_COST = "SEPCost";
  @SerializedName(SERIALIZED_NAME_SE_P_COST)
  private String sePCost;

  public static final String SERIALIZED_NAME_SE_P_TEXTS = "SEPTexts";
  @SerializedName(SERIALIZED_NAME_SE_P_TEXTS)
  private String sePTexts;

  public static final String SERIALIZED_NAME_SDWA_FLAG = "SdwaFlag";
  @SerializedName(SERIALIZED_NAME_SDWA_FLAG)
  private String sdwaFlag;

  public static final String SERIALIZED_NAME_SETTLEMENT_CNT = "SettlementCnt";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CNT)
  private String settlementCnt;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "SettlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_STATE_LOC_PENALTY_AMT = "StateLocPenaltyAmt";
  @SerializedName(SERIALIZED_NAME_STATE_LOC_PENALTY_AMT)
  private String stateLocPenaltyAmt;

  public static final String SERIALIZED_NAME_TOTAL_COMP_ACTION_AMT = "TotalCompActionAmt";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMP_ACTION_AMT)
  private String totalCompActionAmt;

  public static final String SERIALIZED_NAME_TRIBAL_LAND_FLAG = "TribalLandFlag";
  @SerializedName(SERIALIZED_NAME_TRIBAL_LAND_FLAG)
  private String tribalLandFlag;

  public static final String SERIALIZED_NAME_TSCA_FLAG = "TscaFlag";
  @SerializedName(SERIALIZED_NAME_TSCA_FLAG)
  private String tscaFlag;

  public Crs0Cases() {
  }

  public Crs0Cases activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.
   * @return activityId
   */
  @javax.annotation.Nonnull
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public Crs0Cases caaFlag(String caaFlag) {
    this.caaFlag = caaFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Clean Air Act.
   * @return caaFlag
   */
  @javax.annotation.Nonnull
  public String getCaaFlag() {
    return caaFlag;
  }

  public void setCaaFlag(String caaFlag) {
    this.caaFlag = caaFlag;
  }


  public Crs0Cases caseCategoryCode(String caseCategoryCode) {
    this.caseCategoryCode = caseCategoryCode;
    return this;
  }

  /**
   * A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative – formal (AFR), and judicial activities (JDC).
   * @return caseCategoryCode
   */
  @javax.annotation.Nonnull
  public String getCaseCategoryCode() {
    return caseCategoryCode;
  }

  public void setCaseCategoryCode(String caseCategoryCode) {
    this.caseCategoryCode = caseCategoryCode;
  }


  public Crs0Cases caseCategoryDesc(String caseCategoryDesc) {
    this.caseCategoryDesc = caseCategoryDesc;
    return this;
  }

  /**
   * Identifies the type of action based on the enforcement authority used.    Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of: - A notice of violation or a Superfund notice letter. -&gt; An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.  Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State&#39;s Attorneys General for the states as well.  Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.
   * @return caseCategoryDesc
   */
  @javax.annotation.Nonnull
  public String getCaseCategoryDesc() {
    return caseCategoryDesc;
  }

  public void setCaseCategoryDesc(String caseCategoryDesc) {
    this.caseCategoryDesc = caseCategoryDesc;
  }


  public Crs0Cases caseName(String caseName) {
    this.caseName = caseName;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
   * @return caseName
   */
  @javax.annotation.Nonnull
  public String getCaseName() {
    return caseName;
  }

  public void setCaseName(String caseName) {
    this.caseName = caseName;
  }


  public Crs0Cases caseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
   * @return caseNumber
   */
  @javax.annotation.Nonnull
  public String getCaseNumber() {
    return caseNumber;
  }

  public void setCaseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
  }


  public Crs0Cases caseStatusCode(String caseStatusCode) {
    this.caseStatusCode = caseStatusCode;
    return this;
  }

  /**
   * Code identifying the current status of an activity.
   * @return caseStatusCode
   */
  @javax.annotation.Nonnull
  public String getCaseStatusCode() {
    return caseStatusCode;
  }

  public void setCaseStatusCode(String caseStatusCode) {
    this.caseStatusCode = caseStatusCode;
  }


  public Crs0Cases caseStatusDesc(String caseStatusDesc) {
    this.caseStatusDesc = caseStatusDesc;
    return this;
  }

  /**
   * The description that identifies the current status of an activity.
   * @return caseStatusDesc
   */
  @javax.annotation.Nonnull
  public String getCaseStatusDesc() {
    return caseStatusDesc;
  }

  public void setCaseStatusDesc(String caseStatusDesc) {
    this.caseStatusDesc = caseStatusDesc;
  }


  public Crs0Cases cerclaFlag(String cerclaFlag) {
    this.cerclaFlag = cerclaFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Comprehensive Environmental Response, Compensation, and Liability Act.
   * @return cerclaFlag
   */
  @javax.annotation.Nonnull
  public String getCerclaFlag() {
    return cerclaFlag;
  }

  public void setCerclaFlag(String cerclaFlag) {
    this.cerclaFlag = cerclaFlag;
  }


  public Crs0Cases civilCriminalIndicator(String civilCriminalIndicator) {
    this.civilCriminalIndicator = civilCriminalIndicator;
    return this;
  }

  /**
   * Civil vs. Criminal Indicator.
   * @return civilCriminalIndicator
   */
  @javax.annotation.Nonnull
  public String getCivilCriminalIndicator() {
    return civilCriminalIndicator;
  }

  public void setCivilCriminalIndicator(String civilCriminalIndicator) {
    this.civilCriminalIndicator = civilCriminalIndicator;
  }


  public Crs0Cases costRecovery(String costRecovery) {
    this.costRecovery = costRecovery;
    return this;
  }

  /**
   * For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
   * @return costRecovery
   */
  @javax.annotation.Nonnull
  public String getCostRecovery() {
    return costRecovery;
  }

  public void setCostRecovery(String costRecovery) {
    this.costRecovery = costRecovery;
  }


  public Crs0Cases courtDocketNumber(String courtDocketNumber) {
    this.courtDocketNumber = courtDocketNumber;
    return this;
  }

  /**
   * Get courtDocketNumber
   * @return courtDocketNumber
   */
  @javax.annotation.Nonnull
  public String getCourtDocketNumber() {
    return courtDocketNumber;
  }

  public void setCourtDocketNumber(String courtDocketNumber) {
    this.courtDocketNumber = courtDocketNumber;
  }


  public Crs0Cases cwaFlag(String cwaFlag) {
    this.cwaFlag = cwaFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Clean Water Act.
   * @return cwaFlag
   */
  @javax.annotation.Nonnull
  public String getCwaFlag() {
    return cwaFlag;
  }

  public void setCwaFlag(String cwaFlag) {
    this.cwaFlag = cwaFlag;
  }


  public Crs0Cases doJDocketNmbr(String doJDocketNmbr) {
    this.doJDocketNmbr = doJDocketNmbr;
    return this;
  }

  /**
   * The docket number assigned by the Department of Justice to EPA&#39;s Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.
   * @return doJDocketNmbr
   */
  @javax.annotation.Nonnull
  public String getDoJDocketNmbr() {
    return doJDocketNmbr;
  }

  public void setDoJDocketNmbr(String doJDocketNmbr) {
    this.doJDocketNmbr = doJDocketNmbr;
  }


  public Crs0Cases dateClosed(String dateClosed) {
    this.dateClosed = dateClosed;
    return this;
  }

  /**
   * The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
   * @return dateClosed
   */
  @javax.annotation.Nonnull
  public String getDateClosed() {
    return dateClosed;
  }

  public void setDateClosed(String dateClosed) {
    this.dateClosed = dateClosed;
  }


  public Crs0Cases dateFiled(String dateFiled) {
    this.dateFiled = dateFiled;
    return this;
  }

  /**
   * The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.
   * @return dateFiled
   */
  @javax.annotation.Nonnull
  public String getDateFiled() {
    return dateFiled;
  }

  public void setDateFiled(String dateFiled) {
    this.dateFiled = dateFiled;
  }


  public Crs0Cases dateLodged(String dateLodged) {
    this.dateLodged = dateLodged;
    return this;
  }

  /**
   * The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.
   * @return dateLodged
   */
  @javax.annotation.Nonnull
  public String getDateLodged() {
    return dateLodged;
  }

  public void setDateLodged(String dateLodged) {
    this.dateLodged = dateLodged;
  }


  public Crs0Cases enfOutcome(String enfOutcome) {
    this.enfOutcome = enfOutcome;
    return this;
  }

  /**
   * The result of the enforcement action.
   * @return enfOutcome
   */
  @javax.annotation.Nonnull
  public String getEnfOutcome() {
    return enfOutcome;
  }

  public void setEnfOutcome(String enfOutcome) {
    this.enfOutcome = enfOutcome;
  }


  public Crs0Cases epcraFlag(String epcraFlag) {
    this.epcraFlag = epcraFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Emergency Planning and Community Right to Know Act.
   * @return epcraFlag
   */
  @javax.annotation.Nonnull
  public String getEpcraFlag() {
    return epcraFlag;
  }

  public void setEpcraFlag(String epcraFlag) {
    this.epcraFlag = epcraFlag;
  }


  public Crs0Cases fedPenalty(String fedPenalty) {
    this.fedPenalty = fedPenalty;
    return this;
  }

  /**
   * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
   * @return fedPenalty
   */
  @javax.annotation.Nonnull
  public String getFedPenalty() {
    return fedPenalty;
  }

  public void setFedPenalty(String fedPenalty) {
    this.fedPenalty = fedPenalty;
  }


  public Crs0Cases federalFlag(String federalFlag) {
    this.federalFlag = federalFlag;
    return this;
  }

  /**
   * A flag indicating that the  case is related to a Federally Owned facility.
   * @return federalFlag
   */
  @javax.annotation.Nonnull
  public String getFederalFlag() {
    return federalFlag;
  }

  public void setFederalFlag(String federalFlag) {
    this.federalFlag = federalFlag;
  }


  public Crs0Cases fifraFlag(String fifraFlag) {
    this.fifraFlag = fifraFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Federal Insecticide, Fungicide, and Rodenticide Act.
   * @return fifraFlag
   */
  @javax.annotation.Nonnull
  public String getFifraFlag() {
    return fifraFlag;
  }

  public void setFifraFlag(String fifraFlag) {
    this.fifraFlag = fifraFlag;
  }


  public Crs0Cases lead(String lead) {
    this.lead = lead;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return lead
   */
  @javax.annotation.Nonnull
  public String getLead() {
    return lead;
  }

  public void setLead(String lead) {
    this.lead = lead;
  }


  public Crs0Cases maxScore(String maxScore) {
    this.maxScore = maxScore;
    return this;
  }

  /**
   * A sorting score for internal use.
   * @return maxScore
   */
  @javax.annotation.Nonnull
  public String getMaxScore() {
    return maxScore;
  }

  public void setMaxScore(String maxScore) {
    this.maxScore = maxScore;
  }


  public Crs0Cases primaryLaw(String primaryLaw) {
    this.primaryLaw = primaryLaw;
    return this;
  }

  /**
   * Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA&#39;s judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.
   * @return primaryLaw
   */
  @javax.annotation.Nonnull
  public String getPrimaryLaw() {
    return primaryLaw;
  }

  public void setPrimaryLaw(String primaryLaw) {
    this.primaryLaw = primaryLaw;
  }


  public Crs0Cases primaryNAICSCode(String primaryNAICSCode) {
    this.primaryNAICSCode = primaryNAICSCode;
    return this;
  }

  /**
   * A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.
   * @return primaryNAICSCode
   */
  @javax.annotation.Nonnull
  public String getPrimaryNAICSCode() {
    return primaryNAICSCode;
  }

  public void setPrimaryNAICSCode(String primaryNAICSCode) {
    this.primaryNAICSCode = primaryNAICSCode;
  }


  public Crs0Cases primarySICCode(String primarySICCode) {
    this.primarySICCode = primarySICCode;
    return this;
  }

  /**
   * The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility&#39;s specialty within the major sector.
   * @return primarySICCode
   */
  @javax.annotation.Nonnull
  public String getPrimarySICCode() {
    return primarySICCode;
  }

  public void setPrimarySICCode(String primarySICCode) {
    this.primarySICCode = primarySICCode;
  }


  public Crs0Cases primarySection(String primarySection) {
    this.primarySection = primarySection;
    return this;
  }

  /**
   * Identifies the primary section violated and cited in the enforcement action.
   * @return primarySection
   */
  @javax.annotation.Nonnull
  public String getPrimarySection() {
    return primarySection;
  }

  public void setPrimarySection(String primarySection) {
    this.primarySection = primarySection;
  }


  public Crs0Cases prosecutionSummaryId(String prosecutionSummaryId) {
    this.prosecutionSummaryId = prosecutionSummaryId;
    return this;
  }

  /**
   * Prosecution Summary Identifier.
   * @return prosecutionSummaryId
   */
  @javax.annotation.Nonnull
  public String getProsecutionSummaryId() {
    return prosecutionSummaryId;
  }

  public void setProsecutionSummaryId(String prosecutionSummaryId) {
    this.prosecutionSummaryId = prosecutionSummaryId;
  }


  public Crs0Cases rcraFlag(String rcraFlag) {
    this.rcraFlag = rcraFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Resource Conservation and Recovery Act.
   * @return rcraFlag
   */
  @javax.annotation.Nonnull
  public String getRcraFlag() {
    return rcraFlag;
  }

  public void setRcraFlag(String rcraFlag) {
    this.rcraFlag = rcraFlag;
  }


  public Crs0Cases sePCategories(String sePCategories) {
    this.sePCategories = sePCategories;
    return this;
  }

  /**
   * For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs: - Public Health - Pollution Prevention - Pollution Reduction - Environmental Restoration and Protection - Emergency Planning and Preparedness - Assessments and Audits - Environmental Compliance Promotion - Other Types of Projects Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.
   * @return sePCategories
   */
  @javax.annotation.Nonnull
  public String getSePCategories() {
    return sePCategories;
  }

  public void setSePCategories(String sePCategories) {
    this.sePCategories = sePCategories;
  }


  public Crs0Cases sePCost(String sePCost) {
    this.sePCost = sePCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return sePCost
   */
  @javax.annotation.Nonnull
  public String getSePCost() {
    return sePCost;
  }

  public void setSePCost(String sePCost) {
    this.sePCost = sePCost;
  }


  public Crs0Cases sePTexts(String sePTexts) {
    this.sePTexts = sePTexts;
    return this;
  }

  /**
   * A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.
   * @return sePTexts
   */
  @javax.annotation.Nonnull
  public String getSePTexts() {
    return sePTexts;
  }

  public void setSePTexts(String sePTexts) {
    this.sePTexts = sePTexts;
  }


  public Crs0Cases sdwaFlag(String sdwaFlag) {
    this.sdwaFlag = sdwaFlag;
    return this;
  }

  /**
   * A flag indicating that the Primary Law cited for the case was the Safe Drinking Water Act.
   * @return sdwaFlag
   */
  @javax.annotation.Nonnull
  public String getSdwaFlag() {
    return sdwaFlag;
  }

  public void setSdwaFlag(String sdwaFlag) {
    this.sdwaFlag = sdwaFlag;
  }


  public Crs0Cases settlementCnt(String settlementCnt) {
    this.settlementCnt = settlementCnt;
    return this;
  }

  /**
   * For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.
   * @return settlementCnt
   */
  @javax.annotation.Nonnull
  public String getSettlementCnt() {
    return settlementCnt;
  }

  public void setSettlementCnt(String settlementCnt) {
    this.settlementCnt = settlementCnt;
  }


  public Crs0Cases settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

  /**
   * For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
   * @return settlementDate
   */
  @javax.annotation.Nonnull
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Crs0Cases stateLocPenaltyAmt(String stateLocPenaltyAmt) {
    this.stateLocPenaltyAmt = stateLocPenaltyAmt;
    return this;
  }

  /**
   * The total State or Local Penalty amount collected pursuant to a Final Order.
   * @return stateLocPenaltyAmt
   */
  @javax.annotation.Nonnull
  public String getStateLocPenaltyAmt() {
    return stateLocPenaltyAmt;
  }

  public void setStateLocPenaltyAmt(String stateLocPenaltyAmt) {
    this.stateLocPenaltyAmt = stateLocPenaltyAmt;
  }


  public Crs0Cases totalCompActionAmt(String totalCompActionAmt) {
    this.totalCompActionAmt = totalCompActionAmt;
    return this;
  }

  /**
   * For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.
   * @return totalCompActionAmt
   */
  @javax.annotation.Nonnull
  public String getTotalCompActionAmt() {
    return totalCompActionAmt;
  }

  public void setTotalCompActionAmt(String totalCompActionAmt) {
    this.totalCompActionAmt = totalCompActionAmt;
  }


  public Crs0Cases tribalLandFlag(String tribalLandFlag) {
    this.tribalLandFlag = tribalLandFlag;
    return this;
  }

  /**
   * Flag indicating if the case is located on tribal land.
   * @return tribalLandFlag
   */
  @javax.annotation.Nonnull
  public String getTribalLandFlag() {
    return tribalLandFlag;
  }

  public void setTribalLandFlag(String tribalLandFlag) {
    this.tribalLandFlag = tribalLandFlag;
  }


  public Crs0Cases tscaFlag(String tscaFlag) {
    this.tscaFlag = tscaFlag;
    return this;
  }

  /**
   * Flag indicating whether or not a facility has a TSCA ID
   * @return tscaFlag
   */
  @javax.annotation.Nonnull
  public String getTscaFlag() {
    return tscaFlag;
  }

  public void setTscaFlag(String tscaFlag) {
    this.tscaFlag = tscaFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs0Cases crs0Cases = (Crs0Cases) o;
    return Objects.equals(this.activityId, crs0Cases.activityId) &&
        Objects.equals(this.caaFlag, crs0Cases.caaFlag) &&
        Objects.equals(this.caseCategoryCode, crs0Cases.caseCategoryCode) &&
        Objects.equals(this.caseCategoryDesc, crs0Cases.caseCategoryDesc) &&
        Objects.equals(this.caseName, crs0Cases.caseName) &&
        Objects.equals(this.caseNumber, crs0Cases.caseNumber) &&
        Objects.equals(this.caseStatusCode, crs0Cases.caseStatusCode) &&
        Objects.equals(this.caseStatusDesc, crs0Cases.caseStatusDesc) &&
        Objects.equals(this.cerclaFlag, crs0Cases.cerclaFlag) &&
        Objects.equals(this.civilCriminalIndicator, crs0Cases.civilCriminalIndicator) &&
        Objects.equals(this.costRecovery, crs0Cases.costRecovery) &&
        Objects.equals(this.courtDocketNumber, crs0Cases.courtDocketNumber) &&
        Objects.equals(this.cwaFlag, crs0Cases.cwaFlag) &&
        Objects.equals(this.doJDocketNmbr, crs0Cases.doJDocketNmbr) &&
        Objects.equals(this.dateClosed, crs0Cases.dateClosed) &&
        Objects.equals(this.dateFiled, crs0Cases.dateFiled) &&
        Objects.equals(this.dateLodged, crs0Cases.dateLodged) &&
        Objects.equals(this.enfOutcome, crs0Cases.enfOutcome) &&
        Objects.equals(this.epcraFlag, crs0Cases.epcraFlag) &&
        Objects.equals(this.fedPenalty, crs0Cases.fedPenalty) &&
        Objects.equals(this.federalFlag, crs0Cases.federalFlag) &&
        Objects.equals(this.fifraFlag, crs0Cases.fifraFlag) &&
        Objects.equals(this.lead, crs0Cases.lead) &&
        Objects.equals(this.maxScore, crs0Cases.maxScore) &&
        Objects.equals(this.primaryLaw, crs0Cases.primaryLaw) &&
        Objects.equals(this.primaryNAICSCode, crs0Cases.primaryNAICSCode) &&
        Objects.equals(this.primarySICCode, crs0Cases.primarySICCode) &&
        Objects.equals(this.primarySection, crs0Cases.primarySection) &&
        Objects.equals(this.prosecutionSummaryId, crs0Cases.prosecutionSummaryId) &&
        Objects.equals(this.rcraFlag, crs0Cases.rcraFlag) &&
        Objects.equals(this.sePCategories, crs0Cases.sePCategories) &&
        Objects.equals(this.sePCost, crs0Cases.sePCost) &&
        Objects.equals(this.sePTexts, crs0Cases.sePTexts) &&
        Objects.equals(this.sdwaFlag, crs0Cases.sdwaFlag) &&
        Objects.equals(this.settlementCnt, crs0Cases.settlementCnt) &&
        Objects.equals(this.settlementDate, crs0Cases.settlementDate) &&
        Objects.equals(this.stateLocPenaltyAmt, crs0Cases.stateLocPenaltyAmt) &&
        Objects.equals(this.totalCompActionAmt, crs0Cases.totalCompActionAmt) &&
        Objects.equals(this.tribalLandFlag, crs0Cases.tribalLandFlag) &&
        Objects.equals(this.tscaFlag, crs0Cases.tscaFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, caaFlag, caseCategoryCode, caseCategoryDesc, caseName, caseNumber, caseStatusCode, caseStatusDesc, cerclaFlag, civilCriminalIndicator, costRecovery, courtDocketNumber, cwaFlag, doJDocketNmbr, dateClosed, dateFiled, dateLodged, enfOutcome, epcraFlag, fedPenalty, federalFlag, fifraFlag, lead, maxScore, primaryLaw, primaryNAICSCode, primarySICCode, primarySection, prosecutionSummaryId, rcraFlag, sePCategories, sePCost, sePTexts, sdwaFlag, settlementCnt, settlementDate, stateLocPenaltyAmt, totalCompActionAmt, tribalLandFlag, tscaFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs0Cases {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    caaFlag: ").append(toIndentedString(caaFlag)).append("\n");
    sb.append("    caseCategoryCode: ").append(toIndentedString(caseCategoryCode)).append("\n");
    sb.append("    caseCategoryDesc: ").append(toIndentedString(caseCategoryDesc)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    caseStatusCode: ").append(toIndentedString(caseStatusCode)).append("\n");
    sb.append("    caseStatusDesc: ").append(toIndentedString(caseStatusDesc)).append("\n");
    sb.append("    cerclaFlag: ").append(toIndentedString(cerclaFlag)).append("\n");
    sb.append("    civilCriminalIndicator: ").append(toIndentedString(civilCriminalIndicator)).append("\n");
    sb.append("    costRecovery: ").append(toIndentedString(costRecovery)).append("\n");
    sb.append("    courtDocketNumber: ").append(toIndentedString(courtDocketNumber)).append("\n");
    sb.append("    cwaFlag: ").append(toIndentedString(cwaFlag)).append("\n");
    sb.append("    doJDocketNmbr: ").append(toIndentedString(doJDocketNmbr)).append("\n");
    sb.append("    dateClosed: ").append(toIndentedString(dateClosed)).append("\n");
    sb.append("    dateFiled: ").append(toIndentedString(dateFiled)).append("\n");
    sb.append("    dateLodged: ").append(toIndentedString(dateLodged)).append("\n");
    sb.append("    enfOutcome: ").append(toIndentedString(enfOutcome)).append("\n");
    sb.append("    epcraFlag: ").append(toIndentedString(epcraFlag)).append("\n");
    sb.append("    fedPenalty: ").append(toIndentedString(fedPenalty)).append("\n");
    sb.append("    federalFlag: ").append(toIndentedString(federalFlag)).append("\n");
    sb.append("    fifraFlag: ").append(toIndentedString(fifraFlag)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    primaryLaw: ").append(toIndentedString(primaryLaw)).append("\n");
    sb.append("    primaryNAICSCode: ").append(toIndentedString(primaryNAICSCode)).append("\n");
    sb.append("    primarySICCode: ").append(toIndentedString(primarySICCode)).append("\n");
    sb.append("    primarySection: ").append(toIndentedString(primarySection)).append("\n");
    sb.append("    prosecutionSummaryId: ").append(toIndentedString(prosecutionSummaryId)).append("\n");
    sb.append("    rcraFlag: ").append(toIndentedString(rcraFlag)).append("\n");
    sb.append("    sePCategories: ").append(toIndentedString(sePCategories)).append("\n");
    sb.append("    sePCost: ").append(toIndentedString(sePCost)).append("\n");
    sb.append("    sePTexts: ").append(toIndentedString(sePTexts)).append("\n");
    sb.append("    sdwaFlag: ").append(toIndentedString(sdwaFlag)).append("\n");
    sb.append("    settlementCnt: ").append(toIndentedString(settlementCnt)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    stateLocPenaltyAmt: ").append(toIndentedString(stateLocPenaltyAmt)).append("\n");
    sb.append("    totalCompActionAmt: ").append(toIndentedString(totalCompActionAmt)).append("\n");
    sb.append("    tribalLandFlag: ").append(toIndentedString(tribalLandFlag)).append("\n");
    sb.append("    tscaFlag: ").append(toIndentedString(tscaFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityId");
    openapiFields.add("CaaFlag");
    openapiFields.add("CaseCategoryCode");
    openapiFields.add("CaseCategoryDesc");
    openapiFields.add("CaseName");
    openapiFields.add("CaseNumber");
    openapiFields.add("CaseStatusCode");
    openapiFields.add("CaseStatusDesc");
    openapiFields.add("CerclaFlag");
    openapiFields.add("CivilCriminalIndicator");
    openapiFields.add("CostRecovery");
    openapiFields.add("CourtDocketNumber");
    openapiFields.add("CwaFlag");
    openapiFields.add("DOJDocketNmbr");
    openapiFields.add("DateClosed");
    openapiFields.add("DateFiled");
    openapiFields.add("DateLodged");
    openapiFields.add("EnfOutcome");
    openapiFields.add("EpcraFlag");
    openapiFields.add("FedPenalty");
    openapiFields.add("FederalFlag");
    openapiFields.add("FifraFlag");
    openapiFields.add("Lead");
    openapiFields.add("MaxScore");
    openapiFields.add("PrimaryLaw");
    openapiFields.add("PrimaryNAICSCode");
    openapiFields.add("PrimarySICCode");
    openapiFields.add("PrimarySection");
    openapiFields.add("ProsecutionSummaryId");
    openapiFields.add("RcraFlag");
    openapiFields.add("SEPCategories");
    openapiFields.add("SEPCost");
    openapiFields.add("SEPTexts");
    openapiFields.add("SdwaFlag");
    openapiFields.add("SettlementCnt");
    openapiFields.add("SettlementDate");
    openapiFields.add("StateLocPenaltyAmt");
    openapiFields.add("TotalCompActionAmt");
    openapiFields.add("TribalLandFlag");
    openapiFields.add("TscaFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActivityId");
    openapiRequiredFields.add("CaaFlag");
    openapiRequiredFields.add("CaseCategoryCode");
    openapiRequiredFields.add("CaseCategoryDesc");
    openapiRequiredFields.add("CaseName");
    openapiRequiredFields.add("CaseNumber");
    openapiRequiredFields.add("CaseStatusCode");
    openapiRequiredFields.add("CaseStatusDesc");
    openapiRequiredFields.add("CerclaFlag");
    openapiRequiredFields.add("CivilCriminalIndicator");
    openapiRequiredFields.add("CostRecovery");
    openapiRequiredFields.add("CourtDocketNumber");
    openapiRequiredFields.add("CwaFlag");
    openapiRequiredFields.add("DOJDocketNmbr");
    openapiRequiredFields.add("DateClosed");
    openapiRequiredFields.add("DateFiled");
    openapiRequiredFields.add("DateLodged");
    openapiRequiredFields.add("EnfOutcome");
    openapiRequiredFields.add("EpcraFlag");
    openapiRequiredFields.add("FedPenalty");
    openapiRequiredFields.add("FederalFlag");
    openapiRequiredFields.add("FifraFlag");
    openapiRequiredFields.add("Lead");
    openapiRequiredFields.add("MaxScore");
    openapiRequiredFields.add("PrimaryLaw");
    openapiRequiredFields.add("PrimaryNAICSCode");
    openapiRequiredFields.add("PrimarySICCode");
    openapiRequiredFields.add("PrimarySection");
    openapiRequiredFields.add("ProsecutionSummaryId");
    openapiRequiredFields.add("RcraFlag");
    openapiRequiredFields.add("SEPCategories");
    openapiRequiredFields.add("SEPCost");
    openapiRequiredFields.add("SEPTexts");
    openapiRequiredFields.add("SdwaFlag");
    openapiRequiredFields.add("SettlementCnt");
    openapiRequiredFields.add("SettlementDate");
    openapiRequiredFields.add("StateLocPenaltyAmt");
    openapiRequiredFields.add("TotalCompActionAmt");
    openapiRequiredFields.add("TribalLandFlag");
    openapiRequiredFields.add("TscaFlag");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs0Cases
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs0Cases.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs0Cases is not found in the empty JSON string", Crs0Cases.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs0Cases.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs0Cases` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs0Cases.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActivityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivityId").toString()));
      }
      if (!jsonObj.get("CaaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaaFlag").toString()));
      }
      if (!jsonObj.get("CaseCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseCategoryCode").toString()));
      }
      if (!jsonObj.get("CaseCategoryDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseCategoryDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseCategoryDesc").toString()));
      }
      if (!jsonObj.get("CaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseName").toString()));
      }
      if (!jsonObj.get("CaseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseNumber").toString()));
      }
      if (!jsonObj.get("CaseStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseStatusCode").toString()));
      }
      if (!jsonObj.get("CaseStatusDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseStatusDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseStatusDesc").toString()));
      }
      if (!jsonObj.get("CerclaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CerclaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CerclaFlag").toString()));
      }
      if (!jsonObj.get("CivilCriminalIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CivilCriminalIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CivilCriminalIndicator").toString()));
      }
      if (!jsonObj.get("CostRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CostRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CostRecovery").toString()));
      }
      if (!jsonObj.get("CourtDocketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CourtDocketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CourtDocketNumber").toString()));
      }
      if (!jsonObj.get("CwaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CwaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CwaFlag").toString()));
      }
      if (!jsonObj.get("DOJDocketNmbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOJDocketNmbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOJDocketNmbr").toString()));
      }
      if (!jsonObj.get("DateClosed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateClosed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateClosed").toString()));
      }
      if (!jsonObj.get("DateFiled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateFiled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateFiled").toString()));
      }
      if (!jsonObj.get("DateLodged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateLodged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateLodged").toString()));
      }
      if (!jsonObj.get("EnfOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnfOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnfOutcome").toString()));
      }
      if (!jsonObj.get("EpcraFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpcraFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpcraFlag").toString()));
      }
      if (!jsonObj.get("FedPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FedPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FedPenalty").toString()));
      }
      if (!jsonObj.get("FederalFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalFlag").toString()));
      }
      if (!jsonObj.get("FifraFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FifraFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FifraFlag").toString()));
      }
      if (!jsonObj.get("Lead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lead").toString()));
      }
      if (!jsonObj.get("MaxScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxScore").toString()));
      }
      if (!jsonObj.get("PrimaryLaw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryLaw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryLaw").toString()));
      }
      if (!jsonObj.get("PrimaryNAICSCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryNAICSCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryNAICSCode").toString()));
      }
      if (!jsonObj.get("PrimarySICCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimarySICCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimarySICCode").toString()));
      }
      if (!jsonObj.get("PrimarySection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimarySection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimarySection").toString()));
      }
      if (!jsonObj.get("ProsecutionSummaryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProsecutionSummaryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProsecutionSummaryId").toString()));
      }
      if (!jsonObj.get("RcraFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RcraFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RcraFlag").toString()));
      }
      if (!jsonObj.get("SEPCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPCategories").toString()));
      }
      if (!jsonObj.get("SEPCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPCost").toString()));
      }
      if (!jsonObj.get("SEPTexts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPTexts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPTexts").toString()));
      }
      if (!jsonObj.get("SdwaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SdwaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SdwaFlag").toString()));
      }
      if (!jsonObj.get("SettlementCnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementCnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementCnt").toString()));
      }
      if (!jsonObj.get("SettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementDate").toString()));
      }
      if (!jsonObj.get("StateLocPenaltyAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateLocPenaltyAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateLocPenaltyAmt").toString()));
      }
      if (!jsonObj.get("TotalCompActionAmt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalCompActionAmt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalCompActionAmt").toString()));
      }
      if (!jsonObj.get("TribalLandFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TribalLandFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TribalLandFlag").toString()));
      }
      if (!jsonObj.get("TscaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TscaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TscaFlag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs0Cases.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs0Cases' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs0Cases> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs0Cases.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs0Cases>() {
           @Override
           public void write(JsonWriter out, Crs0Cases value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs0Cases read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs0Cases given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs0Cases
   * @throws IOException if the JSON string is invalid with respect to Crs0Cases
   */
  public static Crs0Cases fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs0Cases.class);
  }

  /**
   * Convert an instance of Crs0Cases to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

