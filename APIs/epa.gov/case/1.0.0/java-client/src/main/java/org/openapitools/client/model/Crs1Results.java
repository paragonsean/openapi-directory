/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Crs1CAEDDocuments;
import org.openapitools.client.model.Crs1CaseInformation;
import org.openapitools.client.model.Crs1CaseMilestones;
import org.openapitools.client.model.Crs1Citations;
import org.openapitools.client.model.Crs1Defendants;
import org.openapitools.client.model.Crs1EnforcementConclusions;
import org.openapitools.client.model.Crs1Facilities;
import org.openapitools.client.model.Crs1LawsAndSections;
import org.openapitools.client.model.Crs1Pollutants;
import org.openapitools.client.model.Crs1ProgramLinks;
import org.openapitools.client.model.Crs1RelatedActivities;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data returned by the service call.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1Results {
  public static final String SERIALIZED_NAME_CA_E_D_DOCUMENTS = "CAEDDocuments";
  @SerializedName(SERIALIZED_NAME_CA_E_D_DOCUMENTS)
  private List<Crs1CAEDDocuments> caEDDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CASE_INFORMATION = "CaseInformation";
  @SerializedName(SERIALIZED_NAME_CASE_INFORMATION)
  private Crs1CaseInformation caseInformation;

  public static final String SERIALIZED_NAME_CASE_MILESTONES = "CaseMilestones";
  @SerializedName(SERIALIZED_NAME_CASE_MILESTONES)
  private List<Crs1CaseMilestones> caseMilestones = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITATIONS = "Citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<Crs1Citations> citations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFENDANTS = "Defendants";
  @SerializedName(SERIALIZED_NAME_DEFENDANTS)
  private List<Crs1Defendants> defendants = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENFORCEMENT_CONCLUSIONS = "EnforcementConclusions";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_CONCLUSIONS)
  private List<Crs1EnforcementConclusions> enforcementConclusions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACILITIES = "Facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private List<Crs1Facilities> facilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAWS_AND_SECTIONS = "LawsAndSections";
  @SerializedName(SERIALIZED_NAME_LAWS_AND_SECTIONS)
  private List<Crs1LawsAndSections> lawsAndSections = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_POLLUTANTS = "Pollutants";
  @SerializedName(SERIALIZED_NAME_POLLUTANTS)
  private List<Crs1Pollutants> pollutants = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRAM_LINKS = "ProgramLinks";
  @SerializedName(SERIALIZED_NAME_PROGRAM_LINKS)
  private List<Crs1ProgramLinks> programLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_ACTIVITIES = "RelatedActivities";
  @SerializedName(SERIALIZED_NAME_RELATED_ACTIVITIES)
  private List<Crs1RelatedActivities> relatedActivities = new ArrayList<>();

  public Crs1Results() {
  }

  public Crs1Results caEDDocuments(List<Crs1CAEDDocuments> caEDDocuments) {
    this.caEDDocuments = caEDDocuments;
    return this;
  }

  public Crs1Results addCaEDDocumentsItem(Crs1CAEDDocuments caEDDocumentsItem) {
    if (this.caEDDocuments == null) {
      this.caEDDocuments = new ArrayList<>();
    }
    this.caEDDocuments.add(caEDDocumentsItem);
    return this;
  }

  /**
   * Get caEDDocuments
   * @return caEDDocuments
   */
  @javax.annotation.Nonnull
  public List<Crs1CAEDDocuments> getCaEDDocuments() {
    return caEDDocuments;
  }

  public void setCaEDDocuments(List<Crs1CAEDDocuments> caEDDocuments) {
    this.caEDDocuments = caEDDocuments;
  }


  public Crs1Results caseInformation(Crs1CaseInformation caseInformation) {
    this.caseInformation = caseInformation;
    return this;
  }

  /**
   * Get caseInformation
   * @return caseInformation
   */
  @javax.annotation.Nonnull
  public Crs1CaseInformation getCaseInformation() {
    return caseInformation;
  }

  public void setCaseInformation(Crs1CaseInformation caseInformation) {
    this.caseInformation = caseInformation;
  }


  public Crs1Results caseMilestones(List<Crs1CaseMilestones> caseMilestones) {
    this.caseMilestones = caseMilestones;
    return this;
  }

  public Crs1Results addCaseMilestonesItem(Crs1CaseMilestones caseMilestonesItem) {
    if (this.caseMilestones == null) {
      this.caseMilestones = new ArrayList<>();
    }
    this.caseMilestones.add(caseMilestonesItem);
    return this;
  }

  /**
   * Get caseMilestones
   * @return caseMilestones
   */
  @javax.annotation.Nonnull
  public List<Crs1CaseMilestones> getCaseMilestones() {
    return caseMilestones;
  }

  public void setCaseMilestones(List<Crs1CaseMilestones> caseMilestones) {
    this.caseMilestones = caseMilestones;
  }


  public Crs1Results citations(List<Crs1Citations> citations) {
    this.citations = citations;
    return this;
  }

  public Crs1Results addCitationsItem(Crs1Citations citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

  /**
   * Get citations
   * @return citations
   */
  @javax.annotation.Nonnull
  public List<Crs1Citations> getCitations() {
    return citations;
  }

  public void setCitations(List<Crs1Citations> citations) {
    this.citations = citations;
  }


  public Crs1Results defendants(List<Crs1Defendants> defendants) {
    this.defendants = defendants;
    return this;
  }

  public Crs1Results addDefendantsItem(Crs1Defendants defendantsItem) {
    if (this.defendants == null) {
      this.defendants = new ArrayList<>();
    }
    this.defendants.add(defendantsItem);
    return this;
  }

  /**
   * Get defendants
   * @return defendants
   */
  @javax.annotation.Nonnull
  public List<Crs1Defendants> getDefendants() {
    return defendants;
  }

  public void setDefendants(List<Crs1Defendants> defendants) {
    this.defendants = defendants;
  }


  public Crs1Results enforcementConclusions(List<Crs1EnforcementConclusions> enforcementConclusions) {
    this.enforcementConclusions = enforcementConclusions;
    return this;
  }

  public Crs1Results addEnforcementConclusionsItem(Crs1EnforcementConclusions enforcementConclusionsItem) {
    if (this.enforcementConclusions == null) {
      this.enforcementConclusions = new ArrayList<>();
    }
    this.enforcementConclusions.add(enforcementConclusionsItem);
    return this;
  }

  /**
   * Get enforcementConclusions
   * @return enforcementConclusions
   */
  @javax.annotation.Nonnull
  public List<Crs1EnforcementConclusions> getEnforcementConclusions() {
    return enforcementConclusions;
  }

  public void setEnforcementConclusions(List<Crs1EnforcementConclusions> enforcementConclusions) {
    this.enforcementConclusions = enforcementConclusions;
  }


  public Crs1Results facilities(List<Crs1Facilities> facilities) {
    this.facilities = facilities;
    return this;
  }

  public Crs1Results addFacilitiesItem(Crs1Facilities facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

  /**
   * A complex array of facility information.
   * @return facilities
   */
  @javax.annotation.Nonnull
  public List<Crs1Facilities> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<Crs1Facilities> facilities) {
    this.facilities = facilities;
  }


  public Crs1Results lawsAndSections(List<Crs1LawsAndSections> lawsAndSections) {
    this.lawsAndSections = lawsAndSections;
    return this;
  }

  public Crs1Results addLawsAndSectionsItem(Crs1LawsAndSections lawsAndSectionsItem) {
    if (this.lawsAndSections == null) {
      this.lawsAndSections = new ArrayList<>();
    }
    this.lawsAndSections.add(lawsAndSectionsItem);
    return this;
  }

  /**
   * Get lawsAndSections
   * @return lawsAndSections
   */
  @javax.annotation.Nonnull
  public List<Crs1LawsAndSections> getLawsAndSections() {
    return lawsAndSections;
  }

  public void setLawsAndSections(List<Crs1LawsAndSections> lawsAndSections) {
    this.lawsAndSections = lawsAndSections;
  }


  public Crs1Results message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Field to record messages (typically performance-related) about packet processing
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Crs1Results pollutants(List<Crs1Pollutants> pollutants) {
    this.pollutants = pollutants;
    return this;
  }

  public Crs1Results addPollutantsItem(Crs1Pollutants pollutantsItem) {
    if (this.pollutants == null) {
      this.pollutants = new ArrayList<>();
    }
    this.pollutants.add(pollutantsItem);
    return this;
  }

  /**
   * Get pollutants
   * @return pollutants
   */
  @javax.annotation.Nonnull
  public List<Crs1Pollutants> getPollutants() {
    return pollutants;
  }

  public void setPollutants(List<Crs1Pollutants> pollutants) {
    this.pollutants = pollutants;
  }


  public Crs1Results programLinks(List<Crs1ProgramLinks> programLinks) {
    this.programLinks = programLinks;
    return this;
  }

  public Crs1Results addProgramLinksItem(Crs1ProgramLinks programLinksItem) {
    if (this.programLinks == null) {
      this.programLinks = new ArrayList<>();
    }
    this.programLinks.add(programLinksItem);
    return this;
  }

  /**
   * Get programLinks
   * @return programLinks
   */
  @javax.annotation.Nonnull
  public List<Crs1ProgramLinks> getProgramLinks() {
    return programLinks;
  }

  public void setProgramLinks(List<Crs1ProgramLinks> programLinks) {
    this.programLinks = programLinks;
  }


  public Crs1Results relatedActivities(List<Crs1RelatedActivities> relatedActivities) {
    this.relatedActivities = relatedActivities;
    return this;
  }

  public Crs1Results addRelatedActivitiesItem(Crs1RelatedActivities relatedActivitiesItem) {
    if (this.relatedActivities == null) {
      this.relatedActivities = new ArrayList<>();
    }
    this.relatedActivities.add(relatedActivitiesItem);
    return this;
  }

  /**
   * This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.
   * @return relatedActivities
   */
  @javax.annotation.Nonnull
  public List<Crs1RelatedActivities> getRelatedActivities() {
    return relatedActivities;
  }

  public void setRelatedActivities(List<Crs1RelatedActivities> relatedActivities) {
    this.relatedActivities = relatedActivities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1Results crs1Results = (Crs1Results) o;
    return Objects.equals(this.caEDDocuments, crs1Results.caEDDocuments) &&
        Objects.equals(this.caseInformation, crs1Results.caseInformation) &&
        Objects.equals(this.caseMilestones, crs1Results.caseMilestones) &&
        Objects.equals(this.citations, crs1Results.citations) &&
        Objects.equals(this.defendants, crs1Results.defendants) &&
        Objects.equals(this.enforcementConclusions, crs1Results.enforcementConclusions) &&
        Objects.equals(this.facilities, crs1Results.facilities) &&
        Objects.equals(this.lawsAndSections, crs1Results.lawsAndSections) &&
        Objects.equals(this.message, crs1Results.message) &&
        Objects.equals(this.pollutants, crs1Results.pollutants) &&
        Objects.equals(this.programLinks, crs1Results.programLinks) &&
        Objects.equals(this.relatedActivities, crs1Results.relatedActivities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caEDDocuments, caseInformation, caseMilestones, citations, defendants, enforcementConclusions, facilities, lawsAndSections, message, pollutants, programLinks, relatedActivities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1Results {\n");
    sb.append("    caEDDocuments: ").append(toIndentedString(caEDDocuments)).append("\n");
    sb.append("    caseInformation: ").append(toIndentedString(caseInformation)).append("\n");
    sb.append("    caseMilestones: ").append(toIndentedString(caseMilestones)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    defendants: ").append(toIndentedString(defendants)).append("\n");
    sb.append("    enforcementConclusions: ").append(toIndentedString(enforcementConclusions)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    lawsAndSections: ").append(toIndentedString(lawsAndSections)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pollutants: ").append(toIndentedString(pollutants)).append("\n");
    sb.append("    programLinks: ").append(toIndentedString(programLinks)).append("\n");
    sb.append("    relatedActivities: ").append(toIndentedString(relatedActivities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CAEDDocuments");
    openapiFields.add("CaseInformation");
    openapiFields.add("CaseMilestones");
    openapiFields.add("Citations");
    openapiFields.add("Defendants");
    openapiFields.add("EnforcementConclusions");
    openapiFields.add("Facilities");
    openapiFields.add("LawsAndSections");
    openapiFields.add("Message");
    openapiFields.add("Pollutants");
    openapiFields.add("ProgramLinks");
    openapiFields.add("RelatedActivities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CAEDDocuments");
    openapiRequiredFields.add("CaseInformation");
    openapiRequiredFields.add("CaseMilestones");
    openapiRequiredFields.add("Citations");
    openapiRequiredFields.add("Defendants");
    openapiRequiredFields.add("EnforcementConclusions");
    openapiRequiredFields.add("Facilities");
    openapiRequiredFields.add("LawsAndSections");
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("Pollutants");
    openapiRequiredFields.add("ProgramLinks");
    openapiRequiredFields.add("RelatedActivities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1Results
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1Results.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1Results is not found in the empty JSON string", Crs1Results.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1Results.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1Results` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1Results.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("CAEDDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAEDDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("CAEDDocuments").toString()));
      }

      JsonArray jsonArraycaEDDocuments = jsonObj.getAsJsonArray("CAEDDocuments");
      // validate the required field `CAEDDocuments` (array)
      for (int i = 0; i < jsonArraycaEDDocuments.size(); i++) {
        Crs1CAEDDocuments.validateJsonElement(jsonArraycaEDDocuments.get(i));
      };
      // validate the required field `CaseInformation`
      Crs1CaseInformation.validateJsonElement(jsonObj.get("CaseInformation"));
      // ensure the json data is an array
      if (!jsonObj.get("CaseMilestones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseMilestones` to be an array in the JSON string but got `%s`", jsonObj.get("CaseMilestones").toString()));
      }

      JsonArray jsonArraycaseMilestones = jsonObj.getAsJsonArray("CaseMilestones");
      // validate the required field `CaseMilestones` (array)
      for (int i = 0; i < jsonArraycaseMilestones.size(); i++) {
        Crs1CaseMilestones.validateJsonElement(jsonArraycaseMilestones.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Citations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Citations` to be an array in the JSON string but got `%s`", jsonObj.get("Citations").toString()));
      }

      JsonArray jsonArraycitations = jsonObj.getAsJsonArray("Citations");
      // validate the required field `Citations` (array)
      for (int i = 0; i < jsonArraycitations.size(); i++) {
        Crs1Citations.validateJsonElement(jsonArraycitations.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Defendants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Defendants` to be an array in the JSON string but got `%s`", jsonObj.get("Defendants").toString()));
      }

      JsonArray jsonArraydefendants = jsonObj.getAsJsonArray("Defendants");
      // validate the required field `Defendants` (array)
      for (int i = 0; i < jsonArraydefendants.size(); i++) {
        Crs1Defendants.validateJsonElement(jsonArraydefendants.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("EnforcementConclusions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementConclusions` to be an array in the JSON string but got `%s`", jsonObj.get("EnforcementConclusions").toString()));
      }

      JsonArray jsonArrayenforcementConclusions = jsonObj.getAsJsonArray("EnforcementConclusions");
      // validate the required field `EnforcementConclusions` (array)
      for (int i = 0; i < jsonArrayenforcementConclusions.size(); i++) {
        Crs1EnforcementConclusions.validateJsonElement(jsonArrayenforcementConclusions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Facilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Facilities` to be an array in the JSON string but got `%s`", jsonObj.get("Facilities").toString()));
      }

      JsonArray jsonArrayfacilities = jsonObj.getAsJsonArray("Facilities");
      // validate the required field `Facilities` (array)
      for (int i = 0; i < jsonArrayfacilities.size(); i++) {
        Crs1Facilities.validateJsonElement(jsonArrayfacilities.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("LawsAndSections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LawsAndSections` to be an array in the JSON string but got `%s`", jsonObj.get("LawsAndSections").toString()));
      }

      JsonArray jsonArraylawsAndSections = jsonObj.getAsJsonArray("LawsAndSections");
      // validate the required field `LawsAndSections` (array)
      for (int i = 0; i < jsonArraylawsAndSections.size(); i++) {
        Crs1LawsAndSections.validateJsonElement(jsonArraylawsAndSections.get(i));
      };
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Pollutants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pollutants` to be an array in the JSON string but got `%s`", jsonObj.get("Pollutants").toString()));
      }

      JsonArray jsonArraypollutants = jsonObj.getAsJsonArray("Pollutants");
      // validate the required field `Pollutants` (array)
      for (int i = 0; i < jsonArraypollutants.size(); i++) {
        Crs1Pollutants.validateJsonElement(jsonArraypollutants.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("ProgramLinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProgramLinks` to be an array in the JSON string but got `%s`", jsonObj.get("ProgramLinks").toString()));
      }

      JsonArray jsonArrayprogramLinks = jsonObj.getAsJsonArray("ProgramLinks");
      // validate the required field `ProgramLinks` (array)
      for (int i = 0; i < jsonArrayprogramLinks.size(); i++) {
        Crs1ProgramLinks.validateJsonElement(jsonArrayprogramLinks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("RelatedActivities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RelatedActivities` to be an array in the JSON string but got `%s`", jsonObj.get("RelatedActivities").toString()));
      }

      JsonArray jsonArrayrelatedActivities = jsonObj.getAsJsonArray("RelatedActivities");
      // validate the required field `RelatedActivities` (array)
      for (int i = 0; i < jsonArrayrelatedActivities.size(); i++) {
        Crs1RelatedActivities.validateJsonElement(jsonArrayrelatedActivities.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1Results.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1Results' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1Results> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1Results.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1Results>() {
           @Override
           public void write(JsonWriter out, Crs1Results value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1Results read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1Results given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1Results
   * @throws IOException if the JSON string is invalid with respect to Crs1Results
   */
  public static Crs1Results fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1Results.class);
  }

  /**
   * Convert an instance of Crs1Results to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

