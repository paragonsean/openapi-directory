/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section provides geographic locational information for the criminal activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs3Locations {
  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTY = "County";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_EP_A_REGION = "EPARegion";
  @SerializedName(SERIALIZED_NAME_EP_A_REGION)
  private String epARegion;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "Zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public Crs3Locations() {
  }

  public Crs3Locations city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The name of the city, town, village or other locality, when identifiable, within whose boundaries (the majority of) the facility site is located. This is not always the same as the city used for USPS mail delivery.
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Crs3Locations county(String county) {
    this.county = county;
    return this;
  }

  /**
   * The name of the county, when identifiable, within whose boundaries (the majority of) the criminal activity was located. The county was derived in ECHO based on the latitude and longitude provided in the Summary of Criminal Prosecutions database.
   * @return county
   */
  @javax.annotation.Nonnull
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public Crs3Locations epARegion(String epARegion) {
    this.epARegion = epARegion;
    return this;
  }

  /**
   * The EPA region in which the facility is located
   * @return epARegion
   */
  @javax.annotation.Nonnull
  public String getEpARegion() {
    return epARegion;
  }

  public void setEpARegion(String epARegion) {
    this.epARegion = epARegion;
  }


  public Crs3Locations latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of the facility or permit holder as maintained in each data system.
   * @return latitude
   */
  @javax.annotation.Nonnull
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public Crs3Locations longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of the facility or permit holder as maintained in each data system
   * @return longitude
   */
  @javax.annotation.Nonnull
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public Crs3Locations state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The two letter abbreviation that represents the state or state equivalent for the U.S.
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Crs3Locations zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * US postal ZIP code, as maintained by ICIS.
   * @return zip
   */
  @javax.annotation.Nonnull
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs3Locations crs3Locations = (Crs3Locations) o;
    return Objects.equals(this.city, crs3Locations.city) &&
        Objects.equals(this.county, crs3Locations.county) &&
        Objects.equals(this.epARegion, crs3Locations.epARegion) &&
        Objects.equals(this.latitude, crs3Locations.latitude) &&
        Objects.equals(this.longitude, crs3Locations.longitude) &&
        Objects.equals(this.state, crs3Locations.state) &&
        Objects.equals(this.zip, crs3Locations.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, county, epARegion, latitude, longitude, state, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs3Locations {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    epARegion: ").append(toIndentedString(epARegion)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("City");
    openapiFields.add("County");
    openapiFields.add("EPARegion");
    openapiFields.add("Latitude");
    openapiFields.add("Longitude");
    openapiFields.add("State");
    openapiFields.add("Zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("City");
    openapiRequiredFields.add("County");
    openapiRequiredFields.add("EPARegion");
    openapiRequiredFields.add("Latitude");
    openapiRequiredFields.add("Longitude");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("Zip");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs3Locations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs3Locations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs3Locations is not found in the empty JSON string", Crs3Locations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs3Locations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs3Locations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs3Locations.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if (!jsonObj.get("County").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `County` to be a primitive type in the JSON string but got `%s`", jsonObj.get("County").toString()));
      }
      if (!jsonObj.get("EPARegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPARegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPARegion").toString()));
      }
      if (!jsonObj.get("Latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Latitude").toString()));
      }
      if (!jsonObj.get("Longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Longitude").toString()));
      }
      if (!jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if (!jsonObj.get("Zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs3Locations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs3Locations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs3Locations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs3Locations.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs3Locations>() {
           @Override
           public void write(JsonWriter out, Crs3Locations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs3Locations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs3Locations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs3Locations
   * @throws IOException if the JSON string is invalid with respect to Crs3Locations
   */
  public static Crs3Locations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs3Locations.class);
  }

  /**
   * Convert an instance of Crs3Locations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

