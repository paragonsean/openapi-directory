/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section provides information relating complying actions and SEPs to their estimated or actual environmental impact on pollutant reduction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1PollutantReductions {
  public static final String SERIALIZED_NAME_ANNUAL_AMOUNT = "AnnualAmount";
  @SerializedName(SERIALIZED_NAME_ANNUAL_AMOUNT)
  private String annualAmount;

  public static final String SERIALIZED_NAME_COMPLYING_ACTION_ID = "ComplyingActionId";
  @SerializedName(SERIALIZED_NAME_COMPLYING_ACTION_ID)
  private String complyingActionId;

  public static final String SERIALIZED_NAME_ENVIRONMENTAL_IMPACT_ID = "EnvironmentalImpactId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENTAL_IMPACT_ID)
  private String environmentalImpactId;

  public static final String SERIALIZED_NAME_MEDIA = "Media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private String media;

  public static final String SERIALIZED_NAME_POLLUTANT = "Pollutant";
  @SerializedName(SERIALIZED_NAME_POLLUTANT)
  private String pollutant;

  public static final String SERIALIZED_NAME_SE_P_ID = "SEPId";
  @SerializedName(SERIALIZED_NAME_SE_P_ID)
  private String sePId;

  public static final String SERIALIZED_NAME_SE_POR_COMP = "SEPorComp";
  @SerializedName(SERIALIZED_NAME_SE_POR_COMP)
  private String sePorComp;

  public static final String SERIALIZED_NAME_UNITS = "Units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public Crs1PollutantReductions() {
  }

  public Crs1PollutantReductions annualAmount(String annualAmount) {
    this.annualAmount = annualAmount;
    return this;
  }

  /**
   * The amount of reduction or elimination of each pollutant or waste in pounds, kilograms, or liquid measure that resulted from the SEP or Complying Actions.
   * @return annualAmount
   */
  @javax.annotation.Nonnull
  public String getAnnualAmount() {
    return annualAmount;
  }

  public void setAnnualAmount(String annualAmount) {
    this.annualAmount = annualAmount;
  }


  public Crs1PollutantReductions complyingActionId(String complyingActionId) {
    this.complyingActionId = complyingActionId;
    return this;
  }

  /**
   * The unique identifier for an enforceable requirement obliging the defendant/respondent to take or refrain from certain specified actions.
   * @return complyingActionId
   */
  @javax.annotation.Nonnull
  public String getComplyingActionId() {
    return complyingActionId;
  }

  public void setComplyingActionId(String complyingActionId) {
    this.complyingActionId = complyingActionId;
  }


  public Crs1PollutantReductions environmentalImpactId(String environmentalImpactId) {
    this.environmentalImpactId = environmentalImpactId;
    return this;
  }

  /**
   * The system-generated unique identifier of the Environmental Impact record.
   * @return environmentalImpactId
   */
  @javax.annotation.Nonnull
  public String getEnvironmentalImpactId() {
    return environmentalImpactId;
  }

  public void setEnvironmentalImpactId(String environmentalImpactId) {
    this.environmentalImpactId = environmentalImpactId;
  }


  public Crs1PollutantReductions media(String media) {
    this.media = media;
    return this;
  }

  /**
   * The name/description of the media where the pollutants or waste were emitted/discharged.
   * @return media
   */
  @javax.annotation.Nonnull
  public String getMedia() {
    return media;
  }

  public void setMedia(String media) {
    this.media = media;
  }


  public Crs1PollutantReductions pollutant(String pollutant) {
    this.pollutant = pollutant;
    return this;
  }

  /**
   * The name that EPA has selected as its preferred name for a substance (also known as registry name). If the registry name is not available, use the systematic name instead.
   * @return pollutant
   */
  @javax.annotation.Nonnull
  public String getPollutant() {
    return pollutant;
  }

  public void setPollutant(String pollutant) {
    this.pollutant = pollutant;
  }


  public Crs1PollutantReductions sePId(String sePId) {
    this.sePId = sePId;
    return this;
  }

  /**
   * The system-generated unique identifier of the SEP record affiliated with the Environmental Impact.
   * @return sePId
   */
  @javax.annotation.Nonnull
  public String getSePId() {
    return sePId;
  }

  public void setSePId(String sePId) {
    this.sePId = sePId;
  }


  public Crs1PollutantReductions sePorComp(String sePorComp) {
    this.sePorComp = sePorComp;
    return this;
  }

  /**
   * A flag that indicates whether the quantitative environmental impact pertains to a SEP or Complying Action.
   * @return sePorComp
   */
  @javax.annotation.Nonnull
  public String getSePorComp() {
    return sePorComp;
  }

  public void setSePorComp(String sePorComp) {
    this.sePorComp = sePorComp;
  }


  public Crs1PollutantReductions units(String units) {
    this.units = units;
    return this;
  }

  /**
   * A code that uniquely identifies the pollutant unit of measurement.
   * @return units
   */
  @javax.annotation.Nonnull
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1PollutantReductions crs1PollutantReductions = (Crs1PollutantReductions) o;
    return Objects.equals(this.annualAmount, crs1PollutantReductions.annualAmount) &&
        Objects.equals(this.complyingActionId, crs1PollutantReductions.complyingActionId) &&
        Objects.equals(this.environmentalImpactId, crs1PollutantReductions.environmentalImpactId) &&
        Objects.equals(this.media, crs1PollutantReductions.media) &&
        Objects.equals(this.pollutant, crs1PollutantReductions.pollutant) &&
        Objects.equals(this.sePId, crs1PollutantReductions.sePId) &&
        Objects.equals(this.sePorComp, crs1PollutantReductions.sePorComp) &&
        Objects.equals(this.units, crs1PollutantReductions.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualAmount, complyingActionId, environmentalImpactId, media, pollutant, sePId, sePorComp, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1PollutantReductions {\n");
    sb.append("    annualAmount: ").append(toIndentedString(annualAmount)).append("\n");
    sb.append("    complyingActionId: ").append(toIndentedString(complyingActionId)).append("\n");
    sb.append("    environmentalImpactId: ").append(toIndentedString(environmentalImpactId)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    pollutant: ").append(toIndentedString(pollutant)).append("\n");
    sb.append("    sePId: ").append(toIndentedString(sePId)).append("\n");
    sb.append("    sePorComp: ").append(toIndentedString(sePorComp)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnnualAmount");
    openapiFields.add("ComplyingActionId");
    openapiFields.add("EnvironmentalImpactId");
    openapiFields.add("Media");
    openapiFields.add("Pollutant");
    openapiFields.add("SEPId");
    openapiFields.add("SEPorComp");
    openapiFields.add("Units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnnualAmount");
    openapiRequiredFields.add("ComplyingActionId");
    openapiRequiredFields.add("EnvironmentalImpactId");
    openapiRequiredFields.add("Media");
    openapiRequiredFields.add("Pollutant");
    openapiRequiredFields.add("SEPId");
    openapiRequiredFields.add("SEPorComp");
    openapiRequiredFields.add("Units");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1PollutantReductions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1PollutantReductions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1PollutantReductions is not found in the empty JSON string", Crs1PollutantReductions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1PollutantReductions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1PollutantReductions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1PollutantReductions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AnnualAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnnualAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnnualAmount").toString()));
      }
      if (!jsonObj.get("ComplyingActionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComplyingActionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComplyingActionId").toString()));
      }
      if (!jsonObj.get("EnvironmentalImpactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnvironmentalImpactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnvironmentalImpactId").toString()));
      }
      if (!jsonObj.get("Media").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Media` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Media").toString()));
      }
      if (!jsonObj.get("Pollutant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pollutant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Pollutant").toString()));
      }
      if (!jsonObj.get("SEPId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPId").toString()));
      }
      if (!jsonObj.get("SEPorComp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPorComp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPorComp").toString()));
      }
      if (!jsonObj.get("Units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1PollutantReductions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1PollutantReductions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1PollutantReductions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1PollutantReductions.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1PollutantReductions>() {
           @Override
           public void write(JsonWriter out, Crs1PollutantReductions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1PollutantReductions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1PollutantReductions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1PollutantReductions
   * @throws IOException if the JSON string is invalid with respect to Crs1PollutantReductions
   */
  public static Crs1PollutantReductions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1PollutantReductions.class);
  }

  /**
   * Convert an instance of Crs1PollutantReductions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

