/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The basic information section contains information that identifies the action and some key descriptive variables, such as case status and case type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1CaseInformation {
  public static final String SERIALIZED_NAME_BRANCH = "Branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_CASE_NAME = "CaseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_NUMBER = "CaseNumber";
  @SerializedName(SERIALIZED_NAME_CASE_NUMBER)
  private String caseNumber;

  public static final String SERIALIZED_NAME_CASE_STATUS = "CaseStatus";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS)
  private String caseStatus;

  public static final String SERIALIZED_NAME_CASE_STATUS_DATE = "CaseStatusDate";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_DATE)
  private String caseStatusDate;

  public static final String SERIALIZED_NAME_CASE_SUMMARY = "CaseSummary";
  @SerializedName(SERIALIZED_NAME_CASE_SUMMARY)
  private String caseSummary;

  public static final String SERIALIZED_NAME_CASE_TYPE = "CaseType";
  @SerializedName(SERIALIZED_NAME_CASE_TYPE)
  private String caseType;

  public static final String SERIALIZED_NAME_DO_J_DOCKET_NUMBER = "DOJDocketNumber";
  @SerializedName(SERIALIZED_NAME_DO_J_DOCKET_NUMBER)
  private String doJDocketNumber;

  public static final String SERIALIZED_NAME_ENFORCEMENT_OUTCOME = "EnforcementOutcome";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_OUTCOME)
  private String enforcementOutcome;

  public static final String SERIALIZED_NAME_ENFORCEMENT_TYPE = "EnforcementType";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_TYPE)
  private String enforcementType;

  public static final String SERIALIZED_NAME_HEADQUARTERS_DIVISION = "HeadquartersDivision";
  @SerializedName(SERIALIZED_NAME_HEADQUARTERS_DIVISION)
  private String headquartersDivision;

  public static final String SERIALIZED_NAME_LEAD = "Lead";
  @SerializedName(SERIALIZED_NAME_LEAD)
  private String lead;

  public static final String SERIALIZED_NAME_MULTI_MEDIA_CASE = "MultiMediaCase";
  @SerializedName(SERIALIZED_NAME_MULTI_MEDIA_CASE)
  private String multiMediaCase;

  public static final String SERIALIZED_NAME_REGIONAL_DOCKET_NUMBER = "RegionalDocketNumber";
  @SerializedName(SERIALIZED_NAME_REGIONAL_DOCKET_NUMBER)
  private String regionalDocketNumber;

  public static final String SERIALIZED_NAME_RELIEF_SOUGHT = "ReliefSought";
  @SerializedName(SERIALIZED_NAME_RELIEF_SOUGHT)
  private String reliefSought;

  public static final String SERIALIZED_NAME_RESULT_VOL_DISCLOSURE = "ResultVolDisclosure";
  @SerializedName(SERIALIZED_NAME_RESULT_VOL_DISCLOSURE)
  private String resultVolDisclosure;

  public static final String SERIALIZED_NAME_TOTAL_COMPLIANCE_ACTION_COST = "TotalComplianceActionCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPLIANCE_ACTION_COST)
  private String totalComplianceActionCost;

  public static final String SERIALIZED_NAME_TOTAL_COST_RECOVERY = "TotalCostRecovery";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_RECOVERY)
  private String totalCostRecovery;

  public static final String SERIALIZED_NAME_TOTAL_FEDERAL_PENALTY = "TotalFederalPenalty";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEDERAL_PENALTY)
  private String totalFederalPenalty;

  public static final String SERIALIZED_NAME_TOTAL_S_E_P_COST = "TotalSEPCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_S_E_P_COST)
  private String totalSEPCost;

  public static final String SERIALIZED_NAME_TOTAL_STATE_PENALTY = "TotalStatePenalty";
  @SerializedName(SERIALIZED_NAME_TOTAL_STATE_PENALTY)
  private String totalStatePenalty;

  public static final String SERIALIZED_NAME_VIOLATIONS = "Violations";
  @SerializedName(SERIALIZED_NAME_VIOLATIONS)
  private String violations;

  public Crs1CaseInformation() {
  }

  public Crs1CaseInformation branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The Branch or Unit of the Office of Regional Counsel assigned for the case.
   * @return branch
   */
  @javax.annotation.Nonnull
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public Crs1CaseInformation caseName(String caseName) {
    this.caseName = caseName;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
   * @return caseName
   */
  @javax.annotation.Nonnull
  public String getCaseName() {
    return caseName;
  }

  public void setCaseName(String caseName) {
    this.caseName = caseName;
  }


  public Crs1CaseInformation caseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
    return this;
  }

  /**
   * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \&quot;HQ\&quot; (headquarters initiated cases), and \&quot;EF\&quot; or \&quot;WF\&quot; (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
   * @return caseNumber
   */
  @javax.annotation.Nonnull
  public String getCaseNumber() {
    return caseNumber;
  }

  public void setCaseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
  }


  public Crs1CaseInformation caseStatus(String caseStatus) {
    this.caseStatus = caseStatus;
    return this;
  }

  /**
   * The status of the compliance event or enforcement action.
   * @return caseStatus
   */
  @javax.annotation.Nonnull
  public String getCaseStatus() {
    return caseStatus;
  }

  public void setCaseStatus(String caseStatus) {
    this.caseStatus = caseStatus;
  }


  public Crs1CaseInformation caseStatusDate(String caseStatusDate) {
    this.caseStatusDate = caseStatusDate;
    return this;
  }

  /**
   * The date of the most recent milestone activity.
   * @return caseStatusDate
   */
  @javax.annotation.Nonnull
  public String getCaseStatusDate() {
    return caseStatusDate;
  }

  public void setCaseStatusDate(String caseStatusDate) {
    this.caseStatusDate = caseStatusDate;
  }


  public Crs1CaseInformation caseSummary(String caseSummary) {
    this.caseSummary = caseSummary;
    return this;
  }

  /**
   * The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.
   * @return caseSummary
   */
  @javax.annotation.Nonnull
  public String getCaseSummary() {
    return caseSummary;
  }

  public void setCaseSummary(String caseSummary) {
    this.caseSummary = caseSummary;
  }


  public Crs1CaseInformation caseType(String caseType) {
    this.caseType = caseType;
    return this;
  }

  /**
   * The unique code that identifies a type of compliance event or enforcement action.
   * @return caseType
   */
  @javax.annotation.Nonnull
  public String getCaseType() {
    return caseType;
  }

  public void setCaseType(String caseType) {
    this.caseType = caseType;
  }


  public Crs1CaseInformation doJDocketNumber(String doJDocketNumber) {
    this.doJDocketNumber = doJDocketNumber;
    return this;
  }

  /**
   * The docket number assigned by the Department of Justice to EPA&#39;s Enforcement Action.
   * @return doJDocketNumber
   */
  @javax.annotation.Nonnull
  public String getDoJDocketNumber() {
    return doJDocketNumber;
  }

  public void setDoJDocketNumber(String doJDocketNumber) {
    this.doJDocketNumber = doJDocketNumber;
  }


  public Crs1CaseInformation enforcementOutcome(String enforcementOutcome) {
    this.enforcementOutcome = enforcementOutcome;
    return this;
  }

  /**
   * A description of the mechanism by which the Enforcement Action is resolved.
   * @return enforcementOutcome
   */
  @javax.annotation.Nonnull
  public String getEnforcementOutcome() {
    return enforcementOutcome;
  }

  public void setEnforcementOutcome(String enforcementOutcome) {
    this.enforcementOutcome = enforcementOutcome;
  }


  public Crs1CaseInformation enforcementType(String enforcementType) {
    this.enforcementType = enforcementType;
    return this;
  }

  /**
   * A text description of the Enforcement Action type.
   * @return enforcementType
   */
  @javax.annotation.Nonnull
  public String getEnforcementType() {
    return enforcementType;
  }

  public void setEnforcementType(String enforcementType) {
    this.enforcementType = enforcementType;
  }


  public Crs1CaseInformation headquartersDivision(String headquartersDivision) {
    this.headquartersDivision = headquartersDivision;
    return this;
  }

  /**
   * The EPA Headquarters division that is tracking the case.
   * @return headquartersDivision
   */
  @javax.annotation.Nonnull
  public String getHeadquartersDivision() {
    return headquartersDivision;
  }

  public void setHeadquartersDivision(String headquartersDivision) {
    this.headquartersDivision = headquartersDivision;
  }


  public Crs1CaseInformation lead(String lead) {
    this.lead = lead;
    return this;
  }

  /**
   * The lead agency (e.g., EPA, State) conducting the inspection
   * @return lead
   */
  @javax.annotation.Nonnull
  public String getLead() {
    return lead;
  }

  public void setLead(String lead) {
    this.lead = lead;
  }


  public Crs1CaseInformation multiMediaCase(String multiMediaCase) {
    this.multiMediaCase = multiMediaCase;
    return this;
  }

  /**
   * The flag indicating whether the activity was a multimedia action.
   * @return multiMediaCase
   */
  @javax.annotation.Nonnull
  public String getMultiMediaCase() {
    return multiMediaCase;
  }

  public void setMultiMediaCase(String multiMediaCase) {
    this.multiMediaCase = multiMediaCase;
  }


  public Crs1CaseInformation regionalDocketNumber(String regionalDocketNumber) {
    this.regionalDocketNumber = regionalDocketNumber;
    return this;
  }

  /**
   * The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.
   * @return regionalDocketNumber
   */
  @javax.annotation.Nonnull
  public String getRegionalDocketNumber() {
    return regionalDocketNumber;
  }

  public void setRegionalDocketNumber(String regionalDocketNumber) {
    this.regionalDocketNumber = regionalDocketNumber;
  }


  public Crs1CaseInformation reliefSought(String reliefSought) {
    this.reliefSought = reliefSought;
    return this;
  }

  /**
   * The description for the type of relief requested in the complaint.
   * @return reliefSought
   */
  @javax.annotation.Nonnull
  public String getReliefSought() {
    return reliefSought;
  }

  public void setReliefSought(String reliefSought) {
    this.reliefSought = reliefSought;
  }


  public Crs1CaseInformation resultVolDisclosure(String resultVolDisclosure) {
    this.resultVolDisclosure = resultVolDisclosure;
    return this;
  }

  /**
   * A flag that indicates the Enforcement Action was the result of a self disclosure.
   * @return resultVolDisclosure
   */
  @javax.annotation.Nonnull
  public String getResultVolDisclosure() {
    return resultVolDisclosure;
  }

  public void setResultVolDisclosure(String resultVolDisclosure) {
    this.resultVolDisclosure = resultVolDisclosure;
  }


  public Crs1CaseInformation totalComplianceActionCost(String totalComplianceActionCost) {
    this.totalComplianceActionCost = totalComplianceActionCost;
    return this;
  }

  /**
   * The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.
   * @return totalComplianceActionCost
   */
  @javax.annotation.Nonnull
  public String getTotalComplianceActionCost() {
    return totalComplianceActionCost;
  }

  public void setTotalComplianceActionCost(String totalComplianceActionCost) {
    this.totalComplianceActionCost = totalComplianceActionCost;
  }


  public Crs1CaseInformation totalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
    return this;
  }

  /**
   * The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
   * @return totalCostRecovery
   */
  @javax.annotation.Nonnull
  public String getTotalCostRecovery() {
    return totalCostRecovery;
  }

  public void setTotalCostRecovery(String totalCostRecovery) {
    this.totalCostRecovery = totalCostRecovery;
  }


  public Crs1CaseInformation totalFederalPenalty(String totalFederalPenalty) {
    this.totalFederalPenalty = totalFederalPenalty;
    return this;
  }

  /**
   * For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)� as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.
   * @return totalFederalPenalty
   */
  @javax.annotation.Nonnull
  public String getTotalFederalPenalty() {
    return totalFederalPenalty;
  }

  public void setTotalFederalPenalty(String totalFederalPenalty) {
    this.totalFederalPenalty = totalFederalPenalty;
  }


  public Crs1CaseInformation totalSEPCost(String totalSEPCost) {
    this.totalSEPCost = totalSEPCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return totalSEPCost
   */
  @javax.annotation.Nonnull
  public String getTotalSEPCost() {
    return totalSEPCost;
  }

  public void setTotalSEPCost(String totalSEPCost) {
    this.totalSEPCost = totalSEPCost;
  }


  public Crs1CaseInformation totalStatePenalty(String totalStatePenalty) {
    this.totalStatePenalty = totalStatePenalty;
    return this;
  }

  /**
   * The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
   * @return totalStatePenalty
   */
  @javax.annotation.Nonnull
  public String getTotalStatePenalty() {
    return totalStatePenalty;
  }

  public void setTotalStatePenalty(String totalStatePenalty) {
    this.totalStatePenalty = totalStatePenalty;
  }


  public Crs1CaseInformation violations(String violations) {
    this.violations = violations;
    return this;
  }

  /**
   * A compilation of all Case Violation Descriptions related to the case.
   * @return violations
   */
  @javax.annotation.Nonnull
  public String getViolations() {
    return violations;
  }

  public void setViolations(String violations) {
    this.violations = violations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1CaseInformation crs1CaseInformation = (Crs1CaseInformation) o;
    return Objects.equals(this.branch, crs1CaseInformation.branch) &&
        Objects.equals(this.caseName, crs1CaseInformation.caseName) &&
        Objects.equals(this.caseNumber, crs1CaseInformation.caseNumber) &&
        Objects.equals(this.caseStatus, crs1CaseInformation.caseStatus) &&
        Objects.equals(this.caseStatusDate, crs1CaseInformation.caseStatusDate) &&
        Objects.equals(this.caseSummary, crs1CaseInformation.caseSummary) &&
        Objects.equals(this.caseType, crs1CaseInformation.caseType) &&
        Objects.equals(this.doJDocketNumber, crs1CaseInformation.doJDocketNumber) &&
        Objects.equals(this.enforcementOutcome, crs1CaseInformation.enforcementOutcome) &&
        Objects.equals(this.enforcementType, crs1CaseInformation.enforcementType) &&
        Objects.equals(this.headquartersDivision, crs1CaseInformation.headquartersDivision) &&
        Objects.equals(this.lead, crs1CaseInformation.lead) &&
        Objects.equals(this.multiMediaCase, crs1CaseInformation.multiMediaCase) &&
        Objects.equals(this.regionalDocketNumber, crs1CaseInformation.regionalDocketNumber) &&
        Objects.equals(this.reliefSought, crs1CaseInformation.reliefSought) &&
        Objects.equals(this.resultVolDisclosure, crs1CaseInformation.resultVolDisclosure) &&
        Objects.equals(this.totalComplianceActionCost, crs1CaseInformation.totalComplianceActionCost) &&
        Objects.equals(this.totalCostRecovery, crs1CaseInformation.totalCostRecovery) &&
        Objects.equals(this.totalFederalPenalty, crs1CaseInformation.totalFederalPenalty) &&
        Objects.equals(this.totalSEPCost, crs1CaseInformation.totalSEPCost) &&
        Objects.equals(this.totalStatePenalty, crs1CaseInformation.totalStatePenalty) &&
        Objects.equals(this.violations, crs1CaseInformation.violations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, caseName, caseNumber, caseStatus, caseStatusDate, caseSummary, caseType, doJDocketNumber, enforcementOutcome, enforcementType, headquartersDivision, lead, multiMediaCase, regionalDocketNumber, reliefSought, resultVolDisclosure, totalComplianceActionCost, totalCostRecovery, totalFederalPenalty, totalSEPCost, totalStatePenalty, violations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1CaseInformation {\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    caseStatus: ").append(toIndentedString(caseStatus)).append("\n");
    sb.append("    caseStatusDate: ").append(toIndentedString(caseStatusDate)).append("\n");
    sb.append("    caseSummary: ").append(toIndentedString(caseSummary)).append("\n");
    sb.append("    caseType: ").append(toIndentedString(caseType)).append("\n");
    sb.append("    doJDocketNumber: ").append(toIndentedString(doJDocketNumber)).append("\n");
    sb.append("    enforcementOutcome: ").append(toIndentedString(enforcementOutcome)).append("\n");
    sb.append("    enforcementType: ").append(toIndentedString(enforcementType)).append("\n");
    sb.append("    headquartersDivision: ").append(toIndentedString(headquartersDivision)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    multiMediaCase: ").append(toIndentedString(multiMediaCase)).append("\n");
    sb.append("    regionalDocketNumber: ").append(toIndentedString(regionalDocketNumber)).append("\n");
    sb.append("    reliefSought: ").append(toIndentedString(reliefSought)).append("\n");
    sb.append("    resultVolDisclosure: ").append(toIndentedString(resultVolDisclosure)).append("\n");
    sb.append("    totalComplianceActionCost: ").append(toIndentedString(totalComplianceActionCost)).append("\n");
    sb.append("    totalCostRecovery: ").append(toIndentedString(totalCostRecovery)).append("\n");
    sb.append("    totalFederalPenalty: ").append(toIndentedString(totalFederalPenalty)).append("\n");
    sb.append("    totalSEPCost: ").append(toIndentedString(totalSEPCost)).append("\n");
    sb.append("    totalStatePenalty: ").append(toIndentedString(totalStatePenalty)).append("\n");
    sb.append("    violations: ").append(toIndentedString(violations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Branch");
    openapiFields.add("CaseName");
    openapiFields.add("CaseNumber");
    openapiFields.add("CaseStatus");
    openapiFields.add("CaseStatusDate");
    openapiFields.add("CaseSummary");
    openapiFields.add("CaseType");
    openapiFields.add("DOJDocketNumber");
    openapiFields.add("EnforcementOutcome");
    openapiFields.add("EnforcementType");
    openapiFields.add("HeadquartersDivision");
    openapiFields.add("Lead");
    openapiFields.add("MultiMediaCase");
    openapiFields.add("RegionalDocketNumber");
    openapiFields.add("ReliefSought");
    openapiFields.add("ResultVolDisclosure");
    openapiFields.add("TotalComplianceActionCost");
    openapiFields.add("TotalCostRecovery");
    openapiFields.add("TotalFederalPenalty");
    openapiFields.add("TotalSEPCost");
    openapiFields.add("TotalStatePenalty");
    openapiFields.add("Violations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Branch");
    openapiRequiredFields.add("CaseName");
    openapiRequiredFields.add("CaseNumber");
    openapiRequiredFields.add("CaseStatus");
    openapiRequiredFields.add("CaseStatusDate");
    openapiRequiredFields.add("CaseSummary");
    openapiRequiredFields.add("CaseType");
    openapiRequiredFields.add("DOJDocketNumber");
    openapiRequiredFields.add("EnforcementOutcome");
    openapiRequiredFields.add("EnforcementType");
    openapiRequiredFields.add("HeadquartersDivision");
    openapiRequiredFields.add("Lead");
    openapiRequiredFields.add("MultiMediaCase");
    openapiRequiredFields.add("RegionalDocketNumber");
    openapiRequiredFields.add("ReliefSought");
    openapiRequiredFields.add("ResultVolDisclosure");
    openapiRequiredFields.add("TotalComplianceActionCost");
    openapiRequiredFields.add("TotalCostRecovery");
    openapiRequiredFields.add("TotalFederalPenalty");
    openapiRequiredFields.add("TotalSEPCost");
    openapiRequiredFields.add("TotalStatePenalty");
    openapiRequiredFields.add("Violations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1CaseInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1CaseInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1CaseInformation is not found in the empty JSON string", Crs1CaseInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1CaseInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1CaseInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1CaseInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Branch").toString()));
      }
      if (!jsonObj.get("CaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseName").toString()));
      }
      if (!jsonObj.get("CaseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseNumber").toString()));
      }
      if (!jsonObj.get("CaseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseStatus").toString()));
      }
      if (!jsonObj.get("CaseStatusDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseStatusDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseStatusDate").toString()));
      }
      if (!jsonObj.get("CaseSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseSummary").toString()));
      }
      if (!jsonObj.get("CaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CaseType").toString()));
      }
      if (!jsonObj.get("DOJDocketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOJDocketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOJDocketNumber").toString()));
      }
      if (!jsonObj.get("EnforcementOutcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementOutcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementOutcome").toString()));
      }
      if (!jsonObj.get("EnforcementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementType").toString()));
      }
      if (!jsonObj.get("HeadquartersDivision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HeadquartersDivision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HeadquartersDivision").toString()));
      }
      if (!jsonObj.get("Lead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lead").toString()));
      }
      if (!jsonObj.get("MultiMediaCase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MultiMediaCase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MultiMediaCase").toString()));
      }
      if (!jsonObj.get("RegionalDocketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionalDocketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionalDocketNumber").toString()));
      }
      if (!jsonObj.get("ReliefSought").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReliefSought` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReliefSought").toString()));
      }
      if (!jsonObj.get("ResultVolDisclosure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultVolDisclosure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultVolDisclosure").toString()));
      }
      if (!jsonObj.get("TotalComplianceActionCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalComplianceActionCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalComplianceActionCost").toString()));
      }
      if (!jsonObj.get("TotalCostRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalCostRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalCostRecovery").toString()));
      }
      if (!jsonObj.get("TotalFederalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalFederalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalFederalPenalty").toString()));
      }
      if (!jsonObj.get("TotalSEPCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalSEPCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalSEPCost").toString()));
      }
      if (!jsonObj.get("TotalStatePenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalStatePenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalStatePenalty").toString()));
      }
      if (!jsonObj.get("Violations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Violations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Violations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1CaseInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1CaseInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1CaseInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1CaseInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1CaseInformation>() {
           @Override
           public void write(JsonWriter out, Crs1CaseInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1CaseInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1CaseInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1CaseInformation
   * @throws IOException if the JSON string is invalid with respect to Crs1CaseInformation
   */
  public static Crs1CaseInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1CaseInformation.class);
  }

  /**
   * Convert an instance of Crs1CaseInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

