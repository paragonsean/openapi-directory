/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data container providing locational information for each case.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs0MapData {
  public static final String SERIALIZED_NAME_I_C_O_N = "ICON";
  @SerializedName(SERIALIZED_NAME_I_C_O_N)
  private String ICON;

  public static final String SERIALIZED_NAME_L_A_T = "LAT";
  @SerializedName(SERIALIZED_NAME_L_A_T)
  private String LAT;

  public static final String SERIALIZED_NAME_L_O_N = "LON";
  @SerializedName(SERIALIZED_NAME_L_O_N)
  private String LON;

  public static final String SERIALIZED_NAME_N_A_M_E = "NAME";
  @SerializedName(SERIALIZED_NAME_N_A_M_E)
  private String NAME;

  public static final String SERIALIZED_NAME_P_U_V = "PUV";
  @SerializedName(SERIALIZED_NAME_P_U_V)
  private String PUV;

  public static final String SERIALIZED_NAME_T_Y_P_E = "TYPE";
  @SerializedName(SERIALIZED_NAME_T_Y_P_E)
  private String TYPE;

  public static final String SERIALIZED_NAME_V_A_L_U_E = "VALUE";
  @SerializedName(SERIALIZED_NAME_V_A_L_U_E)
  private String VALUE;

  public Crs0MapData() {
  }

  public Crs0MapData ICON(String ICON) {
    this.ICON = ICON;
    return this;
  }

  /**
   * Name of each individual icon file within the URL base
   * @return ICON
   */
  @javax.annotation.Nonnull
  public String getICON() {
    return ICON;
  }

  public void setICON(String ICON) {
    this.ICON = ICON;
  }


  public Crs0MapData LAT(String LAT) {
    this.LAT = LAT;
    return this;
  }

  /**
   * The latitude of the facility in degrees, to four decimal places
   * @return LAT
   */
  @javax.annotation.Nonnull
  public String getLAT() {
    return LAT;
  }

  public void setLAT(String LAT) {
    this.LAT = LAT;
  }


  public Crs0MapData LON(String LON) {
    this.LON = LON;
    return this;
  }

  /**
   * The longitude of the facility in degrees, to four decimal places
   * @return LON
   */
  @javax.annotation.Nonnull
  public String getLON() {
    return LON;
  }

  public void setLON(String LON) {
    this.LON = LON;
  }


  public Crs0MapData NAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  /**
   * For DFR, this is the Facility name. The name corresponds to the TYPE value
   * @return NAME
   */
  @javax.annotation.Nonnull
  public String getNAME() {
    return NAME;
  }

  public void setNAME(String NAME) {
    this.NAME = NAME;
  }


  public Crs0MapData PUV(String PUV) {
    this.PUV = PUV;
    return this;
  }

  /**
   * Pop up value. Combine with PopUpBaseURL to give the popup for the facility
   * @return PUV
   */
  @javax.annotation.Nonnull
  public String getPUV() {
    return PUV;
  }

  public void setPUV(String PUV) {
    this.PUV = PUV;
  }


  public Crs0MapData TYPE(String TYPE) {
    this.TYPE = TYPE;
    return this;
  }

  /**
   * For DFR, this is always facility
   * @return TYPE
   */
  @javax.annotation.Nonnull
  public String getTYPE() {
    return TYPE;
  }

  public void setTYPE(String TYPE) {
    this.TYPE = TYPE;
  }


  public Crs0MapData VALUE(String VALUE) {
    this.VALUE = VALUE;
    return this;
  }

  /**
   * Get VALUE
   * @return VALUE
   */
  @javax.annotation.Nonnull
  public String getVALUE() {
    return VALUE;
  }

  public void setVALUE(String VALUE) {
    this.VALUE = VALUE;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs0MapData crs0MapData = (Crs0MapData) o;
    return Objects.equals(this.ICON, crs0MapData.ICON) &&
        Objects.equals(this.LAT, crs0MapData.LAT) &&
        Objects.equals(this.LON, crs0MapData.LON) &&
        Objects.equals(this.NAME, crs0MapData.NAME) &&
        Objects.equals(this.PUV, crs0MapData.PUV) &&
        Objects.equals(this.TYPE, crs0MapData.TYPE) &&
        Objects.equals(this.VALUE, crs0MapData.VALUE);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ICON, LAT, LON, NAME, PUV, TYPE, VALUE);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs0MapData {\n");
    sb.append("    ICON: ").append(toIndentedString(ICON)).append("\n");
    sb.append("    LAT: ").append(toIndentedString(LAT)).append("\n");
    sb.append("    LON: ").append(toIndentedString(LON)).append("\n");
    sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
    sb.append("    PUV: ").append(toIndentedString(PUV)).append("\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("    VALUE: ").append(toIndentedString(VALUE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ICON");
    openapiFields.add("LAT");
    openapiFields.add("LON");
    openapiFields.add("NAME");
    openapiFields.add("PUV");
    openapiFields.add("TYPE");
    openapiFields.add("VALUE");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ICON");
    openapiRequiredFields.add("LAT");
    openapiRequiredFields.add("LON");
    openapiRequiredFields.add("NAME");
    openapiRequiredFields.add("PUV");
    openapiRequiredFields.add("TYPE");
    openapiRequiredFields.add("VALUE");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs0MapData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs0MapData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs0MapData is not found in the empty JSON string", Crs0MapData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs0MapData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs0MapData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs0MapData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ICON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICON").toString()));
      }
      if (!jsonObj.get("LAT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LAT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LAT").toString()));
      }
      if (!jsonObj.get("LON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LON").toString()));
      }
      if (!jsonObj.get("NAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAME").toString()));
      }
      if (!jsonObj.get("PUV").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PUV` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PUV").toString()));
      }
      if (!jsonObj.get("TYPE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TYPE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TYPE").toString()));
      }
      if (!jsonObj.get("VALUE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VALUE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VALUE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs0MapData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs0MapData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs0MapData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs0MapData.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs0MapData>() {
           @Override
           public void write(JsonWriter out, Crs0MapData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs0MapData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs0MapData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs0MapData
   * @throws IOException if the JSON string is invalid with respect to Crs0MapData
   */
  public static Crs0MapData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs0MapData.class);
  }

  /**
   * Convert an instance of Crs0MapData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

