/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Federal Penalty Assessed Amount Filter.  Provide one of the following keywords to restrict results. - ANY &#x3D; cases with any penalty amount. - LE5000 &#x3D; cases with penalty amount less than or equal to $5,000. - GT5000 &#x3D; cases with penalty amount more than $5,000. - GT50000 &#x3D; cases with penalty amount more than $50,000. - GT100000 &#x3D; cases with penalty amount more than $100,000. - GT500000 &#x3D; cases with penalty amount more than $500,000. - GT1000000 &#x3D; cases with penalty amount more than $1,000,000. - GT2500000 &#x3D; cases with penalty amount more than $2,500,000.
 */
@JsonAdapter(FormDataFPFedPenalty.Adapter.class)
public enum FormDataFPFedPenalty {
  
  ANY("ANY"),
  
  LE5000("LE5000"),
  
  GT5000("GT5000"),
  
  GT50000("GT50000"),
  
  GT100000("GT100000"),
  
  GT500000("GT500000"),
  
  GT1000000("GT1000000"),
  
  GT2500000("GT2500000");

  private String value;

  FormDataFPFedPenalty(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FormDataFPFedPenalty fromValue(String value) {
    for (FormDataFPFedPenalty b : FormDataFPFedPenalty.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FormDataFPFedPenalty> {
    @Override
    public void write(final JsonWriter jsonWriter, final FormDataFPFedPenalty enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FormDataFPFedPenalty read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FormDataFPFedPenalty.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FormDataFPFedPenalty.fromValue(value);
  }
}

