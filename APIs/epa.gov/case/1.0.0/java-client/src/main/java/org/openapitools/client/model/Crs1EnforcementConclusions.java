/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Crs1ComplianceSchedules;
import org.openapitools.client.model.Crs1ComplyingActions;
import org.openapitools.client.model.Crs1FinalOrderStatuses;
import org.openapitools.client.model.Crs1PollutantReductions;
import org.openapitools.client.model.Crs1SupplementalEnvironmentalProjects;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section contains information about the conclusion(s) of the civil enforcement case, where it resulted in an order, consent decree, or other enforceable settlement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1EnforcementConclusions {
  public static final String SERIALIZED_NAME_ACTUAL_TERMINATION_DATE = "ActualTerminationDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TERMINATION_DATE)
  private String actualTerminationDate;

  public static final String SERIALIZED_NAME_COMPLIANCE_ACTION_COST = "ComplianceActionCost";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_ACTION_COST)
  private String complianceActionCost;

  public static final String SERIALIZED_NAME_COMPLIANCE_SCHEDULES = "ComplianceSchedules";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_SCHEDULES)
  private List<Crs1ComplianceSchedules> complianceSchedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLYING_ACTIONS = "ComplyingActions";
  @SerializedName(SERIALIZED_NAME_COMPLYING_ACTIONS)
  private List<Crs1ComplyingActions> complyingActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COST_RECOVERY = "CostRecovery";
  @SerializedName(SERIALIZED_NAME_COST_RECOVERY)
  private String costRecovery;

  public static final String SERIALIZED_NAME_ENFORCEMENT_ACTION_CLOSED_DATE = "EnforcementActionClosedDate";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_ACTION_CLOSED_DATE)
  private String enforcementActionClosedDate;

  public static final String SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_ID = "EnforcementConclusionId";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_ID)
  private String enforcementConclusionId;

  public static final String SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_NAME = "EnforcementConclusionName";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_NAME)
  private String enforcementConclusionName;

  public static final String SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_TYPE = "EnforcementConclusionType";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_CONCLUSION_TYPE)
  private String enforcementConclusionType;

  public static final String SERIALIZED_NAME_FACILITIES_IN_SETTLEMENT = "FacilitiesInSettlement";
  @SerializedName(SERIALIZED_NAME_FACILITIES_IN_SETTLEMENT)
  private String facilitiesInSettlement;

  public static final String SERIALIZED_NAME_FEDERAL_PENALTY = "FederalPenalty";
  @SerializedName(SERIALIZED_NAME_FEDERAL_PENALTY)
  private String federalPenalty;

  public static final String SERIALIZED_NAME_FINAL_ORDER_STATUSES = "FinalOrderStatuses";
  @SerializedName(SERIALIZED_NAME_FINAL_ORDER_STATUSES)
  private List<Crs1FinalOrderStatuses> finalOrderStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLLUTANT_REDUCTIONS = "PollutantReductions";
  @SerializedName(SERIALIZED_NAME_POLLUTANT_REDUCTIONS)
  private List<Crs1PollutantReductions> pollutantReductions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SE_P_COST = "SEPCost";
  @SerializedName(SERIALIZED_NAME_SE_P_COST)
  private String sePCost;

  public static final String SERIALIZED_NAME_SETTLEMENT_ENTERED_DATE = "SettlementEnteredDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ENTERED_DATE)
  private String settlementEnteredDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_LODGED_DATE = "SettlementLodgedDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_LODGED_DATE)
  private String settlementLodgedDate;

  public static final String SERIALIZED_NAME_STATE_PENALTY = "StatePenalty";
  @SerializedName(SERIALIZED_NAME_STATE_PENALTY)
  private String statePenalty;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_ENVIRONMENTAL_PROJECTS = "SupplementalEnvironmentalProjects";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_ENVIRONMENTAL_PROJECTS)
  private List<Crs1SupplementalEnvironmentalProjects> supplementalEnvironmentalProjects = new ArrayList<>();

  public Crs1EnforcementConclusions() {
  }

  public Crs1EnforcementConclusions actualTerminationDate(String actualTerminationDate) {
    this.actualTerminationDate = actualTerminationDate;
    return this;
  }

  /**
   * The date on which the Final Order was terminated.
   * @return actualTerminationDate
   */
  @javax.annotation.Nonnull
  public String getActualTerminationDate() {
    return actualTerminationDate;
  }

  public void setActualTerminationDate(String actualTerminationDate) {
    this.actualTerminationDate = actualTerminationDate;
  }


  public Crs1EnforcementConclusions complianceActionCost(String complianceActionCost) {
    this.complianceActionCost = complianceActionCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return complianceActionCost
   */
  @javax.annotation.Nonnull
  public String getComplianceActionCost() {
    return complianceActionCost;
  }

  public void setComplianceActionCost(String complianceActionCost) {
    this.complianceActionCost = complianceActionCost;
  }


  public Crs1EnforcementConclusions complianceSchedules(List<Crs1ComplianceSchedules> complianceSchedules) {
    this.complianceSchedules = complianceSchedules;
    return this;
  }

  public Crs1EnforcementConclusions addComplianceSchedulesItem(Crs1ComplianceSchedules complianceSchedulesItem) {
    if (this.complianceSchedules == null) {
      this.complianceSchedules = new ArrayList<>();
    }
    this.complianceSchedules.add(complianceSchedulesItem);
    return this;
  }

  /**
   * Get complianceSchedules
   * @return complianceSchedules
   */
  @javax.annotation.Nonnull
  public List<Crs1ComplianceSchedules> getComplianceSchedules() {
    return complianceSchedules;
  }

  public void setComplianceSchedules(List<Crs1ComplianceSchedules> complianceSchedules) {
    this.complianceSchedules = complianceSchedules;
  }


  public Crs1EnforcementConclusions complyingActions(List<Crs1ComplyingActions> complyingActions) {
    this.complyingActions = complyingActions;
    return this;
  }

  public Crs1EnforcementConclusions addComplyingActionsItem(Crs1ComplyingActions complyingActionsItem) {
    if (this.complyingActions == null) {
      this.complyingActions = new ArrayList<>();
    }
    this.complyingActions.add(complyingActionsItem);
    return this;
  }

  /**
   * Get complyingActions
   * @return complyingActions
   */
  @javax.annotation.Nonnull
  public List<Crs1ComplyingActions> getComplyingActions() {
    return complyingActions;
  }

  public void setComplyingActions(List<Crs1ComplyingActions> complyingActions) {
    this.complyingActions = complyingActions;
  }


  public Crs1EnforcementConclusions costRecovery(String costRecovery) {
    this.costRecovery = costRecovery;
    return this;
  }

  /**
   * For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
   * @return costRecovery
   */
  @javax.annotation.Nonnull
  public String getCostRecovery() {
    return costRecovery;
  }

  public void setCostRecovery(String costRecovery) {
    this.costRecovery = costRecovery;
  }


  public Crs1EnforcementConclusions enforcementActionClosedDate(String enforcementActionClosedDate) {
    this.enforcementActionClosedDate = enforcementActionClosedDate;
    return this;
  }

  /**
   * The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
   * @return enforcementActionClosedDate
   */
  @javax.annotation.Nonnull
  public String getEnforcementActionClosedDate() {
    return enforcementActionClosedDate;
  }

  public void setEnforcementActionClosedDate(String enforcementActionClosedDate) {
    this.enforcementActionClosedDate = enforcementActionClosedDate;
  }


  public Crs1EnforcementConclusions enforcementConclusionId(String enforcementConclusionId) {
    this.enforcementConclusionId = enforcementConclusionId;
    return this;
  }

  /**
   * The system-generated unique identifier of the Final Order to which the Compliance Action belongs.
   * @return enforcementConclusionId
   */
  @javax.annotation.Nonnull
  public String getEnforcementConclusionId() {
    return enforcementConclusionId;
  }

  public void setEnforcementConclusionId(String enforcementConclusionId) {
    this.enforcementConclusionId = enforcementConclusionId;
  }


  public Crs1EnforcementConclusions enforcementConclusionName(String enforcementConclusionName) {
    this.enforcementConclusionName = enforcementConclusionName;
    return this;
  }

  /**
   * The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.
   * @return enforcementConclusionName
   */
  @javax.annotation.Nonnull
  public String getEnforcementConclusionName() {
    return enforcementConclusionName;
  }

  public void setEnforcementConclusionName(String enforcementConclusionName) {
    this.enforcementConclusionName = enforcementConclusionName;
  }


  public Crs1EnforcementConclusions enforcementConclusionType(String enforcementConclusionType) {
    this.enforcementConclusionType = enforcementConclusionType;
    return this;
  }

  /**
   * A description of the enforcement instrument used by EPA to settle the case.
   * @return enforcementConclusionType
   */
  @javax.annotation.Nonnull
  public String getEnforcementConclusionType() {
    return enforcementConclusionType;
  }

  public void setEnforcementConclusionType(String enforcementConclusionType) {
    this.enforcementConclusionType = enforcementConclusionType;
  }


  public Crs1EnforcementConclusions facilitiesInSettlement(String facilitiesInSettlement) {
    this.facilitiesInSettlement = facilitiesInSettlement;
    return this;
  }

  /**
   * The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.
   * @return facilitiesInSettlement
   */
  @javax.annotation.Nonnull
  public String getFacilitiesInSettlement() {
    return facilitiesInSettlement;
  }

  public void setFacilitiesInSettlement(String facilitiesInSettlement) {
    this.facilitiesInSettlement = facilitiesInSettlement;
  }


  public Crs1EnforcementConclusions federalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
    return this;
  }

  /**
   * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
   * @return federalPenalty
   */
  @javax.annotation.Nonnull
  public String getFederalPenalty() {
    return federalPenalty;
  }

  public void setFederalPenalty(String federalPenalty) {
    this.federalPenalty = federalPenalty;
  }


  public Crs1EnforcementConclusions finalOrderStatuses(List<Crs1FinalOrderStatuses> finalOrderStatuses) {
    this.finalOrderStatuses = finalOrderStatuses;
    return this;
  }

  public Crs1EnforcementConclusions addFinalOrderStatusesItem(Crs1FinalOrderStatuses finalOrderStatusesItem) {
    if (this.finalOrderStatuses == null) {
      this.finalOrderStatuses = new ArrayList<>();
    }
    this.finalOrderStatuses.add(finalOrderStatusesItem);
    return this;
  }

  /**
   * Get finalOrderStatuses
   * @return finalOrderStatuses
   */
  @javax.annotation.Nonnull
  public List<Crs1FinalOrderStatuses> getFinalOrderStatuses() {
    return finalOrderStatuses;
  }

  public void setFinalOrderStatuses(List<Crs1FinalOrderStatuses> finalOrderStatuses) {
    this.finalOrderStatuses = finalOrderStatuses;
  }


  public Crs1EnforcementConclusions pollutantReductions(List<Crs1PollutantReductions> pollutantReductions) {
    this.pollutantReductions = pollutantReductions;
    return this;
  }

  public Crs1EnforcementConclusions addPollutantReductionsItem(Crs1PollutantReductions pollutantReductionsItem) {
    if (this.pollutantReductions == null) {
      this.pollutantReductions = new ArrayList<>();
    }
    this.pollutantReductions.add(pollutantReductionsItem);
    return this;
  }

  /**
   * Get pollutantReductions
   * @return pollutantReductions
   */
  @javax.annotation.Nonnull
  public List<Crs1PollutantReductions> getPollutantReductions() {
    return pollutantReductions;
  }

  public void setPollutantReductions(List<Crs1PollutantReductions> pollutantReductions) {
    this.pollutantReductions = pollutantReductions;
  }


  public Crs1EnforcementConclusions sePCost(String sePCost) {
    this.sePCost = sePCost;
    return this;
  }

  /**
   * The total value of all SEPs for all settlements at the enforcement case.
   * @return sePCost
   */
  @javax.annotation.Nonnull
  public String getSePCost() {
    return sePCost;
  }

  public void setSePCost(String sePCost) {
    this.sePCost = sePCost;
  }


  public Crs1EnforcementConclusions settlementEnteredDate(String settlementEnteredDate) {
    this.settlementEnteredDate = settlementEnteredDate;
    return this;
  }

  /**
   * The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.
   * @return settlementEnteredDate
   */
  @javax.annotation.Nonnull
  public String getSettlementEnteredDate() {
    return settlementEnteredDate;
  }

  public void setSettlementEnteredDate(String settlementEnteredDate) {
    this.settlementEnteredDate = settlementEnteredDate;
  }


  public Crs1EnforcementConclusions settlementLodgedDate(String settlementLodgedDate) {
    this.settlementLodgedDate = settlementLodgedDate;
    return this;
  }

  /**
   * The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).
   * @return settlementLodgedDate
   */
  @javax.annotation.Nonnull
  public String getSettlementLodgedDate() {
    return settlementLodgedDate;
  }

  public void setSettlementLodgedDate(String settlementLodgedDate) {
    this.settlementLodgedDate = settlementLodgedDate;
  }


  public Crs1EnforcementConclusions statePenalty(String statePenalty) {
    this.statePenalty = statePenalty;
    return this;
  }

  /**
   * The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
   * @return statePenalty
   */
  @javax.annotation.Nonnull
  public String getStatePenalty() {
    return statePenalty;
  }

  public void setStatePenalty(String statePenalty) {
    this.statePenalty = statePenalty;
  }


  public Crs1EnforcementConclusions supplementalEnvironmentalProjects(List<Crs1SupplementalEnvironmentalProjects> supplementalEnvironmentalProjects) {
    this.supplementalEnvironmentalProjects = supplementalEnvironmentalProjects;
    return this;
  }

  public Crs1EnforcementConclusions addSupplementalEnvironmentalProjectsItem(Crs1SupplementalEnvironmentalProjects supplementalEnvironmentalProjectsItem) {
    if (this.supplementalEnvironmentalProjects == null) {
      this.supplementalEnvironmentalProjects = new ArrayList<>();
    }
    this.supplementalEnvironmentalProjects.add(supplementalEnvironmentalProjectsItem);
    return this;
  }

  /**
   * Get supplementalEnvironmentalProjects
   * @return supplementalEnvironmentalProjects
   */
  @javax.annotation.Nonnull
  public List<Crs1SupplementalEnvironmentalProjects> getSupplementalEnvironmentalProjects() {
    return supplementalEnvironmentalProjects;
  }

  public void setSupplementalEnvironmentalProjects(List<Crs1SupplementalEnvironmentalProjects> supplementalEnvironmentalProjects) {
    this.supplementalEnvironmentalProjects = supplementalEnvironmentalProjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1EnforcementConclusions crs1EnforcementConclusions = (Crs1EnforcementConclusions) o;
    return Objects.equals(this.actualTerminationDate, crs1EnforcementConclusions.actualTerminationDate) &&
        Objects.equals(this.complianceActionCost, crs1EnforcementConclusions.complianceActionCost) &&
        Objects.equals(this.complianceSchedules, crs1EnforcementConclusions.complianceSchedules) &&
        Objects.equals(this.complyingActions, crs1EnforcementConclusions.complyingActions) &&
        Objects.equals(this.costRecovery, crs1EnforcementConclusions.costRecovery) &&
        Objects.equals(this.enforcementActionClosedDate, crs1EnforcementConclusions.enforcementActionClosedDate) &&
        Objects.equals(this.enforcementConclusionId, crs1EnforcementConclusions.enforcementConclusionId) &&
        Objects.equals(this.enforcementConclusionName, crs1EnforcementConclusions.enforcementConclusionName) &&
        Objects.equals(this.enforcementConclusionType, crs1EnforcementConclusions.enforcementConclusionType) &&
        Objects.equals(this.facilitiesInSettlement, crs1EnforcementConclusions.facilitiesInSettlement) &&
        Objects.equals(this.federalPenalty, crs1EnforcementConclusions.federalPenalty) &&
        Objects.equals(this.finalOrderStatuses, crs1EnforcementConclusions.finalOrderStatuses) &&
        Objects.equals(this.pollutantReductions, crs1EnforcementConclusions.pollutantReductions) &&
        Objects.equals(this.sePCost, crs1EnforcementConclusions.sePCost) &&
        Objects.equals(this.settlementEnteredDate, crs1EnforcementConclusions.settlementEnteredDate) &&
        Objects.equals(this.settlementLodgedDate, crs1EnforcementConclusions.settlementLodgedDate) &&
        Objects.equals(this.statePenalty, crs1EnforcementConclusions.statePenalty) &&
        Objects.equals(this.supplementalEnvironmentalProjects, crs1EnforcementConclusions.supplementalEnvironmentalProjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualTerminationDate, complianceActionCost, complianceSchedules, complyingActions, costRecovery, enforcementActionClosedDate, enforcementConclusionId, enforcementConclusionName, enforcementConclusionType, facilitiesInSettlement, federalPenalty, finalOrderStatuses, pollutantReductions, sePCost, settlementEnteredDate, settlementLodgedDate, statePenalty, supplementalEnvironmentalProjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1EnforcementConclusions {\n");
    sb.append("    actualTerminationDate: ").append(toIndentedString(actualTerminationDate)).append("\n");
    sb.append("    complianceActionCost: ").append(toIndentedString(complianceActionCost)).append("\n");
    sb.append("    complianceSchedules: ").append(toIndentedString(complianceSchedules)).append("\n");
    sb.append("    complyingActions: ").append(toIndentedString(complyingActions)).append("\n");
    sb.append("    costRecovery: ").append(toIndentedString(costRecovery)).append("\n");
    sb.append("    enforcementActionClosedDate: ").append(toIndentedString(enforcementActionClosedDate)).append("\n");
    sb.append("    enforcementConclusionId: ").append(toIndentedString(enforcementConclusionId)).append("\n");
    sb.append("    enforcementConclusionName: ").append(toIndentedString(enforcementConclusionName)).append("\n");
    sb.append("    enforcementConclusionType: ").append(toIndentedString(enforcementConclusionType)).append("\n");
    sb.append("    facilitiesInSettlement: ").append(toIndentedString(facilitiesInSettlement)).append("\n");
    sb.append("    federalPenalty: ").append(toIndentedString(federalPenalty)).append("\n");
    sb.append("    finalOrderStatuses: ").append(toIndentedString(finalOrderStatuses)).append("\n");
    sb.append("    pollutantReductions: ").append(toIndentedString(pollutantReductions)).append("\n");
    sb.append("    sePCost: ").append(toIndentedString(sePCost)).append("\n");
    sb.append("    settlementEnteredDate: ").append(toIndentedString(settlementEnteredDate)).append("\n");
    sb.append("    settlementLodgedDate: ").append(toIndentedString(settlementLodgedDate)).append("\n");
    sb.append("    statePenalty: ").append(toIndentedString(statePenalty)).append("\n");
    sb.append("    supplementalEnvironmentalProjects: ").append(toIndentedString(supplementalEnvironmentalProjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActualTerminationDate");
    openapiFields.add("ComplianceActionCost");
    openapiFields.add("ComplianceSchedules");
    openapiFields.add("ComplyingActions");
    openapiFields.add("CostRecovery");
    openapiFields.add("EnforcementActionClosedDate");
    openapiFields.add("EnforcementConclusionId");
    openapiFields.add("EnforcementConclusionName");
    openapiFields.add("EnforcementConclusionType");
    openapiFields.add("FacilitiesInSettlement");
    openapiFields.add("FederalPenalty");
    openapiFields.add("FinalOrderStatuses");
    openapiFields.add("PollutantReductions");
    openapiFields.add("SEPCost");
    openapiFields.add("SettlementEnteredDate");
    openapiFields.add("SettlementLodgedDate");
    openapiFields.add("StatePenalty");
    openapiFields.add("SupplementalEnvironmentalProjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActualTerminationDate");
    openapiRequiredFields.add("ComplianceActionCost");
    openapiRequiredFields.add("ComplianceSchedules");
    openapiRequiredFields.add("ComplyingActions");
    openapiRequiredFields.add("CostRecovery");
    openapiRequiredFields.add("EnforcementActionClosedDate");
    openapiRequiredFields.add("EnforcementConclusionId");
    openapiRequiredFields.add("EnforcementConclusionName");
    openapiRequiredFields.add("EnforcementConclusionType");
    openapiRequiredFields.add("FacilitiesInSettlement");
    openapiRequiredFields.add("FederalPenalty");
    openapiRequiredFields.add("FinalOrderStatuses");
    openapiRequiredFields.add("PollutantReductions");
    openapiRequiredFields.add("SEPCost");
    openapiRequiredFields.add("SettlementEnteredDate");
    openapiRequiredFields.add("SettlementLodgedDate");
    openapiRequiredFields.add("StatePenalty");
    openapiRequiredFields.add("SupplementalEnvironmentalProjects");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1EnforcementConclusions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1EnforcementConclusions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1EnforcementConclusions is not found in the empty JSON string", Crs1EnforcementConclusions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1EnforcementConclusions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1EnforcementConclusions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1EnforcementConclusions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ActualTerminationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActualTerminationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActualTerminationDate").toString()));
      }
      if (!jsonObj.get("ComplianceActionCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComplianceActionCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComplianceActionCost").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("ComplianceSchedules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComplianceSchedules` to be an array in the JSON string but got `%s`", jsonObj.get("ComplianceSchedules").toString()));
      }

      JsonArray jsonArraycomplianceSchedules = jsonObj.getAsJsonArray("ComplianceSchedules");
      // validate the required field `ComplianceSchedules` (array)
      for (int i = 0; i < jsonArraycomplianceSchedules.size(); i++) {
        Crs1ComplianceSchedules.validateJsonElement(jsonArraycomplianceSchedules.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("ComplyingActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComplyingActions` to be an array in the JSON string but got `%s`", jsonObj.get("ComplyingActions").toString()));
      }

      JsonArray jsonArraycomplyingActions = jsonObj.getAsJsonArray("ComplyingActions");
      // validate the required field `ComplyingActions` (array)
      for (int i = 0; i < jsonArraycomplyingActions.size(); i++) {
        Crs1ComplyingActions.validateJsonElement(jsonArraycomplyingActions.get(i));
      };
      if (!jsonObj.get("CostRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CostRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CostRecovery").toString()));
      }
      if (!jsonObj.get("EnforcementActionClosedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementActionClosedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementActionClosedDate").toString()));
      }
      if (!jsonObj.get("EnforcementConclusionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementConclusionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementConclusionId").toString()));
      }
      if (!jsonObj.get("EnforcementConclusionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementConclusionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementConclusionName").toString()));
      }
      if (!jsonObj.get("EnforcementConclusionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnforcementConclusionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnforcementConclusionType").toString()));
      }
      if (!jsonObj.get("FacilitiesInSettlement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FacilitiesInSettlement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FacilitiesInSettlement").toString()));
      }
      if (!jsonObj.get("FederalPenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalPenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalPenalty").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("FinalOrderStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FinalOrderStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("FinalOrderStatuses").toString()));
      }

      JsonArray jsonArrayfinalOrderStatuses = jsonObj.getAsJsonArray("FinalOrderStatuses");
      // validate the required field `FinalOrderStatuses` (array)
      for (int i = 0; i < jsonArrayfinalOrderStatuses.size(); i++) {
        Crs1FinalOrderStatuses.validateJsonElement(jsonArrayfinalOrderStatuses.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("PollutantReductions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PollutantReductions` to be an array in the JSON string but got `%s`", jsonObj.get("PollutantReductions").toString()));
      }

      JsonArray jsonArraypollutantReductions = jsonObj.getAsJsonArray("PollutantReductions");
      // validate the required field `PollutantReductions` (array)
      for (int i = 0; i < jsonArraypollutantReductions.size(); i++) {
        Crs1PollutantReductions.validateJsonElement(jsonArraypollutantReductions.get(i));
      };
      if (!jsonObj.get("SEPCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPCost").toString()));
      }
      if (!jsonObj.get("SettlementEnteredDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementEnteredDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementEnteredDate").toString()));
      }
      if (!jsonObj.get("SettlementLodgedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementLodgedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementLodgedDate").toString()));
      }
      if (!jsonObj.get("StatePenalty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatePenalty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatePenalty").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("SupplementalEnvironmentalProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupplementalEnvironmentalProjects` to be an array in the JSON string but got `%s`", jsonObj.get("SupplementalEnvironmentalProjects").toString()));
      }

      JsonArray jsonArraysupplementalEnvironmentalProjects = jsonObj.getAsJsonArray("SupplementalEnvironmentalProjects");
      // validate the required field `SupplementalEnvironmentalProjects` (array)
      for (int i = 0; i < jsonArraysupplementalEnvironmentalProjects.size(); i++) {
        Crs1SupplementalEnvironmentalProjects.validateJsonElement(jsonArraysupplementalEnvironmentalProjects.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1EnforcementConclusions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1EnforcementConclusions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1EnforcementConclusions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1EnforcementConclusions.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1EnforcementConclusions>() {
           @Override
           public void write(JsonWriter out, Crs1EnforcementConclusions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1EnforcementConclusions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1EnforcementConclusions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1EnforcementConclusions
   * @throws IOException if the JSON string is invalid with respect to Crs1EnforcementConclusions
   */
  public static Crs1EnforcementConclusions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1EnforcementConclusions.class);
  }

  /**
   * Convert an instance of Crs1EnforcementConclusions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

