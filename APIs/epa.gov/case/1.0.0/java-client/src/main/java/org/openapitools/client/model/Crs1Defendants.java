/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This section lists each defendant&#39;s name and whether the defendant was named in the complaint and/or in the settlement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs1Defendants {
  public static final String SERIALIZED_NAME_DEFENDANT_NAME = "DefendantName";
  @SerializedName(SERIALIZED_NAME_DEFENDANT_NAME)
  private String defendantName;

  public static final String SERIALIZED_NAME_NAMED_IN_COMPLAINT = "NamedInComplaint";
  @SerializedName(SERIALIZED_NAME_NAMED_IN_COMPLAINT)
  private String namedInComplaint;

  public static final String SERIALIZED_NAME_NAMED_IN_SETTLEMENT = "NamedInSettlement";
  @SerializedName(SERIALIZED_NAME_NAMED_IN_SETTLEMENT)
  private String namedInSettlement;

  public Crs1Defendants() {
  }

  public Crs1Defendants defendantName(String defendantName) {
    this.defendantName = defendantName;
    return this;
  }

  /**
   * The name of the defendant, or respondent associated with the Enforcement Action.
   * @return defendantName
   */
  @javax.annotation.Nonnull
  public String getDefendantName() {
    return defendantName;
  }

  public void setDefendantName(String defendantName) {
    this.defendantName = defendantName;
  }


  public Crs1Defendants namedInComplaint(String namedInComplaint) {
    this.namedInComplaint = namedInComplaint;
    return this;
  }

  /**
   * A flag that indicates whether the Defendant or Respondent was named in the filed complaint.
   * @return namedInComplaint
   */
  @javax.annotation.Nonnull
  public String getNamedInComplaint() {
    return namedInComplaint;
  }

  public void setNamedInComplaint(String namedInComplaint) {
    this.namedInComplaint = namedInComplaint;
  }


  public Crs1Defendants namedInSettlement(String namedInSettlement) {
    this.namedInSettlement = namedInSettlement;
    return this;
  }

  /**
   * A flag that indicates whether the Defendant or Respondent was named in the Final Order.
   * @return namedInSettlement
   */
  @javax.annotation.Nonnull
  public String getNamedInSettlement() {
    return namedInSettlement;
  }

  public void setNamedInSettlement(String namedInSettlement) {
    this.namedInSettlement = namedInSettlement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs1Defendants crs1Defendants = (Crs1Defendants) o;
    return Objects.equals(this.defendantName, crs1Defendants.defendantName) &&
        Objects.equals(this.namedInComplaint, crs1Defendants.namedInComplaint) &&
        Objects.equals(this.namedInSettlement, crs1Defendants.namedInSettlement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defendantName, namedInComplaint, namedInSettlement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs1Defendants {\n");
    sb.append("    defendantName: ").append(toIndentedString(defendantName)).append("\n");
    sb.append("    namedInComplaint: ").append(toIndentedString(namedInComplaint)).append("\n");
    sb.append("    namedInSettlement: ").append(toIndentedString(namedInSettlement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefendantName");
    openapiFields.add("NamedInComplaint");
    openapiFields.add("NamedInSettlement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DefendantName");
    openapiRequiredFields.add("NamedInComplaint");
    openapiRequiredFields.add("NamedInSettlement");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs1Defendants
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs1Defendants.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs1Defendants is not found in the empty JSON string", Crs1Defendants.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs1Defendants.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs1Defendants` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs1Defendants.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DefendantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefendantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefendantName").toString()));
      }
      if (!jsonObj.get("NamedInComplaint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NamedInComplaint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NamedInComplaint").toString()));
      }
      if (!jsonObj.get("NamedInSettlement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NamedInSettlement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NamedInSettlement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs1Defendants.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs1Defendants' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs1Defendants> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs1Defendants.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs1Defendants>() {
           @Override
           public void write(JsonWriter out, Crs1Defendants value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs1Defendants read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs1Defendants given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs1Defendants
   * @throws IOException if the JSON string is invalid with respect to Crs1Defendants
   */
  public static Crs1Defendants fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs1Defendants.class);
  }

  /**
   * Convert an instance of Crs1Defendants to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

