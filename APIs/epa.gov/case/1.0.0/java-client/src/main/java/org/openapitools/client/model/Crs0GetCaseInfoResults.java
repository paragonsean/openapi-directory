/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Crs0Cases;
import org.openapitools.client.model.Crs0ClusterOutput;
import org.openapitools.client.model.Qp0;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:29.206417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crs0GetCaseInfoResults {
  public static final String SERIALIZED_NAME_AF_R_ROWS = "AFRRows";
  @SerializedName(SERIALIZED_NAME_AF_R_ROWS)
  private String afRRows;

  public static final String SERIALIZED_NAME_CE_R_C_L_A_ROWS = "CERCLARows";
  @SerializedName(SERIALIZED_NAME_CE_R_C_L_A_ROWS)
  private String ceRCLARows;

  public static final String SERIALIZED_NAME_CW_A_ROWS = "CWARows";
  @SerializedName(SERIALIZED_NAME_CW_A_ROWS)
  private String cwARows;

  public static final String SERIALIZED_NAME_CASES = "Cases";
  @SerializedName(SERIALIZED_NAME_CASES)
  private List<Crs0Cases> cases = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_OUTPUT = "ClusterOutput";
  @SerializedName(SERIALIZED_NAME_CLUSTER_OUTPUT)
  private Crs0ClusterOutput clusterOutput;

  public static final String SERIALIZED_NAME_CLUSTER_RECORDS = "ClusterRecords";
  @SerializedName(SERIALIZED_NAME_CLUSTER_RECORDS)
  private String clusterRecords;

  public static final String SERIALIZED_NAME_CRIMINAL_ROWS = "CriminalRows";
  @SerializedName(SERIALIZED_NAME_CRIMINAL_ROWS)
  private String criminalRows;

  public static final String SERIALIZED_NAME_EP_C_R_A_ROWS = "EPCRARows";
  @SerializedName(SERIALIZED_NAME_EP_C_R_A_ROWS)
  private String epCRARows;

  public static final String SERIALIZED_NAME_FI_F_R_A_ROWS = "FIFRARows";
  @SerializedName(SERIALIZED_NAME_FI_F_R_A_ROWS)
  private String fiFRARows;

  public static final String SERIALIZED_NAME_FED_PEN_ROWS = "FedPenRows";
  @SerializedName(SERIALIZED_NAME_FED_PEN_ROWS)
  private String fedPenRows;

  public static final String SERIALIZED_NAME_FEDERAL_ROWS = "FederalRows";
  @SerializedName(SERIALIZED_NAME_FEDERAL_ROWS)
  private String federalRows;

  public static final String SERIALIZED_NAME_JD_C_ROWS = "JDCRows";
  @SerializedName(SERIALIZED_NAME_JD_C_ROWS)
  private String jdCRows;

  public static final String SERIALIZED_NAME_MAP_LOCATIONS = "MapLocations";
  @SerializedName(SERIALIZED_NAME_MAP_LOCATIONS)
  private String mapLocations;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_QUERY_PARAMETERS = "QueryParameters";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETERS)
  private List<Qp0> queryParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_ROWS = "QueryRows";
  @SerializedName(SERIALIZED_NAME_QUERY_ROWS)
  private String queryRows;

  public static final String SERIALIZED_NAME_RC_R_A_ROWS = "RCRARows";
  @SerializedName(SERIALIZED_NAME_RC_R_A_ROWS)
  private String rcRARows;

  public static final String SERIALIZED_NAME_SD_W_A_ROWS = "SDWARows";
  @SerializedName(SERIALIZED_NAME_SD_W_A_ROWS)
  private String sdWARows;

  public static final String SERIALIZED_NAME_SE_P_ROWS = "SEPRows";
  @SerializedName(SERIALIZED_NAME_SE_P_ROWS)
  private String sePRows;

  public static final String SERIALIZED_NAME_TS_C_A_ROWS = "TSCARows";
  @SerializedName(SERIALIZED_NAME_TS_C_A_ROWS)
  private String tsCARows;

  public Crs0GetCaseInfoResults() {
  }

  public Crs0GetCaseInfoResults afRRows(String afRRows) {
    this.afRRows = afRRows;
    return this;
  }

  /**
   * Displays the number of Administrative Formal cases within the search results.
   * @return afRRows
   */
  @javax.annotation.Nonnull
  public String getAfRRows() {
    return afRRows;
  }

  public void setAfRRows(String afRRows) {
    this.afRRows = afRRows;
  }


  public Crs0GetCaseInfoResults ceRCLARows(String ceRCLARows) {
    this.ceRCLARows = ceRCLARows;
    return this;
  }

  /**
   * The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).
   * @return ceRCLARows
   */
  @javax.annotation.Nonnull
  public String getCeRCLARows() {
    return ceRCLARows;
  }

  public void setCeRCLARows(String ceRCLARows) {
    this.ceRCLARows = ceRCLARows;
  }


  public Crs0GetCaseInfoResults cwARows(String cwARows) {
    this.cwARows = cwARows;
    return this;
  }

  /**
   * The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
   * @return cwARows
   */
  @javax.annotation.Nonnull
  public String getCwARows() {
    return cwARows;
  }

  public void setCwARows(String cwARows) {
    this.cwARows = cwARows;
  }


  public Crs0GetCaseInfoResults cases(List<Crs0Cases> cases) {
    this.cases = cases;
    return this;
  }

  public Crs0GetCaseInfoResults addCasesItem(Crs0Cases casesItem) {
    if (this.cases == null) {
      this.cases = new ArrayList<>();
    }
    this.cases.add(casesItem);
    return this;
  }

  /**
   * A summary of the violation(s), environmental problem(s), and a description of the cause of action.
   * @return cases
   */
  @javax.annotation.Nullable
  public List<Crs0Cases> getCases() {
    return cases;
  }

  public void setCases(List<Crs0Cases> cases) {
    this.cases = cases;
  }


  public Crs0GetCaseInfoResults clusterOutput(Crs0ClusterOutput clusterOutput) {
    this.clusterOutput = clusterOutput;
    return this;
  }

  /**
   * Get clusterOutput
   * @return clusterOutput
   */
  @javax.annotation.Nullable
  public Crs0ClusterOutput getClusterOutput() {
    return clusterOutput;
  }

  public void setClusterOutput(Crs0ClusterOutput clusterOutput) {
    this.clusterOutput = clusterOutput;
  }


  public Crs0GetCaseInfoResults clusterRecords(String clusterRecords) {
    this.clusterRecords = clusterRecords;
    return this;
  }

  /**
   * Number of clusters returned.
   * @return clusterRecords
   */
  @javax.annotation.Nullable
  public String getClusterRecords() {
    return clusterRecords;
  }

  public void setClusterRecords(String clusterRecords) {
    this.clusterRecords = clusterRecords;
  }


  public Crs0GetCaseInfoResults criminalRows(String criminalRows) {
    this.criminalRows = criminalRows;
    return this;
  }

  /**
   * Displays the number of criminal enforcement cases within the search results.
   * @return criminalRows
   */
  @javax.annotation.Nonnull
  public String getCriminalRows() {
    return criminalRows;
  }

  public void setCriminalRows(String criminalRows) {
    this.criminalRows = criminalRows;
  }


  public Crs0GetCaseInfoResults epCRARows(String epCRARows) {
    this.epCRARows = epCRARows;
    return this;
  }

  /**
   * The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).
   * @return epCRARows
   */
  @javax.annotation.Nonnull
  public String getEpCRARows() {
    return epCRARows;
  }

  public void setEpCRARows(String epCRARows) {
    this.epCRARows = epCRARows;
  }


  public Crs0GetCaseInfoResults fiFRARows(String fiFRARows) {
    this.fiFRARows = fiFRARows;
    return this;
  }

  /**
   * The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
   * @return fiFRARows
   */
  @javax.annotation.Nonnull
  public String getFiFRARows() {
    return fiFRARows;
  }

  public void setFiFRARows(String fiFRARows) {
    this.fiFRARows = fiFRARows;
  }


  public Crs0GetCaseInfoResults fedPenRows(String fedPenRows) {
    this.fedPenRows = fedPenRows;
    return this;
  }

  /**
   * Displays the number of cases with federal penalty assessed greater than $0.
   * @return fedPenRows
   */
  @javax.annotation.Nonnull
  public String getFedPenRows() {
    return fedPenRows;
  }

  public void setFedPenRows(String fedPenRows) {
    this.fedPenRows = fedPenRows;
  }


  public Crs0GetCaseInfoResults federalRows(String federalRows) {
    this.federalRows = federalRows;
    return this;
  }

  /**
   * The number of facilities or cases within the result set that have a relationship to a Federal facility.
   * @return federalRows
   */
  @javax.annotation.Nonnull
  public String getFederalRows() {
    return federalRows;
  }

  public void setFederalRows(String federalRows) {
    this.federalRows = federalRows;
  }


  public Crs0GetCaseInfoResults jdCRows(String jdCRows) {
    this.jdCRows = jdCRows;
    return this;
  }

  /**
   * Displays the number of Judicial cases within the search results.
   * @return jdCRows
   */
  @javax.annotation.Nonnull
  public String getJdCRows() {
    return jdCRows;
  }

  public void setJdCRows(String jdCRows) {
    this.jdCRows = jdCRows;
  }


  public Crs0GetCaseInfoResults mapLocations(String mapLocations) {
    this.mapLocations = mapLocations;
    return this;
  }

  /**
   * Number of Faciliy Locations related to the Case Search Results
   * @return mapLocations
   */
  @javax.annotation.Nonnull
  public String getMapLocations() {
    return mapLocations;
  }

  public void setMapLocations(String mapLocations) {
    this.mapLocations = mapLocations;
  }


  public Crs0GetCaseInfoResults message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Field to record messages (typically performance-related) about packet processing
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Crs0GetCaseInfoResults queryParameters(List<Qp0> queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  public Crs0GetCaseInfoResults addQueryParametersItem(Qp0 queryParametersItem) {
    if (this.queryParameters == null) {
      this.queryParameters = new ArrayList<>();
    }
    this.queryParameters.add(queryParametersItem);
    return this;
  }

  /**
   * A list of submitted query parameters and their values.
   * @return queryParameters
   */
  @javax.annotation.Nonnull
  public List<Qp0> getQueryParameters() {
    return queryParameters;
  }

  public void setQueryParameters(List<Qp0> queryParameters) {
    this.queryParameters = queryParameters;
  }


  public Crs0GetCaseInfoResults queryRows(String queryRows) {
    this.queryRows = queryRows;
    return this;
  }

  /**
   * Number of query results returned
   * @return queryRows
   */
  @javax.annotation.Nonnull
  public String getQueryRows() {
    return queryRows;
  }

  public void setQueryRows(String queryRows) {
    this.queryRows = queryRows;
  }


  public Crs0GetCaseInfoResults rcRARows(String rcRARows) {
    this.rcRARows = rcRARows;
    return this;
  }

  /**
   * The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
   * @return rcRARows
   */
  @javax.annotation.Nonnull
  public String getRcRARows() {
    return rcRARows;
  }

  public void setRcRARows(String rcRARows) {
    this.rcRARows = rcRARows;
  }


  public Crs0GetCaseInfoResults sdWARows(String sdWARows) {
    this.sdWARows = sdWARows;
    return this;
  }

  /**
   * The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.
   * @return sdWARows
   */
  @javax.annotation.Nonnull
  public String getSdWARows() {
    return sdWARows;
  }

  public void setSdWARows(String sdWARows) {
    this.sdWARows = sdWARows;
  }


  public Crs0GetCaseInfoResults sePRows(String sePRows) {
    this.sePRows = sePRows;
    return this;
  }

  /**
   * Displays the number of cases with SEP amount greater than $0.
   * @return sePRows
   */
  @javax.annotation.Nonnull
  public String getSePRows() {
    return sePRows;
  }

  public void setSePRows(String sePRows) {
    this.sePRows = sePRows;
  }


  public Crs0GetCaseInfoResults tsCARows(String tsCARows) {
    this.tsCARows = tsCARows;
    return this;
  }

  /**
   * The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).
   * @return tsCARows
   */
  @javax.annotation.Nonnull
  public String getTsCARows() {
    return tsCARows;
  }

  public void setTsCARows(String tsCARows) {
    this.tsCARows = tsCARows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crs0GetCaseInfoResults crs0GetCaseInfoResults = (Crs0GetCaseInfoResults) o;
    return Objects.equals(this.afRRows, crs0GetCaseInfoResults.afRRows) &&
        Objects.equals(this.ceRCLARows, crs0GetCaseInfoResults.ceRCLARows) &&
        Objects.equals(this.cwARows, crs0GetCaseInfoResults.cwARows) &&
        Objects.equals(this.cases, crs0GetCaseInfoResults.cases) &&
        Objects.equals(this.clusterOutput, crs0GetCaseInfoResults.clusterOutput) &&
        Objects.equals(this.clusterRecords, crs0GetCaseInfoResults.clusterRecords) &&
        Objects.equals(this.criminalRows, crs0GetCaseInfoResults.criminalRows) &&
        Objects.equals(this.epCRARows, crs0GetCaseInfoResults.epCRARows) &&
        Objects.equals(this.fiFRARows, crs0GetCaseInfoResults.fiFRARows) &&
        Objects.equals(this.fedPenRows, crs0GetCaseInfoResults.fedPenRows) &&
        Objects.equals(this.federalRows, crs0GetCaseInfoResults.federalRows) &&
        Objects.equals(this.jdCRows, crs0GetCaseInfoResults.jdCRows) &&
        Objects.equals(this.mapLocations, crs0GetCaseInfoResults.mapLocations) &&
        Objects.equals(this.message, crs0GetCaseInfoResults.message) &&
        Objects.equals(this.queryParameters, crs0GetCaseInfoResults.queryParameters) &&
        Objects.equals(this.queryRows, crs0GetCaseInfoResults.queryRows) &&
        Objects.equals(this.rcRARows, crs0GetCaseInfoResults.rcRARows) &&
        Objects.equals(this.sdWARows, crs0GetCaseInfoResults.sdWARows) &&
        Objects.equals(this.sePRows, crs0GetCaseInfoResults.sePRows) &&
        Objects.equals(this.tsCARows, crs0GetCaseInfoResults.tsCARows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afRRows, ceRCLARows, cwARows, cases, clusterOutput, clusterRecords, criminalRows, epCRARows, fiFRARows, fedPenRows, federalRows, jdCRows, mapLocations, message, queryParameters, queryRows, rcRARows, sdWARows, sePRows, tsCARows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crs0GetCaseInfoResults {\n");
    sb.append("    afRRows: ").append(toIndentedString(afRRows)).append("\n");
    sb.append("    ceRCLARows: ").append(toIndentedString(ceRCLARows)).append("\n");
    sb.append("    cwARows: ").append(toIndentedString(cwARows)).append("\n");
    sb.append("    cases: ").append(toIndentedString(cases)).append("\n");
    sb.append("    clusterOutput: ").append(toIndentedString(clusterOutput)).append("\n");
    sb.append("    clusterRecords: ").append(toIndentedString(clusterRecords)).append("\n");
    sb.append("    criminalRows: ").append(toIndentedString(criminalRows)).append("\n");
    sb.append("    epCRARows: ").append(toIndentedString(epCRARows)).append("\n");
    sb.append("    fiFRARows: ").append(toIndentedString(fiFRARows)).append("\n");
    sb.append("    fedPenRows: ").append(toIndentedString(fedPenRows)).append("\n");
    sb.append("    federalRows: ").append(toIndentedString(federalRows)).append("\n");
    sb.append("    jdCRows: ").append(toIndentedString(jdCRows)).append("\n");
    sb.append("    mapLocations: ").append(toIndentedString(mapLocations)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    queryRows: ").append(toIndentedString(queryRows)).append("\n");
    sb.append("    rcRARows: ").append(toIndentedString(rcRARows)).append("\n");
    sb.append("    sdWARows: ").append(toIndentedString(sdWARows)).append("\n");
    sb.append("    sePRows: ").append(toIndentedString(sePRows)).append("\n");
    sb.append("    tsCARows: ").append(toIndentedString(tsCARows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AFRRows");
    openapiFields.add("CERCLARows");
    openapiFields.add("CWARows");
    openapiFields.add("Cases");
    openapiFields.add("ClusterOutput");
    openapiFields.add("ClusterRecords");
    openapiFields.add("CriminalRows");
    openapiFields.add("EPCRARows");
    openapiFields.add("FIFRARows");
    openapiFields.add("FedPenRows");
    openapiFields.add("FederalRows");
    openapiFields.add("JDCRows");
    openapiFields.add("MapLocations");
    openapiFields.add("Message");
    openapiFields.add("QueryParameters");
    openapiFields.add("QueryRows");
    openapiFields.add("RCRARows");
    openapiFields.add("SDWARows");
    openapiFields.add("SEPRows");
    openapiFields.add("TSCARows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AFRRows");
    openapiRequiredFields.add("CERCLARows");
    openapiRequiredFields.add("CWARows");
    openapiRequiredFields.add("CriminalRows");
    openapiRequiredFields.add("EPCRARows");
    openapiRequiredFields.add("FIFRARows");
    openapiRequiredFields.add("FedPenRows");
    openapiRequiredFields.add("FederalRows");
    openapiRequiredFields.add("JDCRows");
    openapiRequiredFields.add("MapLocations");
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("QueryParameters");
    openapiRequiredFields.add("QueryRows");
    openapiRequiredFields.add("RCRARows");
    openapiRequiredFields.add("SDWARows");
    openapiRequiredFields.add("SEPRows");
    openapiRequiredFields.add("TSCARows");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crs0GetCaseInfoResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crs0GetCaseInfoResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crs0GetCaseInfoResults is not found in the empty JSON string", Crs0GetCaseInfoResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crs0GetCaseInfoResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crs0GetCaseInfoResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crs0GetCaseInfoResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AFRRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AFRRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AFRRows").toString()));
      }
      if (!jsonObj.get("CERCLARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CERCLARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CERCLARows").toString()));
      }
      if (!jsonObj.get("CWARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CWARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CWARows").toString()));
      }
      if (jsonObj.get("Cases") != null && !jsonObj.get("Cases").isJsonNull()) {
        JsonArray jsonArraycases = jsonObj.getAsJsonArray("Cases");
        if (jsonArraycases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Cases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Cases` to be an array in the JSON string but got `%s`", jsonObj.get("Cases").toString()));
          }

          // validate the optional field `Cases` (array)
          for (int i = 0; i < jsonArraycases.size(); i++) {
            Crs0Cases.validateJsonElement(jsonArraycases.get(i));
          };
        }
      }
      // validate the optional field `ClusterOutput`
      if (jsonObj.get("ClusterOutput") != null && !jsonObj.get("ClusterOutput").isJsonNull()) {
        Crs0ClusterOutput.validateJsonElement(jsonObj.get("ClusterOutput"));
      }
      if ((jsonObj.get("ClusterRecords") != null && !jsonObj.get("ClusterRecords").isJsonNull()) && !jsonObj.get("ClusterRecords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterRecords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterRecords").toString()));
      }
      if (!jsonObj.get("CriminalRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CriminalRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CriminalRows").toString()));
      }
      if (!jsonObj.get("EPCRARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EPCRARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EPCRARows").toString()));
      }
      if (!jsonObj.get("FIFRARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FIFRARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FIFRARows").toString()));
      }
      if (!jsonObj.get("FedPenRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FedPenRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FedPenRows").toString()));
      }
      if (!jsonObj.get("FederalRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalRows").toString()));
      }
      if (!jsonObj.get("JDCRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JDCRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JDCRows").toString()));
      }
      if (!jsonObj.get("MapLocations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MapLocations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MapLocations").toString()));
      }
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("QueryParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryParameters` to be an array in the JSON string but got `%s`", jsonObj.get("QueryParameters").toString()));
      }

      JsonArray jsonArrayqueryParameters = jsonObj.getAsJsonArray("QueryParameters");
      // validate the required field `QueryParameters` (array)
      for (int i = 0; i < jsonArrayqueryParameters.size(); i++) {
        Qp0.validateJsonElement(jsonArrayqueryParameters.get(i));
      };
      if (!jsonObj.get("QueryRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryRows").toString()));
      }
      if (!jsonObj.get("RCRARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RCRARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RCRARows").toString()));
      }
      if (!jsonObj.get("SDWARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDWARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SDWARows").toString()));
      }
      if (!jsonObj.get("SEPRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SEPRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SEPRows").toString()));
      }
      if (!jsonObj.get("TSCARows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TSCARows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TSCARows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crs0GetCaseInfoResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crs0GetCaseInfoResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crs0GetCaseInfoResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crs0GetCaseInfoResults.class));

       return (TypeAdapter<T>) new TypeAdapter<Crs0GetCaseInfoResults>() {
           @Override
           public void write(JsonWriter out, Crs0GetCaseInfoResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crs0GetCaseInfoResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crs0GetCaseInfoResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crs0GetCaseInfoResults
   * @throws IOException if the JSON string is invalid with respect to Crs0GetCaseInfoResults
   */
  public static Crs0GetCaseInfoResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crs0GetCaseInfoResults.class);
  }

  /**
   * Convert an instance of Crs0GetCaseInfoResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

