/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Crs0Cases from './Crs0Cases';
import Crs0MapOutput from './Crs0MapOutput';

/**
 * The Crs2Results model module.
 * @module model/Crs2Results
 * @version 1.0.0
 */
class Crs2Results {
    /**
     * Constructs a new <code>Crs2Results</code>.
     * The data returned by the service call.
     * @alias module:model/Crs2Results
     * @param aFRRows {String} Displays the number of Administrative Formal cases within the search results.
     * @param cAARows {String} The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.
     * @param cERCLARows {String} The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).
     * @param cWARows {String} The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
     * @param criminalRows {String} Displays the number of criminal enforcement cases within the search results.
     * @param ePCRARows {String} The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).
     * @param fIFRARows {String} The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
     * @param fedPenRows {String} Displays the number of cases with federal penalty assessed greater than $0.
     * @param federalRows {String} The number of facilities or cases within the result set that have a relationship to a Federal facility.
     * @param jDCRows {String} Displays the number of Judicial cases within the search results.
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     * @param pageNo {String} The number of pages of results returned
     * @param queryID {String} Sequential number assigned to entire search result
     * @param queryRows {String} Number of query results returned
     * @param rCRARows {String} The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
     * @param sDWARows {String} The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.
     * @param sEPRows {String} Displays the number of cases with SEP amount greater than $0.
     * @param tSCARows {String} The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).
     */
    constructor(aFRRows, cAARows, cERCLARows, cWARows, criminalRows, ePCRARows, fIFRARows, fedPenRows, federalRows, jDCRows, message, pageNo, queryID, queryRows, rCRARows, sDWARows, sEPRows, tSCARows) { 
        
        Crs2Results.initialize(this, aFRRows, cAARows, cERCLARows, cWARows, criminalRows, ePCRARows, fIFRARows, fedPenRows, federalRows, jDCRows, message, pageNo, queryID, queryRows, rCRARows, sDWARows, sEPRows, tSCARows);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aFRRows, cAARows, cERCLARows, cWARows, criminalRows, ePCRARows, fIFRARows, fedPenRows, federalRows, jDCRows, message, pageNo, queryID, queryRows, rCRARows, sDWARows, sEPRows, tSCARows) { 
        obj['AFRRows'] = aFRRows;
        obj['CAARows'] = cAARows;
        obj['CERCLARows'] = cERCLARows;
        obj['CWARows'] = cWARows;
        obj['CriminalRows'] = criminalRows;
        obj['EPCRARows'] = ePCRARows;
        obj['FIFRARows'] = fIFRARows;
        obj['FedPenRows'] = fedPenRows;
        obj['FederalRows'] = federalRows;
        obj['JDCRows'] = jDCRows;
        obj['Message'] = message;
        obj['PageNo'] = pageNo;
        obj['QueryID'] = queryID;
        obj['QueryRows'] = queryRows;
        obj['RCRARows'] = rCRARows;
        obj['SDWARows'] = sDWARows;
        obj['SEPRows'] = sEPRows;
        obj['TSCARows'] = tSCARows;
    }

    /**
     * Constructs a <code>Crs2Results</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs2Results} obj Optional instance to populate.
     * @return {module:model/Crs2Results} The populated <code>Crs2Results</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs2Results();

            if (data.hasOwnProperty('AFRRows')) {
                obj['AFRRows'] = ApiClient.convertToType(data['AFRRows'], 'String');
            }
            if (data.hasOwnProperty('CAARows')) {
                obj['CAARows'] = ApiClient.convertToType(data['CAARows'], 'String');
            }
            if (data.hasOwnProperty('CERCLARows')) {
                obj['CERCLARows'] = ApiClient.convertToType(data['CERCLARows'], 'String');
            }
            if (data.hasOwnProperty('CWARows')) {
                obj['CWARows'] = ApiClient.convertToType(data['CWARows'], 'String');
            }
            if (data.hasOwnProperty('Cases')) {
                obj['Cases'] = ApiClient.convertToType(data['Cases'], [Crs0Cases]);
            }
            if (data.hasOwnProperty('CriminalRows')) {
                obj['CriminalRows'] = ApiClient.convertToType(data['CriminalRows'], 'String');
            }
            if (data.hasOwnProperty('EPCRARows')) {
                obj['EPCRARows'] = ApiClient.convertToType(data['EPCRARows'], 'String');
            }
            if (data.hasOwnProperty('FIFRARows')) {
                obj['FIFRARows'] = ApiClient.convertToType(data['FIFRARows'], 'String');
            }
            if (data.hasOwnProperty('FedPenRows')) {
                obj['FedPenRows'] = ApiClient.convertToType(data['FedPenRows'], 'String');
            }
            if (data.hasOwnProperty('FederalRows')) {
                obj['FederalRows'] = ApiClient.convertToType(data['FederalRows'], 'String');
            }
            if (data.hasOwnProperty('JDCRows')) {
                obj['JDCRows'] = ApiClient.convertToType(data['JDCRows'], 'String');
            }
            if (data.hasOwnProperty('MapOutput')) {
                obj['MapOutput'] = Crs0MapOutput.constructFromObject(data['MapOutput']);
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('PageNo')) {
                obj['PageNo'] = ApiClient.convertToType(data['PageNo'], 'String');
            }
            if (data.hasOwnProperty('QueryID')) {
                obj['QueryID'] = ApiClient.convertToType(data['QueryID'], 'String');
            }
            if (data.hasOwnProperty('QueryRows')) {
                obj['QueryRows'] = ApiClient.convertToType(data['QueryRows'], 'String');
            }
            if (data.hasOwnProperty('RCRARows')) {
                obj['RCRARows'] = ApiClient.convertToType(data['RCRARows'], 'String');
            }
            if (data.hasOwnProperty('SDWARows')) {
                obj['SDWARows'] = ApiClient.convertToType(data['SDWARows'], 'String');
            }
            if (data.hasOwnProperty('SEPRows')) {
                obj['SEPRows'] = ApiClient.convertToType(data['SEPRows'], 'String');
            }
            if (data.hasOwnProperty('TSCARows')) {
                obj['TSCARows'] = ApiClient.convertToType(data['TSCARows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs2Results</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs2Results</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs2Results.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AFRRows'] && !(typeof data['AFRRows'] === 'string' || data['AFRRows'] instanceof String)) {
            throw new Error("Expected the field `AFRRows` to be a primitive type in the JSON string but got " + data['AFRRows']);
        }
        // ensure the json data is a string
        if (data['CAARows'] && !(typeof data['CAARows'] === 'string' || data['CAARows'] instanceof String)) {
            throw new Error("Expected the field `CAARows` to be a primitive type in the JSON string but got " + data['CAARows']);
        }
        // ensure the json data is a string
        if (data['CERCLARows'] && !(typeof data['CERCLARows'] === 'string' || data['CERCLARows'] instanceof String)) {
            throw new Error("Expected the field `CERCLARows` to be a primitive type in the JSON string but got " + data['CERCLARows']);
        }
        // ensure the json data is a string
        if (data['CWARows'] && !(typeof data['CWARows'] === 'string' || data['CWARows'] instanceof String)) {
            throw new Error("Expected the field `CWARows` to be a primitive type in the JSON string but got " + data['CWARows']);
        }
        if (data['Cases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Cases'])) {
                throw new Error("Expected the field `Cases` to be an array in the JSON data but got " + data['Cases']);
            }
            // validate the optional field `Cases` (array)
            for (const item of data['Cases']) {
                Crs0Cases.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CriminalRows'] && !(typeof data['CriminalRows'] === 'string' || data['CriminalRows'] instanceof String)) {
            throw new Error("Expected the field `CriminalRows` to be a primitive type in the JSON string but got " + data['CriminalRows']);
        }
        // ensure the json data is a string
        if (data['EPCRARows'] && !(typeof data['EPCRARows'] === 'string' || data['EPCRARows'] instanceof String)) {
            throw new Error("Expected the field `EPCRARows` to be a primitive type in the JSON string but got " + data['EPCRARows']);
        }
        // ensure the json data is a string
        if (data['FIFRARows'] && !(typeof data['FIFRARows'] === 'string' || data['FIFRARows'] instanceof String)) {
            throw new Error("Expected the field `FIFRARows` to be a primitive type in the JSON string but got " + data['FIFRARows']);
        }
        // ensure the json data is a string
        if (data['FedPenRows'] && !(typeof data['FedPenRows'] === 'string' || data['FedPenRows'] instanceof String)) {
            throw new Error("Expected the field `FedPenRows` to be a primitive type in the JSON string but got " + data['FedPenRows']);
        }
        // ensure the json data is a string
        if (data['FederalRows'] && !(typeof data['FederalRows'] === 'string' || data['FederalRows'] instanceof String)) {
            throw new Error("Expected the field `FederalRows` to be a primitive type in the JSON string but got " + data['FederalRows']);
        }
        // ensure the json data is a string
        if (data['JDCRows'] && !(typeof data['JDCRows'] === 'string' || data['JDCRows'] instanceof String)) {
            throw new Error("Expected the field `JDCRows` to be a primitive type in the JSON string but got " + data['JDCRows']);
        }
        // validate the optional field `MapOutput`
        if (data['MapOutput']) { // data not null
          Crs0MapOutput.validateJSON(data['MapOutput']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // ensure the json data is a string
        if (data['PageNo'] && !(typeof data['PageNo'] === 'string' || data['PageNo'] instanceof String)) {
            throw new Error("Expected the field `PageNo` to be a primitive type in the JSON string but got " + data['PageNo']);
        }
        // ensure the json data is a string
        if (data['QueryID'] && !(typeof data['QueryID'] === 'string' || data['QueryID'] instanceof String)) {
            throw new Error("Expected the field `QueryID` to be a primitive type in the JSON string but got " + data['QueryID']);
        }
        // ensure the json data is a string
        if (data['QueryRows'] && !(typeof data['QueryRows'] === 'string' || data['QueryRows'] instanceof String)) {
            throw new Error("Expected the field `QueryRows` to be a primitive type in the JSON string but got " + data['QueryRows']);
        }
        // ensure the json data is a string
        if (data['RCRARows'] && !(typeof data['RCRARows'] === 'string' || data['RCRARows'] instanceof String)) {
            throw new Error("Expected the field `RCRARows` to be a primitive type in the JSON string but got " + data['RCRARows']);
        }
        // ensure the json data is a string
        if (data['SDWARows'] && !(typeof data['SDWARows'] === 'string' || data['SDWARows'] instanceof String)) {
            throw new Error("Expected the field `SDWARows` to be a primitive type in the JSON string but got " + data['SDWARows']);
        }
        // ensure the json data is a string
        if (data['SEPRows'] && !(typeof data['SEPRows'] === 'string' || data['SEPRows'] instanceof String)) {
            throw new Error("Expected the field `SEPRows` to be a primitive type in the JSON string but got " + data['SEPRows']);
        }
        // ensure the json data is a string
        if (data['TSCARows'] && !(typeof data['TSCARows'] === 'string' || data['TSCARows'] instanceof String)) {
            throw new Error("Expected the field `TSCARows` to be a primitive type in the JSON string but got " + data['TSCARows']);
        }

        return true;
    }


}

Crs2Results.RequiredProperties = ["AFRRows", "CAARows", "CERCLARows", "CWARows", "CriminalRows", "EPCRARows", "FIFRARows", "FedPenRows", "FederalRows", "JDCRows", "Message", "PageNo", "QueryID", "QueryRows", "RCRARows", "SDWARows", "SEPRows", "TSCARows"];

/**
 * Displays the number of Administrative Formal cases within the search results.
 * @member {String} AFRRows
 */
Crs2Results.prototype['AFRRows'] = undefined;

/**
 * The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.
 * @member {String} CAARows
 */
Crs2Results.prototype['CAARows'] = undefined;

/**
 * The number of cases within the results set that relate to the Comprehensive Environmental Response, Compensation, and Liability Act (CERCLA).
 * @member {String} CERCLARows
 */
Crs2Results.prototype['CERCLARows'] = undefined;

/**
 * The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.
 * @member {String} CWARows
 */
Crs2Results.prototype['CWARows'] = undefined;

/**
 * A summary of the violation(s), environmental problem(s), and a description of the cause of action.
 * @member {Array.<module:model/Crs0Cases>} Cases
 */
Crs2Results.prototype['Cases'] = undefined;

/**
 * Displays the number of criminal enforcement cases within the search results.
 * @member {String} CriminalRows
 */
Crs2Results.prototype['CriminalRows'] = undefined;

/**
 * The number of cases within the results set that relate to the Emergency Planning and Community Right to Know Act (EPCRA).
 * @member {String} EPCRARows
 */
Crs2Results.prototype['EPCRARows'] = undefined;

/**
 * The number of cases within the result set that relate to the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA).
 * @member {String} FIFRARows
 */
Crs2Results.prototype['FIFRARows'] = undefined;

/**
 * Displays the number of cases with federal penalty assessed greater than $0.
 * @member {String} FedPenRows
 */
Crs2Results.prototype['FedPenRows'] = undefined;

/**
 * The number of facilities or cases within the result set that have a relationship to a Federal facility.
 * @member {String} FederalRows
 */
Crs2Results.prototype['FederalRows'] = undefined;

/**
 * Displays the number of Judicial cases within the search results.
 * @member {String} JDCRows
 */
Crs2Results.prototype['JDCRows'] = undefined;

/**
 * @member {module:model/Crs0MapOutput} MapOutput
 */
Crs2Results.prototype['MapOutput'] = undefined;

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Crs2Results.prototype['Message'] = undefined;

/**
 * The number of pages of results returned
 * @member {String} PageNo
 */
Crs2Results.prototype['PageNo'] = undefined;

/**
 * Sequential number assigned to entire search result
 * @member {String} QueryID
 */
Crs2Results.prototype['QueryID'] = undefined;

/**
 * Number of query results returned
 * @member {String} QueryRows
 */
Crs2Results.prototype['QueryRows'] = undefined;

/**
 * The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.
 * @member {String} RCRARows
 */
Crs2Results.prototype['RCRARows'] = undefined;

/**
 * The number of facilities or cases within the results set that have Safe Drinking Water Act (SDWA) permits.
 * @member {String} SDWARows
 */
Crs2Results.prototype['SDWARows'] = undefined;

/**
 * Displays the number of cases with SEP amount greater than $0.
 * @member {String} SEPRows
 */
Crs2Results.prototype['SEPRows'] = undefined;

/**
 * The number of cases within the result set that relate to the Toxic Substances Control Act (TSCA).
 * @member {String} TSCARows
 */
Crs2Results.prototype['TSCARows'] = undefined;






export default Crs2Results;

