/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Crs1CAEDDocuments from './Crs1CAEDDocuments';
import Crs1CaseInformation from './Crs1CaseInformation';
import Crs1CaseMilestones from './Crs1CaseMilestones';
import Crs1Citations from './Crs1Citations';
import Crs1Defendants from './Crs1Defendants';
import Crs1EnforcementConclusions from './Crs1EnforcementConclusions';
import Crs1Facilities from './Crs1Facilities';
import Crs1LawsAndSections from './Crs1LawsAndSections';
import Crs1Pollutants from './Crs1Pollutants';
import Crs1ProgramLinks from './Crs1ProgramLinks';
import Crs1RelatedActivities from './Crs1RelatedActivities';

/**
 * The Crs1Results model module.
 * @module model/Crs1Results
 * @version 1.0.0
 */
class Crs1Results {
    /**
     * Constructs a new <code>Crs1Results</code>.
     * The data returned by the service call.
     * @alias module:model/Crs1Results
     * @param cAEDDocuments {Array.<module:model/Crs1CAEDDocuments>} 
     * @param caseInformation {module:model/Crs1CaseInformation} 
     * @param caseMilestones {Array.<module:model/Crs1CaseMilestones>} 
     * @param citations {Array.<module:model/Crs1Citations>} 
     * @param defendants {Array.<module:model/Crs1Defendants>} 
     * @param enforcementConclusions {Array.<module:model/Crs1EnforcementConclusions>} 
     * @param facilities {Array.<module:model/Crs1Facilities>} A complex array of facility information.
     * @param lawsAndSections {Array.<module:model/Crs1LawsAndSections>} 
     * @param message {String} Field to record messages (typically performance-related) about packet processing
     * @param pollutants {Array.<module:model/Crs1Pollutants>} 
     * @param programLinks {Array.<module:model/Crs1ProgramLinks>} 
     * @param relatedActivities {Array.<module:model/Crs1RelatedActivities>} This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.
     */
    constructor(cAEDDocuments, caseInformation, caseMilestones, citations, defendants, enforcementConclusions, facilities, lawsAndSections, message, pollutants, programLinks, relatedActivities) { 
        
        Crs1Results.initialize(this, cAEDDocuments, caseInformation, caseMilestones, citations, defendants, enforcementConclusions, facilities, lawsAndSections, message, pollutants, programLinks, relatedActivities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cAEDDocuments, caseInformation, caseMilestones, citations, defendants, enforcementConclusions, facilities, lawsAndSections, message, pollutants, programLinks, relatedActivities) { 
        obj['CAEDDocuments'] = cAEDDocuments;
        obj['CaseInformation'] = caseInformation;
        obj['CaseMilestones'] = caseMilestones;
        obj['Citations'] = citations;
        obj['Defendants'] = defendants;
        obj['EnforcementConclusions'] = enforcementConclusions;
        obj['Facilities'] = facilities;
        obj['LawsAndSections'] = lawsAndSections;
        obj['Message'] = message;
        obj['Pollutants'] = pollutants;
        obj['ProgramLinks'] = programLinks;
        obj['RelatedActivities'] = relatedActivities;
    }

    /**
     * Constructs a <code>Crs1Results</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs1Results} obj Optional instance to populate.
     * @return {module:model/Crs1Results} The populated <code>Crs1Results</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs1Results();

            if (data.hasOwnProperty('CAEDDocuments')) {
                obj['CAEDDocuments'] = ApiClient.convertToType(data['CAEDDocuments'], [Crs1CAEDDocuments]);
            }
            if (data.hasOwnProperty('CaseInformation')) {
                obj['CaseInformation'] = Crs1CaseInformation.constructFromObject(data['CaseInformation']);
            }
            if (data.hasOwnProperty('CaseMilestones')) {
                obj['CaseMilestones'] = ApiClient.convertToType(data['CaseMilestones'], [Crs1CaseMilestones]);
            }
            if (data.hasOwnProperty('Citations')) {
                obj['Citations'] = ApiClient.convertToType(data['Citations'], [Crs1Citations]);
            }
            if (data.hasOwnProperty('Defendants')) {
                obj['Defendants'] = ApiClient.convertToType(data['Defendants'], [Crs1Defendants]);
            }
            if (data.hasOwnProperty('EnforcementConclusions')) {
                obj['EnforcementConclusions'] = ApiClient.convertToType(data['EnforcementConclusions'], [Crs1EnforcementConclusions]);
            }
            if (data.hasOwnProperty('Facilities')) {
                obj['Facilities'] = ApiClient.convertToType(data['Facilities'], [Crs1Facilities]);
            }
            if (data.hasOwnProperty('LawsAndSections')) {
                obj['LawsAndSections'] = ApiClient.convertToType(data['LawsAndSections'], [Crs1LawsAndSections]);
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('Pollutants')) {
                obj['Pollutants'] = ApiClient.convertToType(data['Pollutants'], [Crs1Pollutants]);
            }
            if (data.hasOwnProperty('ProgramLinks')) {
                obj['ProgramLinks'] = ApiClient.convertToType(data['ProgramLinks'], [Crs1ProgramLinks]);
            }
            if (data.hasOwnProperty('RelatedActivities')) {
                obj['RelatedActivities'] = ApiClient.convertToType(data['RelatedActivities'], [Crs1RelatedActivities]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs1Results</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs1Results</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs1Results.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['CAEDDocuments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CAEDDocuments'])) {
                throw new Error("Expected the field `CAEDDocuments` to be an array in the JSON data but got " + data['CAEDDocuments']);
            }
            // validate the optional field `CAEDDocuments` (array)
            for (const item of data['CAEDDocuments']) {
                Crs1CAEDDocuments.validateJSON(item);
            };
        }
        // validate the optional field `CaseInformation`
        if (data['CaseInformation']) { // data not null
          Crs1CaseInformation.validateJSON(data['CaseInformation']);
        }
        if (data['CaseMilestones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CaseMilestones'])) {
                throw new Error("Expected the field `CaseMilestones` to be an array in the JSON data but got " + data['CaseMilestones']);
            }
            // validate the optional field `CaseMilestones` (array)
            for (const item of data['CaseMilestones']) {
                Crs1CaseMilestones.validateJSON(item);
            };
        }
        if (data['Citations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Citations'])) {
                throw new Error("Expected the field `Citations` to be an array in the JSON data but got " + data['Citations']);
            }
            // validate the optional field `Citations` (array)
            for (const item of data['Citations']) {
                Crs1Citations.validateJSON(item);
            };
        }
        if (data['Defendants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Defendants'])) {
                throw new Error("Expected the field `Defendants` to be an array in the JSON data but got " + data['Defendants']);
            }
            // validate the optional field `Defendants` (array)
            for (const item of data['Defendants']) {
                Crs1Defendants.validateJSON(item);
            };
        }
        if (data['EnforcementConclusions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['EnforcementConclusions'])) {
                throw new Error("Expected the field `EnforcementConclusions` to be an array in the JSON data but got " + data['EnforcementConclusions']);
            }
            // validate the optional field `EnforcementConclusions` (array)
            for (const item of data['EnforcementConclusions']) {
                Crs1EnforcementConclusions.validateJSON(item);
            };
        }
        if (data['Facilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Facilities'])) {
                throw new Error("Expected the field `Facilities` to be an array in the JSON data but got " + data['Facilities']);
            }
            // validate the optional field `Facilities` (array)
            for (const item of data['Facilities']) {
                Crs1Facilities.validateJSON(item);
            };
        }
        if (data['LawsAndSections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LawsAndSections'])) {
                throw new Error("Expected the field `LawsAndSections` to be an array in the JSON data but got " + data['LawsAndSections']);
            }
            // validate the optional field `LawsAndSections` (array)
            for (const item of data['LawsAndSections']) {
                Crs1LawsAndSections.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        if (data['Pollutants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Pollutants'])) {
                throw new Error("Expected the field `Pollutants` to be an array in the JSON data but got " + data['Pollutants']);
            }
            // validate the optional field `Pollutants` (array)
            for (const item of data['Pollutants']) {
                Crs1Pollutants.validateJSON(item);
            };
        }
        if (data['ProgramLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ProgramLinks'])) {
                throw new Error("Expected the field `ProgramLinks` to be an array in the JSON data but got " + data['ProgramLinks']);
            }
            // validate the optional field `ProgramLinks` (array)
            for (const item of data['ProgramLinks']) {
                Crs1ProgramLinks.validateJSON(item);
            };
        }
        if (data['RelatedActivities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['RelatedActivities'])) {
                throw new Error("Expected the field `RelatedActivities` to be an array in the JSON data but got " + data['RelatedActivities']);
            }
            // validate the optional field `RelatedActivities` (array)
            for (const item of data['RelatedActivities']) {
                Crs1RelatedActivities.validateJSON(item);
            };
        }

        return true;
    }


}

Crs1Results.RequiredProperties = ["CAEDDocuments", "CaseInformation", "CaseMilestones", "Citations", "Defendants", "EnforcementConclusions", "Facilities", "LawsAndSections", "Message", "Pollutants", "ProgramLinks", "RelatedActivities"];

/**
 * @member {Array.<module:model/Crs1CAEDDocuments>} CAEDDocuments
 */
Crs1Results.prototype['CAEDDocuments'] = undefined;

/**
 * @member {module:model/Crs1CaseInformation} CaseInformation
 */
Crs1Results.prototype['CaseInformation'] = undefined;

/**
 * @member {Array.<module:model/Crs1CaseMilestones>} CaseMilestones
 */
Crs1Results.prototype['CaseMilestones'] = undefined;

/**
 * @member {Array.<module:model/Crs1Citations>} Citations
 */
Crs1Results.prototype['Citations'] = undefined;

/**
 * @member {Array.<module:model/Crs1Defendants>} Defendants
 */
Crs1Results.prototype['Defendants'] = undefined;

/**
 * @member {Array.<module:model/Crs1EnforcementConclusions>} EnforcementConclusions
 */
Crs1Results.prototype['EnforcementConclusions'] = undefined;

/**
 * A complex array of facility information.
 * @member {Array.<module:model/Crs1Facilities>} Facilities
 */
Crs1Results.prototype['Facilities'] = undefined;

/**
 * @member {Array.<module:model/Crs1LawsAndSections>} LawsAndSections
 */
Crs1Results.prototype['LawsAndSections'] = undefined;

/**
 * Field to record messages (typically performance-related) about packet processing
 * @member {String} Message
 */
Crs1Results.prototype['Message'] = undefined;

/**
 * @member {Array.<module:model/Crs1Pollutants>} Pollutants
 */
Crs1Results.prototype['Pollutants'] = undefined;

/**
 * @member {Array.<module:model/Crs1ProgramLinks>} ProgramLinks
 */
Crs1Results.prototype['ProgramLinks'] = undefined;

/**
 * This section provides an Activity Type description and date for other ICIS activities (e.g., inspections, or compliance assistance) that are linked to the enforcement action.
 * @member {Array.<module:model/Crs1RelatedActivities>} RelatedActivities
 */
Crs1Results.prototype['RelatedActivities'] = undefined;






export default Crs1Results;

