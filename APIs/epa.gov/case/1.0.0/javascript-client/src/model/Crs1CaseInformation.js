/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Crs1CaseInformation model module.
 * @module model/Crs1CaseInformation
 * @version 1.0.0
 */
class Crs1CaseInformation {
    /**
     * Constructs a new <code>Crs1CaseInformation</code>.
     * The basic information section contains information that identifies the action and some key descriptive variables, such as case status and case type.
     * @alias module:model/Crs1CaseInformation
     * @param branch {String} The Branch or Unit of the Office of Regional Counsel assigned for the case.
     * @param caseName {String} A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
     * @param caseNumber {String} A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
     * @param caseStatus {String} The status of the compliance event or enforcement action.
     * @param caseStatusDate {String} The date of the most recent milestone activity.
     * @param caseSummary {String} The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.
     * @param caseType {String} The unique code that identifies a type of compliance event or enforcement action.
     * @param dOJDocketNumber {String} The docket number assigned by the Department of Justice to EPA's Enforcement Action.
     * @param enforcementOutcome {String} A description of the mechanism by which the Enforcement Action is resolved.
     * @param enforcementType {String} A text description of the Enforcement Action type.
     * @param headquartersDivision {String} The EPA Headquarters division that is tracking the case.
     * @param lead {String} The lead agency (e.g., EPA, State) conducting the inspection
     * @param multiMediaCase {String} The flag indicating whether the activity was a multimedia action.
     * @param regionalDocketNumber {String} The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.
     * @param reliefSought {String} The description for the type of relief requested in the complaint.
     * @param resultVolDisclosure {String} A flag that indicates the Enforcement Action was the result of a self disclosure.
     * @param totalComplianceActionCost {String} The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.
     * @param totalCostRecovery {String} The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
     * @param totalFederalPenalty {String} For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)ï¿½ as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.
     * @param totalSEPCost {String} The total value of all SEPs for all settlements at the enforcement case.
     * @param totalStatePenalty {String} The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
     * @param violations {String} A compilation of all Case Violation Descriptions related to the case.
     */
    constructor(branch, caseName, caseNumber, caseStatus, caseStatusDate, caseSummary, caseType, dOJDocketNumber, enforcementOutcome, enforcementType, headquartersDivision, lead, multiMediaCase, regionalDocketNumber, reliefSought, resultVolDisclosure, totalComplianceActionCost, totalCostRecovery, totalFederalPenalty, totalSEPCost, totalStatePenalty, violations) { 
        
        Crs1CaseInformation.initialize(this, branch, caseName, caseNumber, caseStatus, caseStatusDate, caseSummary, caseType, dOJDocketNumber, enforcementOutcome, enforcementType, headquartersDivision, lead, multiMediaCase, regionalDocketNumber, reliefSought, resultVolDisclosure, totalComplianceActionCost, totalCostRecovery, totalFederalPenalty, totalSEPCost, totalStatePenalty, violations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branch, caseName, caseNumber, caseStatus, caseStatusDate, caseSummary, caseType, dOJDocketNumber, enforcementOutcome, enforcementType, headquartersDivision, lead, multiMediaCase, regionalDocketNumber, reliefSought, resultVolDisclosure, totalComplianceActionCost, totalCostRecovery, totalFederalPenalty, totalSEPCost, totalStatePenalty, violations) { 
        obj['Branch'] = branch;
        obj['CaseName'] = caseName;
        obj['CaseNumber'] = caseNumber;
        obj['CaseStatus'] = caseStatus;
        obj['CaseStatusDate'] = caseStatusDate;
        obj['CaseSummary'] = caseSummary;
        obj['CaseType'] = caseType;
        obj['DOJDocketNumber'] = dOJDocketNumber;
        obj['EnforcementOutcome'] = enforcementOutcome;
        obj['EnforcementType'] = enforcementType;
        obj['HeadquartersDivision'] = headquartersDivision;
        obj['Lead'] = lead;
        obj['MultiMediaCase'] = multiMediaCase;
        obj['RegionalDocketNumber'] = regionalDocketNumber;
        obj['ReliefSought'] = reliefSought;
        obj['ResultVolDisclosure'] = resultVolDisclosure;
        obj['TotalComplianceActionCost'] = totalComplianceActionCost;
        obj['TotalCostRecovery'] = totalCostRecovery;
        obj['TotalFederalPenalty'] = totalFederalPenalty;
        obj['TotalSEPCost'] = totalSEPCost;
        obj['TotalStatePenalty'] = totalStatePenalty;
        obj['Violations'] = violations;
    }

    /**
     * Constructs a <code>Crs1CaseInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs1CaseInformation} obj Optional instance to populate.
     * @return {module:model/Crs1CaseInformation} The populated <code>Crs1CaseInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs1CaseInformation();

            if (data.hasOwnProperty('Branch')) {
                obj['Branch'] = ApiClient.convertToType(data['Branch'], 'String');
            }
            if (data.hasOwnProperty('CaseName')) {
                obj['CaseName'] = ApiClient.convertToType(data['CaseName'], 'String');
            }
            if (data.hasOwnProperty('CaseNumber')) {
                obj['CaseNumber'] = ApiClient.convertToType(data['CaseNumber'], 'String');
            }
            if (data.hasOwnProperty('CaseStatus')) {
                obj['CaseStatus'] = ApiClient.convertToType(data['CaseStatus'], 'String');
            }
            if (data.hasOwnProperty('CaseStatusDate')) {
                obj['CaseStatusDate'] = ApiClient.convertToType(data['CaseStatusDate'], 'String');
            }
            if (data.hasOwnProperty('CaseSummary')) {
                obj['CaseSummary'] = ApiClient.convertToType(data['CaseSummary'], 'String');
            }
            if (data.hasOwnProperty('CaseType')) {
                obj['CaseType'] = ApiClient.convertToType(data['CaseType'], 'String');
            }
            if (data.hasOwnProperty('DOJDocketNumber')) {
                obj['DOJDocketNumber'] = ApiClient.convertToType(data['DOJDocketNumber'], 'String');
            }
            if (data.hasOwnProperty('EnforcementOutcome')) {
                obj['EnforcementOutcome'] = ApiClient.convertToType(data['EnforcementOutcome'], 'String');
            }
            if (data.hasOwnProperty('EnforcementType')) {
                obj['EnforcementType'] = ApiClient.convertToType(data['EnforcementType'], 'String');
            }
            if (data.hasOwnProperty('HeadquartersDivision')) {
                obj['HeadquartersDivision'] = ApiClient.convertToType(data['HeadquartersDivision'], 'String');
            }
            if (data.hasOwnProperty('Lead')) {
                obj['Lead'] = ApiClient.convertToType(data['Lead'], 'String');
            }
            if (data.hasOwnProperty('MultiMediaCase')) {
                obj['MultiMediaCase'] = ApiClient.convertToType(data['MultiMediaCase'], 'String');
            }
            if (data.hasOwnProperty('RegionalDocketNumber')) {
                obj['RegionalDocketNumber'] = ApiClient.convertToType(data['RegionalDocketNumber'], 'String');
            }
            if (data.hasOwnProperty('ReliefSought')) {
                obj['ReliefSought'] = ApiClient.convertToType(data['ReliefSought'], 'String');
            }
            if (data.hasOwnProperty('ResultVolDisclosure')) {
                obj['ResultVolDisclosure'] = ApiClient.convertToType(data['ResultVolDisclosure'], 'String');
            }
            if (data.hasOwnProperty('TotalComplianceActionCost')) {
                obj['TotalComplianceActionCost'] = ApiClient.convertToType(data['TotalComplianceActionCost'], 'String');
            }
            if (data.hasOwnProperty('TotalCostRecovery')) {
                obj['TotalCostRecovery'] = ApiClient.convertToType(data['TotalCostRecovery'], 'String');
            }
            if (data.hasOwnProperty('TotalFederalPenalty')) {
                obj['TotalFederalPenalty'] = ApiClient.convertToType(data['TotalFederalPenalty'], 'String');
            }
            if (data.hasOwnProperty('TotalSEPCost')) {
                obj['TotalSEPCost'] = ApiClient.convertToType(data['TotalSEPCost'], 'String');
            }
            if (data.hasOwnProperty('TotalStatePenalty')) {
                obj['TotalStatePenalty'] = ApiClient.convertToType(data['TotalStatePenalty'], 'String');
            }
            if (data.hasOwnProperty('Violations')) {
                obj['Violations'] = ApiClient.convertToType(data['Violations'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs1CaseInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs1CaseInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs1CaseInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Branch'] && !(typeof data['Branch'] === 'string' || data['Branch'] instanceof String)) {
            throw new Error("Expected the field `Branch` to be a primitive type in the JSON string but got " + data['Branch']);
        }
        // ensure the json data is a string
        if (data['CaseName'] && !(typeof data['CaseName'] === 'string' || data['CaseName'] instanceof String)) {
            throw new Error("Expected the field `CaseName` to be a primitive type in the JSON string but got " + data['CaseName']);
        }
        // ensure the json data is a string
        if (data['CaseNumber'] && !(typeof data['CaseNumber'] === 'string' || data['CaseNumber'] instanceof String)) {
            throw new Error("Expected the field `CaseNumber` to be a primitive type in the JSON string but got " + data['CaseNumber']);
        }
        // ensure the json data is a string
        if (data['CaseStatus'] && !(typeof data['CaseStatus'] === 'string' || data['CaseStatus'] instanceof String)) {
            throw new Error("Expected the field `CaseStatus` to be a primitive type in the JSON string but got " + data['CaseStatus']);
        }
        // ensure the json data is a string
        if (data['CaseStatusDate'] && !(typeof data['CaseStatusDate'] === 'string' || data['CaseStatusDate'] instanceof String)) {
            throw new Error("Expected the field `CaseStatusDate` to be a primitive type in the JSON string but got " + data['CaseStatusDate']);
        }
        // ensure the json data is a string
        if (data['CaseSummary'] && !(typeof data['CaseSummary'] === 'string' || data['CaseSummary'] instanceof String)) {
            throw new Error("Expected the field `CaseSummary` to be a primitive type in the JSON string but got " + data['CaseSummary']);
        }
        // ensure the json data is a string
        if (data['CaseType'] && !(typeof data['CaseType'] === 'string' || data['CaseType'] instanceof String)) {
            throw new Error("Expected the field `CaseType` to be a primitive type in the JSON string but got " + data['CaseType']);
        }
        // ensure the json data is a string
        if (data['DOJDocketNumber'] && !(typeof data['DOJDocketNumber'] === 'string' || data['DOJDocketNumber'] instanceof String)) {
            throw new Error("Expected the field `DOJDocketNumber` to be a primitive type in the JSON string but got " + data['DOJDocketNumber']);
        }
        // ensure the json data is a string
        if (data['EnforcementOutcome'] && !(typeof data['EnforcementOutcome'] === 'string' || data['EnforcementOutcome'] instanceof String)) {
            throw new Error("Expected the field `EnforcementOutcome` to be a primitive type in the JSON string but got " + data['EnforcementOutcome']);
        }
        // ensure the json data is a string
        if (data['EnforcementType'] && !(typeof data['EnforcementType'] === 'string' || data['EnforcementType'] instanceof String)) {
            throw new Error("Expected the field `EnforcementType` to be a primitive type in the JSON string but got " + data['EnforcementType']);
        }
        // ensure the json data is a string
        if (data['HeadquartersDivision'] && !(typeof data['HeadquartersDivision'] === 'string' || data['HeadquartersDivision'] instanceof String)) {
            throw new Error("Expected the field `HeadquartersDivision` to be a primitive type in the JSON string but got " + data['HeadquartersDivision']);
        }
        // ensure the json data is a string
        if (data['Lead'] && !(typeof data['Lead'] === 'string' || data['Lead'] instanceof String)) {
            throw new Error("Expected the field `Lead` to be a primitive type in the JSON string but got " + data['Lead']);
        }
        // ensure the json data is a string
        if (data['MultiMediaCase'] && !(typeof data['MultiMediaCase'] === 'string' || data['MultiMediaCase'] instanceof String)) {
            throw new Error("Expected the field `MultiMediaCase` to be a primitive type in the JSON string but got " + data['MultiMediaCase']);
        }
        // ensure the json data is a string
        if (data['RegionalDocketNumber'] && !(typeof data['RegionalDocketNumber'] === 'string' || data['RegionalDocketNumber'] instanceof String)) {
            throw new Error("Expected the field `RegionalDocketNumber` to be a primitive type in the JSON string but got " + data['RegionalDocketNumber']);
        }
        // ensure the json data is a string
        if (data['ReliefSought'] && !(typeof data['ReliefSought'] === 'string' || data['ReliefSought'] instanceof String)) {
            throw new Error("Expected the field `ReliefSought` to be a primitive type in the JSON string but got " + data['ReliefSought']);
        }
        // ensure the json data is a string
        if (data['ResultVolDisclosure'] && !(typeof data['ResultVolDisclosure'] === 'string' || data['ResultVolDisclosure'] instanceof String)) {
            throw new Error("Expected the field `ResultVolDisclosure` to be a primitive type in the JSON string but got " + data['ResultVolDisclosure']);
        }
        // ensure the json data is a string
        if (data['TotalComplianceActionCost'] && !(typeof data['TotalComplianceActionCost'] === 'string' || data['TotalComplianceActionCost'] instanceof String)) {
            throw new Error("Expected the field `TotalComplianceActionCost` to be a primitive type in the JSON string but got " + data['TotalComplianceActionCost']);
        }
        // ensure the json data is a string
        if (data['TotalCostRecovery'] && !(typeof data['TotalCostRecovery'] === 'string' || data['TotalCostRecovery'] instanceof String)) {
            throw new Error("Expected the field `TotalCostRecovery` to be a primitive type in the JSON string but got " + data['TotalCostRecovery']);
        }
        // ensure the json data is a string
        if (data['TotalFederalPenalty'] && !(typeof data['TotalFederalPenalty'] === 'string' || data['TotalFederalPenalty'] instanceof String)) {
            throw new Error("Expected the field `TotalFederalPenalty` to be a primitive type in the JSON string but got " + data['TotalFederalPenalty']);
        }
        // ensure the json data is a string
        if (data['TotalSEPCost'] && !(typeof data['TotalSEPCost'] === 'string' || data['TotalSEPCost'] instanceof String)) {
            throw new Error("Expected the field `TotalSEPCost` to be a primitive type in the JSON string but got " + data['TotalSEPCost']);
        }
        // ensure the json data is a string
        if (data['TotalStatePenalty'] && !(typeof data['TotalStatePenalty'] === 'string' || data['TotalStatePenalty'] instanceof String)) {
            throw new Error("Expected the field `TotalStatePenalty` to be a primitive type in the JSON string but got " + data['TotalStatePenalty']);
        }
        // ensure the json data is a string
        if (data['Violations'] && !(typeof data['Violations'] === 'string' || data['Violations'] instanceof String)) {
            throw new Error("Expected the field `Violations` to be a primitive type in the JSON string but got " + data['Violations']);
        }

        return true;
    }


}

Crs1CaseInformation.RequiredProperties = ["Branch", "CaseName", "CaseNumber", "CaseStatus", "CaseStatusDate", "CaseSummary", "CaseType", "DOJDocketNumber", "EnforcementOutcome", "EnforcementType", "HeadquartersDivision", "Lead", "MultiMediaCase", "RegionalDocketNumber", "ReliefSought", "ResultVolDisclosure", "TotalComplianceActionCost", "TotalCostRecovery", "TotalFederalPenalty", "TotalSEPCost", "TotalStatePenalty", "Violations"];

/**
 * The Branch or Unit of the Office of Regional Counsel assigned for the case.
 * @member {String} Branch
 */
Crs1CaseInformation.prototype['Branch'] = undefined;

/**
 * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
 * @member {String} CaseName
 */
Crs1CaseInformation.prototype['CaseName'] = undefined;

/**
 * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
 * @member {String} CaseNumber
 */
Crs1CaseInformation.prototype['CaseNumber'] = undefined;

/**
 * The status of the compliance event or enforcement action.
 * @member {String} CaseStatus
 */
Crs1CaseInformation.prototype['CaseStatus'] = undefined;

/**
 * The date of the most recent milestone activity.
 * @member {String} CaseStatusDate
 */
Crs1CaseInformation.prototype['CaseStatusDate'] = undefined;

/**
 * The summary of the violation environmental problem and a description of the cause of action (basis of legal action).  The summary could be extracted from the referral transmission memo or letter or it could be required as the first section of a revised standardized referral document.
 * @member {String} CaseSummary
 */
Crs1CaseInformation.prototype['CaseSummary'] = undefined;

/**
 * The unique code that identifies a type of compliance event or enforcement action.
 * @member {String} CaseType
 */
Crs1CaseInformation.prototype['CaseType'] = undefined;

/**
 * The docket number assigned by the Department of Justice to EPA's Enforcement Action.
 * @member {String} DOJDocketNumber
 */
Crs1CaseInformation.prototype['DOJDocketNumber'] = undefined;

/**
 * A description of the mechanism by which the Enforcement Action is resolved.
 * @member {String} EnforcementOutcome
 */
Crs1CaseInformation.prototype['EnforcementOutcome'] = undefined;

/**
 * A text description of the Enforcement Action type.
 * @member {String} EnforcementType
 */
Crs1CaseInformation.prototype['EnforcementType'] = undefined;

/**
 * The EPA Headquarters division that is tracking the case.
 * @member {String} HeadquartersDivision
 */
Crs1CaseInformation.prototype['HeadquartersDivision'] = undefined;

/**
 * The lead agency (e.g., EPA, State) conducting the inspection
 * @member {String} Lead
 */
Crs1CaseInformation.prototype['Lead'] = undefined;

/**
 * The flag indicating whether the activity was a multimedia action.
 * @member {String} MultiMediaCase
 */
Crs1CaseInformation.prototype['MultiMediaCase'] = undefined;

/**
 * The number the Clerk of the Court assigns to a case that is filed or to a consent decree when it is lodged.  For administrative cases, it is the number assigned to the case by the Regional Hearing Clerk.
 * @member {String} RegionalDocketNumber
 */
Crs1CaseInformation.prototype['RegionalDocketNumber'] = undefined;

/**
 * The description for the type of relief requested in the complaint.
 * @member {String} ReliefSought
 */
Crs1CaseInformation.prototype['ReliefSought'] = undefined;

/**
 * A flag that indicates the Enforcement Action was the result of a self disclosure.
 * @member {String} ResultVolDisclosure
 */
Crs1CaseInformation.prototype['ResultVolDisclosure'] = undefined;

/**
 * The estimated dollar value of injunctive relief and other physical/nonphysical costs of returning to compliance, from all settlements at a case. Injunctive relief represents the actions a defendant is ordered to undertake to achieve and maintain compliance, such as installing a new pollution control device to reduce air pollution, or preventing emissions of a pollutant in the first place.
 * @member {String} TotalComplianceActionCost
 */
Crs1CaseInformation.prototype['TotalComplianceActionCost'] = undefined;

/**
 * The amount of the cost recovery ordered or agreed to be repaid by the responsible parties, cost recovery whole dollar amount awarded by the Court and due the the Superfund. For administrative cases, it is the cost recovery whole dollar amount of the Final Order.
 * @member {String} TotalCostRecovery
 */
Crs1CaseInformation.prototype['TotalCostRecovery'] = undefined;

/**
 * For civil judicial enforcement actions, this amount is the federal penalty assessed against the defendant(s)ï¿½ as specified in the final entered Consent Decree or Court Order. For administrative enforcement actions, it is the penalty assessed in the Consent/Final Order. It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities. Interest payments associated with a penalty paid over time are not included in this amount.
 * @member {String} TotalFederalPenalty
 */
Crs1CaseInformation.prototype['TotalFederalPenalty'] = undefined;

/**
 * The total value of all SEPs for all settlements at the enforcement case.
 * @member {String} TotalSEPCost
 */
Crs1CaseInformation.prototype['TotalSEPCost'] = undefined;

/**
 * The total dollar penalty amount from all settlements to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
 * @member {String} TotalStatePenalty
 */
Crs1CaseInformation.prototype['TotalStatePenalty'] = undefined;

/**
 * A compilation of all Case Violation Descriptions related to the case.
 * @member {String} Violations
 */
Crs1CaseInformation.prototype['Violations'] = undefined;






export default Crs1CaseInformation;

