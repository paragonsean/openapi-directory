/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Crs0Cases model module.
 * @module model/Crs0Cases
 * @version 1.0.0
 */
class Crs0Cases {
    /**
     * Constructs a new <code>Crs0Cases</code>.
     * A summary of the violation(s), environmental problem(s), and a description of the cause of action.
     * @alias module:model/Crs0Cases
     * @param activityId {String} The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.
     * @param caaFlag {String} A flag indicating that the Primary Law cited for the case was the Clean Air Act.
     * @param caseCategoryCode {String} A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative â€“ formal (AFR), and judicial activities (JDC).
     * @param caseCategoryDesc {String} Identifies the type of action based on the enforcement authority used.    Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of: - A notice of violation or a Superfund notice letter. -> An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.  Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State's Attorneys General for the states as well.  Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.
     * @param caseName {String} A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
     * @param caseNumber {String} A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
     * @param caseStatusCode {String} Code identifying the current status of an activity.
     * @param caseStatusDesc {String} The description that identifies the current status of an activity.
     * @param cerclaFlag {String} A flag indicating that the Primary Law cited for the case was the Comprehensive Environmental Response, Compensation, and Liability Act.
     * @param civilCriminalIndicator {String} Civil vs. Criminal Indicator.
     * @param costRecovery {String} For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
     * @param courtDocketNumber {String} 
     * @param cwaFlag {String} A flag indicating that the Primary Law cited for the case was the Clean Water Act.
     * @param dOJDocketNmbr {String} The docket number assigned by the Department of Justice to EPA's Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.
     * @param dateClosed {String} The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
     * @param dateFiled {String} The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.
     * @param dateLodged {String} The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.
     * @param enfOutcome {String} The result of the enforcement action.
     * @param epcraFlag {String} A flag indicating that the Primary Law cited for the case was the Emergency Planning and Community Right to Know Act.
     * @param fedPenalty {String} For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
     * @param federalFlag {String} A flag indicating that the  case is related to a Federally Owned facility.
     * @param fifraFlag {String} A flag indicating that the Primary Law cited for the case was the Federal Insecticide, Fungicide, and Rodenticide Act.
     * @param lead {String} The lead agency (e.g., EPA, State) conducting the inspection
     * @param maxScore {String} A sorting score for internal use.
     * @param primaryLaw {String} Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA's judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.
     * @param primaryNAICSCode {String} A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.
     * @param primarySICCode {String} The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility's specialty within the major sector.
     * @param primarySection {String} Identifies the primary section violated and cited in the enforcement action.
     * @param prosecutionSummaryId {String} Prosecution Summary Identifier.
     * @param rcraFlag {String} A flag indicating that the Primary Law cited for the case was the Resource Conservation and Recovery Act.
     * @param sEPCategories {String} For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs: - Public Health - Pollution Prevention - Pollution Reduction - Environmental Restoration and Protection - Emergency Planning and Preparedness - Assessments and Audits - Environmental Compliance Promotion - Other Types of Projects Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.
     * @param sEPCost {String} The total value of all SEPs for all settlements at the enforcement case.
     * @param sEPTexts {String} A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.
     * @param sdwaFlag {String} A flag indicating that the Primary Law cited for the case was the Safe Drinking Water Act.
     * @param settlementCnt {String} For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.
     * @param settlementDate {String} For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
     * @param stateLocPenaltyAmt {String} The total State or Local Penalty amount collected pursuant to a Final Order.
     * @param totalCompActionAmt {String} For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.
     * @param tribalLandFlag {String} Flag indicating if the case is located on tribal land.
     * @param tscaFlag {String} Flag indicating whether or not a facility has a TSCA ID
     */
    constructor(activityId, caaFlag, caseCategoryCode, caseCategoryDesc, caseName, caseNumber, caseStatusCode, caseStatusDesc, cerclaFlag, civilCriminalIndicator, costRecovery, courtDocketNumber, cwaFlag, dOJDocketNmbr, dateClosed, dateFiled, dateLodged, enfOutcome, epcraFlag, fedPenalty, federalFlag, fifraFlag, lead, maxScore, primaryLaw, primaryNAICSCode, primarySICCode, primarySection, prosecutionSummaryId, rcraFlag, sEPCategories, sEPCost, sEPTexts, sdwaFlag, settlementCnt, settlementDate, stateLocPenaltyAmt, totalCompActionAmt, tribalLandFlag, tscaFlag) { 
        
        Crs0Cases.initialize(this, activityId, caaFlag, caseCategoryCode, caseCategoryDesc, caseName, caseNumber, caseStatusCode, caseStatusDesc, cerclaFlag, civilCriminalIndicator, costRecovery, courtDocketNumber, cwaFlag, dOJDocketNmbr, dateClosed, dateFiled, dateLodged, enfOutcome, epcraFlag, fedPenalty, federalFlag, fifraFlag, lead, maxScore, primaryLaw, primaryNAICSCode, primarySICCode, primarySection, prosecutionSummaryId, rcraFlag, sEPCategories, sEPCost, sEPTexts, sdwaFlag, settlementCnt, settlementDate, stateLocPenaltyAmt, totalCompActionAmt, tribalLandFlag, tscaFlag);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activityId, caaFlag, caseCategoryCode, caseCategoryDesc, caseName, caseNumber, caseStatusCode, caseStatusDesc, cerclaFlag, civilCriminalIndicator, costRecovery, courtDocketNumber, cwaFlag, dOJDocketNmbr, dateClosed, dateFiled, dateLodged, enfOutcome, epcraFlag, fedPenalty, federalFlag, fifraFlag, lead, maxScore, primaryLaw, primaryNAICSCode, primarySICCode, primarySection, prosecutionSummaryId, rcraFlag, sEPCategories, sEPCost, sEPTexts, sdwaFlag, settlementCnt, settlementDate, stateLocPenaltyAmt, totalCompActionAmt, tribalLandFlag, tscaFlag) { 
        obj['ActivityId'] = activityId;
        obj['CaaFlag'] = caaFlag;
        obj['CaseCategoryCode'] = caseCategoryCode;
        obj['CaseCategoryDesc'] = caseCategoryDesc;
        obj['CaseName'] = caseName;
        obj['CaseNumber'] = caseNumber;
        obj['CaseStatusCode'] = caseStatusCode;
        obj['CaseStatusDesc'] = caseStatusDesc;
        obj['CerclaFlag'] = cerclaFlag;
        obj['CivilCriminalIndicator'] = civilCriminalIndicator;
        obj['CostRecovery'] = costRecovery;
        obj['CourtDocketNumber'] = courtDocketNumber;
        obj['CwaFlag'] = cwaFlag;
        obj['DOJDocketNmbr'] = dOJDocketNmbr;
        obj['DateClosed'] = dateClosed;
        obj['DateFiled'] = dateFiled;
        obj['DateLodged'] = dateLodged;
        obj['EnfOutcome'] = enfOutcome;
        obj['EpcraFlag'] = epcraFlag;
        obj['FedPenalty'] = fedPenalty;
        obj['FederalFlag'] = federalFlag;
        obj['FifraFlag'] = fifraFlag;
        obj['Lead'] = lead;
        obj['MaxScore'] = maxScore;
        obj['PrimaryLaw'] = primaryLaw;
        obj['PrimaryNAICSCode'] = primaryNAICSCode;
        obj['PrimarySICCode'] = primarySICCode;
        obj['PrimarySection'] = primarySection;
        obj['ProsecutionSummaryId'] = prosecutionSummaryId;
        obj['RcraFlag'] = rcraFlag;
        obj['SEPCategories'] = sEPCategories;
        obj['SEPCost'] = sEPCost;
        obj['SEPTexts'] = sEPTexts;
        obj['SdwaFlag'] = sdwaFlag;
        obj['SettlementCnt'] = settlementCnt;
        obj['SettlementDate'] = settlementDate;
        obj['StateLocPenaltyAmt'] = stateLocPenaltyAmt;
        obj['TotalCompActionAmt'] = totalCompActionAmt;
        obj['TribalLandFlag'] = tribalLandFlag;
        obj['TscaFlag'] = tscaFlag;
    }

    /**
     * Constructs a <code>Crs0Cases</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs0Cases} obj Optional instance to populate.
     * @return {module:model/Crs0Cases} The populated <code>Crs0Cases</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs0Cases();

            if (data.hasOwnProperty('ActivityId')) {
                obj['ActivityId'] = ApiClient.convertToType(data['ActivityId'], 'String');
            }
            if (data.hasOwnProperty('CaaFlag')) {
                obj['CaaFlag'] = ApiClient.convertToType(data['CaaFlag'], 'String');
            }
            if (data.hasOwnProperty('CaseCategoryCode')) {
                obj['CaseCategoryCode'] = ApiClient.convertToType(data['CaseCategoryCode'], 'String');
            }
            if (data.hasOwnProperty('CaseCategoryDesc')) {
                obj['CaseCategoryDesc'] = ApiClient.convertToType(data['CaseCategoryDesc'], 'String');
            }
            if (data.hasOwnProperty('CaseName')) {
                obj['CaseName'] = ApiClient.convertToType(data['CaseName'], 'String');
            }
            if (data.hasOwnProperty('CaseNumber')) {
                obj['CaseNumber'] = ApiClient.convertToType(data['CaseNumber'], 'String');
            }
            if (data.hasOwnProperty('CaseStatusCode')) {
                obj['CaseStatusCode'] = ApiClient.convertToType(data['CaseStatusCode'], 'String');
            }
            if (data.hasOwnProperty('CaseStatusDesc')) {
                obj['CaseStatusDesc'] = ApiClient.convertToType(data['CaseStatusDesc'], 'String');
            }
            if (data.hasOwnProperty('CerclaFlag')) {
                obj['CerclaFlag'] = ApiClient.convertToType(data['CerclaFlag'], 'String');
            }
            if (data.hasOwnProperty('CivilCriminalIndicator')) {
                obj['CivilCriminalIndicator'] = ApiClient.convertToType(data['CivilCriminalIndicator'], 'String');
            }
            if (data.hasOwnProperty('CostRecovery')) {
                obj['CostRecovery'] = ApiClient.convertToType(data['CostRecovery'], 'String');
            }
            if (data.hasOwnProperty('CourtDocketNumber')) {
                obj['CourtDocketNumber'] = ApiClient.convertToType(data['CourtDocketNumber'], 'String');
            }
            if (data.hasOwnProperty('CwaFlag')) {
                obj['CwaFlag'] = ApiClient.convertToType(data['CwaFlag'], 'String');
            }
            if (data.hasOwnProperty('DOJDocketNmbr')) {
                obj['DOJDocketNmbr'] = ApiClient.convertToType(data['DOJDocketNmbr'], 'String');
            }
            if (data.hasOwnProperty('DateClosed')) {
                obj['DateClosed'] = ApiClient.convertToType(data['DateClosed'], 'String');
            }
            if (data.hasOwnProperty('DateFiled')) {
                obj['DateFiled'] = ApiClient.convertToType(data['DateFiled'], 'String');
            }
            if (data.hasOwnProperty('DateLodged')) {
                obj['DateLodged'] = ApiClient.convertToType(data['DateLodged'], 'String');
            }
            if (data.hasOwnProperty('EnfOutcome')) {
                obj['EnfOutcome'] = ApiClient.convertToType(data['EnfOutcome'], 'String');
            }
            if (data.hasOwnProperty('EpcraFlag')) {
                obj['EpcraFlag'] = ApiClient.convertToType(data['EpcraFlag'], 'String');
            }
            if (data.hasOwnProperty('FedPenalty')) {
                obj['FedPenalty'] = ApiClient.convertToType(data['FedPenalty'], 'String');
            }
            if (data.hasOwnProperty('FederalFlag')) {
                obj['FederalFlag'] = ApiClient.convertToType(data['FederalFlag'], 'String');
            }
            if (data.hasOwnProperty('FifraFlag')) {
                obj['FifraFlag'] = ApiClient.convertToType(data['FifraFlag'], 'String');
            }
            if (data.hasOwnProperty('Lead')) {
                obj['Lead'] = ApiClient.convertToType(data['Lead'], 'String');
            }
            if (data.hasOwnProperty('MaxScore')) {
                obj['MaxScore'] = ApiClient.convertToType(data['MaxScore'], 'String');
            }
            if (data.hasOwnProperty('PrimaryLaw')) {
                obj['PrimaryLaw'] = ApiClient.convertToType(data['PrimaryLaw'], 'String');
            }
            if (data.hasOwnProperty('PrimaryNAICSCode')) {
                obj['PrimaryNAICSCode'] = ApiClient.convertToType(data['PrimaryNAICSCode'], 'String');
            }
            if (data.hasOwnProperty('PrimarySICCode')) {
                obj['PrimarySICCode'] = ApiClient.convertToType(data['PrimarySICCode'], 'String');
            }
            if (data.hasOwnProperty('PrimarySection')) {
                obj['PrimarySection'] = ApiClient.convertToType(data['PrimarySection'], 'String');
            }
            if (data.hasOwnProperty('ProsecutionSummaryId')) {
                obj['ProsecutionSummaryId'] = ApiClient.convertToType(data['ProsecutionSummaryId'], 'String');
            }
            if (data.hasOwnProperty('RcraFlag')) {
                obj['RcraFlag'] = ApiClient.convertToType(data['RcraFlag'], 'String');
            }
            if (data.hasOwnProperty('SEPCategories')) {
                obj['SEPCategories'] = ApiClient.convertToType(data['SEPCategories'], 'String');
            }
            if (data.hasOwnProperty('SEPCost')) {
                obj['SEPCost'] = ApiClient.convertToType(data['SEPCost'], 'String');
            }
            if (data.hasOwnProperty('SEPTexts')) {
                obj['SEPTexts'] = ApiClient.convertToType(data['SEPTexts'], 'String');
            }
            if (data.hasOwnProperty('SdwaFlag')) {
                obj['SdwaFlag'] = ApiClient.convertToType(data['SdwaFlag'], 'String');
            }
            if (data.hasOwnProperty('SettlementCnt')) {
                obj['SettlementCnt'] = ApiClient.convertToType(data['SettlementCnt'], 'String');
            }
            if (data.hasOwnProperty('SettlementDate')) {
                obj['SettlementDate'] = ApiClient.convertToType(data['SettlementDate'], 'String');
            }
            if (data.hasOwnProperty('StateLocPenaltyAmt')) {
                obj['StateLocPenaltyAmt'] = ApiClient.convertToType(data['StateLocPenaltyAmt'], 'String');
            }
            if (data.hasOwnProperty('TotalCompActionAmt')) {
                obj['TotalCompActionAmt'] = ApiClient.convertToType(data['TotalCompActionAmt'], 'String');
            }
            if (data.hasOwnProperty('TribalLandFlag')) {
                obj['TribalLandFlag'] = ApiClient.convertToType(data['TribalLandFlag'], 'String');
            }
            if (data.hasOwnProperty('TscaFlag')) {
                obj['TscaFlag'] = ApiClient.convertToType(data['TscaFlag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs0Cases</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs0Cases</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs0Cases.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ActivityId'] && !(typeof data['ActivityId'] === 'string' || data['ActivityId'] instanceof String)) {
            throw new Error("Expected the field `ActivityId` to be a primitive type in the JSON string but got " + data['ActivityId']);
        }
        // ensure the json data is a string
        if (data['CaaFlag'] && !(typeof data['CaaFlag'] === 'string' || data['CaaFlag'] instanceof String)) {
            throw new Error("Expected the field `CaaFlag` to be a primitive type in the JSON string but got " + data['CaaFlag']);
        }
        // ensure the json data is a string
        if (data['CaseCategoryCode'] && !(typeof data['CaseCategoryCode'] === 'string' || data['CaseCategoryCode'] instanceof String)) {
            throw new Error("Expected the field `CaseCategoryCode` to be a primitive type in the JSON string but got " + data['CaseCategoryCode']);
        }
        // ensure the json data is a string
        if (data['CaseCategoryDesc'] && !(typeof data['CaseCategoryDesc'] === 'string' || data['CaseCategoryDesc'] instanceof String)) {
            throw new Error("Expected the field `CaseCategoryDesc` to be a primitive type in the JSON string but got " + data['CaseCategoryDesc']);
        }
        // ensure the json data is a string
        if (data['CaseName'] && !(typeof data['CaseName'] === 'string' || data['CaseName'] instanceof String)) {
            throw new Error("Expected the field `CaseName` to be a primitive type in the JSON string but got " + data['CaseName']);
        }
        // ensure the json data is a string
        if (data['CaseNumber'] && !(typeof data['CaseNumber'] === 'string' || data['CaseNumber'] instanceof String)) {
            throw new Error("Expected the field `CaseNumber` to be a primitive type in the JSON string but got " + data['CaseNumber']);
        }
        // ensure the json data is a string
        if (data['CaseStatusCode'] && !(typeof data['CaseStatusCode'] === 'string' || data['CaseStatusCode'] instanceof String)) {
            throw new Error("Expected the field `CaseStatusCode` to be a primitive type in the JSON string but got " + data['CaseStatusCode']);
        }
        // ensure the json data is a string
        if (data['CaseStatusDesc'] && !(typeof data['CaseStatusDesc'] === 'string' || data['CaseStatusDesc'] instanceof String)) {
            throw new Error("Expected the field `CaseStatusDesc` to be a primitive type in the JSON string but got " + data['CaseStatusDesc']);
        }
        // ensure the json data is a string
        if (data['CerclaFlag'] && !(typeof data['CerclaFlag'] === 'string' || data['CerclaFlag'] instanceof String)) {
            throw new Error("Expected the field `CerclaFlag` to be a primitive type in the JSON string but got " + data['CerclaFlag']);
        }
        // ensure the json data is a string
        if (data['CivilCriminalIndicator'] && !(typeof data['CivilCriminalIndicator'] === 'string' || data['CivilCriminalIndicator'] instanceof String)) {
            throw new Error("Expected the field `CivilCriminalIndicator` to be a primitive type in the JSON string but got " + data['CivilCriminalIndicator']);
        }
        // ensure the json data is a string
        if (data['CostRecovery'] && !(typeof data['CostRecovery'] === 'string' || data['CostRecovery'] instanceof String)) {
            throw new Error("Expected the field `CostRecovery` to be a primitive type in the JSON string but got " + data['CostRecovery']);
        }
        // ensure the json data is a string
        if (data['CourtDocketNumber'] && !(typeof data['CourtDocketNumber'] === 'string' || data['CourtDocketNumber'] instanceof String)) {
            throw new Error("Expected the field `CourtDocketNumber` to be a primitive type in the JSON string but got " + data['CourtDocketNumber']);
        }
        // ensure the json data is a string
        if (data['CwaFlag'] && !(typeof data['CwaFlag'] === 'string' || data['CwaFlag'] instanceof String)) {
            throw new Error("Expected the field `CwaFlag` to be a primitive type in the JSON string but got " + data['CwaFlag']);
        }
        // ensure the json data is a string
        if (data['DOJDocketNmbr'] && !(typeof data['DOJDocketNmbr'] === 'string' || data['DOJDocketNmbr'] instanceof String)) {
            throw new Error("Expected the field `DOJDocketNmbr` to be a primitive type in the JSON string but got " + data['DOJDocketNmbr']);
        }
        // ensure the json data is a string
        if (data['DateClosed'] && !(typeof data['DateClosed'] === 'string' || data['DateClosed'] instanceof String)) {
            throw new Error("Expected the field `DateClosed` to be a primitive type in the JSON string but got " + data['DateClosed']);
        }
        // ensure the json data is a string
        if (data['DateFiled'] && !(typeof data['DateFiled'] === 'string' || data['DateFiled'] instanceof String)) {
            throw new Error("Expected the field `DateFiled` to be a primitive type in the JSON string but got " + data['DateFiled']);
        }
        // ensure the json data is a string
        if (data['DateLodged'] && !(typeof data['DateLodged'] === 'string' || data['DateLodged'] instanceof String)) {
            throw new Error("Expected the field `DateLodged` to be a primitive type in the JSON string but got " + data['DateLodged']);
        }
        // ensure the json data is a string
        if (data['EnfOutcome'] && !(typeof data['EnfOutcome'] === 'string' || data['EnfOutcome'] instanceof String)) {
            throw new Error("Expected the field `EnfOutcome` to be a primitive type in the JSON string but got " + data['EnfOutcome']);
        }
        // ensure the json data is a string
        if (data['EpcraFlag'] && !(typeof data['EpcraFlag'] === 'string' || data['EpcraFlag'] instanceof String)) {
            throw new Error("Expected the field `EpcraFlag` to be a primitive type in the JSON string but got " + data['EpcraFlag']);
        }
        // ensure the json data is a string
        if (data['FedPenalty'] && !(typeof data['FedPenalty'] === 'string' || data['FedPenalty'] instanceof String)) {
            throw new Error("Expected the field `FedPenalty` to be a primitive type in the JSON string but got " + data['FedPenalty']);
        }
        // ensure the json data is a string
        if (data['FederalFlag'] && !(typeof data['FederalFlag'] === 'string' || data['FederalFlag'] instanceof String)) {
            throw new Error("Expected the field `FederalFlag` to be a primitive type in the JSON string but got " + data['FederalFlag']);
        }
        // ensure the json data is a string
        if (data['FifraFlag'] && !(typeof data['FifraFlag'] === 'string' || data['FifraFlag'] instanceof String)) {
            throw new Error("Expected the field `FifraFlag` to be a primitive type in the JSON string but got " + data['FifraFlag']);
        }
        // ensure the json data is a string
        if (data['Lead'] && !(typeof data['Lead'] === 'string' || data['Lead'] instanceof String)) {
            throw new Error("Expected the field `Lead` to be a primitive type in the JSON string but got " + data['Lead']);
        }
        // ensure the json data is a string
        if (data['MaxScore'] && !(typeof data['MaxScore'] === 'string' || data['MaxScore'] instanceof String)) {
            throw new Error("Expected the field `MaxScore` to be a primitive type in the JSON string but got " + data['MaxScore']);
        }
        // ensure the json data is a string
        if (data['PrimaryLaw'] && !(typeof data['PrimaryLaw'] === 'string' || data['PrimaryLaw'] instanceof String)) {
            throw new Error("Expected the field `PrimaryLaw` to be a primitive type in the JSON string but got " + data['PrimaryLaw']);
        }
        // ensure the json data is a string
        if (data['PrimaryNAICSCode'] && !(typeof data['PrimaryNAICSCode'] === 'string' || data['PrimaryNAICSCode'] instanceof String)) {
            throw new Error("Expected the field `PrimaryNAICSCode` to be a primitive type in the JSON string but got " + data['PrimaryNAICSCode']);
        }
        // ensure the json data is a string
        if (data['PrimarySICCode'] && !(typeof data['PrimarySICCode'] === 'string' || data['PrimarySICCode'] instanceof String)) {
            throw new Error("Expected the field `PrimarySICCode` to be a primitive type in the JSON string but got " + data['PrimarySICCode']);
        }
        // ensure the json data is a string
        if (data['PrimarySection'] && !(typeof data['PrimarySection'] === 'string' || data['PrimarySection'] instanceof String)) {
            throw new Error("Expected the field `PrimarySection` to be a primitive type in the JSON string but got " + data['PrimarySection']);
        }
        // ensure the json data is a string
        if (data['ProsecutionSummaryId'] && !(typeof data['ProsecutionSummaryId'] === 'string' || data['ProsecutionSummaryId'] instanceof String)) {
            throw new Error("Expected the field `ProsecutionSummaryId` to be a primitive type in the JSON string but got " + data['ProsecutionSummaryId']);
        }
        // ensure the json data is a string
        if (data['RcraFlag'] && !(typeof data['RcraFlag'] === 'string' || data['RcraFlag'] instanceof String)) {
            throw new Error("Expected the field `RcraFlag` to be a primitive type in the JSON string but got " + data['RcraFlag']);
        }
        // ensure the json data is a string
        if (data['SEPCategories'] && !(typeof data['SEPCategories'] === 'string' || data['SEPCategories'] instanceof String)) {
            throw new Error("Expected the field `SEPCategories` to be a primitive type in the JSON string but got " + data['SEPCategories']);
        }
        // ensure the json data is a string
        if (data['SEPCost'] && !(typeof data['SEPCost'] === 'string' || data['SEPCost'] instanceof String)) {
            throw new Error("Expected the field `SEPCost` to be a primitive type in the JSON string but got " + data['SEPCost']);
        }
        // ensure the json data is a string
        if (data['SEPTexts'] && !(typeof data['SEPTexts'] === 'string' || data['SEPTexts'] instanceof String)) {
            throw new Error("Expected the field `SEPTexts` to be a primitive type in the JSON string but got " + data['SEPTexts']);
        }
        // ensure the json data is a string
        if (data['SdwaFlag'] && !(typeof data['SdwaFlag'] === 'string' || data['SdwaFlag'] instanceof String)) {
            throw new Error("Expected the field `SdwaFlag` to be a primitive type in the JSON string but got " + data['SdwaFlag']);
        }
        // ensure the json data is a string
        if (data['SettlementCnt'] && !(typeof data['SettlementCnt'] === 'string' || data['SettlementCnt'] instanceof String)) {
            throw new Error("Expected the field `SettlementCnt` to be a primitive type in the JSON string but got " + data['SettlementCnt']);
        }
        // ensure the json data is a string
        if (data['SettlementDate'] && !(typeof data['SettlementDate'] === 'string' || data['SettlementDate'] instanceof String)) {
            throw new Error("Expected the field `SettlementDate` to be a primitive type in the JSON string but got " + data['SettlementDate']);
        }
        // ensure the json data is a string
        if (data['StateLocPenaltyAmt'] && !(typeof data['StateLocPenaltyAmt'] === 'string' || data['StateLocPenaltyAmt'] instanceof String)) {
            throw new Error("Expected the field `StateLocPenaltyAmt` to be a primitive type in the JSON string but got " + data['StateLocPenaltyAmt']);
        }
        // ensure the json data is a string
        if (data['TotalCompActionAmt'] && !(typeof data['TotalCompActionAmt'] === 'string' || data['TotalCompActionAmt'] instanceof String)) {
            throw new Error("Expected the field `TotalCompActionAmt` to be a primitive type in the JSON string but got " + data['TotalCompActionAmt']);
        }
        // ensure the json data is a string
        if (data['TribalLandFlag'] && !(typeof data['TribalLandFlag'] === 'string' || data['TribalLandFlag'] instanceof String)) {
            throw new Error("Expected the field `TribalLandFlag` to be a primitive type in the JSON string but got " + data['TribalLandFlag']);
        }
        // ensure the json data is a string
        if (data['TscaFlag'] && !(typeof data['TscaFlag'] === 'string' || data['TscaFlag'] instanceof String)) {
            throw new Error("Expected the field `TscaFlag` to be a primitive type in the JSON string but got " + data['TscaFlag']);
        }

        return true;
    }


}

Crs0Cases.RequiredProperties = ["ActivityId", "CaaFlag", "CaseCategoryCode", "CaseCategoryDesc", "CaseName", "CaseNumber", "CaseStatusCode", "CaseStatusDesc", "CerclaFlag", "CivilCriminalIndicator", "CostRecovery", "CourtDocketNumber", "CwaFlag", "DOJDocketNmbr", "DateClosed", "DateFiled", "DateLodged", "EnfOutcome", "EpcraFlag", "FedPenalty", "FederalFlag", "FifraFlag", "Lead", "MaxScore", "PrimaryLaw", "PrimaryNAICSCode", "PrimarySICCode", "PrimarySection", "ProsecutionSummaryId", "RcraFlag", "SEPCategories", "SEPCost", "SEPTexts", "SdwaFlag", "SettlementCnt", "SettlementDate", "StateLocPenaltyAmt", "TotalCompActionAmt", "TribalLandFlag", "TscaFlag"];

/**
 * The unique, system-generated identifier for an activity performed at or related to a particular site or Facility.
 * @member {String} ActivityId
 */
Crs0Cases.prototype['ActivityId'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Clean Air Act.
 * @member {String} CaaFlag
 */
Crs0Cases.prototype['CaaFlag'] = undefined;

/**
 * A three-character code that identifies the type of ICIS activity, which includes general categories such as information requests, inspections, compliance determinations, and enforcement.  Activities selected for the ECHO data download are restricted to two subcategories of enforcement:  administrative â€“ formal (AFR), and judicial activities (JDC).
 * @member {String} CaseCategoryCode
 */
Crs0Cases.prototype['CaseCategoryCode'] = undefined;

/**
 * Identifies the type of action based on the enforcement authority used.    Administrative Formal Cases are non-judicial enforcement actions taken by EPA or a state under its own authority, without involving a judicial court process. An administrative action by EPA or a state agency may be in the form of: - A notice of violation or a Superfund notice letter. -> An administrative order or order (either with or without penalties) directing an individual, a business, or other entity to take action to come into compliance, or to clean up a site.  Judicial Cases are formal lawsuits, filed in court, against persons or entities that have failed to comply with statutory or regulatory requirements, with an administrative order, or who owe EPA response costs for cleaning up a Superfund site. These cases are filed by the U.S. Department of Justice on behalf of EPA and, in regulatory cases, by the State's Attorneys General for the states as well.  Criminal Cases occur when EPA or a state enforce against a company or person through a criminal action. Criminal actions are usually reserved for the most serious violations, those that are willful, or knowingly committed. A court conviction can result in fines or imprisonment.
 * @member {String} CaseCategoryDesc
 */
Crs0Cases.prototype['CaseCategoryDesc'] = undefined;

/**
 * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number. For criminal cases, the ID was generated in ECHO based on the following format: CR [prosecution_summary_id]. The source of the Prosecution Summary ID is the Summary of Criminal Prosecutions database.
 * @member {String} CaseName
 */
Crs0Cases.prototype['CaseName'] = undefined;

/**
 * A unique number identifying the enforcement action. For EPA civil cases, these numbers begin with either the two digit EPA Region Code, \"HQ\" (headquarters initiated cases), and \"EF\" or \"WF\" (Eastern or Western Field Office CAA Mobile Source Program cases); followed by the fiscal year in which the action was initiated. After the fiscal year there is a sequence number. State NPDES civil cases start with the two character post abbreviation, followed by a sequence number.
 * @member {String} CaseNumber
 */
Crs0Cases.prototype['CaseNumber'] = undefined;

/**
 * Code identifying the current status of an activity.
 * @member {String} CaseStatusCode
 */
Crs0Cases.prototype['CaseStatusCode'] = undefined;

/**
 * The description that identifies the current status of an activity.
 * @member {String} CaseStatusDesc
 */
Crs0Cases.prototype['CaseStatusDesc'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Comprehensive Environmental Response, Compensation, and Liability Act.
 * @member {String} CerclaFlag
 */
Crs0Cases.prototype['CerclaFlag'] = undefined;

/**
 * Civil vs. Criminal Indicator.
 * @member {String} CivilCriminalIndicator
 */
Crs0Cases.prototype['CivilCriminalIndicator'] = undefined;

/**
 * For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
 * @member {String} CostRecovery
 */
Crs0Cases.prototype['CostRecovery'] = undefined;

/**
 * @member {String} CourtDocketNumber
 */
Crs0Cases.prototype['CourtDocketNumber'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Clean Water Act.
 * @member {String} CwaFlag
 */
Crs0Cases.prototype['CwaFlag'] = undefined;

/**
 * The docket number assigned by the Department of Justice to EPA's Enforcement Action.  This number will identify cases in the Federal Register and in DOJ press releases when a settlement is lodged and entered.
 * @member {String} DOJDocketNmbr
 */
Crs0Cases.prototype['DOJDocketNmbr'] = undefined;

/**
 * The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
 * @member {String} DateClosed
 */
Crs0Cases.prototype['DateClosed'] = undefined;

/**
 * The filed/issued date can have different meanings depending on the Case Category. The date the judicial complaint is filed in U.S. District Court by the U.S. Attorney. The date that an administrative order is issued or the administrative complaint is filed.
 * @member {String} DateFiled
 */
Crs0Cases.prototype['DateFiled'] = undefined;

/**
 * The date a proposed consent decree is given to the Clerk of the Court for lodging in the District Court.  Upon lodging a consent decree, a notice is published in the Federal Register indicating nature of the proposed settlement and the acceptance period for public comments.
 * @member {String} DateLodged
 */
Crs0Cases.prototype['DateLodged'] = undefined;

/**
 * The result of the enforcement action.
 * @member {String} EnfOutcome
 */
Crs0Cases.prototype['EnfOutcome'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Emergency Planning and Community Right to Know Act.
 * @member {String} EpcraFlag
 */
Crs0Cases.prototype['EpcraFlag'] = undefined;

/**
 * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
 * @member {String} FedPenalty
 */
Crs0Cases.prototype['FedPenalty'] = undefined;

/**
 * A flag indicating that the  case is related to a Federally Owned facility.
 * @member {String} FederalFlag
 */
Crs0Cases.prototype['FederalFlag'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Federal Insecticide, Fungicide, and Rodenticide Act.
 * @member {String} FifraFlag
 */
Crs0Cases.prototype['FifraFlag'] = undefined;

/**
 * The lead agency (e.g., EPA, State) conducting the inspection
 * @member {String} Lead
 */
Crs0Cases.prototype['Lead'] = undefined;

/**
 * A sorting score for internal use.
 * @member {String} MaxScore
 */
Crs0Cases.prototype['MaxScore'] = undefined;

/**
 * Identifies the primary statute/law violated and cited in the enforcement action. Many of EPA's judicial actions are based on incidents that are violations of more than one statute. One law entered into the ICIS record is designated the primary law, which is considered the law that is most seriously violated and/or for which the most significant relief is sought.
 * @member {String} PrimaryLaw
 */
Crs0Cases.prototype['PrimaryLaw'] = undefined;

/**
 * A 6-digit code to classify industrial establishments, as identified in FRS. North American Industry Classification System (NAICS) has replaced the U.S. Standard Industrial Classification (SIC) system. For detailed information about NAICS, please refer to the U.S. Census Bureau NAICS webpage.
 * @member {String} PrimaryNAICSCode
 */
Crs0Cases.prototype['PrimaryNAICSCode'] = undefined;

/**
 * The Standard Industrial Classification (SIC) system code of the facility, as identified in FRS. SIC codes were established by the Census Bureau to identify processes, products and services. The SIC code describes the primary activity of the facility. The first two digits in the code define a major business sector; the last two digits denote a facility's specialty within the major sector.
 * @member {String} PrimarySICCode
 */
Crs0Cases.prototype['PrimarySICCode'] = undefined;

/**
 * Identifies the primary section violated and cited in the enforcement action.
 * @member {String} PrimarySection
 */
Crs0Cases.prototype['PrimarySection'] = undefined;

/**
 * Prosecution Summary Identifier.
 * @member {String} ProsecutionSummaryId
 */
Crs0Cases.prototype['ProsecutionSummaryId'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Resource Conservation and Recovery Act.
 * @member {String} RcraFlag
 */
Crs0Cases.prototype['RcraFlag'] = undefined;

/**
 * For civil enforcement actions, as part of a settlement, a defendant may voluntarily agree to undertake an environmentally beneficial project (Supplement Environmental Project) related to the violation in exchange for mitigation of the penalty to be paid.  It may not include activities a defendant must take to return to compliance with the law. The EPA has set out eight categories that can be acceptable SEPs: - Public Health - Pollution Prevention - Pollution Reduction - Environmental Restoration and Protection - Emergency Planning and Preparedness - Assessments and Audits - Environmental Compliance Promotion - Other Types of Projects Descriptions of each SEP category can be found on the EPA Supplemental Environmental Projects page.
 * @member {String} SEPCategories
 */
Crs0Cases.prototype['SEPCategories'] = undefined;

/**
 * The total value of all SEPs for all settlements at the enforcement case.
 * @member {String} SEPCost
 */
Crs0Cases.prototype['SEPCost'] = undefined;

/**
 * A description of the SEP. These actions do not include activities a violator must take to return to compliance with the law.
 * @member {String} SEPTexts
 */
Crs0Cases.prototype['SEPTexts'] = undefined;

/**
 * A flag indicating that the Primary Law cited for the case was the Safe Drinking Water Act.
 * @member {String} SdwaFlag
 */
Crs0Cases.prototype['SdwaFlag'] = undefined;

/**
 * For civil enforcement actions, the number of settlements associated with the case. Most enforcement actions tend to follow a one-case, one-settlement scenario. However, and in particular with judicial actions involving multiple defendants, more than one settlement may result.
 * @member {String} SettlementCnt
 */
Crs0Cases.prototype['SettlementCnt'] = undefined;

/**
 * For federal judicial actions, this is the date the settlement document is signed by the presiding judge and entered by the Clerk of the Court. At that point, the settlement becomes a binding court order. For administrative actions, this is the date that the final order is signed and issued by the enforcement authority.
 * @member {String} SettlementDate
 */
Crs0Cases.prototype['SettlementDate'] = undefined;

/**
 * The total State or Local Penalty amount collected pursuant to a Final Order.
 * @member {String} StateLocPenaltyAmt
 */
Crs0Cases.prototype['StateLocPenaltyAmt'] = undefined;

/**
 * For civil enforcement actions, the value of the costs incurred by the defendant/respondent to attain compliance with the law and restore the environment. This value does not include penalties, cost recovery, or costs associated with SEPs.
 * @member {String} TotalCompActionAmt
 */
Crs0Cases.prototype['TotalCompActionAmt'] = undefined;

/**
 * Flag indicating if the case is located on tribal land.
 * @member {String} TribalLandFlag
 */
Crs0Cases.prototype['TribalLandFlag'] = undefined;

/**
 * Flag indicating whether or not a facility has a TSCA ID
 * @member {String} TscaFlag
 */
Crs0Cases.prototype['TscaFlag'] = undefined;






export default Crs0Cases;

