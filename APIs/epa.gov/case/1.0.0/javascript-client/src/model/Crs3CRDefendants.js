/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Crs3CRDefendants model module.
 * @module model/Crs3CRDefendants
 * @version 1.0.0
 */
class Crs3CRDefendants {
    /**
     * Constructs a new <code>Crs3CRDefendants</code>.
     * Provides identifying information about the defendants and courts involved in the criminal enforcement case.
     * @alias module:model/Crs3CRDefendants
     * @param defendantType {String} The role of each defendant in the criminal enforcement case, either Principal Defendant or Defendant. Multiple defendants (up to fourteen) may be associated with one case, but only one is designated as principal.
     * @param district {String} The United States district courts are the trial courts of the federal court system.
     * @param docketNumber {String} The number the Clerk of the Court assigned to the case that is filed or to a consent decree when it is lodged. For administrative cases, this number is assigned to the case by the Regional Hearing Clerk.
     * @param name {String} The name of the case assigned to the enforcement action by the lead attorney. Generally, the primary defendant's name is used as the case name. For civil CERCLA cases, the facility/site name may be used.
     * @param state {String} The two letter abbreviation that represents the state or state equivalent for the U.S.
     */
    constructor(defendantType, district, docketNumber, name, state) { 
        
        Crs3CRDefendants.initialize(this, defendantType, district, docketNumber, name, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defendantType, district, docketNumber, name, state) { 
        obj['DefendantType'] = defendantType;
        obj['District'] = district;
        obj['DocketNumber'] = docketNumber;
        obj['Name'] = name;
        obj['State'] = state;
    }

    /**
     * Constructs a <code>Crs3CRDefendants</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs3CRDefendants} obj Optional instance to populate.
     * @return {module:model/Crs3CRDefendants} The populated <code>Crs3CRDefendants</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs3CRDefendants();

            if (data.hasOwnProperty('DefendantType')) {
                obj['DefendantType'] = ApiClient.convertToType(data['DefendantType'], 'String');
            }
            if (data.hasOwnProperty('District')) {
                obj['District'] = ApiClient.convertToType(data['District'], 'String');
            }
            if (data.hasOwnProperty('DocketNumber')) {
                obj['DocketNumber'] = ApiClient.convertToType(data['DocketNumber'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs3CRDefendants</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs3CRDefendants</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs3CRDefendants.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DefendantType'] && !(typeof data['DefendantType'] === 'string' || data['DefendantType'] instanceof String)) {
            throw new Error("Expected the field `DefendantType` to be a primitive type in the JSON string but got " + data['DefendantType']);
        }
        // ensure the json data is a string
        if (data['District'] && !(typeof data['District'] === 'string' || data['District'] instanceof String)) {
            throw new Error("Expected the field `District` to be a primitive type in the JSON string but got " + data['District']);
        }
        // ensure the json data is a string
        if (data['DocketNumber'] && !(typeof data['DocketNumber'] === 'string' || data['DocketNumber'] instanceof String)) {
            throw new Error("Expected the field `DocketNumber` to be a primitive type in the JSON string but got " + data['DocketNumber']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }

        return true;
    }


}

Crs3CRDefendants.RequiredProperties = ["DefendantType", "District", "DocketNumber", "Name", "State"];

/**
 * The role of each defendant in the criminal enforcement case, either Principal Defendant or Defendant. Multiple defendants (up to fourteen) may be associated with one case, but only one is designated as principal.
 * @member {String} DefendantType
 */
Crs3CRDefendants.prototype['DefendantType'] = undefined;

/**
 * The United States district courts are the trial courts of the federal court system.
 * @member {String} District
 */
Crs3CRDefendants.prototype['District'] = undefined;

/**
 * The number the Clerk of the Court assigned to the case that is filed or to a consent decree when it is lodged. For administrative cases, this number is assigned to the case by the Regional Hearing Clerk.
 * @member {String} DocketNumber
 */
Crs3CRDefendants.prototype['DocketNumber'] = undefined;

/**
 * The name of the case assigned to the enforcement action by the lead attorney. Generally, the primary defendant's name is used as the case name. For civil CERCLA cases, the facility/site name may be used.
 * @member {String} Name
 */
Crs3CRDefendants.prototype['Name'] = undefined;

/**
 * The two letter abbreviation that represents the state or state equivalent for the U.S.
 * @member {String} State
 */
Crs3CRDefendants.prototype['State'] = undefined;






export default Crs3CRDefendants;

