/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Crs1ComplianceSchedules from './Crs1ComplianceSchedules';
import Crs1ComplyingActions from './Crs1ComplyingActions';
import Crs1FinalOrderStatuses from './Crs1FinalOrderStatuses';
import Crs1PollutantReductions from './Crs1PollutantReductions';
import Crs1SupplementalEnvironmentalProjects from './Crs1SupplementalEnvironmentalProjects';

/**
 * The Crs1EnforcementConclusions model module.
 * @module model/Crs1EnforcementConclusions
 * @version 1.0.0
 */
class Crs1EnforcementConclusions {
    /**
     * Constructs a new <code>Crs1EnforcementConclusions</code>.
     * This section contains information about the conclusion(s) of the civil enforcement case, where it resulted in an order, consent decree, or other enforceable settlement.
     * @alias module:model/Crs1EnforcementConclusions
     * @param actualTerminationDate {String} The date on which the Final Order was terminated.
     * @param complianceActionCost {String} The total value of all SEPs for all settlements at the enforcement case.
     * @param complianceSchedules {Array.<module:model/Crs1ComplianceSchedules>} 
     * @param complyingActions {Array.<module:model/Crs1ComplyingActions>} 
     * @param costRecovery {String} For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
     * @param enforcementActionClosedDate {String} The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
     * @param enforcementConclusionId {String} The system-generated unique identifier of the Final Order to which the Compliance Action belongs.
     * @param enforcementConclusionName {String} The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.
     * @param enforcementConclusionType {String} A description of the enforcement instrument used by EPA to settle the case.
     * @param facilitiesInSettlement {String} The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.
     * @param federalPenalty {String} For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
     * @param finalOrderStatuses {Array.<module:model/Crs1FinalOrderStatuses>} 
     * @param pollutantReductions {Array.<module:model/Crs1PollutantReductions>} 
     * @param sEPCost {String} The total value of all SEPs for all settlements at the enforcement case.
     * @param settlementEnteredDate {String} The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.
     * @param settlementLodgedDate {String} The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).
     * @param statePenalty {String} The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
     * @param supplementalEnvironmentalProjects {Array.<module:model/Crs1SupplementalEnvironmentalProjects>} 
     */
    constructor(actualTerminationDate, complianceActionCost, complianceSchedules, complyingActions, costRecovery, enforcementActionClosedDate, enforcementConclusionId, enforcementConclusionName, enforcementConclusionType, facilitiesInSettlement, federalPenalty, finalOrderStatuses, pollutantReductions, sEPCost, settlementEnteredDate, settlementLodgedDate, statePenalty, supplementalEnvironmentalProjects) { 
        
        Crs1EnforcementConclusions.initialize(this, actualTerminationDate, complianceActionCost, complianceSchedules, complyingActions, costRecovery, enforcementActionClosedDate, enforcementConclusionId, enforcementConclusionName, enforcementConclusionType, facilitiesInSettlement, federalPenalty, finalOrderStatuses, pollutantReductions, sEPCost, settlementEnteredDate, settlementLodgedDate, statePenalty, supplementalEnvironmentalProjects);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actualTerminationDate, complianceActionCost, complianceSchedules, complyingActions, costRecovery, enforcementActionClosedDate, enforcementConclusionId, enforcementConclusionName, enforcementConclusionType, facilitiesInSettlement, federalPenalty, finalOrderStatuses, pollutantReductions, sEPCost, settlementEnteredDate, settlementLodgedDate, statePenalty, supplementalEnvironmentalProjects) { 
        obj['ActualTerminationDate'] = actualTerminationDate;
        obj['ComplianceActionCost'] = complianceActionCost;
        obj['ComplianceSchedules'] = complianceSchedules;
        obj['ComplyingActions'] = complyingActions;
        obj['CostRecovery'] = costRecovery;
        obj['EnforcementActionClosedDate'] = enforcementActionClosedDate;
        obj['EnforcementConclusionId'] = enforcementConclusionId;
        obj['EnforcementConclusionName'] = enforcementConclusionName;
        obj['EnforcementConclusionType'] = enforcementConclusionType;
        obj['FacilitiesInSettlement'] = facilitiesInSettlement;
        obj['FederalPenalty'] = federalPenalty;
        obj['FinalOrderStatuses'] = finalOrderStatuses;
        obj['PollutantReductions'] = pollutantReductions;
        obj['SEPCost'] = sEPCost;
        obj['SettlementEnteredDate'] = settlementEnteredDate;
        obj['SettlementLodgedDate'] = settlementLodgedDate;
        obj['StatePenalty'] = statePenalty;
        obj['SupplementalEnvironmentalProjects'] = supplementalEnvironmentalProjects;
    }

    /**
     * Constructs a <code>Crs1EnforcementConclusions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crs1EnforcementConclusions} obj Optional instance to populate.
     * @return {module:model/Crs1EnforcementConclusions} The populated <code>Crs1EnforcementConclusions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crs1EnforcementConclusions();

            if (data.hasOwnProperty('ActualTerminationDate')) {
                obj['ActualTerminationDate'] = ApiClient.convertToType(data['ActualTerminationDate'], 'String');
            }
            if (data.hasOwnProperty('ComplianceActionCost')) {
                obj['ComplianceActionCost'] = ApiClient.convertToType(data['ComplianceActionCost'], 'String');
            }
            if (data.hasOwnProperty('ComplianceSchedules')) {
                obj['ComplianceSchedules'] = ApiClient.convertToType(data['ComplianceSchedules'], [Crs1ComplianceSchedules]);
            }
            if (data.hasOwnProperty('ComplyingActions')) {
                obj['ComplyingActions'] = ApiClient.convertToType(data['ComplyingActions'], [Crs1ComplyingActions]);
            }
            if (data.hasOwnProperty('CostRecovery')) {
                obj['CostRecovery'] = ApiClient.convertToType(data['CostRecovery'], 'String');
            }
            if (data.hasOwnProperty('EnforcementActionClosedDate')) {
                obj['EnforcementActionClosedDate'] = ApiClient.convertToType(data['EnforcementActionClosedDate'], 'String');
            }
            if (data.hasOwnProperty('EnforcementConclusionId')) {
                obj['EnforcementConclusionId'] = ApiClient.convertToType(data['EnforcementConclusionId'], 'String');
            }
            if (data.hasOwnProperty('EnforcementConclusionName')) {
                obj['EnforcementConclusionName'] = ApiClient.convertToType(data['EnforcementConclusionName'], 'String');
            }
            if (data.hasOwnProperty('EnforcementConclusionType')) {
                obj['EnforcementConclusionType'] = ApiClient.convertToType(data['EnforcementConclusionType'], 'String');
            }
            if (data.hasOwnProperty('FacilitiesInSettlement')) {
                obj['FacilitiesInSettlement'] = ApiClient.convertToType(data['FacilitiesInSettlement'], 'String');
            }
            if (data.hasOwnProperty('FederalPenalty')) {
                obj['FederalPenalty'] = ApiClient.convertToType(data['FederalPenalty'], 'String');
            }
            if (data.hasOwnProperty('FinalOrderStatuses')) {
                obj['FinalOrderStatuses'] = ApiClient.convertToType(data['FinalOrderStatuses'], [Crs1FinalOrderStatuses]);
            }
            if (data.hasOwnProperty('PollutantReductions')) {
                obj['PollutantReductions'] = ApiClient.convertToType(data['PollutantReductions'], [Crs1PollutantReductions]);
            }
            if (data.hasOwnProperty('SEPCost')) {
                obj['SEPCost'] = ApiClient.convertToType(data['SEPCost'], 'String');
            }
            if (data.hasOwnProperty('SettlementEnteredDate')) {
                obj['SettlementEnteredDate'] = ApiClient.convertToType(data['SettlementEnteredDate'], 'String');
            }
            if (data.hasOwnProperty('SettlementLodgedDate')) {
                obj['SettlementLodgedDate'] = ApiClient.convertToType(data['SettlementLodgedDate'], 'String');
            }
            if (data.hasOwnProperty('StatePenalty')) {
                obj['StatePenalty'] = ApiClient.convertToType(data['StatePenalty'], 'String');
            }
            if (data.hasOwnProperty('SupplementalEnvironmentalProjects')) {
                obj['SupplementalEnvironmentalProjects'] = ApiClient.convertToType(data['SupplementalEnvironmentalProjects'], [Crs1SupplementalEnvironmentalProjects]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crs1EnforcementConclusions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crs1EnforcementConclusions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Crs1EnforcementConclusions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ActualTerminationDate'] && !(typeof data['ActualTerminationDate'] === 'string' || data['ActualTerminationDate'] instanceof String)) {
            throw new Error("Expected the field `ActualTerminationDate` to be a primitive type in the JSON string but got " + data['ActualTerminationDate']);
        }
        // ensure the json data is a string
        if (data['ComplianceActionCost'] && !(typeof data['ComplianceActionCost'] === 'string' || data['ComplianceActionCost'] instanceof String)) {
            throw new Error("Expected the field `ComplianceActionCost` to be a primitive type in the JSON string but got " + data['ComplianceActionCost']);
        }
        if (data['ComplianceSchedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ComplianceSchedules'])) {
                throw new Error("Expected the field `ComplianceSchedules` to be an array in the JSON data but got " + data['ComplianceSchedules']);
            }
            // validate the optional field `ComplianceSchedules` (array)
            for (const item of data['ComplianceSchedules']) {
                Crs1ComplianceSchedules.validateJSON(item);
            };
        }
        if (data['ComplyingActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ComplyingActions'])) {
                throw new Error("Expected the field `ComplyingActions` to be an array in the JSON data but got " + data['ComplyingActions']);
            }
            // validate the optional field `ComplyingActions` (array)
            for (const item of data['ComplyingActions']) {
                Crs1ComplyingActions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CostRecovery'] && !(typeof data['CostRecovery'] === 'string' || data['CostRecovery'] instanceof String)) {
            throw new Error("Expected the field `CostRecovery` to be a primitive type in the JSON string but got " + data['CostRecovery']);
        }
        // ensure the json data is a string
        if (data['EnforcementActionClosedDate'] && !(typeof data['EnforcementActionClosedDate'] === 'string' || data['EnforcementActionClosedDate'] instanceof String)) {
            throw new Error("Expected the field `EnforcementActionClosedDate` to be a primitive type in the JSON string but got " + data['EnforcementActionClosedDate']);
        }
        // ensure the json data is a string
        if (data['EnforcementConclusionId'] && !(typeof data['EnforcementConclusionId'] === 'string' || data['EnforcementConclusionId'] instanceof String)) {
            throw new Error("Expected the field `EnforcementConclusionId` to be a primitive type in the JSON string but got " + data['EnforcementConclusionId']);
        }
        // ensure the json data is a string
        if (data['EnforcementConclusionName'] && !(typeof data['EnforcementConclusionName'] === 'string' || data['EnforcementConclusionName'] instanceof String)) {
            throw new Error("Expected the field `EnforcementConclusionName` to be a primitive type in the JSON string but got " + data['EnforcementConclusionName']);
        }
        // ensure the json data is a string
        if (data['EnforcementConclusionType'] && !(typeof data['EnforcementConclusionType'] === 'string' || data['EnforcementConclusionType'] instanceof String)) {
            throw new Error("Expected the field `EnforcementConclusionType` to be a primitive type in the JSON string but got " + data['EnforcementConclusionType']);
        }
        // ensure the json data is a string
        if (data['FacilitiesInSettlement'] && !(typeof data['FacilitiesInSettlement'] === 'string' || data['FacilitiesInSettlement'] instanceof String)) {
            throw new Error("Expected the field `FacilitiesInSettlement` to be a primitive type in the JSON string but got " + data['FacilitiesInSettlement']);
        }
        // ensure the json data is a string
        if (data['FederalPenalty'] && !(typeof data['FederalPenalty'] === 'string' || data['FederalPenalty'] instanceof String)) {
            throw new Error("Expected the field `FederalPenalty` to be a primitive type in the JSON string but got " + data['FederalPenalty']);
        }
        if (data['FinalOrderStatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FinalOrderStatuses'])) {
                throw new Error("Expected the field `FinalOrderStatuses` to be an array in the JSON data but got " + data['FinalOrderStatuses']);
            }
            // validate the optional field `FinalOrderStatuses` (array)
            for (const item of data['FinalOrderStatuses']) {
                Crs1FinalOrderStatuses.validateJSON(item);
            };
        }
        if (data['PollutantReductions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PollutantReductions'])) {
                throw new Error("Expected the field `PollutantReductions` to be an array in the JSON data but got " + data['PollutantReductions']);
            }
            // validate the optional field `PollutantReductions` (array)
            for (const item of data['PollutantReductions']) {
                Crs1PollutantReductions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SEPCost'] && !(typeof data['SEPCost'] === 'string' || data['SEPCost'] instanceof String)) {
            throw new Error("Expected the field `SEPCost` to be a primitive type in the JSON string but got " + data['SEPCost']);
        }
        // ensure the json data is a string
        if (data['SettlementEnteredDate'] && !(typeof data['SettlementEnteredDate'] === 'string' || data['SettlementEnteredDate'] instanceof String)) {
            throw new Error("Expected the field `SettlementEnteredDate` to be a primitive type in the JSON string but got " + data['SettlementEnteredDate']);
        }
        // ensure the json data is a string
        if (data['SettlementLodgedDate'] && !(typeof data['SettlementLodgedDate'] === 'string' || data['SettlementLodgedDate'] instanceof String)) {
            throw new Error("Expected the field `SettlementLodgedDate` to be a primitive type in the JSON string but got " + data['SettlementLodgedDate']);
        }
        // ensure the json data is a string
        if (data['StatePenalty'] && !(typeof data['StatePenalty'] === 'string' || data['StatePenalty'] instanceof String)) {
            throw new Error("Expected the field `StatePenalty` to be a primitive type in the JSON string but got " + data['StatePenalty']);
        }
        if (data['SupplementalEnvironmentalProjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SupplementalEnvironmentalProjects'])) {
                throw new Error("Expected the field `SupplementalEnvironmentalProjects` to be an array in the JSON data but got " + data['SupplementalEnvironmentalProjects']);
            }
            // validate the optional field `SupplementalEnvironmentalProjects` (array)
            for (const item of data['SupplementalEnvironmentalProjects']) {
                Crs1SupplementalEnvironmentalProjects.validateJSON(item);
            };
        }

        return true;
    }


}

Crs1EnforcementConclusions.RequiredProperties = ["ActualTerminationDate", "ComplianceActionCost", "ComplianceSchedules", "ComplyingActions", "CostRecovery", "EnforcementActionClosedDate", "EnforcementConclusionId", "EnforcementConclusionName", "EnforcementConclusionType", "FacilitiesInSettlement", "FederalPenalty", "FinalOrderStatuses", "PollutantReductions", "SEPCost", "SettlementEnteredDate", "SettlementLodgedDate", "StatePenalty", "SupplementalEnvironmentalProjects"];

/**
 * The date on which the Final Order was terminated.
 * @member {String} ActualTerminationDate
 */
Crs1EnforcementConclusions.prototype['ActualTerminationDate'] = undefined;

/**
 * The total value of all SEPs for all settlements at the enforcement case.
 * @member {String} ComplianceActionCost
 */
Crs1EnforcementConclusions.prototype['ComplianceActionCost'] = undefined;

/**
 * @member {Array.<module:model/Crs1ComplianceSchedules>} ComplianceSchedules
 */
Crs1EnforcementConclusions.prototype['ComplianceSchedules'] = undefined;

/**
 * @member {Array.<module:model/Crs1ComplyingActions>} ComplyingActions
 */
Crs1EnforcementConclusions.prototype['ComplyingActions'] = undefined;

/**
 * For civil enforcement actions, cost recovery awarded is the amount of cost recovery ordered or agreed to be repaid by the responsible party of parties.
 * @member {String} CostRecovery
 */
Crs1EnforcementConclusions.prototype['CostRecovery'] = undefined;

/**
 * The date the actions requested in the final order have been completed by the recipient; or the termination date of the final order (if such a date is specified) has passed; or the enforcement action has been withdrawn or dismissed; or the enforcement action has been superseded by, or combined into, another related enforcement action addressing the same violations.
 * @member {String} EnforcementActionClosedDate
 */
Crs1EnforcementConclusions.prototype['EnforcementActionClosedDate'] = undefined;

/**
 * The system-generated unique identifier of the Final Order to which the Compliance Action belongs.
 * @member {String} EnforcementConclusionId
 */
Crs1EnforcementConclusions.prototype['EnforcementConclusionId'] = undefined;

/**
 * The name of a Final Order associated with an Enforcement Action as assigned by the Lead EPA Attorney for federal actions.
 * @member {String} EnforcementConclusionName
 */
Crs1EnforcementConclusions.prototype['EnforcementConclusionName'] = undefined;

/**
 * A description of the enforcement instrument used by EPA to settle the case.
 * @member {String} EnforcementConclusionType
 */
Crs1EnforcementConclusions.prototype['EnforcementConclusionType'] = undefined;

/**
 * The unique identification number assigned to a facility in the Facility Registry Service (FRS), for each facility included in the settlement.
 * @member {String} FacilitiesInSettlement
 */
Crs1EnforcementConclusions.prototype['FacilitiesInSettlement'] = undefined;

/**
 * For civil judicial Enforcement Actions, this amount is the Federal penalty assessed against the defendant(s) as specified in the final entered Consent Decree or Court Order.  For administrative Enforcement Actions, it is the penalty assessed in the Consent/Final Order.  It does not include the amount of the penalty mitigated due to a SEP or the amount shared with the state or local entities.  Interest payments associated with a penalty paid over time are not to be included in this amount.  It is the total Federal amount for each Final Order.
 * @member {String} FederalPenalty
 */
Crs1EnforcementConclusions.prototype['FederalPenalty'] = undefined;

/**
 * @member {Array.<module:model/Crs1FinalOrderStatuses>} FinalOrderStatuses
 */
Crs1EnforcementConclusions.prototype['FinalOrderStatuses'] = undefined;

/**
 * @member {Array.<module:model/Crs1PollutantReductions>} PollutantReductions
 */
Crs1EnforcementConclusions.prototype['PollutantReductions'] = undefined;

/**
 * The total value of all SEPs for all settlements at the enforcement case.
 * @member {String} SEPCost
 */
Crs1EnforcementConclusions.prototype['SEPCost'] = undefined;

/**
 * The civil case date the Final Order is signed by the presiding Judge and entered by the Clerk of the Court; it is the date the Clerk stamps on the document.  For an Administrative Formal EA, this is the Final Order Issued Date; for a Judicial EA, this is the Final Order Entered Date.
 * @member {String} SettlementEnteredDate
 */
Crs1EnforcementConclusions.prototype['SettlementEnteredDate'] = undefined;

/**
 * The date the settlement document is given to the Clerk of the Court for lodging in the District Court; it is the date the Clerk stamps on the document. (Federal Judicial EAs only).
 * @member {String} SettlementLodgedDate
 */
Crs1EnforcementConclusions.prototype['SettlementLodgedDate'] = undefined;

/**
 * The dollar penalty amount to be paid to a state or local enforcement authority that is party to a concluded enforcement action.
 * @member {String} StatePenalty
 */
Crs1EnforcementConclusions.prototype['StatePenalty'] = undefined;

/**
 * @member {Array.<module:model/Crs1SupplementalEnvironmentalProjects>} SupplementalEnvironmentalProjects
 */
Crs1EnforcementConclusions.prototype['SupplementalEnvironmentalProjects'] = undefined;






export default Crs1EnforcementConclusions;

