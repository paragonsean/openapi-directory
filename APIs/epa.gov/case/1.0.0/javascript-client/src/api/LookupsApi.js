/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Enforcement Case Search
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  CASE Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on civil cases entered into the  Integrated Compliance Information System (ICIS) and criminal cases entered into the Summary of Criminal Prosecutions database.   See Enforcement Case Search Help (https://echo.epa.gov/help/enforcement-case-search-help) for additional information on searching civil and criminal cases.  \\ The get_cases, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_case_info end point is self contained..    The recommended use scenario for get_cases, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_cases to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of case results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates, related to the returned cases, that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ In addition to the service endpoints listed above there are two detailed case report services, one for civil cases (get_case_report) and one for criminal cases (get_crcase_report).  See the Civil Enforcement Case Report Help (https://echo.epa.gov/help/reports/enforcement-case-report-help) and the Criminal Case Report Help (https://echo.epa.gov/help/reports/criminal-case-report-help) for additional information  on then data returned from these two services.    \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestLookupsIcisLawSectionsGet200Response from '../model/RestLookupsIcisLawSectionsGet200Response';

/**
* Lookups service.
* @module api/LookupsApi
* @version 1.0.0
*/
export default class LookupsApi {

    /**
    * Constructs a new LookupsApi. 
    * @alias module:api/LookupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restLookupsIcisLawSectionsGet operation.
     * @callback module:api/LookupsApi~restLookupsIcisLawSectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisLawSectionsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS Law Sections Lookup Service
     * Returns the ICIS Law Section Descriptions.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [statuteCode] 
     * @param {String} [statusFlag] 
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {Number} [sortOrder] 
     * @param {module:api/LookupsApi~restLookupsIcisLawSectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisLawSectionsGet200Response}
     */
    restLookupsIcisLawSectionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'statute_code': opts['statuteCode'],
        'status_flag': opts['statusFlag'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisLawSectionsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_law_sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restLookupsIcisLawSectionsPost operation.
     * @callback module:api/LookupsApi~restLookupsIcisLawSectionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestLookupsIcisLawSectionsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ECHO ICIS Law Sections Lookup Service
     * Returns the ICIS Law Section Descriptions.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [output] Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.
     * @param {String} [callback] JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.
     * @param {String} [statuteCode] 
     * @param {String} [statusFlag] 
     * @param {String} [searchTerm] Enter a partial or complete search phrase or word.
     * @param {String} [searchCode] Enter a partial or complete code value.
     * @param {Number} [sortOrder] 
     * @param {module:api/LookupsApi~restLookupsIcisLawSectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestLookupsIcisLawSectionsGet200Response}
     */
    restLookupsIcisLawSectionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'output': opts['output'],
        'callback': opts['callback'],
        'statute_code': opts['statuteCode'],
        'status_flag': opts['statusFlag'],
        'search_term': opts['searchTerm'],
        'search_code': opts['searchCode'],
        'sort_order': opts['sortOrder']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RestLookupsIcisLawSectionsGet200Response;
      return this.apiClient.callApi(
        '/rest_lookups.icis_law_sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
