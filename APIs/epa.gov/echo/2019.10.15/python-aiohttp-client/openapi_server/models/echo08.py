# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.echo06 import Echo06
from openapi_server.models.echo07 import Echo07
from openapi_server.models.qp0 import Qp0
from openapi_server import util


class Echo08(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad_system_ids: str=None, caa_rows: str=None, cv_rows: str=None, cwa_rows: str=None, cluster_output: Echo06=None, cluster_records: str=None, fea_rows: str=None, facilities: List[Echo07]=None, insp_rows: str=None, icon_base_url: str=None, indian_country_rows: str=None, inf_fea_rows: str=None, message: str=None, pop_up_base_url: str=None, query_id: str=None, query_parameters: List[Qp0]=None, query_rows: str=None, rcr_rows: str=None, sv_rows: str=None, service_base_url: str=None, tri_rows: str=None, total_penalties: str=None, v3_rows: str=None):
        """Echo08 - a model defined in OpenAPI

        :param bad_system_ids: The bad_system_ids of this Echo08.
        :param caa_rows: The caa_rows of this Echo08.
        :param cv_rows: The cv_rows of this Echo08.
        :param cwa_rows: The cwa_rows of this Echo08.
        :param cluster_output: The cluster_output of this Echo08.
        :param cluster_records: The cluster_records of this Echo08.
        :param fea_rows: The fea_rows of this Echo08.
        :param facilities: The facilities of this Echo08.
        :param insp_rows: The insp_rows of this Echo08.
        :param icon_base_url: The icon_base_url of this Echo08.
        :param indian_country_rows: The indian_country_rows of this Echo08.
        :param inf_fea_rows: The inf_fea_rows of this Echo08.
        :param message: The message of this Echo08.
        :param pop_up_base_url: The pop_up_base_url of this Echo08.
        :param query_id: The query_id of this Echo08.
        :param query_parameters: The query_parameters of this Echo08.
        :param query_rows: The query_rows of this Echo08.
        :param rcr_rows: The rcr_rows of this Echo08.
        :param sv_rows: The sv_rows of this Echo08.
        :param service_base_url: The service_base_url of this Echo08.
        :param tri_rows: The tri_rows of this Echo08.
        :param total_penalties: The total_penalties of this Echo08.
        :param v3_rows: The v3_rows of this Echo08.
        """
        self.openapi_types = {
            'bad_system_ids': str,
            'caa_rows': str,
            'cv_rows': str,
            'cwa_rows': str,
            'cluster_output': Echo06,
            'cluster_records': str,
            'fea_rows': str,
            'facilities': List[Echo07],
            'insp_rows': str,
            'icon_base_url': str,
            'indian_country_rows': str,
            'inf_fea_rows': str,
            'message': str,
            'pop_up_base_url': str,
            'query_id': str,
            'query_parameters': List[Qp0],
            'query_rows': str,
            'rcr_rows': str,
            'sv_rows': str,
            'service_base_url': str,
            'tri_rows': str,
            'total_penalties': str,
            'v3_rows': str
        }

        self.attribute_map = {
            'bad_system_ids': 'BadSystemIDs',
            'caa_rows': 'CAARows',
            'cv_rows': 'CVRows',
            'cwa_rows': 'CWARows',
            'cluster_output': 'ClusterOutput',
            'cluster_records': 'ClusterRecords',
            'fea_rows': 'FEARows',
            'facilities': 'Facilities',
            'insp_rows': 'INSPRows',
            'icon_base_url': 'IconBaseURL',
            'indian_country_rows': 'IndianCountryRows',
            'inf_fea_rows': 'InfFEARows',
            'message': 'Message',
            'pop_up_base_url': 'PopUpBaseURL',
            'query_id': 'QueryID',
            'query_parameters': 'QueryParameters',
            'query_rows': 'QueryRows',
            'rcr_rows': 'RCRRows',
            'sv_rows': 'SVRows',
            'service_base_url': 'ServiceBaseURL',
            'tri_rows': 'TRIRows',
            'total_penalties': 'TotalPenalties',
            'v3_rows': 'V3Rows'
        }

        self._bad_system_ids = bad_system_ids
        self._caa_rows = caa_rows
        self._cv_rows = cv_rows
        self._cwa_rows = cwa_rows
        self._cluster_output = cluster_output
        self._cluster_records = cluster_records
        self._fea_rows = fea_rows
        self._facilities = facilities
        self._insp_rows = insp_rows
        self._icon_base_url = icon_base_url
        self._indian_country_rows = indian_country_rows
        self._inf_fea_rows = inf_fea_rows
        self._message = message
        self._pop_up_base_url = pop_up_base_url
        self._query_id = query_id
        self._query_parameters = query_parameters
        self._query_rows = query_rows
        self._rcr_rows = rcr_rows
        self._sv_rows = sv_rows
        self._service_base_url = service_base_url
        self._tri_rows = tri_rows
        self._total_penalties = total_penalties
        self._v3_rows = v3_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Echo08':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The echo08 of this Echo08.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad_system_ids(self):
        """Gets the bad_system_ids of this Echo08.

        Identifies which passed query system identifiers are invalid.

        :return: The bad_system_ids of this Echo08.
        :rtype: str
        """
        return self._bad_system_ids

    @bad_system_ids.setter
    def bad_system_ids(self, bad_system_ids):
        """Sets the bad_system_ids of this Echo08.

        Identifies which passed query system identifiers are invalid.

        :param bad_system_ids: The bad_system_ids of this Echo08.
        :type bad_system_ids: str
        """
        if bad_system_ids is None:
            raise ValueError("Invalid value for `bad_system_ids`, must not be `None`")

        self._bad_system_ids = bad_system_ids

    @property
    def caa_rows(self):
        """Gets the caa_rows of this Echo08.

        The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.

        :return: The caa_rows of this Echo08.
        :rtype: str
        """
        return self._caa_rows

    @caa_rows.setter
    def caa_rows(self, caa_rows):
        """Sets the caa_rows of this Echo08.

        The number of facilities or cases within the result set that have Clean Air Act (CAA) permits.

        :param caa_rows: The caa_rows of this Echo08.
        :type caa_rows: str
        """
        if caa_rows is None:
            raise ValueError("Invalid value for `caa_rows`, must not be `None`")

        self._caa_rows = caa_rows

    @property
    def cv_rows(self):
        """Gets the cv_rows of this Echo08.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :return: The cv_rows of this Echo08.
        :rtype: str
        """
        return self._cv_rows

    @cv_rows.setter
    def cv_rows(self, cv_rows):
        """Sets the cv_rows of this Echo08.

        Summary count of the number of CWA facilities or SDWA public drinking water systems with current violations.

        :param cv_rows: The cv_rows of this Echo08.
        :type cv_rows: str
        """
        if cv_rows is None:
            raise ValueError("Invalid value for `cv_rows`, must not be `None`")

        self._cv_rows = cv_rows

    @property
    def cwa_rows(self):
        """Gets the cwa_rows of this Echo08.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :return: The cwa_rows of this Echo08.
        :rtype: str
        """
        return self._cwa_rows

    @cwa_rows.setter
    def cwa_rows(self, cwa_rows):
        """Sets the cwa_rows of this Echo08.

        The number of facilities or cases within the results set that have Clean Water Act (CWA) permits.

        :param cwa_rows: The cwa_rows of this Echo08.
        :type cwa_rows: str
        """
        if cwa_rows is None:
            raise ValueError("Invalid value for `cwa_rows`, must not be `None`")

        self._cwa_rows = cwa_rows

    @property
    def cluster_output(self):
        """Gets the cluster_output of this Echo08.


        :return: The cluster_output of this Echo08.
        :rtype: Echo06
        """
        return self._cluster_output

    @cluster_output.setter
    def cluster_output(self, cluster_output):
        """Sets the cluster_output of this Echo08.


        :param cluster_output: The cluster_output of this Echo08.
        :type cluster_output: Echo06
        """

        self._cluster_output = cluster_output

    @property
    def cluster_records(self):
        """Gets the cluster_records of this Echo08.

        Number of clusters returned.

        :return: The cluster_records of this Echo08.
        :rtype: str
        """
        return self._cluster_records

    @cluster_records.setter
    def cluster_records(self, cluster_records):
        """Sets the cluster_records of this Echo08.

        Number of clusters returned.

        :param cluster_records: The cluster_records of this Echo08.
        :type cluster_records: str
        """

        self._cluster_records = cluster_records

    @property
    def fea_rows(self):
        """Gets the fea_rows of this Echo08.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :return: The fea_rows of this Echo08.
        :rtype: str
        """
        return self._fea_rows

    @fea_rows.setter
    def fea_rows(self, fea_rows):
        """Sets the fea_rows of this Echo08.

        Summary count of the number of facilities with a formal enforcement action in the past five years

        :param fea_rows: The fea_rows of this Echo08.
        :type fea_rows: str
        """
        if fea_rows is None:
            raise ValueError("Invalid value for `fea_rows`, must not be `None`")

        self._fea_rows = fea_rows

    @property
    def facilities(self):
        """Gets the facilities of this Echo08.

        A complex array of facility information.

        :return: The facilities of this Echo08.
        :rtype: List[Echo07]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Echo08.

        A complex array of facility information.

        :param facilities: The facilities of this Echo08.
        :type facilities: List[Echo07]
        """

        self._facilities = facilities

    @property
    def insp_rows(self):
        """Gets the insp_rows of this Echo08.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :return: The insp_rows of this Echo08.
        :rtype: str
        """
        return self._insp_rows

    @insp_rows.setter
    def insp_rows(self, insp_rows):
        """Sets the insp_rows of this Echo08.

        Number of facilities with insp_5yr_flag populated (CWP_DATE_LAST_INSPECTION)

        :param insp_rows: The insp_rows of this Echo08.
        :type insp_rows: str
        """
        if insp_rows is None:
            raise ValueError("Invalid value for `insp_rows`, must not be `None`")

        self._insp_rows = insp_rows

    @property
    def icon_base_url(self):
        """Gets the icon_base_url of this Echo08.

        URL where all the icons are located

        :return: The icon_base_url of this Echo08.
        :rtype: str
        """
        return self._icon_base_url

    @icon_base_url.setter
    def icon_base_url(self, icon_base_url):
        """Sets the icon_base_url of this Echo08.

        URL where all the icons are located

        :param icon_base_url: The icon_base_url of this Echo08.
        :type icon_base_url: str
        """
        if icon_base_url is None:
            raise ValueError("Invalid value for `icon_base_url`, must not be `None`")

        self._icon_base_url = icon_base_url

    @property
    def indian_country_rows(self):
        """Gets the indian_country_rows of this Echo08.

        Number of facilities with tribal_flag populated

        :return: The indian_country_rows of this Echo08.
        :rtype: str
        """
        return self._indian_country_rows

    @indian_country_rows.setter
    def indian_country_rows(self, indian_country_rows):
        """Sets the indian_country_rows of this Echo08.

        Number of facilities with tribal_flag populated

        :param indian_country_rows: The indian_country_rows of this Echo08.
        :type indian_country_rows: str
        """
        if indian_country_rows is None:
            raise ValueError("Invalid value for `indian_country_rows`, must not be `None`")

        self._indian_country_rows = indian_country_rows

    @property
    def inf_fea_rows(self):
        """Gets the inf_fea_rows of this Echo08.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :return: The inf_fea_rows of this Echo08.
        :rtype: str
        """
        return self._inf_fea_rows

    @inf_fea_rows.setter
    def inf_fea_rows(self, inf_fea_rows):
        """Sets the inf_fea_rows of this Echo08.

        Number of facilities with infea_5yr_flag populated (INFORMAL_ENF_ACT_COUNT > 0)

        :param inf_fea_rows: The inf_fea_rows of this Echo08.
        :type inf_fea_rows: str
        """
        if inf_fea_rows is None:
            raise ValueError("Invalid value for `inf_fea_rows`, must not be `None`")

        self._inf_fea_rows = inf_fea_rows

    @property
    def message(self):
        """Gets the message of this Echo08.

        Field to record messages (typically performance-related) about packet processing

        :return: The message of this Echo08.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Echo08.

        Field to record messages (typically performance-related) about packet processing

        :param message: The message of this Echo08.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def pop_up_base_url(self):
        """Gets the pop_up_base_url of this Echo08.

        Combine this URL with the PUC to get popup info

        :return: The pop_up_base_url of this Echo08.
        :rtype: str
        """
        return self._pop_up_base_url

    @pop_up_base_url.setter
    def pop_up_base_url(self, pop_up_base_url):
        """Sets the pop_up_base_url of this Echo08.

        Combine this URL with the PUC to get popup info

        :param pop_up_base_url: The pop_up_base_url of this Echo08.
        :type pop_up_base_url: str
        """
        if pop_up_base_url is None:
            raise ValueError("Invalid value for `pop_up_base_url`, must not be `None`")

        self._pop_up_base_url = pop_up_base_url

    @property
    def query_id(self):
        """Gets the query_id of this Echo08.

        Sequential number assigned to entire search result

        :return: The query_id of this Echo08.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this Echo08.

        Sequential number assigned to entire search result

        :param query_id: The query_id of this Echo08.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")

        self._query_id = query_id

    @property
    def query_parameters(self):
        """Gets the query_parameters of this Echo08.

        A list of submitted query parameters and their values.

        :return: The query_parameters of this Echo08.
        :rtype: List[Qp0]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this Echo08.

        A list of submitted query parameters and their values.

        :param query_parameters: The query_parameters of this Echo08.
        :type query_parameters: List[Qp0]
        """
        if query_parameters is None:
            raise ValueError("Invalid value for `query_parameters`, must not be `None`")

        self._query_parameters = query_parameters

    @property
    def query_rows(self):
        """Gets the query_rows of this Echo08.

        Number of query results returned

        :return: The query_rows of this Echo08.
        :rtype: str
        """
        return self._query_rows

    @query_rows.setter
    def query_rows(self, query_rows):
        """Sets the query_rows of this Echo08.

        Number of query results returned

        :param query_rows: The query_rows of this Echo08.
        :type query_rows: str
        """
        if query_rows is None:
            raise ValueError("Invalid value for `query_rows`, must not be `None`")

        self._query_rows = query_rows

    @property
    def rcr_rows(self):
        """Gets the rcr_rows of this Echo08.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :return: The rcr_rows of this Echo08.
        :rtype: str
        """
        return self._rcr_rows

    @rcr_rows.setter
    def rcr_rows(self, rcr_rows):
        """Sets the rcr_rows of this Echo08.

        The number of facilities or cases within the results set that have Resource Conservation and Recovery Action (RCRA) permits.

        :param rcr_rows: The rcr_rows of this Echo08.
        :type rcr_rows: str
        """
        if rcr_rows is None:
            raise ValueError("Invalid value for `rcr_rows`, must not be `None`")

        self._rcr_rows = rcr_rows

    @property
    def sv_rows(self):
        """Gets the sv_rows of this Echo08.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :return: The sv_rows of this Echo08.
        :rtype: str
        """
        return self._sv_rows

    @sv_rows.setter
    def sv_rows(self, sv_rows):
        """Sets the sv_rows of this Echo08.

        Number of facilities with curr_sv_flag populated (CWP_STATUS = \"Significant Violation\")

        :param sv_rows: The sv_rows of this Echo08.
        :type sv_rows: str
        """
        if sv_rows is None:
            raise ValueError("Invalid value for `sv_rows`, must not be `None`")

        self._sv_rows = sv_rows

    @property
    def service_base_url(self):
        """Gets the service_base_url of this Echo08.

        The base service URL.

        :return: The service_base_url of this Echo08.
        :rtype: str
        """
        return self._service_base_url

    @service_base_url.setter
    def service_base_url(self, service_base_url):
        """Sets the service_base_url of this Echo08.

        The base service URL.

        :param service_base_url: The service_base_url of this Echo08.
        :type service_base_url: str
        """
        if service_base_url is None:
            raise ValueError("Invalid value for `service_base_url`, must not be `None`")

        self._service_base_url = service_base_url

    @property
    def tri_rows(self):
        """Gets the tri_rows of this Echo08.

        The number of facilities within the results set that have Toxics Release Inventory (TRI) permits.

        :return: The tri_rows of this Echo08.
        :rtype: str
        """
        return self._tri_rows

    @tri_rows.setter
    def tri_rows(self, tri_rows):
        """Sets the tri_rows of this Echo08.

        The number of facilities within the results set that have Toxics Release Inventory (TRI) permits.

        :param tri_rows: The tri_rows of this Echo08.
        :type tri_rows: str
        """
        if tri_rows is None:
            raise ValueError("Invalid value for `tri_rows`, must not be `None`")

        self._tri_rows = tri_rows

    @property
    def total_penalties(self):
        """Gets the total_penalties of this Echo08.

        The total dollar amount of either assessed or final penalties within the five year time period

        :return: The total_penalties of this Echo08.
        :rtype: str
        """
        return self._total_penalties

    @total_penalties.setter
    def total_penalties(self, total_penalties):
        """Sets the total_penalties of this Echo08.

        The total dollar amount of either assessed or final penalties within the five year time period

        :param total_penalties: The total_penalties of this Echo08.
        :type total_penalties: str
        """
        if total_penalties is None:
            raise ValueError("Invalid value for `total_penalties`, must not be `None`")

        self._total_penalties = total_penalties

    @property
    def v3_rows(self):
        """Gets the v3_rows of this Echo08.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :return: The v3_rows of this Echo08.
        :rtype: str
        """
        return self._v3_rows

    @v3_rows.setter
    def v3_rows(self, v3_rows):
        """Sets the v3_rows of this Echo08.

        Number of facilities having one or more quarters in non-compliance (QNC) in the last three years

        :param v3_rows: The v3_rows of this Echo08.
        :type v3_rows: str
        """
        if v3_rows is None:
            raise ValueError("Invalid value for `v3_rows`, must not be `None`")

        self._v3_rows = v3_rows
