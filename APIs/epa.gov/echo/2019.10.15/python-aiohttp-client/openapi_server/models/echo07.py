# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Echo07(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air_flag: str=None, airids: str=None, active_lower48: str=None, biosolids_flag: str=None, caa3yr_compl_qtrs_history: str=None, caa_compliance_status: str=None, caa_date_last_formal_action: str=None, caa_days_last_evaluation: str=None, caa_evaluation_count: str=None, caa_formal_action_count: str=None, caa_hpv_flag: str=None, caa_informal_count: str=None, caa_last_penalty_amt: str=None, caa_last_penalty_date: str=None, caanaics: str=None, caa_penalties: str=None, caa_permit_types: str=None, caa_qtrs_with_nc: str=None, caasics: str=None, cwa13qtrs_compl_history: str=None, cwa13qtrs_efflnt_exceedances: str=None, cwa3_yr_qncr_codes: str=None, cwa_compliance_status: str=None, cwa_compliance_tracking: str=None, cwa_date_last_formal_action: str=None, cwa_days_last_inspection: str=None, cwa_formal_action_count: str=None, cwa_informal_count: str=None, cwa_inspection_count: str=None, cwa_last_penalty_amt: str=None, cwa_last_penalty_date: str=None, cwanaics: str=None, cwa_penalties: str=None, cwa_permit_types: str=None, cwa_qtrs_with_nc: str=None, cwasics: str=None, cwasnc_flag: str=None, camd_ids: str=None, census_block_group: str=None, curr_sv_flag: str=None, curr_vio_flag: str=None, dfr_url: str=None, ea5yr_flag: str=None, eff_charts_flag: str=None, eis_flag: str=None, eis_ids: str=None, ejscreen_flag: str=None, ejscreen_flag_us: str=None, epcra_inspections5yr: str=None, fac3yr_compliance_history: str=None, fac_accuracy_meters: str=None, fac_active_flag: str=None, fac_chesapeake_bay_flg: str=None, fac_city: str=None, fac_collection_method: str=None, fac_compliance_status: str=None, fac_county: str=None, fac_date_last_formal_act_epa: str=None, fac_date_last_formal_act_st: str=None, fac_date_last_formal_action: str=None, fac_date_last_informal_act_epa: str=None, fac_date_last_informal_act_st: str=None, fac_date_last_informal_action: str=None, fac_date_last_inspection: str=None, fac_date_last_inspection_epa: str=None, fac_date_last_inspection_state: str=None, fac_date_last_penalty: str=None, fac_days_last_inspection: str=None, fac_derived_cb2010: str=None, fac_derived_cd113: str=None, fac_derived_huc: str=None, fac_derived_rad_wbdhu12: str=None, fac_derived_rad_wbdhu12_name: str=None, fac_derived_rad_wbdhu8: str=None, fac_derived_rad_wbdhu8_name: str=None, fac_derived_stcty_fips: str=None, fac_derived_tr_ibes: str=None, fac_derived_wbd: str=None, fac_derived_wbdhu12_name: str=None, fac_derived_wbdhu8: str=None, fac_derived_wbdhu8_name: str=None, fac_derived_zip: str=None, fac_epa_region: str=None, fac_fips_code: str=None, fac_federal_agency: str=None, fac_federal_agency_name: str=None, fac_federal_flg: str=None, fac_formal_action_count: str=None, fac_imp_water_flg: str=None, fac_indian_cntry_flg: str=None, fac_indian_spatial_flg: str=None, fac_informal_count: str=None, fac_inspection_count: str=None, fac_last_penalty_amt: str=None, fac_lat: str=None, fac_long: str=None, fac_major_flag: str=None, fac_map_flg: str=None, fac_map_icon: str=None, fac_myrtk_universe: str=None, fac_naics_codes: str=None, fac_naa_flag: str=None, fac_name: str=None, fac_penalty_count: str=None, fac_percent_minority: str=None, fac_pop_den: str=None, fac_programs_with_snc: str=None, fac_qtrs_with_nc: str=None, fac_reference_point: str=None, fac_sic_codes: str=None, fac_snc_flg: str=None, fac_state: str=None, fac_std_county_name: str=None, fac_street: str=None, fac_total_penalties: str=None, fac_us_mex_border_flg: str=None, fac_zip: str=None, fec_case_ids: str=None, fec_last_case_date: str=None, fec_number_of_cases: str=None, fec_total_penalties: str=None, fifra_inspections5yr: str=None, ghgco2_releases: str=None, ghg_flag: str=None, ghgids: str=None, has_poll_rpt: str=None, infea5yr_flag: str=None, insp5yr_flag: str=None, lower48: str=None, max_pctile_us: str=None, max_score: str=None, nc: str=None, npdes_flag: str=None, npdesids: str=None, naa_categories: str=None, naa_pollutants: str=None, object_id: str=None, over80_count_us: str=None, pctile_cancer_us: str=None, pctile_dpm_us: str=None, pctile_o3_us: str=None, pctile_pctpre1960_us: str=None, pctile_pm_us: str=None, pctile_proximity_npdesus: str=None, pctile_proximity_npl_us: str=None, pctile_proximity_rmp_us: str=None, pctile_proximity_tsdf_us: str=None, pctile_resp_us: str=None, pctile_traffic_score_us: str=None, rcra3yr_compl_qtrs_history: str=None, rcra_compliance_status: str=None, rcra_date_last_formal_action: str=None, rcra_days_last_evaluation: str=None, rcra_flag: str=None, rcra_formal_action_count: str=None, rcraids: str=None, rcra_informal_count: str=None, rcra_inspection_count: str=None, rcra_last_penalty_amt: str=None, rcra_last_penalty_date: str=None, rcranaics: str=None, rcra_penalties: str=None, rcra_permit_types: str=None, rcra_qtrs_with_nc: str=None, rcrasnc_flag: str=None, registry_id: str=None, rmp_ids: str=None, sdwa3yr_compl_qtrs_history: str=None, sdwa_compliance_status: str=None, sdwa_formal_action_count: str=None, sdwaids: str=None, sdwa_informal_count: str=None, sdwa_inspections5yr: str=None, sdwa_qtrs_with_nc: str=None, sdwasnc_flag: str=None, sdwa_system_types: str=None, sdwis_flag: str=None, score: str=None, sems_flag: str=None, sems_ids: str=None, source_id: str=None, tri_flag: str=None, triids: str=None, tri_off_site_transfers: str=None, trion_site_releases: str=None, tri_releases_transfers: str=None, tri_reporter: str=None, tri_reporter_in_past: str=None, tr_ibal_flag: str=None, tsca_flag: str=None, tsca_ids: str=None, tsca_inspections5yr: str=None, viol_flag: str=None, web_docs: str=None):
        """Echo07 - a model defined in OpenAPI

        :param air_flag: The air_flag of this Echo07.
        :param airids: The airids of this Echo07.
        :param active_lower48: The active_lower48 of this Echo07.
        :param biosolids_flag: The biosolids_flag of this Echo07.
        :param caa3yr_compl_qtrs_history: The caa3yr_compl_qtrs_history of this Echo07.
        :param caa_compliance_status: The caa_compliance_status of this Echo07.
        :param caa_date_last_formal_action: The caa_date_last_formal_action of this Echo07.
        :param caa_days_last_evaluation: The caa_days_last_evaluation of this Echo07.
        :param caa_evaluation_count: The caa_evaluation_count of this Echo07.
        :param caa_formal_action_count: The caa_formal_action_count of this Echo07.
        :param caa_hpv_flag: The caa_hpv_flag of this Echo07.
        :param caa_informal_count: The caa_informal_count of this Echo07.
        :param caa_last_penalty_amt: The caa_last_penalty_amt of this Echo07.
        :param caa_last_penalty_date: The caa_last_penalty_date of this Echo07.
        :param caanaics: The caanaics of this Echo07.
        :param caa_penalties: The caa_penalties of this Echo07.
        :param caa_permit_types: The caa_permit_types of this Echo07.
        :param caa_qtrs_with_nc: The caa_qtrs_with_nc of this Echo07.
        :param caasics: The caasics of this Echo07.
        :param cwa13qtrs_compl_history: The cwa13qtrs_compl_history of this Echo07.
        :param cwa13qtrs_efflnt_exceedances: The cwa13qtrs_efflnt_exceedances of this Echo07.
        :param cwa3_yr_qncr_codes: The cwa3_yr_qncr_codes of this Echo07.
        :param cwa_compliance_status: The cwa_compliance_status of this Echo07.
        :param cwa_compliance_tracking: The cwa_compliance_tracking of this Echo07.
        :param cwa_date_last_formal_action: The cwa_date_last_formal_action of this Echo07.
        :param cwa_days_last_inspection: The cwa_days_last_inspection of this Echo07.
        :param cwa_formal_action_count: The cwa_formal_action_count of this Echo07.
        :param cwa_informal_count: The cwa_informal_count of this Echo07.
        :param cwa_inspection_count: The cwa_inspection_count of this Echo07.
        :param cwa_last_penalty_amt: The cwa_last_penalty_amt of this Echo07.
        :param cwa_last_penalty_date: The cwa_last_penalty_date of this Echo07.
        :param cwanaics: The cwanaics of this Echo07.
        :param cwa_penalties: The cwa_penalties of this Echo07.
        :param cwa_permit_types: The cwa_permit_types of this Echo07.
        :param cwa_qtrs_with_nc: The cwa_qtrs_with_nc of this Echo07.
        :param cwasics: The cwasics of this Echo07.
        :param cwasnc_flag: The cwasnc_flag of this Echo07.
        :param camd_ids: The camd_ids of this Echo07.
        :param census_block_group: The census_block_group of this Echo07.
        :param curr_sv_flag: The curr_sv_flag of this Echo07.
        :param curr_vio_flag: The curr_vio_flag of this Echo07.
        :param dfr_url: The dfr_url of this Echo07.
        :param ea5yr_flag: The ea5yr_flag of this Echo07.
        :param eff_charts_flag: The eff_charts_flag of this Echo07.
        :param eis_flag: The eis_flag of this Echo07.
        :param eis_ids: The eis_ids of this Echo07.
        :param ejscreen_flag: The ejscreen_flag of this Echo07.
        :param ejscreen_flag_us: The ejscreen_flag_us of this Echo07.
        :param epcra_inspections5yr: The epcra_inspections5yr of this Echo07.
        :param fac3yr_compliance_history: The fac3yr_compliance_history of this Echo07.
        :param fac_accuracy_meters: The fac_accuracy_meters of this Echo07.
        :param fac_active_flag: The fac_active_flag of this Echo07.
        :param fac_chesapeake_bay_flg: The fac_chesapeake_bay_flg of this Echo07.
        :param fac_city: The fac_city of this Echo07.
        :param fac_collection_method: The fac_collection_method of this Echo07.
        :param fac_compliance_status: The fac_compliance_status of this Echo07.
        :param fac_county: The fac_county of this Echo07.
        :param fac_date_last_formal_act_epa: The fac_date_last_formal_act_epa of this Echo07.
        :param fac_date_last_formal_act_st: The fac_date_last_formal_act_st of this Echo07.
        :param fac_date_last_formal_action: The fac_date_last_formal_action of this Echo07.
        :param fac_date_last_informal_act_epa: The fac_date_last_informal_act_epa of this Echo07.
        :param fac_date_last_informal_act_st: The fac_date_last_informal_act_st of this Echo07.
        :param fac_date_last_informal_action: The fac_date_last_informal_action of this Echo07.
        :param fac_date_last_inspection: The fac_date_last_inspection of this Echo07.
        :param fac_date_last_inspection_epa: The fac_date_last_inspection_epa of this Echo07.
        :param fac_date_last_inspection_state: The fac_date_last_inspection_state of this Echo07.
        :param fac_date_last_penalty: The fac_date_last_penalty of this Echo07.
        :param fac_days_last_inspection: The fac_days_last_inspection of this Echo07.
        :param fac_derived_cb2010: The fac_derived_cb2010 of this Echo07.
        :param fac_derived_cd113: The fac_derived_cd113 of this Echo07.
        :param fac_derived_huc: The fac_derived_huc of this Echo07.
        :param fac_derived_rad_wbdhu12: The fac_derived_rad_wbdhu12 of this Echo07.
        :param fac_derived_rad_wbdhu12_name: The fac_derived_rad_wbdhu12_name of this Echo07.
        :param fac_derived_rad_wbdhu8: The fac_derived_rad_wbdhu8 of this Echo07.
        :param fac_derived_rad_wbdhu8_name: The fac_derived_rad_wbdhu8_name of this Echo07.
        :param fac_derived_stcty_fips: The fac_derived_stcty_fips of this Echo07.
        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Echo07.
        :param fac_derived_wbd: The fac_derived_wbd of this Echo07.
        :param fac_derived_wbdhu12_name: The fac_derived_wbdhu12_name of this Echo07.
        :param fac_derived_wbdhu8: The fac_derived_wbdhu8 of this Echo07.
        :param fac_derived_wbdhu8_name: The fac_derived_wbdhu8_name of this Echo07.
        :param fac_derived_zip: The fac_derived_zip of this Echo07.
        :param fac_epa_region: The fac_epa_region of this Echo07.
        :param fac_fips_code: The fac_fips_code of this Echo07.
        :param fac_federal_agency: The fac_federal_agency of this Echo07.
        :param fac_federal_agency_name: The fac_federal_agency_name of this Echo07.
        :param fac_federal_flg: The fac_federal_flg of this Echo07.
        :param fac_formal_action_count: The fac_formal_action_count of this Echo07.
        :param fac_imp_water_flg: The fac_imp_water_flg of this Echo07.
        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Echo07.
        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Echo07.
        :param fac_informal_count: The fac_informal_count of this Echo07.
        :param fac_inspection_count: The fac_inspection_count of this Echo07.
        :param fac_last_penalty_amt: The fac_last_penalty_amt of this Echo07.
        :param fac_lat: The fac_lat of this Echo07.
        :param fac_long: The fac_long of this Echo07.
        :param fac_major_flag: The fac_major_flag of this Echo07.
        :param fac_map_flg: The fac_map_flg of this Echo07.
        :param fac_map_icon: The fac_map_icon of this Echo07.
        :param fac_myrtk_universe: The fac_myrtk_universe of this Echo07.
        :param fac_naics_codes: The fac_naics_codes of this Echo07.
        :param fac_naa_flag: The fac_naa_flag of this Echo07.
        :param fac_name: The fac_name of this Echo07.
        :param fac_penalty_count: The fac_penalty_count of this Echo07.
        :param fac_percent_minority: The fac_percent_minority of this Echo07.
        :param fac_pop_den: The fac_pop_den of this Echo07.
        :param fac_programs_with_snc: The fac_programs_with_snc of this Echo07.
        :param fac_qtrs_with_nc: The fac_qtrs_with_nc of this Echo07.
        :param fac_reference_point: The fac_reference_point of this Echo07.
        :param fac_sic_codes: The fac_sic_codes of this Echo07.
        :param fac_snc_flg: The fac_snc_flg of this Echo07.
        :param fac_state: The fac_state of this Echo07.
        :param fac_std_county_name: The fac_std_county_name of this Echo07.
        :param fac_street: The fac_street of this Echo07.
        :param fac_total_penalties: The fac_total_penalties of this Echo07.
        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Echo07.
        :param fac_zip: The fac_zip of this Echo07.
        :param fec_case_ids: The fec_case_ids of this Echo07.
        :param fec_last_case_date: The fec_last_case_date of this Echo07.
        :param fec_number_of_cases: The fec_number_of_cases of this Echo07.
        :param fec_total_penalties: The fec_total_penalties of this Echo07.
        :param fifra_inspections5yr: The fifra_inspections5yr of this Echo07.
        :param ghgco2_releases: The ghgco2_releases of this Echo07.
        :param ghg_flag: The ghg_flag of this Echo07.
        :param ghgids: The ghgids of this Echo07.
        :param has_poll_rpt: The has_poll_rpt of this Echo07.
        :param infea5yr_flag: The infea5yr_flag of this Echo07.
        :param insp5yr_flag: The insp5yr_flag of this Echo07.
        :param lower48: The lower48 of this Echo07.
        :param max_pctile_us: The max_pctile_us of this Echo07.
        :param max_score: The max_score of this Echo07.
        :param nc: The nc of this Echo07.
        :param npdes_flag: The npdes_flag of this Echo07.
        :param npdesids: The npdesids of this Echo07.
        :param naa_categories: The naa_categories of this Echo07.
        :param naa_pollutants: The naa_pollutants of this Echo07.
        :param object_id: The object_id of this Echo07.
        :param over80_count_us: The over80_count_us of this Echo07.
        :param pctile_cancer_us: The pctile_cancer_us of this Echo07.
        :param pctile_dpm_us: The pctile_dpm_us of this Echo07.
        :param pctile_o3_us: The pctile_o3_us of this Echo07.
        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Echo07.
        :param pctile_pm_us: The pctile_pm_us of this Echo07.
        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Echo07.
        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Echo07.
        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Echo07.
        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Echo07.
        :param pctile_resp_us: The pctile_resp_us of this Echo07.
        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Echo07.
        :param rcra3yr_compl_qtrs_history: The rcra3yr_compl_qtrs_history of this Echo07.
        :param rcra_compliance_status: The rcra_compliance_status of this Echo07.
        :param rcra_date_last_formal_action: The rcra_date_last_formal_action of this Echo07.
        :param rcra_days_last_evaluation: The rcra_days_last_evaluation of this Echo07.
        :param rcra_flag: The rcra_flag of this Echo07.
        :param rcra_formal_action_count: The rcra_formal_action_count of this Echo07.
        :param rcraids: The rcraids of this Echo07.
        :param rcra_informal_count: The rcra_informal_count of this Echo07.
        :param rcra_inspection_count: The rcra_inspection_count of this Echo07.
        :param rcra_last_penalty_amt: The rcra_last_penalty_amt of this Echo07.
        :param rcra_last_penalty_date: The rcra_last_penalty_date of this Echo07.
        :param rcranaics: The rcranaics of this Echo07.
        :param rcra_penalties: The rcra_penalties of this Echo07.
        :param rcra_permit_types: The rcra_permit_types of this Echo07.
        :param rcra_qtrs_with_nc: The rcra_qtrs_with_nc of this Echo07.
        :param rcrasnc_flag: The rcrasnc_flag of this Echo07.
        :param registry_id: The registry_id of this Echo07.
        :param rmp_ids: The rmp_ids of this Echo07.
        :param sdwa3yr_compl_qtrs_history: The sdwa3yr_compl_qtrs_history of this Echo07.
        :param sdwa_compliance_status: The sdwa_compliance_status of this Echo07.
        :param sdwa_formal_action_count: The sdwa_formal_action_count of this Echo07.
        :param sdwaids: The sdwaids of this Echo07.
        :param sdwa_informal_count: The sdwa_informal_count of this Echo07.
        :param sdwa_inspections5yr: The sdwa_inspections5yr of this Echo07.
        :param sdwa_qtrs_with_nc: The sdwa_qtrs_with_nc of this Echo07.
        :param sdwasnc_flag: The sdwasnc_flag of this Echo07.
        :param sdwa_system_types: The sdwa_system_types of this Echo07.
        :param sdwis_flag: The sdwis_flag of this Echo07.
        :param score: The score of this Echo07.
        :param sems_flag: The sems_flag of this Echo07.
        :param sems_ids: The sems_ids of this Echo07.
        :param source_id: The source_id of this Echo07.
        :param tri_flag: The tri_flag of this Echo07.
        :param triids: The triids of this Echo07.
        :param tri_off_site_transfers: The tri_off_site_transfers of this Echo07.
        :param trion_site_releases: The trion_site_releases of this Echo07.
        :param tri_releases_transfers: The tri_releases_transfers of this Echo07.
        :param tri_reporter: The tri_reporter of this Echo07.
        :param tri_reporter_in_past: The tri_reporter_in_past of this Echo07.
        :param tr_ibal_flag: The tr_ibal_flag of this Echo07.
        :param tsca_flag: The tsca_flag of this Echo07.
        :param tsca_ids: The tsca_ids of this Echo07.
        :param tsca_inspections5yr: The tsca_inspections5yr of this Echo07.
        :param viol_flag: The viol_flag of this Echo07.
        :param web_docs: The web_docs of this Echo07.
        """
        self.openapi_types = {
            'air_flag': str,
            'airids': str,
            'active_lower48': str,
            'biosolids_flag': str,
            'caa3yr_compl_qtrs_history': str,
            'caa_compliance_status': str,
            'caa_date_last_formal_action': str,
            'caa_days_last_evaluation': str,
            'caa_evaluation_count': str,
            'caa_formal_action_count': str,
            'caa_hpv_flag': str,
            'caa_informal_count': str,
            'caa_last_penalty_amt': str,
            'caa_last_penalty_date': str,
            'caanaics': str,
            'caa_penalties': str,
            'caa_permit_types': str,
            'caa_qtrs_with_nc': str,
            'caasics': str,
            'cwa13qtrs_compl_history': str,
            'cwa13qtrs_efflnt_exceedances': str,
            'cwa3_yr_qncr_codes': str,
            'cwa_compliance_status': str,
            'cwa_compliance_tracking': str,
            'cwa_date_last_formal_action': str,
            'cwa_days_last_inspection': str,
            'cwa_formal_action_count': str,
            'cwa_informal_count': str,
            'cwa_inspection_count': str,
            'cwa_last_penalty_amt': str,
            'cwa_last_penalty_date': str,
            'cwanaics': str,
            'cwa_penalties': str,
            'cwa_permit_types': str,
            'cwa_qtrs_with_nc': str,
            'cwasics': str,
            'cwasnc_flag': str,
            'camd_ids': str,
            'census_block_group': str,
            'curr_sv_flag': str,
            'curr_vio_flag': str,
            'dfr_url': str,
            'ea5yr_flag': str,
            'eff_charts_flag': str,
            'eis_flag': str,
            'eis_ids': str,
            'ejscreen_flag': str,
            'ejscreen_flag_us': str,
            'epcra_inspections5yr': str,
            'fac3yr_compliance_history': str,
            'fac_accuracy_meters': str,
            'fac_active_flag': str,
            'fac_chesapeake_bay_flg': str,
            'fac_city': str,
            'fac_collection_method': str,
            'fac_compliance_status': str,
            'fac_county': str,
            'fac_date_last_formal_act_epa': str,
            'fac_date_last_formal_act_st': str,
            'fac_date_last_formal_action': str,
            'fac_date_last_informal_act_epa': str,
            'fac_date_last_informal_act_st': str,
            'fac_date_last_informal_action': str,
            'fac_date_last_inspection': str,
            'fac_date_last_inspection_epa': str,
            'fac_date_last_inspection_state': str,
            'fac_date_last_penalty': str,
            'fac_days_last_inspection': str,
            'fac_derived_cb2010': str,
            'fac_derived_cd113': str,
            'fac_derived_huc': str,
            'fac_derived_rad_wbdhu12': str,
            'fac_derived_rad_wbdhu12_name': str,
            'fac_derived_rad_wbdhu8': str,
            'fac_derived_rad_wbdhu8_name': str,
            'fac_derived_stcty_fips': str,
            'fac_derived_tr_ibes': str,
            'fac_derived_wbd': str,
            'fac_derived_wbdhu12_name': str,
            'fac_derived_wbdhu8': str,
            'fac_derived_wbdhu8_name': str,
            'fac_derived_zip': str,
            'fac_epa_region': str,
            'fac_fips_code': str,
            'fac_federal_agency': str,
            'fac_federal_agency_name': str,
            'fac_federal_flg': str,
            'fac_formal_action_count': str,
            'fac_imp_water_flg': str,
            'fac_indian_cntry_flg': str,
            'fac_indian_spatial_flg': str,
            'fac_informal_count': str,
            'fac_inspection_count': str,
            'fac_last_penalty_amt': str,
            'fac_lat': str,
            'fac_long': str,
            'fac_major_flag': str,
            'fac_map_flg': str,
            'fac_map_icon': str,
            'fac_myrtk_universe': str,
            'fac_naics_codes': str,
            'fac_naa_flag': str,
            'fac_name': str,
            'fac_penalty_count': str,
            'fac_percent_minority': str,
            'fac_pop_den': str,
            'fac_programs_with_snc': str,
            'fac_qtrs_with_nc': str,
            'fac_reference_point': str,
            'fac_sic_codes': str,
            'fac_snc_flg': str,
            'fac_state': str,
            'fac_std_county_name': str,
            'fac_street': str,
            'fac_total_penalties': str,
            'fac_us_mex_border_flg': str,
            'fac_zip': str,
            'fec_case_ids': str,
            'fec_last_case_date': str,
            'fec_number_of_cases': str,
            'fec_total_penalties': str,
            'fifra_inspections5yr': str,
            'ghgco2_releases': str,
            'ghg_flag': str,
            'ghgids': str,
            'has_poll_rpt': str,
            'infea5yr_flag': str,
            'insp5yr_flag': str,
            'lower48': str,
            'max_pctile_us': str,
            'max_score': str,
            'nc': str,
            'npdes_flag': str,
            'npdesids': str,
            'naa_categories': str,
            'naa_pollutants': str,
            'object_id': str,
            'over80_count_us': str,
            'pctile_cancer_us': str,
            'pctile_dpm_us': str,
            'pctile_o3_us': str,
            'pctile_pctpre1960_us': str,
            'pctile_pm_us': str,
            'pctile_proximity_npdesus': str,
            'pctile_proximity_npl_us': str,
            'pctile_proximity_rmp_us': str,
            'pctile_proximity_tsdf_us': str,
            'pctile_resp_us': str,
            'pctile_traffic_score_us': str,
            'rcra3yr_compl_qtrs_history': str,
            'rcra_compliance_status': str,
            'rcra_date_last_formal_action': str,
            'rcra_days_last_evaluation': str,
            'rcra_flag': str,
            'rcra_formal_action_count': str,
            'rcraids': str,
            'rcra_informal_count': str,
            'rcra_inspection_count': str,
            'rcra_last_penalty_amt': str,
            'rcra_last_penalty_date': str,
            'rcranaics': str,
            'rcra_penalties': str,
            'rcra_permit_types': str,
            'rcra_qtrs_with_nc': str,
            'rcrasnc_flag': str,
            'registry_id': str,
            'rmp_ids': str,
            'sdwa3yr_compl_qtrs_history': str,
            'sdwa_compliance_status': str,
            'sdwa_formal_action_count': str,
            'sdwaids': str,
            'sdwa_informal_count': str,
            'sdwa_inspections5yr': str,
            'sdwa_qtrs_with_nc': str,
            'sdwasnc_flag': str,
            'sdwa_system_types': str,
            'sdwis_flag': str,
            'score': str,
            'sems_flag': str,
            'sems_ids': str,
            'source_id': str,
            'tri_flag': str,
            'triids': str,
            'tri_off_site_transfers': str,
            'trion_site_releases': str,
            'tri_releases_transfers': str,
            'tri_reporter': str,
            'tri_reporter_in_past': str,
            'tr_ibal_flag': str,
            'tsca_flag': str,
            'tsca_ids': str,
            'tsca_inspections5yr': str,
            'viol_flag': str,
            'web_docs': str
        }

        self.attribute_map = {
            'air_flag': 'AIRFlag',
            'airids': 'AIRIDs',
            'active_lower48': 'ActiveLower48',
            'biosolids_flag': 'BiosolidsFlag',
            'caa3yr_compl_qtrs_history': 'CAA3yrComplQtrsHistory',
            'caa_compliance_status': 'CAAComplianceStatus',
            'caa_date_last_formal_action': 'CAADateLastFormalAction',
            'caa_days_last_evaluation': 'CAADaysLastEvaluation',
            'caa_evaluation_count': 'CAAEvaluationCount',
            'caa_formal_action_count': 'CAAFormalActionCount',
            'caa_hpv_flag': 'CAAHpvFlag',
            'caa_informal_count': 'CAAInformalCount',
            'caa_last_penalty_amt': 'CAALastPenaltyAmt',
            'caa_last_penalty_date': 'CAALastPenaltyDate',
            'caanaics': 'CAANAICS',
            'caa_penalties': 'CAAPenalties',
            'caa_permit_types': 'CAAPermitTypes',
            'caa_qtrs_with_nc': 'CAAQtrsWithNC',
            'caasics': 'CAASICs',
            'cwa13qtrs_compl_history': 'CWA13qtrsComplHistory',
            'cwa13qtrs_efflnt_exceedances': 'CWA13qtrsEfflntExceedances',
            'cwa3_yr_qncr_codes': 'CWA3YrQncrCodes',
            'cwa_compliance_status': 'CWAComplianceStatus',
            'cwa_compliance_tracking': 'CWAComplianceTracking',
            'cwa_date_last_formal_action': 'CWADateLastFormalAction',
            'cwa_days_last_inspection': 'CWADaysLastInspection',
            'cwa_formal_action_count': 'CWAFormalActionCount',
            'cwa_informal_count': 'CWAInformalCount',
            'cwa_inspection_count': 'CWAInspectionCount',
            'cwa_last_penalty_amt': 'CWALastPenaltyAmt',
            'cwa_last_penalty_date': 'CWALastPenaltyDate',
            'cwanaics': 'CWANAICS',
            'cwa_penalties': 'CWAPenalties',
            'cwa_permit_types': 'CWAPermitTypes',
            'cwa_qtrs_with_nc': 'CWAQtrsWithNC',
            'cwasics': 'CWASICs',
            'cwasnc_flag': 'CWASNCFlag',
            'camd_ids': 'CamdIDs',
            'census_block_group': 'CensusBlockGroup',
            'curr_sv_flag': 'CurrSvFlag',
            'curr_vio_flag': 'CurrVioFlag',
            'dfr_url': 'DfrUrl',
            'ea5yr_flag': 'Ea5yrFlag',
            'eff_charts_flag': 'EffChartsFlag',
            'eis_flag': 'EisFlag',
            'eis_ids': 'EisIDs',
            'ejscreen_flag': 'EjscreenFlag',
            'ejscreen_flag_us': 'EjscreenFlagUs',
            'epcra_inspections5yr': 'EpcraInspections5yr',
            'fac3yr_compliance_history': 'Fac3yrComplianceHistory',
            'fac_accuracy_meters': 'FacAccuracyMeters',
            'fac_active_flag': 'FacActiveFlag',
            'fac_chesapeake_bay_flg': 'FacChesapeakeBayFlg',
            'fac_city': 'FacCity',
            'fac_collection_method': 'FacCollectionMethod',
            'fac_compliance_status': 'FacComplianceStatus',
            'fac_county': 'FacCounty',
            'fac_date_last_formal_act_epa': 'FacDateLastFormalActEPA',
            'fac_date_last_formal_act_st': 'FacDateLastFormalActSt',
            'fac_date_last_formal_action': 'FacDateLastFormalAction',
            'fac_date_last_informal_act_epa': 'FacDateLastInformalActEPA',
            'fac_date_last_informal_act_st': 'FacDateLastInformalActSt',
            'fac_date_last_informal_action': 'FacDateLastInformalAction',
            'fac_date_last_inspection': 'FacDateLastInspection',
            'fac_date_last_inspection_epa': 'FacDateLastInspectionEPA',
            'fac_date_last_inspection_state': 'FacDateLastInspectionState',
            'fac_date_last_penalty': 'FacDateLastPenalty',
            'fac_days_last_inspection': 'FacDaysLastInspection',
            'fac_derived_cb2010': 'FacDerivedCb2010',
            'fac_derived_cd113': 'FacDerivedCd113',
            'fac_derived_huc': 'FacDerivedHuc',
            'fac_derived_rad_wbdhu12': 'FacDerivedRadWBDHu12',
            'fac_derived_rad_wbdhu12_name': 'FacDerivedRadWBDHu12Name',
            'fac_derived_rad_wbdhu8': 'FacDerivedRadWBDHu8',
            'fac_derived_rad_wbdhu8_name': 'FacDerivedRadWBDHu8Name',
            'fac_derived_stcty_fips': 'FacDerivedStctyFIPS',
            'fac_derived_tr_ibes': 'FacDerivedTRIbes',
            'fac_derived_wbd': 'FacDerivedWBD',
            'fac_derived_wbdhu12_name': 'FacDerivedWBDHu12Name',
            'fac_derived_wbdhu8': 'FacDerivedWBDHu8',
            'fac_derived_wbdhu8_name': 'FacDerivedWBDHu8Name',
            'fac_derived_zip': 'FacDerivedZip',
            'fac_epa_region': 'FacEPARegion',
            'fac_fips_code': 'FacFIPSCode',
            'fac_federal_agency': 'FacFederalAgency',
            'fac_federal_agency_name': 'FacFederalAgencyName',
            'fac_federal_flg': 'FacFederalFlg',
            'fac_formal_action_count': 'FacFormalActionCount',
            'fac_imp_water_flg': 'FacImpWaterFlg',
            'fac_indian_cntry_flg': 'FacIndianCntryFlg',
            'fac_indian_spatial_flg': 'FacIndianSpatialFlg',
            'fac_informal_count': 'FacInformalCount',
            'fac_inspection_count': 'FacInspectionCount',
            'fac_last_penalty_amt': 'FacLastPenaltyAmt',
            'fac_lat': 'FacLat',
            'fac_long': 'FacLong',
            'fac_major_flag': 'FacMajorFlag',
            'fac_map_flg': 'FacMapFlg',
            'fac_map_icon': 'FacMapIcon',
            'fac_myrtk_universe': 'FacMyrtkUniverse',
            'fac_naics_codes': 'FacNAICSCodes',
            'fac_naa_flag': 'FacNaaFlag',
            'fac_name': 'FacName',
            'fac_penalty_count': 'FacPenaltyCount',
            'fac_percent_minority': 'FacPercentMinority',
            'fac_pop_den': 'FacPopDen',
            'fac_programs_with_snc': 'FacProgramsWithSNC',
            'fac_qtrs_with_nc': 'FacQtrsWithNC',
            'fac_reference_point': 'FacReferencePoint',
            'fac_sic_codes': 'FacSICCodes',
            'fac_snc_flg': 'FacSNCFlg',
            'fac_state': 'FacState',
            'fac_std_county_name': 'FacStdCountyName',
            'fac_street': 'FacStreet',
            'fac_total_penalties': 'FacTotalPenalties',
            'fac_us_mex_border_flg': 'FacUsMexBorderFlg',
            'fac_zip': 'FacZip',
            'fec_case_ids': 'FecCaseIDs',
            'fec_last_case_date': 'FecLastCaseDate',
            'fec_number_of_cases': 'FecNumberOfCases',
            'fec_total_penalties': 'FecTotalPenalties',
            'fifra_inspections5yr': 'FifraInspections5yr',
            'ghgco2_releases': 'GHGCO2Releases',
            'ghg_flag': 'GHGFlag',
            'ghgids': 'GHGIDs',
            'has_poll_rpt': 'HasPollRpt',
            'infea5yr_flag': 'Infea5yrFlag',
            'insp5yr_flag': 'Insp5yrFlag',
            'lower48': 'Lower48',
            'max_pctile_us': 'MaxPctileUs',
            'max_score': 'MaxScore',
            'nc': 'NC',
            'npdes_flag': 'NPDESFlag',
            'npdesids': 'NPDESIDs',
            'naa_categories': 'NaaCategories',
            'naa_pollutants': 'NaaPollutants',
            'object_id': 'ObjectId',
            'over80_count_us': 'Over80CountUs',
            'pctile_cancer_us': 'PctileCancerUs',
            'pctile_dpm_us': 'PctileDpmUs',
            'pctile_o3_us': 'PctileO3Us',
            'pctile_pctpre1960_us': 'PctilePctpre1960Us',
            'pctile_pm_us': 'PctilePmUs',
            'pctile_proximity_npdesus': 'PctileProximityNPDESUs',
            'pctile_proximity_npl_us': 'PctileProximityNplUs',
            'pctile_proximity_rmp_us': 'PctileProximityRmpUs',
            'pctile_proximity_tsdf_us': 'PctileProximityTsdfUs',
            'pctile_resp_us': 'PctileRespUs',
            'pctile_traffic_score_us': 'PctileTrafficScoreUs',
            'rcra3yr_compl_qtrs_history': 'RCRA3yrComplQtrsHistory',
            'rcra_compliance_status': 'RCRAComplianceStatus',
            'rcra_date_last_formal_action': 'RCRADateLastFormalAction',
            'rcra_days_last_evaluation': 'RCRADaysLastEvaluation',
            'rcra_flag': 'RCRAFlag',
            'rcra_formal_action_count': 'RCRAFormalActionCount',
            'rcraids': 'RCRAIDs',
            'rcra_informal_count': 'RCRAInformalCount',
            'rcra_inspection_count': 'RCRAInspectionCount',
            'rcra_last_penalty_amt': 'RCRALastPenaltyAmt',
            'rcra_last_penalty_date': 'RCRALastPenaltyDate',
            'rcranaics': 'RCRANAICS',
            'rcra_penalties': 'RCRAPenalties',
            'rcra_permit_types': 'RCRAPermitTypes',
            'rcra_qtrs_with_nc': 'RCRAQtrsWithNC',
            'rcrasnc_flag': 'RCRASNCFlag',
            'registry_id': 'RegistryID',
            'rmp_ids': 'RmpIDs',
            'sdwa3yr_compl_qtrs_history': 'SDWA3yrComplQtrsHistory',
            'sdwa_compliance_status': 'SDWAComplianceStatus',
            'sdwa_formal_action_count': 'SDWAFormalActionCount',
            'sdwaids': 'SDWAIDs',
            'sdwa_informal_count': 'SDWAInformalCount',
            'sdwa_inspections5yr': 'SDWAInspections5yr',
            'sdwa_qtrs_with_nc': 'SDWAQtrsWithNC',
            'sdwasnc_flag': 'SDWASNCFlag',
            'sdwa_system_types': 'SDWASystemTypes',
            'sdwis_flag': 'SDWISFlag',
            'score': 'Score',
            'sems_flag': 'SemsFlag',
            'sems_ids': 'SemsIDs',
            'source_id': 'SourceID',
            'tri_flag': 'TRIFlag',
            'triids': 'TRIIDs',
            'tri_off_site_transfers': 'TRIOffSiteTransfers',
            'trion_site_releases': 'TRIOnSiteReleases',
            'tri_releases_transfers': 'TRIReleasesTransfers',
            'tri_reporter': 'TRIReporter',
            'tri_reporter_in_past': 'TRIReporterInPast',
            'tr_ibal_flag': 'TRIbalFlag',
            'tsca_flag': 'TscaFlag',
            'tsca_ids': 'TscaIDs',
            'tsca_inspections5yr': 'TscaInspections5yr',
            'viol_flag': 'ViolFlag',
            'web_docs': 'WebDocs'
        }

        self._air_flag = air_flag
        self._airids = airids
        self._active_lower48 = active_lower48
        self._biosolids_flag = biosolids_flag
        self._caa3yr_compl_qtrs_history = caa3yr_compl_qtrs_history
        self._caa_compliance_status = caa_compliance_status
        self._caa_date_last_formal_action = caa_date_last_formal_action
        self._caa_days_last_evaluation = caa_days_last_evaluation
        self._caa_evaluation_count = caa_evaluation_count
        self._caa_formal_action_count = caa_formal_action_count
        self._caa_hpv_flag = caa_hpv_flag
        self._caa_informal_count = caa_informal_count
        self._caa_last_penalty_amt = caa_last_penalty_amt
        self._caa_last_penalty_date = caa_last_penalty_date
        self._caanaics = caanaics
        self._caa_penalties = caa_penalties
        self._caa_permit_types = caa_permit_types
        self._caa_qtrs_with_nc = caa_qtrs_with_nc
        self._caasics = caasics
        self._cwa13qtrs_compl_history = cwa13qtrs_compl_history
        self._cwa13qtrs_efflnt_exceedances = cwa13qtrs_efflnt_exceedances
        self._cwa3_yr_qncr_codes = cwa3_yr_qncr_codes
        self._cwa_compliance_status = cwa_compliance_status
        self._cwa_compliance_tracking = cwa_compliance_tracking
        self._cwa_date_last_formal_action = cwa_date_last_formal_action
        self._cwa_days_last_inspection = cwa_days_last_inspection
        self._cwa_formal_action_count = cwa_formal_action_count
        self._cwa_informal_count = cwa_informal_count
        self._cwa_inspection_count = cwa_inspection_count
        self._cwa_last_penalty_amt = cwa_last_penalty_amt
        self._cwa_last_penalty_date = cwa_last_penalty_date
        self._cwanaics = cwanaics
        self._cwa_penalties = cwa_penalties
        self._cwa_permit_types = cwa_permit_types
        self._cwa_qtrs_with_nc = cwa_qtrs_with_nc
        self._cwasics = cwasics
        self._cwasnc_flag = cwasnc_flag
        self._camd_ids = camd_ids
        self._census_block_group = census_block_group
        self._curr_sv_flag = curr_sv_flag
        self._curr_vio_flag = curr_vio_flag
        self._dfr_url = dfr_url
        self._ea5yr_flag = ea5yr_flag
        self._eff_charts_flag = eff_charts_flag
        self._eis_flag = eis_flag
        self._eis_ids = eis_ids
        self._ejscreen_flag = ejscreen_flag
        self._ejscreen_flag_us = ejscreen_flag_us
        self._epcra_inspections5yr = epcra_inspections5yr
        self._fac3yr_compliance_history = fac3yr_compliance_history
        self._fac_accuracy_meters = fac_accuracy_meters
        self._fac_active_flag = fac_active_flag
        self._fac_chesapeake_bay_flg = fac_chesapeake_bay_flg
        self._fac_city = fac_city
        self._fac_collection_method = fac_collection_method
        self._fac_compliance_status = fac_compliance_status
        self._fac_county = fac_county
        self._fac_date_last_formal_act_epa = fac_date_last_formal_act_epa
        self._fac_date_last_formal_act_st = fac_date_last_formal_act_st
        self._fac_date_last_formal_action = fac_date_last_formal_action
        self._fac_date_last_informal_act_epa = fac_date_last_informal_act_epa
        self._fac_date_last_informal_act_st = fac_date_last_informal_act_st
        self._fac_date_last_informal_action = fac_date_last_informal_action
        self._fac_date_last_inspection = fac_date_last_inspection
        self._fac_date_last_inspection_epa = fac_date_last_inspection_epa
        self._fac_date_last_inspection_state = fac_date_last_inspection_state
        self._fac_date_last_penalty = fac_date_last_penalty
        self._fac_days_last_inspection = fac_days_last_inspection
        self._fac_derived_cb2010 = fac_derived_cb2010
        self._fac_derived_cd113 = fac_derived_cd113
        self._fac_derived_huc = fac_derived_huc
        self._fac_derived_rad_wbdhu12 = fac_derived_rad_wbdhu12
        self._fac_derived_rad_wbdhu12_name = fac_derived_rad_wbdhu12_name
        self._fac_derived_rad_wbdhu8 = fac_derived_rad_wbdhu8
        self._fac_derived_rad_wbdhu8_name = fac_derived_rad_wbdhu8_name
        self._fac_derived_stcty_fips = fac_derived_stcty_fips
        self._fac_derived_tr_ibes = fac_derived_tr_ibes
        self._fac_derived_wbd = fac_derived_wbd
        self._fac_derived_wbdhu12_name = fac_derived_wbdhu12_name
        self._fac_derived_wbdhu8 = fac_derived_wbdhu8
        self._fac_derived_wbdhu8_name = fac_derived_wbdhu8_name
        self._fac_derived_zip = fac_derived_zip
        self._fac_epa_region = fac_epa_region
        self._fac_fips_code = fac_fips_code
        self._fac_federal_agency = fac_federal_agency
        self._fac_federal_agency_name = fac_federal_agency_name
        self._fac_federal_flg = fac_federal_flg
        self._fac_formal_action_count = fac_formal_action_count
        self._fac_imp_water_flg = fac_imp_water_flg
        self._fac_indian_cntry_flg = fac_indian_cntry_flg
        self._fac_indian_spatial_flg = fac_indian_spatial_flg
        self._fac_informal_count = fac_informal_count
        self._fac_inspection_count = fac_inspection_count
        self._fac_last_penalty_amt = fac_last_penalty_amt
        self._fac_lat = fac_lat
        self._fac_long = fac_long
        self._fac_major_flag = fac_major_flag
        self._fac_map_flg = fac_map_flg
        self._fac_map_icon = fac_map_icon
        self._fac_myrtk_universe = fac_myrtk_universe
        self._fac_naics_codes = fac_naics_codes
        self._fac_naa_flag = fac_naa_flag
        self._fac_name = fac_name
        self._fac_penalty_count = fac_penalty_count
        self._fac_percent_minority = fac_percent_minority
        self._fac_pop_den = fac_pop_den
        self._fac_programs_with_snc = fac_programs_with_snc
        self._fac_qtrs_with_nc = fac_qtrs_with_nc
        self._fac_reference_point = fac_reference_point
        self._fac_sic_codes = fac_sic_codes
        self._fac_snc_flg = fac_snc_flg
        self._fac_state = fac_state
        self._fac_std_county_name = fac_std_county_name
        self._fac_street = fac_street
        self._fac_total_penalties = fac_total_penalties
        self._fac_us_mex_border_flg = fac_us_mex_border_flg
        self._fac_zip = fac_zip
        self._fec_case_ids = fec_case_ids
        self._fec_last_case_date = fec_last_case_date
        self._fec_number_of_cases = fec_number_of_cases
        self._fec_total_penalties = fec_total_penalties
        self._fifra_inspections5yr = fifra_inspections5yr
        self._ghgco2_releases = ghgco2_releases
        self._ghg_flag = ghg_flag
        self._ghgids = ghgids
        self._has_poll_rpt = has_poll_rpt
        self._infea5yr_flag = infea5yr_flag
        self._insp5yr_flag = insp5yr_flag
        self._lower48 = lower48
        self._max_pctile_us = max_pctile_us
        self._max_score = max_score
        self._nc = nc
        self._npdes_flag = npdes_flag
        self._npdesids = npdesids
        self._naa_categories = naa_categories
        self._naa_pollutants = naa_pollutants
        self._object_id = object_id
        self._over80_count_us = over80_count_us
        self._pctile_cancer_us = pctile_cancer_us
        self._pctile_dpm_us = pctile_dpm_us
        self._pctile_o3_us = pctile_o3_us
        self._pctile_pctpre1960_us = pctile_pctpre1960_us
        self._pctile_pm_us = pctile_pm_us
        self._pctile_proximity_npdesus = pctile_proximity_npdesus
        self._pctile_proximity_npl_us = pctile_proximity_npl_us
        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us
        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us
        self._pctile_resp_us = pctile_resp_us
        self._pctile_traffic_score_us = pctile_traffic_score_us
        self._rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history
        self._rcra_compliance_status = rcra_compliance_status
        self._rcra_date_last_formal_action = rcra_date_last_formal_action
        self._rcra_days_last_evaluation = rcra_days_last_evaluation
        self._rcra_flag = rcra_flag
        self._rcra_formal_action_count = rcra_formal_action_count
        self._rcraids = rcraids
        self._rcra_informal_count = rcra_informal_count
        self._rcra_inspection_count = rcra_inspection_count
        self._rcra_last_penalty_amt = rcra_last_penalty_amt
        self._rcra_last_penalty_date = rcra_last_penalty_date
        self._rcranaics = rcranaics
        self._rcra_penalties = rcra_penalties
        self._rcra_permit_types = rcra_permit_types
        self._rcra_qtrs_with_nc = rcra_qtrs_with_nc
        self._rcrasnc_flag = rcrasnc_flag
        self._registry_id = registry_id
        self._rmp_ids = rmp_ids
        self._sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history
        self._sdwa_compliance_status = sdwa_compliance_status
        self._sdwa_formal_action_count = sdwa_formal_action_count
        self._sdwaids = sdwaids
        self._sdwa_informal_count = sdwa_informal_count
        self._sdwa_inspections5yr = sdwa_inspections5yr
        self._sdwa_qtrs_with_nc = sdwa_qtrs_with_nc
        self._sdwasnc_flag = sdwasnc_flag
        self._sdwa_system_types = sdwa_system_types
        self._sdwis_flag = sdwis_flag
        self._score = score
        self._sems_flag = sems_flag
        self._sems_ids = sems_ids
        self._source_id = source_id
        self._tri_flag = tri_flag
        self._triids = triids
        self._tri_off_site_transfers = tri_off_site_transfers
        self._trion_site_releases = trion_site_releases
        self._tri_releases_transfers = tri_releases_transfers
        self._tri_reporter = tri_reporter
        self._tri_reporter_in_past = tri_reporter_in_past
        self._tr_ibal_flag = tr_ibal_flag
        self._tsca_flag = tsca_flag
        self._tsca_ids = tsca_ids
        self._tsca_inspections5yr = tsca_inspections5yr
        self._viol_flag = viol_flag
        self._web_docs = web_docs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Echo07':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The echo07 of this Echo07.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air_flag(self):
        """Gets the air_flag of this Echo07.

        Indicates whether the facility has a Clean Air Act (CAA) permit.

        :return: The air_flag of this Echo07.
        :rtype: str
        """
        return self._air_flag

    @air_flag.setter
    def air_flag(self, air_flag):
        """Sets the air_flag of this Echo07.

        Indicates whether the facility has a Clean Air Act (CAA) permit.

        :param air_flag: The air_flag of this Echo07.
        :type air_flag: str
        """
        if air_flag is None:
            raise ValueError("Invalid value for `air_flag`, must not be `None`")

        self._air_flag = air_flag

    @property
    def airids(self):
        """Gets the airids of this Echo07.

        Air Facility System (AFS) ID.

        :return: The airids of this Echo07.
        :rtype: str
        """
        return self._airids

    @airids.setter
    def airids(self, airids):
        """Sets the airids of this Echo07.

        Air Facility System (AFS) ID.

        :param airids: The airids of this Echo07.
        :type airids: str
        """
        if airids is None:
            raise ValueError("Invalid value for `airids`, must not be `None`")

        self._airids = airids

    @property
    def active_lower48(self):
        """Gets the active_lower48 of this Echo07.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :return: The active_lower48 of this Echo07.
        :rtype: str
        """
        return self._active_lower48

    @active_lower48.setter
    def active_lower48(self, active_lower48):
        """Sets the active_lower48 of this Echo07.

        A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.

        :param active_lower48: The active_lower48 of this Echo07.
        :type active_lower48: str
        """
        if active_lower48 is None:
            raise ValueError("Invalid value for `active_lower48`, must not be `None`")

        self._active_lower48 = active_lower48

    @property
    def biosolids_flag(self):
        """Gets the biosolids_flag of this Echo07.

        A Yes/No field to indicate permits with biosolids management and compliance information.

        :return: The biosolids_flag of this Echo07.
        :rtype: str
        """
        return self._biosolids_flag

    @biosolids_flag.setter
    def biosolids_flag(self, biosolids_flag):
        """Sets the biosolids_flag of this Echo07.

        A Yes/No field to indicate permits with biosolids management and compliance information.

        :param biosolids_flag: The biosolids_flag of this Echo07.
        :type biosolids_flag: str
        """
        if biosolids_flag is None:
            raise ValueError("Invalid value for `biosolids_flag`, must not be `None`")

        self._biosolids_flag = biosolids_flag

    @property
    def caa3yr_compl_qtrs_history(self):
        """Gets the caa3yr_compl_qtrs_history of this Echo07.

        The facility's 3-year compliance status history by quarter (3-month period) entered in the CAA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :return: The caa3yr_compl_qtrs_history of this Echo07.
        :rtype: str
        """
        return self._caa3yr_compl_qtrs_history

    @caa3yr_compl_qtrs_history.setter
    def caa3yr_compl_qtrs_history(self, caa3yr_compl_qtrs_history):
        """Sets the caa3yr_compl_qtrs_history of this Echo07.

        The facility's 3-year compliance status history by quarter (3-month period) entered in the CAA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined

        :param caa3yr_compl_qtrs_history: The caa3yr_compl_qtrs_history of this Echo07.
        :type caa3yr_compl_qtrs_history: str
        """
        if caa3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `caa3yr_compl_qtrs_history`, must not be `None`")

        self._caa3yr_compl_qtrs_history = caa3yr_compl_qtrs_history

    @property
    def caa_compliance_status(self):
        """Gets the caa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Clean Air Act. When a source has a high priority violation (HPV), the specific type of HPV will be displayed. If more than one type applies to a source, this order of priority is used to determine which type appears: Violation Unaddressed, EPA has Lead Enforcement Violation Unaddressed, State has Lead Enforcement Violation Unaddressed, Local has Lead Enforcement Violation Addressed, EPA has Lead Enforcement Violation Addressed, State has Lead Enforcement Violation Addressed, Local has Lead Enforcement When there is no Federally-Reportable Violation determination date in the past year and no open High Priority Violation in the most recent quarter in the data system of record, “Not Available” is displayed.

        :return: The caa_compliance_status of this Echo07.
        :rtype: str
        """
        return self._caa_compliance_status

    @caa_compliance_status.setter
    def caa_compliance_status(self, caa_compliance_status):
        """Sets the caa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Clean Air Act. When a source has a high priority violation (HPV), the specific type of HPV will be displayed. If more than one type applies to a source, this order of priority is used to determine which type appears: Violation Unaddressed, EPA has Lead Enforcement Violation Unaddressed, State has Lead Enforcement Violation Unaddressed, Local has Lead Enforcement Violation Addressed, EPA has Lead Enforcement Violation Addressed, State has Lead Enforcement Violation Addressed, Local has Lead Enforcement When there is no Federally-Reportable Violation determination date in the past year and no open High Priority Violation in the most recent quarter in the data system of record, “Not Available” is displayed.

        :param caa_compliance_status: The caa_compliance_status of this Echo07.
        :type caa_compliance_status: str
        """
        if caa_compliance_status is None:
            raise ValueError("Invalid value for `caa_compliance_status`, must not be `None`")

        self._caa_compliance_status = caa_compliance_status

    @property
    def caa_date_last_formal_action(self):
        """Gets the caa_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the CAA program database.

        :return: The caa_date_last_formal_action of this Echo07.
        :rtype: str
        """
        return self._caa_date_last_formal_action

    @caa_date_last_formal_action.setter
    def caa_date_last_formal_action(self, caa_date_last_formal_action):
        """Sets the caa_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the CAA program database.

        :param caa_date_last_formal_action: The caa_date_last_formal_action of this Echo07.
        :type caa_date_last_formal_action: str
        """
        if caa_date_last_formal_action is None:
            raise ValueError("Invalid value for `caa_date_last_formal_action`, must not be `None`")

        self._caa_date_last_formal_action = caa_date_last_formal_action

    @property
    def caa_days_last_evaluation(self):
        """Gets the caa_days_last_evaluation of this Echo07.

        The number of days since a CAA Full Compliance Evaluation (FCE) was completed.

        :return: The caa_days_last_evaluation of this Echo07.
        :rtype: str
        """
        return self._caa_days_last_evaluation

    @caa_days_last_evaluation.setter
    def caa_days_last_evaluation(self, caa_days_last_evaluation):
        """Sets the caa_days_last_evaluation of this Echo07.

        The number of days since a CAA Full Compliance Evaluation (FCE) was completed.

        :param caa_days_last_evaluation: The caa_days_last_evaluation of this Echo07.
        :type caa_days_last_evaluation: str
        """
        if caa_days_last_evaluation is None:
            raise ValueError("Invalid value for `caa_days_last_evaluation`, must not be `None`")

        self._caa_days_last_evaluation = caa_days_last_evaluation

    @property
    def caa_evaluation_count(self):
        """Gets the caa_evaluation_count of this Echo07.

        The number of inspections/compliance evaluations under the Clean Air Act, occurring at the facility within the last five years

        :return: The caa_evaluation_count of this Echo07.
        :rtype: str
        """
        return self._caa_evaluation_count

    @caa_evaluation_count.setter
    def caa_evaluation_count(self, caa_evaluation_count):
        """Sets the caa_evaluation_count of this Echo07.

        The number of inspections/compliance evaluations under the Clean Air Act, occurring at the facility within the last five years

        :param caa_evaluation_count: The caa_evaluation_count of this Echo07.
        :type caa_evaluation_count: str
        """
        if caa_evaluation_count is None:
            raise ValueError("Invalid value for `caa_evaluation_count`, must not be `None`")

        self._caa_evaluation_count = caa_evaluation_count

    @property
    def caa_formal_action_count(self):
        """Gets the caa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Air Act.

        :return: The caa_formal_action_count of this Echo07.
        :rtype: str
        """
        return self._caa_formal_action_count

    @caa_formal_action_count.setter
    def caa_formal_action_count(self, caa_formal_action_count):
        """Sets the caa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Air Act.

        :param caa_formal_action_count: The caa_formal_action_count of this Echo07.
        :type caa_formal_action_count: str
        """
        if caa_formal_action_count is None:
            raise ValueError("Invalid value for `caa_formal_action_count`, must not be `None`")

        self._caa_formal_action_count = caa_formal_action_count

    @property
    def caa_hpv_flag(self):
        """Gets the caa_hpv_flag of this Echo07.

        The High Priority Violator (HPV) status for the facility during the most recent quarter reflects the time the records were extracted from the program data system. \"Y\" indicates the facility is in HPV for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in HPV.

        :return: The caa_hpv_flag of this Echo07.
        :rtype: str
        """
        return self._caa_hpv_flag

    @caa_hpv_flag.setter
    def caa_hpv_flag(self, caa_hpv_flag):
        """Sets the caa_hpv_flag of this Echo07.

        The High Priority Violator (HPV) status for the facility during the most recent quarter reflects the time the records were extracted from the program data system. \"Y\" indicates the facility is in HPV for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in HPV.

        :param caa_hpv_flag: The caa_hpv_flag of this Echo07.
        :type caa_hpv_flag: str
        """
        if caa_hpv_flag is None:
            raise ValueError("Invalid value for `caa_hpv_flag`, must not be `None`")

        self._caa_hpv_flag = caa_hpv_flag

    @property
    def caa_informal_count(self):
        """Gets the caa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Air Act.

        :return: The caa_informal_count of this Echo07.
        :rtype: str
        """
        return self._caa_informal_count

    @caa_informal_count.setter
    def caa_informal_count(self, caa_informal_count):
        """Sets the caa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Air Act.

        :param caa_informal_count: The caa_informal_count of this Echo07.
        :type caa_informal_count: str
        """
        if caa_informal_count is None:
            raise ValueError("Invalid value for `caa_informal_count`, must not be `None`")

        self._caa_informal_count = caa_informal_count

    @property
    def caa_last_penalty_amt(self):
        """Gets the caa_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the CAA program database.

        :return: The caa_last_penalty_amt of this Echo07.
        :rtype: str
        """
        return self._caa_last_penalty_amt

    @caa_last_penalty_amt.setter
    def caa_last_penalty_amt(self, caa_last_penalty_amt):
        """Sets the caa_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the CAA program database.

        :param caa_last_penalty_amt: The caa_last_penalty_amt of this Echo07.
        :type caa_last_penalty_amt: str
        """
        if caa_last_penalty_amt is None:
            raise ValueError("Invalid value for `caa_last_penalty_amt`, must not be `None`")

        self._caa_last_penalty_amt = caa_last_penalty_amt

    @property
    def caa_last_penalty_date(self):
        """Gets the caa_last_penalty_date of this Echo07.

        The effective date of the most recent penalty entered into the CAA program database.

        :return: The caa_last_penalty_date of this Echo07.
        :rtype: str
        """
        return self._caa_last_penalty_date

    @caa_last_penalty_date.setter
    def caa_last_penalty_date(self, caa_last_penalty_date):
        """Sets the caa_last_penalty_date of this Echo07.

        The effective date of the most recent penalty entered into the CAA program database.

        :param caa_last_penalty_date: The caa_last_penalty_date of this Echo07.
        :type caa_last_penalty_date: str
        """
        if caa_last_penalty_date is None:
            raise ValueError("Invalid value for `caa_last_penalty_date`, must not be `None`")

        self._caa_last_penalty_date = caa_last_penalty_date

    @property
    def caanaics(self):
        """Gets the caanaics of this Echo07.

        The CAA permit's primary North American Industry Classification System (NAICS) Codes.

        :return: The caanaics of this Echo07.
        :rtype: str
        """
        return self._caanaics

    @caanaics.setter
    def caanaics(self, caanaics):
        """Sets the caanaics of this Echo07.

        The CAA permit's primary North American Industry Classification System (NAICS) Codes.

        :param caanaics: The caanaics of this Echo07.
        :type caanaics: str
        """
        if caanaics is None:
            raise ValueError("Invalid value for `caanaics`, must not be `None`")

        self._caanaics = caanaics

    @property
    def caa_penalties(self):
        """Gets the caa_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act.

        :return: The caa_penalties of this Echo07.
        :rtype: str
        """
        return self._caa_penalties

    @caa_penalties.setter
    def caa_penalties(self, caa_penalties):
        """Sets the caa_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act.

        :param caa_penalties: The caa_penalties of this Echo07.
        :type caa_penalties: str
        """
        if caa_penalties is None:
            raise ValueError("Invalid value for `caa_penalties`, must not be `None`")

        self._caa_penalties = caa_penalties

    @property
    def caa_permit_types(self):
        """Gets the caa_permit_types of this Echo07.

        ICIS AIR Permit Types associated with the FRS Facility: - Major - Federally Reportable Minor - Other Minor - Synthetic Minor - NULL

        :return: The caa_permit_types of this Echo07.
        :rtype: str
        """
        return self._caa_permit_types

    @caa_permit_types.setter
    def caa_permit_types(self, caa_permit_types):
        """Sets the caa_permit_types of this Echo07.

        ICIS AIR Permit Types associated with the FRS Facility: - Major - Federally Reportable Minor - Other Minor - Synthetic Minor - NULL

        :param caa_permit_types: The caa_permit_types of this Echo07.
        :type caa_permit_types: str
        """
        if caa_permit_types is None:
            raise ValueError("Invalid value for `caa_permit_types`, must not be `None`")

        self._caa_permit_types = caa_permit_types

    @property
    def caa_qtrs_with_nc(self):
        """Gets the caa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the CAA permit is considered in violation.

        :return: The caa_qtrs_with_nc of this Echo07.
        :rtype: str
        """
        return self._caa_qtrs_with_nc

    @caa_qtrs_with_nc.setter
    def caa_qtrs_with_nc(self, caa_qtrs_with_nc):
        """Sets the caa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the CAA permit is considered in violation.

        :param caa_qtrs_with_nc: The caa_qtrs_with_nc of this Echo07.
        :type caa_qtrs_with_nc: str
        """
        if caa_qtrs_with_nc is None:
            raise ValueError("Invalid value for `caa_qtrs_with_nc`, must not be `None`")

        self._caa_qtrs_with_nc = caa_qtrs_with_nc

    @property
    def caasics(self):
        """Gets the caasics of this Echo07.

        The CAA permit's primary Standard Industrial Classification (SIC) Codes.

        :return: The caasics of this Echo07.
        :rtype: str
        """
        return self._caasics

    @caasics.setter
    def caasics(self, caasics):
        """Sets the caasics of this Echo07.

        The CAA permit's primary Standard Industrial Classification (SIC) Codes.

        :param caasics: The caasics of this Echo07.
        :type caasics: str
        """
        if caasics is None:
            raise ValueError("Invalid value for `caasics`, must not be `None`")

        self._caasics = caasics

    @property
    def cwa13qtrs_compl_history(self):
        """Gets the cwa13qtrs_compl_history of this Echo07.

        The facility's 3-year compliance status history by quarter (3-month period) entered in the CWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :return: The cwa13qtrs_compl_history of this Echo07.
        :rtype: str
        """
        return self._cwa13qtrs_compl_history

    @cwa13qtrs_compl_history.setter
    def cwa13qtrs_compl_history(self, cwa13qtrs_compl_history):
        """Sets the cwa13qtrs_compl_history of this Echo07.

        The facility's 3-year compliance status history by quarter (3-month period) entered in the CWA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :param cwa13qtrs_compl_history: The cwa13qtrs_compl_history of this Echo07.
        :type cwa13qtrs_compl_history: str
        """
        if cwa13qtrs_compl_history is None:
            raise ValueError("Invalid value for `cwa13qtrs_compl_history`, must not be `None`")

        self._cwa13qtrs_compl_history = cwa13qtrs_compl_history

    @property
    def cwa13qtrs_efflnt_exceedances(self):
        """Gets the cwa13qtrs_efflnt_exceedances of this Echo07.

        The number of effluent violations at the facility in the past 13 quarters.

        :return: The cwa13qtrs_efflnt_exceedances of this Echo07.
        :rtype: str
        """
        return self._cwa13qtrs_efflnt_exceedances

    @cwa13qtrs_efflnt_exceedances.setter
    def cwa13qtrs_efflnt_exceedances(self, cwa13qtrs_efflnt_exceedances):
        """Sets the cwa13qtrs_efflnt_exceedances of this Echo07.

        The number of effluent violations at the facility in the past 13 quarters.

        :param cwa13qtrs_efflnt_exceedances: The cwa13qtrs_efflnt_exceedances of this Echo07.
        :type cwa13qtrs_efflnt_exceedances: str
        """
        if cwa13qtrs_efflnt_exceedances is None:
            raise ValueError("Invalid value for `cwa13qtrs_efflnt_exceedances`, must not be `None`")

        self._cwa13qtrs_efflnt_exceedances = cwa13qtrs_efflnt_exceedances

    @property
    def cwa3_yr_qncr_codes(self):
        """Gets the cwa3_yr_qncr_codes of this Echo07.

        No longer used.  Will be deleted in nthe future.

        :return: The cwa3_yr_qncr_codes of this Echo07.
        :rtype: str
        """
        return self._cwa3_yr_qncr_codes

    @cwa3_yr_qncr_codes.setter
    def cwa3_yr_qncr_codes(self, cwa3_yr_qncr_codes):
        """Sets the cwa3_yr_qncr_codes of this Echo07.

        No longer used.  Will be deleted in nthe future.

        :param cwa3_yr_qncr_codes: The cwa3_yr_qncr_codes of this Echo07.
        :type cwa3_yr_qncr_codes: str
        """
        if cwa3_yr_qncr_codes is None:
            raise ValueError("Invalid value for `cwa3_yr_qncr_codes`, must not be `None`")

        self._cwa3_yr_qncr_codes = cwa3_yr_qncr_codes

    @property
    def cwa_compliance_status(self):
        """Gets the cwa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Clean Water Act. When a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation, the specific type of SNC/Category I will be displayed. If more than one type applies to a facility, this order of priority is used to determine which code appears: S(CSchVio) - an enforcement action has been issued, and the facility is not meeting its compliance schedule E(EffViol) - effluent violations of monthly average limits X(EffNMth) - effluent violations of non-monthly average limits T(CSchRpt) - compliance schedule reporting violation D(DMR NR) - non-receipt of discharge monitoring report

        :return: The cwa_compliance_status of this Echo07.
        :rtype: str
        """
        return self._cwa_compliance_status

    @cwa_compliance_status.setter
    def cwa_compliance_status(self, cwa_compliance_status):
        """Sets the cwa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Clean Water Act. When a major source is in significant noncompliance (SNC) or a non-major source has a Category I violation, the specific type of SNC/Category I will be displayed. If more than one type applies to a facility, this order of priority is used to determine which code appears: S(CSchVio) - an enforcement action has been issued, and the facility is not meeting its compliance schedule E(EffViol) - effluent violations of monthly average limits X(EffNMth) - effluent violations of non-monthly average limits T(CSchRpt) - compliance schedule reporting violation D(DMR NR) - non-receipt of discharge monitoring report

        :param cwa_compliance_status: The cwa_compliance_status of this Echo07.
        :type cwa_compliance_status: str
        """
        if cwa_compliance_status is None:
            raise ValueError("Invalid value for `cwa_compliance_status`, must not be `None`")

        self._cwa_compliance_status = cwa_compliance_status

    @property
    def cwa_compliance_tracking(self):
        """Gets the cwa_compliance_tracking of this Echo07.

        The Compliance Tracking classifications which can assist in interpreting the facility's compliance status, particularly for non-major standard permittees.

        :return: The cwa_compliance_tracking of this Echo07.
        :rtype: str
        """
        return self._cwa_compliance_tracking

    @cwa_compliance_tracking.setter
    def cwa_compliance_tracking(self, cwa_compliance_tracking):
        """Sets the cwa_compliance_tracking of this Echo07.

        The Compliance Tracking classifications which can assist in interpreting the facility's compliance status, particularly for non-major standard permittees.

        :param cwa_compliance_tracking: The cwa_compliance_tracking of this Echo07.
        :type cwa_compliance_tracking: str
        """
        if cwa_compliance_tracking is None:
            raise ValueError("Invalid value for `cwa_compliance_tracking`, must not be `None`")

        self._cwa_compliance_tracking = cwa_compliance_tracking

    @property
    def cwa_date_last_formal_action(self):
        """Gets the cwa_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the CWA program database.

        :return: The cwa_date_last_formal_action of this Echo07.
        :rtype: str
        """
        return self._cwa_date_last_formal_action

    @cwa_date_last_formal_action.setter
    def cwa_date_last_formal_action(self, cwa_date_last_formal_action):
        """Sets the cwa_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the CWA program database.

        :param cwa_date_last_formal_action: The cwa_date_last_formal_action of this Echo07.
        :type cwa_date_last_formal_action: str
        """
        if cwa_date_last_formal_action is None:
            raise ValueError("Invalid value for `cwa_date_last_formal_action`, must not be `None`")

        self._cwa_date_last_formal_action = cwa_date_last_formal_action

    @property
    def cwa_days_last_inspection(self):
        """Gets the cwa_days_last_inspection of this Echo07.

        The number of days since a CWA inspection was completed.

        :return: The cwa_days_last_inspection of this Echo07.
        :rtype: str
        """
        return self._cwa_days_last_inspection

    @cwa_days_last_inspection.setter
    def cwa_days_last_inspection(self, cwa_days_last_inspection):
        """Sets the cwa_days_last_inspection of this Echo07.

        The number of days since a CWA inspection was completed.

        :param cwa_days_last_inspection: The cwa_days_last_inspection of this Echo07.
        :type cwa_days_last_inspection: str
        """
        if cwa_days_last_inspection is None:
            raise ValueError("Invalid value for `cwa_days_last_inspection`, must not be `None`")

        self._cwa_days_last_inspection = cwa_days_last_inspection

    @property
    def cwa_formal_action_count(self):
        """Gets the cwa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Water Act.

        :return: The cwa_formal_action_count of this Echo07.
        :rtype: str
        """
        return self._cwa_formal_action_count

    @cwa_formal_action_count.setter
    def cwa_formal_action_count(self, cwa_formal_action_count):
        """Sets the cwa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Clean Water Act.

        :param cwa_formal_action_count: The cwa_formal_action_count of this Echo07.
        :type cwa_formal_action_count: str
        """
        if cwa_formal_action_count is None:
            raise ValueError("Invalid value for `cwa_formal_action_count`, must not be `None`")

        self._cwa_formal_action_count = cwa_formal_action_count

    @property
    def cwa_informal_count(self):
        """Gets the cwa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Water Act.

        :return: The cwa_informal_count of this Echo07.
        :rtype: str
        """
        return self._cwa_informal_count

    @cwa_informal_count.setter
    def cwa_informal_count(self, cwa_informal_count):
        """Sets the cwa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Clean Water Act.

        :param cwa_informal_count: The cwa_informal_count of this Echo07.
        :type cwa_informal_count: str
        """
        if cwa_informal_count is None:
            raise ValueError("Invalid value for `cwa_informal_count`, must not be `None`")

        self._cwa_informal_count = cwa_informal_count

    @property
    def cwa_inspection_count(self):
        """Gets the cwa_inspection_count of this Echo07.

        The number of inspections/compliance evaluations under the Clean Water Act, occurring at the facility within the last five years.

        :return: The cwa_inspection_count of this Echo07.
        :rtype: str
        """
        return self._cwa_inspection_count

    @cwa_inspection_count.setter
    def cwa_inspection_count(self, cwa_inspection_count):
        """Sets the cwa_inspection_count of this Echo07.

        The number of inspections/compliance evaluations under the Clean Water Act, occurring at the facility within the last five years.

        :param cwa_inspection_count: The cwa_inspection_count of this Echo07.
        :type cwa_inspection_count: str
        """
        if cwa_inspection_count is None:
            raise ValueError("Invalid value for `cwa_inspection_count`, must not be `None`")

        self._cwa_inspection_count = cwa_inspection_count

    @property
    def cwa_last_penalty_amt(self):
        """Gets the cwa_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the CWA program database.

        :return: The cwa_last_penalty_amt of this Echo07.
        :rtype: str
        """
        return self._cwa_last_penalty_amt

    @cwa_last_penalty_amt.setter
    def cwa_last_penalty_amt(self, cwa_last_penalty_amt):
        """Sets the cwa_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the CWA program database.

        :param cwa_last_penalty_amt: The cwa_last_penalty_amt of this Echo07.
        :type cwa_last_penalty_amt: str
        """
        if cwa_last_penalty_amt is None:
            raise ValueError("Invalid value for `cwa_last_penalty_amt`, must not be `None`")

        self._cwa_last_penalty_amt = cwa_last_penalty_amt

    @property
    def cwa_last_penalty_date(self):
        """Gets the cwa_last_penalty_date of this Echo07.

        The effective date of the most recent penalty entered into the CWA program database.

        :return: The cwa_last_penalty_date of this Echo07.
        :rtype: str
        """
        return self._cwa_last_penalty_date

    @cwa_last_penalty_date.setter
    def cwa_last_penalty_date(self, cwa_last_penalty_date):
        """Sets the cwa_last_penalty_date of this Echo07.

        The effective date of the most recent penalty entered into the CWA program database.

        :param cwa_last_penalty_date: The cwa_last_penalty_date of this Echo07.
        :type cwa_last_penalty_date: str
        """
        if cwa_last_penalty_date is None:
            raise ValueError("Invalid value for `cwa_last_penalty_date`, must not be `None`")

        self._cwa_last_penalty_date = cwa_last_penalty_date

    @property
    def cwanaics(self):
        """Gets the cwanaics of this Echo07.

        The CWA permit's primary North American Industry Classification System (NAICS) Codes.

        :return: The cwanaics of this Echo07.
        :rtype: str
        """
        return self._cwanaics

    @cwanaics.setter
    def cwanaics(self, cwanaics):
        """Sets the cwanaics of this Echo07.

        The CWA permit's primary North American Industry Classification System (NAICS) Codes.

        :param cwanaics: The cwanaics of this Echo07.
        :type cwanaics: str
        """
        if cwanaics is None:
            raise ValueError("Invalid value for `cwanaics`, must not be `None`")

        self._cwanaics = cwanaics

    @property
    def cwa_penalties(self):
        """Gets the cwa_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Water Act.

        :return: The cwa_penalties of this Echo07.
        :rtype: str
        """
        return self._cwa_penalties

    @cwa_penalties.setter
    def cwa_penalties(self, cwa_penalties):
        """Sets the cwa_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Water Act.

        :param cwa_penalties: The cwa_penalties of this Echo07.
        :type cwa_penalties: str
        """
        if cwa_penalties is None:
            raise ValueError("Invalid value for `cwa_penalties`, must not be `None`")

        self._cwa_penalties = cwa_penalties

    @property
    def cwa_permit_types(self):
        """Gets the cwa_permit_types of this Echo07.

        Indicates the facility's permit type or designation. - Major - Minor

        :return: The cwa_permit_types of this Echo07.
        :rtype: str
        """
        return self._cwa_permit_types

    @cwa_permit_types.setter
    def cwa_permit_types(self, cwa_permit_types):
        """Sets the cwa_permit_types of this Echo07.

        Indicates the facility's permit type or designation. - Major - Minor

        :param cwa_permit_types: The cwa_permit_types of this Echo07.
        :type cwa_permit_types: str
        """
        if cwa_permit_types is None:
            raise ValueError("Invalid value for `cwa_permit_types`, must not be `None`")

        self._cwa_permit_types = cwa_permit_types

    @property
    def cwa_qtrs_with_nc(self):
        """Gets the cwa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the CWA permit is considered in violation.

        :return: The cwa_qtrs_with_nc of this Echo07.
        :rtype: str
        """
        return self._cwa_qtrs_with_nc

    @cwa_qtrs_with_nc.setter
    def cwa_qtrs_with_nc(self, cwa_qtrs_with_nc):
        """Sets the cwa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the CWA permit is considered in violation.

        :param cwa_qtrs_with_nc: The cwa_qtrs_with_nc of this Echo07.
        :type cwa_qtrs_with_nc: str
        """
        if cwa_qtrs_with_nc is None:
            raise ValueError("Invalid value for `cwa_qtrs_with_nc`, must not be `None`")

        self._cwa_qtrs_with_nc = cwa_qtrs_with_nc

    @property
    def cwasics(self):
        """Gets the cwasics of this Echo07.

        The CWA permit's primary Standard Industrial Classification (SIC) Codes.

        :return: The cwasics of this Echo07.
        :rtype: str
        """
        return self._cwasics

    @cwasics.setter
    def cwasics(self, cwasics):
        """Sets the cwasics of this Echo07.

        The CWA permit's primary Standard Industrial Classification (SIC) Codes.

        :param cwasics: The cwasics of this Echo07.
        :type cwasics: str
        """
        if cwasics is None:
            raise ValueError("Invalid value for `cwasics`, must not be `None`")

        self._cwasics = cwasics

    @property
    def cwasnc_flag(self):
        """Gets the cwasnc_flag of this Echo07.

        The CWA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :return: The cwasnc_flag of this Echo07.
        :rtype: str
        """
        return self._cwasnc_flag

    @cwasnc_flag.setter
    def cwasnc_flag(self, cwasnc_flag):
        """Sets the cwasnc_flag of this Echo07.

        The CWA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :param cwasnc_flag: The cwasnc_flag of this Echo07.
        :type cwasnc_flag: str
        """
        if cwasnc_flag is None:
            raise ValueError("Invalid value for `cwasnc_flag`, must not be `None`")

        self._cwasnc_flag = cwasnc_flag

    @property
    def camd_ids(self):
        """Gets the camd_ids of this Echo07.

        Facility identifiers for the Clean Air Markets Division database.

        :return: The camd_ids of this Echo07.
        :rtype: str
        """
        return self._camd_ids

    @camd_ids.setter
    def camd_ids(self, camd_ids):
        """Sets the camd_ids of this Echo07.

        Facility identifiers for the Clean Air Markets Division database.

        :param camd_ids: The camd_ids of this Echo07.
        :type camd_ids: str
        """
        if camd_ids is None:
            raise ValueError("Invalid value for `camd_ids`, must not be `None`")

        self._camd_ids = camd_ids

    @property
    def census_block_group(self):
        """Gets the census_block_group of this Echo07.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :return: The census_block_group of this Echo07.
        :rtype: str
        """
        return self._census_block_group

    @census_block_group.setter
    def census_block_group(self, census_block_group):
        """Sets the census_block_group of this Echo07.

        A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.

        :param census_block_group: The census_block_group of this Echo07.
        :type census_block_group: str
        """
        if census_block_group is None:
            raise ValueError("Invalid value for `census_block_group`, must not be `None`")

        self._census_block_group = census_block_group

    @property
    def curr_sv_flag(self):
        """Gets the curr_sv_flag of this Echo07.

        Indicates if the facility has a current significant violation. 1 = Yes

        :return: The curr_sv_flag of this Echo07.
        :rtype: str
        """
        return self._curr_sv_flag

    @curr_sv_flag.setter
    def curr_sv_flag(self, curr_sv_flag):
        """Sets the curr_sv_flag of this Echo07.

        Indicates if the facility has a current significant violation. 1 = Yes

        :param curr_sv_flag: The curr_sv_flag of this Echo07.
        :type curr_sv_flag: str
        """
        if curr_sv_flag is None:
            raise ValueError("Invalid value for `curr_sv_flag`, must not be `None`")

        self._curr_sv_flag = curr_sv_flag

    @property
    def curr_vio_flag(self):
        """Gets the curr_vio_flag of this Echo07.

        Indicates if the facility has a current violation. 1 = Yes

        :return: The curr_vio_flag of this Echo07.
        :rtype: str
        """
        return self._curr_vio_flag

    @curr_vio_flag.setter
    def curr_vio_flag(self, curr_vio_flag):
        """Sets the curr_vio_flag of this Echo07.

        Indicates if the facility has a current violation. 1 = Yes

        :param curr_vio_flag: The curr_vio_flag of this Echo07.
        :type curr_vio_flag: str
        """
        if curr_vio_flag is None:
            raise ValueError("Invalid value for `curr_vio_flag`, must not be `None`")

        self._curr_vio_flag = curr_vio_flag

    @property
    def dfr_url(self):
        """Gets the dfr_url of this Echo07.

        The URL to the facility's Detailed Facility Report.

        :return: The dfr_url of this Echo07.
        :rtype: str
        """
        return self._dfr_url

    @dfr_url.setter
    def dfr_url(self, dfr_url):
        """Sets the dfr_url of this Echo07.

        The URL to the facility's Detailed Facility Report.

        :param dfr_url: The dfr_url of this Echo07.
        :type dfr_url: str
        """
        if dfr_url is None:
            raise ValueError("Invalid value for `dfr_url`, must not be `None`")

        self._dfr_url = dfr_url

    @property
    def ea5yr_flag(self):
        """Gets the ea5yr_flag of this Echo07.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :return: The ea5yr_flag of this Echo07.
        :rtype: str
        """
        return self._ea5yr_flag

    @ea5yr_flag.setter
    def ea5yr_flag(self, ea5yr_flag):
        """Sets the ea5yr_flag of this Echo07.

        Indicates if the facility has a formal enforcement action within the last 5 years. 1 = Yes

        :param ea5yr_flag: The ea5yr_flag of this Echo07.
        :type ea5yr_flag: str
        """
        if ea5yr_flag is None:
            raise ValueError("Invalid value for `ea5yr_flag`, must not be `None`")

        self._ea5yr_flag = ea5yr_flag

    @property
    def eff_charts_flag(self):
        """Gets the eff_charts_flag of this Echo07.


        :return: The eff_charts_flag of this Echo07.
        :rtype: str
        """
        return self._eff_charts_flag

    @eff_charts_flag.setter
    def eff_charts_flag(self, eff_charts_flag):
        """Sets the eff_charts_flag of this Echo07.


        :param eff_charts_flag: The eff_charts_flag of this Echo07.
        :type eff_charts_flag: str
        """
        if eff_charts_flag is None:
            raise ValueError("Invalid value for `eff_charts_flag`, must not be `None`")

        self._eff_charts_flag = eff_charts_flag

    @property
    def eis_flag(self):
        """Gets the eis_flag of this Echo07.

        Indicates whether the facility reports to the Emissions Inventory System (EIS).

        :return: The eis_flag of this Echo07.
        :rtype: str
        """
        return self._eis_flag

    @eis_flag.setter
    def eis_flag(self, eis_flag):
        """Sets the eis_flag of this Echo07.

        Indicates whether the facility reports to the Emissions Inventory System (EIS).

        :param eis_flag: The eis_flag of this Echo07.
        :type eis_flag: str
        """
        if eis_flag is None:
            raise ValueError("Invalid value for `eis_flag`, must not be `None`")

        self._eis_flag = eis_flag

    @property
    def eis_ids(self):
        """Gets the eis_ids of this Echo07.

        A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.

        :return: The eis_ids of this Echo07.
        :rtype: str
        """
        return self._eis_ids

    @eis_ids.setter
    def eis_ids(self, eis_ids):
        """Sets the eis_ids of this Echo07.

        A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.

        :param eis_ids: The eis_ids of this Echo07.
        :type eis_ids: str
        """
        if eis_ids is None:
            raise ValueError("Invalid value for `eis_ids`, must not be `None`")

        self._eis_ids = eis_ids

    @property
    def ejscreen_flag(self):
        """Gets the ejscreen_flag of this Echo07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag of this Echo07.
        :rtype: str
        """
        return self._ejscreen_flag

    @ejscreen_flag.setter
    def ejscreen_flag(self, ejscreen_flag):
        """Sets the ejscreen_flag of this Echo07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag: The ejscreen_flag of this Echo07.
        :type ejscreen_flag: str
        """
        if ejscreen_flag is None:
            raise ValueError("Invalid value for `ejscreen_flag`, must not be `None`")

        self._ejscreen_flag = ejscreen_flag

    @property
    def ejscreen_flag_us(self):
        """Gets the ejscreen_flag_us of this Echo07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :return: The ejscreen_flag_us of this Echo07.
        :rtype: str
        """
        return self._ejscreen_flag_us

    @ejscreen_flag_us.setter
    def ejscreen_flag_us(self, ejscreen_flag_us):
        """Sets the ejscreen_flag_us of this Echo07.

        A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.

        :param ejscreen_flag_us: The ejscreen_flag_us of this Echo07.
        :type ejscreen_flag_us: str
        """
        if ejscreen_flag_us is None:
            raise ValueError("Invalid value for `ejscreen_flag_us`, must not be `None`")

        self._ejscreen_flag_us = ejscreen_flag_us

    @property
    def epcra_inspections5yr(self):
        """Gets the epcra_inspections5yr of this Echo07.

        From ICIS FE&C, the number of EPCRA inspections at the facility in the past five years.

        :return: The epcra_inspections5yr of this Echo07.
        :rtype: str
        """
        return self._epcra_inspections5yr

    @epcra_inspections5yr.setter
    def epcra_inspections5yr(self, epcra_inspections5yr):
        """Sets the epcra_inspections5yr of this Echo07.

        From ICIS FE&C, the number of EPCRA inspections at the facility in the past five years.

        :param epcra_inspections5yr: The epcra_inspections5yr of this Echo07.
        :type epcra_inspections5yr: str
        """
        if epcra_inspections5yr is None:
            raise ValueError("Invalid value for `epcra_inspections5yr`, must not be `None`")

        self._epcra_inspections5yr = epcra_inspections5yr

    @property
    def fac3yr_compliance_history(self):
        """Gets the fac3yr_compliance_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :return: The fac3yr_compliance_history of this Echo07.
        :rtype: str
        """
        return self._fac3yr_compliance_history

    @fac3yr_compliance_history.setter
    def fac3yr_compliance_history(self, fac3yr_compliance_history):
        """Sets the fac3yr_compliance_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :param fac3yr_compliance_history: The fac3yr_compliance_history of this Echo07.
        :type fac3yr_compliance_history: str
        """
        if fac3yr_compliance_history is None:
            raise ValueError("Invalid value for `fac3yr_compliance_history`, must not be `None`")

        self._fac3yr_compliance_history = fac3yr_compliance_history

    @property
    def fac_accuracy_meters(self):
        """Gets the fac_accuracy_meters of this Echo07.

        The estimate of accuracy, in meters, based on provided spatial metadata and quality assurance routines for the provided facility coordinate.

        :return: The fac_accuracy_meters of this Echo07.
        :rtype: str
        """
        return self._fac_accuracy_meters

    @fac_accuracy_meters.setter
    def fac_accuracy_meters(self, fac_accuracy_meters):
        """Sets the fac_accuracy_meters of this Echo07.

        The estimate of accuracy, in meters, based on provided spatial metadata and quality assurance routines for the provided facility coordinate.

        :param fac_accuracy_meters: The fac_accuracy_meters of this Echo07.
        :type fac_accuracy_meters: str
        """
        if fac_accuracy_meters is None:
            raise ValueError("Invalid value for `fac_accuracy_meters`, must not be `None`")

        self._fac_accuracy_meters = fac_accuracy_meters

    @property
    def fac_active_flag(self):
        """Gets the fac_active_flag of this Echo07.

        Indicates whether any of the associated ICIS-Air, ICIS-NPDES, RCRAInfo or SDWIS permits/facilities are in an active status.

        :return: The fac_active_flag of this Echo07.
        :rtype: str
        """
        return self._fac_active_flag

    @fac_active_flag.setter
    def fac_active_flag(self, fac_active_flag):
        """Sets the fac_active_flag of this Echo07.

        Indicates whether any of the associated ICIS-Air, ICIS-NPDES, RCRAInfo or SDWIS permits/facilities are in an active status.

        :param fac_active_flag: The fac_active_flag of this Echo07.
        :type fac_active_flag: str
        """
        if fac_active_flag is None:
            raise ValueError("Invalid value for `fac_active_flag`, must not be `None`")

        self._fac_active_flag = fac_active_flag

    @property
    def fac_chesapeake_bay_flg(self):
        """Gets the fac_chesapeake_bay_flg of this Echo07.

        Indicates whether the facility, based on the facility spatial coordinate, is within the Chesapeake Bay watershed.

        :return: The fac_chesapeake_bay_flg of this Echo07.
        :rtype: str
        """
        return self._fac_chesapeake_bay_flg

    @fac_chesapeake_bay_flg.setter
    def fac_chesapeake_bay_flg(self, fac_chesapeake_bay_flg):
        """Sets the fac_chesapeake_bay_flg of this Echo07.

        Indicates whether the facility, based on the facility spatial coordinate, is within the Chesapeake Bay watershed.

        :param fac_chesapeake_bay_flg: The fac_chesapeake_bay_flg of this Echo07.
        :type fac_chesapeake_bay_flg: str
        """
        if fac_chesapeake_bay_flg is None:
            raise ValueError("Invalid value for `fac_chesapeake_bay_flg`, must not be `None`")

        self._fac_chesapeake_bay_flg = fac_chesapeake_bay_flg

    @property
    def fac_city(self):
        """Gets the fac_city of this Echo07.

        The city where the facility is located.

        :return: The fac_city of this Echo07.
        :rtype: str
        """
        return self._fac_city

    @fac_city.setter
    def fac_city(self, fac_city):
        """Sets the fac_city of this Echo07.

        The city where the facility is located.

        :param fac_city: The fac_city of this Echo07.
        :type fac_city: str
        """
        if fac_city is None:
            raise ValueError("Invalid value for `fac_city`, must not be `None`")

        self._fac_city = fac_city

    @property
    def fac_collection_method(self):
        """Gets the fac_collection_method of this Echo07.

        Indicates the collection method used (GPS, Photo Interpolation, Address Geocode, etc) to determine a facility's spatial coodinate.

        :return: The fac_collection_method of this Echo07.
        :rtype: str
        """
        return self._fac_collection_method

    @fac_collection_method.setter
    def fac_collection_method(self, fac_collection_method):
        """Sets the fac_collection_method of this Echo07.

        Indicates the collection method used (GPS, Photo Interpolation, Address Geocode, etc) to determine a facility's spatial coodinate.

        :param fac_collection_method: The fac_collection_method of this Echo07.
        :type fac_collection_method: str
        """
        if fac_collection_method is None:
            raise ValueError("Invalid value for `fac_collection_method`, must not be `None`")

        self._fac_collection_method = fac_collection_method

    @property
    def fac_compliance_status(self):
        """Gets the fac_compliance_status of this Echo07.

        An indication of the facility's known overall compliance status. Status codes include: SNC/Serious Viol [significant noncompliance (SNC), high priority violation (HPV), or serious violator, depending on statute] In Violation (in violation of an environmental regulation) No Violation (no violations recorded in the national systems of record) Not Available Unknown

        :return: The fac_compliance_status of this Echo07.
        :rtype: str
        """
        return self._fac_compliance_status

    @fac_compliance_status.setter
    def fac_compliance_status(self, fac_compliance_status):
        """Sets the fac_compliance_status of this Echo07.

        An indication of the facility's known overall compliance status. Status codes include: SNC/Serious Viol [significant noncompliance (SNC), high priority violation (HPV), or serious violator, depending on statute] In Violation (in violation of an environmental regulation) No Violation (no violations recorded in the national systems of record) Not Available Unknown

        :param fac_compliance_status: The fac_compliance_status of this Echo07.
        :type fac_compliance_status: str
        """
        if fac_compliance_status is None:
            raise ValueError("Invalid value for `fac_compliance_status`, must not be `None`")

        self._fac_compliance_status = fac_compliance_status

    @property
    def fac_county(self):
        """Gets the fac_county of this Echo07.

        The county where the facility is located.

        :return: The fac_county of this Echo07.
        :rtype: str
        """
        return self._fac_county

    @fac_county.setter
    def fac_county(self, fac_county):
        """Sets the fac_county of this Echo07.

        The county where the facility is located.

        :param fac_county: The fac_county of this Echo07.
        :type fac_county: str
        """
        if fac_county is None:
            raise ValueError("Invalid value for `fac_county`, must not be `None`")

        self._fac_county = fac_county

    @property
    def fac_date_last_formal_act_epa(self):
        """Gets the fac_date_last_formal_act_epa of this Echo07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility.

        :return: The fac_date_last_formal_act_epa of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_formal_act_epa

    @fac_date_last_formal_act_epa.setter
    def fac_date_last_formal_act_epa(self, fac_date_last_formal_act_epa):
        """Sets the fac_date_last_formal_act_epa of this Echo07.

        Indicates the effective date of the most recent listed formal enforcement action taken against the facility.

        :param fac_date_last_formal_act_epa: The fac_date_last_formal_act_epa of this Echo07.
        :type fac_date_last_formal_act_epa: str
        """
        if fac_date_last_formal_act_epa is None:
            raise ValueError("Invalid value for `fac_date_last_formal_act_epa`, must not be `None`")

        self._fac_date_last_formal_act_epa = fac_date_last_formal_act_epa

    @property
    def fac_date_last_formal_act_st(self):
        """Gets the fac_date_last_formal_act_st of this Echo07.

        The effective date of the most recent listed formal enforcement action taken against the facility by a state agency.

        :return: The fac_date_last_formal_act_st of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_formal_act_st

    @fac_date_last_formal_act_st.setter
    def fac_date_last_formal_act_st(self, fac_date_last_formal_act_st):
        """Sets the fac_date_last_formal_act_st of this Echo07.

        The effective date of the most recent listed formal enforcement action taken against the facility by a state agency.

        :param fac_date_last_formal_act_st: The fac_date_last_formal_act_st of this Echo07.
        :type fac_date_last_formal_act_st: str
        """
        if fac_date_last_formal_act_st is None:
            raise ValueError("Invalid value for `fac_date_last_formal_act_st`, must not be `None`")

        self._fac_date_last_formal_act_st = fac_date_last_formal_act_st

    @property
    def fac_date_last_formal_action(self):
        """Gets the fac_date_last_formal_action of this Echo07.

        Indicates the effective date of the most recent listed enforcement action taken against the facility.

        :return: The fac_date_last_formal_action of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_formal_action

    @fac_date_last_formal_action.setter
    def fac_date_last_formal_action(self, fac_date_last_formal_action):
        """Sets the fac_date_last_formal_action of this Echo07.

        Indicates the effective date of the most recent listed enforcement action taken against the facility.

        :param fac_date_last_formal_action: The fac_date_last_formal_action of this Echo07.
        :type fac_date_last_formal_action: str
        """
        if fac_date_last_formal_action is None:
            raise ValueError("Invalid value for `fac_date_last_formal_action`, must not be `None`")

        self._fac_date_last_formal_action = fac_date_last_formal_action

    @property
    def fac_date_last_informal_act_epa(self):
        """Gets the fac_date_last_informal_act_epa of this Echo07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility.

        :return: The fac_date_last_informal_act_epa of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_informal_act_epa

    @fac_date_last_informal_act_epa.setter
    def fac_date_last_informal_act_epa(self, fac_date_last_informal_act_epa):
        """Sets the fac_date_last_informal_act_epa of this Echo07.

        Indicates the effective date of the most recent listed informal enforcement action taken against the facility.

        :param fac_date_last_informal_act_epa: The fac_date_last_informal_act_epa of this Echo07.
        :type fac_date_last_informal_act_epa: str
        """
        if fac_date_last_informal_act_epa is None:
            raise ValueError("Invalid value for `fac_date_last_informal_act_epa`, must not be `None`")

        self._fac_date_last_informal_act_epa = fac_date_last_informal_act_epa

    @property
    def fac_date_last_informal_act_st(self):
        """Gets the fac_date_last_informal_act_st of this Echo07.

        The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.

        :return: The fac_date_last_informal_act_st of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_informal_act_st

    @fac_date_last_informal_act_st.setter
    def fac_date_last_informal_act_st(self, fac_date_last_informal_act_st):
        """Sets the fac_date_last_informal_act_st of this Echo07.

        The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.

        :param fac_date_last_informal_act_st: The fac_date_last_informal_act_st of this Echo07.
        :type fac_date_last_informal_act_st: str
        """
        if fac_date_last_informal_act_st is None:
            raise ValueError("Invalid value for `fac_date_last_informal_act_st`, must not be `None`")

        self._fac_date_last_informal_act_st = fac_date_last_informal_act_st

    @property
    def fac_date_last_informal_action(self):
        """Gets the fac_date_last_informal_action of this Echo07.

        The date of the most recent informal action or NOV taken recorded in AFS, ICIS-NPDES, RCRA Info or SDWIS.

        :return: The fac_date_last_informal_action of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_informal_action

    @fac_date_last_informal_action.setter
    def fac_date_last_informal_action(self, fac_date_last_informal_action):
        """Sets the fac_date_last_informal_action of this Echo07.

        The date of the most recent informal action or NOV taken recorded in AFS, ICIS-NPDES, RCRA Info or SDWIS.

        :param fac_date_last_informal_action: The fac_date_last_informal_action of this Echo07.
        :type fac_date_last_informal_action: str
        """
        if fac_date_last_informal_action is None:
            raise ValueError("Invalid value for `fac_date_last_informal_action`, must not be `None`")

        self._fac_date_last_informal_action = fac_date_last_informal_action

    @property
    def fac_date_last_inspection(self):
        """Gets the fac_date_last_inspection of this Echo07.

        The date on which most recent inspection of the facility took place. For the Clean Air Act, the date on which a Full Inspection (FCE) was completed. This date may or may not correspond to an actual site visit. A series of partial on- or off-site inspections may have been conducted during the fiscal year as part of this FCE.

        :return: The fac_date_last_inspection of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_inspection

    @fac_date_last_inspection.setter
    def fac_date_last_inspection(self, fac_date_last_inspection):
        """Sets the fac_date_last_inspection of this Echo07.

        The date on which most recent inspection of the facility took place. For the Clean Air Act, the date on which a Full Inspection (FCE) was completed. This date may or may not correspond to an actual site visit. A series of partial on- or off-site inspections may have been conducted during the fiscal year as part of this FCE.

        :param fac_date_last_inspection: The fac_date_last_inspection of this Echo07.
        :type fac_date_last_inspection: str
        """
        if fac_date_last_inspection is None:
            raise ValueError("Invalid value for `fac_date_last_inspection`, must not be `None`")

        self._fac_date_last_inspection = fac_date_last_inspection

    @property
    def fac_date_last_inspection_epa(self):
        """Gets the fac_date_last_inspection_epa of this Echo07.

        The date of the facility's last inspection.

        :return: The fac_date_last_inspection_epa of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_inspection_epa

    @fac_date_last_inspection_epa.setter
    def fac_date_last_inspection_epa(self, fac_date_last_inspection_epa):
        """Sets the fac_date_last_inspection_epa of this Echo07.

        The date of the facility's last inspection.

        :param fac_date_last_inspection_epa: The fac_date_last_inspection_epa of this Echo07.
        :type fac_date_last_inspection_epa: str
        """
        if fac_date_last_inspection_epa is None:
            raise ValueError("Invalid value for `fac_date_last_inspection_epa`, must not be `None`")

        self._fac_date_last_inspection_epa = fac_date_last_inspection_epa

    @property
    def fac_date_last_inspection_state(self):
        """Gets the fac_date_last_inspection_state of this Echo07.

        The date on which the most recent \"olfficial\"  inspection of the facility by a state agency took place.

        :return: The fac_date_last_inspection_state of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_inspection_state

    @fac_date_last_inspection_state.setter
    def fac_date_last_inspection_state(self, fac_date_last_inspection_state):
        """Sets the fac_date_last_inspection_state of this Echo07.

        The date on which the most recent \"olfficial\"  inspection of the facility by a state agency took place.

        :param fac_date_last_inspection_state: The fac_date_last_inspection_state of this Echo07.
        :type fac_date_last_inspection_state: str
        """
        if fac_date_last_inspection_state is None:
            raise ValueError("Invalid value for `fac_date_last_inspection_state`, must not be `None`")

        self._fac_date_last_inspection_state = fac_date_last_inspection_state

    @property
    def fac_date_last_penalty(self):
        """Gets the fac_date_last_penalty of this Echo07.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility.

        :return: The fac_date_last_penalty of this Echo07.
        :rtype: str
        """
        return self._fac_date_last_penalty

    @fac_date_last_penalty.setter
    def fac_date_last_penalty(self, fac_date_last_penalty):
        """Sets the fac_date_last_penalty of this Echo07.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility.

        :param fac_date_last_penalty: The fac_date_last_penalty of this Echo07.
        :type fac_date_last_penalty: str
        """
        if fac_date_last_penalty is None:
            raise ValueError("Invalid value for `fac_date_last_penalty`, must not be `None`")

        self._fac_date_last_penalty = fac_date_last_penalty

    @property
    def fac_days_last_inspection(self):
        """Gets the fac_days_last_inspection of this Echo07.

        The number of days from the last ECHO refresh to the date on which the most recent inspection of the facility took place based on data recorded into AFS, ICIS-NPDES, or RCRA Info.

        :return: The fac_days_last_inspection of this Echo07.
        :rtype: str
        """
        return self._fac_days_last_inspection

    @fac_days_last_inspection.setter
    def fac_days_last_inspection(self, fac_days_last_inspection):
        """Sets the fac_days_last_inspection of this Echo07.

        The number of days from the last ECHO refresh to the date on which the most recent inspection of the facility took place based on data recorded into AFS, ICIS-NPDES, or RCRA Info.

        :param fac_days_last_inspection: The fac_days_last_inspection of this Echo07.
        :type fac_days_last_inspection: str
        """
        if fac_days_last_inspection is None:
            raise ValueError("Invalid value for `fac_days_last_inspection`, must not be `None`")

        self._fac_days_last_inspection = fac_days_last_inspection

    @property
    def fac_derived_cb2010(self):
        """Gets the fac_derived_cb2010 of this Echo07.

        The 2010 Census Block derived from the facility coordinate.

        :return: The fac_derived_cb2010 of this Echo07.
        :rtype: str
        """
        return self._fac_derived_cb2010

    @fac_derived_cb2010.setter
    def fac_derived_cb2010(self, fac_derived_cb2010):
        """Sets the fac_derived_cb2010 of this Echo07.

        The 2010 Census Block derived from the facility coordinate.

        :param fac_derived_cb2010: The fac_derived_cb2010 of this Echo07.
        :type fac_derived_cb2010: str
        """
        if fac_derived_cb2010 is None:
            raise ValueError("Invalid value for `fac_derived_cb2010`, must not be `None`")

        self._fac_derived_cb2010 = fac_derived_cb2010

    @property
    def fac_derived_cd113(self):
        """Gets the fac_derived_cd113 of this Echo07.

        The 113th Congressional District derived from the facility coordinate.

        :return: The fac_derived_cd113 of this Echo07.
        :rtype: str
        """
        return self._fac_derived_cd113

    @fac_derived_cd113.setter
    def fac_derived_cd113(self, fac_derived_cd113):
        """Sets the fac_derived_cd113 of this Echo07.

        The 113th Congressional District derived from the facility coordinate.

        :param fac_derived_cd113: The fac_derived_cd113 of this Echo07.
        :type fac_derived_cd113: str
        """
        if fac_derived_cd113 is None:
            raise ValueError("Invalid value for `fac_derived_cd113`, must not be `None`")

        self._fac_derived_cd113 = fac_derived_cd113

    @property
    def fac_derived_huc(self):
        """Gets the fac_derived_huc of this Echo07.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :return: The fac_derived_huc of this Echo07.
        :rtype: str
        """
        return self._fac_derived_huc

    @fac_derived_huc.setter
    def fac_derived_huc(self, fac_derived_huc):
        """Sets the fac_derived_huc of this Echo07.

        The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.

        :param fac_derived_huc: The fac_derived_huc of this Echo07.
        :type fac_derived_huc: str
        """
        if fac_derived_huc is None:
            raise ValueError("Invalid value for `fac_derived_huc`, must not be `None`")

        self._fac_derived_huc = fac_derived_huc

    @property
    def fac_derived_rad_wbdhu12(self):
        """Gets the fac_derived_rad_wbdhu12 of this Echo07.

        The 12-digit Watershed Boundary Dataset code derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :return: The fac_derived_rad_wbdhu12 of this Echo07.
        :rtype: str
        """
        return self._fac_derived_rad_wbdhu12

    @fac_derived_rad_wbdhu12.setter
    def fac_derived_rad_wbdhu12(self, fac_derived_rad_wbdhu12):
        """Sets the fac_derived_rad_wbdhu12 of this Echo07.

        The 12-digit Watershed Boundary Dataset code derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :param fac_derived_rad_wbdhu12: The fac_derived_rad_wbdhu12 of this Echo07.
        :type fac_derived_rad_wbdhu12: str
        """
        if fac_derived_rad_wbdhu12 is None:
            raise ValueError("Invalid value for `fac_derived_rad_wbdhu12`, must not be `None`")

        self._fac_derived_rad_wbdhu12 = fac_derived_rad_wbdhu12

    @property
    def fac_derived_rad_wbdhu12_name(self):
        """Gets the fac_derived_rad_wbdhu12_name of this Echo07.

        The 12 digit Watershed Boundary Dataset name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :return: The fac_derived_rad_wbdhu12_name of this Echo07.
        :rtype: str
        """
        return self._fac_derived_rad_wbdhu12_name

    @fac_derived_rad_wbdhu12_name.setter
    def fac_derived_rad_wbdhu12_name(self, fac_derived_rad_wbdhu12_name):
        """Sets the fac_derived_rad_wbdhu12_name of this Echo07.

        The 12 digit Watershed Boundary Dataset name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :param fac_derived_rad_wbdhu12_name: The fac_derived_rad_wbdhu12_name of this Echo07.
        :type fac_derived_rad_wbdhu12_name: str
        """
        if fac_derived_rad_wbdhu12_name is None:
            raise ValueError("Invalid value for `fac_derived_rad_wbdhu12_name`, must not be `None`")

        self._fac_derived_rad_wbdhu12_name = fac_derived_rad_wbdhu12_name

    @property
    def fac_derived_rad_wbdhu8(self):
        """Gets the fac_derived_rad_wbdhu8 of this Echo07.

        The 8-digit Watershed Hydrologic Unit Code (HUC) derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :return: The fac_derived_rad_wbdhu8 of this Echo07.
        :rtype: str
        """
        return self._fac_derived_rad_wbdhu8

    @fac_derived_rad_wbdhu8.setter
    def fac_derived_rad_wbdhu8(self, fac_derived_rad_wbdhu8):
        """Sets the fac_derived_rad_wbdhu8 of this Echo07.

        The 8-digit Watershed Hydrologic Unit Code (HUC) derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :param fac_derived_rad_wbdhu8: The fac_derived_rad_wbdhu8 of this Echo07.
        :type fac_derived_rad_wbdhu8: str
        """
        if fac_derived_rad_wbdhu8 is None:
            raise ValueError("Invalid value for `fac_derived_rad_wbdhu8`, must not be `None`")

        self._fac_derived_rad_wbdhu8 = fac_derived_rad_wbdhu8

    @property
    def fac_derived_rad_wbdhu8_name(self):
        """Gets the fac_derived_rad_wbdhu8_name of this Echo07.

        The 8 digit watershed name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :return: The fac_derived_rad_wbdhu8_name of this Echo07.
        :rtype: str
        """
        return self._fac_derived_rad_wbdhu8_name

    @fac_derived_rad_wbdhu8_name.setter
    def fac_derived_rad_wbdhu8_name(self, fac_derived_rad_wbdhu8_name):
        """Sets the fac_derived_rad_wbdhu8_name of this Echo07.

        The 8 digit watershed name derived from Reach Indexing the facility's spatial coordinate against the 12 digit Watershed Boundary Dataset from USGS.

        :param fac_derived_rad_wbdhu8_name: The fac_derived_rad_wbdhu8_name of this Echo07.
        :type fac_derived_rad_wbdhu8_name: str
        """
        if fac_derived_rad_wbdhu8_name is None:
            raise ValueError("Invalid value for `fac_derived_rad_wbdhu8_name`, must not be `None`")

        self._fac_derived_rad_wbdhu8_name = fac_derived_rad_wbdhu8_name

    @property
    def fac_derived_stcty_fips(self):
        """Gets the fac_derived_stcty_fips of this Echo07.

        The Federal Information Processing Standard (FIPS) code which uniquely identifies the state and county in which the facility is located.

        :return: The fac_derived_stcty_fips of this Echo07.
        :rtype: str
        """
        return self._fac_derived_stcty_fips

    @fac_derived_stcty_fips.setter
    def fac_derived_stcty_fips(self, fac_derived_stcty_fips):
        """Sets the fac_derived_stcty_fips of this Echo07.

        The Federal Information Processing Standard (FIPS) code which uniquely identifies the state and county in which the facility is located.

        :param fac_derived_stcty_fips: The fac_derived_stcty_fips of this Echo07.
        :type fac_derived_stcty_fips: str
        """
        if fac_derived_stcty_fips is None:
            raise ValueError("Invalid value for `fac_derived_stcty_fips`, must not be `None`")

        self._fac_derived_stcty_fips = fac_derived_stcty_fips

    @property
    def fac_derived_tr_ibes(self):
        """Gets the fac_derived_tr_ibes of this Echo07.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :return: The fac_derived_tr_ibes of this Echo07.
        :rtype: str
        """
        return self._fac_derived_tr_ibes

    @fac_derived_tr_ibes.setter
    def fac_derived_tr_ibes(self, fac_derived_tr_ibes):
        """Sets the fac_derived_tr_ibes of this Echo07.

        The tribes or tribal territories located within 25 miles of the facility's location.

        :param fac_derived_tr_ibes: The fac_derived_tr_ibes of this Echo07.
        :type fac_derived_tr_ibes: str
        """
        if fac_derived_tr_ibes is None:
            raise ValueError("Invalid value for `fac_derived_tr_ibes`, must not be `None`")

        self._fac_derived_tr_ibes = fac_derived_tr_ibes

    @property
    def fac_derived_wbd(self):
        """Gets the fac_derived_wbd of this Echo07.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :return: The fac_derived_wbd of this Echo07.
        :rtype: str
        """
        return self._fac_derived_wbd

    @fac_derived_wbd.setter
    def fac_derived_wbd(self, fac_derived_wbd):
        """Sets the fac_derived_wbd of this Echo07.

        The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.

        :param fac_derived_wbd: The fac_derived_wbd of this Echo07.
        :type fac_derived_wbd: str
        """
        if fac_derived_wbd is None:
            raise ValueError("Invalid value for `fac_derived_wbd`, must not be `None`")

        self._fac_derived_wbd = fac_derived_wbd

    @property
    def fac_derived_wbdhu12_name(self):
        """Gets the fac_derived_wbdhu12_name of this Echo07.

        The Watershed Boundary Dataset name derived from the facility coordinate.

        :return: The fac_derived_wbdhu12_name of this Echo07.
        :rtype: str
        """
        return self._fac_derived_wbdhu12_name

    @fac_derived_wbdhu12_name.setter
    def fac_derived_wbdhu12_name(self, fac_derived_wbdhu12_name):
        """Sets the fac_derived_wbdhu12_name of this Echo07.

        The Watershed Boundary Dataset name derived from the facility coordinate.

        :param fac_derived_wbdhu12_name: The fac_derived_wbdhu12_name of this Echo07.
        :type fac_derived_wbdhu12_name: str
        """
        if fac_derived_wbdhu12_name is None:
            raise ValueError("Invalid value for `fac_derived_wbdhu12_name`, must not be `None`")

        self._fac_derived_wbdhu12_name = fac_derived_wbdhu12_name

    @property
    def fac_derived_wbdhu8(self):
        """Gets the fac_derived_wbdhu8 of this Echo07.

        Spatially derived HUC based on the facility's geographic coordinates in FRS.

        :return: The fac_derived_wbdhu8 of this Echo07.
        :rtype: str
        """
        return self._fac_derived_wbdhu8

    @fac_derived_wbdhu8.setter
    def fac_derived_wbdhu8(self, fac_derived_wbdhu8):
        """Sets the fac_derived_wbdhu8 of this Echo07.

        Spatially derived HUC based on the facility's geographic coordinates in FRS.

        :param fac_derived_wbdhu8: The fac_derived_wbdhu8 of this Echo07.
        :type fac_derived_wbdhu8: str
        """
        if fac_derived_wbdhu8 is None:
            raise ValueError("Invalid value for `fac_derived_wbdhu8`, must not be `None`")

        self._fac_derived_wbdhu8 = fac_derived_wbdhu8

    @property
    def fac_derived_wbdhu8_name(self):
        """Gets the fac_derived_wbdhu8_name of this Echo07.

        The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.

        :return: The fac_derived_wbdhu8_name of this Echo07.
        :rtype: str
        """
        return self._fac_derived_wbdhu8_name

    @fac_derived_wbdhu8_name.setter
    def fac_derived_wbdhu8_name(self, fac_derived_wbdhu8_name):
        """Sets the fac_derived_wbdhu8_name of this Echo07.

        The name of the hydrologic unit in which the facility is located within, derived spatially based on the facility's geographic coordinates in FRS.

        :param fac_derived_wbdhu8_name: The fac_derived_wbdhu8_name of this Echo07.
        :type fac_derived_wbdhu8_name: str
        """
        if fac_derived_wbdhu8_name is None:
            raise ValueError("Invalid value for `fac_derived_wbdhu8_name`, must not be `None`")

        self._fac_derived_wbdhu8_name = fac_derived_wbdhu8_name

    @property
    def fac_derived_zip(self):
        """Gets the fac_derived_zip of this Echo07.

        The ZIP Code derived from the facility coordinate.

        :return: The fac_derived_zip of this Echo07.
        :rtype: str
        """
        return self._fac_derived_zip

    @fac_derived_zip.setter
    def fac_derived_zip(self, fac_derived_zip):
        """Sets the fac_derived_zip of this Echo07.

        The ZIP Code derived from the facility coordinate.

        :param fac_derived_zip: The fac_derived_zip of this Echo07.
        :type fac_derived_zip: str
        """
        if fac_derived_zip is None:
            raise ValueError("Invalid value for `fac_derived_zip`, must not be `None`")

        self._fac_derived_zip = fac_derived_zip

    @property
    def fac_epa_region(self):
        """Gets the fac_epa_region of this Echo07.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories

        :return: The fac_epa_region of this Echo07.
        :rtype: str
        """
        return self._fac_epa_region

    @fac_epa_region.setter
    def fac_epa_region(self, fac_epa_region):
        """Sets the fac_epa_region of this Echo07.

        The EPA region where the facility is located. EPA has 10 regional offices that execute programs within several states and territories

        :param fac_epa_region: The fac_epa_region of this Echo07.
        :type fac_epa_region: str
        """
        if fac_epa_region is None:
            raise ValueError("Invalid value for `fac_epa_region`, must not be `None`")

        self._fac_epa_region = fac_epa_region

    @property
    def fac_fips_code(self):
        """Gets the fac_fips_code of this Echo07.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :return: The fac_fips_code of this Echo07.
        :rtype: str
        """
        return self._fac_fips_code

    @fac_fips_code.setter
    def fac_fips_code(self, fac_fips_code):
        """Sets the fac_fips_code of this Echo07.

        The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.

        :param fac_fips_code: The fac_fips_code of this Echo07.
        :type fac_fips_code: str
        """
        if fac_fips_code is None:
            raise ValueError("Invalid value for `fac_fips_code`, must not be `None`")

        self._fac_fips_code = fac_fips_code

    @property
    def fac_federal_agency(self):
        """Gets the fac_federal_agency of this Echo07.

        The facility's federal agency code.

        :return: The fac_federal_agency of this Echo07.
        :rtype: str
        """
        return self._fac_federal_agency

    @fac_federal_agency.setter
    def fac_federal_agency(self, fac_federal_agency):
        """Sets the fac_federal_agency of this Echo07.

        The facility's federal agency code.

        :param fac_federal_agency: The fac_federal_agency of this Echo07.
        :type fac_federal_agency: str
        """
        if fac_federal_agency is None:
            raise ValueError("Invalid value for `fac_federal_agency`, must not be `None`")

        self._fac_federal_agency = fac_federal_agency

    @property
    def fac_federal_agency_name(self):
        """Gets the fac_federal_agency_name of this Echo07.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :return: The fac_federal_agency_name of this Echo07.
        :rtype: str
        """
        return self._fac_federal_agency_name

    @fac_federal_agency_name.setter
    def fac_federal_agency_name(self, fac_federal_agency_name):
        """Sets the fac_federal_agency_name of this Echo07.

        Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.

        :param fac_federal_agency_name: The fac_federal_agency_name of this Echo07.
        :type fac_federal_agency_name: str
        """
        if fac_federal_agency_name is None:
            raise ValueError("Invalid value for `fac_federal_agency_name`, must not be `None`")

        self._fac_federal_agency_name = fac_federal_agency_name

    @property
    def fac_federal_flg(self):
        """Gets the fac_federal_flg of this Echo07.

        Indicates whether the facility is part of a federal agency.

        :return: The fac_federal_flg of this Echo07.
        :rtype: str
        """
        return self._fac_federal_flg

    @fac_federal_flg.setter
    def fac_federal_flg(self, fac_federal_flg):
        """Sets the fac_federal_flg of this Echo07.

        Indicates whether the facility is part of a federal agency.

        :param fac_federal_flg: The fac_federal_flg of this Echo07.
        :type fac_federal_flg: str
        """
        if fac_federal_flg is None:
            raise ValueError("Invalid value for `fac_federal_flg`, must not be `None`")

        self._fac_federal_flg = fac_federal_flg

    @property
    def fac_formal_action_count(self):
        """Gets the fac_formal_action_count of this Echo07.

        Indicates the total number of enforcement actions taken against the facility within the last five years. NA indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits

        :return: The fac_formal_action_count of this Echo07.
        :rtype: str
        """
        return self._fac_formal_action_count

    @fac_formal_action_count.setter
    def fac_formal_action_count(self, fac_formal_action_count):
        """Sets the fac_formal_action_count of this Echo07.

        Indicates the total number of enforcement actions taken against the facility within the last five years. NA indicates that this measure is not applicable for facilities with no associated CAA, CWA, or RCRA permits

        :param fac_formal_action_count: The fac_formal_action_count of this Echo07.
        :type fac_formal_action_count: str
        """
        if fac_formal_action_count is None:
            raise ValueError("Invalid value for `fac_formal_action_count`, must not be `None`")

        self._fac_formal_action_count = fac_formal_action_count

    @property
    def fac_imp_water_flg(self):
        """Gets the fac_imp_water_flg of this Echo07.

        Indicates whether or not the facility discharges directly into category 4 or 5 impaired water, as designated under section 303(d) of the Clean Water Act.

        :return: The fac_imp_water_flg of this Echo07.
        :rtype: str
        """
        return self._fac_imp_water_flg

    @fac_imp_water_flg.setter
    def fac_imp_water_flg(self, fac_imp_water_flg):
        """Sets the fac_imp_water_flg of this Echo07.

        Indicates whether or not the facility discharges directly into category 4 or 5 impaired water, as designated under section 303(d) of the Clean Water Act.

        :param fac_imp_water_flg: The fac_imp_water_flg of this Echo07.
        :type fac_imp_water_flg: str
        """
        if fac_imp_water_flg is None:
            raise ValueError("Invalid value for `fac_imp_water_flg`, must not be `None`")

        self._fac_imp_water_flg = fac_imp_water_flg

    @property
    def fac_indian_cntry_flg(self):
        """Gets the fac_indian_cntry_flg of this Echo07.

        Flag showing Y/N whether the facility is located in Indian Country.

        :return: The fac_indian_cntry_flg of this Echo07.
        :rtype: str
        """
        return self._fac_indian_cntry_flg

    @fac_indian_cntry_flg.setter
    def fac_indian_cntry_flg(self, fac_indian_cntry_flg):
        """Sets the fac_indian_cntry_flg of this Echo07.

        Flag showing Y/N whether the facility is located in Indian Country.

        :param fac_indian_cntry_flg: The fac_indian_cntry_flg of this Echo07.
        :type fac_indian_cntry_flg: str
        """
        if fac_indian_cntry_flg is None:
            raise ValueError("Invalid value for `fac_indian_cntry_flg`, must not be `None`")

        self._fac_indian_cntry_flg = fac_indian_cntry_flg

    @property
    def fac_indian_spatial_flg(self):
        """Gets the fac_indian_spatial_flg of this Echo07.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :return: The fac_indian_spatial_flg of this Echo07.
        :rtype: str
        """
        return self._fac_indian_spatial_flg

    @fac_indian_spatial_flg.setter
    def fac_indian_spatial_flg(self, fac_indian_spatial_flg):
        """Sets the fac_indian_spatial_flg of this Echo07.

        Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.

        :param fac_indian_spatial_flg: The fac_indian_spatial_flg of this Echo07.
        :type fac_indian_spatial_flg: str
        """
        if fac_indian_spatial_flg is None:
            raise ValueError("Invalid value for `fac_indian_spatial_flg`, must not be `None`")

        self._fac_indian_spatial_flg = fac_indian_spatial_flg

    @property
    def fac_informal_count(self):
        """Gets the fac_informal_count of this Echo07.

        Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years

        :return: The fac_informal_count of this Echo07.
        :rtype: str
        """
        return self._fac_informal_count

    @fac_informal_count.setter
    def fac_informal_count(self, fac_informal_count):
        """Sets the fac_informal_count of this Echo07.

        Indicates the total number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years

        :param fac_informal_count: The fac_informal_count of this Echo07.
        :type fac_informal_count: str
        """
        if fac_informal_count is None:
            raise ValueError("Invalid value for `fac_informal_count`, must not be `None`")

        self._fac_informal_count = fac_informal_count

    @property
    def fac_inspection_count(self):
        """Gets the fac_inspection_count of this Echo07.

        The number of inspections/compliance evaluations that have occurred at the facility, under the AIR, CWA, and RCRA, within the last five years. The last 5 years will include data from the 20 most recently completed quarters, plus data from the current quarter up until the refresh date. This count only includes inspection types that are counted as inspections in official counts.

        :return: The fac_inspection_count of this Echo07.
        :rtype: str
        """
        return self._fac_inspection_count

    @fac_inspection_count.setter
    def fac_inspection_count(self, fac_inspection_count):
        """Sets the fac_inspection_count of this Echo07.

        The number of inspections/compliance evaluations that have occurred at the facility, under the AIR, CWA, and RCRA, within the last five years. The last 5 years will include data from the 20 most recently completed quarters, plus data from the current quarter up until the refresh date. This count only includes inspection types that are counted as inspections in official counts.

        :param fac_inspection_count: The fac_inspection_count of this Echo07.
        :type fac_inspection_count: str
        """
        if fac_inspection_count is None:
            raise ValueError("Invalid value for `fac_inspection_count`, must not be `None`")

        self._fac_inspection_count = fac_inspection_count

    @property
    def fac_last_penalty_amt(self):
        """Gets the fac_last_penalty_amt of this Echo07.

        Indicates the dollar amount of the most recent assessed (or final) penalty taken against the facility.

        :return: The fac_last_penalty_amt of this Echo07.
        :rtype: str
        """
        return self._fac_last_penalty_amt

    @fac_last_penalty_amt.setter
    def fac_last_penalty_amt(self, fac_last_penalty_amt):
        """Sets the fac_last_penalty_amt of this Echo07.

        Indicates the dollar amount of the most recent assessed (or final) penalty taken against the facility.

        :param fac_last_penalty_amt: The fac_last_penalty_amt of this Echo07.
        :type fac_last_penalty_amt: str
        """
        if fac_last_penalty_amt is None:
            raise ValueError("Invalid value for `fac_last_penalty_amt`, must not be `None`")

        self._fac_last_penalty_amt = fac_last_penalty_amt

    @property
    def fac_lat(self):
        """Gets the fac_lat of this Echo07.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_lat of this Echo07.
        :rtype: str
        """
        return self._fac_lat

    @fac_lat.setter
    def fac_lat(self, fac_lat):
        """Sets the fac_lat of this Echo07.

        The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_lat: The fac_lat of this Echo07.
        :type fac_lat: str
        """
        if fac_lat is None:
            raise ValueError("Invalid value for `fac_lat`, must not be `None`")

        self._fac_lat = fac_lat

    @property
    def fac_long(self):
        """Gets the fac_long of this Echo07.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :return: The fac_long of this Echo07.
        :rtype: str
        """
        return self._fac_long

    @fac_long.setter
    def fac_long(self, fac_long):
        """Sets the fac_long of this Echo07.

        The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.

        :param fac_long: The fac_long of this Echo07.
        :type fac_long: str
        """
        if fac_long is None:
            raise ValueError("Invalid value for `fac_long`, must not be `None`")

        self._fac_long = fac_long

    @property
    def fac_major_flag(self):
        """Gets the fac_major_flag of this Echo07.

        Indicates whether the facility is designated as a “major” (usually a large facility).

        :return: The fac_major_flag of this Echo07.
        :rtype: str
        """
        return self._fac_major_flag

    @fac_major_flag.setter
    def fac_major_flag(self, fac_major_flag):
        """Sets the fac_major_flag of this Echo07.

        Indicates whether the facility is designated as a “major” (usually a large facility).

        :param fac_major_flag: The fac_major_flag of this Echo07.
        :type fac_major_flag: str
        """
        if fac_major_flag is None:
            raise ValueError("Invalid value for `fac_major_flag`, must not be `None`")

        self._fac_major_flag = fac_major_flag

    @property
    def fac_map_flg(self):
        """Gets the fac_map_flg of this Echo07.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :return: The fac_map_flg of this Echo07.
        :rtype: str
        """
        return self._fac_map_flg

    @fac_map_flg.setter
    def fac_map_flg(self, fac_map_flg):
        """Sets the fac_map_flg of this Echo07.

        Graphical indicator denoting whether geographical data required to map a facility are available.

        :param fac_map_flg: The fac_map_flg of this Echo07.
        :type fac_map_flg: str
        """
        if fac_map_flg is None:
            raise ValueError("Invalid value for `fac_map_flg`, must not be `None`")

        self._fac_map_flg = fac_map_flg

    @property
    def fac_map_icon(self):
        """Gets the fac_map_icon of this Echo07.

        The default map icon image file calculated for the facility by the ECHO program.

        :return: The fac_map_icon of this Echo07.
        :rtype: str
        """
        return self._fac_map_icon

    @fac_map_icon.setter
    def fac_map_icon(self, fac_map_icon):
        """Sets the fac_map_icon of this Echo07.

        The default map icon image file calculated for the facility by the ECHO program.

        :param fac_map_icon: The fac_map_icon of this Echo07.
        :type fac_map_icon: str
        """
        if fac_map_icon is None:
            raise ValueError("Invalid value for `fac_map_icon`, must not be `None`")

        self._fac_map_icon = fac_map_icon

    @property
    def fac_myrtk_universe(self):
        """Gets the fac_myrtk_universe of this Echo07.

        A 3-digit combination of Y/N flags indicating if the facility is considered a Right-to-Know Network (RTKNet) CAA (position 1), NPDES (position 2), or RCRA facility (position 3).

        :return: The fac_myrtk_universe of this Echo07.
        :rtype: str
        """
        return self._fac_myrtk_universe

    @fac_myrtk_universe.setter
    def fac_myrtk_universe(self, fac_myrtk_universe):
        """Sets the fac_myrtk_universe of this Echo07.

        A 3-digit combination of Y/N flags indicating if the facility is considered a Right-to-Know Network (RTKNet) CAA (position 1), NPDES (position 2), or RCRA facility (position 3).

        :param fac_myrtk_universe: The fac_myrtk_universe of this Echo07.
        :type fac_myrtk_universe: str
        """
        if fac_myrtk_universe is None:
            raise ValueError("Invalid value for `fac_myrtk_universe`, must not be `None`")

        self._fac_myrtk_universe = fac_myrtk_universe

    @property
    def fac_naics_codes(self):
        """Gets the fac_naics_codes of this Echo07.

        The facility's North American Industry Classification System (NAICS) Codes.

        :return: The fac_naics_codes of this Echo07.
        :rtype: str
        """
        return self._fac_naics_codes

    @fac_naics_codes.setter
    def fac_naics_codes(self, fac_naics_codes):
        """Sets the fac_naics_codes of this Echo07.

        The facility's North American Industry Classification System (NAICS) Codes.

        :param fac_naics_codes: The fac_naics_codes of this Echo07.
        :type fac_naics_codes: str
        """
        if fac_naics_codes is None:
            raise ValueError("Invalid value for `fac_naics_codes`, must not be `None`")

        self._fac_naics_codes = fac_naics_codes

    @property
    def fac_naa_flag(self):
        """Gets the fac_naa_flag of this Echo07.

        Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.

        :return: The fac_naa_flag of this Echo07.
        :rtype: str
        """
        return self._fac_naa_flag

    @fac_naa_flag.setter
    def fac_naa_flag(self, fac_naa_flag):
        """Sets the fac_naa_flag of this Echo07.

        Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.

        :param fac_naa_flag: The fac_naa_flag of this Echo07.
        :type fac_naa_flag: str
        """
        if fac_naa_flag is None:
            raise ValueError("Invalid value for `fac_naa_flag`, must not be `None`")

        self._fac_naa_flag = fac_naa_flag

    @property
    def fac_name(self):
        """Gets the fac_name of this Echo07.

        Name of facility

        :return: The fac_name of this Echo07.
        :rtype: str
        """
        return self._fac_name

    @fac_name.setter
    def fac_name(self, fac_name):
        """Sets the fac_name of this Echo07.

        Name of facility

        :param fac_name: The fac_name of this Echo07.
        :type fac_name: str
        """
        if fac_name is None:
            raise ValueError("Invalid value for `fac_name`, must not be `None`")

        self._fac_name = fac_name

    @property
    def fac_penalty_count(self):
        """Gets the fac_penalty_count of this Echo07.

        The total number of penalties assessed (or final) taken against the facility within the last five years

        :return: The fac_penalty_count of this Echo07.
        :rtype: str
        """
        return self._fac_penalty_count

    @fac_penalty_count.setter
    def fac_penalty_count(self, fac_penalty_count):
        """Sets the fac_penalty_count of this Echo07.

        The total number of penalties assessed (or final) taken against the facility within the last five years

        :param fac_penalty_count: The fac_penalty_count of this Echo07.
        :type fac_penalty_count: str
        """
        if fac_penalty_count is None:
            raise ValueError("Invalid value for `fac_penalty_count`, must not be `None`")

        self._fac_penalty_count = fac_penalty_count

    @property
    def fac_percent_minority(self):
        """Gets the fac_percent_minority of this Echo07.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :return: The fac_percent_minority of this Echo07.
        :rtype: str
        """
        return self._fac_percent_minority

    @fac_percent_minority.setter
    def fac_percent_minority(self, fac_percent_minority):
        """Sets the fac_percent_minority of this Echo07.

        Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.

        :param fac_percent_minority: The fac_percent_minority of this Echo07.
        :type fac_percent_minority: str
        """
        if fac_percent_minority is None:
            raise ValueError("Invalid value for `fac_percent_minority`, must not be `None`")

        self._fac_percent_minority = fac_percent_minority

    @property
    def fac_pop_den(self):
        """Gets the fac_pop_den of this Echo07.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).

        :return: The fac_pop_den of this Echo07.
        :rtype: str
        """
        return self._fac_pop_den

    @fac_pop_den.setter
    def fac_pop_den(self, fac_pop_den):
        """Sets the fac_pop_den of this Echo07.

        The number of persons per square mile in the area being profiled. This field is the ratio of total persons (displayed in the Total Persons field) to total land area (displayed in the Land Area field).

        :param fac_pop_den: The fac_pop_den of this Echo07.
        :type fac_pop_den: str
        """
        if fac_pop_den is None:
            raise ValueError("Invalid value for `fac_pop_den`, must not be `None`")

        self._fac_pop_den = fac_pop_den

    @property
    def fac_programs_with_snc(self):
        """Gets the fac_programs_with_snc of this Echo07.

        The number of programs (CAA, CWA, SDWA, RCRA) related to the facility that have a current serious violation.

        :return: The fac_programs_with_snc of this Echo07.
        :rtype: str
        """
        return self._fac_programs_with_snc

    @fac_programs_with_snc.setter
    def fac_programs_with_snc(self, fac_programs_with_snc):
        """Sets the fac_programs_with_snc of this Echo07.

        The number of programs (CAA, CWA, SDWA, RCRA) related to the facility that have a current serious violation.

        :param fac_programs_with_snc: The fac_programs_with_snc of this Echo07.
        :type fac_programs_with_snc: str
        """
        if fac_programs_with_snc is None:
            raise ValueError("Invalid value for `fac_programs_with_snc`, must not be `None`")

        self._fac_programs_with_snc = fac_programs_with_snc

    @property
    def fac_qtrs_with_nc(self):
        """Gets the fac_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the facility is considered in violation.

        :return: The fac_qtrs_with_nc of this Echo07.
        :rtype: str
        """
        return self._fac_qtrs_with_nc

    @fac_qtrs_with_nc.setter
    def fac_qtrs_with_nc(self, fac_qtrs_with_nc):
        """Sets the fac_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the facility is considered in violation.

        :param fac_qtrs_with_nc: The fac_qtrs_with_nc of this Echo07.
        :type fac_qtrs_with_nc: str
        """
        if fac_qtrs_with_nc is None:
            raise ValueError("Invalid value for `fac_qtrs_with_nc`, must not be `None`")

        self._fac_qtrs_with_nc = fac_qtrs_with_nc

    @property
    def fac_reference_point(self):
        """Gets the fac_reference_point of this Echo07.

        A description of the location for the provided facility coordinate.

        :return: The fac_reference_point of this Echo07.
        :rtype: str
        """
        return self._fac_reference_point

    @fac_reference_point.setter
    def fac_reference_point(self, fac_reference_point):
        """Sets the fac_reference_point of this Echo07.

        A description of the location for the provided facility coordinate.

        :param fac_reference_point: The fac_reference_point of this Echo07.
        :type fac_reference_point: str
        """
        if fac_reference_point is None:
            raise ValueError("Invalid value for `fac_reference_point`, must not be `None`")

        self._fac_reference_point = fac_reference_point

    @property
    def fac_sic_codes(self):
        """Gets the fac_sic_codes of this Echo07.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :return: The fac_sic_codes of this Echo07.
        :rtype: str
        """
        return self._fac_sic_codes

    @fac_sic_codes.setter
    def fac_sic_codes(self, fac_sic_codes):
        """Sets the fac_sic_codes of this Echo07.

        Indicates the facility’s or permit's primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.

        :param fac_sic_codes: The fac_sic_codes of this Echo07.
        :type fac_sic_codes: str
        """
        if fac_sic_codes is None:
            raise ValueError("Invalid value for `fac_sic_codes`, must not be `None`")

        self._fac_sic_codes = fac_sic_codes

    @property
    def fac_snc_flg(self):
        """Gets the fac_snc_flg of this Echo07.

        The Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :return: The fac_snc_flg of this Echo07.
        :rtype: str
        """
        return self._fac_snc_flg

    @fac_snc_flg.setter
    def fac_snc_flg(self, fac_snc_flg):
        """Sets the fac_snc_flg of this Echo07.

        The Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :param fac_snc_flg: The fac_snc_flg of this Echo07.
        :type fac_snc_flg: str
        """
        if fac_snc_flg is None:
            raise ValueError("Invalid value for `fac_snc_flg`, must not be `None`")

        self._fac_snc_flg = fac_snc_flg

    @property
    def fac_state(self):
        """Gets the fac_state of this Echo07.

        Facility state

        :return: The fac_state of this Echo07.
        :rtype: str
        """
        return self._fac_state

    @fac_state.setter
    def fac_state(self, fac_state):
        """Sets the fac_state of this Echo07.

        Facility state

        :param fac_state: The fac_state of this Echo07.
        :type fac_state: str
        """
        if fac_state is None:
            raise ValueError("Invalid value for `fac_state`, must not be `None`")

        self._fac_state = fac_state

    @property
    def fac_std_county_name(self):
        """Gets the fac_std_county_name of this Echo07.

        The standardized  facility county name from EPA's Facility Registry System

        :return: The fac_std_county_name of this Echo07.
        :rtype: str
        """
        return self._fac_std_county_name

    @fac_std_county_name.setter
    def fac_std_county_name(self, fac_std_county_name):
        """Sets the fac_std_county_name of this Echo07.

        The standardized  facility county name from EPA's Facility Registry System

        :param fac_std_county_name: The fac_std_county_name of this Echo07.
        :type fac_std_county_name: str
        """
        if fac_std_county_name is None:
            raise ValueError("Invalid value for `fac_std_county_name`, must not be `None`")

        self._fac_std_county_name = fac_std_county_name

    @property
    def fac_street(self):
        """Gets the fac_street of this Echo07.

        Street address where facility is located, as maintained by each data system. Certain data systems also maintain mailing address information, which is not used in this report. The street address may differ across EPA databases due to differences in reported information (e.g., use of mailing address), change in ownership, use of parent or subsidiary address, etc.

        :return: The fac_street of this Echo07.
        :rtype: str
        """
        return self._fac_street

    @fac_street.setter
    def fac_street(self, fac_street):
        """Sets the fac_street of this Echo07.

        Street address where facility is located, as maintained by each data system. Certain data systems also maintain mailing address information, which is not used in this report. The street address may differ across EPA databases due to differences in reported information (e.g., use of mailing address), change in ownership, use of parent or subsidiary address, etc.

        :param fac_street: The fac_street of this Echo07.
        :type fac_street: str
        """
        if fac_street is None:
            raise ValueError("Invalid value for `fac_street`, must not be `None`")

        self._fac_street = fac_street

    @property
    def fac_total_penalties(self):
        """Gets the fac_total_penalties of this Echo07.

        The total dollar amount of either assessed (or final) penalties taken against the facility within the last five years

        :return: The fac_total_penalties of this Echo07.
        :rtype: str
        """
        return self._fac_total_penalties

    @fac_total_penalties.setter
    def fac_total_penalties(self, fac_total_penalties):
        """Sets the fac_total_penalties of this Echo07.

        The total dollar amount of either assessed (or final) penalties taken against the facility within the last five years

        :param fac_total_penalties: The fac_total_penalties of this Echo07.
        :type fac_total_penalties: str
        """
        if fac_total_penalties is None:
            raise ValueError("Invalid value for `fac_total_penalties`, must not be `None`")

        self._fac_total_penalties = fac_total_penalties

    @property
    def fac_us_mex_border_flg(self):
        """Gets the fac_us_mex_border_flg of this Echo07.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :return: The fac_us_mex_border_flg of this Echo07.
        :rtype: str
        """
        return self._fac_us_mex_border_flg

    @fac_us_mex_border_flg.setter
    def fac_us_mex_border_flg(self, fac_us_mex_border_flg):
        """Sets the fac_us_mex_border_flg of this Echo07.

        A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.

        :param fac_us_mex_border_flg: The fac_us_mex_border_flg of this Echo07.
        :type fac_us_mex_border_flg: str
        """
        if fac_us_mex_border_flg is None:
            raise ValueError("Invalid value for `fac_us_mex_border_flg`, must not be `None`")

        self._fac_us_mex_border_flg = fac_us_mex_border_flg

    @property
    def fac_zip(self):
        """Gets the fac_zip of this Echo07.

        Facility ZIP code

        :return: The fac_zip of this Echo07.
        :rtype: str
        """
        return self._fac_zip

    @fac_zip.setter
    def fac_zip(self, fac_zip):
        """Sets the fac_zip of this Echo07.

        Facility ZIP code

        :param fac_zip: The fac_zip of this Echo07.
        :type fac_zip: str
        """
        if fac_zip is None:
            raise ValueError("Invalid value for `fac_zip`, must not be `None`")

        self._fac_zip = fac_zip

    @property
    def fec_case_ids(self):
        """Gets the fec_case_ids of this Echo07.

        All Case Numbers of Federal Enforcement Cases relating to the Facility from the ICIS System

        :return: The fec_case_ids of this Echo07.
        :rtype: str
        """
        return self._fec_case_ids

    @fec_case_ids.setter
    def fec_case_ids(self, fec_case_ids):
        """Sets the fec_case_ids of this Echo07.

        All Case Numbers of Federal Enforcement Cases relating to the Facility from the ICIS System

        :param fec_case_ids: The fec_case_ids of this Echo07.
        :type fec_case_ids: str
        """
        if fec_case_ids is None:
            raise ValueError("Invalid value for `fec_case_ids`, must not be `None`")

        self._fec_case_ids = fec_case_ids

    @property
    def fec_last_case_date(self):
        """Gets the fec_last_case_date of this Echo07.

        The date of the latest Federal Enforcement Case related to this Facility in the ICIS system.

        :return: The fec_last_case_date of this Echo07.
        :rtype: str
        """
        return self._fec_last_case_date

    @fec_last_case_date.setter
    def fec_last_case_date(self, fec_last_case_date):
        """Sets the fec_last_case_date of this Echo07.

        The date of the latest Federal Enforcement Case related to this Facility in the ICIS system.

        :param fec_last_case_date: The fec_last_case_date of this Echo07.
        :type fec_last_case_date: str
        """
        if fec_last_case_date is None:
            raise ValueError("Invalid value for `fec_last_case_date`, must not be `None`")

        self._fec_last_case_date = fec_last_case_date

    @property
    def fec_number_of_cases(self):
        """Gets the fec_number_of_cases of this Echo07.

        The total number of Federal Enforcement Cases in the last 5 years related to this Facility in the ICIS system.

        :return: The fec_number_of_cases of this Echo07.
        :rtype: str
        """
        return self._fec_number_of_cases

    @fec_number_of_cases.setter
    def fec_number_of_cases(self, fec_number_of_cases):
        """Sets the fec_number_of_cases of this Echo07.

        The total number of Federal Enforcement Cases in the last 5 years related to this Facility in the ICIS system.

        :param fec_number_of_cases: The fec_number_of_cases of this Echo07.
        :type fec_number_of_cases: str
        """
        if fec_number_of_cases is None:
            raise ValueError("Invalid value for `fec_number_of_cases`, must not be `None`")

        self._fec_number_of_cases = fec_number_of_cases

    @property
    def fec_total_penalties(self):
        """Gets the fec_total_penalties of this Echo07.

        The total Federal Enforcement Case penalties assessed against this facility in the last 5 years.

        :return: The fec_total_penalties of this Echo07.
        :rtype: str
        """
        return self._fec_total_penalties

    @fec_total_penalties.setter
    def fec_total_penalties(self, fec_total_penalties):
        """Sets the fec_total_penalties of this Echo07.

        The total Federal Enforcement Case penalties assessed against this facility in the last 5 years.

        :param fec_total_penalties: The fec_total_penalties of this Echo07.
        :type fec_total_penalties: str
        """
        if fec_total_penalties is None:
            raise ValueError("Invalid value for `fec_total_penalties`, must not be `None`")

        self._fec_total_penalties = fec_total_penalties

    @property
    def fifra_inspections5yr(self):
        """Gets the fifra_inspections5yr of this Echo07.

        From ICIS FE&C, the number of FIFRA inspections at the facility in the past five years.

        :return: The fifra_inspections5yr of this Echo07.
        :rtype: str
        """
        return self._fifra_inspections5yr

    @fifra_inspections5yr.setter
    def fifra_inspections5yr(self, fifra_inspections5yr):
        """Sets the fifra_inspections5yr of this Echo07.

        From ICIS FE&C, the number of FIFRA inspections at the facility in the past five years.

        :param fifra_inspections5yr: The fifra_inspections5yr of this Echo07.
        :type fifra_inspections5yr: str
        """
        if fifra_inspections5yr is None:
            raise ValueError("Invalid value for `fifra_inspections5yr`, must not be `None`")

        self._fifra_inspections5yr = fifra_inspections5yr

    @property
    def ghgco2_releases(self):
        """Gets the ghgco2_releases of this Echo07.

        The sum of total release amounts of all linked Greenhouse Gas IDs reported as \"metric tons of CO2 equivalents\"

        :return: The ghgco2_releases of this Echo07.
        :rtype: str
        """
        return self._ghgco2_releases

    @ghgco2_releases.setter
    def ghgco2_releases(self, ghgco2_releases):
        """Sets the ghgco2_releases of this Echo07.

        The sum of total release amounts of all linked Greenhouse Gas IDs reported as \"metric tons of CO2 equivalents\"

        :param ghgco2_releases: The ghgco2_releases of this Echo07.
        :type ghgco2_releases: str
        """
        if ghgco2_releases is None:
            raise ValueError("Invalid value for `ghgco2_releases`, must not be `None`")

        self._ghgco2_releases = ghgco2_releases

    @property
    def ghg_flag(self):
        """Gets the ghg_flag of this Echo07.

        Indicates whether the facility has a Greenhouse Gas (GHG) permit.

        :return: The ghg_flag of this Echo07.
        :rtype: str
        """
        return self._ghg_flag

    @ghg_flag.setter
    def ghg_flag(self, ghg_flag):
        """Sets the ghg_flag of this Echo07.

        Indicates whether the facility has a Greenhouse Gas (GHG) permit.

        :param ghg_flag: The ghg_flag of this Echo07.
        :type ghg_flag: str
        """
        if ghg_flag is None:
            raise ValueError("Invalid value for `ghg_flag`, must not be `None`")

        self._ghg_flag = ghg_flag

    @property
    def ghgids(self):
        """Gets the ghgids of this Echo07.

        A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.

        :return: The ghgids of this Echo07.
        :rtype: str
        """
        return self._ghgids

    @ghgids.setter
    def ghgids(self, ghgids):
        """Sets the ghgids of this Echo07.

        A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.

        :param ghgids: The ghgids of this Echo07.
        :type ghgids: str
        """
        if ghgids is None:
            raise ValueError("Invalid value for `ghgids`, must not be `None`")

        self._ghgids = ghgids

    @property
    def has_poll_rpt(self):
        """Gets the has_poll_rpt of this Echo07.

        ???

        :return: The has_poll_rpt of this Echo07.
        :rtype: str
        """
        return self._has_poll_rpt

    @has_poll_rpt.setter
    def has_poll_rpt(self, has_poll_rpt):
        """Sets the has_poll_rpt of this Echo07.

        ???

        :param has_poll_rpt: The has_poll_rpt of this Echo07.
        :type has_poll_rpt: str
        """
        if has_poll_rpt is None:
            raise ValueError("Invalid value for `has_poll_rpt`, must not be `None`")

        self._has_poll_rpt = has_poll_rpt

    @property
    def infea5yr_flag(self):
        """Gets the infea5yr_flag of this Echo07.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :return: The infea5yr_flag of this Echo07.
        :rtype: str
        """
        return self._infea5yr_flag

    @infea5yr_flag.setter
    def infea5yr_flag(self, infea5yr_flag):
        """Sets the infea5yr_flag of this Echo07.

        Indicates if the facility has an informal enforcement action within the last 5 years. 1 = Yes.

        :param infea5yr_flag: The infea5yr_flag of this Echo07.
        :type infea5yr_flag: str
        """
        if infea5yr_flag is None:
            raise ValueError("Invalid value for `infea5yr_flag`, must not be `None`")

        self._infea5yr_flag = infea5yr_flag

    @property
    def insp5yr_flag(self):
        """Gets the insp5yr_flag of this Echo07.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :return: The insp5yr_flag of this Echo07.
        :rtype: str
        """
        return self._insp5yr_flag

    @insp5yr_flag.setter
    def insp5yr_flag(self, insp5yr_flag):
        """Sets the insp5yr_flag of this Echo07.

        Indicates if the facility has an inspection within the last 5 years. 1 = Yes

        :param insp5yr_flag: The insp5yr_flag of this Echo07.
        :type insp5yr_flag: str
        """
        if insp5yr_flag is None:
            raise ValueError("Invalid value for `insp5yr_flag`, must not be `None`")

        self._insp5yr_flag = insp5yr_flag

    @property
    def lower48(self):
        """Gets the lower48 of this Echo07.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :return: The lower48 of this Echo07.
        :rtype: str
        """
        return self._lower48

    @lower48.setter
    def lower48(self, lower48):
        """Sets the lower48 of this Echo07.

        Flag showing Y/N whether location is within the contiguous (lower 48) United States.

        :param lower48: The lower48 of this Echo07.
        :type lower48: str
        """
        if lower48 is None:
            raise ValueError("Invalid value for `lower48`, must not be `None`")

        self._lower48 = lower48

    @property
    def max_pctile_us(self):
        """Gets the max_pctile_us of this Echo07.

        The maximum percentile from all individual EJSCREEN indicators.

        :return: The max_pctile_us of this Echo07.
        :rtype: str
        """
        return self._max_pctile_us

    @max_pctile_us.setter
    def max_pctile_us(self, max_pctile_us):
        """Sets the max_pctile_us of this Echo07.

        The maximum percentile from all individual EJSCREEN indicators.

        :param max_pctile_us: The max_pctile_us of this Echo07.
        :type max_pctile_us: str
        """
        if max_pctile_us is None:
            raise ValueError("Invalid value for `max_pctile_us`, must not be `None`")

        self._max_pctile_us = max_pctile_us

    @property
    def max_score(self):
        """Gets the max_score of this Echo07.

        A sorting score for internal use.

        :return: The max_score of this Echo07.
        :rtype: str
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this Echo07.

        A sorting score for internal use.

        :param max_score: The max_score of this Echo07.
        :type max_score: str
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def nc(self):
        """Gets the nc of this Echo07.

        Indicates whether or not the permit or site is considered either in Non-compliance (NC), Significant Non-compliance (SNC) or High Priority violation (HPV) status.

        :return: The nc of this Echo07.
        :rtype: str
        """
        return self._nc

    @nc.setter
    def nc(self, nc):
        """Sets the nc of this Echo07.

        Indicates whether or not the permit or site is considered either in Non-compliance (NC), Significant Non-compliance (SNC) or High Priority violation (HPV) status.

        :param nc: The nc of this Echo07.
        :type nc: str
        """
        if nc is None:
            raise ValueError("Invalid value for `nc`, must not be `None`")

        self._nc = nc

    @property
    def npdes_flag(self):
        """Gets the npdes_flag of this Echo07.

        Indicates whether the facility has a Clean Water Act (CWA) permit.

        :return: The npdes_flag of this Echo07.
        :rtype: str
        """
        return self._npdes_flag

    @npdes_flag.setter
    def npdes_flag(self, npdes_flag):
        """Sets the npdes_flag of this Echo07.

        Indicates whether the facility has a Clean Water Act (CWA) permit.

        :param npdes_flag: The npdes_flag of this Echo07.
        :type npdes_flag: str
        """
        if npdes_flag is None:
            raise ValueError("Invalid value for `npdes_flag`, must not be `None`")

        self._npdes_flag = npdes_flag

    @property
    def npdesids(self):
        """Gets the npdesids of this Echo07.

        Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)

        :return: The npdesids of this Echo07.
        :rtype: str
        """
        return self._npdesids

    @npdesids.setter
    def npdesids(self, npdesids):
        """Sets the npdesids of this Echo07.

        Clean Water Act ID from the ICIS-NPDES (Integrated Compliance Information System - National Pollutant Discharge Elimination System)

        :param npdesids: The npdesids of this Echo07.
        :type npdesids: str
        """
        if npdesids is None:
            raise ValueError("Invalid value for `npdesids`, must not be `None`")

        self._npdesids = npdesids

    @property
    def naa_categories(self):
        """Gets the naa_categories of this Echo07.

        The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�

        :return: The naa_categories of this Echo07.
        :rtype: str
        """
        return self._naa_categories

    @naa_categories.setter
    def naa_categories(self, naa_categories):
        """Sets the naa_categories of this Echo07.

        The nonattainment area categories that the facility is in, derived spatially based on the facility's geographic coordinates in FRS.�

        :param naa_categories: The naa_categories of this Echo07.
        :type naa_categories: str
        """
        if naa_categories is None:
            raise ValueError("Invalid value for `naa_categories`, must not be `None`")

        self._naa_categories = naa_categories

    @property
    def naa_pollutants(self):
        """Gets the naa_pollutants of this Echo07.

        All criteria pollutants that the facility is in nonattainment for.

        :return: The naa_pollutants of this Echo07.
        :rtype: str
        """
        return self._naa_pollutants

    @naa_pollutants.setter
    def naa_pollutants(self, naa_pollutants):
        """Sets the naa_pollutants of this Echo07.

        All criteria pollutants that the facility is in nonattainment for.

        :param naa_pollutants: The naa_pollutants of this Echo07.
        :type naa_pollutants: str
        """
        if naa_pollutants is None:
            raise ValueError("Invalid value for `naa_pollutants`, must not be `None`")

        self._naa_pollutants = naa_pollutants

    @property
    def object_id(self):
        """Gets the object_id of this Echo07.

        Sequential number assigned to each facility or cluster returned.

        :return: The object_id of this Echo07.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Echo07.

        Sequential number assigned to each facility or cluster returned.

        :param object_id: The object_id of this Echo07.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def over80_count_us(self):
        """Gets the over80_count_us of this Echo07.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :return: The over80_count_us of this Echo07.
        :rtype: str
        """
        return self._over80_count_us

    @over80_count_us.setter
    def over80_count_us(self, over80_count_us):
        """Sets the over80_count_us of this Echo07.

        The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.

        :param over80_count_us: The over80_count_us of this Echo07.
        :type over80_count_us: str
        """
        if over80_count_us is None:
            raise ValueError("Invalid value for `over80_count_us`, must not be `None`")

        self._over80_count_us = over80_count_us

    @property
    def pctile_cancer_us(self):
        """Gets the pctile_cancer_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :return: The pctile_cancer_us of this Echo07.
        :rtype: str
        """
        return self._pctile_cancer_us

    @pctile_cancer_us.setter
    def pctile_cancer_us(self, pctile_cancer_us):
        """Sets the pctile_cancer_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.

        :param pctile_cancer_us: The pctile_cancer_us of this Echo07.
        :type pctile_cancer_us: str
        """
        if pctile_cancer_us is None:
            raise ValueError("Invalid value for `pctile_cancer_us`, must not be `None`")

        self._pctile_cancer_us = pctile_cancer_us

    @property
    def pctile_dpm_us(self):
        """Gets the pctile_dpm_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :return: The pctile_dpm_us of this Echo07.
        :rtype: str
        """
        return self._pctile_dpm_us

    @pctile_dpm_us.setter
    def pctile_dpm_us(self, pctile_dpm_us):
        """Sets the pctile_dpm_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.

        :param pctile_dpm_us: The pctile_dpm_us of this Echo07.
        :type pctile_dpm_us: str
        """
        if pctile_dpm_us is None:
            raise ValueError("Invalid value for `pctile_dpm_us`, must not be `None`")

        self._pctile_dpm_us = pctile_dpm_us

    @property
    def pctile_o3_us(self):
        """Gets the pctile_o3_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :return: The pctile_o3_us of this Echo07.
        :rtype: str
        """
        return self._pctile_o3_us

    @pctile_o3_us.setter
    def pctile_o3_us(self, pctile_o3_us):
        """Sets the pctile_o3_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN ozone indicator.

        :param pctile_o3_us: The pctile_o3_us of this Echo07.
        :type pctile_o3_us: str
        """
        if pctile_o3_us is None:
            raise ValueError("Invalid value for `pctile_o3_us`, must not be `None`")

        self._pctile_o3_us = pctile_o3_us

    @property
    def pctile_pctpre1960_us(self):
        """Gets the pctile_pctpre1960_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :return: The pctile_pctpre1960_us of this Echo07.
        :rtype: str
        """
        return self._pctile_pctpre1960_us

    @pctile_pctpre1960_us.setter
    def pctile_pctpre1960_us(self, pctile_pctpre1960_us):
        """Sets the pctile_pctpre1960_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN Lead paint indicator.

        :param pctile_pctpre1960_us: The pctile_pctpre1960_us of this Echo07.
        :type pctile_pctpre1960_us: str
        """
        if pctile_pctpre1960_us is None:
            raise ValueError("Invalid value for `pctile_pctpre1960_us`, must not be `None`")

        self._pctile_pctpre1960_us = pctile_pctpre1960_us

    @property
    def pctile_pm_us(self):
        """Gets the pctile_pm_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :return: The pctile_pm_us of this Echo07.
        :rtype: str
        """
        return self._pctile_pm_us

    @pctile_pm_us.setter
    def pctile_pm_us(self, pctile_pm_us):
        """Sets the pctile_pm_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN particulate matter indicator.

        :param pctile_pm_us: The pctile_pm_us of this Echo07.
        :type pctile_pm_us: str
        """
        if pctile_pm_us is None:
            raise ValueError("Invalid value for `pctile_pm_us`, must not be `None`")

        self._pctile_pm_us = pctile_pm_us

    @property
    def pctile_proximity_npdesus(self):
        """Gets the pctile_proximity_npdesus of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :return: The pctile_proximity_npdesus of this Echo07.
        :rtype: str
        """
        return self._pctile_proximity_npdesus

    @pctile_proximity_npdesus.setter
    def pctile_proximity_npdesus(self, pctile_proximity_npdesus):
        """Sets the pctile_proximity_npdesus of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.

        :param pctile_proximity_npdesus: The pctile_proximity_npdesus of this Echo07.
        :type pctile_proximity_npdesus: str
        """
        if pctile_proximity_npdesus is None:
            raise ValueError("Invalid value for `pctile_proximity_npdesus`, must not be `None`")

        self._pctile_proximity_npdesus = pctile_proximity_npdesus

    @property
    def pctile_proximity_npl_us(self):
        """Gets the pctile_proximity_npl_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :return: The pctile_proximity_npl_us of this Echo07.
        :rtype: str
        """
        return self._pctile_proximity_npl_us

    @pctile_proximity_npl_us.setter
    def pctile_proximity_npl_us(self, pctile_proximity_npl_us):
        """Sets the pctile_proximity_npl_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.

        :param pctile_proximity_npl_us: The pctile_proximity_npl_us of this Echo07.
        :type pctile_proximity_npl_us: str
        """
        if pctile_proximity_npl_us is None:
            raise ValueError("Invalid value for `pctile_proximity_npl_us`, must not be `None`")

        self._pctile_proximity_npl_us = pctile_proximity_npl_us

    @property
    def pctile_proximity_rmp_us(self):
        """Gets the pctile_proximity_rmp_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :return: The pctile_proximity_rmp_us of this Echo07.
        :rtype: str
        """
        return self._pctile_proximity_rmp_us

    @pctile_proximity_rmp_us.setter
    def pctile_proximity_rmp_us(self, pctile_proximity_rmp_us):
        """Sets the pctile_proximity_rmp_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.

        :param pctile_proximity_rmp_us: The pctile_proximity_rmp_us of this Echo07.
        :type pctile_proximity_rmp_us: str
        """
        if pctile_proximity_rmp_us is None:
            raise ValueError("Invalid value for `pctile_proximity_rmp_us`, must not be `None`")

        self._pctile_proximity_rmp_us = pctile_proximity_rmp_us

    @property
    def pctile_proximity_tsdf_us(self):
        """Gets the pctile_proximity_tsdf_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :return: The pctile_proximity_tsdf_us of this Echo07.
        :rtype: str
        """
        return self._pctile_proximity_tsdf_us

    @pctile_proximity_tsdf_us.setter
    def pctile_proximity_tsdf_us(self, pctile_proximity_tsdf_us):
        """Sets the pctile_proximity_tsdf_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.

        :param pctile_proximity_tsdf_us: The pctile_proximity_tsdf_us of this Echo07.
        :type pctile_proximity_tsdf_us: str
        """
        if pctile_proximity_tsdf_us is None:
            raise ValueError("Invalid value for `pctile_proximity_tsdf_us`, must not be `None`")

        self._pctile_proximity_tsdf_us = pctile_proximity_tsdf_us

    @property
    def pctile_resp_us(self):
        """Gets the pctile_resp_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :return: The pctile_resp_us of this Echo07.
        :rtype: str
        """
        return self._pctile_resp_us

    @pctile_resp_us.setter
    def pctile_resp_us(self, pctile_resp_us):
        """Sets the pctile_resp_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.

        :param pctile_resp_us: The pctile_resp_us of this Echo07.
        :type pctile_resp_us: str
        """
        if pctile_resp_us is None:
            raise ValueError("Invalid value for `pctile_resp_us`, must not be `None`")

        self._pctile_resp_us = pctile_resp_us

    @property
    def pctile_traffic_score_us(self):
        """Gets the pctile_traffic_score_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :return: The pctile_traffic_score_us of this Echo07.
        :rtype: str
        """
        return self._pctile_traffic_score_us

    @pctile_traffic_score_us.setter
    def pctile_traffic_score_us(self, pctile_traffic_score_us):
        """Sets the pctile_traffic_score_us of this Echo07.

        The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.

        :param pctile_traffic_score_us: The pctile_traffic_score_us of this Echo07.
        :type pctile_traffic_score_us: str
        """
        if pctile_traffic_score_us is None:
            raise ValueError("Invalid value for `pctile_traffic_score_us`, must not be `None`")

        self._pctile_traffic_score_us = pctile_traffic_score_us

    @property
    def rcra3yr_compl_qtrs_history(self):
        """Gets the rcra3yr_compl_qtrs_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :return: The rcra3yr_compl_qtrs_history of this Echo07.
        :rtype: str
        """
        return self._rcra3yr_compl_qtrs_history

    @rcra3yr_compl_qtrs_history.setter
    def rcra3yr_compl_qtrs_history(self, rcra3yr_compl_qtrs_history):
        """Sets the rcra3yr_compl_qtrs_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period) entered in the RCRA program database. Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation V -�Violation S -�Significant Violation U - Undetermined

        :param rcra3yr_compl_qtrs_history: The rcra3yr_compl_qtrs_history of this Echo07.
        :type rcra3yr_compl_qtrs_history: str
        """
        if rcra3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `rcra3yr_compl_qtrs_history`, must not be `None`")

        self._rcra3yr_compl_qtrs_history = rcra3yr_compl_qtrs_history

    @property
    def rcra_compliance_status(self):
        """Gets the rcra_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Resource Conservation and Recovery Act (Significant Violation = Significant Noncomplier, Noncompliance, or No Violation).

        :return: The rcra_compliance_status of this Echo07.
        :rtype: str
        """
        return self._rcra_compliance_status

    @rcra_compliance_status.setter
    def rcra_compliance_status(self, rcra_compliance_status):
        """Sets the rcra_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Resource Conservation and Recovery Act (Significant Violation = Significant Noncomplier, Noncompliance, or No Violation).

        :param rcra_compliance_status: The rcra_compliance_status of this Echo07.
        :type rcra_compliance_status: str
        """
        if rcra_compliance_status is None:
            raise ValueError("Invalid value for `rcra_compliance_status`, must not be `None`")

        self._rcra_compliance_status = rcra_compliance_status

    @property
    def rcra_date_last_formal_action(self):
        """Gets the rcra_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the RCRA program database.

        :return: The rcra_date_last_formal_action of this Echo07.
        :rtype: str
        """
        return self._rcra_date_last_formal_action

    @rcra_date_last_formal_action.setter
    def rcra_date_last_formal_action(self, rcra_date_last_formal_action):
        """Sets the rcra_date_last_formal_action of this Echo07.

        The effective date of the most recent listed enforcement action entered into the RCRA program database.

        :param rcra_date_last_formal_action: The rcra_date_last_formal_action of this Echo07.
        :type rcra_date_last_formal_action: str
        """
        if rcra_date_last_formal_action is None:
            raise ValueError("Invalid value for `rcra_date_last_formal_action`, must not be `None`")

        self._rcra_date_last_formal_action = rcra_date_last_formal_action

    @property
    def rcra_days_last_evaluation(self):
        """Gets the rcra_days_last_evaluation of this Echo07.

        The number of days since a RCRA inspection was completed.

        :return: The rcra_days_last_evaluation of this Echo07.
        :rtype: str
        """
        return self._rcra_days_last_evaluation

    @rcra_days_last_evaluation.setter
    def rcra_days_last_evaluation(self, rcra_days_last_evaluation):
        """Sets the rcra_days_last_evaluation of this Echo07.

        The number of days since a RCRA inspection was completed.

        :param rcra_days_last_evaluation: The rcra_days_last_evaluation of this Echo07.
        :type rcra_days_last_evaluation: str
        """
        if rcra_days_last_evaluation is None:
            raise ValueError("Invalid value for `rcra_days_last_evaluation`, must not be `None`")

        self._rcra_days_last_evaluation = rcra_days_last_evaluation

    @property
    def rcra_flag(self):
        """Gets the rcra_flag of this Echo07.

        Indicates whether the facility has a Resource Conservation and Recovery Action (RCRA) permit.

        :return: The rcra_flag of this Echo07.
        :rtype: str
        """
        return self._rcra_flag

    @rcra_flag.setter
    def rcra_flag(self, rcra_flag):
        """Sets the rcra_flag of this Echo07.

        Indicates whether the facility has a Resource Conservation and Recovery Action (RCRA) permit.

        :param rcra_flag: The rcra_flag of this Echo07.
        :type rcra_flag: str
        """
        if rcra_flag is None:
            raise ValueError("Invalid value for `rcra_flag`, must not be `None`")

        self._rcra_flag = rcra_flag

    @property
    def rcra_formal_action_count(self):
        """Gets the rcra_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Resource Conservation and Recovery Act.

        :return: The rcra_formal_action_count of this Echo07.
        :rtype: str
        """
        return self._rcra_formal_action_count

    @rcra_formal_action_count.setter
    def rcra_formal_action_count(self, rcra_formal_action_count):
        """Sets the rcra_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Resource Conservation and Recovery Act.

        :param rcra_formal_action_count: The rcra_formal_action_count of this Echo07.
        :type rcra_formal_action_count: str
        """
        if rcra_formal_action_count is None:
            raise ValueError("Invalid value for `rcra_formal_action_count`, must not be `None`")

        self._rcra_formal_action_count = rcra_formal_action_count

    @property
    def rcraids(self):
        """Gets the rcraids of this Echo07.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :return: The rcraids of this Echo07.
        :rtype: str
        """
        return self._rcraids

    @rcraids.setter
    def rcraids(self, rcraids):
        """Sets the rcraids of this Echo07.

        A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.

        :param rcraids: The rcraids of this Echo07.
        :type rcraids: str
        """
        if rcraids is None:
            raise ValueError("Invalid value for `rcraids`, must not be `None`")

        self._rcraids = rcraids

    @property
    def rcra_informal_count(self):
        """Gets the rcra_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Resource Conservation and Recovery Act.

        :return: The rcra_informal_count of this Echo07.
        :rtype: str
        """
        return self._rcra_informal_count

    @rcra_informal_count.setter
    def rcra_informal_count(self, rcra_informal_count):
        """Sets the rcra_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Resource Conservation and Recovery Act.

        :param rcra_informal_count: The rcra_informal_count of this Echo07.
        :type rcra_informal_count: str
        """
        if rcra_informal_count is None:
            raise ValueError("Invalid value for `rcra_informal_count`, must not be `None`")

        self._rcra_informal_count = rcra_informal_count

    @property
    def rcra_inspection_count(self):
        """Gets the rcra_inspection_count of this Echo07.

        The number of inspections/compliance evaluations under the Resource Conservation and Recovery Act, occurring at the facility within the last five years

        :return: The rcra_inspection_count of this Echo07.
        :rtype: str
        """
        return self._rcra_inspection_count

    @rcra_inspection_count.setter
    def rcra_inspection_count(self, rcra_inspection_count):
        """Sets the rcra_inspection_count of this Echo07.

        The number of inspections/compliance evaluations under the Resource Conservation and Recovery Act, occurring at the facility within the last five years

        :param rcra_inspection_count: The rcra_inspection_count of this Echo07.
        :type rcra_inspection_count: str
        """
        if rcra_inspection_count is None:
            raise ValueError("Invalid value for `rcra_inspection_count`, must not be `None`")

        self._rcra_inspection_count = rcra_inspection_count

    @property
    def rcra_last_penalty_amt(self):
        """Gets the rcra_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the RCRA program database.

        :return: The rcra_last_penalty_amt of this Echo07.
        :rtype: str
        """
        return self._rcra_last_penalty_amt

    @rcra_last_penalty_amt.setter
    def rcra_last_penalty_amt(self, rcra_last_penalty_amt):
        """Sets the rcra_last_penalty_amt of this Echo07.

        The amount of the most recent penalty entered into the RCRA program database.

        :param rcra_last_penalty_amt: The rcra_last_penalty_amt of this Echo07.
        :type rcra_last_penalty_amt: str
        """
        if rcra_last_penalty_amt is None:
            raise ValueError("Invalid value for `rcra_last_penalty_amt`, must not be `None`")

        self._rcra_last_penalty_amt = rcra_last_penalty_amt

    @property
    def rcra_last_penalty_date(self):
        """Gets the rcra_last_penalty_date of this Echo07.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.

        :return: The rcra_last_penalty_date of this Echo07.
        :rtype: str
        """
        return self._rcra_last_penalty_date

    @rcra_last_penalty_date.setter
    def rcra_last_penalty_date(self, rcra_last_penalty_date):
        """Sets the rcra_last_penalty_date of this Echo07.

        Indicates the date on which the most recent assessed (or final) penalty was taken against the facility, entered in the RCRAInfo program database.

        :param rcra_last_penalty_date: The rcra_last_penalty_date of this Echo07.
        :type rcra_last_penalty_date: str
        """
        if rcra_last_penalty_date is None:
            raise ValueError("Invalid value for `rcra_last_penalty_date`, must not be `None`")

        self._rcra_last_penalty_date = rcra_last_penalty_date

    @property
    def rcranaics(self):
        """Gets the rcranaics of this Echo07.

        The RCRA permit's primary North American Industry Classification System (NAICS) Code.

        :return: The rcranaics of this Echo07.
        :rtype: str
        """
        return self._rcranaics

    @rcranaics.setter
    def rcranaics(self, rcranaics):
        """Sets the rcranaics of this Echo07.

        The RCRA permit's primary North American Industry Classification System (NAICS) Code.

        :param rcranaics: The rcranaics of this Echo07.
        :type rcranaics: str
        """
        if rcranaics is None:
            raise ValueError("Invalid value for `rcranaics`, must not be `None`")

        self._rcranaics = rcranaics

    @property
    def rcra_penalties(self):
        """Gets the rcra_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.

        :return: The rcra_penalties of this Echo07.
        :rtype: str
        """
        return self._rcra_penalties

    @rcra_penalties.setter
    def rcra_penalties(self, rcra_penalties):
        """Sets the rcra_penalties of this Echo07.

        The total dollar amount of assessed (or final) penalties taken against the facility within the last five years, entered in the RCRAInfo program database.

        :param rcra_penalties: The rcra_penalties of this Echo07.
        :type rcra_penalties: str
        """
        if rcra_penalties is None:
            raise ValueError("Invalid value for `rcra_penalties`, must not be `None`")

        self._rcra_penalties = rcra_penalties

    @property
    def rcra_permit_types(self):
        """Gets the rcra_permit_types of this Echo07.

        RCRA Facility Types include: - TSDF = Treatment, Storage and Disposal facility - LQG = Large Quantity Generator - SQG = Small Quantity Generator - CESQG = Conditionally-Exempt Small Quantity Generator - Operating TSDF - Transporters

        :return: The rcra_permit_types of this Echo07.
        :rtype: str
        """
        return self._rcra_permit_types

    @rcra_permit_types.setter
    def rcra_permit_types(self, rcra_permit_types):
        """Sets the rcra_permit_types of this Echo07.

        RCRA Facility Types include: - TSDF = Treatment, Storage and Disposal facility - LQG = Large Quantity Generator - SQG = Small Quantity Generator - CESQG = Conditionally-Exempt Small Quantity Generator - Operating TSDF - Transporters

        :param rcra_permit_types: The rcra_permit_types of this Echo07.
        :type rcra_permit_types: str
        """
        if rcra_permit_types is None:
            raise ValueError("Invalid value for `rcra_permit_types`, must not be `None`")

        self._rcra_permit_types = rcra_permit_types

    @property
    def rcra_qtrs_with_nc(self):
        """Gets the rcra_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.

        :return: The rcra_qtrs_with_nc of this Echo07.
        :rtype: str
        """
        return self._rcra_qtrs_with_nc

    @rcra_qtrs_with_nc.setter
    def rcra_qtrs_with_nc(self, rcra_qtrs_with_nc):
        """Sets the rcra_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the RCRA permit is considered in violation.

        :param rcra_qtrs_with_nc: The rcra_qtrs_with_nc of this Echo07.
        :type rcra_qtrs_with_nc: str
        """
        if rcra_qtrs_with_nc is None:
            raise ValueError("Invalid value for `rcra_qtrs_with_nc`, must not be `None`")

        self._rcra_qtrs_with_nc = rcra_qtrs_with_nc

    @property
    def rcrasnc_flag(self):
        """Gets the rcrasnc_flag of this Echo07.

        The RCRA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :return: The rcrasnc_flag of this Echo07.
        :rtype: str
        """
        return self._rcrasnc_flag

    @rcrasnc_flag.setter
    def rcrasnc_flag(self, rcrasnc_flag):
        """Sets the rcrasnc_flag of this Echo07.

        The RCRA Significant Non-compliance (SNC) status for the facility during the most recent quarter reflects the time the records were extracted from the program data systems. \"Y\" indicates the facility is in SNC for the permit or site in question and may pose a more severe level of environmental threat. \"N\" indicates the permit or site is not considered in SNC.

        :param rcrasnc_flag: The rcrasnc_flag of this Echo07.
        :type rcrasnc_flag: str
        """
        if rcrasnc_flag is None:
            raise ValueError("Invalid value for `rcrasnc_flag`, must not be `None`")

        self._rcrasnc_flag = rcrasnc_flag

    @property
    def registry_id(self):
        """Gets the registry_id of this Echo07.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :return: The registry_id of this Echo07.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Echo07.

        An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.

        :param registry_id: The registry_id of this Echo07.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def rmp_ids(self):
        """Gets the rmp_ids of this Echo07.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :return: The rmp_ids of this Echo07.
        :rtype: str
        """
        return self._rmp_ids

    @rmp_ids.setter
    def rmp_ids(self, rmp_ids):
        """Sets the rmp_ids of this Echo07.

        A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.

        :param rmp_ids: The rmp_ids of this Echo07.
        :type rmp_ids: str
        """
        if rmp_ids is None:
            raise ValueError("Invalid value for `rmp_ids`, must not be `None`")

        self._rmp_ids = rmp_ids

    @property
    def sdwa3yr_compl_qtrs_history(self):
        """Gets the sdwa3yr_compl_qtrs_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined

        :return: The sdwa3yr_compl_qtrs_history of this Echo07.
        :rtype: str
        """
        return self._sdwa3yr_compl_qtrs_history

    @sdwa3yr_compl_qtrs_history.setter
    def sdwa3yr_compl_qtrs_history(self, sdwa3yr_compl_qtrs_history):
        """Sets the sdwa3yr_compl_qtrs_history of this Echo07.

        The system's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ - No Violation Identified V - Noncompliance S - Significant Noncompliance U - Undetermined

        :param sdwa3yr_compl_qtrs_history: The sdwa3yr_compl_qtrs_history of this Echo07.
        :type sdwa3yr_compl_qtrs_history: str
        """
        if sdwa3yr_compl_qtrs_history is None:
            raise ValueError("Invalid value for `sdwa3yr_compl_qtrs_history`, must not be `None`")

        self._sdwa3yr_compl_qtrs_history = sdwa3yr_compl_qtrs_history

    @property
    def sdwa_compliance_status(self):
        """Gets the sdwa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Safe Drinking Water Act (Serious Violator, Noncompliance, or No Violation).

        :return: The sdwa_compliance_status of this Echo07.
        :rtype: str
        """
        return self._sdwa_compliance_status

    @sdwa_compliance_status.setter
    def sdwa_compliance_status(self, sdwa_compliance_status):
        """Sets the sdwa_compliance_status of this Echo07.

        An indication of the facility's compliance status under the Safe Drinking Water Act (Serious Violator, Noncompliance, or No Violation).

        :param sdwa_compliance_status: The sdwa_compliance_status of this Echo07.
        :type sdwa_compliance_status: str
        """
        if sdwa_compliance_status is None:
            raise ValueError("Invalid value for `sdwa_compliance_status`, must not be `None`")

        self._sdwa_compliance_status = sdwa_compliance_status

    @property
    def sdwa_formal_action_count(self):
        """Gets the sdwa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Safe Drinking Water Act

        :return: The sdwa_formal_action_count of this Echo07.
        :rtype: str
        """
        return self._sdwa_formal_action_count

    @sdwa_formal_action_count.setter
    def sdwa_formal_action_count(self, sdwa_formal_action_count):
        """Sets the sdwa_formal_action_count of this Echo07.

        Indicates the number of enforcement actions taken against the facility within the last five years under the Safe Drinking Water Act

        :param sdwa_formal_action_count: The sdwa_formal_action_count of this Echo07.
        :type sdwa_formal_action_count: str
        """
        if sdwa_formal_action_count is None:
            raise ValueError("Invalid value for `sdwa_formal_action_count`, must not be `None`")

        self._sdwa_formal_action_count = sdwa_formal_action_count

    @property
    def sdwaids(self):
        """Gets the sdwaids of this Echo07.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :return: The sdwaids of this Echo07.
        :rtype: str
        """
        return self._sdwaids

    @sdwaids.setter
    def sdwaids(self, sdwaids):
        """Sets the sdwaids of this Echo07.

        A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).

        :param sdwaids: The sdwaids of this Echo07.
        :type sdwaids: str
        """
        if sdwaids is None:
            raise ValueError("Invalid value for `sdwaids`, must not be `None`")

        self._sdwaids = sdwaids

    @property
    def sdwa_informal_count(self):
        """Gets the sdwa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Safe Drinking Water Act

        :return: The sdwa_informal_count of this Echo07.
        :rtype: str
        """
        return self._sdwa_informal_count

    @sdwa_informal_count.setter
    def sdwa_informal_count(self, sdwa_informal_count):
        """Sets the sdwa_informal_count of this Echo07.

        Indicates the number of informal enforcement actions/notices of violations (NOVs) taken against the facility within the last five years under the Safe Drinking Water Act

        :param sdwa_informal_count: The sdwa_informal_count of this Echo07.
        :type sdwa_informal_count: str
        """
        if sdwa_informal_count is None:
            raise ValueError("Invalid value for `sdwa_informal_count`, must not be `None`")

        self._sdwa_informal_count = sdwa_informal_count

    @property
    def sdwa_inspections5yr(self):
        """Gets the sdwa_inspections5yr of this Echo07.

        The number of SDWA inspections at the facility in the past five years.

        :return: The sdwa_inspections5yr of this Echo07.
        :rtype: str
        """
        return self._sdwa_inspections5yr

    @sdwa_inspections5yr.setter
    def sdwa_inspections5yr(self, sdwa_inspections5yr):
        """Sets the sdwa_inspections5yr of this Echo07.

        The number of SDWA inspections at the facility in the past five years.

        :param sdwa_inspections5yr: The sdwa_inspections5yr of this Echo07.
        :type sdwa_inspections5yr: str
        """
        if sdwa_inspections5yr is None:
            raise ValueError("Invalid value for `sdwa_inspections5yr`, must not be `None`")

        self._sdwa_inspections5yr = sdwa_inspections5yr

    @property
    def sdwa_qtrs_with_nc(self):
        """Gets the sdwa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the SDWA permit is considered in violation.

        :return: The sdwa_qtrs_with_nc of this Echo07.
        :rtype: str
        """
        return self._sdwa_qtrs_with_nc

    @sdwa_qtrs_with_nc.setter
    def sdwa_qtrs_with_nc(self, sdwa_qtrs_with_nc):
        """Sets the sdwa_qtrs_with_nc of this Echo07.

        The number of quarters, out of the last twelve quarters, in which the SDWA permit is considered in violation.

        :param sdwa_qtrs_with_nc: The sdwa_qtrs_with_nc of this Echo07.
        :type sdwa_qtrs_with_nc: str
        """
        if sdwa_qtrs_with_nc is None:
            raise ValueError("Invalid value for `sdwa_qtrs_with_nc`, must not be `None`")

        self._sdwa_qtrs_with_nc = sdwa_qtrs_with_nc

    @property
    def sdwasnc_flag(self):
        """Gets the sdwasnc_flag of this Echo07.

        Indicates whether the Water System has a Serious Violation.

        :return: The sdwasnc_flag of this Echo07.
        :rtype: str
        """
        return self._sdwasnc_flag

    @sdwasnc_flag.setter
    def sdwasnc_flag(self, sdwasnc_flag):
        """Sets the sdwasnc_flag of this Echo07.

        Indicates whether the Water System has a Serious Violation.

        :param sdwasnc_flag: The sdwasnc_flag of this Echo07.
        :type sdwasnc_flag: str
        """
        if sdwasnc_flag is None:
            raise ValueError("Invalid value for `sdwasnc_flag`, must not be `None`")

        self._sdwasnc_flag = sdwasnc_flag

    @property
    def sdwa_system_types(self):
        """Gets the sdwa_system_types of this Echo07.

        SDWIS System Types

        :return: The sdwa_system_types of this Echo07.
        :rtype: str
        """
        return self._sdwa_system_types

    @sdwa_system_types.setter
    def sdwa_system_types(self, sdwa_system_types):
        """Sets the sdwa_system_types of this Echo07.

        SDWIS System Types

        :param sdwa_system_types: The sdwa_system_types of this Echo07.
        :type sdwa_system_types: str
        """
        if sdwa_system_types is None:
            raise ValueError("Invalid value for `sdwa_system_types`, must not be `None`")

        self._sdwa_system_types = sdwa_system_types

    @property
    def sdwis_flag(self):
        """Gets the sdwis_flag of this Echo07.

        Indicates whether the facility has a Safe Drinking Water Information System (SDWIS) ID.

        :return: The sdwis_flag of this Echo07.
        :rtype: str
        """
        return self._sdwis_flag

    @sdwis_flag.setter
    def sdwis_flag(self, sdwis_flag):
        """Sets the sdwis_flag of this Echo07.

        Indicates whether the facility has a Safe Drinking Water Information System (SDWIS) ID.

        :param sdwis_flag: The sdwis_flag of this Echo07.
        :type sdwis_flag: str
        """
        if sdwis_flag is None:
            raise ValueError("Invalid value for `sdwis_flag`, must not be `None`")

        self._sdwis_flag = sdwis_flag

    @property
    def score(self):
        """Gets the score of this Echo07.


        :return: The score of this Echo07.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Echo07.


        :param score: The score of this Echo07.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sems_flag(self):
        """Gets the sems_flag of this Echo07.


        :return: The sems_flag of this Echo07.
        :rtype: str
        """
        return self._sems_flag

    @sems_flag.setter
    def sems_flag(self, sems_flag):
        """Sets the sems_flag of this Echo07.


        :param sems_flag: The sems_flag of this Echo07.
        :type sems_flag: str
        """
        if sems_flag is None:
            raise ValueError("Invalid value for `sems_flag`, must not be `None`")

        self._sems_flag = sems_flag

    @property
    def sems_ids(self):
        """Gets the sems_ids of this Echo07.


        :return: The sems_ids of this Echo07.
        :rtype: str
        """
        return self._sems_ids

    @sems_ids.setter
    def sems_ids(self, sems_ids):
        """Sets the sems_ids of this Echo07.


        :param sems_ids: The sems_ids of this Echo07.
        :type sems_ids: str
        """
        if sems_ids is None:
            raise ValueError("Invalid value for `sems_ids`, must not be `None`")

        self._sems_ids = sems_ids

    @property
    def source_id(self):
        """Gets the source_id of this Echo07.

        Unique Identifier assigned by EPA.

        :return: The source_id of this Echo07.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Echo07.

        Unique Identifier assigned by EPA.

        :param source_id: The source_id of this Echo07.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def tri_flag(self):
        """Gets the tri_flag of this Echo07.

        Indicates whether the facility has a Toxics Release Inventory (TRI) permit.

        :return: The tri_flag of this Echo07.
        :rtype: str
        """
        return self._tri_flag

    @tri_flag.setter
    def tri_flag(self, tri_flag):
        """Sets the tri_flag of this Echo07.

        Indicates whether the facility has a Toxics Release Inventory (TRI) permit.

        :param tri_flag: The tri_flag of this Echo07.
        :type tri_flag: str
        """
        if tri_flag is None:
            raise ValueError("Invalid value for `tri_flag`, must not be `None`")

        self._tri_flag = tri_flag

    @property
    def triids(self):
        """Gets the triids of this Echo07.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :return: The triids of this Echo07.
        :rtype: str
        """
        return self._triids

    @triids.setter
    def triids(self, triids):
        """Sets the triids of this Echo07.

        A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ = ZIP code, NNNNN = the first 5 consonants of the name, and SSSSS = the first 5 non-blank non-special characters in the street address.

        :param triids: The triids of this Echo07.
        :type triids: str
        """
        if triids is None:
            raise ValueError("Invalid value for `triids`, must not be `None`")

        self._triids = triids

    @property
    def tri_off_site_transfers(self):
        """Gets the tri_off_site_transfers of this Echo07.

        Total pounds per year transferred off-site.

        :return: The tri_off_site_transfers of this Echo07.
        :rtype: str
        """
        return self._tri_off_site_transfers

    @tri_off_site_transfers.setter
    def tri_off_site_transfers(self, tri_off_site_transfers):
        """Sets the tri_off_site_transfers of this Echo07.

        Total pounds per year transferred off-site.

        :param tri_off_site_transfers: The tri_off_site_transfers of this Echo07.
        :type tri_off_site_transfers: str
        """
        if tri_off_site_transfers is None:
            raise ValueError("Invalid value for `tri_off_site_transfers`, must not be `None`")

        self._tri_off_site_transfers = tri_off_site_transfers

    @property
    def trion_site_releases(self):
        """Gets the trion_site_releases of this Echo07.

        Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.

        :return: The trion_site_releases of this Echo07.
        :rtype: str
        """
        return self._trion_site_releases

    @trion_site_releases.setter
    def trion_site_releases(self, trion_site_releases):
        """Sets the trion_site_releases of this Echo07.

        Total pounds per year released for Air Emissions, Surface Water Discharges, Underground Injections and Releases to Land.

        :param trion_site_releases: The trion_site_releases of this Echo07.
        :type trion_site_releases: str
        """
        if trion_site_releases is None:
            raise ValueError("Invalid value for `trion_site_releases`, must not be `None`")

        self._trion_site_releases = trion_site_releases

    @property
    def tri_releases_transfers(self):
        """Gets the tri_releases_transfers of this Echo07.

        Total chemical releases, in pounds, as reported to the Toxics Release Inventory (TRI) by the facility for the most recent reporting year

        :return: The tri_releases_transfers of this Echo07.
        :rtype: str
        """
        return self._tri_releases_transfers

    @tri_releases_transfers.setter
    def tri_releases_transfers(self, tri_releases_transfers):
        """Sets the tri_releases_transfers of this Echo07.

        Total chemical releases, in pounds, as reported to the Toxics Release Inventory (TRI) by the facility for the most recent reporting year

        :param tri_releases_transfers: The tri_releases_transfers of this Echo07.
        :type tri_releases_transfers: str
        """
        if tri_releases_transfers is None:
            raise ValueError("Invalid value for `tri_releases_transfers`, must not be `None`")

        self._tri_releases_transfers = tri_releases_transfers

    @property
    def tri_reporter(self):
        """Gets the tri_reporter of this Echo07.

        Indicates whether or not the facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :return: The tri_reporter of this Echo07.
        :rtype: str
        """
        return self._tri_reporter

    @tri_reporter.setter
    def tri_reporter(self, tri_reporter):
        """Sets the tri_reporter of this Echo07.

        Indicates whether or not the facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.

        :param tri_reporter: The tri_reporter of this Echo07.
        :type tri_reporter: str
        """
        if tri_reporter is None:
            raise ValueError("Invalid value for `tri_reporter`, must not be `None`")

        self._tri_reporter = tri_reporter

    @property
    def tri_reporter_in_past(self):
        """Gets the tri_reporter_in_past of this Echo07.

        A 'Y' indicates a TRI Reporter from a prior year.

        :return: The tri_reporter_in_past of this Echo07.
        :rtype: str
        """
        return self._tri_reporter_in_past

    @tri_reporter_in_past.setter
    def tri_reporter_in_past(self, tri_reporter_in_past):
        """Sets the tri_reporter_in_past of this Echo07.

        A 'Y' indicates a TRI Reporter from a prior year.

        :param tri_reporter_in_past: The tri_reporter_in_past of this Echo07.
        :type tri_reporter_in_past: str
        """
        if tri_reporter_in_past is None:
            raise ValueError("Invalid value for `tri_reporter_in_past`, must not be `None`")

        self._tri_reporter_in_past = tri_reporter_in_past

    @property
    def tr_ibal_flag(self):
        """Gets the tr_ibal_flag of this Echo07.

        A flag indicating that the facility is within a tribal area.

        :return: The tr_ibal_flag of this Echo07.
        :rtype: str
        """
        return self._tr_ibal_flag

    @tr_ibal_flag.setter
    def tr_ibal_flag(self, tr_ibal_flag):
        """Sets the tr_ibal_flag of this Echo07.

        A flag indicating that the facility is within a tribal area.

        :param tr_ibal_flag: The tr_ibal_flag of this Echo07.
        :type tr_ibal_flag: str
        """
        if tr_ibal_flag is None:
            raise ValueError("Invalid value for `tr_ibal_flag`, must not be `None`")

        self._tr_ibal_flag = tr_ibal_flag

    @property
    def tsca_flag(self):
        """Gets the tsca_flag of this Echo07.

        Flag indicating whether or not a facility has a TSCA ID

        :return: The tsca_flag of this Echo07.
        :rtype: str
        """
        return self._tsca_flag

    @tsca_flag.setter
    def tsca_flag(self, tsca_flag):
        """Sets the tsca_flag of this Echo07.

        Flag indicating whether or not a facility has a TSCA ID

        :param tsca_flag: The tsca_flag of this Echo07.
        :type tsca_flag: str
        """
        if tsca_flag is None:
            raise ValueError("Invalid value for `tsca_flag`, must not be `None`")

        self._tsca_flag = tsca_flag

    @property
    def tsca_ids(self):
        """Gets the tsca_ids of this Echo07.

        Toxic Substances Control Act ID assigned to a facility

        :return: The tsca_ids of this Echo07.
        :rtype: str
        """
        return self._tsca_ids

    @tsca_ids.setter
    def tsca_ids(self, tsca_ids):
        """Sets the tsca_ids of this Echo07.

        Toxic Substances Control Act ID assigned to a facility

        :param tsca_ids: The tsca_ids of this Echo07.
        :type tsca_ids: str
        """
        if tsca_ids is None:
            raise ValueError("Invalid value for `tsca_ids`, must not be `None`")

        self._tsca_ids = tsca_ids

    @property
    def tsca_inspections5yr(self):
        """Gets the tsca_inspections5yr of this Echo07.

        From ICIS FE&C, the number of TSCA inspections at the facility in the past five years.

        :return: The tsca_inspections5yr of this Echo07.
        :rtype: str
        """
        return self._tsca_inspections5yr

    @tsca_inspections5yr.setter
    def tsca_inspections5yr(self, tsca_inspections5yr):
        """Sets the tsca_inspections5yr of this Echo07.

        From ICIS FE&C, the number of TSCA inspections at the facility in the past five years.

        :param tsca_inspections5yr: The tsca_inspections5yr of this Echo07.
        :type tsca_inspections5yr: str
        """
        if tsca_inspections5yr is None:
            raise ValueError("Invalid value for `tsca_inspections5yr`, must not be `None`")

        self._tsca_inspections5yr = tsca_inspections5yr

    @property
    def viol_flag(self):
        """Gets the viol_flag of this Echo07.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :return: The viol_flag of this Echo07.
        :rtype: str
        """
        return self._viol_flag

    @viol_flag.setter
    def viol_flag(self, viol_flag):
        """Sets the viol_flag of this Echo07.

        Indicates if the facility had a violation within the last 3 years. 1 = Yes

        :param viol_flag: The viol_flag of this Echo07.
        :type viol_flag: str
        """
        if viol_flag is None:
            raise ValueError("Invalid value for `viol_flag`, must not be `None`")

        self._viol_flag = viol_flag

    @property
    def web_docs(self):
        """Gets the web_docs of this Echo07.

        Contains flags that identify what web accessible documents are available for the facility.

        :return: The web_docs of this Echo07.
        :rtype: str
        """
        return self._web_docs

    @web_docs.setter
    def web_docs(self, web_docs):
        """Sets the web_docs of this Echo07.

        Contains flags that identify what web accessible documents are available for the facility.

        :param web_docs: The web_docs of this Echo07.
        :type web_docs: str
        """
        if web_docs is None:
            raise ValueError("Invalid value for `web_docs`, must not be `None`")

        self._web_docs = web_docs
