/**
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - All Data
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use.  ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.    ECHO Rest Services provide multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated as Clean Air Act (CAA) stationary sources, Clean Water Act (CWA) dischargers, Resource Conservation and Recovery Act (RCRA) hazardous waste generators/handlers, and Safe Drinking Water Act (SDWA) public water systems.  Data of interest from other EPA sources, such as the Toxics Release Inventory, is also supplied for context.   \\ The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained.     The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities. \\ The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is: \\  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes.  <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results.  <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria.  <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria. \\ \\ Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.  \\ Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>  
 *
 * The version of the OpenAPI document: 2019.10.15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcho01.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcho01::OAIEcho01(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcho01::OAIEcho01() {
    this->initializeModel();
}

OAIEcho01::~OAIEcho01() {}

void OAIEcho01::initializeModel() {

    m_ca_astatus_isSet = false;
    m_ca_astatus_isValid = false;

    m_cw_astatus_isSet = false;
    m_cw_astatus_isValid = false;

    m_formal_count_isSet = false;
    m_formal_count_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_informal_count_isSet = false;
    m_informal_count_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_last_insp_isSet = false;
    m_last_insp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_puv_isSet = false;
    m_puv_isValid = false;

    m_rcr_astatus_isSet = false;
    m_rcr_astatus_isValid = false;

    m_sdw_astatus_isSet = false;
    m_sdw_astatus_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEcho01::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcho01::fromJsonObject(QJsonObject json) {

    m_ca_astatus_isValid = ::OpenAPI::fromJsonValue(m_ca_astatus, json[QString("CAAstatus")]);
    m_ca_astatus_isSet = !json[QString("CAAstatus")].isNull() && m_ca_astatus_isValid;

    m_cw_astatus_isValid = ::OpenAPI::fromJsonValue(m_cw_astatus, json[QString("CWAstatus")]);
    m_cw_astatus_isSet = !json[QString("CWAstatus")].isNull() && m_cw_astatus_isValid;

    m_formal_count_isValid = ::OpenAPI::fromJsonValue(m_formal_count, json[QString("FormalCount")]);
    m_formal_count_isSet = !json[QString("FormalCount")].isNull() && m_formal_count_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("ICON")]);
    m_icon_isSet = !json[QString("ICON")].isNull() && m_icon_isValid;

    m_informal_count_isValid = ::OpenAPI::fromJsonValue(m_informal_count, json[QString("InformalCount")]);
    m_informal_count_isSet = !json[QString("InformalCount")].isNull() && m_informal_count_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("LAT")]);
    m_lat_isSet = !json[QString("LAT")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("LON")]);
    m_lon_isSet = !json[QString("LON")].isNull() && m_lon_isValid;

    m_last_insp_isValid = ::OpenAPI::fromJsonValue(m_last_insp, json[QString("LastInsp")]);
    m_last_insp_isSet = !json[QString("LastInsp")].isNull() && m_last_insp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("NAME")]);
    m_name_isSet = !json[QString("NAME")].isNull() && m_name_isValid;

    m_puv_isValid = ::OpenAPI::fromJsonValue(m_puv, json[QString("PUV")]);
    m_puv_isSet = !json[QString("PUV")].isNull() && m_puv_isValid;

    m_rcr_astatus_isValid = ::OpenAPI::fromJsonValue(m_rcr_astatus, json[QString("RCRAstatus")]);
    m_rcr_astatus_isSet = !json[QString("RCRAstatus")].isNull() && m_rcr_astatus_isValid;

    m_sdw_astatus_isValid = ::OpenAPI::fromJsonValue(m_sdw_astatus, json[QString("SDWAstatus")]);
    m_sdw_astatus_isSet = !json[QString("SDWAstatus")].isNull() && m_sdw_astatus_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("TYPE")]);
    m_type_isSet = !json[QString("TYPE")].isNull() && m_type_isValid;
}

QString OAIEcho01::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcho01::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_astatus_isSet) {
        obj.insert(QString("CAAstatus"), ::OpenAPI::toJsonValue(m_ca_astatus));
    }
    if (m_cw_astatus_isSet) {
        obj.insert(QString("CWAstatus"), ::OpenAPI::toJsonValue(m_cw_astatus));
    }
    if (m_formal_count_isSet) {
        obj.insert(QString("FormalCount"), ::OpenAPI::toJsonValue(m_formal_count));
    }
    if (m_icon_isSet) {
        obj.insert(QString("ICON"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_informal_count_isSet) {
        obj.insert(QString("InformalCount"), ::OpenAPI::toJsonValue(m_informal_count));
    }
    if (m_lat_isSet) {
        obj.insert(QString("LAT"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("LON"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_last_insp_isSet) {
        obj.insert(QString("LastInsp"), ::OpenAPI::toJsonValue(m_last_insp));
    }
    if (m_name_isSet) {
        obj.insert(QString("NAME"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_puv_isSet) {
        obj.insert(QString("PUV"), ::OpenAPI::toJsonValue(m_puv));
    }
    if (m_rcr_astatus_isSet) {
        obj.insert(QString("RCRAstatus"), ::OpenAPI::toJsonValue(m_rcr_astatus));
    }
    if (m_sdw_astatus_isSet) {
        obj.insert(QString("SDWAstatus"), ::OpenAPI::toJsonValue(m_sdw_astatus));
    }
    if (m_type_isSet) {
        obj.insert(QString("TYPE"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEcho01::getCaAstatus() const {
    return m_ca_astatus;
}
void OAIEcho01::setCaAstatus(const QString &ca_astatus) {
    m_ca_astatus = ca_astatus;
    m_ca_astatus_isSet = true;
}

bool OAIEcho01::is_ca_astatus_Set() const{
    return m_ca_astatus_isSet;
}

bool OAIEcho01::is_ca_astatus_Valid() const{
    return m_ca_astatus_isValid;
}

QString OAIEcho01::getCwAstatus() const {
    return m_cw_astatus;
}
void OAIEcho01::setCwAstatus(const QString &cw_astatus) {
    m_cw_astatus = cw_astatus;
    m_cw_astatus_isSet = true;
}

bool OAIEcho01::is_cw_astatus_Set() const{
    return m_cw_astatus_isSet;
}

bool OAIEcho01::is_cw_astatus_Valid() const{
    return m_cw_astatus_isValid;
}

QString OAIEcho01::getFormalCount() const {
    return m_formal_count;
}
void OAIEcho01::setFormalCount(const QString &formal_count) {
    m_formal_count = formal_count;
    m_formal_count_isSet = true;
}

bool OAIEcho01::is_formal_count_Set() const{
    return m_formal_count_isSet;
}

bool OAIEcho01::is_formal_count_Valid() const{
    return m_formal_count_isValid;
}

QString OAIEcho01::getIcon() const {
    return m_icon;
}
void OAIEcho01::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIEcho01::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIEcho01::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIEcho01::getInformalCount() const {
    return m_informal_count;
}
void OAIEcho01::setInformalCount(const QString &informal_count) {
    m_informal_count = informal_count;
    m_informal_count_isSet = true;
}

bool OAIEcho01::is_informal_count_Set() const{
    return m_informal_count_isSet;
}

bool OAIEcho01::is_informal_count_Valid() const{
    return m_informal_count_isValid;
}

QString OAIEcho01::getLat() const {
    return m_lat;
}
void OAIEcho01::setLat(const QString &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIEcho01::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIEcho01::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAIEcho01::getLon() const {
    return m_lon;
}
void OAIEcho01::setLon(const QString &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIEcho01::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIEcho01::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIEcho01::getLastInsp() const {
    return m_last_insp;
}
void OAIEcho01::setLastInsp(const QString &last_insp) {
    m_last_insp = last_insp;
    m_last_insp_isSet = true;
}

bool OAIEcho01::is_last_insp_Set() const{
    return m_last_insp_isSet;
}

bool OAIEcho01::is_last_insp_Valid() const{
    return m_last_insp_isValid;
}

QString OAIEcho01::getName() const {
    return m_name;
}
void OAIEcho01::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEcho01::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEcho01::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEcho01::getPuv() const {
    return m_puv;
}
void OAIEcho01::setPuv(const QString &puv) {
    m_puv = puv;
    m_puv_isSet = true;
}

bool OAIEcho01::is_puv_Set() const{
    return m_puv_isSet;
}

bool OAIEcho01::is_puv_Valid() const{
    return m_puv_isValid;
}

QString OAIEcho01::getRcrAstatus() const {
    return m_rcr_astatus;
}
void OAIEcho01::setRcrAstatus(const QString &rcr_astatus) {
    m_rcr_astatus = rcr_astatus;
    m_rcr_astatus_isSet = true;
}

bool OAIEcho01::is_rcr_astatus_Set() const{
    return m_rcr_astatus_isSet;
}

bool OAIEcho01::is_rcr_astatus_Valid() const{
    return m_rcr_astatus_isValid;
}

QString OAIEcho01::getSdwAstatus() const {
    return m_sdw_astatus;
}
void OAIEcho01::setSdwAstatus(const QString &sdw_astatus) {
    m_sdw_astatus = sdw_astatus;
    m_sdw_astatus_isSet = true;
}

bool OAIEcho01::is_sdw_astatus_Set() const{
    return m_sdw_astatus_isSet;
}

bool OAIEcho01::is_sdw_astatus_Valid() const{
    return m_sdw_astatus_isValid;
}

QString OAIEcho01::getType() const {
    return m_type;
}
void OAIEcho01::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEcho01::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEcho01::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEcho01::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_astatus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cw_astatus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_informal_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_insp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_puv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcr_astatus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdw_astatus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcho01::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ca_astatus_isValid && m_cw_astatus_isValid && m_formal_count_isValid && m_icon_isValid && m_informal_count_isValid && m_lat_isValid && m_lon_isValid && m_last_insp_isValid && m_name_isValid && m_puv_isValid && m_rcr_astatus_isValid && m_sdw_astatus_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
